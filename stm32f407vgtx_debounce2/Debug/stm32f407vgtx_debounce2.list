
stm32f407vgtx_debounce2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001942c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003980  080195bc  080195bc  000295bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf3c  0801cf3c  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801cf3c  0801cf3c  0002cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf44  0801cf44  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf44  0801cf44  0002cf44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cf48  0801cf48  0002cf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801cf4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000c45c  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  2000c4e0  2000c4e0  00030084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035142  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008445  00000000  00000000  000651f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002658  00000000  00000000  0006d638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024b0  00000000  00000000  0006fc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003393d  00000000  00000000  00072140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a243  00000000  00000000  000a5a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f17bc  00000000  00000000  000dfcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d147c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a7b0  00000000  00000000  001d14cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  001dbc7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080195a4 	.word	0x080195a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080195a4 	.word	0x080195a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14d      	bne.n	800035c <__udivmoddi4+0xac>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d968      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b152      	cbz	r2, 80002e2 <__udivmoddi4+0x32>
 80002cc:	fa01 f302 	lsl.w	r3, r1, r2
 80002d0:	f1c2 0120 	rsb	r1, r2, #32
 80002d4:	fa20 f101 	lsr.w	r1, r0, r1
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	ea41 0803 	orr.w	r8, r1, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fbb8 fef5 	udiv	lr, r8, r5
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	fb05 831e 	mls	r3, r5, lr, r8
 80002f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f8:	fb0e f107 	mul.w	r1, lr, r7
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d90b      	bls.n	8000318 <__udivmoddi4+0x68>
 8000300:	eb1c 0303 	adds.w	r3, ip, r3
 8000304:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000308:	f080 811e 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030c:	4299      	cmp	r1, r3
 800030e:	f240 811b 	bls.w	8000548 <__udivmoddi4+0x298>
 8000312:	f1ae 0e02 	sub.w	lr, lr, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000320:	fb05 3310 	mls	r3, r5, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x96>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 8108 	bcs.w	800054c <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8105 	bls.w	800054c <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034c:	2100      	movs	r1, #0
 800034e:	b11e      	cbz	r6, 8000358 <__udivmoddi4+0xa8>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c6 4300 	strd	r4, r3, [r6]
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0xc2>
 8000360:	2e00      	cmp	r6, #0
 8000362:	f000 80ee 	beq.w	8000542 <__udivmoddi4+0x292>
 8000366:	2100      	movs	r1, #0
 8000368:	e9c6 0500 	strd	r0, r5, [r6]
 800036c:	4608      	mov	r0, r1
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb65 0303 	sbc.w	r3, r5, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e2      	beq.n	8000358 <__udivmoddi4+0xa8>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7df      	b.n	8000358 <__udivmoddi4+0xa8>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8091 	bne.w	80004c8 <__udivmoddi4+0x218>
 80003a6:	eba1 050c 	sub.w	r5, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003b8:	fb07 5013 	mls	r0, r7, r3, r5
 80003bc:	0c25      	lsrs	r5, r4, #16
 80003be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0505 	adds.w	r5, ip, r5
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a2d      	subs	r5, r5, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003e4:	fb07 5510 	mls	r5, r7, r0, r5
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4628      	mov	r0, r5
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79e      	b.n	800034e <__udivmoddi4+0x9e>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa05 f301 	lsl.w	r3, r5, r1
 8000426:	431c      	orrs	r4, r3
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f301 	lsl.w	r3, r0, r1
 8000432:	fbb5 f8f9 	udiv	r8, r5, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 5518 	mls	r5, r9, r8, r5
 8000440:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	42a8      	cmp	r0, r5
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0505 	adds.w	r5, ip, r5
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	42a8      	cmp	r0, r5
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4465      	add	r5, ip
 8000468:	1a2d      	subs	r5, r5, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000470:	fb09 5510 	mls	r5, r9, r0, r5
 8000474:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	45ae      	cmp	lr, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	45ae      	cmp	lr, r5
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba5 050e 	sub.w	r5, r5, lr
 800049e:	42a5      	cmp	r5, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15e      	cbz	r6, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb65 050e 	sbc.w	r5, r5, lr
 80004b2:	fa05 f707 	lsl.w	r7, r5, r7
 80004b6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c6 7500 	strd	r7, r5, [r6]
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c2 0320 	rsb	r3, r2, #32
 80004cc:	fa20 f103 	lsr.w	r1, r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa25 f303 	lsr.w	r3, r5, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	430d      	orrs	r5, r1
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004e8:	fb07 3011 	mls	r0, r7, r1, r3
 80004ec:	0c2b      	lsrs	r3, r5, #16
 80004ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004f2:	fb01 f00e 	mul.w	r0, r1, lr
 80004f6:	4298      	cmp	r0, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f101 38ff 	add.w	r8, r1, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	4298      	cmp	r0, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3902      	subs	r1, #2
 800050e:	4463      	add	r3, ip
 8000510:	1a1b      	subs	r3, r3, r0
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3310 	mls	r3, r7, r0, r3
 800051c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000520:	fb00 f30e 	mul.w	r3, r0, lr
 8000524:	42ab      	cmp	r3, r5
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0505 	adds.w	r5, ip, r5
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3802      	subs	r0, #2
 8000538:	4465      	add	r5, ip
 800053a:	1aed      	subs	r5, r5, r3
 800053c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e707      	b.n	8000358 <__udivmoddi4+0xa8>
 8000548:	4686      	mov	lr, r0
 800054a:	e6e5      	b.n	8000318 <__udivmoddi4+0x68>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fa      	b.n	8000346 <__udivmoddi4+0x96>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4640      	mov	r0, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4641      	mov	r1, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4465      	add	r5, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4608      	mov	r0, r1
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x28>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	200000a0 	.word	0x200000a0
 80005b0:	20000154 	.word	0x20000154

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fb9f 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f81b 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f883 	bl	80006cc <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <main+0x3c>)
 80005c8:	1d3c      	adds	r4, r7, #4
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  //osKernelInitialize();

  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f006 f9bf 	bl	8006960 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <main+0x40>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f006 f9a3 	bl	8006932 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x38>
 80005ee:	bf00      	nop
 80005f0:	080195c8 	.word	0x080195c8
 80005f4:	20000354 	.word	0x20000354

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f018 f936 	bl	8018878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800066c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fd02 	bl	8003088 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068a:	f000 f8c3 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2105      	movs	r1, #5
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 ff63 	bl	8003578 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b8:	f000 f8ac 	bl	8000814 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <MX_GPIO_Init+0x100>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a38      	ldr	r2, [pc, #224]	; (80007cc <MX_GPIO_Init+0x100>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b36      	ldr	r3, [pc, #216]	; (80007cc <MX_GPIO_Init+0x100>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <MX_GPIO_Init+0x100>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a31      	ldr	r2, [pc, #196]	; (80007cc <MX_GPIO_Init+0x100>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <MX_GPIO_Init+0x100>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0x100>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <MX_GPIO_Init+0x100>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0x100>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_GPIO_Init+0x100>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a23      	ldr	r2, [pc, #140]	; (80007cc <MX_GPIO_Init+0x100>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0x100>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_GPIO_Init+0x100>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_GPIO_Init+0x100>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_GPIO_Init+0x100>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000774:	4816      	ldr	r0, [pc, #88]	; (80007d0 <MX_GPIO_Init+0x104>)
 8000776:	f001 fbd9 	bl	8001f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x108>)
 8000790:	f001 fa32 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000794:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <MX_GPIO_Init+0x104>)
 80007ae:	f001 fa23 	bl	8001bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2105      	movs	r1, #5
 80007b6:	2006      	movs	r0, #6
 80007b8:	f000 fbb7 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007bc:	2006      	movs	r0, #6
 80007be:	f000 fbd0 	bl	8000f62 <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	40020000 	.word	0x40020000

080007d8 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
//extern void StartDefaultTask(void const * argument)
void StartDefaultTask(void const * argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();

  /* init code for LWIP */
  MX_LWIP_Init();
 80007e0:	f004 fc18 	bl	8005014 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  START_TEST();
 80007e4:	f000 f9f2 	bl	8000bcc <START_TEST>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f006 f905 	bl	80069f8 <osDelay>
 80007ee:	e7fb      	b.n	80007e8 <StartDefaultTask+0x10>

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 fa9d 	bl	8000d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010000 	.word	0x40010000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_MspInit+0x54>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_MspInit+0x54>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x54>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_MspInit+0x54>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_MspInit+0x54>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x54>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	210f      	movs	r1, #15
 8000862:	f06f 0001 	mvn.w	r0, #1
 8000866:	f000 fb60 	bl	8000f2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	2019      	movs	r0, #25
 800088e:	f000 fb4c 	bl	8000f2a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000892:	2019      	movs	r0, #25
 8000894:	f000 fb65 	bl	8000f62 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <HAL_InitTick+0xa4>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a0:	4a1e      	ldr	r2, [pc, #120]	; (800091c <HAL_InitTick+0xa4>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6453      	str	r3, [r2, #68]	; 0x44
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_InitTick+0xa4>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b4:	f107 0210 	add.w	r2, r7, #16
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 f86a 	bl	8003998 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008c4:	f003 f854 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 80008c8:	4603      	mov	r3, r0
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d0:	4a13      	ldr	r2, [pc, #76]	; (8000920 <HAL_InitTick+0xa8>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	0c9b      	lsrs	r3, r3, #18
 80008d8:	3b01      	subs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_InitTick+0xac>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <HAL_InitTick+0xb0>)
 80008e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_InitTick+0xac>)
 80008e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_InitTick+0xac>)
 80008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_InitTick+0xac>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_InitTick+0xac>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <HAL_InitTick+0xac>)
 80008fe:	f003 f87b 	bl	80039f8 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d104      	bne.n	8000912 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <HAL_InitTick+0xac>)
 800090a:	f003 f8cd 	bl	8003aa8 <HAL_TIM_Base_Start_IT>
 800090e:	4603      	mov	r3, r0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3730      	adds	r7, #48	; 0x30
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	431bde83 	.word	0x431bde83
 8000924:	20000358 	.word	0x20000358
 8000928:	40010000 	.word	0x40010000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800095a:	2001      	movs	r0, #1
 800095c:	f001 fafe 	bl	8001f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800096a:	f003 f90b 	bl	8003b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000358 	.word	0x20000358

08000978 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <OTG_FS_IRQHandler+0x10>)
 800097e:	f001 fb0f 	bl	8001fa0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000bfc4 	.word	0x2000bfc4

0800098c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	return 1;
 8000990:	2301      	movs	r3, #1
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
	...

0800099c <_kill>:

int _kill(int pid, int sig)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <_kill+0x20>)
 80009a8:	2216      	movs	r2, #22
 80009aa:	601a      	str	r2, [r3, #0]
	return -1;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000c4dc 	.word	0x2000c4dc

080009c0 <_exit>:

void _exit (int status)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ffe5 	bl	800099c <_kill>
	while (1) {}		/* Make sure we hang here */
 80009d2:	e7fe      	b.n	80009d2 <_exit+0x12>

080009d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e00a      	b.n	80009fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009e6:	f3af 8000 	nop.w
 80009ea:	4601      	mov	r1, r0
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	b2ca      	uxtb	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf0      	blt.n	80009e6 <_read+0x12>
	}

return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e009      	b.n	8000a34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf1      	blt.n	8000a20 <_write+0x12>
	}
	return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_close>:

int _close(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <_isatty>:

int _isatty(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	return 1;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
	return 0;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d205      	bcs.n	8000ae4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <_sbrk+0x6c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00004000 	.word	0x00004000
 8000b0c:	200003a0 	.word	0x200003a0
 8000b10:	2000c4e0 	.word	0x2000c4e0
 8000b14:	2000c4dc 	.word	0x2000c4dc

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <test_mqtt_netif_output>:
const ip_addr_t test_mqtt_remote_ip = IPADDR4_INIT_BYTES(192, 168, 220, 1);
const ip_addr_t test_mqtt_netmask = IPADDR4_INIT_BYTES(255, 255, 255, 0);

static err_t test_mqtt_netif_output(struct netif *netif, struct pbuf *p,
       const ip4_addr_t *ipaddr)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(ipaddr);
  LWIP_UNUSED_ARG(p);
  return ERR_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <test_mqtt_init_netif>:

static void
test_mqtt_init_netif(struct netif *netif, const ip_addr_t *ip_addr, const ip_addr_t *netmask)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  struct netif *n;
  memset(netif, 0, sizeof(struct netif));
 8000b48:	2238      	movs	r2, #56	; 0x38
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f017 fe93 	bl	8018878 <memset>
  netif->output = test_mqtt_netif_output;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4a15      	ldr	r2, [pc, #84]	; (8000bac <test_mqtt_init_netif+0x70>)
 8000b56:	615a      	str	r2, [r3, #20]
  netif->flags |= NETIF_FLAG_UP | NETIF_FLAG_LINK_UP;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000b5e:	f043 0305 	orr.w	r3, r3, #5
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  ip_addr_copy_from_ip4(netif->netmask, *ip_2_ip4(netmask));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	609a      	str	r2, [r3, #8]
  ip_addr_copy_from_ip4(netif->ip_addr, *ip_2_ip4(ip_addr));
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	605a      	str	r2, [r3, #4]
  for (n = netif_list; n != NULL; n = n->next) {
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <test_mqtt_init_netif+0x74>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e006      	b.n	8000b90 <test_mqtt_init_netif+0x54>
    if (n == netif) {
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d00c      	beq.n	8000ba4 <test_mqtt_init_netif+0x68>
  for (n = netif_list; n != NULL; n = n->next) {
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f5      	bne.n	8000b82 <test_mqtt_init_netif+0x46>
      return;
    }
  }
  netif->next = NULL;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <test_mqtt_init_netif+0x74>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e000      	b.n	8000ba6 <test_mqtt_init_netif+0x6a>
      return;
 8000ba4:	bf00      	nop
}
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	08000b25 	.word	0x08000b25
 8000bb0:	2000be24 	.word	0x2000be24

08000bb4 <test_mqtt_connection_cb>:
  netif_default = old_netif_default;
  lwip_check_ensure_no_alloc(SKIP_POOL(MEMP_SYS_TIMEOUT));
}

static void test_mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(client);
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(status);
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <START_TEST>:

void START_TEST(void)
{
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b09c      	sub	sp, #112	; 0x70
 8000bd0:	af02      	add	r7, sp, #8
  mqtt_client_t* client;
  struct netif netif;
  err_t err;
  struct mqtt_connect_client_info_t client_info = {
 8000bd2:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <START_TEST+0xc8>)
 8000bd4:	f107 0408 	add.w	r4, r7, #8
 8000bd8:	461d      	mov	r5, r3
 8000bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    NULL, NULL,
    10,
    NULL, NULL, 0, 0
  };
  struct pbuf *p;
  unsigned char rxbuf[] = {0x20, 0x02, 0x00, 0x00};
 8000be6:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000bea:	607b      	str	r3, [r7, #4]
  //LWIP_UNUSED_ARG(_i);

  test_mqtt_init_netif(&netif, &test_mqtt_local_ip, &test_mqtt_netmask);
 8000bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf0:	4a29      	ldr	r2, [pc, #164]	; (8000c98 <START_TEST+0xcc>)
 8000bf2:	492a      	ldr	r1, [pc, #168]	; (8000c9c <START_TEST+0xd0>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffa1 	bl	8000b3c <test_mqtt_init_netif>

  client = mqtt_client_new();
 8000bfa:	f009 fe6f 	bl	800a8dc <mqtt_client_new>
 8000bfe:	6678      	str	r0, [r7, #100]	; 0x64
  //fail_unless(client != NULL);
  err = mqtt_client_connect(client, &test_mqtt_remote_ip, 1234, test_mqtt_connection_cb, NULL, &client_info);
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	2300      	movs	r3, #0
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <START_TEST+0xd4>)
 8000c0c:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8000c10:	4924      	ldr	r1, [pc, #144]	; (8000ca4 <START_TEST+0xd8>)
 8000c12:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c14:	f009 fe6c 	bl	800a8f0 <mqtt_client_connect>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  //fail_unless(err == ERR_OK);

  client->conn->connected(client->conn->callback_arg, client->conn, ERR_OK);
 8000c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c28:	68d2      	ldr	r2, [r2, #12]
 8000c2a:	6910      	ldr	r0, [r2, #16]
 8000c2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c2e:	68d1      	ldr	r1, [r2, #12]
 8000c30:	2200      	movs	r2, #0
 8000c32:	4798      	blx	r3
  p = pbuf_alloc(PBUF_RAW, sizeof(rxbuf), PBUF_REF);
 8000c34:	2241      	movs	r2, #65	; 0x41
 8000c36:	2104      	movs	r1, #4
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f00b fa79 	bl	800c130 <pbuf_alloc>
 8000c3e:	65f8      	str	r0, [r7, #92]	; 0x5c
  //fail_unless(p != NULL);
  p->payload = rxbuf;
 8000c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c42:	1d3a      	adds	r2, r7, #4
 8000c44:	605a      	str	r2, [r3, #4]
  /* since we hack the rx path, we have to hack the rx window, too: */
  client->conn->rcv_wnd -= p->tot_len;
 8000c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c4e:	891a      	ldrh	r2, [r3, #8]
 8000c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	1a8a      	subs	r2, r1, r2
 8000c56:	b292      	uxth	r2, r2
 8000c58:	851a      	strh	r2, [r3, #40]	; 0x28
  if (client->conn->recv(client->conn->callback_arg, client->conn, p, ERR_OK) != ERR_OK) {
 8000c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8000c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	6918      	ldr	r0, [r3, #16]
 8000c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c6a:	68d9      	ldr	r1, [r3, #12]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c70:	47a0      	blx	r4
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <START_TEST+0xb2>
    pbuf_free(p);
 8000c78:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c7a:	f00b fd3d 	bl	800c6f8 <pbuf_free>
  }

  mqtt_disconnect(client);
 8000c7e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c80:	f00a f8b2 	bl	800ade8 <mqtt_disconnect>
  /* fixme: mqtt_client_fre() is missing... */
  mem_free(client);
 8000c84:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c86:	f00a fb1d 	bl	800b2c4 <mem_free>
}
 8000c8a:	bf00      	nop
 8000c8c:	3768      	adds	r7, #104	; 0x68
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bdb0      	pop	{r4, r5, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	080195ec 	.word	0x080195ec
 8000c98:	0801cca4 	.word	0x0801cca4
 8000c9c:	0801cc9c 	.word	0x0801cc9c
 8000ca0:	08000bb5 	.word	0x08000bb5
 8000ca4:	0801cca0 	.word	0x0801cca0

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ff21 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f017 fd1d 	bl	8018714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc6b 	bl	80005b4 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000cec:	0801cf4c 	.word	0x0801cf4c
  ldr r2, =_sbss
 8000cf0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000cf4:	2000c4e0 	.word	0x2000c4e0

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f8f5 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f7ff fda4 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fd76 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200003a4 	.word	0x200003a4

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	200003a4 	.word	0x200003a4

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff fff0 	bl	8000d64 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ffe0 	bl	8000d64 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4906      	ldr	r1, [pc, #24]	; (8000e58 <__NVIC_EnableIRQ+0x34>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff4f 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff64 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ffb2 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff81 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff57 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e06c      	b.n	800106c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d106      	bne.n	8000faa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2223      	movs	r2, #35	; 0x23
 8000fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f869 	bl	800107c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <HAL_ETH_Init+0xf4>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a30      	ldr	r2, [pc, #192]	; (8001074 <HAL_ETH_Init+0xf4>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <HAL_ETH_Init+0xf4>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_ETH_Init+0xf8>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a2b      	ldr	r2, [pc, #172]	; (8001078 <HAL_ETH_Init+0xf8>)
 8000fcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fd0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_ETH_Init+0xf8>)
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	4927      	ldr	r1, [pc, #156]	; (8001078 <HAL_ETH_Init+0xf8>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <HAL_ETH_Init+0xf8>)
 8000fe2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ffc:	f7ff feb2 	bl	8000d64 <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001002:	e011      	b.n	8001028 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001004:	f7ff feae 	bl	8000d64 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001012:	d909      	bls.n	8001028 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2204      	movs	r2, #4
 8001018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	22e0      	movs	r2, #224	; 0xe0
 8001020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e021      	b.n	800106c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1e4      	bne.n	8001004 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 fb3a 	bl	80016b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fbdf 	bl	8001804 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fc34 	bl	80018b4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	2100      	movs	r1, #0
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fb9f 	bl	8001798 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2210      	movs	r2, #16
 8001066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40013800 	.word	0x40013800

0800107c <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e045      	b.n	800113e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010b8:	2b23      	cmp	r3, #35	; 0x23
 80010ba:	d13f      	bne.n	800113c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80010c4:	2201      	movs	r2, #1
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fc5f 	bl	800198c <ETH_Prepare_Tx_Descriptors>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d009      	beq.n	80010e8 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	f043 0202 	orr.w	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e02a      	b.n	800113e <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010e8:	f3bf 8f4f 	dsb	sy
}
 80010ec:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d904      	bls.n	800110a <HAL_ETH_Transmit_IT+0x7c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	1f1a      	subs	r2, r3, #4
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00d      	beq.n	8001138 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001124:	461a      	mov	r2, r3
 8001126:	2304      	movs	r3, #4
 8001128:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001132:	461a      	mov	r2, r3
 8001134:	2300      	movs	r3, #0
 8001136:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	e000      	b.n	800113e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
  }
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b088      	sub	sp, #32
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e0a8      	b.n	80012c4 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001178:	2b23      	cmp	r3, #35	; 0x23
 800117a:	d001      	beq.n	8001180 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0a1      	b.n	80012c4 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	3212      	adds	r2, #18
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001196:	f1c3 0304 	rsb	r3, r3, #4
 800119a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800119c:	e06a      	b.n	8001274 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	69da      	ldr	r2, [r3, #28]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <HAL_ETH_ReadData+0x88>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d040      	beq.n	8001250 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00c      	beq.n	8001212 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0c1b      	lsrs	r3, r3, #16
 80011fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001202:	3b04      	subs	r3, #4
 8001204:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800122a:	461a      	mov	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	b29b      	uxth	r3, r3
 8001230:	f004 f968 	bl	8005504 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	441a      	add	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	3301      	adds	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d902      	bls.n	8001262 <HAL_ETH_ReadData+0x11c>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	3b04      	subs	r3, #4
 8001260:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	3212      	adds	r2, #18
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db06      	blt.n	800128a <HAL_ETH_ReadData+0x144>
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	429a      	cmp	r2, r3
 8001282:	d202      	bcs.n	800128a <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d089      	beq.n	800119e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	441a      	add	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f814 	bl	80012cc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d108      	bne.n	80012c2 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80012d8:	2301      	movs	r3, #1
 80012da:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012e0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	3212      	adds	r2, #18
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012f2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80012f4:	e03e      	b.n	8001374 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d112      	bne.n	8001324 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4618      	mov	r0, r3
 8001304:	f004 f8ce 	bl	80054a4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	74fb      	strb	r3, [r7, #19]
 8001312:	e007      	b.n	8001324 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	461a      	mov	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	461a      	mov	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001324:	7cfb      	ldrb	r3, [r7, #19]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d024      	beq.n	8001374 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800132a:	f3bf 8f5f 	dmb	sy
}
 800132e:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001336:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	2b00      	cmp	r3, #0
 800133e:	d103      	bne.n	8001348 <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <ETH_UpdateDescriptor+0xe0>)
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	e003      	b.n	8001350 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f244 32e8 	movw	r2, #17384	; 0x43e8
 800134e:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	3301      	adds	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d902      	bls.n	8001362 <ETH_UpdateDescriptor+0x96>
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	3b04      	subs	r3, #4
 8001360:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	3212      	adds	r2, #18
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	617b      	str	r3, [r7, #20]
      desccount--;
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	3b01      	subs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <ETH_UpdateDescriptor+0xb4>
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ba      	bne.n	80012f6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	429a      	cmp	r2, r3
 8001388:	d00c      	beq.n	80013a4 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001392:	461a      	mov	r2, r3
 8001394:	2300      	movs	r3, #0
 8001396:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	800043e8 	.word	0x800043e8

080013b0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3318      	adds	r3, #24
 80013bc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80013ce:	e03f      	b.n	8001450 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	3304      	adds	r3, #4
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3301      	adds	r3, #1
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d028      	beq.n	8001450 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68d9      	ldr	r1, [r3, #12]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db1b      	blt.n	800144c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	3304      	adds	r3, #4
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	f004 f8ae 	bl	8005582 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	3304      	adds	r3, #4
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	3301      	adds	r3, #1
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
 800144a:	e001      	b.n	8001450 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HAL_ETH_ReleaseTxPacket+0xac>
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1b9      	bne.n	80013d0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4b47      	ldr	r3, [pc, #284]	; (800159c <ETH_SetMACConfig+0x134>)
 800147e:	4013      	ands	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	7c1b      	ldrb	r3, [r3, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <ETH_SetMACConfig+0x28>
 800148a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800148e:	e000      	b.n	8001492 <ETH_SetMACConfig+0x2a>
 8001490:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	7c5b      	ldrb	r3, [r3, #17]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <ETH_SetMACConfig+0x38>
 800149a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149e:	e000      	b.n	80014a2 <ETH_SetMACConfig+0x3a>
 80014a0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	7fdb      	ldrb	r3, [r3, #31]
 80014ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	7f92      	ldrb	r2, [r2, #30]
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d102      	bne.n	80014c6 <ETH_SetMACConfig+0x5e>
 80014c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c4:	e000      	b.n	80014c8 <ETH_SetMACConfig+0x60>
 80014c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80014c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	7f1b      	ldrb	r3, [r3, #28]
 80014ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d102      	bne.n	80014f0 <ETH_SetMACConfig+0x88>
 80014ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ee:	e000      	b.n	80014f2 <ETH_SetMACConfig+0x8a>
 80014f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	7bdb      	ldrb	r3, [r3, #15]
 80014f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001500:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001508:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800150a:	4313      	orrs	r3, r2
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff fc28 	bl	8000d78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001546:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800154e:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001554:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 800155c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001564:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800156c:	4313      	orrs	r3, r2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff fbf7 	bl	8000d78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	ff20810f 	.word	0xff20810f

080015a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <ETH_SetDMAConfig+0x110>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	7b1b      	ldrb	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <ETH_SetDMAConfig+0x2c>
 80015c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ca:	e000      	b.n	80015ce <ETH_SetDMAConfig+0x2e>
 80015cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	7b5b      	ldrb	r3, [r3, #13]
 80015d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	7f52      	ldrb	r2, [r2, #29]
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d102      	bne.n	80015e4 <ETH_SetDMAConfig+0x44>
 80015de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015e2:	e000      	b.n	80015e6 <ETH_SetDMAConfig+0x46>
 80015e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	7b9b      	ldrb	r3, [r3, #14]
 80015ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7f1b      	ldrb	r3, [r3, #28]
 80015fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	7f9b      	ldrb	r3, [r3, #30]
 8001602:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001604:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800160a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001612:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001614:	4313      	orrs	r3, r2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff fb9e 	bl	8000d78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	461a      	mov	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	791b      	ldrb	r3, [r3, #4]
 800164e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001654:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800165a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001660:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001668:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800166a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001672:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001678:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001686:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fb6f 	bl	8000d78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	f8de3f23 	.word	0xf8de3f23

080016b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0a6      	sub	sp, #152	; 0x98
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016f0:	2300      	movs	r3, #0
 80016f2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800171a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800171c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001728:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fe9a 	bl	8001468 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001734:	2301      	movs	r3, #1
 8001736:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001738:	2301      	movs	r3, #1
 800173a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800173c:	2301      	movs	r3, #1
 800173e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001742:	2301      	movs	r3, #1
 8001744:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001760:	2301      	movs	r3, #1
 8001762:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001768:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800176a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800176e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001774:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff08 	bl	80015a0 <ETH_SetDMAConfig>
}
 8001790:	bf00      	nop
 8001792:	3798      	adds	r7, #152	; 0x98
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3305      	adds	r3, #5
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	3204      	adds	r2, #4
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <ETH_MACAddressConfig+0x64>)
 80017ba:	4413      	add	r3, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3303      	adds	r3, #3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	061a      	lsls	r2, r3, #24
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3302      	adds	r3, #2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4313      	orrs	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <ETH_MACAddressConfig+0x68>)
 80017ea:	4413      	add	r3, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40028040 	.word	0x40028040
 8001800:	40028044 	.word	0x40028044

08001804 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	e03e      	b.n	8001890 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68d9      	ldr	r1, [r3, #12]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	3206      	adds	r2, #6
 8001844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d80c      	bhi.n	8001874 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68d9      	ldr	r1, [r3, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	461a      	mov	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	e004      	b.n	800187e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	461a      	mov	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d9bd      	bls.n	8001812 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a8:	611a      	str	r2, [r3, #16]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e046      	b.n	8001950 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018fe:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001906:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	3212      	adds	r2, #18
 800191c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d80c      	bhi.n	8001940 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	461a      	mov	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	e004      	b.n	800194a <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3301      	adds	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d9b5      	bls.n	80018c2 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001980:	60da      	str	r2, [r3, #12]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800198c:	b480      	push	{r7}
 800198e:	b08d      	sub	sp, #52	; 0x34
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3318      	adds	r3, #24
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019ce:	d007      	beq.n	80019e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	3304      	adds	r3, #4
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80019e0:	2302      	movs	r3, #2
 80019e2:	e103      	b.n	8001bec <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3301      	adds	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80019fc:	f023 031f 	bic.w	r3, r3, #31
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	6852      	ldr	r2, [r2, #4]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001a6a:	f3bf 8f5f 	dmb	sy
}
 8001a6e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001a7c:	e084      	b.n	8001b88 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e005      	b.n	8001aaa <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	3301      	adds	r3, #1
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d902      	bls.n	8001abc <ETH_Prepare_Tx_Descriptors+0x130>
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	3b04      	subs	r3, #4
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ade:	d007      	beq.n	8001af0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d029      	beq.n	8001b44 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b02:	e019      	b.n	8001b38 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001b04:	f3bf 8f5f 	dmb	sy
}
 8001b08:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	3301      	adds	r3, #1
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d902      	bls.n	8001b28 <ETH_Prepare_Tx_Descriptors+0x19c>
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	3b04      	subs	r3, #4
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	3301      	adds	r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3e1      	bcc.n	8001b04 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8001b40:	2302      	movs	r3, #2
 8001b42:	e053      	b.n	8001bec <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	3301      	adds	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001b62:	f023 031f 	bic.w	r3, r3, #31
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	6852      	ldr	r2, [r2, #4]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b76:	f3bf 8f5f 	dmb	sy
}
 8001b7a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f af76 	bne.w	8001a7e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e005      	b.n	8001bb2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc2:	6979      	ldr	r1, [r7, #20]
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	4413      	add	r3, r2
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001be6:	b662      	cpsie	i
}
 8001be8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3734      	adds	r7, #52	; 0x34
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e16b      	b.n	8001eec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 815a 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d005      	beq.n	8001c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d130      	bne.n	8001cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 0201 	and.w	r2, r3, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d017      	beq.n	8001ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d123      	bne.n	8001d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80b4 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <HAL_GPIO_Init+0x308>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a5e      	ldr	r2, [pc, #376]	; (8001f00 <HAL_GPIO_Init+0x308>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <HAL_GPIO_Init+0x308>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a5a      	ldr	r2, [pc, #360]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <HAL_GPIO_Init+0x310>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d02b      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <HAL_GPIO_Init+0x314>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d025      	beq.n	8001e1a <HAL_GPIO_Init+0x222>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4f      	ldr	r2, [pc, #316]	; (8001f10 <HAL_GPIO_Init+0x318>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01f      	beq.n	8001e16 <HAL_GPIO_Init+0x21e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4e      	ldr	r2, [pc, #312]	; (8001f14 <HAL_GPIO_Init+0x31c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4d      	ldr	r2, [pc, #308]	; (8001f18 <HAL_GPIO_Init+0x320>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x216>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x212>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4b      	ldr	r2, [pc, #300]	; (8001f20 <HAL_GPIO_Init+0x328>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x20e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4a      	ldr	r2, [pc, #296]	; (8001f24 <HAL_GPIO_Init+0x32c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x20a>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e00e      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e02:	2308      	movs	r3, #8
 8001e04:	e00c      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00a      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4934      	ldr	r1, [pc, #208]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae90 	bls.w	8001c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f3c:	787b      	ldrb	r3, [r7, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f48:	e003      	b.n	8001f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4a:	887b      	ldrh	r3, [r7, #2]
 8001f4c:	041a      	lsls	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	619a      	str	r2, [r3, #24]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f806 	bl	8001f8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b08d      	sub	sp, #52	; 0x34
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 ffa1 	bl	8004efe <USB_GetMode>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 848a 	bne.w	80028d8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 ff0a 	bl	8004de2 <USB_ReadInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 8480 	beq.w	80028d6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fef7 	bl	8004de2 <USB_ReadInterrupts>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d107      	bne.n	800200e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f002 0202 	and.w	r2, r2, #2
 800200c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f002 fee5 	bl	8004de2 <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b10      	cmp	r3, #16
 8002020:	d161      	bne.n	80020e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0210 	bic.w	r2, r2, #16
 8002030:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	0c5b      	lsrs	r3, r3, #17
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	2b02      	cmp	r3, #2
 800205c:	d124      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d035      	beq.n	80020d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6a38      	ldr	r0, [r7, #32]
 800207e:	f002 fd62 	bl	8004b46 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208e:	441a      	add	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a0:	441a      	add	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	621a      	str	r2, [r3, #32]
 80020a6:	e016      	b.n	80020d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	0c5b      	lsrs	r3, r3, #17
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	2b06      	cmp	r3, #6
 80020b2:	d110      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020ba:	2208      	movs	r2, #8
 80020bc:	4619      	mov	r1, r3
 80020be:	6a38      	ldr	r0, [r7, #32]
 80020c0:	f002 fd41 	bl	8004b46 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020d0:	441a      	add	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0210 	orr.w	r2, r2, #16
 80020e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fe79 	bl	8004de2 <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020fa:	f040 80a7 	bne.w	800224c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 fe7d 	bl	8004e06 <USB_ReadDevAllOutEpInterrupt>
 800210c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800210e:	e099      	b.n	8002244 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 808e 	beq.w	8002238 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fe9f 	bl	8004e6a <USB_ReadDevOutEPInterrupt>
 800212c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00c      	beq.n	8002152 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002144:	461a      	mov	r2, r3
 8002146:	2301      	movs	r3, #1
 8002148:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800214a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fe61 	bl	8002e14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00c      	beq.n	8002176 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	2308      	movs	r3, #8
 800216c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800216e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 ff37 	bl	8002fe4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218c:	461a      	mov	r2, r3
 800218e:	2310      	movs	r3, #16
 8002190:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d030      	beq.n	80021fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d109      	bne.n	80021bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	78db      	ldrb	r3, [r3, #3]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d108      	bne.n	80021ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f015 ff84 	bl	80180f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f8:	461a      	mov	r2, r3
 80021fa:	2302      	movs	r3, #2
 80021fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002214:	461a      	mov	r2, r3
 8002216:	2320      	movs	r3, #32
 8002218:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002230:	461a      	mov	r2, r3
 8002232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002236:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3301      	adds	r3, #1
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	f47f af62 	bne.w	8002110 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f002 fdc6 	bl	8004de2 <USB_ReadInterrupts>
 8002256:	4603      	mov	r3, r0
 8002258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002260:	f040 80db 	bne.w	800241a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f002 fde5 	bl	8004e38 <USB_ReadDevAllInEpInterrupt>
 800226e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002274:	e0cd      	b.n	8002412 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80c2 	beq.w	8002406 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fe09 	bl	8004ea4 <USB_ReadDevInEPInterrupt>
 8002292:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d057      	beq.n	800234e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	2201      	movs	r2, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69f9      	ldr	r1, [r7, #28]
 80022ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022be:	4013      	ands	r3, r2
 80022c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ce:	461a      	mov	r2, r3
 80022d0:	2301      	movs	r3, #1
 80022d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d132      	bne.n	8002342 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	334c      	adds	r3, #76	; 0x4c
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4403      	add	r3, r0
 80022fc:	3348      	adds	r3, #72	; 0x48
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4419      	add	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4403      	add	r3, r0
 8002310:	334c      	adds	r3, #76	; 0x4c
 8002312:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	2b00      	cmp	r3, #0
 8002318:	d113      	bne.n	8002342 <HAL_PCD_IRQHandler+0x3a2>
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	3354      	adds	r3, #84	; 0x54
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800233a:	461a      	mov	r2, r3
 800233c:	2101      	movs	r1, #1
 800233e:	f002 fe0d 	bl	8004f5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f015 fe4e 	bl	8017fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002364:	461a      	mov	r2, r3
 8002366:	2308      	movs	r3, #8
 8002368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002380:	461a      	mov	r2, r3
 8002382:	2310      	movs	r3, #16
 8002384:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239c:	461a      	mov	r2, r3
 800239e:	2340      	movs	r3, #64	; 0x40
 80023a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ae:	6a38      	ldr	r0, [r7, #32]
 80023b0:	f001 fe66 	bl	8004080 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	3338      	adds	r3, #56	; 0x38
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	78db      	ldrb	r3, [r3, #3]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2200      	movs	r2, #0
 80023d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f015 fe9b 	bl	8018118 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ee:	461a      	mov	r2, r3
 80023f0:	2302      	movs	r3, #2
 80023f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fc79 	bl	8002cf8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	3301      	adds	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f af2e 	bne.w	8002276 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f002 fcdf 	bl	8004de2 <USB_ReadInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800242a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800242e:	d122      	bne.n	8002476 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002456:	2100      	movs	r1, #0
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fe09 	bl	8003070 <HAL_PCDEx_LPM_Callback>
 800245e:	e002      	b.n	8002466 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f015 fe39 	bl	80180d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 fcb1 	bl	8004de2 <USB_ReadInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800248a:	d112      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d102      	bne.n	80024a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f015 fdf5 	bl	801808c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024b0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 fc93 	bl	8004de2 <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c6:	f040 80b7 	bne.w	8002638 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2110      	movs	r1, #16
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 fdcb 	bl	8004080 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ee:	e046      	b.n	800257e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fc:	461a      	mov	r2, r3
 80024fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002502:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002514:	0151      	lsls	r1, r2, #5
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	440a      	add	r2, r1
 800251a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800251e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002522:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002530:	461a      	mov	r2, r3
 8002532:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002536:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002548:	0151      	lsls	r1, r2, #5
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	440a      	add	r2, r1
 800254e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002556:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002568:	0151      	lsls	r1, r2, #5
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	440a      	add	r2, r1
 800256e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002572:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002576:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	3301      	adds	r3, #1
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002584:	429a      	cmp	r2, r3
 8002586:	d3b3      	bcc.n	80024f0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002596:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800259a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d016      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b4:	f043 030b 	orr.w	r3, r3, #11
 80025b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ca:	f043 030b 	orr.w	r3, r3, #11
 80025ce:	6453      	str	r3, [r2, #68]	; 0x44
 80025d0:	e015      	b.n	80025fe <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025e4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025e8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f8:	f043 030b 	orr.w	r3, r3, #11
 80025fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800260c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002610:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002622:	461a      	mov	r2, r3
 8002624:	f002 fc9a 	bl	8004f5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f002 fbd0 	bl	8004de2 <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264c:	d124      	bne.n	8002698 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f002 fc60 	bl	8004f18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f001 fd43 	bl	80040e8 <USB_GetDevSpeed>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681c      	ldr	r4, [r3, #0]
 800266e:	f001 f975 	bl	800395c <HAL_RCC_GetHCLKFreq>
 8002672:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4620      	mov	r0, r4
 800267e:	f001 fc5d 	bl	8003f3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f015 fcd9 	bl	801803a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002696:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f002 fba0 	bl	8004de2 <USB_ReadInterrupts>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d10a      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f015 fcb6 	bl	801801e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f002 0208 	and.w	r2, r2, #8
 80026c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 fb8b 	bl	8004de2 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	2b80      	cmp	r3, #128	; 0x80
 80026d4:	d122      	bne.n	800271c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e2:	2301      	movs	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
 80026e6:	e014      	b.n	8002712 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fac5 	bl	8002c96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	3301      	adds	r3, #1
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	429a      	cmp	r2, r3
 800271a:	d3e5      	bcc.n	80026e8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f002 fb5e 	bl	8004de2 <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002730:	d13b      	bne.n	80027aa <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002732:	2301      	movs	r3, #1
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	e02b      	b.n	8002790 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3340      	adds	r3, #64	; 0x40
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d115      	bne.n	800278a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800275e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	da12      	bge.n	800278a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	333f      	adds	r3, #63	; 0x3f
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002780:	b2db      	uxtb	r3, r3
 8002782:	4619      	mov	r1, r3
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fa86 	bl	8002c96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	3301      	adds	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	429a      	cmp	r2, r3
 8002798:	d3ce      	bcc.n	8002738 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fb17 	bl	8004de2 <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027be:	d155      	bne.n	800286c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027c0:	2301      	movs	r3, #1
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	e045      	b.n	8002852 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d12e      	bne.n	800284c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da2b      	bge.n	800284c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002800:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002804:	429a      	cmp	r2, r3
 8002806:	d121      	bne.n	800284c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002848:	6053      	str	r3, [r2, #4]
            break;
 800284a:	e007      	b.n	800285c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	3301      	adds	r3, #1
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	429a      	cmp	r2, r3
 800285a:	d3b4      	bcc.n	80027c6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800286a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fab6 	bl	8004de2 <USB_ReadInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d10a      	bne.n	8002898 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f015 fc5a 	bl	801813c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f002 faa0 	bl	8004de2 <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d115      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f015 fc4a 	bl	8018158 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	e000      	b.n	80028d8 <HAL_PCD_IRQHandler+0x938>
      return;
 80028d6:	bf00      	nop
    }
  }
}
 80028d8:	3734      	adds	r7, #52	; 0x34
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}

080028de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_PCD_SetAddress+0x1a>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e013      	b.n	8002920 <HAL_PCD_SetAddress+0x42>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f002 fa41 	bl	8004d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	70fb      	strb	r3, [r7, #3]
 800293a:	460b      	mov	r3, r1
 800293c:	803b      	strh	r3, [r7, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294a:	2b00      	cmp	r3, #0
 800294c:	da0f      	bge.n	800296e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	3338      	adds	r3, #56	; 0x38
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	705a      	strb	r2, [r3, #1]
 800296c:	e00f      	b.n	800298e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800299a:	883a      	ldrh	r2, [r7, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	78ba      	ldrb	r2, [r7, #2]
 80029a4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029b8:	78bb      	ldrb	r3, [r7, #2]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d102      	bne.n	80029c4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_PCD_EP_Open+0xaa>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e00e      	b.n	80029f0 <HAL_PCD_EP_Open+0xc8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fba5 	bl	8004130 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029ee:	7afb      	ldrb	r3, [r7, #11]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	460b      	mov	r3, r1
 8002a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a08:	7afb      	ldrb	r3, [r7, #11]
 8002a0a:	f003 020f 	and.w	r2, r3, #15
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3304      	adds	r3, #4
 8002a20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2200      	movs	r2, #0
 8002a38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3a:	7afb      	ldrb	r3, [r7, #11]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6979      	ldr	r1, [r7, #20]
 8002a6c:	f001 fe2e 	bl	80046cc <USB_EP0StartXfer>
 8002a70:	e008      	b.n	8002a84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6979      	ldr	r1, [r7, #20]
 8002a80:	f001 fbdc 	bl	800423c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	3338      	adds	r3, #56	; 0x38
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2201      	movs	r2, #1
 8002acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	f001 fde4 	bl	80046cc <USB_EP0StartXfer>
 8002b04:	e008      	b.n	8002b18 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	6979      	ldr	r1, [r7, #20]
 8002b14:	f001 fb92 	bl	800423c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 020f 	and.w	r2, r3, #15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d901      	bls.n	8002b40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e050      	b.n	8002be2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da0f      	bge.n	8002b68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	f003 020f 	and.w	r2, r3, #15
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	3338      	adds	r3, #56	; 0x38
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	705a      	strb	r2, [r3, #1]
 8002b66:	e00d      	b.n	8002b84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_PCD_EP_SetStall+0x82>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e01e      	b.n	8002be2 <HAL_PCD_EP_SetStall+0xc0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 f81e 	bl	8004bf4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f002 f9c2 	bl	8004f5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d901      	bls.n	8002c08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e042      	b.n	8002c8e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	da0f      	bge.n	8002c30 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	f003 020f 	and.w	r2, r3, #15
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	3338      	adds	r3, #56	; 0x38
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	3304      	adds	r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	705a      	strb	r2, [r3, #1]
 8002c2e:	e00f      	b.n	8002c50 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 020f 	and.w	r2, r3, #15
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	3304      	adds	r3, #4
 8002c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_PCD_EP_ClrStall+0x86>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e00e      	b.n	8002c8e <HAL_PCD_EP_ClrStall+0xa4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f002 f825 	bl	8004cce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0c      	bge.n	8002cc4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	3338      	adds	r3, #56	; 0x38
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e00c      	b.n	8002cde <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 020f 	and.w	r2, r3, #15
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	3304      	adds	r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 fe48 	bl	800497a <USB_EPStopXfer>
 8002cea:	4603      	mov	r3, r0
 8002cec:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cee:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	3338      	adds	r3, #56	; 0x38
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d901      	bls.n	8002d30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e06c      	b.n	8002e0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d902      	bls.n	8002d4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	3303      	adds	r3, #3
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d54:	e02b      	b.n	8002dae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d902      	bls.n	8002d72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3303      	adds	r3, #3
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6978      	ldr	r0, [r7, #20]
 8002d92:	f001 fe9b 	bl	8004acc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	441a      	add	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d809      	bhi.n	8002dd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d203      	bcs.n	8002dd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1be      	bne.n	8002d56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d811      	bhi.n	8002e08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	2201      	movs	r2, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	6939      	ldr	r1, [r7, #16]
 8002e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e04:	4013      	ands	r3, r2
 8002e06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	333c      	adds	r3, #60	; 0x3c
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d17b      	bne.n	8002f42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d015      	beq.n	8002e80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	f240 80b9 	bls.w	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80b3 	beq.w	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	461a      	mov	r2, r3
 8002e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7c:	6093      	str	r3, [r2, #8]
 8002e7e:	e0a7      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	2320      	movs	r3, #32
 8002e9a:	6093      	str	r3, [r2, #8]
 8002e9c:	e098      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 8093 	bne.w	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	4a4b      	ldr	r2, [pc, #300]	; (8002fdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d90f      	bls.n	8002ed2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ece:	6093      	str	r3, [r2, #8]
 8002ed0:	e07e      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d114      	bne.n	8002f34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2101      	movs	r1, #1
 8002f20:	f002 f81c 	bl	8004f5c <USB_EP0_OutStart>
 8002f24:	e006      	b.n	8002f34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f015 f83a 	bl	8017fb4 <HAL_PCD_DataOutStageCallback>
 8002f40:	e046      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d124      	bne.n	8002f94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	e032      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f80:	461a      	mov	r2, r3
 8002f82:	2320      	movs	r3, #32
 8002f84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f015 f811 	bl	8017fb4 <HAL_PCD_DataOutStageCallback>
 8002f92:	e01d      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d114      	bne.n	8002fc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	f001 ffcc 	bl	8004f5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f014 fff2 	bl	8017fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	4f54300a 	.word	0x4f54300a
 8002fe0:	4f54310a 	.word	0x4f54310a

08002fe4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	333c      	adds	r3, #60	; 0x3c
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <PCD_EP_OutSetupPacket_int+0x88>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d90e      	bls.n	8003038 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003030:	461a      	mov	r2, r3
 8003032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003036:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f014 ffa9 	bl	8017f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <PCD_EP_OutSetupPacket_int+0x88>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d90c      	bls.n	8003060 <PCD_EP_OutSetupPacket_int+0x7c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d108      	bne.n	8003060 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003058:	461a      	mov	r2, r3
 800305a:	2101      	movs	r1, #1
 800305c:	f001 ff7e 	bl	8004f5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	4f54300a 	.word	0x4f54300a

08003070 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
	...

08003088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e267      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d00c      	beq.n	80030cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b85      	ldr	r3, [pc, #532]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d112      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030be:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	4b7e      	ldr	r3, [pc, #504]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d157      	bne.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e242      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x74>
 80030ee:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b70      	ldr	r3, [pc, #448]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6f      	ldr	r2, [pc, #444]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b6d      	ldr	r3, [pc, #436]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6c      	ldr	r2, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 8003120:	4b69      	ldr	r3, [pc, #420]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a68      	ldr	r2, [pc, #416]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b66      	ldr	r3, [pc, #408]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a65      	ldr	r2, [pc, #404]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fd fe10 	bl	8000d64 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003148:	f7fd fe0c 	bl	8000d64 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e207      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b5b      	ldr	r3, [pc, #364]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xc0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fd fdfc 	bl	8000d64 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7fd fdf8 	bl	8000d64 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1f3      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800319e:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1c7      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4937      	ldr	r1, [pc, #220]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0x244>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fd fdb1 	bl	8000d64 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003206:	f7fd fdad 	bl	8000d64 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1a8      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4925      	ldr	r1, [pc, #148]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x244>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd fd90 	bl	8000d64 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003248:	f7fd fd8c 	bl	8000d64 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e187      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x248>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fd fd70 	bl	8000d64 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003288:	f7fd fd6c 	bl	8000d64 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e167      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x200>
 80032a6:	e01b      	b.n	80032e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_OscConfig+0x248>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fd fd59 	bl	8000d64 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e00e      	b.n	80032d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fd fd55 	bl	8000d64 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d907      	bls.n	80032d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e150      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ea      	bne.n	80032b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8097 	beq.w	800341c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b81      	ldr	r3, [pc, #516]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b7d      	ldr	r3, [pc, #500]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a7c      	ldr	r2, [pc, #496]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b7a      	ldr	r3, [pc, #488]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b77      	ldr	r3, [pc, #476]	; (80034fc <HAL_RCC_OscConfig+0x474>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b74      	ldr	r3, [pc, #464]	; (80034fc <HAL_RCC_OscConfig+0x474>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	; (80034fc <HAL_RCC_OscConfig+0x474>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7fd fd15 	bl	8000d64 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fd fd11 	bl	8000d64 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e10c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <HAL_RCC_OscConfig+0x474>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x2ea>
 8003364:	4b64      	ldr	r3, [pc, #400]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a63      	ldr	r2, [pc, #396]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x30c>
 800337a:	4b5f      	ldr	r3, [pc, #380]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a5e      	ldr	r2, [pc, #376]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a5b      	ldr	r2, [pc, #364]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003394:	4b58      	ldr	r3, [pc, #352]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a57      	ldr	r2, [pc, #348]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	4b55      	ldr	r3, [pc, #340]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a54      	ldr	r2, [pc, #336]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fcd6 	bl	8000d64 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fd fcd2 	bl	8000d64 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0cb      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ee      	beq.n	80033bc <HAL_RCC_OscConfig+0x334>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fd fcc0 	bl	8000d64 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fd fcbc 	bl	8000d64 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0b5      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ee      	bne.n	80033e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a38      	ldr	r2, [pc, #224]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a1 	beq.w	8003568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d05c      	beq.n	80034ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d141      	bne.n	80034be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <HAL_RCC_OscConfig+0x478>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fd fc90 	bl	8000d64 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7fd fc8c 	bl	8000d64 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e087      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	491b      	ldr	r1, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x478>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fd fc65 	bl	8000d64 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349e:	f7fd fc61 	bl	8000d64 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e05c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x416>
 80034bc:	e054      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_RCC_OscConfig+0x478>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd fc4e 	bl	8000d64 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fd fc4a 	bl	8000d64 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e045      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x444>
 80034ea:	e03d      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e038      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000
 8003500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x4ec>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d028      	beq.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d121      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d11a      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800353a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0cc      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b68      	ldr	r3, [pc, #416]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d90c      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b65      	ldr	r3, [pc, #404]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a58      	ldr	r2, [pc, #352]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d044      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d119      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d003      	beq.n	8003636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e067      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b37      	ldr	r3, [pc, #220]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4934      	ldr	r1, [pc, #208]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fd fb7c 	bl	8000d64 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fd fb78 	bl	8000d64 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d20c      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f821 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003702:	4602      	mov	r2, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	490a      	ldr	r1, [pc, #40]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	5ccb      	ldrb	r3, [r1, r3]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd f8aa 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00
 8003734:	40023800 	.word	0x40023800
 8003738:	0801cc84 	.word	0x0801cc84
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b094      	sub	sp, #80	; 0x50
 800374a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	647b      	str	r3, [r7, #68]	; 0x44
 8003750:	2300      	movs	r3, #0
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003754:	2300      	movs	r3, #0
 8003756:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800375c:	4b7c      	ldr	r3, [pc, #496]	; (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d00d      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x40>
 8003768:	2b08      	cmp	r3, #8
 800376a:	f200 80e7 	bhi.w	800393c <HAL_RCC_GetSysClockFreq+0x1f8>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x34>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x3a>
 8003776:	e0e1      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCC_GetSysClockFreq+0x210>)
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800377c:	e0e1      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b76      	ldr	r3, [pc, #472]	; (8003958 <HAL_RCC_GetSysClockFreq+0x214>)
 8003780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003782:	e0de      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003784:	4b72      	ldr	r3, [pc, #456]	; (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800378c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378e:	4b70      	ldr	r3, [pc, #448]	; (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d065      	beq.n	8003866 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	4b6d      	ldr	r3, [pc, #436]	; (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	2200      	movs	r2, #0
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
 80037ae:	2300      	movs	r3, #0
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
 80037b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	f04f 0000 	mov.w	r0, #0
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	0159      	lsls	r1, r3, #5
 80037c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c8:	0150      	lsls	r0, r2, #5
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4621      	mov	r1, r4
 80037d0:	1a51      	subs	r1, r2, r1
 80037d2:	6139      	str	r1, [r7, #16]
 80037d4:	4629      	mov	r1, r5
 80037d6:	eb63 0301 	sbc.w	r3, r3, r1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e8:	4659      	mov	r1, fp
 80037ea:	018b      	lsls	r3, r1, #6
 80037ec:	4651      	mov	r1, sl
 80037ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037f2:	4651      	mov	r1, sl
 80037f4:	018a      	lsls	r2, r1, #6
 80037f6:	46d4      	mov	ip, sl
 80037f8:	ebb2 080c 	subs.w	r8, r2, ip
 80037fc:	4659      	mov	r1, fp
 80037fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800380e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003816:	4690      	mov	r8, r2
 8003818:	4699      	mov	r9, r3
 800381a:	4623      	mov	r3, r4
 800381c:	eb18 0303 	adds.w	r3, r8, r3
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	462b      	mov	r3, r5
 8003824:	eb49 0303 	adc.w	r3, r9, r3
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003836:	4629      	mov	r1, r5
 8003838:	024b      	lsls	r3, r1, #9
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	4604      	mov	r4, r0
 8003840:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003844:	4601      	mov	r1, r0
 8003846:	024a      	lsls	r2, r1, #9
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384e:	2200      	movs	r2, #0
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
 8003852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003858:	f7fc fd12 	bl	8000280 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003864:	e05c      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003866:	4b3a      	ldr	r3, [pc, #232]	; (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	099b      	lsrs	r3, r3, #6
 800386c:	2200      	movs	r2, #0
 800386e:	4618      	mov	r0, r3
 8003870:	4611      	mov	r1, r2
 8003872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	0159      	lsls	r1, r3, #5
 800388e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003892:	0150      	lsls	r0, r2, #5
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	46c4      	mov	ip, r8
 800389a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800389e:	4640      	mov	r0, r8
 80038a0:	4649      	mov	r1, r9
 80038a2:	468c      	mov	ip, r1
 80038a4:	eb63 0b0c 	sbc.w	fp, r3, ip
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038bc:	ebb2 040a 	subs.w	r4, r2, sl
 80038c0:	eb63 050b 	sbc.w	r5, r3, fp
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4603      	mov	r3, r0
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	460b      	mov	r3, r1
 80038e0:	eb45 0303 	adc.w	r3, r5, r3
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f2:	4629      	mov	r1, r5
 80038f4:	028b      	lsls	r3, r1, #10
 80038f6:	4620      	mov	r0, r4
 80038f8:	4629      	mov	r1, r5
 80038fa:	4604      	mov	r4, r0
 80038fc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003900:	4601      	mov	r1, r0
 8003902:	028a      	lsls	r2, r1, #10
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390a:	2200      	movs	r2, #0
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	61fa      	str	r2, [r7, #28]
 8003910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003914:	f7fc fcb4 	bl	8000280 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4613      	mov	r3, r2
 800391e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	3301      	adds	r3, #1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800393a:	e002      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetSysClockFreq+0x210>)
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003944:	4618      	mov	r0, r3
 8003946:	3750      	adds	r7, #80	; 0x50
 8003948:	46bd      	mov	sp, r7
 800394a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	00f42400 	.word	0x00f42400
 8003958:	007a1200 	.word	0x007a1200

0800395c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <HAL_RCC_GetHCLKFreq+0x10>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	20000000 	.word	0x20000000

08003970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003974:	f7ff fff2 	bl	800395c <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0b5b      	lsrs	r3, r3, #13
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	0801cc94 	.word	0x0801cc94

08003998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	220f      	movs	r2, #15
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_RCC_GetClockConfig+0x58>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_RCC_GetClockConfig+0x58>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_GetClockConfig+0x58>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_RCC_GetClockConfig+0x58>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	08db      	lsrs	r3, r3, #3
 80039d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_GetClockConfig+0x5c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0207 	and.w	r2, r3, #7
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	601a      	str	r2, [r3, #0]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40023c00 	.word	0x40023c00

080039f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e041      	b.n	8003a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f839 	bl	8003a96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 f9d0 	bl	8003ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04e      	b.n	8003b5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d022      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d01d      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d111      	bne.n	8003b4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d010      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4a:	e007      	b.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40010400 	.word	0x40010400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40001800 	.word	0x40001800

08003b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0202 	mvn.w	r2, #2
 8003bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8ed 	bl	8003da6 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8e0 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f8ef 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0204 	mvn.w	r2, #4
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8c3 	bl	8003da6 <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8b6 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8c5 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0208 	mvn.w	r2, #8
 8003c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f899 	bl	8003da6 <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f88c 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f89b 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0210 	mvn.w	r2, #16
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f86f 	bl	8003da6 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f862 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f871 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0201 	mvn.w	r2, #1
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fc fd74 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b80      	cmp	r3, #128	; 0x80
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8fb 	bl	8003f2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b40      	cmp	r3, #64	; 0x40
 8003d40:	d10e      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f835 	bl	8003dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d10e      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d107      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0220 	mvn.w	r2, #32
 8003d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8c6 	bl	8003f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3f      	ldr	r2, [pc, #252]	; (8003eec <TIM_Base_SetConfig+0x110>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d00f      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <TIM_Base_SetConfig+0x114>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3b      	ldr	r2, [pc, #236]	; (8003ef4 <TIM_Base_SetConfig+0x118>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <TIM_Base_SetConfig+0x11c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a39      	ldr	r2, [pc, #228]	; (8003efc <TIM_Base_SetConfig+0x120>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d108      	bne.n	8003e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2e      	ldr	r2, [pc, #184]	; (8003eec <TIM_Base_SetConfig+0x110>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d02b      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d027      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <TIM_Base_SetConfig+0x114>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d023      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <TIM_Base_SetConfig+0x118>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <TIM_Base_SetConfig+0x11c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01b      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <TIM_Base_SetConfig+0x120>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d017      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <TIM_Base_SetConfig+0x124>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <TIM_Base_SetConfig+0x128>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00f      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <TIM_Base_SetConfig+0x12c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a24      	ldr	r2, [pc, #144]	; (8003f0c <TIM_Base_SetConfig+0x130>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <TIM_Base_SetConfig+0x134>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <TIM_Base_SetConfig+0x138>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d108      	bne.n	8003ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <TIM_Base_SetConfig+0x110>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0xf8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <TIM_Base_SetConfig+0x120>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d103      	bne.n	8003edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	615a      	str	r2, [r3, #20]
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40000c00 	.word	0x40000c00
 8003efc:	40010400 	.word	0x40010400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	40001800 	.word	0x40001800
 8003f10:	40001c00 	.word	0x40001c00
 8003f14:	40002000 	.word	0x40002000

08003f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d165      	bne.n	800401c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4a41      	ldr	r2, [pc, #260]	; (8004058 <USB_SetTurnaroundTime+0x11c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d906      	bls.n	8003f66 <USB_SetTurnaroundTime+0x2a>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4a40      	ldr	r2, [pc, #256]	; (800405c <USB_SetTurnaroundTime+0x120>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d202      	bcs.n	8003f66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f60:	230f      	movs	r3, #15
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e062      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4a3c      	ldr	r2, [pc, #240]	; (800405c <USB_SetTurnaroundTime+0x120>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d306      	bcc.n	8003f7c <USB_SetTurnaroundTime+0x40>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <USB_SetTurnaroundTime+0x124>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d202      	bcs.n	8003f7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f76:	230e      	movs	r3, #14
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e057      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4a38      	ldr	r2, [pc, #224]	; (8004060 <USB_SetTurnaroundTime+0x124>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d306      	bcc.n	8003f92 <USB_SetTurnaroundTime+0x56>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4a37      	ldr	r2, [pc, #220]	; (8004064 <USB_SetTurnaroundTime+0x128>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d202      	bcs.n	8003f92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f8c:	230d      	movs	r3, #13
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e04c      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4a33      	ldr	r2, [pc, #204]	; (8004064 <USB_SetTurnaroundTime+0x128>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d306      	bcc.n	8003fa8 <USB_SetTurnaroundTime+0x6c>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4a32      	ldr	r2, [pc, #200]	; (8004068 <USB_SetTurnaroundTime+0x12c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d802      	bhi.n	8003fa8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003fa2:	230c      	movs	r3, #12
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e041      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <USB_SetTurnaroundTime+0x12c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d906      	bls.n	8003fbe <USB_SetTurnaroundTime+0x82>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4a2e      	ldr	r2, [pc, #184]	; (800406c <USB_SetTurnaroundTime+0x130>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d802      	bhi.n	8003fbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003fb8:	230b      	movs	r3, #11
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e036      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4a2a      	ldr	r2, [pc, #168]	; (800406c <USB_SetTurnaroundTime+0x130>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d906      	bls.n	8003fd4 <USB_SetTurnaroundTime+0x98>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4a29      	ldr	r2, [pc, #164]	; (8004070 <USB_SetTurnaroundTime+0x134>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d802      	bhi.n	8003fd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003fce:	230a      	movs	r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e02b      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a26      	ldr	r2, [pc, #152]	; (8004070 <USB_SetTurnaroundTime+0x134>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d906      	bls.n	8003fea <USB_SetTurnaroundTime+0xae>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4a25      	ldr	r2, [pc, #148]	; (8004074 <USB_SetTurnaroundTime+0x138>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d202      	bcs.n	8003fea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003fe4:	2309      	movs	r3, #9
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e020      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <USB_SetTurnaroundTime+0x138>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d306      	bcc.n	8004000 <USB_SetTurnaroundTime+0xc4>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4a20      	ldr	r2, [pc, #128]	; (8004078 <USB_SetTurnaroundTime+0x13c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d802      	bhi.n	8004000 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e015      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <USB_SetTurnaroundTime+0x13c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d906      	bls.n	8004016 <USB_SetTurnaroundTime+0xda>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a1c      	ldr	r2, [pc, #112]	; (800407c <USB_SetTurnaroundTime+0x140>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d202      	bcs.n	8004016 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004010:	2307      	movs	r3, #7
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e00a      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004016:	2306      	movs	r3, #6
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e007      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004022:	2309      	movs	r3, #9
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e001      	b.n	800402c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004028:	2309      	movs	r3, #9
 800402a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	029b      	lsls	r3, r3, #10
 8004040:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004044:	431a      	orrs	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	00d8acbf 	.word	0x00d8acbf
 800405c:	00e4e1c0 	.word	0x00e4e1c0
 8004060:	00f42400 	.word	0x00f42400
 8004064:	01067380 	.word	0x01067380
 8004068:	011a499f 	.word	0x011a499f
 800406c:	01312cff 	.word	0x01312cff
 8004070:	014ca43f 	.word	0x014ca43f
 8004074:	016e3600 	.word	0x016e3600
 8004078:	01a6ab1f 	.word	0x01a6ab1f
 800407c:	01e84800 	.word	0x01e84800

08004080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <USB_FlushTxFifo+0x64>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e01b      	b.n	80040d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	daf2      	bge.n	800408e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	019b      	lsls	r3, r3, #6
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <USB_FlushTxFifo+0x64>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e006      	b.n	80040d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d0f0      	beq.n	80040b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	00030d40 	.word	0x00030d40

080040e8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0306 	and.w	r3, r3, #6
 8004100:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004108:	2300      	movs	r3, #0
 800410a:	75fb      	strb	r3, [r7, #23]
 800410c:	e00a      	b.n	8004124 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d002      	beq.n	800411a <USB_GetDevSpeed+0x32>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b06      	cmp	r3, #6
 8004118:	d102      	bne.n	8004120 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800411a:	2302      	movs	r3, #2
 800411c:	75fb      	strb	r3, [r7, #23]
 800411e:	e001      	b.n	8004124 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004120:	230f      	movs	r3, #15
 8004122:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
}
 8004126:	4618      	mov	r0, r3
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d13a      	bne.n	80041c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	2101      	movs	r1, #1
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	b29b      	uxth	r3, r3
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800416a:	4313      	orrs	r3, r2
 800416c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d155      	bne.n	8004230 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	791b      	ldrb	r3, [r3, #4]
 800419e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	059b      	lsls	r3, r3, #22
 80041a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041a8:	4313      	orrs	r3, r2
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e036      	b.n	8004230 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	2101      	movs	r1, #1
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11a      	bne.n	8004230 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	791b      	ldrb	r3, [r3, #4]
 8004214:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004216:	430b      	orrs	r3, r1
 8004218:	4313      	orrs	r3, r2
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	440a      	add	r2, r1
 8004222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	2b01      	cmp	r3, #1
 800425a:	f040 815c 	bne.w	8004516 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d132      	bne.n	80042cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	440a      	add	r2, r1
 800427c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004280:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004284:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	0151      	lsls	r1, r2, #5
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	440a      	add	r2, r1
 80042c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c4:	0cdb      	lsrs	r3, r3, #19
 80042c6:	04db      	lsls	r3, r3, #19
 80042c8:	6113      	str	r3, [r2, #16]
 80042ca:	e074      	b.n	80043b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	0cdb      	lsrs	r3, r3, #19
 80042e8:	04db      	lsls	r3, r3, #19
 80042ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	0151      	lsls	r1, r2, #5
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	440a      	add	r2, r1
 8004302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004306:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800430a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800430e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6999      	ldr	r1, [r3, #24]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	440b      	add	r3, r1
 8004328:	1e59      	subs	r1, r3, #1
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004332:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004334:	4b9d      	ldr	r3, [pc, #628]	; (80045ac <USB_EPStartXfer+0x370>)
 8004336:	400b      	ands	r3, r1
 8004338:	69b9      	ldr	r1, [r7, #24]
 800433a:	0148      	lsls	r0, r1, #5
 800433c:	69f9      	ldr	r1, [r7, #28]
 800433e:	4401      	add	r1, r0
 8004340:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004344:	4313      	orrs	r3, r2
 8004346:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	0148      	lsls	r0, r1, #5
 8004362:	69f9      	ldr	r1, [r7, #28]
 8004364:	4401      	add	r1, r0
 8004366:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	791b      	ldrb	r3, [r3, #4]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d11f      	bne.n	80043b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004390:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004394:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d14b      	bne.n	8004454 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	461a      	mov	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	791b      	ldrb	r3, [r3, #4]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d128      	bne.n	8004432 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d110      	bne.n	8004412 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	440a      	add	r2, r1
 8004406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e00f      	b.n	8004432 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e133      	b.n	80046bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	0151      	lsls	r1, r2, #5
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	440a      	add	r2, r1
 800446a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004472:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	791b      	ldrb	r3, [r3, #4]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d015      	beq.n	80044a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 811b 	beq.w	80046bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	2101      	movs	r1, #1
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	69f9      	ldr	r1, [r7, #28]
 800449e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a2:	4313      	orrs	r3, r2
 80044a4:	634b      	str	r3, [r1, #52]	; 0x34
 80044a6:	e109      	b.n	80046bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e00f      	b.n	80044fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	b298      	uxth	r0, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4603      	mov	r3, r0
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fadc 	bl	8004acc <USB_WritePacket>
 8004514:	e0d2      	b.n	80046bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004530:	0cdb      	lsrs	r3, r3, #19
 8004532:	04db      	lsls	r3, r3, #19
 8004534:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004550:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004554:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004558:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d126      	bne.n	80045b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	0148      	lsls	r0, r1, #5
 800457c:	69f9      	ldr	r1, [r7, #28]
 800457e:	4401      	add	r1, r0
 8004580:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045a6:	6113      	str	r3, [r2, #16]
 80045a8:	e03a      	b.n	8004620 <USB_EPStartXfer+0x3e4>
 80045aa:	bf00      	nop
 80045ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	1e5a      	subs	r2, r3, #1
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	8afa      	ldrh	r2, [r7, #22]
 80045cc:	fb03 f202 	mul.w	r2, r3, r2
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	04d9      	lsls	r1, r3, #19
 80045e6:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <USB_EPStartXfer+0x48c>)
 80045e8:	400b      	ands	r3, r1
 80045ea:	69b9      	ldr	r1, [r7, #24]
 80045ec:	0148      	lsls	r0, r1, #5
 80045ee:	69f9      	ldr	r1, [r7, #28]
 80045f0:	4401      	add	r1, r0
 80045f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045f6:	4313      	orrs	r3, r2
 80045f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	0148      	lsls	r0, r1, #5
 8004614:	69f9      	ldr	r1, [r7, #28]
 8004616:	4401      	add	r1, r0
 8004618:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800461c:	4313      	orrs	r3, r2
 800461e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10d      	bne.n	8004642 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6919      	ldr	r1, [r3, #16]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	460a      	mov	r2, r1
 8004640:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	791b      	ldrb	r3, [r3, #4]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d128      	bne.n	800469c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d110      	bne.n	800467c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004674:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e00f      	b.n	800469c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	1ff80000 	.word	0x1ff80000

080046cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	f040 80ce 	bne.w	800488a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d132      	bne.n	800475c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004710:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004714:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004754:	0cdb      	lsrs	r3, r3, #19
 8004756:	04db      	lsls	r3, r3, #19
 8004758:	6113      	str	r3, [r2, #16]
 800475a:	e04e      	b.n	80047fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004776:	0cdb      	lsrs	r3, r3, #19
 8004778:	04db      	lsls	r3, r3, #19
 800477a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004796:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800479a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800479e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d903      	bls.n	80047b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ea:	6939      	ldr	r1, [r7, #16]
 80047ec:	0148      	lsls	r0, r1, #5
 80047ee:	6979      	ldr	r1, [r7, #20]
 80047f0:	4401      	add	r1, r0
 80047f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047f6:	4313      	orrs	r3, r2
 80047f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d11e      	bne.n	800483e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	e097      	b.n	800496e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800485c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8083 	beq.w	800496e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f303 	lsl.w	r3, r1, r3
 800487e:	6979      	ldr	r1, [r7, #20]
 8004880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004884:	4313      	orrs	r3, r2
 8004886:	634b      	str	r3, [r1, #52]	; 0x34
 8004888:	e071      	b.n	800496e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	0151      	lsls	r1, r2, #5
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	440a      	add	r2, r1
 80048a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a4:	0cdb      	lsrs	r3, r3, #19
 80048a6:	04db      	lsls	r3, r3, #19
 80048a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	0151      	lsls	r1, r2, #5
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	440a      	add	r2, r1
 80048c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491c:	6939      	ldr	r1, [r7, #16]
 800491e:	0148      	lsls	r0, r1, #5
 8004920:	6979      	ldr	r1, [r7, #20]
 8004922:	4401      	add	r1, r0
 8004924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004928:	4313      	orrs	r3, r2
 800492a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d10d      	bne.n	800494e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6919      	ldr	r1, [r3, #16]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	460a      	mov	r2, r1
 800494c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004968:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800496c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr

0800497a <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d14a      	bne.n	8004a2e <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b0:	f040 8086 	bne.w	8004ac0 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	7812      	ldrb	r2, [r2, #0]
 80049c8:	0151      	lsls	r1, r2, #5
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	440a      	add	r2, r1
 80049ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049fa:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d902      	bls.n	8004a12 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
          break;
 8004a10:	e056      	b.n	8004ac0 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2a:	d0e7      	beq.n	80049fc <USB_EPStopXfer+0x82>
 8004a2c:	e048      	b.n	8004ac0 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a46:	d13b      	bne.n	8004ac0 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a8e:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d902      	bls.n	8004aa6 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
          break;
 8004aa4:	e00c      	b.n	8004ac0 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004abe:	d0e7      	beq.n	8004a90 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	; 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	460b      	mov	r3, r1
 8004adc:	71fb      	strb	r3, [r7, #7]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004aea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d123      	bne.n	8004b3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004af2:	88bb      	ldrh	r3, [r7, #4]
 8004af4:	3303      	adds	r3, #3
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e018      	b.n	8004b32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	031a      	lsls	r2, r3, #12
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	3301      	adds	r3, #1
 8004b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d3e2      	bcc.n	8004b00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3724      	adds	r7, #36	; 0x24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b08b      	sub	sp, #44	; 0x2c
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	623b      	str	r3, [r7, #32]
 8004b70:	e014      	b.n	8004b9c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	3301      	adds	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	3301      	adds	r3, #1
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	3301      	adds	r3, #1
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d3e6      	bcc.n	8004b72 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ba4:	8bfb      	ldrh	r3, [r7, #30]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01e      	beq.n	8004be8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f107 0310 	add.w	r3, r7, #16
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	701a      	strb	r2, [r3, #0]
      i++;
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	623b      	str	r3, [r7, #32]
      pDest++;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	3301      	adds	r3, #1
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004bdc:	8bfb      	ldrh	r3, [r7, #30]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004be2:	8bfb      	ldrh	r3, [r7, #30]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ea      	bne.n	8004bbe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	372c      	adds	r7, #44	; 0x2c
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d12c      	bne.n	8004c6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	db12      	blt.n	8004c48 <USB_EPSetStall+0x54>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00f      	beq.n	8004c48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e02b      	b.n	8004cc2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db12      	blt.n	8004ca2 <USB_EPSetStall+0xae>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ca0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d128      	bne.n	8004d3c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	791b      	ldrb	r3, [r3, #4]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d003      	beq.n	8004d1a <USB_EPClearStall+0x4c>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	791b      	ldrb	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d138      	bne.n	8004d8c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e027      	b.n	8004d8c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	791b      	ldrb	r3, [r3, #4]
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d003      	beq.n	8004d6c <USB_EPClearStall+0x9e>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	791b      	ldrb	r3, [r3, #4]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d10f      	bne.n	8004d8c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4013      	ands	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	b29b      	uxth	r3, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4013      	ands	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e98:	68bb      	ldr	r3, [r7, #8]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed4:	01db      	lsls	r3, r3, #7
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	460b      	mov	r3, r1
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	333c      	adds	r3, #60	; 0x3c
 8004f72:	3304      	adds	r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4a25      	ldr	r2, [pc, #148]	; (8005010 <USB_EP0_OutStart+0xb4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d90a      	bls.n	8004f96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f90:	d101      	bne.n	8004f96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e037      	b.n	8005006 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc4:	f043 0318 	orr.w	r3, r3, #24
 8004fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004fde:	7afb      	ldrb	r3, [r7, #11]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d10f      	bne.n	8005004 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005002:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	4f54300a 	.word	0x4f54300a

08005014 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005014:	b5b0      	push	{r4, r5, r7, lr}
 8005016:	b08c      	sub	sp, #48	; 0x30
 8005018:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800501a:	2100      	movs	r1, #0
 800501c:	2000      	movs	r0, #0
 800501e:	f004 fc1d 	bl	800985c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005022:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <MX_LWIP_Init+0x90>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005028:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <MX_LWIP_Init+0x94>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <MX_LWIP_Init+0x98>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005034:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <MX_LWIP_Init+0x9c>)
 8005036:	9302      	str	r3, [sp, #8]
 8005038:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <MX_LWIP_Init+0xa0>)
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	2300      	movs	r3, #0
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <MX_LWIP_Init+0x98>)
 8005042:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <MX_LWIP_Init+0x94>)
 8005044:	4917      	ldr	r1, [pc, #92]	; (80050a4 <MX_LWIP_Init+0x90>)
 8005046:	481c      	ldr	r0, [pc, #112]	; (80050b8 <MX_LWIP_Init+0xa4>)
 8005048:	f006 fd48 	bl	800badc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800504c:	481a      	ldr	r0, [pc, #104]	; (80050b8 <MX_LWIP_Init+0xa4>)
 800504e:	f006 fefd 	bl	800be4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <MX_LWIP_Init+0xa4>)
 8005054:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005058:	089b      	lsrs	r3, r3, #2
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005064:	4814      	ldr	r0, [pc, #80]	; (80050b8 <MX_LWIP_Init+0xa4>)
 8005066:	f006 feff 	bl	800be68 <netif_set_up>
 800506a:	e002      	b.n	8005072 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800506c:	4812      	ldr	r0, [pc, #72]	; (80050b8 <MX_LWIP_Init+0xa4>)
 800506e:	f006 ff67 	bl	800bf40 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005072:	4912      	ldr	r1, [pc, #72]	; (80050bc <MX_LWIP_Init+0xa8>)
 8005074:	4810      	ldr	r0, [pc, #64]	; (80050b8 <MX_LWIP_Init+0xa4>)
 8005076:	f006 ff95 	bl	800bfa4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <MX_LWIP_Init+0xac>)
 800507c:	1d3c      	adds	r4, r7, #4
 800507e:	461d      	mov	r5, r3
 8005080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005084:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800508c:	1d3b      	adds	r3, r7, #4
 800508e:	490a      	ldr	r1, [pc, #40]	; (80050b8 <MX_LWIP_Init+0xa4>)
 8005090:	4618      	mov	r0, r3
 8005092:	f001 fc65 	bl	8006960 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005096:	4808      	ldr	r0, [pc, #32]	; (80050b8 <MX_LWIP_Init+0xa4>)
 8005098:	f00f f880 	bl	801419c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800509c:	bf00      	nop
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bdb0      	pop	{r4, r5, r7, pc}
 80050a4:	200003e0 	.word	0x200003e0
 80050a8:	200003e4 	.word	0x200003e4
 80050ac:	200003e8 	.word	0x200003e8
 80050b0:	08009799 	.word	0x08009799
 80050b4:	080053e9 	.word	0x080053e9
 80050b8:	200003a8 	.word	0x200003a8
 80050bc:	080050c5 	.word	0x080050c5
 80050c0:	08019610 	.word	0x08019610

080050c4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
	...

080050d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80050d8:	b5b0      	push	{r4, r5, r7, lr}
 80050da:	b08c      	sub	sp, #48	; 0x30
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80050e6:	4b4f      	ldr	r3, [pc, #316]	; (8005224 <low_level_init+0x14c>)
 80050e8:	4a4f      	ldr	r2, [pc, #316]	; (8005228 <low_level_init+0x150>)
 80050ea:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[1] = 0x80;
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  MACAddr[2] = 0xE1;
 80050f8:	23e1      	movs	r3, #225	; 0xe1
 80050fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  MACAddr[3] = 0x00;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  MACAddr[4] = 0x00;
 8005104:	2300      	movs	r3, #0
 8005106:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[5] = 0x00;
 800510a:	2300      	movs	r3, #0
 800510c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  heth.Init.MACAddr = &MACAddr[0];
 8005110:	4a44      	ldr	r2, [pc, #272]	; (8005224 <low_level_init+0x14c>)
 8005112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005116:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005118:	4b42      	ldr	r3, [pc, #264]	; (8005224 <low_level_init+0x14c>)
 800511a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800511e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005120:	4b40      	ldr	r3, [pc, #256]	; (8005224 <low_level_init+0x14c>)
 8005122:	4a42      	ldr	r2, [pc, #264]	; (800522c <low_level_init+0x154>)
 8005124:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005126:	4b3f      	ldr	r3, [pc, #252]	; (8005224 <low_level_init+0x14c>)
 8005128:	4a41      	ldr	r2, [pc, #260]	; (8005230 <low_level_init+0x158>)
 800512a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800512c:	4b3d      	ldr	r3, [pc, #244]	; (8005224 <low_level_init+0x14c>)
 800512e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005132:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005134:	483b      	ldr	r0, [pc, #236]	; (8005224 <low_level_init+0x14c>)
 8005136:	f7fb ff23 	bl	8000f80 <HAL_ETH_Init>
 800513a:	4603      	mov	r3, r0
 800513c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005140:	2238      	movs	r2, #56	; 0x38
 8005142:	2100      	movs	r1, #0
 8005144:	483b      	ldr	r0, [pc, #236]	; (8005234 <low_level_init+0x15c>)
 8005146:	f013 fb97 	bl	8018878 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800514a:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <low_level_init+0x15c>)
 800514c:	2221      	movs	r2, #33	; 0x21
 800514e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005150:	4b38      	ldr	r3, [pc, #224]	; (8005234 <low_level_init+0x15c>)
 8005152:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005156:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005158:	4b36      	ldr	r3, [pc, #216]	; (8005234 <low_level_init+0x15c>)
 800515a:	2200      	movs	r2, #0
 800515c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800515e:	4836      	ldr	r0, [pc, #216]	; (8005238 <low_level_init+0x160>)
 8005160:	f006 fb78 	bl	800b854 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2206      	movs	r2, #6
 8005168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800516c:	4b2d      	ldr	r3, [pc, #180]	; (8005224 <low_level_init+0x14c>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	781a      	ldrb	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005178:	4b2a      	ldr	r3, [pc, #168]	; (8005224 <low_level_init+0x14c>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	785a      	ldrb	r2, [r3, #1]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <low_level_init+0x14c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	789a      	ldrb	r2, [r3, #2]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005190:	4b24      	ldr	r3, [pc, #144]	; (8005224 <low_level_init+0x14c>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	78da      	ldrb	r2, [r3, #3]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800519c:	4b21      	ldr	r3, [pc, #132]	; (8005224 <low_level_init+0x14c>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	791a      	ldrb	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80051a8:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <low_level_init+0x14c>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	795a      	ldrb	r2, [r3, #5]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051c2:	f043 030a 	orr.w	r3, r3, #10
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80051ce:	2203      	movs	r2, #3
 80051d0:	2100      	movs	r1, #0
 80051d2:	2001      	movs	r0, #1
 80051d4:	f001 ffab 	bl	800712e <xQueueGenericCreate>
 80051d8:	4603      	mov	r3, r0
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <low_level_init+0x164>)
 80051dc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80051de:	2203      	movs	r2, #3
 80051e0:	2100      	movs	r1, #0
 80051e2:	2001      	movs	r0, #1
 80051e4:	f001 ffa3 	bl	800712e <xQueueGenericCreate>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4a15      	ldr	r2, [pc, #84]	; (8005240 <low_level_init+0x168>)
 80051ec:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <low_level_init+0x16c>)
 80051f0:	f107 040c 	add.w	r4, r7, #12
 80051f4:	461d      	mov	r5, r3
 80051f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005202:	f107 030c 	add.w	r3, r7, #12
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	f001 fba9 	bl	8006960 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800520e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <low_level_init+0x142>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8005216:	f7fb fafd 	bl	8000814 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800521a:	bf00      	nop
 800521c:	3730      	adds	r7, #48	; 0x30
 800521e:	46bd      	mov	sp, r7
 8005220:	bdb0      	pop	{r4, r5, r7, pc}
 8005222:	bf00      	nop
 8005224:	20004ec0 	.word	0x20004ec0
 8005228:	40028000 	.word	0x40028000
 800522c:	20004e18 	.word	0x20004e18
 8005230:	20004d78 	.word	0x20004d78
 8005234:	20004f70 	.word	0x20004f70
 8005238:	0801cca8 	.word	0x0801cca8
 800523c:	20004eb8 	.word	0x20004eb8
 8005240:	20004ebc 	.word	0x20004ebc
 8005244:	08019634 	.word	0x08019634

08005248 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b092      	sub	sp, #72	; 0x48
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005260:	f107 030c 	add.w	r3, r7, #12
 8005264:	2230      	movs	r2, #48	; 0x30
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f013 fb05 	bl	8018878 <memset>

  for(q = p; q != NULL; q = q->next)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	643b      	str	r3, [r7, #64]	; 0x40
 8005272:	e045      	b.n	8005300 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005276:	2b03      	cmp	r3, #3
 8005278:	d902      	bls.n	8005280 <low_level_output+0x38>
      return ERR_IF;
 800527a:	f06f 030b 	mvn.w	r3, #11
 800527e:	e065      	b.n	800534c <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	3348      	adds	r3, #72	; 0x48
 8005290:	443b      	add	r3, r7
 8005292:	3b3c      	subs	r3, #60	; 0x3c
 8005294:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005298:	895b      	ldrh	r3, [r3, #10]
 800529a:	4619      	mov	r1, r3
 800529c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800529e:	4613      	mov	r3, r2
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	3348      	adds	r3, #72	; 0x48
 80052a8:	443b      	add	r3, r7
 80052aa:	3b38      	subs	r3, #56	; 0x38
 80052ac:	6019      	str	r1, [r3, #0]

    if(i>0)
 80052ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d011      	beq.n	80052d8 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80052b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b6:	1e5a      	subs	r2, r3, #1
 80052b8:	f107 000c 	add.w	r0, r7, #12
 80052bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052be:	460b      	mov	r3, r1
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	440b      	add	r3, r1
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	18c1      	adds	r1, r0, r3
 80052c8:	4613      	mov	r3, r2
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	3348      	adds	r3, #72	; 0x48
 80052d2:	443b      	add	r3, r7
 80052d4:	3b34      	subs	r3, #52	; 0x34
 80052d6:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80052d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 80052e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e2:	4613      	mov	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	3348      	adds	r3, #72	; 0x48
 80052ec:	443b      	add	r3, r7
 80052ee:	3b34      	subs	r3, #52	; 0x34
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
    }

    i++;
 80052f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f6:	3301      	adds	r3, #1
 80052f8:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80052fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1b6      	bne.n	8005274 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	891b      	ldrh	r3, [r3, #8]
 800530a:	461a      	mov	r2, r3
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <low_level_output+0x10c>)
 800530e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005310:	4a10      	ldr	r2, [pc, #64]	; (8005354 <low_level_output+0x10c>)
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005318:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <low_level_output+0x10c>)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800531e:	6838      	ldr	r0, [r7, #0]
 8005320:	f007 fa8e 	bl	800c840 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005324:	490b      	ldr	r1, [pc, #44]	; (8005354 <low_level_output+0x10c>)
 8005326:	480c      	ldr	r0, [pc, #48]	; (8005358 <low_level_output+0x110>)
 8005328:	f7fb feb1 	bl	800108e <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800532c:	bf00      	nop
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <low_level_output+0x114>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f04f 31ff 	mov.w	r1, #4294967295
 8005336:	4618      	mov	r0, r3
 8005338:	f001 fc0e 	bl	8006b58 <osSemaphoreWait>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f5      	bne.n	800532e <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005342:	4805      	ldr	r0, [pc, #20]	; (8005358 <low_level_output+0x110>)
 8005344:	f7fc f834 	bl	80013b0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005348:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800534c:	4618      	mov	r0, r3
 800534e:	3748      	adds	r7, #72	; 0x48
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20004f70 	.word	0x20004f70
 8005358:	20004ec0 	.word	0x20004ec0
 800535c:	20004ebc 	.word	0x20004ebc

08005360 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <low_level_input+0x2c>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	4619      	mov	r1, r3
 800537a:	4805      	ldr	r0, [pc, #20]	; (8005390 <low_level_input+0x30>)
 800537c:	f7fb fee3 	bl	8001146 <HAL_ETH_ReadData>
  }

  return p;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20004d74 	.word	0x20004d74
 8005390:	20004ec0 	.word	0x20004ec0

08005394 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053a4:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <ethernetif_input+0x50>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fbd3 	bl	8006b58 <osSemaphoreWait>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f5      	bne.n	80053a4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80053b8:	68b8      	ldr	r0, [r7, #8]
 80053ba:	f7ff ffd1 	bl	8005360 <low_level_input>
 80053be:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	4798      	blx	r3
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f007 f98e 	bl	800c6f8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ea      	bne.n	80053b8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053e2:	e7df      	b.n	80053a4 <ethernetif_input+0x10>
 80053e4:	20004eb8 	.word	0x20004eb8

080053e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <ethernetif_init+0x1c>
 80053f6:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <ethernetif_init+0x48>)
 80053f8:	f240 12a9 	movw	r2, #425	; 0x1a9
 80053fc:	490d      	ldr	r1, [pc, #52]	; (8005434 <ethernetif_init+0x4c>)
 80053fe:	480e      	ldr	r0, [pc, #56]	; (8005438 <ethernetif_init+0x50>)
 8005400:	f013 fb20 	bl	8018a44 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2273      	movs	r2, #115	; 0x73
 8005408:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2274      	movs	r2, #116	; 0x74
 8005410:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a09      	ldr	r2, [pc, #36]	; (800543c <ethernetif_init+0x54>)
 8005418:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a08      	ldr	r2, [pc, #32]	; (8005440 <ethernetif_init+0x58>)
 800541e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fe59 	bl	80050d8 <low_level_init>

  return ERR_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	08019650 	.word	0x08019650
 8005434:	0801966c 	.word	0x0801966c
 8005438:	0801967c 	.word	0x0801967c
 800543c:	08015ff1 	.word	0x08015ff1
 8005440:	08005249 	.word	0x08005249

08005444 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	4809      	ldr	r0, [pc, #36]	; (8005478 <pbuf_free_custom+0x34>)
 8005454:	f006 faee 	bl	800ba34 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <pbuf_free_custom+0x38>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <pbuf_free_custom+0x38>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <pbuf_free_custom+0x3c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f001 fbc2 	bl	8006bf4 <osSemaphoreRelease>
  }
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	0801cca8 	.word	0x0801cca8
 800547c:	20004d74 	.word	0x20004d74
 8005480:	20004eb8 	.word	0x20004eb8

08005484 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005488:	f7fb fc6c 	bl	8000d64 <HAL_GetTick>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	bd80      	pop	{r7, pc}

08005492 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800549a:	2064      	movs	r0, #100	; 0x64
 800549c:	f001 faac 	bl	80069f8 <osDelay>
 80054a0:	e7fb      	b.n	800549a <ethernet_link_thread+0x8>
	...

080054a4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80054ac:	4812      	ldr	r0, [pc, #72]	; (80054f8 <HAL_ETH_RxAllocateCallback+0x54>)
 80054ae:	f006 fa4d 	bl	800b94c <memp_malloc_pool>
 80054b2:	60f8      	str	r0, [r7, #12]
  if (p)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d014      	beq.n	80054e4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f103 0220 	add.w	r2, r3, #32
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <HAL_ETH_RxAllocateCallback+0x58>)
 80054c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80054d2:	9201      	str	r2, [sp, #4]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2241      	movs	r2, #65	; 0x41
 80054da:	2100      	movs	r1, #0
 80054dc:	2000      	movs	r0, #0
 80054de:	f006 ff51 	bl	800c384 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80054e2:	e005      	b.n	80054f0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <HAL_ETH_RxAllocateCallback+0x5c>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	0801cca8 	.word	0x0801cca8
 80054fc:	08005445 	.word	0x08005445
 8005500:	20004d74 	.word	0x20004d74

08005504 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005504:	b480      	push	{r7}
 8005506:	b089      	sub	sp, #36	; 0x24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3b20      	subs	r3, #32
 8005522:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2200      	movs	r2, #0
 800552e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	887a      	ldrh	r2, [r7, #2]
 8005534:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e003      	b.n	800554e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	e009      	b.n	8005570 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	891a      	ldrh	r2, [r3, #8]
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	4413      	add	r3, r2
 8005564:	b29a      	uxth	r2, r3
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f2      	bne.n	800555c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	3724      	adds	r7, #36	; 0x24
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f007 f8b4 	bl	800c6f8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr

080055ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	4611      	mov	r1, r2
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	4611      	mov	r1, r2
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800560a:	2303      	movs	r3, #3
 800560c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f001 f8ab 	bl	8006786 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2b02      	cmp	r3, #2
 8005652:	d01a      	beq.n	800568a <USBD_LL_SetupStage+0x72>
 8005654:	2b02      	cmp	r3, #2
 8005656:	d822      	bhi.n	800569e <USBD_LL_SetupStage+0x86>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <USBD_LL_SetupStage+0x4a>
 800565c:	2b01      	cmp	r3, #1
 800565e:	d00a      	beq.n	8005676 <USBD_LL_SetupStage+0x5e>
 8005660:	e01d      	b.n	800569e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fb02 	bl	8005c74 <USBD_StdDevReq>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]
      break;
 8005674:	e020      	b.n	80056b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fb6a 	bl	8005d58 <USBD_StdItfReq>
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]
      break;
 8005688:	e016      	b.n	80056b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fbcc 	bl	8005e30 <USBD_StdEPReq>
 8005698:	4603      	mov	r3, r0
 800569a:	73fb      	strb	r3, [r7, #15]
      break;
 800569c:	e00c      	b.n	80056b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f012 fd87 	bl	80181c0 <USBD_LL_StallEP>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
      break;
 80056b6:	bf00      	nop
  }

  return ret;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	460b      	mov	r3, r1
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80056d4:	7afb      	ldrb	r3, [r7, #11]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d16e      	bne.n	80057b8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	f040 8098 	bne.w	800581e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d913      	bls.n	8005722 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4293      	cmp	r3, r2
 8005712:	bf28      	it	cs
 8005714:	4613      	movcs	r3, r2
 8005716:	461a      	mov	r2, r3
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f001 f8aa 	bl	8006874 <USBD_CtlContinueRx>
 8005720:	e07d      	b.n	800581e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2b02      	cmp	r3, #2
 800572e:	d014      	beq.n	800575a <USBD_LL_DataOutStage+0x98>
 8005730:	2b02      	cmp	r3, #2
 8005732:	d81d      	bhi.n	8005770 <USBD_LL_DataOutStage+0xae>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <USBD_LL_DataOutStage+0x7c>
 8005738:	2b01      	cmp	r3, #1
 800573a:	d003      	beq.n	8005744 <USBD_LL_DataOutStage+0x82>
 800573c:	e018      	b.n	8005770 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	75bb      	strb	r3, [r7, #22]
            break;
 8005742:	e018      	b.n	8005776 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fa5a 	bl	8005c08 <USBD_CoreFindIF>
 8005754:	4603      	mov	r3, r0
 8005756:	75bb      	strb	r3, [r7, #22]
            break;
 8005758:	e00d      	b.n	8005776 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fa5b 	bl	8005c20 <USBD_CoreFindEP>
 800576a:	4603      	mov	r3, r0
 800576c:	75bb      	strb	r3, [r7, #22]
            break;
 800576e:	e002      	b.n	8005776 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	75bb      	strb	r3, [r7, #22]
            break;
 8005774:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005776:	7dbb      	ldrb	r3, [r7, #22]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d119      	bne.n	80057b0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b03      	cmp	r3, #3
 8005786:	d113      	bne.n	80057b0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005788:	7dba      	ldrb	r2, [r7, #22]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	32ae      	adds	r2, #174	; 0xae
 800578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005798:	7dba      	ldrb	r2, [r7, #22]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80057a0:	7dba      	ldrb	r2, [r7, #22]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	32ae      	adds	r2, #174	; 0xae
 80057a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f001 f870 	bl	8006896 <USBD_CtlSendStatus>
 80057b6:	e032      	b.n	800581e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80057b8:	7afb      	ldrb	r3, [r7, #11]
 80057ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	4619      	mov	r1, r3
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fa2c 	bl	8005c20 <USBD_CoreFindEP>
 80057c8:	4603      	mov	r3, r0
 80057ca:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057cc:	7dbb      	ldrb	r3, [r7, #22]
 80057ce:	2bff      	cmp	r3, #255	; 0xff
 80057d0:	d025      	beq.n	800581e <USBD_LL_DataOutStage+0x15c>
 80057d2:	7dbb      	ldrb	r3, [r7, #22]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d122      	bne.n	800581e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d117      	bne.n	8005814 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80057e4:	7dba      	ldrb	r2, [r7, #22]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	32ae      	adds	r2, #174	; 0xae
 80057ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00f      	beq.n	8005814 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80057f4:	7dba      	ldrb	r2, [r7, #22]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80057fc:	7dba      	ldrb	r2, [r7, #22]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	32ae      	adds	r2, #174	; 0xae
 8005802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	7afa      	ldrb	r2, [r7, #11]
 800580a:	4611      	mov	r1, r2
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	4798      	blx	r3
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	e000      	b.n	8005820 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	460b      	mov	r3, r1
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005836:	7afb      	ldrb	r3, [r7, #11]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d16f      	bne.n	800591c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3314      	adds	r3, #20
 8005840:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005848:	2b02      	cmp	r3, #2
 800584a:	d15a      	bne.n	8005902 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	429a      	cmp	r2, r3
 8005856:	d914      	bls.n	8005882 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	1ad2      	subs	r2, r2, r3
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	461a      	mov	r2, r3
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 ffef 	bl	8006852 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005874:	2300      	movs	r3, #0
 8005876:	2200      	movs	r2, #0
 8005878:	2100      	movs	r1, #0
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f012 fd49 	bl	8018312 <USBD_LL_PrepareReceive>
 8005880:	e03f      	b.n	8005902 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d11c      	bne.n	80058c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005896:	429a      	cmp	r2, r3
 8005898:	d316      	bcc.n	80058c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d20f      	bcs.n	80058c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058a8:	2200      	movs	r2, #0
 80058aa:	2100      	movs	r1, #0
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 ffd0 	bl	8006852 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058ba:	2300      	movs	r3, #0
 80058bc:	2200      	movs	r2, #0
 80058be:	2100      	movs	r1, #0
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f012 fd26 	bl	8018312 <USBD_LL_PrepareReceive>
 80058c6:	e01c      	b.n	8005902 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d10f      	bne.n	80058f4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058f4:	2180      	movs	r1, #128	; 0x80
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f012 fc62 	bl	80181c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 ffdd 	bl	80068bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d03a      	beq.n	8005982 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7ff fe43 	bl	8005598 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800591a:	e032      	b.n	8005982 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800591c:	7afb      	ldrb	r3, [r7, #11]
 800591e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4619      	mov	r1, r3
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f97a 	bl	8005c20 <USBD_CoreFindEP>
 800592c:	4603      	mov	r3, r0
 800592e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	2bff      	cmp	r3, #255	; 0xff
 8005934:	d025      	beq.n	8005982 <USBD_LL_DataInStage+0x15a>
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d122      	bne.n	8005982 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b03      	cmp	r3, #3
 8005946:	d11c      	bne.n	8005982 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005948:	7dfa      	ldrb	r2, [r7, #23]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	32ae      	adds	r2, #174	; 0xae
 800594e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d014      	beq.n	8005982 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005958:	7dfa      	ldrb	r2, [r7, #23]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005960:	7dfa      	ldrb	r2, [r7, #23]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	32ae      	adds	r2, #174	; 0xae
 8005966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	7afa      	ldrb	r2, [r7, #11]
 800596e:	4611      	mov	r1, r2
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	4798      	blx	r3
 8005974:	4603      	mov	r3, r0
 8005976:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005978:	7dbb      	ldrb	r3, [r7, #22]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800597e:	7dbb      	ldrb	r3, [r7, #22]
 8005980:	e000      	b.n	8005984 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d014      	beq.n	80059f2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00e      	beq.n	80059f2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6852      	ldr	r2, [r2, #4]
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	4611      	mov	r1, r2
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4798      	blx	r3
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80059ee:	2303      	movs	r3, #3
 80059f0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	2200      	movs	r2, #0
 80059f6:	2100      	movs	r1, #0
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f012 fbbb 	bl	8018174 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2240      	movs	r2, #64	; 0x40
 8005a0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a0e:	2340      	movs	r3, #64	; 0x40
 8005a10:	2200      	movs	r2, #0
 8005a12:	2180      	movs	r1, #128	; 0x80
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f012 fbad 	bl	8018174 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2240      	movs	r2, #64	; 0x40
 8005a24:	621a      	str	r2, [r3, #32]

  return ret;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	78fa      	ldrb	r2, [r7, #3]
 8005a40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2204      	movs	r2, #4
 8005a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr

08005a78 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d106      	bne.n	8005a9a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr

08005aa6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d110      	bne.n	8005adc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	32ae      	adds	r2, #174	; 0xae
 8005afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e01c      	b.n	8005b42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d115      	bne.n	8005b40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	32ae      	adds	r2, #174	; 0xae
 8005b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	32ae      	adds	r2, #174	; 0xae
 8005b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	32ae      	adds	r2, #174	; 0xae
 8005b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e01c      	b.n	8005ba6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d115      	bne.n	8005ba4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	32ae      	adds	r2, #174	; 0xae
 8005b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	32ae      	adds	r2, #174	; 0xae
 8005b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	78fa      	ldrb	r2, [r7, #3]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6852      	ldr	r2, [r2, #4]
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	4611      	mov	r1, r2
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr

08005c20 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr

08005c38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c56:	8a3b      	ldrh	r3, [r7, #16]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	b21a      	sxth	r2, r3
 8005c5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c66:	89fb      	ldrh	r3, [r7, #14]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
	...

08005c74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d005      	beq.n	8005c9a <USBD_StdDevReq+0x26>
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d857      	bhi.n	8005d42 <USBD_StdDevReq+0xce>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00f      	beq.n	8005cb6 <USBD_StdDevReq+0x42>
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d153      	bne.n	8005d42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	32ae      	adds	r2, #174	; 0xae
 8005ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb4:	e04a      	b.n	8005d4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d83b      	bhi.n	8005d36 <USBD_StdDevReq+0xc2>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USBD_StdDevReq+0x50>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005d19 	.word	0x08005d19
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005d37 	.word	0x08005d37
 8005cd0:	08005d23 	.word	0x08005d23
 8005cd4:	08005d37 	.word	0x08005d37
 8005cd8:	08005cf7 	.word	0x08005cf7
 8005cdc:	08005ced 	.word	0x08005ced
 8005ce0:	08005d37 	.word	0x08005d37
 8005ce4:	08005d0f 	.word	0x08005d0f
 8005ce8:	08005d01 	.word	0x08005d01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa3c 	bl	800616c <USBD_GetDescriptor>
          break;
 8005cf4:	e024      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fba1 	bl	8006440 <USBD_SetAddress>
          break;
 8005cfe:	e01f      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fbe0 	bl	80064c8 <USBD_SetConfig>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]
          break;
 8005d0c:	e018      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fc83 	bl	800661c <USBD_GetConfig>
          break;
 8005d16:	e013      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fcb4 	bl	8006688 <USBD_GetStatus>
          break;
 8005d20:	e00e      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fce3 	bl	80066f0 <USBD_SetFeature>
          break;
 8005d2a:	e009      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fd07 	bl	8006742 <USBD_ClrFeature>
          break;
 8005d34:	e004      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fd5e 	bl	80067fa <USBD_CtlError>
          break;
 8005d3e:	bf00      	nop
      }
      break;
 8005d40:	e004      	b.n	8005d4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fd58 	bl	80067fa <USBD_CtlError>
      break;
 8005d4a:	bf00      	nop
  }

  return ret;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop

08005d58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d6e:	2b40      	cmp	r3, #64	; 0x40
 8005d70:	d005      	beq.n	8005d7e <USBD_StdItfReq+0x26>
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d852      	bhi.n	8005e1c <USBD_StdItfReq+0xc4>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <USBD_StdItfReq+0x26>
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d14e      	bne.n	8005e1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d840      	bhi.n	8005e0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	889b      	ldrh	r3, [r3, #4]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d836      	bhi.n	8005e04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	889b      	ldrh	r3, [r3, #4]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ff32 	bl	8005c08 <USBD_CoreFindIF>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	2bff      	cmp	r3, #255	; 0xff
 8005dac:	d01d      	beq.n	8005dea <USBD_StdItfReq+0x92>
 8005dae:	7bbb      	ldrb	r3, [r7, #14]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11a      	bne.n	8005dea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005db4:	7bba      	ldrb	r2, [r7, #14]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	32ae      	adds	r2, #174	; 0xae
 8005dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00f      	beq.n	8005de4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005dc4:	7bba      	ldrb	r2, [r7, #14]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005dcc:	7bba      	ldrb	r2, [r7, #14]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32ae      	adds	r2, #174	; 0xae
 8005dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005de2:	e004      	b.n	8005dee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005de4:	2303      	movs	r3, #3
 8005de6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005de8:	e001      	b.n	8005dee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005dea:	2303      	movs	r3, #3
 8005dec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	88db      	ldrh	r3, [r3, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d110      	bne.n	8005e18 <USBD_StdItfReq+0xc0>
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fd4a 	bl	8006896 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e02:	e009      	b.n	8005e18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fcf7 	bl	80067fa <USBD_CtlError>
          break;
 8005e0c:	e004      	b.n	8005e18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fcf2 	bl	80067fa <USBD_CtlError>
          break;
 8005e16:	e000      	b.n	8005e1a <USBD_StdItfReq+0xc2>
          break;
 8005e18:	bf00      	nop
      }
      break;
 8005e1a:	e004      	b.n	8005e26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fceb 	bl	80067fa <USBD_CtlError>
      break;
 8005e24:	bf00      	nop
  }

  return ret;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	889b      	ldrh	r3, [r3, #4]
 8005e42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d007      	beq.n	8005e60 <USBD_StdEPReq+0x30>
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	f200 817f 	bhi.w	8006154 <USBD_StdEPReq+0x324>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d02a      	beq.n	8005eb0 <USBD_StdEPReq+0x80>
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	f040 817a 	bne.w	8006154 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff fedb 	bl	8005c20 <USBD_CoreFindEP>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e6e:	7b7b      	ldrb	r3, [r7, #13]
 8005e70:	2bff      	cmp	r3, #255	; 0xff
 8005e72:	f000 8174 	beq.w	800615e <USBD_StdEPReq+0x32e>
 8005e76:	7b7b      	ldrb	r3, [r7, #13]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 8170 	bne.w	800615e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e7e:	7b7a      	ldrb	r2, [r7, #13]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e86:	7b7a      	ldrb	r2, [r7, #13]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	32ae      	adds	r2, #174	; 0xae
 8005e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8163 	beq.w	800615e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e98:	7b7a      	ldrb	r2, [r7, #13]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	32ae      	adds	r2, #174	; 0xae
 8005e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eae:	e156      	b.n	800615e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d008      	beq.n	8005eca <USBD_StdEPReq+0x9a>
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	f300 8145 	bgt.w	8006148 <USBD_StdEPReq+0x318>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 809b 	beq.w	8005ffa <USBD_StdEPReq+0x1ca>
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d03c      	beq.n	8005f42 <USBD_StdEPReq+0x112>
 8005ec8:	e13e      	b.n	8006148 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d002      	beq.n	8005edc <USBD_StdEPReq+0xac>
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d016      	beq.n	8005f08 <USBD_StdEPReq+0xd8>
 8005eda:	e02c      	b.n	8005f36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <USBD_StdEPReq+0xce>
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	2b80      	cmp	r3, #128	; 0x80
 8005ee6:	d00a      	beq.n	8005efe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f012 f967 	bl	80181c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ef2:	2180      	movs	r1, #128	; 0x80
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f012 f963 	bl	80181c0 <USBD_LL_StallEP>
 8005efa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005efc:	e020      	b.n	8005f40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fc7a 	bl	80067fa <USBD_CtlError>
              break;
 8005f06:	e01b      	b.n	8005f40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	885b      	ldrh	r3, [r3, #2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10e      	bne.n	8005f2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <USBD_StdEPReq+0xfe>
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d008      	beq.n	8005f2e <USBD_StdEPReq+0xfe>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	88db      	ldrh	r3, [r3, #6]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f012 f949 	bl	80181c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fcb1 	bl	8006896 <USBD_CtlSendStatus>

              break;
 8005f34:	e004      	b.n	8005f40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fc5e 	bl	80067fa <USBD_CtlError>
              break;
 8005f3e:	bf00      	nop
          }
          break;
 8005f40:	e107      	b.n	8006152 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d002      	beq.n	8005f54 <USBD_StdEPReq+0x124>
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d016      	beq.n	8005f80 <USBD_StdEPReq+0x150>
 8005f52:	e04b      	b.n	8005fec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <USBD_StdEPReq+0x146>
 8005f5a:	7bbb      	ldrb	r3, [r7, #14]
 8005f5c:	2b80      	cmp	r3, #128	; 0x80
 8005f5e:	d00a      	beq.n	8005f76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f012 f92b 	bl	80181c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f6a:	2180      	movs	r1, #128	; 0x80
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f012 f927 	bl	80181c0 <USBD_LL_StallEP>
 8005f72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f74:	e040      	b.n	8005ff8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fc3e 	bl	80067fa <USBD_CtlError>
              break;
 8005f7e:	e03b      	b.n	8005ff8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	885b      	ldrh	r3, [r3, #2]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d136      	bne.n	8005ff6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f012 f931 	bl	80181fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fc7a 	bl	8006896 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff fe3a 	bl	8005c20 <USBD_CoreFindEP>
 8005fac:	4603      	mov	r3, r0
 8005fae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fb0:	7b7b      	ldrb	r3, [r7, #13]
 8005fb2:	2bff      	cmp	r3, #255	; 0xff
 8005fb4:	d01f      	beq.n	8005ff6 <USBD_StdEPReq+0x1c6>
 8005fb6:	7b7b      	ldrb	r3, [r7, #13]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11c      	bne.n	8005ff6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005fbc:	7b7a      	ldrb	r2, [r7, #13]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005fc4:	7b7a      	ldrb	r2, [r7, #13]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32ae      	adds	r2, #174	; 0xae
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d010      	beq.n	8005ff6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fd4:	7b7a      	ldrb	r2, [r7, #13]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	32ae      	adds	r2, #174	; 0xae
 8005fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005fea:	e004      	b.n	8005ff6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fc03 	bl	80067fa <USBD_CtlError>
              break;
 8005ff4:	e000      	b.n	8005ff8 <USBD_StdEPReq+0x1c8>
              break;
 8005ff6:	bf00      	nop
          }
          break;
 8005ff8:	e0ab      	b.n	8006152 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d002      	beq.n	800600c <USBD_StdEPReq+0x1dc>
 8006006:	2b03      	cmp	r3, #3
 8006008:	d032      	beq.n	8006070 <USBD_StdEPReq+0x240>
 800600a:	e097      	b.n	800613c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800600c:	7bbb      	ldrb	r3, [r7, #14]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <USBD_StdEPReq+0x1f2>
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	2b80      	cmp	r3, #128	; 0x80
 8006016:	d004      	beq.n	8006022 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fbed 	bl	80067fa <USBD_CtlError>
                break;
 8006020:	e091      	b.n	8006146 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da0b      	bge.n	8006042 <USBD_StdEPReq+0x212>
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	3310      	adds	r3, #16
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	3304      	adds	r3, #4
 8006040:	e00b      	b.n	800605a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006042:	7bbb      	ldrb	r3, [r7, #14]
 8006044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	3304      	adds	r3, #4
 800605a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2202      	movs	r2, #2
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fbd7 	bl	800681c <USBD_CtlSendData>
              break;
 800606e:	e06a      	b.n	8006146 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006074:	2b00      	cmp	r3, #0
 8006076:	da11      	bge.n	800609c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3324      	adds	r3, #36	; 0x24
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d117      	bne.n	80060c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fbb0 	bl	80067fa <USBD_CtlError>
                  break;
 800609a:	e054      	b.n	8006146 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fb9d 	bl	80067fa <USBD_CtlError>
                  break;
 80060c0:	e041      	b.n	8006146 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da0b      	bge.n	80060e2 <USBD_StdEPReq+0x2b2>
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	3310      	adds	r3, #16
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	4413      	add	r3, r2
 80060de:	3304      	adds	r3, #4
 80060e0:	e00b      	b.n	80060fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4413      	add	r3, r2
 80060f8:	3304      	adds	r3, #4
 80060fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <USBD_StdEPReq+0x2d8>
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	2b80      	cmp	r3, #128	; 0x80
 8006106:	d103      	bne.n	8006110 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e00e      	b.n	800612e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f012 f891 	bl	801823c <USBD_LL_IsStallEP>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	e002      	b.n	800612e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2202      	movs	r2, #2
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fb71 	bl	800681c <USBD_CtlSendData>
              break;
 800613a:	e004      	b.n	8006146 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fb5b 	bl	80067fa <USBD_CtlError>
              break;
 8006144:	bf00      	nop
          }
          break;
 8006146:	e004      	b.n	8006152 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fb55 	bl	80067fa <USBD_CtlError>
          break;
 8006150:	bf00      	nop
      }
      break;
 8006152:	e005      	b.n	8006160 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fb4f 	bl	80067fa <USBD_CtlError>
      break;
 800615c:	e000      	b.n	8006160 <USBD_StdEPReq+0x330>
      break;
 800615e:	bf00      	nop
  }

  return ret;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	885b      	ldrh	r3, [r3, #2]
 8006186:	0a1b      	lsrs	r3, r3, #8
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	2b06      	cmp	r3, #6
 800618e:	f200 8128 	bhi.w	80063e2 <USBD_GetDescriptor+0x276>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <USBD_GetDescriptor+0x2c>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061b5 	.word	0x080061b5
 800619c:	080061cd 	.word	0x080061cd
 80061a0:	0800620d 	.word	0x0800620d
 80061a4:	080063e3 	.word	0x080063e3
 80061a8:	080063e3 	.word	0x080063e3
 80061ac:	08006383 	.word	0x08006383
 80061b0:	080063af 	.word	0x080063af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	7c12      	ldrb	r2, [r2, #16]
 80061c0:	f107 0108 	add.w	r1, r7, #8
 80061c4:	4610      	mov	r0, r2
 80061c6:	4798      	blx	r3
 80061c8:	60f8      	str	r0, [r7, #12]
      break;
 80061ca:	e112      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	7c1b      	ldrb	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10d      	bne.n	80061f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	f107 0208 	add.w	r2, r7, #8
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	2202      	movs	r2, #2
 80061ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061ee:	e100      	b.n	80063f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f107 0208 	add.w	r2, r7, #8
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	2202      	movs	r2, #2
 8006208:	701a      	strb	r2, [r3, #0]
      break;
 800620a:	e0f2      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	885b      	ldrh	r3, [r3, #2]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b05      	cmp	r3, #5
 8006214:	f200 80ac 	bhi.w	8006370 <USBD_GetDescriptor+0x204>
 8006218:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <USBD_GetDescriptor+0xb4>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006239 	.word	0x08006239
 8006224:	0800626d 	.word	0x0800626d
 8006228:	080062a1 	.word	0x080062a1
 800622c:	080062d5 	.word	0x080062d5
 8006230:	08006309 	.word	0x08006309
 8006234:	0800633d 	.word	0x0800633d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	7c12      	ldrb	r2, [r2, #16]
 8006250:	f107 0108 	add.w	r1, r7, #8
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
 8006258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800625a:	e091      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 facb 	bl	80067fa <USBD_CtlError>
            err++;
 8006264:	7afb      	ldrb	r3, [r7, #11]
 8006266:	3301      	adds	r3, #1
 8006268:	72fb      	strb	r3, [r7, #11]
          break;
 800626a:	e089      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	7c12      	ldrb	r2, [r2, #16]
 8006284:	f107 0108 	add.w	r1, r7, #8
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
 800628c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800628e:	e077      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fab1 	bl	80067fa <USBD_CtlError>
            err++;
 8006298:	7afb      	ldrb	r3, [r7, #11]
 800629a:	3301      	adds	r3, #1
 800629c:	72fb      	strb	r3, [r7, #11]
          break;
 800629e:	e06f      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	7c12      	ldrb	r2, [r2, #16]
 80062b8:	f107 0108 	add.w	r1, r7, #8
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
 80062c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062c2:	e05d      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa97 	bl	80067fa <USBD_CtlError>
            err++;
 80062cc:	7afb      	ldrb	r3, [r7, #11]
 80062ce:	3301      	adds	r3, #1
 80062d0:	72fb      	strb	r3, [r7, #11]
          break;
 80062d2:	e055      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	7c12      	ldrb	r2, [r2, #16]
 80062ec:	f107 0108 	add.w	r1, r7, #8
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062f6:	e043      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa7d 	bl	80067fa <USBD_CtlError>
            err++;
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	3301      	adds	r3, #1
 8006304:	72fb      	strb	r3, [r7, #11]
          break;
 8006306:	e03b      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	7c12      	ldrb	r2, [r2, #16]
 8006320:	f107 0108 	add.w	r1, r7, #8
 8006324:	4610      	mov	r0, r2
 8006326:	4798      	blx	r3
 8006328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800632a:	e029      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa63 	bl	80067fa <USBD_CtlError>
            err++;
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	3301      	adds	r3, #1
 8006338:	72fb      	strb	r3, [r7, #11]
          break;
 800633a:	e021      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	7c12      	ldrb	r2, [r2, #16]
 8006354:	f107 0108 	add.w	r1, r7, #8
 8006358:	4610      	mov	r0, r2
 800635a:	4798      	blx	r3
 800635c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800635e:	e00f      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa49 	bl	80067fa <USBD_CtlError>
            err++;
 8006368:	7afb      	ldrb	r3, [r7, #11]
 800636a:	3301      	adds	r3, #1
 800636c:	72fb      	strb	r3, [r7, #11]
          break;
 800636e:	e007      	b.n	8006380 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa41 	bl	80067fa <USBD_CtlError>
          err++;
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	3301      	adds	r3, #1
 800637c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800637e:	bf00      	nop
      }
      break;
 8006380:	e037      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7c1b      	ldrb	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006392:	f107 0208 	add.w	r2, r7, #8
 8006396:	4610      	mov	r0, r2
 8006398:	4798      	blx	r3
 800639a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800639c:	e029      	b.n	80063f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa2a 	bl	80067fa <USBD_CtlError>
        err++;
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	3301      	adds	r3, #1
 80063aa:	72fb      	strb	r3, [r7, #11]
      break;
 80063ac:	e021      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7c1b      	ldrb	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	f107 0208 	add.w	r2, r7, #8
 80063c2:	4610      	mov	r0, r2
 80063c4:	4798      	blx	r3
 80063c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3301      	adds	r3, #1
 80063cc:	2207      	movs	r2, #7
 80063ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063d0:	e00f      	b.n	80063f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fa10 	bl	80067fa <USBD_CtlError>
        err++;
 80063da:	7afb      	ldrb	r3, [r7, #11]
 80063dc:	3301      	adds	r3, #1
 80063de:	72fb      	strb	r3, [r7, #11]
      break;
 80063e0:	e007      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fa08 	bl	80067fa <USBD_CtlError>
      err++;
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	3301      	adds	r3, #1
 80063ee:	72fb      	strb	r3, [r7, #11]
      break;
 80063f0:	bf00      	nop
  }

  if (err != 0U)
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11e      	bne.n	8006436 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	88db      	ldrh	r3, [r3, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d016      	beq.n	800642e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00e      	beq.n	8006424 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	88da      	ldrh	r2, [r3, #6]
 800640a:	893b      	ldrh	r3, [r7, #8]
 800640c:	4293      	cmp	r3, r2
 800640e:	bf28      	it	cs
 8006410:	4613      	movcs	r3, r2
 8006412:	b29b      	uxth	r3, r3
 8006414:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006416:	893b      	ldrh	r3, [r7, #8]
 8006418:	461a      	mov	r2, r3
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f9fd 	bl	800681c <USBD_CtlSendData>
 8006422:	e009      	b.n	8006438 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9e7 	bl	80067fa <USBD_CtlError>
 800642c:	e004      	b.n	8006438 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa31 	bl	8006896 <USBD_CtlSendStatus>
 8006434:	e000      	b.n	8006438 <USBD_GetDescriptor+0x2cc>
    return;
 8006436:	bf00      	nop
  }
}
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop

08006440 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	889b      	ldrh	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d131      	bne.n	80064b6 <USBD_SetAddress+0x76>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d12d      	bne.n	80064b6 <USBD_SetAddress+0x76>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	885b      	ldrh	r3, [r3, #2]
 800645e:	2b7f      	cmp	r3, #127	; 0x7f
 8006460:	d829      	bhi.n	80064b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	885b      	ldrh	r3, [r3, #2]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b03      	cmp	r3, #3
 8006478:	d104      	bne.n	8006484 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9bc 	bl	80067fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006482:	e01d      	b.n	80064c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	7bfa      	ldrb	r2, [r7, #15]
 8006488:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f011 fefe 	bl	8018292 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f9fd 	bl	8006896 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2202      	movs	r2, #2
 80064a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064aa:	e009      	b.n	80064c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b4:	e004      	b.n	80064c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f99e 	bl	80067fa <USBD_CtlError>
  }
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	885b      	ldrh	r3, [r3, #2]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	4b4e      	ldr	r3, [pc, #312]	; (8006618 <USBD_SetConfig+0x150>)
 80064de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064e0:	4b4d      	ldr	r3, [pc, #308]	; (8006618 <USBD_SetConfig+0x150>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d905      	bls.n	80064f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f985 	bl	80067fa <USBD_CtlError>
    return USBD_FAIL;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e08c      	b.n	800660e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d002      	beq.n	8006506 <USBD_SetConfig+0x3e>
 8006500:	2b03      	cmp	r3, #3
 8006502:	d029      	beq.n	8006558 <USBD_SetConfig+0x90>
 8006504:	e075      	b.n	80065f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006506:	4b44      	ldr	r3, [pc, #272]	; (8006618 <USBD_SetConfig+0x150>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d020      	beq.n	8006550 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800650e:	4b42      	ldr	r3, [pc, #264]	; (8006618 <USBD_SetConfig+0x150>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006518:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <USBD_SetConfig+0x150>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff f844 	bl	80055ac <USBD_SetClassConfig>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d008      	beq.n	8006540 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f962 	bl	80067fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800653e:	e065      	b.n	800660c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f9a8 	bl	8006896 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2203      	movs	r2, #3
 800654a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800654e:	e05d      	b.n	800660c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9a0 	bl	8006896 <USBD_CtlSendStatus>
      break;
 8006556:	e059      	b.n	800660c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006558:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <USBD_SetConfig+0x150>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d112      	bne.n	8006586 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006568:	4b2b      	ldr	r3, [pc, #172]	; (8006618 <USBD_SetConfig+0x150>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006572:	4b29      	ldr	r3, [pc, #164]	; (8006618 <USBD_SetConfig+0x150>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff f833 	bl	80055e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f989 	bl	8006896 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006584:	e042      	b.n	800660c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <USBD_SetConfig+0x150>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d02a      	beq.n	80065ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff f821 	bl	80055e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80065a2:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <USBD_SetConfig+0x150>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065ac:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <USBD_SetConfig+0x150>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fe fffa 	bl	80055ac <USBD_SetClassConfig>
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00f      	beq.n	80065e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f918 	bl	80067fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff f806 	bl	80055e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065e0:	e014      	b.n	800660c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f957 	bl	8006896 <USBD_CtlSendStatus>
      break;
 80065e8:	e010      	b.n	800660c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f953 	bl	8006896 <USBD_CtlSendStatus>
      break;
 80065f0:	e00c      	b.n	800660c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f900 	bl	80067fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065fa:	4b07      	ldr	r3, [pc, #28]	; (8006618 <USBD_SetConfig+0x150>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fe ffef 	bl	80055e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	73fb      	strb	r3, [r7, #15]
      break;
 800660a:	bf00      	nop
  }

  return ret;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20004fa8 	.word	0x20004fa8

0800661c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	88db      	ldrh	r3, [r3, #6]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d004      	beq.n	8006638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f8e2 	bl	80067fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006636:	e023      	b.n	8006680 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	dc02      	bgt.n	800664a <USBD_GetConfig+0x2e>
 8006644:	2b00      	cmp	r3, #0
 8006646:	dc03      	bgt.n	8006650 <USBD_GetConfig+0x34>
 8006648:	e015      	b.n	8006676 <USBD_GetConfig+0x5a>
 800664a:	2b03      	cmp	r3, #3
 800664c:	d00b      	beq.n	8006666 <USBD_GetConfig+0x4a>
 800664e:	e012      	b.n	8006676 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3308      	adds	r3, #8
 800665a:	2201      	movs	r2, #1
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f8dc 	bl	800681c <USBD_CtlSendData>
        break;
 8006664:	e00c      	b.n	8006680 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	2201      	movs	r2, #1
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f8d4 	bl	800681c <USBD_CtlSendData>
        break;
 8006674:	e004      	b.n	8006680 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f8be 	bl	80067fa <USBD_CtlError>
        break;
 800667e:	bf00      	nop
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006698:	b2db      	uxtb	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	2b02      	cmp	r3, #2
 800669e:	d81e      	bhi.n	80066de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	88db      	ldrh	r3, [r3, #6]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d004      	beq.n	80066b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f8a5 	bl	80067fa <USBD_CtlError>
        break;
 80066b0:	e01a      	b.n	80066e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f043 0202 	orr.w	r2, r3, #2
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	330c      	adds	r3, #12
 80066d2:	2202      	movs	r2, #2
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f8a0 	bl	800681c <USBD_CtlSendData>
      break;
 80066dc:	e004      	b.n	80066e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f88a 	bl	80067fa <USBD_CtlError>
      break;
 80066e6:	bf00      	nop
  }
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	885b      	ldrh	r3, [r3, #2]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d107      	bne.n	8006712 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f8c3 	bl	8006896 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006710:	e013      	b.n	800673a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	885b      	ldrh	r3, [r3, #2]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d10b      	bne.n	8006732 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	889b      	ldrh	r3, [r3, #4]
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	b29b      	uxth	r3, r3
 8006722:	b2da      	uxtb	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8b3 	bl	8006896 <USBD_CtlSendStatus>
}
 8006730:	e003      	b.n	800673a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f860 	bl	80067fa <USBD_CtlError>
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006752:	b2db      	uxtb	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	2b02      	cmp	r3, #2
 8006758:	d80b      	bhi.n	8006772 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	885b      	ldrh	r3, [r3, #2]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10c      	bne.n	800677c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f893 	bl	8006896 <USBD_CtlSendStatus>
      }
      break;
 8006770:	e004      	b.n	800677c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f840 	bl	80067fa <USBD_CtlError>
      break;
 800677a:	e000      	b.n	800677e <USBD_ClrFeature+0x3c>
      break;
 800677c:	bf00      	nop
  }
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	781a      	ldrb	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fa41 	bl	8005c38 <SWAPBYTE>
 80067b6:	4603      	mov	r3, r0
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fa34 	bl	8005c38 <SWAPBYTE>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff fa27 	bl	8005c38 <SWAPBYTE>
 80067ea:	4603      	mov	r3, r0
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	80da      	strh	r2, [r3, #6]
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006804:	2180      	movs	r1, #128	; 0x80
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f011 fcda 	bl	80181c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800680c:	2100      	movs	r1, #0
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f011 fcd6 	bl	80181c0 <USBD_LL_StallEP>
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2202      	movs	r2, #2
 800682c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	2100      	movs	r1, #0
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f011 fd44 	bl	80182d0 <USBD_LL_Transmit>

  return USBD_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	2100      	movs	r1, #0
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f011 fd33 	bl	80182d0 <USBD_LL_Transmit>

  return USBD_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	2100      	movs	r1, #0
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f011 fd43 	bl	8018312 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2204      	movs	r2, #4
 80068a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068a6:	2300      	movs	r3, #0
 80068a8:	2200      	movs	r2, #0
 80068aa:	2100      	movs	r1, #0
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f011 fd0f 	bl	80182d0 <USBD_LL_Transmit>

  return USBD_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2205      	movs	r2, #5
 80068c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068cc:	2300      	movs	r3, #0
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f011 fd1d 	bl	8018312 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	4603      	mov	r3, r0
 80068ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80068f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068f4:	2b84      	cmp	r3, #132	; 0x84
 80068f6:	d005      	beq.n	8006904 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80068f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	3303      	adds	r3, #3
 8006902:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006904:	68fb      	ldr	r3, [r7, #12]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006916:	f3ef 8305 	mrs	r3, IPSR
 800691a:	607b      	str	r3, [r7, #4]
  return(result);
 800691c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf14      	ite	ne
 8006922:	2301      	movne	r3, #1
 8006924:	2300      	moveq	r3, #0
 8006926:	b2db      	uxtb	r3, r3
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006936:	f001 fc1f 	bl	8008178 <vTaskStartScheduler>
  
  return osOK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	bd80      	pop	{r7, pc}

08006940 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006944:	f7ff ffe4 	bl	8006910 <inHandlerMode>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800694e:	f001 fd33 	bl	80083b8 <xTaskGetTickCountFromISR>
 8006952:	4603      	mov	r3, r0
 8006954:	e002      	b.n	800695c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006956:	f001 fd21 	bl	800839c <xTaskGetTickCount>
 800695a:	4603      	mov	r3, r0
  }
}
 800695c:	4618      	mov	r0, r3
 800695e:	bd80      	pop	{r7, pc}

08006960 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006962:	b089      	sub	sp, #36	; 0x24
 8006964:	af04      	add	r7, sp, #16
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d020      	beq.n	80069b4 <osThreadCreate+0x54>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d01c      	beq.n	80069b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685c      	ldr	r4, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691e      	ldr	r6, [r3, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff ffa8 	bl	80068e2 <makeFreeRtosPriority>
 8006992:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800699c:	9202      	str	r2, [sp, #8]
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	9100      	str	r1, [sp, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	4632      	mov	r2, r6
 80069a6:	4629      	mov	r1, r5
 80069a8:	4620      	mov	r0, r4
 80069aa:	f001 fa0a 	bl	8007dc2 <xTaskCreateStatic>
 80069ae:	4603      	mov	r3, r0
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	e01c      	b.n	80069ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685c      	ldr	r4, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069c0:	b29e      	uxth	r6, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff ff8a 	bl	80068e2 <makeFreeRtosPriority>
 80069ce:	4602      	mov	r2, r0
 80069d0:	f107 030c 	add.w	r3, r7, #12
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	9200      	str	r2, [sp, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	4632      	mov	r2, r6
 80069dc:	4629      	mov	r1, r5
 80069de:	4620      	mov	r0, r4
 80069e0:	f001 fa49 	bl	8007e76 <xTaskCreate>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d001      	beq.n	80069ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e000      	b.n	80069f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80069ee:	68fb      	ldr	r3, [r7, #12]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <osDelay+0x16>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	e000      	b.n	8006a10 <osDelay+0x18>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fb7d 	bl	8008110 <vTaskDelay>
  
  return osOK;
 8006a16:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4619      	mov	r1, r3
 8006a36:	2001      	movs	r0, #1
 8006a38:	f000 fc03 	bl	8007242 <xQueueCreateMutexStatic>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	e003      	b.n	8006a48 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006a40:	2001      	movs	r0, #1
 8006a42:	f000 fbe6 	bl	8007212 <xQueueCreateMutex>
 8006a46:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <osMutexWait+0x18>
    return osErrorParameter;
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	e03a      	b.n	8006ade <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d103      	bne.n	8006a7c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	e009      	b.n	8006a90 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d006      	beq.n	8006a90 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <osMutexWait+0x40>
      ticks = 1;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006a90:	f7ff ff3e 	bl	8006910 <inHandlerMode>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d017      	beq.n	8006aca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006a9a:	f107 0308 	add.w	r3, r7, #8
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 ffe8 	bl	8007a78 <xQueueReceiveFromISR>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d001      	beq.n	8006ab2 <osMutexWait+0x62>
      return osErrorOS;
 8006aae:	23ff      	movs	r3, #255	; 0xff
 8006ab0:	e015      	b.n	8006ade <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d011      	beq.n	8006adc <osMutexWait+0x8c>
 8006ab8:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <osMutexWait+0x98>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	e008      	b.n	8006adc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fecb 	bl	8007868 <xQueueSemaphoreTake>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d001      	beq.n	8006adc <osMutexWait+0x8c>
    return osErrorOS;
 8006ad8:	23ff      	movs	r3, #255	; 0xff
 8006ada:	e000      	b.n	8006ade <osMutexWait+0x8e>
  }
  
  return osOK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006afc:	f7ff ff08 	bl	8006910 <inHandlerMode>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006b06:	f107 0308 	add.w	r3, r7, #8
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fd45 	bl	800759c <xQueueGiveFromISR>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d001      	beq.n	8006b1c <osMutexRelease+0x30>
      return osErrorOS;
 8006b18:	23ff      	movs	r3, #255	; 0xff
 8006b1a:	e017      	b.n	8006b4c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d013      	beq.n	8006b4a <osMutexRelease+0x5e>
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <osMutexRelease+0x68>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	e00a      	b.n	8006b4a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006b34:	2300      	movs	r3, #0
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fb9c 	bl	8007278 <xQueueGenericSend>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d001      	beq.n	8006b4a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006b46:	23ff      	movs	r3, #255	; 0xff
 8006b48:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	e03a      	b.n	8006be6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d103      	bne.n	8006b84 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	e009      	b.n	8006b98 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <osSemaphoreWait+0x40>
      ticks = 1;
 8006b94:	2301      	movs	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006b98:	f7ff feba 	bl	8006910 <inHandlerMode>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d017      	beq.n	8006bd2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006ba2:	f107 0308 	add.w	r3, r7, #8
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2100      	movs	r1, #0
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 ff64 	bl	8007a78 <xQueueReceiveFromISR>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d001      	beq.n	8006bba <osSemaphoreWait+0x62>
      return osErrorOS;
 8006bb6:	23ff      	movs	r3, #255	; 0xff
 8006bb8:	e015      	b.n	8006be6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d011      	beq.n	8006be4 <osSemaphoreWait+0x8c>
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <osSemaphoreWait+0x98>)
 8006bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	e008      	b.n	8006be4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fe47 	bl	8007868 <xQueueSemaphoreTake>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d001      	beq.n	8006be4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006be0:	23ff      	movs	r3, #255	; 0xff
 8006be2:	e000      	b.n	8006be6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	e000ed04 	.word	0xe000ed04

08006bf4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006c04:	f7ff fe84 	bl	8006910 <inHandlerMode>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fcc1 	bl	800759c <xQueueGiveFromISR>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d001      	beq.n	8006c24 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006c20:	23ff      	movs	r3, #255	; 0xff
 8006c22:	e017      	b.n	8006c54 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d013      	beq.n	8006c52 <osSemaphoreRelease+0x5e>
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <osSemaphoreRelease+0x68>)
 8006c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	e00a      	b.n	8006c52 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fb18 	bl	8007278 <xQueueGenericSend>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006c4e:	23ff      	movs	r3, #255	; 0xff
 8006c50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006c52:	68fb      	ldr	r3, [r7, #12]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006c60:	b590      	push	{r4, r7, lr}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d011      	beq.n	8006c96 <osMessageCreate+0x36>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6859      	ldr	r1, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	2400      	movs	r4, #0
 8006c8c:	9400      	str	r4, [sp, #0]
 8006c8e:	f000 f9db 	bl	8007048 <xQueueGenericCreateStatic>
 8006c92:	4603      	mov	r3, r0
 8006c94:	e008      	b.n	8006ca8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f000 fa44 	bl	800712e <xQueueGenericCreate>
 8006ca6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd90      	pop	{r4, r7, pc}

08006cb0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <osMessagePut+0x1e>
    ticks = 1;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006cce:	f7ff fe1f 	bl	8006910 <inHandlerMode>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d018      	beq.n	8006d0a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006cd8:	f107 0210 	add.w	r2, r7, #16
 8006cdc:	f107 0108 	add.w	r1, r7, #8
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 fbc2 	bl	800746c <xQueueGenericSendFromISR>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d001      	beq.n	8006cf2 <osMessagePut+0x42>
      return osErrorOS;
 8006cee:	23ff      	movs	r3, #255	; 0xff
 8006cf0:	e018      	b.n	8006d24 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d014      	beq.n	8006d22 <osMessagePut+0x72>
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <osMessagePut+0x7c>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	e00b      	b.n	8006d22 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006d0a:	f107 0108 	add.w	r1, r7, #8
 8006d0e:	2300      	movs	r3, #0
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fab0 	bl	8007278 <xQueueGenericSend>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d001      	beq.n	8006d22 <osMessagePut+0x72>
      return osErrorOS;
 8006d1e:	23ff      	movs	r3, #255	; 0xff
 8006d20:	e000      	b.n	8006d24 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006d30:	b590      	push	{r4, r7, lr}
 8006d32:	b08b      	sub	sp, #44	; 0x2c
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006d4a:	2380      	movs	r3, #128	; 0x80
 8006d4c:	617b      	str	r3, [r7, #20]
    return event;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	461c      	mov	r4, r3
 8006d52:	f107 0314 	add.w	r3, r7, #20
 8006d56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d5e:	e054      	b.n	8006e0a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d103      	bne.n	8006d78 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
 8006d76:	e009      	b.n	8006d8c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d006      	beq.n	8006d8c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <osMessageGet+0x5c>
      ticks = 1;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006d8c:	f7ff fdc0 	bl	8006910 <inHandlerMode>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01c      	beq.n	8006dd0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006d96:	f107 0220 	add.w	r2, r7, #32
 8006d9a:	f107 0314 	add.w	r3, r7, #20
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	68b8      	ldr	r0, [r7, #8]
 8006da4:	f000 fe68 	bl	8007a78 <xQueueReceiveFromISR>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d102      	bne.n	8006db4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006dae:	2310      	movs	r3, #16
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	e001      	b.n	8006db8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d01d      	beq.n	8006dfa <osMessageGet+0xca>
 8006dbe:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <osMessageGet+0xe4>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	e014      	b.n	8006dfa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006dd0:	f107 0314 	add.w	r3, r7, #20
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd8:	4619      	mov	r1, r3
 8006dda:	68b8      	ldr	r0, [r7, #8]
 8006ddc:	f000 fc68 	bl	80076b0 <xQueueReceive>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d102      	bne.n	8006dec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006de6:	2310      	movs	r3, #16
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e006      	b.n	8006dfa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <osMessageGet+0xc6>
 8006df2:	2300      	movs	r3, #0
 8006df4:	e000      	b.n	8006df8 <osMessageGet+0xc8>
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	461c      	mov	r4, r3
 8006dfe:	f107 0314 	add.w	r3, r7, #20
 8006e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	372c      	adds	r7, #44	; 0x2c
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd90      	pop	{r4, r7, pc}
 8006e12:	bf00      	nop
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f103 0208 	add.w	r2, r3, #8
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f103 0208 	add.w	r2, r3, #8
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f103 0208 	add.w	r2, r3, #8
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	601a      	str	r2, [r3, #0]
}
 8006eaa:	bf00      	nop
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d103      	bne.n	8006ed4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	e00c      	b.n	8006eee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e002      	b.n	8006ee2 <vListInsert+0x2e>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d2f6      	bcs.n	8006edc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	601a      	str	r2, [r3, #0]
}
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bc80      	pop	{r7}
 8006f22:	4770      	bx	lr

08006f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6892      	ldr	r2, [r2, #8]
 8006f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6852      	ldr	r2, [r2, #4]
 8006f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d103      	bne.n	8006f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	1e5a      	subs	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr
	...

08006f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f9e:	bf00      	nop

	taskENTER_CRITICAL();
 8006fa0:	f002 f822 	bl	8008fe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	68f9      	ldr	r1, [r7, #12]
 8006fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fb0:	fb01 f303 	mul.w	r3, r1, r3
 8006fb4:	441a      	add	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fd6:	fb01 f303 	mul.w	r3, r1, r3
 8006fda:	441a      	add	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	22ff      	movs	r2, #255	; 0xff
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	22ff      	movs	r2, #255	; 0xff
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d114      	bne.n	8007020 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d01a      	beq.n	8007034 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3310      	adds	r3, #16
 8007002:	4618      	mov	r0, r3
 8007004:	f001 fb26 	bl	8008654 <xTaskRemoveFromEventList>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d012      	beq.n	8007034 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <xQueueGenericReset+0xcc>)
 8007010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	e009      	b.n	8007034 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3310      	adds	r3, #16
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fef7 	bl	8006e18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3324      	adds	r3, #36	; 0x24
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fef2 	bl	8006e18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007034:	f002 f806 	bl	8009044 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007038:	2301      	movs	r3, #1
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <xQueueGenericCreateStatic+0x28>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800706e:	bf00      	nop

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <xQueueGenericCreateStatic+0x42>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007088:	bf00      	nop

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <xQueueGenericCreateStatic+0x4e>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <xQueueGenericCreateStatic+0x52>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <xQueueGenericCreateStatic+0x54>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d109      	bne.n	80070b4 <xQueueGenericCreateStatic+0x6c>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	623b      	str	r3, [r7, #32]
}
 80070b2:	bf00      	nop
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d102      	bne.n	80070c0 <xQueueGenericCreateStatic+0x78>
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <xQueueGenericCreateStatic+0x7c>
 80070c0:	2301      	movs	r3, #1
 80070c2:	e000      	b.n	80070c6 <xQueueGenericCreateStatic+0x7e>
 80070c4:	2300      	movs	r3, #0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d109      	bne.n	80070de <xQueueGenericCreateStatic+0x96>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	61fb      	str	r3, [r7, #28]
}
 80070dc:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070de:	2348      	movs	r3, #72	; 0x48
 80070e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b48      	cmp	r3, #72	; 0x48
 80070e6:	d009      	beq.n	80070fc <xQueueGenericCreateStatic+0xb4>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	61bb      	str	r3, [r7, #24]
}
 80070fa:	bf00      	nop
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00d      	beq.n	8007124 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007110:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 f83e 	bl	80071a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007126:	4618      	mov	r0, r3
 8007128:	3730      	adds	r7, #48	; 0x30
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800712e:	b580      	push	{r7, lr}
 8007130:	b08a      	sub	sp, #40	; 0x28
 8007132:	af02      	add	r7, sp, #8
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	4613      	mov	r3, r2
 800713a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <xQueueGenericCreate+0x28>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	613b      	str	r3, [r7, #16]
}
 8007154:	bf00      	nop

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	3348      	adds	r3, #72	; 0x48
 8007164:	4618      	mov	r0, r3
 8007166:	f002 f83f 	bl	80091e8 <pvPortMalloc>
 800716a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d011      	beq.n	8007196 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	3348      	adds	r3, #72	; 0x48
 800717a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007184:	79fa      	ldrb	r2, [r7, #7]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4613      	mov	r3, r2
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f805 	bl	80071a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007196:	69bb      	ldr	r3, [r7, #24]
	}
 8007198:	4618      	mov	r0, r3
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071ce:	2101      	movs	r1, #1
 80071d0:	69b8      	ldr	r0, [r7, #24]
 80071d2:	f7ff fed1 	bl	8006f78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00e      	beq.n	800720a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071fe:	2300      	movs	r3, #0
 8007200:	2200      	movs	r2, #0
 8007202:	2100      	movs	r1, #0
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f837 	bl	8007278 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af00      	add	r7, sp, #0
 8007218:	4603      	mov	r3, r0
 800721a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800721c:	2301      	movs	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	461a      	mov	r2, r3
 8007228:	6939      	ldr	r1, [r7, #16]
 800722a:	6978      	ldr	r0, [r7, #20]
 800722c:	f7ff ff7f 	bl	800712e <xQueueGenericCreate>
 8007230:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7ff ffd3 	bl	80071de <prvInitialiseMutex>

		return xNewQueue;
 8007238:	68fb      	ldr	r3, [r7, #12]
	}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007242:	b580      	push	{r7, lr}
 8007244:	b088      	sub	sp, #32
 8007246:	af02      	add	r7, sp, #8
 8007248:	4603      	mov	r3, r0
 800724a:	6039      	str	r1, [r7, #0]
 800724c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800724e:	2301      	movs	r3, #1
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2200      	movs	r2, #0
 800725e:	6939      	ldr	r1, [r7, #16]
 8007260:	6978      	ldr	r0, [r7, #20]
 8007262:	f7ff fef1 	bl	8007048 <xQueueGenericCreateStatic>
 8007266:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f7ff ffb8 	bl	80071de <prvInitialiseMutex>

		return xNewQueue;
 800726e:	68fb      	ldr	r3, [r7, #12]
	}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08e      	sub	sp, #56	; 0x38
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <xQueueGenericSend+0x30>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072a6:	bf00      	nop
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <xQueueGenericSend+0x3e>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <xQueueGenericSend+0x42>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <xQueueGenericSend+0x44>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d109      	bne.n	80072d4 <xQueueGenericSend+0x5c>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072d2:	bf00      	nop
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d103      	bne.n	80072e2 <xQueueGenericSend+0x6a>
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <xQueueGenericSend+0x6e>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <xQueueGenericSend+0x70>
 80072e6:	2300      	movs	r3, #0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <xQueueGenericSend+0x88>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	623b      	str	r3, [r7, #32]
}
 80072fe:	bf00      	nop
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007300:	f001 fb66 	bl	80089d0 <xTaskGetSchedulerState>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <xQueueGenericSend+0x98>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <xQueueGenericSend+0x9c>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <xQueueGenericSend+0x9e>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <xQueueGenericSend+0xb6>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	61fb      	str	r3, [r7, #28]
}
 800732c:	bf00      	nop
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800732e:	f001 fe5b 	bl	8008fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <xQueueGenericSend+0xcc>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d129      	bne.n	8007398 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800734a:	f000 fc2a 	bl	8007ba2 <prvCopyDataToQueue>
 800734e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d010      	beq.n	800737a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	3324      	adds	r3, #36	; 0x24
 800735c:	4618      	mov	r0, r3
 800735e:	f001 f979 	bl	8008654 <xTaskRemoveFromEventList>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d013      	beq.n	8007390 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007368:	4b3f      	ldr	r3, [pc, #252]	; (8007468 <xQueueGenericSend+0x1f0>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	e00a      	b.n	8007390 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007380:	4b39      	ldr	r3, [pc, #228]	; (8007468 <xQueueGenericSend+0x1f0>)
 8007382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007390:	f001 fe58 	bl	8009044 <vPortExitCritical>
				return pdPASS;
 8007394:	2301      	movs	r3, #1
 8007396:	e063      	b.n	8007460 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800739e:	f001 fe51 	bl	8009044 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	e05c      	b.n	8007460 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073ac:	f107 0314 	add.w	r3, r7, #20
 80073b0:	4618      	mov	r0, r3
 80073b2:	f001 f9b1 	bl	8008718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073ba:	f001 fe43 	bl	8009044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073be:	f000 ff43 	bl	8008248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073c2:	f001 fe11 	bl	8008fe8 <vPortEnterCritical>
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073cc:	b25b      	sxtb	r3, r3
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d103      	bne.n	80073dc <xQueueGenericSend+0x164>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073e2:	b25b      	sxtb	r3, r3
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d103      	bne.n	80073f2 <xQueueGenericSend+0x17a>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073f2:	f001 fe27 	bl	8009044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073f6:	1d3a      	adds	r2, r7, #4
 80073f8:	f107 0314 	add.w	r3, r7, #20
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 f9a0 	bl	8008744 <xTaskCheckForTimeOut>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d124      	bne.n	8007454 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800740a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800740c:	f000 fcc1 	bl	8007d92 <prvIsQueueFull>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d018      	beq.n	8007448 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	3310      	adds	r3, #16
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	4611      	mov	r1, r2
 800741e:	4618      	mov	r0, r3
 8007420:	f001 f8f4 	bl	800860c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007426:	f000 fc4c 	bl	8007cc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800742a:	f000 ff1b 	bl	8008264 <xTaskResumeAll>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	f47f af7c 	bne.w	800732e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <xQueueGenericSend+0x1f0>)
 8007438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	e772      	b.n	800732e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800744a:	f000 fc3a 	bl	8007cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800744e:	f000 ff09 	bl	8008264 <xTaskResumeAll>
 8007452:	e76c      	b.n	800732e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007456:	f000 fc34 	bl	8007cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800745a:	f000 ff03 	bl	8008264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800745e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007460:	4618      	mov	r0, r3
 8007462:	3738      	adds	r7, #56	; 0x38
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b090      	sub	sp, #64	; 0x40
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <xQueueGenericSendFromISR+0x2c>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007496:	bf00      	nop
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d103      	bne.n	80074a6 <xQueueGenericSendFromISR+0x3a>
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <xQueueGenericSendFromISR+0x3e>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <xQueueGenericSendFromISR+0x40>
 80074aa:	2300      	movs	r3, #0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d109      	bne.n	80074c4 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074c2:	bf00      	nop
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d103      	bne.n	80074d2 <xQueueGenericSendFromISR+0x66>
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <xQueueGenericSendFromISR+0x6a>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <xQueueGenericSendFromISR+0x6c>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <xQueueGenericSendFromISR+0x84>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	623b      	str	r3, [r7, #32]
}
 80074ee:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074f0:	f001 fe3e 	bl	8009170 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074f4:	f3ef 8211 	mrs	r2, BASEPRI
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	61fa      	str	r2, [r7, #28]
 800750a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800750c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007518:	429a      	cmp	r2, r3
 800751a:	d302      	bcc.n	8007522 <xQueueGenericSendFromISR+0xb6>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b02      	cmp	r3, #2
 8007520:	d12f      	bne.n	8007582 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007538:	f000 fb33 	bl	8007ba2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800753c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007544:	d112      	bne.n	800756c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	3324      	adds	r3, #36	; 0x24
 8007552:	4618      	mov	r0, r3
 8007554:	f001 f87e 	bl	8008654 <xTaskRemoveFromEventList>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00e      	beq.n	800757c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e007      	b.n	800757c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800756c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007570:	3301      	adds	r3, #1
 8007572:	b2db      	uxtb	r3, r3
 8007574:	b25a      	sxtb	r2, r3
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800757c:	2301      	movs	r3, #1
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007580:	e001      	b.n	8007586 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007588:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007590:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007594:	4618      	mov	r0, r3
 8007596:	3740      	adds	r7, #64	; 0x40
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08e      	sub	sp, #56	; 0x38
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <xQueueGiveFromISR+0x28>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	623b      	str	r3, [r7, #32]
}
 80075c2:	bf00      	nop

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <xQueueGiveFromISR+0x44>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	61fb      	str	r3, [r7, #28]
}
 80075de:	bf00      	nop

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <xQueueGiveFromISR+0x54>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <xQueueGiveFromISR+0x58>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <xQueueGiveFromISR+0x5a>
 80075f4:	2300      	movs	r3, #0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <xQueueGiveFromISR+0x72>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	61bb      	str	r3, [r7, #24]
}
 800760c:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800760e:	f001 fdaf 	bl	8009170 <vPortValidateInterruptPriority>
	__asm volatile
 8007612:	f3ef 8211 	mrs	r2, BASEPRI
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	617a      	str	r2, [r7, #20]
 8007628:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800762a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800762c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800763a:	429a      	cmp	r2, r3
 800763c:	d22b      	bcs.n	8007696 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007658:	d112      	bne.n	8007680 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b00      	cmp	r3, #0
 8007660:	d016      	beq.n	8007690 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	3324      	adds	r3, #36	; 0x24
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fff4 	bl	8008654 <xTaskRemoveFromEventList>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2201      	movs	r2, #1
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e007      	b.n	8007690 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007684:	3301      	adds	r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	b25a      	sxtb	r2, r3
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007690:	2301      	movs	r3, #1
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
 8007694:	e001      	b.n	800769a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007696:	2300      	movs	r3, #0
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f383 8811 	msr	BASEPRI, r3
}
 80076a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3738      	adds	r7, #56	; 0x38
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08c      	sub	sp, #48	; 0x30
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076bc:	2300      	movs	r3, #0
 80076be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <xQueueReceive+0x2e>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	623b      	str	r3, [r7, #32]
}
 80076dc:	bf00      	nop

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <xQueueReceive+0x3c>
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <xQueueReceive+0x40>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <xQueueReceive+0x42>
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <xQueueReceive+0x5a>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	61fb      	str	r3, [r7, #28]
}
 8007708:	bf00      	nop

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800770a:	f001 f961 	bl	80089d0 <xTaskGetSchedulerState>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <xQueueReceive+0x6a>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <xQueueReceive+0x6e>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <xQueueReceive+0x70>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <xQueueReceive+0x88>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	61bb      	str	r3, [r7, #24]
}
 8007736:	bf00      	nop
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007738:	f001 fc56 	bl	8008fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01f      	beq.n	8007788 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800774c:	f000 fa93 	bl	8007c76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	1e5a      	subs	r2, r3, #1
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00f      	beq.n	8007780 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	3310      	adds	r3, #16
 8007764:	4618      	mov	r0, r3
 8007766:	f000 ff75 	bl	8008654 <xTaskRemoveFromEventList>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007770:	4b3c      	ldr	r3, [pc, #240]	; (8007864 <xQueueReceive+0x1b4>)
 8007772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007780:	f001 fc60 	bl	8009044 <vPortExitCritical>
				return pdPASS;
 8007784:	2301      	movs	r3, #1
 8007786:	e069      	b.n	800785c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800778e:	f001 fc59 	bl	8009044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007792:	2300      	movs	r3, #0
 8007794:	e062      	b.n	800785c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d106      	bne.n	80077aa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800779c:	f107 0310 	add.w	r3, r7, #16
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 ffb9 	bl	8008718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077a6:	2301      	movs	r3, #1
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077aa:	f001 fc4b 	bl	8009044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077ae:	f000 fd4b 	bl	8008248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077b2:	f001 fc19 	bl	8008fe8 <vPortEnterCritical>
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077bc:	b25b      	sxtb	r3, r3
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d103      	bne.n	80077cc <xQueueReceive+0x11c>
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d2:	b25b      	sxtb	r3, r3
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d103      	bne.n	80077e2 <xQueueReceive+0x132>
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077e2:	f001 fc2f 	bl	8009044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077e6:	1d3a      	adds	r2, r7, #4
 80077e8:	f107 0310 	add.w	r3, r7, #16
 80077ec:	4611      	mov	r1, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 ffa8 	bl	8008744 <xTaskCheckForTimeOut>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d123      	bne.n	8007842 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fc:	f000 fab3 	bl	8007d66 <prvIsQueueEmpty>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d017      	beq.n	8007836 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	3324      	adds	r3, #36	; 0x24
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	4611      	mov	r1, r2
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fefc 	bl	800860c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007816:	f000 fa54 	bl	8007cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800781a:	f000 fd23 	bl	8008264 <xTaskResumeAll>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d189      	bne.n	8007738 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007824:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <xQueueReceive+0x1b4>)
 8007826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	e780      	b.n	8007738 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007838:	f000 fa43 	bl	8007cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800783c:	f000 fd12 	bl	8008264 <xTaskResumeAll>
 8007840:	e77a      	b.n	8007738 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007844:	f000 fa3d 	bl	8007cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007848:	f000 fd0c 	bl	8008264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800784c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800784e:	f000 fa8a 	bl	8007d66 <prvIsQueueEmpty>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	f43f af6f 	beq.w	8007738 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800785a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800785c:	4618      	mov	r0, r3
 800785e:	3730      	adds	r7, #48	; 0x30
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	e000ed04 	.word	0xe000ed04

08007868 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08e      	sub	sp, #56	; 0x38
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007872:	2300      	movs	r3, #0
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800787a:	2300      	movs	r3, #0
 800787c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	623b      	str	r3, [r7, #32]
}
 8007896:	bf00      	nop

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d009      	beq.n	80078b4 <xQueueSemaphoreTake+0x4c>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	61fb      	str	r3, [r7, #28]
}
 80078b2:	bf00      	nop

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b4:	f001 f88c 	bl	80089d0 <xTaskGetSchedulerState>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <xQueueSemaphoreTake+0x5c>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <xQueueSemaphoreTake+0x60>
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <xQueueSemaphoreTake+0x62>
 80078c8:	2300      	movs	r3, #0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <xQueueSemaphoreTake+0x7a>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	61bb      	str	r3, [r7, #24]
}
 80078e0:	bf00      	nop
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e2:	f001 fb81 	bl	8008fe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d024      	beq.n	800793c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	1e5a      	subs	r2, r3, #1
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007902:	f001 fa09 	bl	8008d18 <pvTaskIncrementMutexHeldCount>
 8007906:	4602      	mov	r2, r0
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00f      	beq.n	8007934 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	3310      	adds	r3, #16
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fe9b 	bl	8008654 <xTaskRemoveFromEventList>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007924:	4b53      	ldr	r3, [pc, #332]	; (8007a74 <xQueueSemaphoreTake+0x20c>)
 8007926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007934:	f001 fb86 	bl	8009044 <vPortExitCritical>
				return pdPASS;
 8007938:	2301      	movs	r3, #1
 800793a:	e096      	b.n	8007a6a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d110      	bne.n	8007964 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <xQueueSemaphoreTake+0xf4>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	617b      	str	r3, [r7, #20]
}
 800795a:	bf00      	nop
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800795c:	f001 fb72 	bl	8009044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007960:	2300      	movs	r3, #0
 8007962:	e082      	b.n	8007a6a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800796a:	f107 030c 	add.w	r3, r7, #12
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fed2 	bl	8008718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007978:	f001 fb64 	bl	8009044 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800797c:	f000 fc64 	bl	8008248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007980:	f001 fb32 	bl	8008fe8 <vPortEnterCritical>
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800798a:	b25b      	sxtb	r3, r3
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d103      	bne.n	800799a <xQueueSemaphoreTake+0x132>
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079a0:	b25b      	sxtb	r3, r3
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d103      	bne.n	80079b0 <xQueueSemaphoreTake+0x148>
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079b0:	f001 fb48 	bl	8009044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079b4:	463a      	mov	r2, r7
 80079b6:	f107 030c 	add.w	r3, r7, #12
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fec1 	bl	8008744 <xTaskCheckForTimeOut>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d132      	bne.n	8007a2e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079ca:	f000 f9cc 	bl	8007d66 <prvIsQueueEmpty>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d026      	beq.n	8007a22 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d109      	bne.n	80079f0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80079dc:	f001 fb04 	bl	8008fe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 f811 	bl	8008a0c <xTaskPriorityInherit>
 80079ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80079ec:	f001 fb2a 	bl	8009044 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	3324      	adds	r3, #36	; 0x24
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	4611      	mov	r1, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fe07 	bl	800860c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a00:	f000 f95f 	bl	8007cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a04:	f000 fc2e 	bl	8008264 <xTaskResumeAll>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f47f af69 	bne.w	80078e2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007a10:	4b18      	ldr	r3, [pc, #96]	; (8007a74 <xQueueSemaphoreTake+0x20c>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	e75f      	b.n	80078e2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a24:	f000 f94d 	bl	8007cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a28:	f000 fc1c 	bl	8008264 <xTaskResumeAll>
 8007a2c:	e759      	b.n	80078e2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a30:	f000 f947 	bl	8007cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a34:	f000 fc16 	bl	8008264 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a3a:	f000 f994 	bl	8007d66 <prvIsQueueEmpty>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f43f af4e 	beq.w	80078e2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00d      	beq.n	8007a68 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007a4c:	f001 facc 	bl	8008fe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a52:	f000 f88f 	bl	8007b74 <prvGetDisinheritPriorityAfterTimeout>
 8007a56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 f8ce 	bl	8008c00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a64:	f001 faee 	bl	8009044 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3738      	adds	r7, #56	; 0x38
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <xQueueReceiveFromISR+0x2a>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	623b      	str	r3, [r7, #32]
}
 8007aa0:	bf00      	nop
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d103      	bne.n	8007ab0 <xQueueReceiveFromISR+0x38>
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <xQueueReceiveFromISR+0x3c>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <xQueueReceiveFromISR+0x3e>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <xQueueReceiveFromISR+0x56>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	61fb      	str	r3, [r7, #28]
}
 8007acc:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ace:	f001 fb4f 	bl	8009170 <vPortValidateInterruptPriority>
	__asm volatile
 8007ad2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	61ba      	str	r2, [r7, #24]
 8007ae8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007aea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d02f      	beq.n	8007b5a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b08:	f000 f8b5 	bl	8007c76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	1e5a      	subs	r2, r3, #1
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1c:	d112      	bne.n	8007b44 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	3310      	adds	r3, #16
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fd92 	bl	8008654 <xTaskRemoveFromEventList>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00e      	beq.n	8007b54 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e007      	b.n	8007b54 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b48:	3301      	adds	r3, #1
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	b25a      	sxtb	r2, r3
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b54:	2301      	movs	r3, #1
 8007b56:	637b      	str	r3, [r7, #52]	; 0x34
 8007b58:	e001      	b.n	8007b5e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f383 8811 	msr	BASEPRI, r3
}
 8007b68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3738      	adds	r7, #56	; 0x38
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d006      	beq.n	8007b92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1c3 0307 	rsb	r3, r3, #7
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e001      	b.n	8007b96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b96:	68fb      	ldr	r3, [r7, #12]
	}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr

08007ba2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b086      	sub	sp, #24
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10d      	bne.n	8007bdc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d14d      	bne.n	8007c64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 ff93 	bl	8008af8 <xTaskPriorityDisinherit>
 8007bd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	609a      	str	r2, [r3, #8]
 8007bda:	e043      	b.n	8007c64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d119      	bne.n	8007c16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6858      	ldr	r0, [r3, #4]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	461a      	mov	r2, r3
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	f010 fe35 	bl	801885c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	441a      	add	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d32b      	bcc.n	8007c64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	605a      	str	r2, [r3, #4]
 8007c14:	e026      	b.n	8007c64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	68d8      	ldr	r0, [r3, #12]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	461a      	mov	r2, r3
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	f010 fe1b 	bl	801885c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	425b      	negs	r3, r3
 8007c30:	441a      	add	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d207      	bcs.n	8007c52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	425b      	negs	r3, r3
 8007c4c:	441a      	add	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d105      	bne.n	8007c64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c6c:	697b      	ldr	r3, [r7, #20]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d018      	beq.n	8007cba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	441a      	add	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d303      	bcc.n	8007caa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68d9      	ldr	r1, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6838      	ldr	r0, [r7, #0]
 8007cb6:	f010 fdd1 	bl	801885c <memcpy>
	}
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cca:	f001 f98d 	bl	8008fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cd6:	e011      	b.n	8007cfc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d012      	beq.n	8007d06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3324      	adds	r3, #36	; 0x24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fcb5 	bl	8008654 <xTaskRemoveFromEventList>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cf0:	f000 fd88 	bl	8008804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dce9      	bgt.n	8007cd8 <prvUnlockQueue+0x16>
 8007d04:	e000      	b.n	8007d08 <prvUnlockQueue+0x46>
					break;
 8007d06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	22ff      	movs	r2, #255	; 0xff
 8007d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d10:	f001 f998 	bl	8009044 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d14:	f001 f968 	bl	8008fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d20:	e011      	b.n	8007d46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d012      	beq.n	8007d50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3310      	adds	r3, #16
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fc90 	bl	8008654 <xTaskRemoveFromEventList>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d3a:	f000 fd63 	bl	8008804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dce9      	bgt.n	8007d22 <prvUnlockQueue+0x60>
 8007d4e:	e000      	b.n	8007d52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	22ff      	movs	r2, #255	; 0xff
 8007d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d5a:	f001 f973 	bl	8009044 <vPortExitCritical>
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d6e:	f001 f93b 	bl	8008fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	e001      	b.n	8007d84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d84:	f001 f95e 	bl	8009044 <vPortExitCritical>

	return xReturn;
 8007d88:	68fb      	ldr	r3, [r7, #12]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d9a:	f001 f925 	bl	8008fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d102      	bne.n	8007db0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	e001      	b.n	8007db4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007db4:	f001 f946 	bl	8009044 <vPortExitCritical>

	return xReturn;
 8007db8:	68fb      	ldr	r3, [r7, #12]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b08e      	sub	sp, #56	; 0x38
 8007dc6:	af04      	add	r7, sp, #16
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d109      	bne.n	8007dea <xTaskCreateStatic+0x28>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	623b      	str	r3, [r7, #32]
}
 8007de8:	bf00      	nop
		configASSERT( pxTaskBuffer != NULL );
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <xTaskCreateStatic+0x42>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	61fb      	str	r3, [r7, #28]
}
 8007e02:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e04:	23b4      	movs	r3, #180	; 0xb4
 8007e06:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2bb4      	cmp	r3, #180	; 0xb4
 8007e0c:	d009      	beq.n	8007e22 <xTaskCreateStatic+0x60>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61bb      	str	r3, [r7, #24]
}
 8007e20:	bf00      	nop
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01e      	beq.n	8007e68 <xTaskCreateStatic+0xa6>
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01b      	beq.n	8007e68 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e42:	2300      	movs	r3, #0
 8007e44:	9303      	str	r3, [sp, #12]
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	9302      	str	r3, [sp, #8]
 8007e4a:	f107 0314 	add.w	r3, r7, #20
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f850 	bl	8007f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e62:	f000 f8eb 	bl	800803c <prvAddNewTaskToReadyList>
 8007e66:	e001      	b.n	8007e6c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e6c:	697b      	ldr	r3, [r7, #20]
	}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3728      	adds	r7, #40	; 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b08c      	sub	sp, #48	; 0x30
 8007e7a:	af04      	add	r7, sp, #16
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	603b      	str	r3, [r7, #0]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 f9ac 	bl	80091e8 <pvPortMalloc>
 8007e90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00e      	beq.n	8007eb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e98:	20b4      	movs	r0, #180	; 0xb4
 8007e9a:	f001 f9a5 	bl	80091e8 <pvPortMalloc>
 8007e9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8007eac:	e005      	b.n	8007eba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eae:	6978      	ldr	r0, [r7, #20]
 8007eb0:	f001 fa62 	bl	8009378 <vPortFree>
 8007eb4:	e001      	b.n	8007eba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d017      	beq.n	8007ef0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ec8:	88fa      	ldrh	r2, [r7, #6]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	9303      	str	r3, [sp, #12]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f80e 	bl	8007f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ee4:	69f8      	ldr	r0, [r7, #28]
 8007ee6:	f000 f8a9 	bl	800803c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	e002      	b.n	8007ef6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	f023 0307 	bic.w	r3, r3, #7
 8007f26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	f003 0307 	and.w	r3, r3, #7
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <prvInitialiseNewTask+0x46>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	617b      	str	r3, [r7, #20]
}
 8007f44:	bf00      	nop
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01f      	beq.n	8007f8c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e012      	b.n	8007f78 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	7819      	ldrb	r1, [r3, #0]
 8007f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	3334      	adds	r3, #52	; 0x34
 8007f62:	460a      	mov	r2, r1
 8007f64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d006      	beq.n	8007f80 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	3301      	adds	r3, #1
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b0f      	cmp	r3, #15
 8007f7c:	d9e9      	bls.n	8007f52 <prvInitialiseNewTask+0x52>
 8007f7e:	e000      	b.n	8007f82 <prvInitialiseNewTask+0x82>
			{
				break;
 8007f80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f8a:	e003      	b.n	8007f94 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	2b06      	cmp	r3, #6
 8007f98:	d901      	bls.n	8007f9e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f9a:	2306      	movs	r3, #6
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	2200      	movs	r2, #0
 8007fae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe ff4e 	bl	8006e56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	3318      	adds	r3, #24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe ff49 	bl	8006e56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fcc:	f1c3 0207 	rsb	r2, r3, #7
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	334c      	adds	r3, #76	; 0x4c
 8007fee:	2260      	movs	r2, #96	; 0x60
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f010 fc40 	bl	8018878 <memset>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	4a0d      	ldr	r2, [pc, #52]	; (8008030 <prvInitialiseNewTask+0x130>)
 8007ffc:	651a      	str	r2, [r3, #80]	; 0x50
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	4a0c      	ldr	r2, [pc, #48]	; (8008034 <prvInitialiseNewTask+0x134>)
 8008002:	655a      	str	r2, [r3, #84]	; 0x54
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <prvInitialiseNewTask+0x138>)
 8008008:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	68f9      	ldr	r1, [r7, #12]
 800800e:	69b8      	ldr	r0, [r7, #24]
 8008010:	f000 fefc 	bl	8008e0c <pxPortInitialiseStack>
 8008014:	4602      	mov	r2, r0
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008026:	bf00      	nop
 8008028:	3720      	adds	r7, #32
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	0801ce14 	.word	0x0801ce14
 8008034:	0801ce34 	.word	0x0801ce34
 8008038:	0801cdf4 	.word	0x0801cdf4

0800803c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008044:	f000 ffd0 	bl	8008fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008048:	4b2a      	ldr	r3, [pc, #168]	; (80080f4 <prvAddNewTaskToReadyList+0xb8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	4a29      	ldr	r2, [pc, #164]	; (80080f4 <prvAddNewTaskToReadyList+0xb8>)
 8008050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008052:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <prvAddNewTaskToReadyList+0xbc>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d109      	bne.n	800806e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800805a:	4a27      	ldr	r2, [pc, #156]	; (80080f8 <prvAddNewTaskToReadyList+0xbc>)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008060:	4b24      	ldr	r3, [pc, #144]	; (80080f4 <prvAddNewTaskToReadyList+0xb8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d110      	bne.n	800808a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008068:	f000 fbf0 	bl	800884c <prvInitialiseTaskLists>
 800806c:	e00d      	b.n	800808a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800806e:	4b23      	ldr	r3, [pc, #140]	; (80080fc <prvAddNewTaskToReadyList+0xc0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008076:	4b20      	ldr	r3, [pc, #128]	; (80080f8 <prvAddNewTaskToReadyList+0xbc>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	429a      	cmp	r2, r3
 8008082:	d802      	bhi.n	800808a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008084:	4a1c      	ldr	r2, [pc, #112]	; (80080f8 <prvAddNewTaskToReadyList+0xbc>)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800808a:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <prvAddNewTaskToReadyList+0xc4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3301      	adds	r3, #1
 8008090:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <prvAddNewTaskToReadyList+0xc4>)
 8008092:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	2201      	movs	r2, #1
 800809a:	409a      	lsls	r2, r3
 800809c:	4b19      	ldr	r3, [pc, #100]	; (8008104 <prvAddNewTaskToReadyList+0xc8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	4a18      	ldr	r2, [pc, #96]	; (8008104 <prvAddNewTaskToReadyList+0xc8>)
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4a15      	ldr	r2, [pc, #84]	; (8008108 <prvAddNewTaskToReadyList+0xcc>)
 80080b4:	441a      	add	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f7fe fed6 	bl	8006e6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080c2:	f000 ffbf 	bl	8009044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080c6:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <prvAddNewTaskToReadyList+0xc0>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00e      	beq.n	80080ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080ce:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <prvAddNewTaskToReadyList+0xbc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	429a      	cmp	r2, r3
 80080da:	d207      	bcs.n	80080ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <prvAddNewTaskToReadyList+0xd0>)
 80080de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	200050ac 	.word	0x200050ac
 80080f8:	20004fac 	.word	0x20004fac
 80080fc:	200050b8 	.word	0x200050b8
 8008100:	200050c8 	.word	0x200050c8
 8008104:	200050b4 	.word	0x200050b4
 8008108:	20004fb0 	.word	0x20004fb0
 800810c:	e000ed04 	.word	0xe000ed04

08008110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d016      	beq.n	8008150 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008122:	4b13      	ldr	r3, [pc, #76]	; (8008170 <vTaskDelay+0x60>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <vTaskDelay+0x2e>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	60bb      	str	r3, [r7, #8]
}
 800813c:	bf00      	nop
			vTaskSuspendAll();
 800813e:	f000 f883 	bl	8008248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008142:	2100      	movs	r1, #0
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fdfb 	bl	8008d40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800814a:	f000 f88b 	bl	8008264 <xTaskResumeAll>
 800814e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d107      	bne.n	8008166 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008156:	4b07      	ldr	r3, [pc, #28]	; (8008174 <vTaskDelay+0x64>)
 8008158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200050d4 	.word	0x200050d4
 8008174:	e000ed04 	.word	0xe000ed04

08008178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	; 0x28
 800817c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008186:	463a      	mov	r2, r7
 8008188:	1d39      	adds	r1, r7, #4
 800818a:	f107 0308 	add.w	r3, r7, #8
 800818e:	4618      	mov	r0, r3
 8008190:	f7f8 f9f8 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	9202      	str	r2, [sp, #8]
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	2300      	movs	r3, #0
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	2300      	movs	r3, #0
 80081a4:	460a      	mov	r2, r1
 80081a6:	4920      	ldr	r1, [pc, #128]	; (8008228 <vTaskStartScheduler+0xb0>)
 80081a8:	4820      	ldr	r0, [pc, #128]	; (800822c <vTaskStartScheduler+0xb4>)
 80081aa:	f7ff fe0a 	bl	8007dc2 <xTaskCreateStatic>
 80081ae:	4603      	mov	r3, r0
 80081b0:	4a1f      	ldr	r2, [pc, #124]	; (8008230 <vTaskStartScheduler+0xb8>)
 80081b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081b4:	4b1e      	ldr	r3, [pc, #120]	; (8008230 <vTaskStartScheduler+0xb8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081bc:	2301      	movs	r3, #1
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	e001      	b.n	80081c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d11b      	bne.n	8008204 <vTaskStartScheduler+0x8c>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	613b      	str	r3, [r7, #16]
}
 80081de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081e0:	4b14      	ldr	r3, [pc, #80]	; (8008234 <vTaskStartScheduler+0xbc>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	334c      	adds	r3, #76	; 0x4c
 80081e6:	4a14      	ldr	r2, [pc, #80]	; (8008238 <vTaskStartScheduler+0xc0>)
 80081e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081ea:	4b14      	ldr	r3, [pc, #80]	; (800823c <vTaskStartScheduler+0xc4>)
 80081ec:	f04f 32ff 	mov.w	r2, #4294967295
 80081f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081f2:	4b13      	ldr	r3, [pc, #76]	; (8008240 <vTaskStartScheduler+0xc8>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081f8:	4b12      	ldr	r3, [pc, #72]	; (8008244 <vTaskStartScheduler+0xcc>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081fe:	f000 fe83 	bl	8008f08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008202:	e00d      	b.n	8008220 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d109      	bne.n	8008220 <vTaskStartScheduler+0xa8>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	60fb      	str	r3, [r7, #12]
}
 800821e:	bf00      	nop
}
 8008220:	bf00      	nop
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	080196a4 	.word	0x080196a4
 800822c:	0800881d 	.word	0x0800881d
 8008230:	200050d0 	.word	0x200050d0
 8008234:	20004fac 	.word	0x20004fac
 8008238:	20000020 	.word	0x20000020
 800823c:	200050cc 	.word	0x200050cc
 8008240:	200050b8 	.word	0x200050b8
 8008244:	200050b0 	.word	0x200050b0

08008248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800824c:	4b04      	ldr	r3, [pc, #16]	; (8008260 <vTaskSuspendAll+0x18>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3301      	adds	r3, #1
 8008252:	4a03      	ldr	r2, [pc, #12]	; (8008260 <vTaskSuspendAll+0x18>)
 8008254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008256:	bf00      	nop
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	200050d4 	.word	0x200050d4

08008264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800826e:	2300      	movs	r3, #0
 8008270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008272:	4b41      	ldr	r3, [pc, #260]	; (8008378 <xTaskResumeAll+0x114>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <xTaskResumeAll+0x2a>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	603b      	str	r3, [r7, #0]
}
 800828c:	bf00      	nop
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800828e:	f000 feab 	bl	8008fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008292:	4b39      	ldr	r3, [pc, #228]	; (8008378 <xTaskResumeAll+0x114>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3b01      	subs	r3, #1
 8008298:	4a37      	ldr	r2, [pc, #220]	; (8008378 <xTaskResumeAll+0x114>)
 800829a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800829c:	4b36      	ldr	r3, [pc, #216]	; (8008378 <xTaskResumeAll+0x114>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d161      	bne.n	8008368 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082a4:	4b35      	ldr	r3, [pc, #212]	; (800837c <xTaskResumeAll+0x118>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d05d      	beq.n	8008368 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ac:	e02e      	b.n	800830c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ae:	4b34      	ldr	r3, [pc, #208]	; (8008380 <xTaskResumeAll+0x11c>)
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3318      	adds	r3, #24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe fe32 	bl	8006f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fe2d 	bl	8006f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ce:	2201      	movs	r2, #1
 80082d0:	409a      	lsls	r2, r3
 80082d2:	4b2c      	ldr	r3, [pc, #176]	; (8008384 <xTaskResumeAll+0x120>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	4a2a      	ldr	r2, [pc, #168]	; (8008384 <xTaskResumeAll+0x120>)
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4a27      	ldr	r2, [pc, #156]	; (8008388 <xTaskResumeAll+0x124>)
 80082ea:	441a      	add	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f7fe fdbb 	bl	8006e6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4b23      	ldr	r3, [pc, #140]	; (800838c <xTaskResumeAll+0x128>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	429a      	cmp	r2, r3
 8008304:	d302      	bcc.n	800830c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008306:	4b22      	ldr	r3, [pc, #136]	; (8008390 <xTaskResumeAll+0x12c>)
 8008308:	2201      	movs	r2, #1
 800830a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800830c:	4b1c      	ldr	r3, [pc, #112]	; (8008380 <xTaskResumeAll+0x11c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1cc      	bne.n	80082ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800831a:	f000 fb39 	bl	8008990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800831e:	4b1d      	ldr	r3, [pc, #116]	; (8008394 <xTaskResumeAll+0x130>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d010      	beq.n	800834c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800832a:	f000 f857 	bl	80083dc <xTaskIncrementTick>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008334:	4b16      	ldr	r3, [pc, #88]	; (8008390 <xTaskResumeAll+0x12c>)
 8008336:	2201      	movs	r2, #1
 8008338:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3b01      	subs	r3, #1
 800833e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1f1      	bne.n	800832a <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <xTaskResumeAll+0x130>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800834c:	4b10      	ldr	r3, [pc, #64]	; (8008390 <xTaskResumeAll+0x12c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d009      	beq.n	8008368 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008354:	2301      	movs	r3, #1
 8008356:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <xTaskResumeAll+0x134>)
 800835a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008368:	f000 fe6c 	bl	8009044 <vPortExitCritical>

	return xAlreadyYielded;
 800836c:	68bb      	ldr	r3, [r7, #8]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	200050d4 	.word	0x200050d4
 800837c:	200050ac 	.word	0x200050ac
 8008380:	2000506c 	.word	0x2000506c
 8008384:	200050b4 	.word	0x200050b4
 8008388:	20004fb0 	.word	0x20004fb0
 800838c:	20004fac 	.word	0x20004fac
 8008390:	200050c0 	.word	0x200050c0
 8008394:	200050bc 	.word	0x200050bc
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083a2:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <xTaskGetTickCount+0x18>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083a8:	687b      	ldr	r3, [r7, #4]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bc80      	pop	{r7}
 80083b2:	4770      	bx	lr
 80083b4:	200050b0 	.word	0x200050b0

080083b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083be:	f000 fed7 	bl	8009170 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80083c2:	2300      	movs	r3, #0
 80083c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80083c6:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <xTaskGetTickCountFromISR+0x20>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083cc:	683b      	ldr	r3, [r7, #0]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200050b0 	.word	0x200050b0

080083dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e6:	4b4e      	ldr	r3, [pc, #312]	; (8008520 <xTaskIncrementTick+0x144>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 808d 	bne.w	800850a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083f0:	4b4c      	ldr	r3, [pc, #304]	; (8008524 <xTaskIncrementTick+0x148>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083f8:	4a4a      	ldr	r2, [pc, #296]	; (8008524 <xTaskIncrementTick+0x148>)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d11f      	bne.n	8008444 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008404:	4b48      	ldr	r3, [pc, #288]	; (8008528 <xTaskIncrementTick+0x14c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <xTaskIncrementTick+0x46>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	603b      	str	r3, [r7, #0]
}
 8008420:	bf00      	nop
 8008422:	4b41      	ldr	r3, [pc, #260]	; (8008528 <xTaskIncrementTick+0x14c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	4b40      	ldr	r3, [pc, #256]	; (800852c <xTaskIncrementTick+0x150>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a3e      	ldr	r2, [pc, #248]	; (8008528 <xTaskIncrementTick+0x14c>)
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	4a3e      	ldr	r2, [pc, #248]	; (800852c <xTaskIncrementTick+0x150>)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <xTaskIncrementTick+0x154>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3301      	adds	r3, #1
 800843c:	4a3c      	ldr	r2, [pc, #240]	; (8008530 <xTaskIncrementTick+0x154>)
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	f000 faa6 	bl	8008990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008444:	4b3b      	ldr	r3, [pc, #236]	; (8008534 <xTaskIncrementTick+0x158>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	d348      	bcc.n	80084e0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800844e:	4b36      	ldr	r3, [pc, #216]	; (8008528 <xTaskIncrementTick+0x14c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d104      	bne.n	8008462 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008458:	4b36      	ldr	r3, [pc, #216]	; (8008534 <xTaskIncrementTick+0x158>)
 800845a:	f04f 32ff 	mov.w	r2, #4294967295
 800845e:	601a      	str	r2, [r3, #0]
					break;
 8008460:	e03e      	b.n	80084e0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008462:	4b31      	ldr	r3, [pc, #196]	; (8008528 <xTaskIncrementTick+0x14c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	429a      	cmp	r2, r3
 8008478:	d203      	bcs.n	8008482 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800847a:	4a2e      	ldr	r2, [pc, #184]	; (8008534 <xTaskIncrementTick+0x158>)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008480:	e02e      	b.n	80084e0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	3304      	adds	r3, #4
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fd4c 	bl	8006f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	2b00      	cmp	r3, #0
 8008492:	d004      	beq.n	800849e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	3318      	adds	r3, #24
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe fd43 	bl	8006f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	2201      	movs	r2, #1
 80084a4:	409a      	lsls	r2, r3
 80084a6:	4b24      	ldr	r3, [pc, #144]	; (8008538 <xTaskIncrementTick+0x15c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	4a22      	ldr	r2, [pc, #136]	; (8008538 <xTaskIncrementTick+0x15c>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a1f      	ldr	r2, [pc, #124]	; (800853c <xTaskIncrementTick+0x160>)
 80084be:	441a      	add	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fe fcd1 	bl	8006e6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d0:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <xTaskIncrementTick+0x164>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d3b9      	bcc.n	800844e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80084da:	2301      	movs	r3, #1
 80084dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084de:	e7b6      	b.n	800844e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084e0:	4b17      	ldr	r3, [pc, #92]	; (8008540 <xTaskIncrementTick+0x164>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e6:	4915      	ldr	r1, [pc, #84]	; (800853c <xTaskIncrementTick+0x160>)
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d901      	bls.n	80084fc <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <xTaskIncrementTick+0x168>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d007      	beq.n	8008514 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e004      	b.n	8008514 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <xTaskIncrementTick+0x16c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	4a0d      	ldr	r2, [pc, #52]	; (8008548 <xTaskIncrementTick+0x16c>)
 8008512:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008514:	697b      	ldr	r3, [r7, #20]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	200050d4 	.word	0x200050d4
 8008524:	200050b0 	.word	0x200050b0
 8008528:	20005064 	.word	0x20005064
 800852c:	20005068 	.word	0x20005068
 8008530:	200050c4 	.word	0x200050c4
 8008534:	200050cc 	.word	0x200050cc
 8008538:	200050b4 	.word	0x200050b4
 800853c:	20004fb0 	.word	0x20004fb0
 8008540:	20004fac 	.word	0x20004fac
 8008544:	200050c0 	.word	0x200050c0
 8008548:	200050bc 	.word	0x200050bc

0800854c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008552:	4b28      	ldr	r3, [pc, #160]	; (80085f4 <vTaskSwitchContext+0xa8>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800855a:	4b27      	ldr	r3, [pc, #156]	; (80085f8 <vTaskSwitchContext+0xac>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008560:	e043      	b.n	80085ea <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008562:	4b25      	ldr	r3, [pc, #148]	; (80085f8 <vTaskSwitchContext+0xac>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008568:	4b24      	ldr	r3, [pc, #144]	; (80085fc <vTaskSwitchContext+0xb0>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	fab3 f383 	clz	r3, r3
 8008574:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008576:	7afb      	ldrb	r3, [r7, #11]
 8008578:	f1c3 031f 	rsb	r3, r3, #31
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	4920      	ldr	r1, [pc, #128]	; (8008600 <vTaskSwitchContext+0xb4>)
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	440b      	add	r3, r1
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	607b      	str	r3, [r7, #4]
}
 80085a4:	bf00      	nop
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4a13      	ldr	r2, [pc, #76]	; (8008600 <vTaskSwitchContext+0xb4>)
 80085b2:	4413      	add	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	605a      	str	r2, [r3, #4]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	3308      	adds	r3, #8
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d104      	bne.n	80085d6 <vTaskSwitchContext+0x8a>
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4a09      	ldr	r2, [pc, #36]	; (8008604 <vTaskSwitchContext+0xb8>)
 80085de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085e0:	4b08      	ldr	r3, [pc, #32]	; (8008604 <vTaskSwitchContext+0xb8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	334c      	adds	r3, #76	; 0x4c
 80085e6:	4a08      	ldr	r2, [pc, #32]	; (8008608 <vTaskSwitchContext+0xbc>)
 80085e8:	6013      	str	r3, [r2, #0]
}
 80085ea:	bf00      	nop
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr
 80085f4:	200050d4 	.word	0x200050d4
 80085f8:	200050c0 	.word	0x200050c0
 80085fc:	200050b4 	.word	0x200050b4
 8008600:	20004fb0 	.word	0x20004fb0
 8008604:	20004fac 	.word	0x20004fac
 8008608:	20000020 	.word	0x20000020

0800860c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d109      	bne.n	8008630 <vTaskPlaceOnEventList+0x24>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <vTaskPlaceOnEventList+0x44>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3318      	adds	r3, #24
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7fe fc3b 	bl	8006eb4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800863e:	2101      	movs	r1, #1
 8008640:	6838      	ldr	r0, [r7, #0]
 8008642:	f000 fb7d 	bl	8008d40 <prvAddCurrentTaskToDelayedList>
}
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20004fac 	.word	0x20004fac

08008654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d109      	bne.n	800867e <xTaskRemoveFromEventList+0x2a>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	60fb      	str	r3, [r7, #12]
}
 800867c:	bf00      	nop
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	3318      	adds	r3, #24
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fc4e 	bl	8006f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008688:	4b1d      	ldr	r3, [pc, #116]	; (8008700 <xTaskRemoveFromEventList+0xac>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d11c      	bne.n	80086ca <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	3304      	adds	r3, #4
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fc45 	bl	8006f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	2201      	movs	r2, #1
 80086a0:	409a      	lsls	r2, r3
 80086a2:	4b18      	ldr	r3, [pc, #96]	; (8008704 <xTaskRemoveFromEventList+0xb0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	4a16      	ldr	r2, [pc, #88]	; (8008704 <xTaskRemoveFromEventList+0xb0>)
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4a13      	ldr	r2, [pc, #76]	; (8008708 <xTaskRemoveFromEventList+0xb4>)
 80086ba:	441a      	add	r2, r3
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	3304      	adds	r3, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f7fe fbd3 	bl	8006e6e <vListInsertEnd>
 80086c8:	e005      	b.n	80086d6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	3318      	adds	r3, #24
 80086ce:	4619      	mov	r1, r3
 80086d0:	480e      	ldr	r0, [pc, #56]	; (800870c <xTaskRemoveFromEventList+0xb8>)
 80086d2:	f7fe fbcc 	bl	8006e6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086da:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <xTaskRemoveFromEventList+0xbc>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d905      	bls.n	80086f0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <xTaskRemoveFromEventList+0xc0>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	e001      	b.n	80086f4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086f4:	697b      	ldr	r3, [r7, #20]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	200050d4 	.word	0x200050d4
 8008704:	200050b4 	.word	0x200050b4
 8008708:	20004fb0 	.word	0x20004fb0
 800870c:	2000506c 	.word	0x2000506c
 8008710:	20004fac 	.word	0x20004fac
 8008714:	200050c0 	.word	0x200050c0

08008718 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008720:	4b06      	ldr	r3, [pc, #24]	; (800873c <vTaskInternalSetTimeOutState+0x24>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008728:	4b05      	ldr	r3, [pc, #20]	; (8008740 <vTaskInternalSetTimeOutState+0x28>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	605a      	str	r2, [r3, #4]
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	bc80      	pop	{r7}
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	200050c4 	.word	0x200050c4
 8008740:	200050b0 	.word	0x200050b0

08008744 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d109      	bne.n	8008768 <xTaskCheckForTimeOut+0x24>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	613b      	str	r3, [r7, #16]
}
 8008766:	bf00      	nop
	configASSERT( pxTicksToWait );
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d109      	bne.n	8008782 <xTaskCheckForTimeOut+0x3e>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	60fb      	str	r3, [r7, #12]
}
 8008780:	bf00      	nop

	taskENTER_CRITICAL();
 8008782:	f000 fc31 	bl	8008fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008786:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <xTaskCheckForTimeOut+0xb8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d102      	bne.n	80087a6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	e023      	b.n	80087ee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <xTaskCheckForTimeOut+0xbc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d007      	beq.n	80087c2 <xTaskCheckForTimeOut+0x7e>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d302      	bcc.n	80087c2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	e015      	b.n	80087ee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d20b      	bcs.n	80087e4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	1ad2      	subs	r2, r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff9d 	bl	8008718 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087de:	2300      	movs	r3, #0
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	e004      	b.n	80087ee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087ee:	f000 fc29 	bl	8009044 <vPortExitCritical>

	return xReturn;
 80087f2:	69fb      	ldr	r3, [r7, #28]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200050b0 	.word	0x200050b0
 8008800:	200050c4 	.word	0x200050c4

08008804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008808:	4b03      	ldr	r3, [pc, #12]	; (8008818 <vTaskMissedYield+0x14>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
}
 800880e:	bf00      	nop
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	200050c0 	.word	0x200050c0

0800881c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008824:	f000 f852 	bl	80088cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008828:	4b06      	ldr	r3, [pc, #24]	; (8008844 <prvIdleTask+0x28>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d9f9      	bls.n	8008824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008830:	4b05      	ldr	r3, [pc, #20]	; (8008848 <prvIdleTask+0x2c>)
 8008832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008840:	e7f0      	b.n	8008824 <prvIdleTask+0x8>
 8008842:	bf00      	nop
 8008844:	20004fb0 	.word	0x20004fb0
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008852:	2300      	movs	r3, #0
 8008854:	607b      	str	r3, [r7, #4]
 8008856:	e00c      	b.n	8008872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4a12      	ldr	r2, [pc, #72]	; (80088ac <prvInitialiseTaskLists+0x60>)
 8008864:	4413      	add	r3, r2
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fad6 	bl	8006e18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3301      	adds	r3, #1
 8008870:	607b      	str	r3, [r7, #4]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b06      	cmp	r3, #6
 8008876:	d9ef      	bls.n	8008858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008878:	480d      	ldr	r0, [pc, #52]	; (80088b0 <prvInitialiseTaskLists+0x64>)
 800887a:	f7fe facd 	bl	8006e18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800887e:	480d      	ldr	r0, [pc, #52]	; (80088b4 <prvInitialiseTaskLists+0x68>)
 8008880:	f7fe faca 	bl	8006e18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008884:	480c      	ldr	r0, [pc, #48]	; (80088b8 <prvInitialiseTaskLists+0x6c>)
 8008886:	f7fe fac7 	bl	8006e18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800888a:	480c      	ldr	r0, [pc, #48]	; (80088bc <prvInitialiseTaskLists+0x70>)
 800888c:	f7fe fac4 	bl	8006e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008890:	480b      	ldr	r0, [pc, #44]	; (80088c0 <prvInitialiseTaskLists+0x74>)
 8008892:	f7fe fac1 	bl	8006e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008896:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <prvInitialiseTaskLists+0x78>)
 8008898:	4a05      	ldr	r2, [pc, #20]	; (80088b0 <prvInitialiseTaskLists+0x64>)
 800889a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <prvInitialiseTaskLists+0x7c>)
 800889e:	4a05      	ldr	r2, [pc, #20]	; (80088b4 <prvInitialiseTaskLists+0x68>)
 80088a0:	601a      	str	r2, [r3, #0]
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20004fb0 	.word	0x20004fb0
 80088b0:	2000503c 	.word	0x2000503c
 80088b4:	20005050 	.word	0x20005050
 80088b8:	2000506c 	.word	0x2000506c
 80088bc:	20005080 	.word	0x20005080
 80088c0:	20005098 	.word	0x20005098
 80088c4:	20005064 	.word	0x20005064
 80088c8:	20005068 	.word	0x20005068

080088cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088d2:	e019      	b.n	8008908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088d4:	f000 fb88 	bl	8008fe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d8:	4b10      	ldr	r3, [pc, #64]	; (800891c <prvCheckTasksWaitingTermination+0x50>)
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fb1d 	bl	8006f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <prvCheckTasksWaitingTermination+0x54>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	4a0b      	ldr	r2, [pc, #44]	; (8008920 <prvCheckTasksWaitingTermination+0x54>)
 80088f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088f4:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <prvCheckTasksWaitingTermination+0x58>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	4a0a      	ldr	r2, [pc, #40]	; (8008924 <prvCheckTasksWaitingTermination+0x58>)
 80088fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088fe:	f000 fba1 	bl	8009044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f810 	bl	8008928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008908:	4b06      	ldr	r3, [pc, #24]	; (8008924 <prvCheckTasksWaitingTermination+0x58>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e1      	bne.n	80088d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20005080 	.word	0x20005080
 8008920:	200050ac 	.word	0x200050ac
 8008924:	20005094 	.word	0x20005094

08008928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	334c      	adds	r3, #76	; 0x4c
 8008934:	4618      	mov	r0, r3
 8008936:	f010 f8e9 	bl	8018b0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d108      	bne.n	8008956 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fd15 	bl	8009378 <vPortFree>
				vPortFree( pxTCB );
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fd12 	bl	8009378 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008954:	e017      	b.n	8008986 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800895c:	2b01      	cmp	r3, #1
 800895e:	d103      	bne.n	8008968 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fd09 	bl	8009378 <vPortFree>
	}
 8008966:	e00e      	b.n	8008986 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800896e:	2b02      	cmp	r3, #2
 8008970:	d009      	beq.n	8008986 <prvDeleteTCB+0x5e>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	60fb      	str	r3, [r7, #12]
}
 8008984:	bf00      	nop
	}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <prvResetNextTaskUnblockTime+0x38>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089a0:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <prvResetNextTaskUnblockTime+0x3c>)
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295
 80089a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089a8:	e008      	b.n	80089bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089aa:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <prvResetNextTaskUnblockTime+0x38>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	4a04      	ldr	r2, [pc, #16]	; (80089cc <prvResetNextTaskUnblockTime+0x3c>)
 80089ba:	6013      	str	r3, [r2, #0]
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	20005064 	.word	0x20005064
 80089cc:	200050cc 	.word	0x200050cc

080089d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089d6:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <xTaskGetSchedulerState+0x34>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089de:	2301      	movs	r3, #1
 80089e0:	607b      	str	r3, [r7, #4]
 80089e2:	e008      	b.n	80089f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089e4:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <xTaskGetSchedulerState+0x38>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089ec:	2302      	movs	r3, #2
 80089ee:	607b      	str	r3, [r7, #4]
 80089f0:	e001      	b.n	80089f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089f2:	2300      	movs	r3, #0
 80089f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089f6:	687b      	ldr	r3, [r7, #4]
	}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	200050b8 	.word	0x200050b8
 8008a08:	200050d4 	.word	0x200050d4

08008a0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d05e      	beq.n	8008ae0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a26:	4b31      	ldr	r3, [pc, #196]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d24e      	bcs.n	8008ace <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	db06      	blt.n	8008a46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a38:	4b2c      	ldr	r3, [pc, #176]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	f1c3 0207 	rsb	r2, r3, #7
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6959      	ldr	r1, [r3, #20]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4a26      	ldr	r2, [pc, #152]	; (8008af0 <xTaskPriorityInherit+0xe4>)
 8008a58:	4413      	add	r3, r2
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	d12f      	bne.n	8008abe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fa5e 	bl	8006f24 <uxListRemove>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	2201      	movs	r2, #1
 8008a74:	fa02 f303 	lsl.w	r3, r2, r3
 8008a78:	43da      	mvns	r2, r3
 8008a7a:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <xTaskPriorityInherit+0xe8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <xTaskPriorityInherit+0xe8>)
 8008a82:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a84:	4b19      	ldr	r3, [pc, #100]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	2201      	movs	r2, #1
 8008a94:	409a      	lsls	r2, r3
 8008a96:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <xTaskPriorityInherit+0xe8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	4a15      	ldr	r2, [pc, #84]	; (8008af4 <xTaskPriorityInherit+0xe8>)
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <xTaskPriorityInherit+0xe4>)
 8008aae:	441a      	add	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe f9d9 	bl	8006e6e <vListInsertEnd>
 8008abc:	e004      	b.n	8008ac8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008abe:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	e008      	b.n	8008ae0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ad2:	4b06      	ldr	r3, [pc, #24]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d201      	bcs.n	8008ae0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
	}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20004fac 	.word	0x20004fac
 8008af0:	20004fb0 	.word	0x20004fb0
 8008af4:	200050b4 	.word	0x200050b4

08008af8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d06c      	beq.n	8008be8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b0e:	4b39      	ldr	r3, [pc, #228]	; (8008bf4 <xTaskPriorityDisinherit+0xfc>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d009      	beq.n	8008b2c <xTaskPriorityDisinherit+0x34>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	60fb      	str	r3, [r7, #12]
}
 8008b2a:	bf00      	nop
			configASSERT( pxTCB->uxMutexesHeld );
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d109      	bne.n	8008b48 <xTaskPriorityDisinherit+0x50>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	60bb      	str	r3, [r7, #8]
}
 8008b46:	bf00      	nop
			( pxTCB->uxMutexesHeld )--;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b4c:	1e5a      	subs	r2, r3, #1
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d044      	beq.n	8008be8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d140      	bne.n	8008be8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe f9da 	bl	8006f24 <uxListRemove>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d115      	bne.n	8008ba2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	491f      	ldr	r1, [pc, #124]	; (8008bf8 <xTaskPriorityDisinherit+0x100>)
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	440b      	add	r3, r1
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <xTaskPriorityDisinherit+0xaa>
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	2201      	movs	r2, #1
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	43da      	mvns	r2, r3
 8008b98:	4b18      	ldr	r3, [pc, #96]	; (8008bfc <xTaskPriorityDisinherit+0x104>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <xTaskPriorityDisinherit+0x104>)
 8008ba0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	f1c3 0207 	rsb	r2, r3, #7
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	2201      	movs	r2, #1
 8008bbc:	409a      	lsls	r2, r3
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <xTaskPriorityDisinherit+0x104>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	4a0d      	ldr	r2, [pc, #52]	; (8008bfc <xTaskPriorityDisinherit+0x104>)
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <xTaskPriorityDisinherit+0x100>)
 8008bd6:	441a      	add	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7fe f945 	bl	8006e6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008be8:	697b      	ldr	r3, [r7, #20]
	}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20004fac 	.word	0x20004fac
 8008bf8:	20004fb0 	.word	0x20004fb0
 8008bfc:	200050b4 	.word	0x200050b4

08008c00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b088      	sub	sp, #32
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d075      	beq.n	8008d04 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <vTaskPriorityDisinheritAfterTimeout+0x34>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	60fb      	str	r3, [r7, #12]
}
 8008c32:	bf00      	nop

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d902      	bls.n	8008c44 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	e002      	b.n	8008c4a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d057      	beq.n	8008d04 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d152      	bne.n	8008d04 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c5e:	4b2b      	ldr	r3, [pc, #172]	; (8008d0c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d109      	bne.n	8008c7c <vTaskPriorityDisinheritAfterTimeout+0x7c>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	60bb      	str	r3, [r7, #8]
}
 8008c7a:	bf00      	nop

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	db04      	blt.n	8008c9a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f1c3 0207 	rsb	r2, r3, #7
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	6959      	ldr	r1, [r3, #20]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4a19      	ldr	r2, [pc, #100]	; (8008d10 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008caa:	4413      	add	r3, r2
 8008cac:	4299      	cmp	r1, r3
 8008cae:	d129      	bne.n	8008d04 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe f935 	bl	8006f24 <uxListRemove>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	43da      	mvns	r2, r3
 8008ccc:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	4a10      	ldr	r2, [pc, #64]	; (8008d14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008cd4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	2201      	movs	r2, #1
 8008cdc:	409a      	lsls	r2, r3
 8008cde:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	4a0b      	ldr	r2, [pc, #44]	; (8008d14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4a06      	ldr	r2, [pc, #24]	; (8008d10 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008cf6:	441a      	add	r2, r3
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f7fe f8b5 	bl	8006e6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d04:	bf00      	nop
 8008d06:	3720      	adds	r7, #32
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20004fac 	.word	0x20004fac
 8008d10:	20004fb0 	.word	0x20004fb0
 8008d14:	200050b4 	.word	0x200050b4

08008d18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d1c:	4b07      	ldr	r3, [pc, #28]	; (8008d3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d2a:	3201      	adds	r2, #1
 8008d2c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d2e:	4b03      	ldr	r3, [pc, #12]	; (8008d3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d30:	681b      	ldr	r3, [r3, #0]
	}
 8008d32:	4618      	mov	r0, r3
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	20004fac 	.word	0x20004fac

08008d40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d4a:	4b29      	ldr	r3, [pc, #164]	; (8008df0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d50:	4b28      	ldr	r3, [pc, #160]	; (8008df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3304      	adds	r3, #4
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe f8e4 	bl	8006f24 <uxListRemove>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d62:	4b24      	ldr	r3, [pc, #144]	; (8008df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	2201      	movs	r2, #1
 8008d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6e:	43da      	mvns	r2, r3
 8008d70:	4b21      	ldr	r3, [pc, #132]	; (8008df8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4013      	ands	r3, r2
 8008d76:	4a20      	ldr	r2, [pc, #128]	; (8008df8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d10a      	bne.n	8008d98 <prvAddCurrentTaskToDelayedList+0x58>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d007      	beq.n	8008d98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d88:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	481a      	ldr	r0, [pc, #104]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d92:	f7fe f86c 	bl	8006e6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d96:	e026      	b.n	8008de6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008da0:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d209      	bcs.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db0:	4b13      	ldr	r3, [pc, #76]	; (8008e00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3304      	adds	r3, #4
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	f7fe f879 	bl	8006eb4 <vListInsert>
}
 8008dc2:	e010      	b.n	8008de6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc4:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7fe f86f 	bl	8006eb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d202      	bcs.n	8008de6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008de0:	4a09      	ldr	r2, [pc, #36]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6013      	str	r3, [r2, #0]
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	200050b0 	.word	0x200050b0
 8008df4:	20004fac 	.word	0x20004fac
 8008df8:	200050b4 	.word	0x200050b4
 8008dfc:	20005098 	.word	0x20005098
 8008e00:	20005068 	.word	0x20005068
 8008e04:	20005064 	.word	0x20005064
 8008e08:	200050cc 	.word	0x200050cc

08008e0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3b04      	subs	r3, #4
 8008e1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3b04      	subs	r3, #4
 8008e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f023 0201 	bic.w	r2, r3, #1
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3b04      	subs	r3, #4
 8008e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e3c:	4a08      	ldr	r2, [pc, #32]	; (8008e60 <pxPortInitialiseStack+0x54>)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3b14      	subs	r3, #20
 8008e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3b20      	subs	r3, #32
 8008e52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e54:	68fb      	ldr	r3, [r7, #12]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr
 8008e60:	08008e65 	.word	0x08008e65

08008e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e6e:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <prvTaskExitError+0x50>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e76:	d009      	beq.n	8008e8c <prvTaskExitError+0x28>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	60fb      	str	r3, [r7, #12]
}
 8008e8a:	bf00      	nop
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	60bb      	str	r3, [r7, #8]
}
 8008e9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ea0:	bf00      	nop
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0fc      	beq.n	8008ea2 <prvTaskExitError+0x3e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bc80      	pop	{r7}
 8008eb2:	4770      	bx	lr
 8008eb4:	2000000c 	.word	0x2000000c
	...

08008ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <pxCurrentTCBConst2>)
 8008ec2:	6819      	ldr	r1, [r3, #0]
 8008ec4:	6808      	ldr	r0, [r1, #0]
 8008ec6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008eca:	f380 8809 	msr	PSP, r0
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f04f 0000 	mov.w	r0, #0
 8008ed6:	f380 8811 	msr	BASEPRI, r0
 8008eda:	f04e 0e0d 	orr.w	lr, lr, #13
 8008ede:	4770      	bx	lr

08008ee0 <pxCurrentTCBConst2>:
 8008ee0:	20004fac 	.word	0x20004fac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop

08008ee8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008ee8:	4806      	ldr	r0, [pc, #24]	; (8008f04 <prvPortStartFirstTask+0x1c>)
 8008eea:	6800      	ldr	r0, [r0, #0]
 8008eec:	6800      	ldr	r0, [r0, #0]
 8008eee:	f380 8808 	msr	MSP, r0
 8008ef2:	b662      	cpsie	i
 8008ef4:	b661      	cpsie	f
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	df00      	svc	0
 8008f00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f02:	bf00      	nop
 8008f04:	e000ed08 	.word	0xe000ed08

08008f08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f0e:	4b31      	ldr	r3, [pc, #196]	; (8008fd4 <xPortStartScheduler+0xcc>)
 8008f10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	22ff      	movs	r2, #255	; 0xff
 8008f1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	4b29      	ldr	r3, [pc, #164]	; (8008fd8 <xPortStartScheduler+0xd0>)
 8008f34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f36:	4b29      	ldr	r3, [pc, #164]	; (8008fdc <xPortStartScheduler+0xd4>)
 8008f38:	2207      	movs	r2, #7
 8008f3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f3c:	e009      	b.n	8008f52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f3e:	4b27      	ldr	r3, [pc, #156]	; (8008fdc <xPortStartScheduler+0xd4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	4a25      	ldr	r2, [pc, #148]	; (8008fdc <xPortStartScheduler+0xd4>)
 8008f46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5a:	2b80      	cmp	r3, #128	; 0x80
 8008f5c:	d0ef      	beq.n	8008f3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f5e:	4b1f      	ldr	r3, [pc, #124]	; (8008fdc <xPortStartScheduler+0xd4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f1c3 0307 	rsb	r3, r3, #7
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d009      	beq.n	8008f7e <xPortStartScheduler+0x76>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	60bb      	str	r3, [r7, #8]
}
 8008f7c:	bf00      	nop
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f7e:	4b17      	ldr	r3, [pc, #92]	; (8008fdc <xPortStartScheduler+0xd4>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	021b      	lsls	r3, r3, #8
 8008f84:	4a15      	ldr	r2, [pc, #84]	; (8008fdc <xPortStartScheduler+0xd4>)
 8008f86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f88:	4b14      	ldr	r3, [pc, #80]	; (8008fdc <xPortStartScheduler+0xd4>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f90:	4a12      	ldr	r2, [pc, #72]	; (8008fdc <xPortStartScheduler+0xd4>)
 8008f92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f9c:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <xPortStartScheduler+0xd8>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a0f      	ldr	r2, [pc, #60]	; (8008fe0 <xPortStartScheduler+0xd8>)
 8008fa2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fa8:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <xPortStartScheduler+0xd8>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a0c      	ldr	r2, [pc, #48]	; (8008fe0 <xPortStartScheduler+0xd8>)
 8008fae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fb4:	f000 f8ba 	bl	800912c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fb8:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <xPortStartScheduler+0xdc>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fbe:	f7ff ff93 	bl	8008ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fc2:	f7ff fac3 	bl	800854c <vTaskSwitchContext>
	prvTaskExitError();
 8008fc6:	f7ff ff4d 	bl	8008e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	e000e400 	.word	0xe000e400
 8008fd8:	200050d8 	.word	0x200050d8
 8008fdc:	200050dc 	.word	0x200050dc
 8008fe0:	e000ed20 	.word	0xe000ed20
 8008fe4:	2000000c 	.word	0x2000000c

08008fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009002:	4b0e      	ldr	r3, [pc, #56]	; (800903c <vPortEnterCritical+0x54>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3301      	adds	r3, #1
 8009008:	4a0c      	ldr	r2, [pc, #48]	; (800903c <vPortEnterCritical+0x54>)
 800900a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800900c:	4b0b      	ldr	r3, [pc, #44]	; (800903c <vPortEnterCritical+0x54>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d10e      	bne.n	8009032 <vPortEnterCritical+0x4a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009014:	4b0a      	ldr	r3, [pc, #40]	; (8009040 <vPortEnterCritical+0x58>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <vPortEnterCritical+0x4a>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	603b      	str	r3, [r7, #0]
}
 8009030:	bf00      	nop
	}
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr
 800903c:	2000000c 	.word	0x2000000c
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800904a:	4b11      	ldr	r3, [pc, #68]	; (8009090 <vPortExitCritical+0x4c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <vPortExitCritical+0x22>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	607b      	str	r3, [r7, #4]
}
 8009064:	bf00      	nop
	uxCriticalNesting--;
 8009066:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <vPortExitCritical+0x4c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3b01      	subs	r3, #1
 800906c:	4a08      	ldr	r2, [pc, #32]	; (8009090 <vPortExitCritical+0x4c>)
 800906e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009070:	4b07      	ldr	r3, [pc, #28]	; (8009090 <vPortExitCritical+0x4c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d105      	bne.n	8009084 <vPortExitCritical+0x40>
 8009078:	2300      	movs	r3, #0
 800907a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	f383 8811 	msr	BASEPRI, r3
}
 8009082:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	2000000c 	.word	0x2000000c
	...

080090a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090a0:	f3ef 8009 	mrs	r0, PSP
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <pxCurrentTCBConst>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090b0:	6010      	str	r0, [r2, #0]
 80090b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80090b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090ba:	f380 8811 	msr	BASEPRI, r0
 80090be:	f7ff fa45 	bl	800854c <vTaskSwitchContext>
 80090c2:	f04f 0000 	mov.w	r0, #0
 80090c6:	f380 8811 	msr	BASEPRI, r0
 80090ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090ce:	6819      	ldr	r1, [r3, #0]
 80090d0:	6808      	ldr	r0, [r1, #0]
 80090d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090d6:	f380 8809 	msr	PSP, r0
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	4770      	bx	lr

080090e0 <pxCurrentTCBConst>:
 80090e0:	20004fac 	.word	0x20004fac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop

080090e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	607b      	str	r3, [r7, #4]
}
 8009100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009102:	f7ff f96b 	bl	80083dc <xTaskIncrementTick>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800910c:	4b06      	ldr	r3, [pc, #24]	; (8009128 <SysTick_Handler+0x40>)
 800910e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	f383 8811 	msr	BASEPRI, r3
}
 800911e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	e000ed04 	.word	0xe000ed04

0800912c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009130:	4b0a      	ldr	r3, [pc, #40]	; (800915c <vPortSetupTimerInterrupt+0x30>)
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009136:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <vPortSetupTimerInterrupt+0x34>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800913c:	4b09      	ldr	r3, [pc, #36]	; (8009164 <vPortSetupTimerInterrupt+0x38>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a09      	ldr	r2, [pc, #36]	; (8009168 <vPortSetupTimerInterrupt+0x3c>)
 8009142:	fba2 2303 	umull	r2, r3, r2, r3
 8009146:	099b      	lsrs	r3, r3, #6
 8009148:	4a08      	ldr	r2, [pc, #32]	; (800916c <vPortSetupTimerInterrupt+0x40>)
 800914a:	3b01      	subs	r3, #1
 800914c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800914e:	4b03      	ldr	r3, [pc, #12]	; (800915c <vPortSetupTimerInterrupt+0x30>)
 8009150:	2207      	movs	r2, #7
 8009152:	601a      	str	r2, [r3, #0]
}
 8009154:	bf00      	nop
 8009156:	46bd      	mov	sp, r7
 8009158:	bc80      	pop	{r7}
 800915a:	4770      	bx	lr
 800915c:	e000e010 	.word	0xe000e010
 8009160:	e000e018 	.word	0xe000e018
 8009164:	20000000 	.word	0x20000000
 8009168:	10624dd3 	.word	0x10624dd3
 800916c:	e000e014 	.word	0xe000e014

08009170 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009176:	f3ef 8305 	mrs	r3, IPSR
 800917a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b0f      	cmp	r3, #15
 8009180:	d913      	bls.n	80091aa <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009182:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <vPortValidateInterruptPriority+0x68>)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4413      	add	r3, r2
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800918c:	4b13      	ldr	r3, [pc, #76]	; (80091dc <vPortValidateInterruptPriority+0x6c>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	7afa      	ldrb	r2, [r7, #11]
 8009192:	429a      	cmp	r2, r3
 8009194:	d209      	bcs.n	80091aa <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	607b      	str	r3, [r7, #4]
}
 80091a8:	bf00      	nop
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091aa:	4b0d      	ldr	r3, [pc, #52]	; (80091e0 <vPortValidateInterruptPriority+0x70>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <vPortValidateInterruptPriority+0x74>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d909      	bls.n	80091ce <vPortValidateInterruptPriority+0x5e>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	603b      	str	r3, [r7, #0]
}
 80091cc:	bf00      	nop
	}
 80091ce:	bf00      	nop
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr
 80091d8:	e000e3f0 	.word	0xe000e3f0
 80091dc:	200050d8 	.word	0x200050d8
 80091e0:	e000ed0c 	.word	0xe000ed0c
 80091e4:	200050dc 	.word	0x200050dc

080091e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08a      	sub	sp, #40	; 0x28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091f4:	f7ff f828 	bl	8008248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091f8:	4b59      	ldr	r3, [pc, #356]	; (8009360 <pvPortMalloc+0x178>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009200:	f000 f91a 	bl	8009438 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009204:	4b57      	ldr	r3, [pc, #348]	; (8009364 <pvPortMalloc+0x17c>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	f040 8091 	bne.w	8009334 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01c      	beq.n	8009252 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009218:	2208      	movs	r2, #8
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4413      	add	r3, r2
 800921e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b00      	cmp	r3, #0
 8009228:	d013      	beq.n	8009252 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f023 0307 	bic.w	r3, r3, #7
 8009230:	3308      	adds	r3, #8
 8009232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <pvPortMalloc+0x6a>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	617b      	str	r3, [r7, #20]
}
 8009250:	bf00      	nop
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d06d      	beq.n	8009334 <pvPortMalloc+0x14c>
 8009258:	4b43      	ldr	r3, [pc, #268]	; (8009368 <pvPortMalloc+0x180>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	429a      	cmp	r2, r3
 8009260:	d868      	bhi.n	8009334 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009262:	4b42      	ldr	r3, [pc, #264]	; (800936c <pvPortMalloc+0x184>)
 8009264:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009266:	4b41      	ldr	r3, [pc, #260]	; (800936c <pvPortMalloc+0x184>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800926c:	e004      	b.n	8009278 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d903      	bls.n	800928a <pvPortMalloc+0xa2>
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f1      	bne.n	800926e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800928a:	4b35      	ldr	r3, [pc, #212]	; (8009360 <pvPortMalloc+0x178>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009290:	429a      	cmp	r2, r3
 8009292:	d04f      	beq.n	8009334 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2208      	movs	r2, #8
 800929a:	4413      	add	r3, r2
 800929c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	1ad2      	subs	r2, r2, r3
 80092ae:	2308      	movs	r3, #8
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d91e      	bls.n	80092f4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4413      	add	r3, r2
 80092bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d009      	beq.n	80092dc <pvPortMalloc+0xf4>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	613b      	str	r3, [r7, #16]
}
 80092da:	bf00      	nop

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	1ad2      	subs	r2, r2, r3
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092ee:	69b8      	ldr	r0, [r7, #24]
 80092f0:	f000 f904 	bl	80094fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092f4:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <pvPortMalloc+0x180>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	4a1a      	ldr	r2, [pc, #104]	; (8009368 <pvPortMalloc+0x180>)
 8009300:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009302:	4b19      	ldr	r3, [pc, #100]	; (8009368 <pvPortMalloc+0x180>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <pvPortMalloc+0x188>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d203      	bcs.n	8009316 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800930e:	4b16      	ldr	r3, [pc, #88]	; (8009368 <pvPortMalloc+0x180>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a17      	ldr	r2, [pc, #92]	; (8009370 <pvPortMalloc+0x188>)
 8009314:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	4b12      	ldr	r3, [pc, #72]	; (8009364 <pvPortMalloc+0x17c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	431a      	orrs	r2, r3
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800932a:	4b12      	ldr	r3, [pc, #72]	; (8009374 <pvPortMalloc+0x18c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3301      	adds	r3, #1
 8009330:	4a10      	ldr	r2, [pc, #64]	; (8009374 <pvPortMalloc+0x18c>)
 8009332:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009334:	f7fe ff96 	bl	8008264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f003 0307 	and.w	r3, r3, #7
 800933e:	2b00      	cmp	r3, #0
 8009340:	d009      	beq.n	8009356 <pvPortMalloc+0x16e>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	60fb      	str	r3, [r7, #12]
}
 8009354:	bf00      	nop
	return pvReturn;
 8009356:	69fb      	ldr	r3, [r7, #28]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3728      	adds	r7, #40	; 0x28
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20008ce8 	.word	0x20008ce8
 8009364:	20008cfc 	.word	0x20008cfc
 8009368:	20008cec 	.word	0x20008cec
 800936c:	20008ce0 	.word	0x20008ce0
 8009370:	20008cf0 	.word	0x20008cf0
 8009374:	20008cf4 	.word	0x20008cf4

08009378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d04b      	beq.n	8009422 <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800938a:	2308      	movs	r3, #8
 800938c:	425b      	negs	r3, r3
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	4413      	add	r3, r2
 8009392:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	4b23      	ldr	r3, [pc, #140]	; (800942c <vPortFree+0xb4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4013      	ands	r3, r2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <vPortFree+0x42>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	60fb      	str	r3, [r7, #12]
}
 80093b8:	bf00      	nop
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <vPortFree+0x5e>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	60bb      	str	r3, [r7, #8]
}
 80093d4:	bf00      	nop

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	4b14      	ldr	r3, [pc, #80]	; (800942c <vPortFree+0xb4>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4013      	ands	r3, r2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d01e      	beq.n	8009422 <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d11a      	bne.n	8009422 <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	4b0e      	ldr	r3, [pc, #56]	; (800942c <vPortFree+0xb4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	43db      	mvns	r3, r3
 80093f6:	401a      	ands	r2, r3
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093fc:	f7fe ff24 	bl	8008248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	4b0a      	ldr	r3, [pc, #40]	; (8009430 <vPortFree+0xb8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4413      	add	r3, r2
 800940a:	4a09      	ldr	r2, [pc, #36]	; (8009430 <vPortFree+0xb8>)
 800940c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800940e:	6938      	ldr	r0, [r7, #16]
 8009410:	f000 f874 	bl	80094fc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009414:	4b07      	ldr	r3, [pc, #28]	; (8009434 <vPortFree+0xbc>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	4a06      	ldr	r2, [pc, #24]	; (8009434 <vPortFree+0xbc>)
 800941c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800941e:	f7fe ff21 	bl	8008264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009422:	bf00      	nop
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20008cfc 	.word	0x20008cfc
 8009430:	20008cec 	.word	0x20008cec
 8009434:	20008cf8 	.word	0x20008cf8

08009438 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800943e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009442:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009444:	4b27      	ldr	r3, [pc, #156]	; (80094e4 <prvHeapInit+0xac>)
 8009446:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00c      	beq.n	800946c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3307      	adds	r3, #7
 8009456:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0307 	bic.w	r3, r3, #7
 800945e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	4a1f      	ldr	r2, [pc, #124]	; (80094e4 <prvHeapInit+0xac>)
 8009468:	4413      	add	r3, r2
 800946a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009470:	4a1d      	ldr	r2, [pc, #116]	; (80094e8 <prvHeapInit+0xb0>)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009476:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <prvHeapInit+0xb0>)
 8009478:	2200      	movs	r2, #0
 800947a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009484:	2208      	movs	r2, #8
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0307 	bic.w	r3, r3, #7
 8009492:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4a15      	ldr	r2, [pc, #84]	; (80094ec <prvHeapInit+0xb4>)
 8009498:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800949a:	4b14      	ldr	r3, [pc, #80]	; (80094ec <prvHeapInit+0xb4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2200      	movs	r2, #0
 80094a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094a2:	4b12      	ldr	r3, [pc, #72]	; (80094ec <prvHeapInit+0xb4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2200      	movs	r2, #0
 80094a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094b8:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <prvHeapInit+0xb4>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	4a0a      	ldr	r2, [pc, #40]	; (80094f0 <prvHeapInit+0xb8>)
 80094c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	4a09      	ldr	r2, [pc, #36]	; (80094f4 <prvHeapInit+0xbc>)
 80094ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094d0:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <prvHeapInit+0xc0>)
 80094d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094d6:	601a      	str	r2, [r3, #0]
}
 80094d8:	bf00      	nop
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	200050e0 	.word	0x200050e0
 80094e8:	20008ce0 	.word	0x20008ce0
 80094ec:	20008ce8 	.word	0x20008ce8
 80094f0:	20008cf0 	.word	0x20008cf0
 80094f4:	20008cec 	.word	0x20008cec
 80094f8:	20008cfc 	.word	0x20008cfc

080094fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009504:	4b27      	ldr	r3, [pc, #156]	; (80095a4 <prvInsertBlockIntoFreeList+0xa8>)
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	e002      	b.n	8009510 <prvInsertBlockIntoFreeList+0x14>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	429a      	cmp	r2, r3
 8009518:	d8f7      	bhi.n	800950a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	4413      	add	r3, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d108      	bne.n	800953e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	441a      	add	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	441a      	add	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d118      	bne.n	8009584 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <prvInsertBlockIntoFreeList+0xac>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d00d      	beq.n	800957a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	441a      	add	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e008      	b.n	800958c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800957a:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <prvInsertBlockIntoFreeList+0xac>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	e003      	b.n	800958c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d002      	beq.n	800959a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800959a:	bf00      	nop
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr
 80095a4:	20008ce0 	.word	0x20008ce0
 80095a8:	20008ce8 	.word	0x20008ce8

080095ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80095b6:	f009 fd83 	bl	80130c0 <sys_timeouts_sleeptime>
 80095ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c2:	d10b      	bne.n	80095dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80095c4:	4813      	ldr	r0, [pc, #76]	; (8009614 <tcpip_timeouts_mbox_fetch+0x68>)
 80095c6:	f00e fc92 	bl	8017eee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80095ca:	2200      	movs	r2, #0
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f00e fc04 	bl	8017ddc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80095d4:	480f      	ldr	r0, [pc, #60]	; (8009614 <tcpip_timeouts_mbox_fetch+0x68>)
 80095d6:	f00e fc7b 	bl	8017ed0 <sys_mutex_lock>
    return;
 80095da:	e018      	b.n	800960e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80095e2:	f009 fd33 	bl	801304c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80095e6:	e7e6      	b.n	80095b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80095e8:	480a      	ldr	r0, [pc, #40]	; (8009614 <tcpip_timeouts_mbox_fetch+0x68>)
 80095ea:	f00e fc80 	bl	8017eee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f00e fbf2 	bl	8017ddc <sys_arch_mbox_fetch>
 80095f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80095fa:	4806      	ldr	r0, [pc, #24]	; (8009614 <tcpip_timeouts_mbox_fetch+0x68>)
 80095fc:	f00e fc68 	bl	8017ed0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d102      	bne.n	800960e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009608:	f009 fd20 	bl	801304c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800960c:	e7d3      	b.n	80095b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20008d0c 	.word	0x20008d0c

08009618 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009620:	4810      	ldr	r0, [pc, #64]	; (8009664 <tcpip_thread+0x4c>)
 8009622:	f00e fc55 	bl	8017ed0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009626:	4b10      	ldr	r3, [pc, #64]	; (8009668 <tcpip_thread+0x50>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d005      	beq.n	800963a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800962e:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <tcpip_thread+0x50>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a0e      	ldr	r2, [pc, #56]	; (800966c <tcpip_thread+0x54>)
 8009634:	6812      	ldr	r2, [r2, #0]
 8009636:	4610      	mov	r0, r2
 8009638:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800963a:	f107 030c 	add.w	r3, r7, #12
 800963e:	4619      	mov	r1, r3
 8009640:	480b      	ldr	r0, [pc, #44]	; (8009670 <tcpip_thread+0x58>)
 8009642:	f7ff ffb3 	bl	80095ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <tcpip_thread+0x5c>)
 800964e:	2291      	movs	r2, #145	; 0x91
 8009650:	4909      	ldr	r1, [pc, #36]	; (8009678 <tcpip_thread+0x60>)
 8009652:	480a      	ldr	r0, [pc, #40]	; (800967c <tcpip_thread+0x64>)
 8009654:	f00f f9f6 	bl	8018a44 <iprintf>
      continue;
 8009658:	e003      	b.n	8009662 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f80f 	bl	8009680 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009662:	e7ea      	b.n	800963a <tcpip_thread+0x22>
 8009664:	20008d0c 	.word	0x20008d0c
 8009668:	20008d00 	.word	0x20008d00
 800966c:	20008d04 	.word	0x20008d04
 8009670:	20008d08 	.word	0x20008d08
 8009674:	080196ac 	.word	0x080196ac
 8009678:	080196dc 	.word	0x080196dc
 800967c:	080196fc 	.word	0x080196fc

08009680 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d026      	beq.n	80096de <tcpip_thread_handle_msg+0x5e>
 8009690:	2b02      	cmp	r3, #2
 8009692:	dc2b      	bgt.n	80096ec <tcpip_thread_handle_msg+0x6c>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <tcpip_thread_handle_msg+0x1e>
 8009698:	2b01      	cmp	r3, #1
 800969a:	d015      	beq.n	80096c8 <tcpip_thread_handle_msg+0x48>
 800969c:	e026      	b.n	80096ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	6850      	ldr	r0, [r2, #4]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6892      	ldr	r2, [r2, #8]
 80096aa:	4611      	mov	r1, r2
 80096ac:	4798      	blx	r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f003 f81d 	bl	800c6f8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	2009      	movs	r0, #9
 80096c2:	f002 f9db 	bl	800ba7c <memp_free>
      break;
 80096c6:	e018      	b.n	80096fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6892      	ldr	r2, [r2, #8]
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	2008      	movs	r0, #8
 80096d8:	f002 f9d0 	bl	800ba7c <memp_free>
      break;
 80096dc:	e00d      	b.n	80096fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6892      	ldr	r2, [r2, #8]
 80096e6:	4610      	mov	r0, r2
 80096e8:	4798      	blx	r3
      break;
 80096ea:	e006      	b.n	80096fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80096ec:	4b05      	ldr	r3, [pc, #20]	; (8009704 <tcpip_thread_handle_msg+0x84>)
 80096ee:	22cf      	movs	r2, #207	; 0xcf
 80096f0:	4905      	ldr	r1, [pc, #20]	; (8009708 <tcpip_thread_handle_msg+0x88>)
 80096f2:	4806      	ldr	r0, [pc, #24]	; (800970c <tcpip_thread_handle_msg+0x8c>)
 80096f4:	f00f f9a6 	bl	8018a44 <iprintf>
      break;
 80096f8:	bf00      	nop
  }
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	080196ac 	.word	0x080196ac
 8009708:	080196dc 	.word	0x080196dc
 800970c:	080196fc 	.word	0x080196fc

08009710 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800971c:	481a      	ldr	r0, [pc, #104]	; (8009788 <tcpip_inpkt+0x78>)
 800971e:	f00e fb9c 	bl	8017e5a <sys_mbox_valid>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <tcpip_inpkt+0x24>
 8009728:	4b18      	ldr	r3, [pc, #96]	; (800978c <tcpip_inpkt+0x7c>)
 800972a:	22fc      	movs	r2, #252	; 0xfc
 800972c:	4918      	ldr	r1, [pc, #96]	; (8009790 <tcpip_inpkt+0x80>)
 800972e:	4819      	ldr	r0, [pc, #100]	; (8009794 <tcpip_inpkt+0x84>)
 8009730:	f00f f988 	bl	8018a44 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009734:	2009      	movs	r0, #9
 8009736:	f002 f92b 	bl	800b990 <memp_malloc>
 800973a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d102      	bne.n	8009748 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009742:	f04f 33ff 	mov.w	r3, #4294967295
 8009746:	e01a      	b.n	800977e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009760:	6979      	ldr	r1, [r7, #20]
 8009762:	4809      	ldr	r0, [pc, #36]	; (8009788 <tcpip_inpkt+0x78>)
 8009764:	f00e fb20 	bl	8017da8 <sys_mbox_trypost>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d006      	beq.n	800977c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800976e:	6979      	ldr	r1, [r7, #20]
 8009770:	2009      	movs	r0, #9
 8009772:	f002 f983 	bl	800ba7c <memp_free>
    return ERR_MEM;
 8009776:	f04f 33ff 	mov.w	r3, #4294967295
 800977a:	e000      	b.n	800977e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800977c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20008d08 	.word	0x20008d08
 800978c:	080196ac 	.word	0x080196ac
 8009790:	08019724 	.word	0x08019724
 8009794:	080196fc 	.word	0x080196fc

08009798 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80097a8:	f003 0318 	and.w	r3, r3, #24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d006      	beq.n	80097be <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80097b0:	4a08      	ldr	r2, [pc, #32]	; (80097d4 <tcpip_input+0x3c>)
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff ffab 	bl	8009710 <tcpip_inpkt>
 80097ba:	4603      	mov	r3, r0
 80097bc:	e005      	b.n	80097ca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80097be:	4a06      	ldr	r2, [pc, #24]	; (80097d8 <tcpip_input+0x40>)
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff ffa4 	bl	8009710 <tcpip_inpkt>
 80097c8:	4603      	mov	r3, r0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	08017bb9 	.word	0x08017bb9
 80097d8:	08016a89 	.word	0x08016a89

080097dc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80097e6:	4819      	ldr	r0, [pc, #100]	; (800984c <tcpip_try_callback+0x70>)
 80097e8:	f00e fb37 	bl	8017e5a <sys_mbox_valid>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <tcpip_try_callback+0x24>
 80097f2:	4b17      	ldr	r3, [pc, #92]	; (8009850 <tcpip_try_callback+0x74>)
 80097f4:	f240 125d 	movw	r2, #349	; 0x15d
 80097f8:	4916      	ldr	r1, [pc, #88]	; (8009854 <tcpip_try_callback+0x78>)
 80097fa:	4817      	ldr	r0, [pc, #92]	; (8009858 <tcpip_try_callback+0x7c>)
 80097fc:	f00f f922 	bl	8018a44 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009800:	2008      	movs	r0, #8
 8009802:	f002 f8c5 	bl	800b990 <memp_malloc>
 8009806:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800980e:	f04f 33ff 	mov.w	r3, #4294967295
 8009812:	e017      	b.n	8009844 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2201      	movs	r2, #1
 8009818:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009826:	68f9      	ldr	r1, [r7, #12]
 8009828:	4808      	ldr	r0, [pc, #32]	; (800984c <tcpip_try_callback+0x70>)
 800982a:	f00e fabd 	bl	8017da8 <sys_mbox_trypost>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d006      	beq.n	8009842 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009834:	68f9      	ldr	r1, [r7, #12]
 8009836:	2008      	movs	r0, #8
 8009838:	f002 f920 	bl	800ba7c <memp_free>
    return ERR_MEM;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	e000      	b.n	8009844 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20008d08 	.word	0x20008d08
 8009850:	080196ac 	.word	0x080196ac
 8009854:	08019724 	.word	0x08019724
 8009858:	080196fc 	.word	0x080196fc

0800985c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af02      	add	r7, sp, #8
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009866:	f001 fbca 	bl	800affe <lwip_init>

  tcpip_init_done = initfunc;
 800986a:	4a17      	ldr	r2, [pc, #92]	; (80098c8 <tcpip_init+0x6c>)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009870:	4a16      	ldr	r2, [pc, #88]	; (80098cc <tcpip_init+0x70>)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009876:	2106      	movs	r1, #6
 8009878:	4815      	ldr	r0, [pc, #84]	; (80098d0 <tcpip_init+0x74>)
 800987a:	f00e fa73 	bl	8017d64 <sys_mbox_new>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009884:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <tcpip_init+0x78>)
 8009886:	f240 2261 	movw	r2, #609	; 0x261
 800988a:	4913      	ldr	r1, [pc, #76]	; (80098d8 <tcpip_init+0x7c>)
 800988c:	4813      	ldr	r0, [pc, #76]	; (80098dc <tcpip_init+0x80>)
 800988e:	f00f f8d9 	bl	8018a44 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009892:	4813      	ldr	r0, [pc, #76]	; (80098e0 <tcpip_init+0x84>)
 8009894:	f00e fb00 	bl	8017e98 <sys_mutex_new>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d006      	beq.n	80098ac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800989e:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <tcpip_init+0x78>)
 80098a0:	f240 2265 	movw	r2, #613	; 0x265
 80098a4:	490f      	ldr	r1, [pc, #60]	; (80098e4 <tcpip_init+0x88>)
 80098a6:	480d      	ldr	r0, [pc, #52]	; (80098dc <tcpip_init+0x80>)
 80098a8:	f00f f8cc 	bl	8018a44 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80098ac:	2300      	movs	r3, #0
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b4:	2200      	movs	r2, #0
 80098b6:	490c      	ldr	r1, [pc, #48]	; (80098e8 <tcpip_init+0x8c>)
 80098b8:	480c      	ldr	r0, [pc, #48]	; (80098ec <tcpip_init+0x90>)
 80098ba:	f00e fb25 	bl	8017f08 <sys_thread_new>
}
 80098be:	bf00      	nop
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20008d00 	.word	0x20008d00
 80098cc:	20008d04 	.word	0x20008d04
 80098d0:	20008d08 	.word	0x20008d08
 80098d4:	080196ac 	.word	0x080196ac
 80098d8:	08019734 	.word	0x08019734
 80098dc:	080196fc 	.word	0x080196fc
 80098e0:	20008d0c 	.word	0x20008d0c
 80098e4:	08019758 	.word	0x08019758
 80098e8:	08009619 	.word	0x08009619
 80098ec:	0801977c 	.word	0x0801977c

080098f0 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4413      	add	r3, r2
 8009906:	78fa      	ldrb	r2, [r7, #3]
 8009908:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	3301      	adds	r3, #1
 8009910:	b29a      	uxth	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	2bff      	cmp	r3, #255	; 0xff
 800991c:	d902      	bls.n	8009924 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	801a      	strh	r2, [r3, #0]
  }
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	bc80      	pop	{r7}
 800992c:	4770      	bx	lr

0800992e <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800992e:	b480      	push	{r7}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	461a      	mov	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4413      	add	r3, r2
 8009940:	3304      	adds	r3, #4
}
 8009942:	4618      	mov	r0, r3
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	bc80      	pop	{r7}
 800994a:	4770      	bx	lr

0800994c <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8009958:	887b      	ldrh	r3, [r7, #2]
 800995a:	2bff      	cmp	r3, #255	; 0xff
 800995c:	d905      	bls.n	800996a <mqtt_ringbuf_advance_get_idx+0x1e>
 800995e:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8009960:	22cb      	movs	r2, #203	; 0xcb
 8009962:	490e      	ldr	r1, [pc, #56]	; (800999c <mqtt_ringbuf_advance_get_idx+0x50>)
 8009964:	480e      	ldr	r0, [pc, #56]	; (80099a0 <mqtt_ringbuf_advance_get_idx+0x54>)
 8009966:	f00f f86d 	bl	8018a44 <iprintf>

  rb->get += len;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	885a      	ldrh	r2, [r3, #2]
 800996e:	887b      	ldrh	r3, [r7, #2]
 8009970:	4413      	add	r3, r2
 8009972:	b29a      	uxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	885b      	ldrh	r3, [r3, #2]
 800997c:	2bff      	cmp	r3, #255	; 0xff
 800997e:	d906      	bls.n	800998e <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	885b      	ldrh	r3, [r3, #2]
 8009984:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009988:	b29a      	uxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	805a      	strh	r2, [r3, #2]
  }
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	0801978c 	.word	0x0801978c
 800999c:	080197c4 	.word	0x080197c4
 80099a0:	08019804 	.word	0x08019804

080099a4 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	461a      	mov	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	885b      	ldrh	r3, [r3, #2]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c0:	d303      	bcc.n	80099ca <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80099c8:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	b29b      	uxth	r3, r3
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bc80      	pop	{r7}
 80099d6:	4770      	bx	lr

080099d8 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 80099d8:	b590      	push	{r4, r7, lr}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff ffdc 	bl	80099a4 <mqtt_ringbuf_len>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	885b      	ldrh	r3, [r3, #2]
 80099f4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80099f8:	429a      	cmp	r2, r3
 80099fa:	da04      	bge.n	8009a06 <mqtt_output_send+0x2e>
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff ffd1 	bl	80099a4 <mqtt_ringbuf_len>
 8009a02:	4603      	mov	r3, r0
 8009a04:	e004      	b.n	8009a10 <mqtt_output_send+0x38>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009a18:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d105      	bne.n	8009a2c <mqtt_output_send+0x54>
 8009a20:	4b44      	ldr	r3, [pc, #272]	; (8009b34 <mqtt_output_send+0x15c>)
 8009a22:	22f0      	movs	r2, #240	; 0xf0
 8009a24:	4944      	ldr	r1, [pc, #272]	; (8009b38 <mqtt_output_send+0x160>)
 8009a26:	4845      	ldr	r0, [pc, #276]	; (8009b3c <mqtt_output_send+0x164>)
 8009a28:	f00f f80c 	bl	8018a44 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8009a2c:	89bb      	ldrh	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d07c      	beq.n	8009b2c <mqtt_output_send+0x154>
 8009a32:	897b      	ldrh	r3, [r7, #10]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d079      	beq.n	8009b2c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8009a38:	89ba      	ldrh	r2, [r7, #12]
 8009a3a:	897b      	ldrh	r3, [r7, #10]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d90d      	bls.n	8009a5c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8009a40:	897b      	ldrh	r3, [r7, #10]
 8009a42:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff ffad 	bl	80099a4 <mqtt_ringbuf_len>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	897b      	ldrh	r3, [r7, #10]
 8009a50:	4293      	cmp	r3, r2
 8009a52:	bf34      	ite	cc
 8009a54:	2301      	movcc	r3, #1
 8009a56:	2300      	movcs	r3, #0
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff ff66 	bl	800992e <mqtt_ringbuf_get_ptr>
 8009a62:	4601      	mov	r1, r0
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <mqtt_output_send+0x96>
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e000      	b.n	8009a70 <mqtt_output_send+0x98>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	89ba      	ldrh	r2, [r7, #12]
 8009a72:	6838      	ldr	r0, [r7, #0]
 8009a74:	f007 fc48 	bl	8011308 <tcp_write>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8009a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d146      	bne.n	8009b12 <mqtt_output_send+0x13a>
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d043      	beq.n	8009b12 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8009a8a:	89bb      	ldrh	r3, [r7, #12]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff ff5c 	bl	800994c <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009a9a:	461c      	mov	r4, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff ff81 	bl	80099a4 <mqtt_ringbuf_len>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	da04      	bge.n	8009abc <mqtt_output_send+0xe4>
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff ff76 	bl	80099a4 <mqtt_ringbuf_len>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	e003      	b.n	8009ac4 <mqtt_output_send+0xec>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	885b      	ldrh	r3, [r3, #2]
 8009ac0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	dd03      	ble.n	8009ad0 <mqtt_output_send+0xf8>
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ace:	e014      	b.n	8009afa <mqtt_output_send+0x122>
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff ff67 	bl	80099a4 <mqtt_ringbuf_len>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	461a      	mov	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	da04      	bge.n	8009af0 <mqtt_output_send+0x118>
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff ff5c 	bl	80099a4 <mqtt_ringbuf_len>
 8009aec:	4603      	mov	r3, r0
 8009aee:	e004      	b.n	8009afa <mqtt_output_send+0x122>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	885b      	ldrh	r3, [r3, #2]
 8009af4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff ff16 	bl	800992e <mqtt_ringbuf_get_ptr>
 8009b02:	4601      	mov	r1, r0
 8009b04:	89ba      	ldrh	r2, [r7, #12]
 8009b06:	2301      	movs	r3, #1
 8009b08:	6838      	ldr	r0, [r7, #0]
 8009b0a:	f007 fbfd 	bl	8011308 <tcp_write>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8009b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d109      	bne.n	8009b2e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8009b1a:	89bb      	ldrh	r3, [r7, #12]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff ff14 	bl	800994c <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8009b24:	6838      	ldr	r0, [r7, #0]
 8009b26:	f008 f9d9 	bl	8011edc <tcp_output>
 8009b2a:	e000      	b.n	8009b2e <mqtt_output_send+0x156>
    return;
 8009b2c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd90      	pop	{r4, r7, pc}
 8009b34:	0801978c 	.word	0x0801978c
 8009b38:	0801982c 	.word	0x0801982c
 8009b3c:	08019804 	.word	0x08019804

08009b40 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <mqtt_delete_request+0x14>
    r->next = r;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	601a      	str	r2, [r3, #0]
  }
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bc80      	pop	{r7}
 8009b5c:	4770      	bx	lr
	...

08009b60 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	2300      	movs	r3, #0
 8009b72:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <mqtt_take_request+0x28>
 8009b7a:	4b1f      	ldr	r3, [pc, #124]	; (8009bf8 <mqtt_take_request+0x98>)
 8009b7c:	f240 1267 	movw	r2, #359	; 0x167
 8009b80:	491e      	ldr	r1, [pc, #120]	; (8009bfc <mqtt_take_request+0x9c>)
 8009b82:	481f      	ldr	r0, [pc, #124]	; (8009c00 <mqtt_take_request+0xa0>)
 8009b84:	f00e ff5e 	bl	8018a44 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	e009      	b.n	8009ba4 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	899b      	ldrh	r3, [r3, #12]
 8009b94:	887a      	ldrh	r2, [r7, #2]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d008      	beq.n	8009bac <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f2      	bne.n	8009b90 <mqtt_take_request+0x30>
 8009baa:	e000      	b.n	8009bae <mqtt_take_request+0x4e>
      break;
 8009bac:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01c      	beq.n	8009bee <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d104      	bne.n	8009bc4 <mqtt_take_request+0x64>
      *tail = iter->next;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	e003      	b.n	8009bcc <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d009      	beq.n	8009be8 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	89d9      	ldrh	r1, [r3, #14]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	89da      	ldrh	r2, [r3, #14]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	440a      	add	r2, r1
 8009be4:	b292      	uxth	r2, r2
 8009be6:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8009bee:	68fb      	ldr	r3, [r7, #12]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	0801978c 	.word	0x0801978c
 8009bfc:	080198cc 	.word	0x080198cc
 8009c00:	08019804 	.word	0x08019804

08009c04 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <mqtt_request_time_elapsed+0x20>
 8009c16:	4b21      	ldr	r3, [pc, #132]	; (8009c9c <mqtt_request_time_elapsed+0x98>)
 8009c18:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8009c1c:	4920      	ldr	r1, [pc, #128]	; (8009ca0 <mqtt_request_time_elapsed+0x9c>)
 8009c1e:	4821      	ldr	r0, [pc, #132]	; (8009ca4 <mqtt_request_time_elapsed+0xa0>)
 8009c20:	f00e ff10 	bl	8018a44 <iprintf>
  r = *tail;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8009c2a:	e02c      	b.n	8009c86 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	89db      	ldrh	r3, [r3, #14]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d31c      	bcc.n	8009c72 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	89db      	ldrh	r3, [r3, #14]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d007      	beq.n	8009c64 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	6892      	ldr	r2, [r2, #8]
 8009c5c:	f06f 0102 	mvn.w	r1, #2
 8009c60:	4610      	mov	r0, r2
 8009c62:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7ff ff6b 	bl	8009b40 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e009      	b.n	8009c86 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	89da      	ldrh	r2, [r3, #14]
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	81da      	strh	r2, [r3, #14]
      t = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8009c86:	78fb      	ldrb	r3, [r7, #3]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <mqtt_request_time_elapsed+0x8e>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1cc      	bne.n	8009c2c <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0801978c 	.word	0x0801978c
 8009ca0:	080198ec 	.word	0x080198ec
 8009ca4:	08019804 	.word	0x08019804

08009ca8 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d106      	bne.n	8009cc4 <mqtt_clear_requests+0x1c>
 8009cb6:	4b0e      	ldr	r3, [pc, #56]	; (8009cf0 <mqtt_clear_requests+0x48>)
 8009cb8:	f240 12a7 	movw	r2, #423	; 0x1a7
 8009cbc:	490d      	ldr	r1, [pc, #52]	; (8009cf4 <mqtt_clear_requests+0x4c>)
 8009cbe:	480e      	ldr	r0, [pc, #56]	; (8009cf8 <mqtt_clear_requests+0x50>)
 8009cc0:	f00e fec0 	bl	8018a44 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	e007      	b.n	8009cdc <mqtt_clear_requests+0x34>
    next = iter->next;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff ff34 	bl	8009b40 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f4      	bne.n	8009ccc <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	0801978c 	.word	0x0801978c
 8009cf4:	08019914 	.word	0x08019914
 8009cf8:	08019804 	.word	0x08019804

08009cfc <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d106      	bne.n	8009d1a <mqtt_init_requests+0x1e>
 8009d0c:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <mqtt_init_requests+0x50>)
 8009d0e:	f240 12b7 	movw	r2, #439	; 0x1b7
 8009d12:	490f      	ldr	r1, [pc, #60]	; (8009d50 <mqtt_init_requests+0x54>)
 8009d14:	480f      	ldr	r0, [pc, #60]	; (8009d54 <mqtt_init_requests+0x58>)
 8009d16:	f00e fe95 	bl	8018a44 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
 8009d1e:	e00b      	b.n	8009d38 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	011a      	lsls	r2, r3, #4
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	440b      	add	r3, r1
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	440a      	add	r2, r1
 8009d30:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	3301      	adds	r3, #1
 8009d36:	73fb      	strb	r3, [r7, #15]
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d8ef      	bhi.n	8009d20 <mqtt_init_requests+0x24>
  }
}
 8009d40:	bf00      	nop
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	0801978c 	.word	0x0801978c
 8009d50:	08019938 	.word	0x08019938
 8009d54:	08019804 	.word	0x08019804

08009d58 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff fdc1 	bl	80098f0 <mqtt_ringbuf_put>
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8009d82:	887b      	ldrh	r3, [r7, #2]
 8009d84:	0a1b      	lsrs	r3, r3, #8
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff fdaf 	bl	80098f0 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8009d92:	887b      	ldrh	r3, [r7, #2]
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fda9 	bl	80098f0 <mqtt_ringbuf_put>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	4613      	mov	r3, r2
 8009db2:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8009db4:	88fb      	ldrh	r3, [r7, #6]
 8009db6:	0a1b      	lsrs	r3, r3, #8
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7ff fd96 	bl	80098f0 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8009dc4:	88fb      	ldrh	r3, [r7, #6]
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	4619      	mov	r1, r3
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f7ff fd90 	bl	80098f0 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	82fb      	strh	r3, [r7, #22]
 8009dd4:	e00a      	b.n	8009dec <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8009dd6:	8afb      	ldrh	r3, [r7, #22]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	4413      	add	r3, r2
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	4619      	mov	r1, r3
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f7ff fd85 	bl	80098f0 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8009de6:	8afb      	ldrh	r3, [r7, #22]
 8009de8:	3301      	adds	r3, #1
 8009dea:	82fb      	strh	r3, [r7, #22]
 8009dec:	8afa      	ldrh	r2, [r7, #22]
 8009dee:	88fb      	ldrh	r3, [r7, #6]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d3f0      	bcc.n	8009dd6 <mqtt_output_append_string+0x30>
  }
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	4608      	mov	r0, r1
 8009e08:	4611      	mov	r1, r2
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	70fb      	strb	r3, [r7, #3]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70bb      	strb	r3, [r7, #2]
 8009e14:	4613      	mov	r3, r2
 8009e16:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	b25a      	sxtb	r2, r3
 8009e1e:	78bb      	ldrb	r3, [r7, #2]
 8009e20:	00db      	lsls	r3, r3, #3
 8009e22:	b25b      	sxtb	r3, r3
 8009e24:	f003 0308 	and.w	r3, r3, #8
 8009e28:	b25b      	sxtb	r3, r3
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	b25a      	sxtb	r2, r3
 8009e2e:	787b      	ldrb	r3, [r7, #1]
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	b25b      	sxtb	r3, r3
 8009e34:	f003 0306 	and.w	r3, r3, #6
 8009e38:	b25b      	sxtb	r3, r3
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	b25a      	sxtb	r2, r3
 8009e3e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	b25b      	sxtb	r3, r3
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	b25b      	sxtb	r3, r3
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff ff81 	bl	8009d58 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8009e56:	8abb      	ldrh	r3, [r7, #20]
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5e:	b25b      	sxtb	r3, r3
 8009e60:	8aba      	ldrh	r2, [r7, #20]
 8009e62:	2a7f      	cmp	r2, #127	; 0x7f
 8009e64:	d902      	bls.n	8009e6c <mqtt_output_append_fixed_header+0x6e>
 8009e66:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8009e6a:	e000      	b.n	8009e6e <mqtt_output_append_fixed_header+0x70>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	b25b      	sxtb	r3, r3
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff ff6e 	bl	8009d58 <mqtt_output_append_u8>
    r_length >>= 7;
 8009e7c:	8abb      	ldrh	r3, [r7, #20]
 8009e7e:	09db      	lsrs	r3, r3, #7
 8009e80:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8009e82:	8abb      	ldrh	r3, [r7, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e6      	bne.n	8009e56 <mqtt_output_append_fixed_header+0x58>
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8009e94:	b590      	push	{r4, r7, lr}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8009ea0:	887b      	ldrh	r3, [r7, #2]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <mqtt_output_check_space+0x26>
 8009eac:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <mqtt_output_check_space+0x58>)
 8009eae:	f240 2207 	movw	r2, #519	; 0x207
 8009eb2:	490f      	ldr	r1, [pc, #60]	; (8009ef0 <mqtt_output_check_space+0x5c>)
 8009eb4:	480f      	ldr	r0, [pc, #60]	; (8009ef4 <mqtt_output_check_space+0x60>)
 8009eb6:	f00e fdc5 	bl	8018a44 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8009eba:	89fb      	ldrh	r3, [r7, #14]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8009ec0:	887b      	ldrh	r3, [r7, #2]
 8009ec2:	09db      	lsrs	r3, r3, #7
 8009ec4:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8009ec6:	887b      	ldrh	r3, [r7, #2]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1f6      	bne.n	8009eba <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8009ecc:	89fc      	ldrh	r4, [r7, #14]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff fd68 	bl	80099a4 <mqtt_ringbuf_len>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009eda:	429c      	cmp	r4, r3
 8009edc:	bfd4      	ite	le
 8009ede:	2301      	movle	r3, #1
 8009ee0:	2300      	movgt	r3, #0
 8009ee2:	b2db      	uxtb	r3, r3
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd90      	pop	{r4, r7, pc}
 8009eec:	0801978c 	.word	0x0801978c
 8009ef0:	0801995c 	.word	0x0801995c
 8009ef4:	08019804 	.word	0x08019804

08009ef8 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <mqtt_close+0x20>
 8009f0a:	4b27      	ldr	r3, [pc, #156]	; (8009fa8 <mqtt_close+0xb0>)
 8009f0c:	f240 221b 	movw	r2, #539	; 0x21b
 8009f10:	4926      	ldr	r1, [pc, #152]	; (8009fac <mqtt_close+0xb4>)
 8009f12:	4827      	ldr	r0, [pc, #156]	; (8009fb0 <mqtt_close+0xb8>)
 8009f14:	f00e fd96 	bl	8018a44 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d024      	beq.n	8009f6a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	2100      	movs	r1, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f004 fad6 	bl	800e4d8 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f004 fb14 	bl	800e560 <tcp_err>
    altcp_sent(client->conn, NULL);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f004 faec 	bl	800e51c <tcp_sent>
    res = altcp_close(client->conn);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f003 f8ef 	bl	800d12c <tcp_close>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8009f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d004      	beq.n	8009f64 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f003 f9ce 	bl	800d300 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3318      	adds	r3, #24
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff fe9a 	bl	8009ca8 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8009f74:	6879      	ldr	r1, [r7, #4]
 8009f76:	480f      	ldr	r0, [pc, #60]	; (8009fb4 <mqtt_close+0xbc>)
 8009f78:	f009 f82e 	bl	8012fd8 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	7a9b      	ldrb	r3, [r3, #10]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00d      	beq.n	8009fa0 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d006      	beq.n	8009fa0 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	6911      	ldr	r1, [r2, #16]
 8009f9a:	887a      	ldrh	r2, [r7, #2]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	4798      	blx	r3
    }
  }
}
 8009fa0:	bf00      	nop
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	0801978c 	.word	0x0801978c
 8009fac:	08019980 	.word	0x08019980
 8009fb0:	08019804 	.word	0x08019804
 8009fb4:	08009fb9 	.word	0x08009fb9

08009fb8 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d106      	bne.n	8009fdc <mqtt_cyclic_timer+0x24>
 8009fce:	4b42      	ldr	r3, [pc, #264]	; (800a0d8 <mqtt_cyclic_timer+0x120>)
 8009fd0:	f44f 7211 	mov.w	r2, #580	; 0x244
 8009fd4:	4941      	ldr	r1, [pc, #260]	; (800a0dc <mqtt_cyclic_timer+0x124>)
 8009fd6:	4842      	ldr	r0, [pc, #264]	; (800a0e0 <mqtt_cyclic_timer+0x128>)
 8009fd8:	f00e fd34 	bl	8018a44 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	7a9b      	ldrb	r3, [r3, #10]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d115      	bne.n	800a010 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	2b63      	cmp	r3, #99	; 0x63
 8009ffe:	dd5e      	ble.n	800a0be <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800a000:	f240 1101 	movw	r1, #257	; 0x101
 800a004:	68b8      	ldr	r0, [r7, #8]
 800a006:	f7ff ff77 	bl	8009ef8 <mqtt_close>
      restart_timer = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	73fb      	strb	r3, [r7, #15]
 800a00e:	e056      	b.n	800a0be <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	7a9b      	ldrb	r3, [r3, #10]
 800a014:	2b03      	cmp	r3, #3
 800a016:	d150      	bne.n	800a0ba <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	3318      	adds	r3, #24
 800a01c:	2105      	movs	r1, #5
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff fdf0 	bl	8009c04 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	885b      	ldrh	r3, [r3, #2]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d048      	beq.n	800a0be <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	889b      	ldrh	r3, [r3, #4]
 800a030:	3301      	adds	r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	889b      	ldrh	r3, [r3, #4]
 800a03c:	461a      	mov	r2, r3
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	441a      	add	r2, r3
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	885b      	ldrh	r3, [r3, #2]
 800a048:	4619      	mov	r1, r3
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	885b      	ldrh	r3, [r3, #2]
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	440b      	add	r3, r1
 800a054:	429a      	cmp	r2, r3
 800a056:	dd06      	ble.n	800a066 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800a058:	f240 1101 	movw	r1, #257	; 0x101
 800a05c:	68b8      	ldr	r0, [r7, #8]
 800a05e:	f7ff ff4b 	bl	8009ef8 <mqtt_close>
        restart_timer = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	4613      	mov	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	8852      	ldrh	r2, [r2, #2]
 800a076:	4293      	cmp	r3, r2
 800a078:	db18      	blt.n	800a0ac <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	33ec      	adds	r3, #236	; 0xec
 800a07e:	2100      	movs	r1, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f7ff ff07 	bl	8009e94 <mqtt_output_check_space>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d018      	beq.n	800a0be <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a092:	2300      	movs	r3, #0
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	2300      	movs	r3, #0
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	2300      	movs	r3, #0
 800a09c:	2200      	movs	r2, #0
 800a09e:	210c      	movs	r1, #12
 800a0a0:	f7ff fead 	bl	8009dfe <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	801a      	strh	r2, [r3, #0]
 800a0aa:	e008      	b.n	800a0be <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	801a      	strh	r2, [r3, #0]
 800a0b8:	e001      	b.n	800a0be <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	4907      	ldr	r1, [pc, #28]	; (800a0e4 <mqtt_cyclic_timer+0x12c>)
 800a0c8:	f241 3088 	movw	r0, #5000	; 0x1388
 800a0cc:	f008 ff5e 	bl	8012f8c <sys_timeout>
  }
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	0801978c 	.word	0x0801978c
 800a0dc:	0801999c 	.word	0x0801999c
 800a0e0:	08019804 	.word	0x08019804
 800a0e4:	08009fb9 	.word	0x08009fb9

0800a0e8 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	70fb      	strb	r3, [r7, #3]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	803b      	strh	r3, [r7, #0]
 800a0fe:	4613      	mov	r3, r2
 800a100:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	33ec      	adds	r3, #236	; 0xec
 800a10a:	2102      	movs	r1, #2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fec1 	bl	8009e94 <mqtt_output_check_space>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01c      	beq.n	800a152 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a11e:	78bb      	ldrb	r3, [r7, #2]
 800a120:	78f9      	ldrb	r1, [r7, #3]
 800a122:	2202      	movs	r2, #2
 800a124:	9201      	str	r2, [sp, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	9200      	str	r2, [sp, #0]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f7ff fe67 	bl	8009dfe <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	33ec      	adds	r3, #236	; 0xec
 800a134:	883a      	ldrh	r2, [r7, #0]
 800a136:	4611      	mov	r1, r2
 800a138:	4618      	mov	r0, r3
 800a13a:	f7ff fe1c 	bl	8009d76 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f7ff fc44 	bl	80099d8 <mqtt_output_send>
 800a150:	e001      	b.n	800a156 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800a152:	23ff      	movs	r3, #255	; 0xff
 800a154:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800a156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00c      	beq.n	800a190 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	6890      	ldr	r0, [r2, #8]
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	2a02      	cmp	r2, #2
 800a182:	d801      	bhi.n	800a188 <mqtt_incomming_suback+0x26>
 800a184:	2200      	movs	r2, #0
 800a186:	e001      	b.n	800a18c <mqtt_incomming_suback+0x2a>
 800a188:	f06f 020c 	mvn.w	r2, #12
 800a18c:	4611      	mov	r1, r2
 800a18e:	4798      	blx	r3
  }
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800a198:	b590      	push	{r4, r7, lr}
 800a19a:	b08f      	sub	sp, #60	; 0x3c
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	607b      	str	r3, [r7, #4]
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	72fb      	strb	r3, [r7, #11]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800a1c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a1c8:	091b      	lsrs	r3, r3, #4
 800a1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1d8:	d906      	bls.n	800a1e8 <mqtt_message_received+0x50>
 800a1da:	4b97      	ldr	r3, [pc, #604]	; (800a438 <mqtt_message_received+0x2a0>)
 800a1dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a1e0:	4996      	ldr	r1, [pc, #600]	; (800a43c <mqtt_message_received+0x2a4>)
 800a1e2:	4897      	ldr	r0, [pc, #604]	; (800a440 <mqtt_message_received+0x2a8>)
 800a1e4:	f00e fc2e 	bl	8018a44 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800a1e8:	7afa      	ldrb	r2, [r7, #11]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d906      	bls.n	800a200 <mqtt_message_received+0x68>
 800a1f2:	4b91      	ldr	r3, [pc, #580]	; (800a438 <mqtt_message_received+0x2a0>)
 800a1f4:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800a1f8:	4992      	ldr	r1, [pc, #584]	; (800a444 <mqtt_message_received+0x2ac>)
 800a1fa:	4891      	ldr	r0, [pc, #580]	; (800a440 <mqtt_message_received+0x2a8>)
 800a1fc:	f00e fc22 	bl	8018a44 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800a200:	7afa      	ldrb	r2, [r7, #11]
 800a202:	893b      	ldrh	r3, [r7, #8]
 800a204:	4413      	add	r3, r2
 800a206:	2b80      	cmp	r3, #128	; 0x80
 800a208:	dd09      	ble.n	800a21e <mqtt_message_received+0x86>
 800a20a:	4b8b      	ldr	r3, [pc, #556]	; (800a438 <mqtt_message_received+0x2a0>)
 800a20c:	f240 22ad 	movw	r2, #685	; 0x2ad
 800a210:	498d      	ldr	r1, [pc, #564]	; (800a448 <mqtt_message_received+0x2b0>)
 800a212:	488b      	ldr	r0, [pc, #556]	; (800a440 <mqtt_message_received+0x2a8>)
 800a214:	f00e fc16 	bl	8018a44 <iprintf>
 800a218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a21c:	e16f      	b.n	800a4fe <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800a21e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a222:	2b02      	cmp	r3, #2
 800a224:	d123      	bne.n	800a26e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	7a9b      	ldrb	r3, [r3, #10]
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	f040 8152 	bne.w	800a4d4 <mqtt_message_received+0x33c>
      if (length < 2) {
 800a230:	893b      	ldrh	r3, [r7, #8]
 800a232:	2b01      	cmp	r3, #1
 800a234:	f240 8150 	bls.w	800a4d8 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800a238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23a:	3301      	adds	r3, #1
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800a240:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a242:	2b00      	cmp	r3, #0
 800a244:	f040 8146 	bne.w	800a4d4 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2203      	movs	r2, #3
 800a252:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 813b 	beq.w	800a4d4 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	6911      	ldr	r1, [r2, #16]
 800a266:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	4798      	blx	r3
 800a26c:	e132      	b.n	800a4d4 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800a26e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a272:	2b0d      	cmp	r3, #13
 800a274:	f000 812e 	beq.w	800a4d4 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800a278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	f040 80c0 	bne.w	800a402 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800a286:	893b      	ldrh	r3, [r7, #8]
 800a288:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a290:	105b      	asrs	r3, r3, #1
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f003 0303 	and.w	r3, r3, #3
 800a298:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a29e:	2b80      	cmp	r3, #128	; 0x80
 800a2a0:	d87d      	bhi.n	800a39e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800a2a2:	7ffb      	ldrb	r3, [r7, #31]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <mqtt_message_received+0x114>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e000      	b.n	800a2ae <mqtt_message_received+0x116>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800a2b0:	8bbb      	ldrh	r3, [r7, #28]
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	893b      	ldrh	r3, [r7, #8]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	f280 8110 	bge.w	800a4dc <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800a2c2:	8b7b      	ldrh	r3, [r7, #26]
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800a2d4:	8b7a      	ldrh	r2, [r7, #26]
 800a2d6:	8939      	ldrh	r1, [r7, #8]
 800a2d8:	8bbb      	ldrh	r3, [r7, #28]
 800a2da:	3302      	adds	r3, #2
 800a2dc:	1acb      	subs	r3, r1, r3
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	f300 80fe 	bgt.w	800a4e0 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800a2e4:	8b7a      	ldrh	r2, [r7, #26]
 800a2e6:	8bbb      	ldrh	r3, [r7, #28]
 800a2e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ea:	1acb      	subs	r3, r1, r3
 800a2ec:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	f200 80f6 	bhi.w	800a4e0 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	3302      	adds	r3, #2
 800a2f8:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800a2fa:	8b7b      	ldrh	r3, [r7, #26]
 800a2fc:	3302      	adds	r3, #2
 800a2fe:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800a300:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a302:	7ffa      	ldrb	r2, [r7, #31]
 800a304:	2a00      	cmp	r2, #0
 800a306:	d001      	beq.n	800a30c <mqtt_message_received+0x174>
 800a308:	2202      	movs	r2, #2
 800a30a:	e000      	b.n	800a30e <mqtt_message_received+0x176>
 800a30c:	2201      	movs	r2, #1
 800a30e:	4413      	add	r3, r2
 800a310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a312:	429a      	cmp	r2, r3
 800a314:	f0c0 80e6 	bcc.w	800a4e4 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800a318:	7ffb      	ldrb	r3, [r7, #31]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d01a      	beq.n	800a354 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800a31e:	893a      	ldrh	r2, [r7, #8]
 800a320:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a322:	3302      	adds	r3, #2
 800a324:	429a      	cmp	r2, r3
 800a326:	f0c0 80df 	bcc.w	800a4e8 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800a32a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a32c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a32e:	4413      	add	r3, r2
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b29b      	uxth	r3, r3
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	b29a      	uxth	r2, r3
 800a338:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a33a:	3301      	adds	r3, #1
 800a33c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a33e:	440b      	add	r3, r1
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	b29b      	uxth	r3, r3
 800a344:	4413      	add	r3, r2
 800a346:	b29a      	uxth	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800a34c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a34e:	3302      	adds	r3, #2
 800a350:	863b      	strh	r3, [r7, #48]	; 0x30
 800a352:	e002      	b.n	800a35a <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800a35a:	8b7b      	ldrh	r3, [r7, #26]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	4413      	add	r3, r2
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800a364:	8b7b      	ldrh	r3, [r7, #26]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	4413      	add	r3, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800a36e:	893a      	ldrh	r2, [r7, #8]
 800a370:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800a376:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a378:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d008      	beq.n	800a394 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800a38a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	440a      	add	r2, r1
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800a394:	8b7b      	ldrh	r3, [r7, #26]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	4413      	add	r3, r2
 800a39a:	7cfa      	ldrb	r2, [r7, #19]
 800a39c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800a39e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d103      	bne.n	800a3ac <mqtt_message_received+0x214>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f040 8094 	bne.w	800a4d4 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800a3ac:	893b      	ldrh	r3, [r7, #8]
 800a3ae:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800a3b0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a3b2:	440a      	add	r2, r1
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	f0c0 8099 	bcc.w	800a4ec <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a3c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3c6:	18d1      	adds	r1, r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bf0c      	ite	eq
 800a3ce:	2301      	moveq	r3, #1
 800a3d0:	2300      	movne	r3, #0
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a3d6:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d17a      	bne.n	800a4d4 <mqtt_message_received+0x33c>
 800a3de:	7ffb      	ldrb	r3, [r7, #31]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d077      	beq.n	800a4d4 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800a3e4:	7ffb      	ldrb	r3, [r7, #31]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d101      	bne.n	800a3ee <mqtt_message_received+0x256>
 800a3ea:	2304      	movs	r3, #4
 800a3ec:	e000      	b.n	800a3f0 <mqtt_message_received+0x258>
 800a3ee:	2305      	movs	r3, #5
 800a3f0:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	891a      	ldrh	r2, [r3, #8]
 800a3f6:	7cb9      	ldrb	r1, [r7, #18]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f7ff fe74 	bl	800a0e8 <pub_ack_rec_rel_response>
 800a400:	e068      	b.n	800a4d4 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	b29b      	uxth	r3, r3
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40e:	3301      	adds	r3, #1
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	b29a      	uxth	r2, r3
 800a414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a416:	4313      	orrs	r3, r2
 800a418:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800a41a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d067      	beq.n	800a4f0 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800a420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a424:	2b05      	cmp	r3, #5
 800a426:	d111      	bne.n	800a44c <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800a428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a42a:	2301      	movs	r3, #1
 800a42c:	2106      	movs	r1, #6
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff fe5a 	bl	800a0e8 <pub_ack_rec_rel_response>
 800a434:	e04e      	b.n	800a4d4 <mqtt_message_received+0x33c>
 800a436:	bf00      	nop
 800a438:	0801978c 	.word	0x0801978c
 800a43c:	080199c0 	.word	0x080199c0
 800a440:	08019804 	.word	0x08019804
 800a444:	080199f0 	.word	0x080199f0
 800a448:	08019a14 	.word	0x08019a14

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800a44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a450:	2b06      	cmp	r3, #6
 800a452:	d106      	bne.n	800a462 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800a454:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a456:	2300      	movs	r3, #0
 800a458:	2107      	movs	r1, #7
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f7ff fe44 	bl	800a0e8 <pub_ack_rec_rel_response>
 800a460:	e038      	b.n	800a4d4 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800a462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a466:	2b09      	cmp	r3, #9
 800a468:	d00b      	beq.n	800a482 <mqtt_message_received+0x2ea>
 800a46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a46e:	2b0b      	cmp	r3, #11
 800a470:	d007      	beq.n	800a482 <mqtt_message_received+0x2ea>
 800a472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a476:	2b07      	cmp	r3, #7
 800a478:	d003      	beq.n	800a482 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800a47a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d138      	bne.n	800a4f4 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3318      	adds	r3, #24
 800a486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff fb68 	bl	8009b60 <mqtt_take_request>
 800a490:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01c      	beq.n	800a4d2 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800a498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a49c:	2b09      	cmp	r3, #9
 800a49e:	d10a      	bne.n	800a4b6 <mqtt_message_received+0x31e>
          if (length < 3) {
 800a4a0:	893b      	ldrh	r3, [r7, #8]
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d928      	bls.n	800a4f8 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	3302      	adds	r3, #2
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6a38      	ldr	r0, [r7, #32]
 800a4b0:	f7ff fe57 	bl	800a162 <mqtt_incomming_suback>
 800a4b4:	e00a      	b.n	800a4cc <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d006      	beq.n	800a4cc <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	6a3a      	ldr	r2, [r7, #32]
 800a4c4:	6892      	ldr	r2, [r2, #8]
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800a4cc:	6a38      	ldr	r0, [r7, #32]
 800a4ce:	f7ff fb37 	bl	8009b40 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800a4d2:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800a4d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4d6:	e012      	b.n	800a4fe <mqtt_message_received+0x366>
        goto out_disconnect;
 800a4d8:	bf00      	nop
 800a4da:	e00e      	b.n	800a4fa <mqtt_message_received+0x362>
        goto out_disconnect;
 800a4dc:	bf00      	nop
 800a4de:	e00c      	b.n	800a4fa <mqtt_message_received+0x362>
        goto out_disconnect;
 800a4e0:	bf00      	nop
 800a4e2:	e00a      	b.n	800a4fa <mqtt_message_received+0x362>
        goto out_disconnect;
 800a4e4:	bf00      	nop
 800a4e6:	e008      	b.n	800a4fa <mqtt_message_received+0x362>
          goto out_disconnect;
 800a4e8:	bf00      	nop
 800a4ea:	e006      	b.n	800a4fa <mqtt_message_received+0x362>
        goto out_disconnect;
 800a4ec:	bf00      	nop
 800a4ee:	e004      	b.n	800a4fa <mqtt_message_received+0x362>
      goto out_disconnect;
 800a4f0:	bf00      	nop
 800a4f2:	e002      	b.n	800a4fa <mqtt_message_received+0x362>
      goto out_disconnect;
 800a4f4:	bf00      	nop
 800a4f6:	e000      	b.n	800a4fa <mqtt_message_received+0x362>
            goto out_disconnect;
 800a4f8:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800a4fa:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	373c      	adds	r7, #60	; 0x3c
 800a502:	46bd      	mov	sp, r7
 800a504:	bd90      	pop	{r4, r7, pc}
 800a506:	bf00      	nop

0800a508 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b088      	sub	sp, #32
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800a522:	e0bc      	b.n	800a69e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800a524:	7dfb      	ldrb	r3, [r7, #23]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d903      	bls.n	800a532 <mqtt_parse_incoming+0x2a>
 800a52a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	da4d      	bge.n	800a5ce <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800a532:	7dfa      	ldrb	r2, [r7, #23]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a538:	429a      	cmp	r2, r3
 800a53a:	d206      	bcs.n	800a54a <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a546:	75bb      	strb	r3, [r7, #22]
 800a548:	e012      	b.n	800a570 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800a54a:	8bfb      	ldrh	r3, [r7, #30]
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	83fa      	strh	r2, [r7, #30]
 800a550:	4619      	mov	r1, r3
 800a552:	6838      	ldr	r0, [r7, #0]
 800a554:	f002 fba0 	bl	800cc98 <pbuf_get_at>
 800a558:	4603      	mov	r3, r0
 800a55a:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a560:	1c59      	adds	r1, r3, #1
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6691      	str	r1, [r2, #104]	; 0x68
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	4413      	add	r3, r2
 800a56a:	7dba      	ldrb	r2, [r7, #22]
 800a56c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800a570:	7dfb      	ldrb	r3, [r7, #23]
 800a572:	3301      	adds	r3, #1
 800a574:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	f240 8090 	bls.w	800a69e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800a57e:	7dbb      	ldrb	r3, [r7, #22]
 800a580:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800a584:	7dfb      	ldrb	r3, [r7, #23]
 800a586:	1e9a      	subs	r2, r3, #2
 800a588:	4613      	mov	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	1a9b      	subs	r3, r3, r2
 800a58e:	fa01 f303 	lsl.w	r3, r1, r3
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	4313      	orrs	r3, r2
 800a596:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800a598:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	db7e      	blt.n	800a69e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800a5a6:	7df9      	ldrb	r1, [r7, #23]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff fdf3 	bl	800a198 <mqtt_message_received>
            client->msg_idx = 0;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	75fb      	strb	r3, [r7, #23]
 800a5bc:	e06f      	b.n	800a69e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800a5be:	7dfa      	ldrb	r2, [r7, #23]
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	441a      	add	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800a5cc:	e067      	b.n	800a69e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	7dfa      	ldrb	r2, [r7, #23]
 800a5d8:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800a5dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5e0:	fb01 f202 	mul.w	r2, r1, r2
 800a5e4:	1a9b      	subs	r3, r3, r2
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	891a      	ldrh	r2, [r3, #8]
 800a5f4:	8bfb      	ldrh	r3, [r7, #30]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d905      	bls.n	800a60e <mqtt_parse_incoming+0x106>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	891a      	ldrh	r2, [r3, #8]
 800a606:	8bfb      	ldrh	r3, [r7, #30]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	e001      	b.n	800a612 <mqtt_parse_incoming+0x10a>
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	b29b      	uxth	r3, r3
 800a612:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800a614:	8a7b      	ldrh	r3, [r7, #18]
 800a616:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800a61a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800a61c:	8aba      	ldrh	r2, [r7, #20]
 800a61e:	8a3b      	ldrh	r3, [r7, #16]
 800a620:	429a      	cmp	r2, r3
 800a622:	d901      	bls.n	800a628 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800a624:	8a3b      	ldrh	r3, [r7, #16]
 800a626:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a62e:	8a7b      	ldrh	r3, [r7, #18]
 800a630:	18d1      	adds	r1, r2, r3
 800a632:	8bfb      	ldrh	r3, [r7, #30]
 800a634:	8aba      	ldrh	r2, [r7, #20]
 800a636:	6838      	ldr	r0, [r7, #0]
 800a638:	f002 fa62 	bl	800cb00 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a640:	8abb      	ldrh	r3, [r7, #20]
 800a642:	441a      	add	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800a648:	8bfa      	ldrh	r2, [r7, #30]
 800a64a:	8abb      	ldrh	r3, [r7, #20]
 800a64c:	4413      	add	r3, r2
 800a64e:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800a650:	8abb      	ldrh	r3, [r7, #20]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <mqtt_parse_incoming+0x15e>
 800a65e:	8aba      	ldrh	r2, [r7, #20]
 800a660:	8a3b      	ldrh	r3, [r7, #16]
 800a662:	429a      	cmp	r2, r3
 800a664:	d11b      	bne.n	800a69e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800a666:	8a7a      	ldrh	r2, [r7, #18]
 800a668:	8abb      	ldrh	r3, [r7, #20]
 800a66a:	4413      	add	r3, r2
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	b29b      	uxth	r3, r3
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	b29a      	uxth	r2, r3
 800a676:	7df9      	ldrb	r1, [r7, #23]
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fd8c 	bl	800a198 <mqtt_message_received>
 800a680:	4603      	mov	r3, r0
 800a682:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800a684:	89fb      	ldrh	r3, [r7, #14]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <mqtt_parse_incoming+0x186>
          return res;
 800a68a:	89fb      	ldrh	r3, [r7, #14]
 800a68c:	e00e      	b.n	800a6ac <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	891b      	ldrh	r3, [r3, #8]
 800a6a2:	8bfa      	ldrh	r2, [r7, #30]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	f4ff af3d 	bcc.w	800a524 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3720      	adds	r7, #32
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <mqtt_tcp_recv_cb+0x26>
 800a6cc:	4b24      	ldr	r3, [pc, #144]	; (800a760 <mqtt_tcp_recv_cb+0xac>)
 800a6ce:	f240 32a7 	movw	r2, #935	; 0x3a7
 800a6d2:	4924      	ldr	r1, [pc, #144]	; (800a764 <mqtt_tcp_recv_cb+0xb0>)
 800a6d4:	4824      	ldr	r0, [pc, #144]	; (800a768 <mqtt_tcp_recv_cb+0xb4>)
 800a6d6:	f00e f9b5 	bl	8018a44 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d006      	beq.n	800a6f2 <mqtt_tcp_recv_cb+0x3e>
 800a6e4:	4b1e      	ldr	r3, [pc, #120]	; (800a760 <mqtt_tcp_recv_cb+0xac>)
 800a6e6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a6ea:	4920      	ldr	r1, [pc, #128]	; (800a76c <mqtt_tcp_recv_cb+0xb8>)
 800a6ec:	481e      	ldr	r0, [pc, #120]	; (800a768 <mqtt_tcp_recv_cb+0xb4>)
 800a6ee:	f00e f9a9 	bl	8018a44 <iprintf>

  if (p == NULL) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d105      	bne.n	800a704 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800a6f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6fc:	6978      	ldr	r0, [r7, #20]
 800a6fe:	f7ff fbfb 	bl	8009ef8 <mqtt_close>
 800a702:	e027      	b.n	800a754 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800a704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d005      	beq.n	800a718 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f001 fff3 	bl	800c6f8 <pbuf_free>
      return err;
 800a712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a716:	e01e      	b.n	800a756 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	891b      	ldrh	r3, [r3, #8]
 800a71c:	4619      	mov	r1, r3
 800a71e:	68b8      	ldr	r0, [r7, #8]
 800a720:	f002 feec 	bl	800d4fc <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800a724:	6879      	ldr	r1, [r7, #4]
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	f7ff feee 	bl	800a508 <mqtt_parse_incoming>
 800a72c:	4603      	mov	r3, r0
 800a72e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f001 ffe1 	bl	800c6f8 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800a736:	8a7b      	ldrh	r3, [r7, #18]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d004      	beq.n	800a746 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800a73c:	8a7b      	ldrh	r3, [r7, #18]
 800a73e:	4619      	mov	r1, r3
 800a740:	6978      	ldr	r0, [r7, #20]
 800a742:	f7ff fbd9 	bl	8009ef8 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	885b      	ldrh	r3, [r3, #2]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d002      	beq.n	800a754 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	2200      	movs	r2, #0
 800a752:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	0801978c 	.word	0x0801978c
 800a764:	08019a2c 	.word	0x08019a2c
 800a768:	08019804 	.word	0x08019804
 800a76c:	08019a50 	.word	0x08019a50

0800a770 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	4613      	mov	r3, r2
 800a77c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	7a9b      	ldrb	r3, [r3, #10]
 800a786:	2b03      	cmp	r3, #3
 800a788:	d127      	bne.n	800a7da <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2200      	movs	r2, #0
 800a78e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2200      	movs	r2, #0
 800a794:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800a796:	e00d      	b.n	800a7b4 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	6892      	ldr	r2, [r2, #8]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800a7ae:	6938      	ldr	r0, [r7, #16]
 800a7b0:	f7ff f9c6 	bl	8009b40 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	3318      	adds	r3, #24
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff f9d0 	bl	8009b60 <mqtt_take_request>
 800a7c0:	6138      	str	r0, [r7, #16]
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1e7      	bne.n	800a798 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	f7ff f8ff 	bl	80099d8 <mqtt_output_send>
  }
  return ERR_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d106      	bne.n	800a808 <mqtt_tcp_err_cb+0x24>
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <mqtt_tcp_err_cb+0x3c>)
 800a7fc:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800a800:	4908      	ldr	r1, [pc, #32]	; (800a824 <mqtt_tcp_err_cb+0x40>)
 800a802:	4809      	ldr	r0, [pc, #36]	; (800a828 <mqtt_tcp_err_cb+0x44>)
 800a804:	f00e f91e 	bl	8018a44 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800a80e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f7ff fb70 	bl	8009ef8 <mqtt_close>
}
 800a818:	bf00      	nop
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	0801978c 	.word	0x0801978c
 800a824:	08019a78 	.word	0x08019a78
 800a828:	08019804 	.word	0x08019804

0800a82c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	7a9b      	ldrb	r3, [r3, #10]
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d105      	bne.n	800a84e <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	33ec      	adds	r3, #236	; 0xec
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff f8c5 	bl	80099d8 <mqtt_output_send>
  }
  return ERR_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	4613      	mov	r3, r2
 800a864:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800a86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800a872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a876:	e025      	b.n	800a8c4 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2200      	movs	r2, #0
 800a87c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800a87e:	4913      	ldr	r1, [pc, #76]	; (800a8cc <mqtt_tcp_connect_cb+0x74>)
 800a880:	68b8      	ldr	r0, [r7, #8]
 800a882:	f003 fe29 	bl	800e4d8 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800a886:	4912      	ldr	r1, [pc, #72]	; (800a8d0 <mqtt_tcp_connect_cb+0x78>)
 800a888:	68b8      	ldr	r0, [r7, #8]
 800a88a:	f003 fe47 	bl	800e51c <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800a88e:	2202      	movs	r2, #2
 800a890:	4910      	ldr	r1, [pc, #64]	; (800a8d4 <mqtt_tcp_connect_cb+0x7c>)
 800a892:	68b8      	ldr	r0, [r7, #8]
 800a894:	f003 fe86 	bl	800e5a4 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	2202      	movs	r2, #2
 800a89c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	490d      	ldr	r1, [pc, #52]	; (800a8d8 <mqtt_tcp_connect_cb+0x80>)
 800a8a2:	f241 3088 	movw	r0, #5000	; 0x1388
 800a8a6:	f008 fb71 	bl	8012f8c <sys_timeout>
  client->cyclic_tick = 0;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4610      	mov	r0, r2
 800a8be:	f7ff f88b 	bl	80099d8 <mqtt_output_send>

  return ERR_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	0800a6b5 	.word	0x0800a6b5
 800a8d0:	0800a771 	.word	0x0800a771
 800a8d4:	0800a82d 	.word	0x0800a82d
 800a8d8:	08009fb9 	.word	0x08009fb9

0800a8dc <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800a8e0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800a8e4:	2001      	movs	r0, #1
 800a8e6:	f000 ff8d 	bl	800b804 <mem_calloc>
 800a8ea:	4603      	mov	r3, r0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08c      	sub	sp, #48	; 0x30
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800a900:	230a      	movs	r3, #10
 800a902:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a90a:	2300      	movs	r3, #0
 800a90c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a910:	2300      	movs	r3, #0
 800a912:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	83fb      	strh	r3, [r7, #30]
 800a91a:	2300      	movs	r3, #0
 800a91c:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d106      	bne.n	800a932 <mqtt_client_connect+0x42>
 800a924:	4b9e      	ldr	r3, [pc, #632]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800a926:	f240 520f 	movw	r2, #1295	; 0x50f
 800a92a:	499e      	ldr	r1, [pc, #632]	; (800aba4 <mqtt_client_connect+0x2b4>)
 800a92c:	489e      	ldr	r0, [pc, #632]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800a92e:	f00e f889 	bl	8018a44 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d106      	bne.n	800a946 <mqtt_client_connect+0x56>
 800a938:	4b99      	ldr	r3, [pc, #612]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800a93a:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800a93e:	499b      	ldr	r1, [pc, #620]	; (800abac <mqtt_client_connect+0x2bc>)
 800a940:	4899      	ldr	r0, [pc, #612]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800a942:	f00e f87f 	bl	8018a44 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d106      	bne.n	800a95a <mqtt_client_connect+0x6a>
 800a94c:	4b94      	ldr	r3, [pc, #592]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800a94e:	f240 5211 	movw	r2, #1297	; 0x511
 800a952:	4997      	ldr	r1, [pc, #604]	; (800abb0 <mqtt_client_connect+0x2c0>)
 800a954:	4894      	ldr	r0, [pc, #592]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800a956:	f00e f875 	bl	8018a44 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800a95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d106      	bne.n	800a970 <mqtt_client_connect+0x80>
 800a962:	4b8f      	ldr	r3, [pc, #572]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800a964:	f240 5212 	movw	r2, #1298	; 0x512
 800a968:	4992      	ldr	r1, [pc, #584]	; (800abb4 <mqtt_client_connect+0x2c4>)
 800a96a:	488f      	ldr	r0, [pc, #572]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800a96c:	f00e f86a 	bl	8018a44 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	7a9b      	ldrb	r3, [r3, #10]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800a978:	f06f 0309 	mvn.w	r3, #9
 800a97c:	e21f      	b.n	800adbe <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800a97e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800a982:	2100      	movs	r1, #0
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f00d ff77 	bl	8018878 <memset>
  client->connect_arg = arg;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a98e:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800a996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a998:	899a      	ldrh	r2, [r3, #12]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	331c      	adds	r3, #28
 800a9a2:	2104      	movs	r1, #4
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7ff f9a9 	bl	8009cfc <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800a9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d073      	beq.n	800aa9a <mqtt_client_connect+0x1aa>
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d06f      	beq.n	800aa9a <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800a9ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9be:	f043 0304 	orr.w	r3, r3, #4
 800a9c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	7e1b      	ldrb	r3, [r3, #24]
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f003 0318 	and.w	r3, r3, #24
 800a9d2:	b25a      	sxtb	r2, r3
 800a9d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	b25b      	sxtb	r3, r3
 800a9dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800a9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e2:	7e5b      	ldrb	r3, [r3, #25]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800a9e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9ec:	f043 0320 	orr.w	r3, r3, #32
 800a9f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800a9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7f5 fc39 	bl	8000270 <strlen>
 800a9fe:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	2bff      	cmp	r3, #255	; 0xff
 800aa04:	d909      	bls.n	800aa1a <mqtt_client_connect+0x12a>
 800aa06:	4b66      	ldr	r3, [pc, #408]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800aa08:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800aa0c:	496a      	ldr	r1, [pc, #424]	; (800abb8 <mqtt_client_connect+0x2c8>)
 800aa0e:	4866      	ldr	r0, [pc, #408]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800aa10:	f00e f818 	bl	8018a44 <iprintf>
 800aa14:	f06f 0305 	mvn.w	r3, #5
 800aa18:	e1d1      	b.n	800adbe <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d109      	bne.n	800aa34 <mqtt_client_connect+0x144>
 800aa20:	4b5f      	ldr	r3, [pc, #380]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800aa22:	f240 5229 	movw	r2, #1321	; 0x529
 800aa26:	4965      	ldr	r1, [pc, #404]	; (800abbc <mqtt_client_connect+0x2cc>)
 800aa28:	485f      	ldr	r0, [pc, #380]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800aa2a:	f00e f80b 	bl	8018a44 <iprintf>
 800aa2e:	f06f 0305 	mvn.w	r3, #5
 800aa32:	e1c4      	b.n	800adbe <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7f5 fc16 	bl	8000270 <strlen>
 800aa44:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	2bff      	cmp	r3, #255	; 0xff
 800aa4a:	d909      	bls.n	800aa60 <mqtt_client_connect+0x170>
 800aa4c:	4b54      	ldr	r3, [pc, #336]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800aa4e:	f240 522c 	movw	r2, #1324	; 0x52c
 800aa52:	495b      	ldr	r1, [pc, #364]	; (800abc0 <mqtt_client_connect+0x2d0>)
 800aa54:	4854      	ldr	r0, [pc, #336]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800aa56:	f00d fff5 	bl	8018a44 <iprintf>
 800aa5a:	f06f 0305 	mvn.w	r3, #5
 800aa5e:	e1ae      	b.n	800adbe <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800aa66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa68:	1c9a      	adds	r2, r3, #2
 800aa6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aa6e:	4413      	add	r3, r2
 800aa70:	1c9a      	adds	r2, r3, #2
 800aa72:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800aa76:	4413      	add	r3, r2
 800aa78:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa80:	d309      	bcc.n	800aa96 <mqtt_client_connect+0x1a6>
 800aa82:	4b47      	ldr	r3, [pc, #284]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800aa84:	f240 522f 	movw	r2, #1327	; 0x52f
 800aa88:	494e      	ldr	r1, [pc, #312]	; (800abc4 <mqtt_client_connect+0x2d4>)
 800aa8a:	4847      	ldr	r0, [pc, #284]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800aa8c:	f00d ffda 	bl	8018a44 <iprintf>
 800aa90:	f06f 0305 	mvn.w	r3, #5
 800aa94:	e193      	b.n	800adbe <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d03d      	beq.n	800ab1e <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800aaa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aaaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7f5 fbdc 	bl	8000270 <strlen>
 800aab8:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac0:	d309      	bcc.n	800aad6 <mqtt_client_connect+0x1e6>
 800aac2:	4b37      	ldr	r3, [pc, #220]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800aac4:	f240 5235 	movw	r2, #1333	; 0x535
 800aac8:	493f      	ldr	r1, [pc, #252]	; (800abc8 <mqtt_client_connect+0x2d8>)
 800aaca:	4837      	ldr	r0, [pc, #220]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800aacc:	f00d ffba 	bl	8018a44 <iprintf>
 800aad0:	f06f 0305 	mvn.w	r3, #5
 800aad4:	e173      	b.n	800adbe <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d109      	bne.n	800aaf0 <mqtt_client_connect+0x200>
 800aadc:	4b30      	ldr	r3, [pc, #192]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800aade:	f240 5236 	movw	r2, #1334	; 0x536
 800aae2:	493a      	ldr	r1, [pc, #232]	; (800abcc <mqtt_client_connect+0x2dc>)
 800aae4:	4830      	ldr	r0, [pc, #192]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800aae6:	f00d ffad 	bl	8018a44 <iprintf>
 800aaea:	f06f 0305 	mvn.w	r3, #5
 800aaee:	e166      	b.n	800adbe <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800aaf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaf6:	1c9a      	adds	r2, r3, #2
 800aaf8:	8bfb      	ldrh	r3, [r7, #30]
 800aafa:	4413      	add	r3, r2
 800aafc:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab04:	d309      	bcc.n	800ab1a <mqtt_client_connect+0x22a>
 800ab06:	4b26      	ldr	r3, [pc, #152]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800ab08:	f240 5239 	movw	r2, #1337	; 0x539
 800ab0c:	492d      	ldr	r1, [pc, #180]	; (800abc4 <mqtt_client_connect+0x2d4>)
 800ab0e:	4826      	ldr	r0, [pc, #152]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800ab10:	f00d ff98 	bl	8018a44 <iprintf>
 800ab14:	f06f 0305 	mvn.w	r3, #5
 800ab18:	e151      	b.n	800adbe <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d05a      	beq.n	800abdc <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800ab26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800ab32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7f5 fb9a 	bl	8000270 <strlen>
 800ab3c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab44:	d309      	bcc.n	800ab5a <mqtt_client_connect+0x26a>
 800ab46:	4b16      	ldr	r3, [pc, #88]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800ab48:	f240 523f 	movw	r2, #1343	; 0x53f
 800ab4c:	4920      	ldr	r1, [pc, #128]	; (800abd0 <mqtt_client_connect+0x2e0>)
 800ab4e:	4816      	ldr	r0, [pc, #88]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800ab50:	f00d ff78 	bl	8018a44 <iprintf>
 800ab54:	f06f 0305 	mvn.w	r3, #5
 800ab58:	e131      	b.n	800adbe <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d109      	bne.n	800ab74 <mqtt_client_connect+0x284>
 800ab60:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800ab62:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800ab66:	491b      	ldr	r1, [pc, #108]	; (800abd4 <mqtt_client_connect+0x2e4>)
 800ab68:	480f      	ldr	r0, [pc, #60]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800ab6a:	f00d ff6b 	bl	8018a44 <iprintf>
 800ab6e:	f06f 0305 	mvn.w	r3, #5
 800ab72:	e124      	b.n	800adbe <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800ab78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab7a:	1c9a      	adds	r2, r3, #2
 800ab7c:	8bbb      	ldrh	r3, [r7, #28]
 800ab7e:	4413      	add	r3, r2
 800ab80:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab88:	d326      	bcc.n	800abd8 <mqtt_client_connect+0x2e8>
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <mqtt_client_connect+0x2b0>)
 800ab8c:	f240 5243 	movw	r2, #1347	; 0x543
 800ab90:	490c      	ldr	r1, [pc, #48]	; (800abc4 <mqtt_client_connect+0x2d4>)
 800ab92:	4805      	ldr	r0, [pc, #20]	; (800aba8 <mqtt_client_connect+0x2b8>)
 800ab94:	f00d ff56 	bl	8018a44 <iprintf>
 800ab98:	f06f 0305 	mvn.w	r3, #5
 800ab9c:	e10f      	b.n	800adbe <mqtt_client_connect+0x4ce>
 800ab9e:	bf00      	nop
 800aba0:	0801978c 	.word	0x0801978c
 800aba4:	08019c0c 	.word	0x08019c0c
 800aba8:	08019804 	.word	0x08019804
 800abac:	08019c30 	.word	0x08019c30
 800abb0:	08019c58 	.word	0x08019c58
 800abb4:	08019c84 	.word	0x08019c84
 800abb8:	08019cb8 	.word	0x08019cb8
 800abbc:	08019cf8 	.word	0x08019cf8
 800abc0:	08019d38 	.word	0x08019d38
 800abc4:	08019d74 	.word	0x08019d74
 800abc8:	08019da4 	.word	0x08019da4
 800abcc:	08019de4 	.word	0x08019de4
 800abd0:	08019e28 	.word	0x08019e28
 800abd4:	08019e68 	.word	0x08019e68
    remaining_length = (u16_t)len;
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800abdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abe0:	f043 0302 	orr.w	r3, r3, #2
 800abe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800abe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4618      	mov	r0, r3
 800abee:	f7f5 fb3f 	bl	8000270 <strlen>
 800abf2:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abfa:	d309      	bcc.n	800ac10 <mqtt_client_connect+0x320>
 800abfc:	4b72      	ldr	r3, [pc, #456]	; (800adc8 <mqtt_client_connect+0x4d8>)
 800abfe:	f240 524b 	movw	r2, #1355	; 0x54b
 800ac02:	4972      	ldr	r1, [pc, #456]	; (800adcc <mqtt_client_connect+0x4dc>)
 800ac04:	4872      	ldr	r0, [pc, #456]	; (800add0 <mqtt_client_connect+0x4e0>)
 800ac06:	f00d ff1d 	bl	8018a44 <iprintf>
 800ac0a:	f06f 0305 	mvn.w	r3, #5
 800ac0e:	e0d6      	b.n	800adbe <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800ac14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac16:	1c9a      	adds	r2, r3, #2
 800ac18:	8afb      	ldrh	r3, [r7, #22]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac24:	d309      	bcc.n	800ac3a <mqtt_client_connect+0x34a>
 800ac26:	4b68      	ldr	r3, [pc, #416]	; (800adc8 <mqtt_client_connect+0x4d8>)
 800ac28:	f240 524e 	movw	r2, #1358	; 0x54e
 800ac2c:	4969      	ldr	r1, [pc, #420]	; (800add4 <mqtt_client_connect+0x4e4>)
 800ac2e:	4868      	ldr	r0, [pc, #416]	; (800add0 <mqtt_client_connect+0x4e0>)
 800ac30:	f00d ff08 	bl	8018a44 <iprintf>
 800ac34:	f06f 0305 	mvn.w	r3, #5
 800ac38:	e0c1      	b.n	800adbe <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	33ec      	adds	r3, #236	; 0xec
 800ac42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff f924 	bl	8009e94 <mqtt_output_check_space>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d102      	bne.n	800ac58 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800ac52:	f04f 33ff 	mov.w	r3, #4294967295
 800ac56:	e0b2      	b.n	800adbe <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f003 fc1f 	bl	800e49c <tcp_new_ip_type>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d102      	bne.n	800ac72 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800ac6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac70:	e0a5      	b.n	800adbe <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	68f9      	ldr	r1, [r7, #12]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f003 fc1d 	bl	800e4b8 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	4954      	ldr	r1, [pc, #336]	; (800add8 <mqtt_client_connect+0x4e8>)
 800ac86:	4618      	mov	r0, r3
 800ac88:	f002 fb46 	bl	800d318 <tcp_bind>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800ac92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f040 8084 	bne.w	800ada4 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	68d8      	ldr	r0, [r3, #12]
 800aca0:	88fa      	ldrh	r2, [r7, #6]
 800aca2:	4b4e      	ldr	r3, [pc, #312]	; (800addc <mqtt_client_connect+0x4ec>)
 800aca4:	68b9      	ldr	r1, [r7, #8]
 800aca6:	f002 fcbf 	bl	800d628 <tcp_connect>
 800acaa:	4603      	mov	r3, r0
 800acac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800acb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d177      	bne.n	800ada8 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	4948      	ldr	r1, [pc, #288]	; (800ade0 <mqtt_client_connect+0x4f0>)
 800acbe:	4618      	mov	r0, r3
 800acc0:	f003 fc4e 	bl	800e560 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2201      	movs	r2, #1
 800acc8:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800acd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acd2:	9301      	str	r3, [sp, #4]
 800acd4:	2300      	movs	r3, #0
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	2300      	movs	r3, #0
 800acda:	2200      	movs	r2, #0
 800acdc:	2101      	movs	r1, #1
 800acde:	f7ff f88e 	bl	8009dfe <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	33ec      	adds	r3, #236	; 0xec
 800ace6:	2204      	movs	r2, #4
 800ace8:	493e      	ldr	r1, [pc, #248]	; (800ade4 <mqtt_client_connect+0x4f4>)
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff f85b 	bl	8009da6 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	33ec      	adds	r3, #236	; 0xec
 800acf4:	2104      	movs	r1, #4
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff f82e 	bl	8009d58 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	33ec      	adds	r3, #236	; 0xec
 800ad00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff f826 	bl	8009d58 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ad12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad14:	899b      	ldrh	r3, [r3, #12]
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f7ff f82c 	bl	8009d76 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ad24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	8afa      	ldrh	r2, [r7, #22]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	f7ff f83b 	bl	8009da6 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800ad30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad34:	f003 0304 	and.w	r3, r3, #4
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d015      	beq.n	800ad68 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad4a:	b292      	uxth	r2, r2
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f7ff f82a 	bl	8009da6 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ad58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5a:	695b      	ldr	r3, [r3, #20]
 800ad5c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ad60:	b292      	uxth	r2, r2
 800ad62:	4619      	mov	r1, r3
 800ad64:	f7ff f81f 	bl	8009da6 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800ad68:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da08      	bge.n	800ad82 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ad76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	8bfa      	ldrh	r2, [r7, #30]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	f7ff f812 	bl	8009da6 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800ad82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d008      	beq.n	800ada0 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	8bba      	ldrh	r2, [r7, #28]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	f7ff f803 	bl	8009da6 <mqtt_output_append_string>
  }
  return ERR_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	e00c      	b.n	800adbe <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800ada4:	bf00      	nop
 800ada6:	e000      	b.n	800adaa <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800ada8:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 faa6 	bl	800d300 <tcp_abort>
  client->conn = NULL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	60da      	str	r2, [r3, #12]
  return err;
 800adba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3728      	adds	r7, #40	; 0x28
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	0801978c 	.word	0x0801978c
 800adcc:	08019eac 	.word	0x08019eac
 800add0:	08019804 	.word	0x08019804
 800add4:	08019d74 	.word	0x08019d74
 800add8:	0801cdd4 	.word	0x0801cdd4
 800addc:	0800a859 	.word	0x0800a859
 800ade0:	0800a7e5 	.word	0x0800a7e5
 800ade4:	08019ee8 	.word	0x08019ee8

0800ade8 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <mqtt_disconnect+0x1c>
 800adf6:	4b0b      	ldr	r3, [pc, #44]	; (800ae24 <mqtt_disconnect+0x3c>)
 800adf8:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800adfc:	490a      	ldr	r1, [pc, #40]	; (800ae28 <mqtt_disconnect+0x40>)
 800adfe:	480b      	ldr	r0, [pc, #44]	; (800ae2c <mqtt_disconnect+0x44>)
 800ae00:	f00d fe20 	bl	8018a44 <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	7a9b      	ldrb	r3, [r3, #10]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d006      	beq.n	800ae1a <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 800ae12:	2100      	movs	r1, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff f86f 	bl	8009ef8 <mqtt_close>
  }
}
 800ae1a:	bf00      	nop
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	0801978c 	.word	0x0801978c
 800ae28:	08019ef0 	.word	0x08019ef0
 800ae2c:	08019804 	.word	0x08019804

0800ae30 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ae3a:	88fb      	ldrh	r3, [r7, #6]
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	b21a      	sxth	r2, r3
 800ae40:	88fb      	ldrh	r3, [r7, #6]
 800ae42:	0a1b      	lsrs	r3, r3, #8
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	b21b      	sxth	r3, r3
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	b21b      	sxth	r3, r3
 800ae4c:	b29b      	uxth	r3, r3
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	370c      	adds	r7, #12
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bc80      	pop	{r7}
 800ae56:	4770      	bx	lr

0800ae58 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	061a      	lsls	r2, r3, #24
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	0a1b      	lsrs	r3, r3, #8
 800ae72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	0e1b      	lsrs	r3, r3, #24
 800ae7c:	4313      	orrs	r3, r2
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bc80      	pop	{r7}
 800ae86:	4770      	bx	lr

0800ae88 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b089      	sub	sp, #36	; 0x24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00d      	beq.n	800aec8 <lwip_standard_chksum+0x40>
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	dd0a      	ble.n	800aec8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800aeb2:	69fa      	ldr	r2, [r7, #28]
 800aeb4:	1c53      	adds	r3, r2, #1
 800aeb6:	61fb      	str	r3, [r7, #28]
 800aeb8:	f107 030e 	add.w	r3, r7, #14
 800aebc:	3301      	adds	r3, #1
 800aebe:	7812      	ldrb	r2, [r2, #0]
 800aec0:	701a      	strb	r2, [r3, #0]
    len--;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800aecc:	e00a      	b.n	800aee4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	1c9a      	adds	r2, r3, #2
 800aed2:	61ba      	str	r2, [r7, #24]
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	4413      	add	r3, r2
 800aedc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	3b02      	subs	r3, #2
 800aee2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	dcf1      	bgt.n	800aece <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	dd04      	ble.n	800aefa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800aef0:	f107 030e 	add.w	r3, r7, #14
 800aef4:	69ba      	ldr	r2, [r7, #24]
 800aef6:	7812      	ldrb	r2, [r2, #0]
 800aef8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800aefa:	89fb      	ldrh	r3, [r7, #14]
 800aefc:	461a      	mov	r2, r3
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	4413      	add	r3, r2
 800af02:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	0c1a      	lsrs	r2, r3, #16
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	4413      	add	r3, r2
 800af0e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	0c1a      	lsrs	r2, r3, #16
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	b29b      	uxth	r3, r3
 800af18:	4413      	add	r3, r2
 800af1a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d007      	beq.n	800af32 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	021b      	lsls	r3, r3, #8
 800af26:	b29a      	uxth	r2, r3
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	0a1b      	lsrs	r3, r3, #8
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	4313      	orrs	r3, r2
 800af30:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	b29b      	uxth	r3, r3
}
 800af36:	4618      	mov	r0, r3
 800af38:	3724      	adds	r7, #36	; 0x24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bc80      	pop	{r7}
 800af3e:	4770      	bx	lr

0800af40 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800af4c:	887b      	ldrh	r3, [r7, #2]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff ff99 	bl	800ae88 <lwip_standard_chksum>
 800af56:	4603      	mov	r3, r0
 800af58:	43db      	mvns	r3, r3
 800af5a:	b29b      	uxth	r3, r3
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800af6c:	2300      	movs	r3, #0
 800af6e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	613b      	str	r3, [r7, #16]
 800af78:	e02b      	b.n	800afd2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	895b      	ldrh	r3, [r3, #10]
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f7ff ff7f 	bl	800ae88 <lwip_standard_chksum>
 800af8a:	4603      	mov	r3, r0
 800af8c:	461a      	mov	r2, r3
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	4413      	add	r3, r2
 800af92:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	0c1a      	lsrs	r2, r3, #16
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	4413      	add	r3, r2
 800af9e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	895b      	ldrh	r3, [r3, #10]
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00e      	beq.n	800afcc <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bf0c      	ite	eq
 800afb4:	2301      	moveq	r3, #1
 800afb6:	2300      	movne	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	0a1b      	lsrs	r3, r3, #8
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	4313      	orrs	r3, r2
 800afca:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	613b      	str	r3, [r7, #16]
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1d0      	bne.n	800af7a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d007      	beq.n	800afee <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	021b      	lsls	r3, r3, #8
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	0a1b      	lsrs	r3, r3, #8
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	4313      	orrs	r3, r2
 800afec:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	43db      	mvns	r3, r3
 800aff4:	b29b      	uxth	r3, r3
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b008:	f00c ff38 	bl	8017e7c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b00c:	f000 f8d0 	bl	800b1b0 <mem_init>
  memp_init();
 800b010:	f000 fc50 	bl	800b8b4 <memp_init>
  pbuf_init();
  netif_init();
 800b014:	f000 fd5c 	bl	800bad0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b018:	f008 f88a 	bl	8013130 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b01c:	f001 fe76 	bl	800cd0c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b020:	f007 ff92 	bl	8012f48 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b036:	4b04      	ldr	r3, [pc, #16]	; (800b048 <ptr_to_mem+0x1c>)
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	88fb      	ldrh	r3, [r7, #6]
 800b03c:	4413      	add	r3, r2
}
 800b03e:	4618      	mov	r0, r3
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	bc80      	pop	{r7}
 800b046:	4770      	bx	lr
 800b048:	20008d28 	.word	0x20008d28

0800b04c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b054:	4b04      	ldr	r3, [pc, #16]	; (800b068 <mem_to_ptr+0x1c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	b29b      	uxth	r3, r3
}
 800b05e:	4618      	mov	r0, r3
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	bc80      	pop	{r7}
 800b066:	4770      	bx	lr
 800b068:	20008d28 	.word	0x20008d28

0800b06c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b06c:	b590      	push	{r4, r7, lr}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b074:	4b45      	ldr	r3, [pc, #276]	; (800b18c <plug_holes+0x120>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d206      	bcs.n	800b08c <plug_holes+0x20>
 800b07e:	4b44      	ldr	r3, [pc, #272]	; (800b190 <plug_holes+0x124>)
 800b080:	f240 12df 	movw	r2, #479	; 0x1df
 800b084:	4943      	ldr	r1, [pc, #268]	; (800b194 <plug_holes+0x128>)
 800b086:	4844      	ldr	r0, [pc, #272]	; (800b198 <plug_holes+0x12c>)
 800b088:	f00d fcdc 	bl	8018a44 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b08c:	4b43      	ldr	r3, [pc, #268]	; (800b19c <plug_holes+0x130>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	429a      	cmp	r2, r3
 800b094:	d306      	bcc.n	800b0a4 <plug_holes+0x38>
 800b096:	4b3e      	ldr	r3, [pc, #248]	; (800b190 <plug_holes+0x124>)
 800b098:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b09c:	4940      	ldr	r1, [pc, #256]	; (800b1a0 <plug_holes+0x134>)
 800b09e:	483e      	ldr	r0, [pc, #248]	; (800b198 <plug_holes+0x12c>)
 800b0a0:	f00d fcd0 	bl	8018a44 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	791b      	ldrb	r3, [r3, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d006      	beq.n	800b0ba <plug_holes+0x4e>
 800b0ac:	4b38      	ldr	r3, [pc, #224]	; (800b190 <plug_holes+0x124>)
 800b0ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b0b2:	493c      	ldr	r1, [pc, #240]	; (800b1a4 <plug_holes+0x138>)
 800b0b4:	4838      	ldr	r0, [pc, #224]	; (800b198 <plug_holes+0x12c>)
 800b0b6:	f00d fcc5 	bl	8018a44 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0c2:	d906      	bls.n	800b0d2 <plug_holes+0x66>
 800b0c4:	4b32      	ldr	r3, [pc, #200]	; (800b190 <plug_holes+0x124>)
 800b0c6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b0ca:	4937      	ldr	r1, [pc, #220]	; (800b1a8 <plug_holes+0x13c>)
 800b0cc:	4832      	ldr	r0, [pc, #200]	; (800b198 <plug_holes+0x12c>)
 800b0ce:	f00d fcb9 	bl	8018a44 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff ffa8 	bl	800b02c <ptr_to_mem>
 800b0dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d024      	beq.n	800b130 <plug_holes+0xc4>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	791b      	ldrb	r3, [r3, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d120      	bne.n	800b130 <plug_holes+0xc4>
 800b0ee:	4b2b      	ldr	r3, [pc, #172]	; (800b19c <plug_holes+0x130>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d01b      	beq.n	800b130 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b0f8:	4b2c      	ldr	r3, [pc, #176]	; (800b1ac <plug_holes+0x140>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d102      	bne.n	800b108 <plug_holes+0x9c>
      lfree = mem;
 800b102:	4a2a      	ldr	r2, [pc, #168]	; (800b1ac <plug_holes+0x140>)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	881a      	ldrh	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b118:	d00a      	beq.n	800b130 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff ff84 	bl	800b02c <ptr_to_mem>
 800b124:	4604      	mov	r4, r0
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff ff90 	bl	800b04c <mem_to_ptr>
 800b12c:	4603      	mov	r3, r0
 800b12e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	885b      	ldrh	r3, [r3, #2]
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff ff79 	bl	800b02c <ptr_to_mem>
 800b13a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	429a      	cmp	r2, r3
 800b142:	d01f      	beq.n	800b184 <plug_holes+0x118>
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	791b      	ldrb	r3, [r3, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d11b      	bne.n	800b184 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b14c:	4b17      	ldr	r3, [pc, #92]	; (800b1ac <plug_holes+0x140>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	429a      	cmp	r2, r3
 800b154:	d102      	bne.n	800b15c <plug_holes+0xf0>
      lfree = pmem;
 800b156:	4a15      	ldr	r2, [pc, #84]	; (800b1ac <plug_holes+0x140>)
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	881a      	ldrh	r2, [r3, #0]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b16c:	d00a      	beq.n	800b184 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff ff5a 	bl	800b02c <ptr_to_mem>
 800b178:	4604      	mov	r4, r0
 800b17a:	68b8      	ldr	r0, [r7, #8]
 800b17c:	f7ff ff66 	bl	800b04c <mem_to_ptr>
 800b180:	4603      	mov	r3, r0
 800b182:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b184:	bf00      	nop
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd90      	pop	{r4, r7, pc}
 800b18c:	20008d28 	.word	0x20008d28
 800b190:	08019f3c 	.word	0x08019f3c
 800b194:	08019f6c 	.word	0x08019f6c
 800b198:	08019f84 	.word	0x08019f84
 800b19c:	20008d2c 	.word	0x20008d2c
 800b1a0:	08019fac 	.word	0x08019fac
 800b1a4:	08019fc8 	.word	0x08019fc8
 800b1a8:	08019fe4 	.word	0x08019fe4
 800b1ac:	20008d34 	.word	0x20008d34

0800b1b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b1b6:	4b1d      	ldr	r3, [pc, #116]	; (800b22c <mem_init+0x7c>)
 800b1b8:	4a1d      	ldr	r2, [pc, #116]	; (800b230 <mem_init+0x80>)
 800b1ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b1bc:	4b1b      	ldr	r3, [pc, #108]	; (800b22c <mem_init+0x7c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b1d6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b1da:	f7ff ff27 	bl	800b02c <ptr_to_mem>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4a14      	ldr	r2, [pc, #80]	; (800b234 <mem_init+0x84>)
 800b1e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b1e4:	4b13      	ldr	r3, [pc, #76]	; (800b234 <mem_init+0x84>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b1ec:	4b11      	ldr	r3, [pc, #68]	; (800b234 <mem_init+0x84>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b1f6:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <mem_init+0x84>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <mem_init+0x7c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a0c      	ldr	r2, [pc, #48]	; (800b238 <mem_init+0x88>)
 800b206:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b208:	480c      	ldr	r0, [pc, #48]	; (800b23c <mem_init+0x8c>)
 800b20a:	f00c fe45 	bl	8017e98 <sys_mutex_new>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d006      	beq.n	800b222 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b214:	4b0a      	ldr	r3, [pc, #40]	; (800b240 <mem_init+0x90>)
 800b216:	f240 221f 	movw	r2, #543	; 0x21f
 800b21a:	490a      	ldr	r1, [pc, #40]	; (800b244 <mem_init+0x94>)
 800b21c:	480a      	ldr	r0, [pc, #40]	; (800b248 <mem_init+0x98>)
 800b21e:	f00d fc11 	bl	8018a44 <iprintf>
  }
}
 800b222:	bf00      	nop
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20008d28 	.word	0x20008d28
 800b230:	30044000 	.word	0x30044000
 800b234:	20008d2c 	.word	0x20008d2c
 800b238:	20008d34 	.word	0x20008d34
 800b23c:	20008d30 	.word	0x20008d30
 800b240:	08019f3c 	.word	0x08019f3c
 800b244:	0801a010 	.word	0x0801a010
 800b248:	08019f84 	.word	0x08019f84

0800b24c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff fef9 	bl	800b04c <mem_to_ptr>
 800b25a:	4603      	mov	r3, r0
 800b25c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff fee2 	bl	800b02c <ptr_to_mem>
 800b268:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	885b      	ldrh	r3, [r3, #2]
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fedc 	bl	800b02c <ptr_to_mem>
 800b274:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b27e:	d818      	bhi.n	800b2b2 <mem_link_valid+0x66>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	885b      	ldrh	r3, [r3, #2]
 800b284:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b288:	d813      	bhi.n	800b2b2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b28e:	8afa      	ldrh	r2, [r7, #22]
 800b290:	429a      	cmp	r2, r3
 800b292:	d004      	beq.n	800b29e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	8afa      	ldrh	r2, [r7, #22]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d109      	bne.n	800b2b2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b29e:	4b08      	ldr	r3, [pc, #32]	; (800b2c0 <mem_link_valid+0x74>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d006      	beq.n	800b2b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	885b      	ldrh	r3, [r3, #2]
 800b2ac:	8afa      	ldrh	r2, [r7, #22]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d001      	beq.n	800b2b6 <mem_link_valid+0x6a>
    return 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e000      	b.n	800b2b8 <mem_link_valid+0x6c>
  }
  return 1;
 800b2b6:	2301      	movs	r3, #1
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	20008d2c 	.word	0x20008d2c

0800b2c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d070      	beq.n	800b3b4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00d      	beq.n	800b2f8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b2dc:	4b37      	ldr	r3, [pc, #220]	; (800b3bc <mem_free+0xf8>)
 800b2de:	f240 2273 	movw	r2, #627	; 0x273
 800b2e2:	4937      	ldr	r1, [pc, #220]	; (800b3c0 <mem_free+0xfc>)
 800b2e4:	4837      	ldr	r0, [pc, #220]	; (800b3c4 <mem_free+0x100>)
 800b2e6:	f00d fbad 	bl	8018a44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2ea:	f00c fe33 	bl	8017f54 <sys_arch_protect>
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f00c fe3d 	bl	8017f70 <sys_arch_unprotect>
    return;
 800b2f6:	e05e      	b.n	800b3b6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3b08      	subs	r3, #8
 800b2fc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b2fe:	4b32      	ldr	r3, [pc, #200]	; (800b3c8 <mem_free+0x104>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	69fa      	ldr	r2, [r7, #28]
 800b304:	429a      	cmp	r2, r3
 800b306:	d306      	bcc.n	800b316 <mem_free+0x52>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f103 020c 	add.w	r2, r3, #12
 800b30e:	4b2f      	ldr	r3, [pc, #188]	; (800b3cc <mem_free+0x108>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	d90d      	bls.n	800b332 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b316:	4b29      	ldr	r3, [pc, #164]	; (800b3bc <mem_free+0xf8>)
 800b318:	f240 227f 	movw	r2, #639	; 0x27f
 800b31c:	492c      	ldr	r1, [pc, #176]	; (800b3d0 <mem_free+0x10c>)
 800b31e:	4829      	ldr	r0, [pc, #164]	; (800b3c4 <mem_free+0x100>)
 800b320:	f00d fb90 	bl	8018a44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b324:	f00c fe16 	bl	8017f54 <sys_arch_protect>
 800b328:	6138      	str	r0, [r7, #16]
 800b32a:	6938      	ldr	r0, [r7, #16]
 800b32c:	f00c fe20 	bl	8017f70 <sys_arch_unprotect>
    return;
 800b330:	e041      	b.n	800b3b6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b332:	4828      	ldr	r0, [pc, #160]	; (800b3d4 <mem_free+0x110>)
 800b334:	f00c fdcc 	bl	8017ed0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	791b      	ldrb	r3, [r3, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d110      	bne.n	800b362 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b340:	4b1e      	ldr	r3, [pc, #120]	; (800b3bc <mem_free+0xf8>)
 800b342:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b346:	4924      	ldr	r1, [pc, #144]	; (800b3d8 <mem_free+0x114>)
 800b348:	481e      	ldr	r0, [pc, #120]	; (800b3c4 <mem_free+0x100>)
 800b34a:	f00d fb7b 	bl	8018a44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b34e:	4821      	ldr	r0, [pc, #132]	; (800b3d4 <mem_free+0x110>)
 800b350:	f00c fdcd 	bl	8017eee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b354:	f00c fdfe 	bl	8017f54 <sys_arch_protect>
 800b358:	6178      	str	r0, [r7, #20]
 800b35a:	6978      	ldr	r0, [r7, #20]
 800b35c:	f00c fe08 	bl	8017f70 <sys_arch_unprotect>
    return;
 800b360:	e029      	b.n	800b3b6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b362:	69f8      	ldr	r0, [r7, #28]
 800b364:	f7ff ff72 	bl	800b24c <mem_link_valid>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d110      	bne.n	800b390 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b36e:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <mem_free+0xf8>)
 800b370:	f240 2295 	movw	r2, #661	; 0x295
 800b374:	4919      	ldr	r1, [pc, #100]	; (800b3dc <mem_free+0x118>)
 800b376:	4813      	ldr	r0, [pc, #76]	; (800b3c4 <mem_free+0x100>)
 800b378:	f00d fb64 	bl	8018a44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b37c:	4815      	ldr	r0, [pc, #84]	; (800b3d4 <mem_free+0x110>)
 800b37e:	f00c fdb6 	bl	8017eee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b382:	f00c fde7 	bl	8017f54 <sys_arch_protect>
 800b386:	61b8      	str	r0, [r7, #24]
 800b388:	69b8      	ldr	r0, [r7, #24]
 800b38a:	f00c fdf1 	bl	8017f70 <sys_arch_unprotect>
    return;
 800b38e:	e012      	b.n	800b3b6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2200      	movs	r2, #0
 800b394:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b396:	4b12      	ldr	r3, [pc, #72]	; (800b3e0 <mem_free+0x11c>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d202      	bcs.n	800b3a6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b3a0:	4a0f      	ldr	r2, [pc, #60]	; (800b3e0 <mem_free+0x11c>)
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b3a6:	69f8      	ldr	r0, [r7, #28]
 800b3a8:	f7ff fe60 	bl	800b06c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b3ac:	4809      	ldr	r0, [pc, #36]	; (800b3d4 <mem_free+0x110>)
 800b3ae:	f00c fd9e 	bl	8017eee <sys_mutex_unlock>
 800b3b2:	e000      	b.n	800b3b6 <mem_free+0xf2>
    return;
 800b3b4:	bf00      	nop
}
 800b3b6:	3720      	adds	r7, #32
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	08019f3c 	.word	0x08019f3c
 800b3c0:	0801a02c 	.word	0x0801a02c
 800b3c4:	08019f84 	.word	0x08019f84
 800b3c8:	20008d28 	.word	0x20008d28
 800b3cc:	20008d2c 	.word	0x20008d2c
 800b3d0:	0801a050 	.word	0x0801a050
 800b3d4:	20008d30 	.word	0x20008d30
 800b3d8:	0801a06c 	.word	0x0801a06c
 800b3dc:	0801a094 	.word	0x0801a094
 800b3e0:	20008d34 	.word	0x20008d34

0800b3e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b088      	sub	sp, #32
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b3f0:	887b      	ldrh	r3, [r7, #2]
 800b3f2:	3303      	adds	r3, #3
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	f023 0303 	bic.w	r3, r3, #3
 800b3fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b3fc:	8bfb      	ldrh	r3, [r7, #30]
 800b3fe:	2b0b      	cmp	r3, #11
 800b400:	d801      	bhi.n	800b406 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b402:	230c      	movs	r3, #12
 800b404:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b406:	8bfb      	ldrh	r3, [r7, #30]
 800b408:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b40c:	d803      	bhi.n	800b416 <mem_trim+0x32>
 800b40e:	8bfa      	ldrh	r2, [r7, #30]
 800b410:	887b      	ldrh	r3, [r7, #2]
 800b412:	429a      	cmp	r2, r3
 800b414:	d201      	bcs.n	800b41a <mem_trim+0x36>
    return NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	e0d8      	b.n	800b5cc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b41a:	4b6e      	ldr	r3, [pc, #440]	; (800b5d4 <mem_trim+0x1f0>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	429a      	cmp	r2, r3
 800b422:	d304      	bcc.n	800b42e <mem_trim+0x4a>
 800b424:	4b6c      	ldr	r3, [pc, #432]	; (800b5d8 <mem_trim+0x1f4>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d306      	bcc.n	800b43c <mem_trim+0x58>
 800b42e:	4b6b      	ldr	r3, [pc, #428]	; (800b5dc <mem_trim+0x1f8>)
 800b430:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b434:	496a      	ldr	r1, [pc, #424]	; (800b5e0 <mem_trim+0x1fc>)
 800b436:	486b      	ldr	r0, [pc, #428]	; (800b5e4 <mem_trim+0x200>)
 800b438:	f00d fb04 	bl	8018a44 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b43c:	4b65      	ldr	r3, [pc, #404]	; (800b5d4 <mem_trim+0x1f0>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	429a      	cmp	r2, r3
 800b444:	d304      	bcc.n	800b450 <mem_trim+0x6c>
 800b446:	4b64      	ldr	r3, [pc, #400]	; (800b5d8 <mem_trim+0x1f4>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d307      	bcc.n	800b460 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b450:	f00c fd80 	bl	8017f54 <sys_arch_protect>
 800b454:	60b8      	str	r0, [r7, #8]
 800b456:	68b8      	ldr	r0, [r7, #8]
 800b458:	f00c fd8a 	bl	8017f70 <sys_arch_unprotect>
    return rmem;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	e0b5      	b.n	800b5cc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3b08      	subs	r3, #8
 800b464:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b466:	69b8      	ldr	r0, [r7, #24]
 800b468:	f7ff fdf0 	bl	800b04c <mem_to_ptr>
 800b46c:	4603      	mov	r3, r0
 800b46e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	881a      	ldrh	r2, [r3, #0]
 800b474:	8afb      	ldrh	r3, [r7, #22]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	b29b      	uxth	r3, r3
 800b47a:	3b08      	subs	r3, #8
 800b47c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b47e:	8bfa      	ldrh	r2, [r7, #30]
 800b480:	8abb      	ldrh	r3, [r7, #20]
 800b482:	429a      	cmp	r2, r3
 800b484:	d906      	bls.n	800b494 <mem_trim+0xb0>
 800b486:	4b55      	ldr	r3, [pc, #340]	; (800b5dc <mem_trim+0x1f8>)
 800b488:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b48c:	4956      	ldr	r1, [pc, #344]	; (800b5e8 <mem_trim+0x204>)
 800b48e:	4855      	ldr	r0, [pc, #340]	; (800b5e4 <mem_trim+0x200>)
 800b490:	f00d fad8 	bl	8018a44 <iprintf>
  if (newsize > size) {
 800b494:	8bfa      	ldrh	r2, [r7, #30]
 800b496:	8abb      	ldrh	r3, [r7, #20]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d901      	bls.n	800b4a0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	e095      	b.n	800b5cc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b4a0:	8bfa      	ldrh	r2, [r7, #30]
 800b4a2:	8abb      	ldrh	r3, [r7, #20]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d101      	bne.n	800b4ac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	e08f      	b.n	800b5cc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b4ac:	484f      	ldr	r0, [pc, #316]	; (800b5ec <mem_trim+0x208>)
 800b4ae:	f00c fd0f 	bl	8017ed0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7ff fdb8 	bl	800b02c <ptr_to_mem>
 800b4bc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	791b      	ldrb	r3, [r3, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d13f      	bne.n	800b546 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4ce:	d106      	bne.n	800b4de <mem_trim+0xfa>
 800b4d0:	4b42      	ldr	r3, [pc, #264]	; (800b5dc <mem_trim+0x1f8>)
 800b4d2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b4d6:	4946      	ldr	r1, [pc, #280]	; (800b5f0 <mem_trim+0x20c>)
 800b4d8:	4842      	ldr	r0, [pc, #264]	; (800b5e4 <mem_trim+0x200>)
 800b4da:	f00d fab3 	bl	8018a44 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b4e4:	8afa      	ldrh	r2, [r7, #22]
 800b4e6:	8bfb      	ldrh	r3, [r7, #30]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b4f0:	4b40      	ldr	r3, [pc, #256]	; (800b5f4 <mem_trim+0x210>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d106      	bne.n	800b508 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b4fa:	89fb      	ldrh	r3, [r7, #14]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7ff fd95 	bl	800b02c <ptr_to_mem>
 800b502:	4603      	mov	r3, r0
 800b504:	4a3b      	ldr	r2, [pc, #236]	; (800b5f4 <mem_trim+0x210>)
 800b506:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b508:	89fb      	ldrh	r3, [r7, #14]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff fd8e 	bl	800b02c <ptr_to_mem>
 800b510:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2200      	movs	r2, #0
 800b516:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	89ba      	ldrh	r2, [r7, #12]
 800b51c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	8afa      	ldrh	r2, [r7, #22]
 800b522:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	89fa      	ldrh	r2, [r7, #14]
 800b528:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b532:	d047      	beq.n	800b5c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff fd77 	bl	800b02c <ptr_to_mem>
 800b53e:	4602      	mov	r2, r0
 800b540:	89fb      	ldrh	r3, [r7, #14]
 800b542:	8053      	strh	r3, [r2, #2]
 800b544:	e03e      	b.n	800b5c4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b546:	8bfb      	ldrh	r3, [r7, #30]
 800b548:	f103 0214 	add.w	r2, r3, #20
 800b54c:	8abb      	ldrh	r3, [r7, #20]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d838      	bhi.n	800b5c4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b552:	8afa      	ldrh	r2, [r7, #22]
 800b554:	8bfb      	ldrh	r3, [r7, #30]
 800b556:	4413      	add	r3, r2
 800b558:	b29b      	uxth	r3, r3
 800b55a:	3308      	adds	r3, #8
 800b55c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b566:	d106      	bne.n	800b576 <mem_trim+0x192>
 800b568:	4b1c      	ldr	r3, [pc, #112]	; (800b5dc <mem_trim+0x1f8>)
 800b56a:	f240 3216 	movw	r2, #790	; 0x316
 800b56e:	4920      	ldr	r1, [pc, #128]	; (800b5f0 <mem_trim+0x20c>)
 800b570:	481c      	ldr	r0, [pc, #112]	; (800b5e4 <mem_trim+0x200>)
 800b572:	f00d fa67 	bl	8018a44 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b576:	89fb      	ldrh	r3, [r7, #14]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7ff fd57 	bl	800b02c <ptr_to_mem>
 800b57e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b580:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <mem_trim+0x210>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	429a      	cmp	r2, r3
 800b588:	d202      	bcs.n	800b590 <mem_trim+0x1ac>
      lfree = mem2;
 800b58a:	4a1a      	ldr	r2, [pc, #104]	; (800b5f4 <mem_trim+0x210>)
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	2200      	movs	r2, #0
 800b594:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	881a      	ldrh	r2, [r3, #0]
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	8afa      	ldrh	r2, [r7, #22]
 800b5a2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	89fa      	ldrh	r2, [r7, #14]
 800b5a8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b5b2:	d007      	beq.n	800b5c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff fd37 	bl	800b02c <ptr_to_mem>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	89fb      	ldrh	r3, [r7, #14]
 800b5c2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b5c4:	4809      	ldr	r0, [pc, #36]	; (800b5ec <mem_trim+0x208>)
 800b5c6:	f00c fc92 	bl	8017eee <sys_mutex_unlock>
  return rmem;
 800b5ca:	687b      	ldr	r3, [r7, #4]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3720      	adds	r7, #32
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	20008d28 	.word	0x20008d28
 800b5d8:	20008d2c 	.word	0x20008d2c
 800b5dc:	08019f3c 	.word	0x08019f3c
 800b5e0:	0801a0c8 	.word	0x0801a0c8
 800b5e4:	08019f84 	.word	0x08019f84
 800b5e8:	0801a0e0 	.word	0x0801a0e0
 800b5ec:	20008d30 	.word	0x20008d30
 800b5f0:	0801a100 	.word	0x0801a100
 800b5f4:	20008d34 	.word	0x20008d34

0800b5f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b602:	88fb      	ldrh	r3, [r7, #6]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <mem_malloc+0x14>
    return NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	e0e2      	b.n	800b7d2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b60c:	88fb      	ldrh	r3, [r7, #6]
 800b60e:	3303      	adds	r3, #3
 800b610:	b29b      	uxth	r3, r3
 800b612:	f023 0303 	bic.w	r3, r3, #3
 800b616:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b618:	8bbb      	ldrh	r3, [r7, #28]
 800b61a:	2b0b      	cmp	r3, #11
 800b61c:	d801      	bhi.n	800b622 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b61e:	230c      	movs	r3, #12
 800b620:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b622:	8bbb      	ldrh	r3, [r7, #28]
 800b624:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b628:	d803      	bhi.n	800b632 <mem_malloc+0x3a>
 800b62a:	8bba      	ldrh	r2, [r7, #28]
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d201      	bcs.n	800b636 <mem_malloc+0x3e>
    return NULL;
 800b632:	2300      	movs	r3, #0
 800b634:	e0cd      	b.n	800b7d2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b636:	4869      	ldr	r0, [pc, #420]	; (800b7dc <mem_malloc+0x1e4>)
 800b638:	f00c fc4a 	bl	8017ed0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b63c:	4b68      	ldr	r3, [pc, #416]	; (800b7e0 <mem_malloc+0x1e8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff fd03 	bl	800b04c <mem_to_ptr>
 800b646:	4603      	mov	r3, r0
 800b648:	83fb      	strh	r3, [r7, #30]
 800b64a:	e0b7      	b.n	800b7bc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b64c:	8bfb      	ldrh	r3, [r7, #30]
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff fcec 	bl	800b02c <ptr_to_mem>
 800b654:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	791b      	ldrb	r3, [r3, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f040 80a7 	bne.w	800b7ae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	461a      	mov	r2, r3
 800b666:	8bfb      	ldrh	r3, [r7, #30]
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	f1a3 0208 	sub.w	r2, r3, #8
 800b66e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b670:	429a      	cmp	r2, r3
 800b672:	f0c0 809c 	bcc.w	800b7ae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	8bfb      	ldrh	r3, [r7, #30]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	f1a3 0208 	sub.w	r2, r3, #8
 800b684:	8bbb      	ldrh	r3, [r7, #28]
 800b686:	3314      	adds	r3, #20
 800b688:	429a      	cmp	r2, r3
 800b68a:	d333      	bcc.n	800b6f4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b68c:	8bfa      	ldrh	r2, [r7, #30]
 800b68e:	8bbb      	ldrh	r3, [r7, #28]
 800b690:	4413      	add	r3, r2
 800b692:	b29b      	uxth	r3, r3
 800b694:	3308      	adds	r3, #8
 800b696:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b698:	8a7b      	ldrh	r3, [r7, #18]
 800b69a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b69e:	d106      	bne.n	800b6ae <mem_malloc+0xb6>
 800b6a0:	4b50      	ldr	r3, [pc, #320]	; (800b7e4 <mem_malloc+0x1ec>)
 800b6a2:	f240 3287 	movw	r2, #903	; 0x387
 800b6a6:	4950      	ldr	r1, [pc, #320]	; (800b7e8 <mem_malloc+0x1f0>)
 800b6a8:	4850      	ldr	r0, [pc, #320]	; (800b7ec <mem_malloc+0x1f4>)
 800b6aa:	f00d f9cb 	bl	8018a44 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b6ae:	8a7b      	ldrh	r3, [r7, #18]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff fcbb 	bl	800b02c <ptr_to_mem>
 800b6b6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	881a      	ldrh	r2, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	8bfa      	ldrh	r2, [r7, #30]
 800b6ca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	8a7a      	ldrh	r2, [r7, #18]
 800b6d0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6e0:	d00b      	beq.n	800b6fa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	881b      	ldrh	r3, [r3, #0]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff fca0 	bl	800b02c <ptr_to_mem>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	8a7b      	ldrh	r3, [r7, #18]
 800b6f0:	8053      	strh	r3, [r2, #2]
 800b6f2:	e002      	b.n	800b6fa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b6fa:	4b39      	ldr	r3, [pc, #228]	; (800b7e0 <mem_malloc+0x1e8>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	429a      	cmp	r2, r3
 800b702:	d127      	bne.n	800b754 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b704:	4b36      	ldr	r3, [pc, #216]	; (800b7e0 <mem_malloc+0x1e8>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b70a:	e005      	b.n	800b718 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	881b      	ldrh	r3, [r3, #0]
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff fc8b 	bl	800b02c <ptr_to_mem>
 800b716:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	791b      	ldrb	r3, [r3, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <mem_malloc+0x132>
 800b720:	4b33      	ldr	r3, [pc, #204]	; (800b7f0 <mem_malloc+0x1f8>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	69ba      	ldr	r2, [r7, #24]
 800b726:	429a      	cmp	r2, r3
 800b728:	d1f0      	bne.n	800b70c <mem_malloc+0x114>
          }
          lfree = cur;
 800b72a:	4a2d      	ldr	r2, [pc, #180]	; (800b7e0 <mem_malloc+0x1e8>)
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b730:	4b2b      	ldr	r3, [pc, #172]	; (800b7e0 <mem_malloc+0x1e8>)
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	4b2e      	ldr	r3, [pc, #184]	; (800b7f0 <mem_malloc+0x1f8>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d00b      	beq.n	800b754 <mem_malloc+0x15c>
 800b73c:	4b28      	ldr	r3, [pc, #160]	; (800b7e0 <mem_malloc+0x1e8>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	791b      	ldrb	r3, [r3, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d006      	beq.n	800b754 <mem_malloc+0x15c>
 800b746:	4b27      	ldr	r3, [pc, #156]	; (800b7e4 <mem_malloc+0x1ec>)
 800b748:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b74c:	4929      	ldr	r1, [pc, #164]	; (800b7f4 <mem_malloc+0x1fc>)
 800b74e:	4827      	ldr	r0, [pc, #156]	; (800b7ec <mem_malloc+0x1f4>)
 800b750:	f00d f978 	bl	8018a44 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b754:	4821      	ldr	r0, [pc, #132]	; (800b7dc <mem_malloc+0x1e4>)
 800b756:	f00c fbca 	bl	8017eee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b75a:	8bba      	ldrh	r2, [r7, #28]
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	4413      	add	r3, r2
 800b760:	3308      	adds	r3, #8
 800b762:	4a23      	ldr	r2, [pc, #140]	; (800b7f0 <mem_malloc+0x1f8>)
 800b764:	6812      	ldr	r2, [r2, #0]
 800b766:	4293      	cmp	r3, r2
 800b768:	d906      	bls.n	800b778 <mem_malloc+0x180>
 800b76a:	4b1e      	ldr	r3, [pc, #120]	; (800b7e4 <mem_malloc+0x1ec>)
 800b76c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b770:	4921      	ldr	r1, [pc, #132]	; (800b7f8 <mem_malloc+0x200>)
 800b772:	481e      	ldr	r0, [pc, #120]	; (800b7ec <mem_malloc+0x1f4>)
 800b774:	f00d f966 	bl	8018a44 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d006      	beq.n	800b790 <mem_malloc+0x198>
 800b782:	4b18      	ldr	r3, [pc, #96]	; (800b7e4 <mem_malloc+0x1ec>)
 800b784:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b788:	491c      	ldr	r1, [pc, #112]	; (800b7fc <mem_malloc+0x204>)
 800b78a:	4818      	ldr	r0, [pc, #96]	; (800b7ec <mem_malloc+0x1f4>)
 800b78c:	f00d f95a 	bl	8018a44 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	f003 0303 	and.w	r3, r3, #3
 800b796:	2b00      	cmp	r3, #0
 800b798:	d006      	beq.n	800b7a8 <mem_malloc+0x1b0>
 800b79a:	4b12      	ldr	r3, [pc, #72]	; (800b7e4 <mem_malloc+0x1ec>)
 800b79c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b7a0:	4917      	ldr	r1, [pc, #92]	; (800b800 <mem_malloc+0x208>)
 800b7a2:	4812      	ldr	r0, [pc, #72]	; (800b7ec <mem_malloc+0x1f4>)
 800b7a4:	f00d f94e 	bl	8018a44 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	e011      	b.n	800b7d2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b7ae:	8bfb      	ldrh	r3, [r7, #30]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff fc3b 	bl	800b02c <ptr_to_mem>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	881b      	ldrh	r3, [r3, #0]
 800b7ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b7bc:	8bfa      	ldrh	r2, [r7, #30]
 800b7be:	8bbb      	ldrh	r3, [r7, #28]
 800b7c0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	f4ff af41 	bcc.w	800b64c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b7ca:	4804      	ldr	r0, [pc, #16]	; (800b7dc <mem_malloc+0x1e4>)
 800b7cc:	f00c fb8f 	bl	8017eee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3720      	adds	r7, #32
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	20008d30 	.word	0x20008d30
 800b7e0:	20008d34 	.word	0x20008d34
 800b7e4:	08019f3c 	.word	0x08019f3c
 800b7e8:	0801a100 	.word	0x0801a100
 800b7ec:	08019f84 	.word	0x08019f84
 800b7f0:	20008d2c 	.word	0x20008d2c
 800b7f4:	0801a114 	.word	0x0801a114
 800b7f8:	0801a130 	.word	0x0801a130
 800b7fc:	0801a160 	.word	0x0801a160
 800b800:	0801a190 	.word	0x0801a190

0800b804 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	460a      	mov	r2, r1
 800b80e:	80fb      	strh	r3, [r7, #6]
 800b810:	4613      	mov	r3, r2
 800b812:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800b814:	88fb      	ldrh	r3, [r7, #6]
 800b816:	88ba      	ldrh	r2, [r7, #4]
 800b818:	fb02 f303 	mul.w	r3, r2, r3
 800b81c:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	b29b      	uxth	r3, r3
 800b822:	461a      	mov	r2, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	4293      	cmp	r3, r2
 800b828:	d001      	beq.n	800b82e <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	e00e      	b.n	800b84c <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	b29b      	uxth	r3, r3
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff fee0 	bl	800b5f8 <mem_malloc>
 800b838:	60b8      	str	r0, [r7, #8]
  if (p) {
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d004      	beq.n	800b84a <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	2100      	movs	r1, #0
 800b844:	68b8      	ldr	r0, [r7, #8]
 800b846:	f00d f817 	bl	8018878 <memset>
  }
  return p;
 800b84a:	68bb      	ldr	r3, [r7, #8]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	3303      	adds	r3, #3
 800b86a:	f023 0303 	bic.w	r3, r3, #3
 800b86e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b870:	2300      	movs	r3, #0
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	e011      	b.n	800b89a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	461a      	mov	r2, r3
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	4413      	add	r3, r2
 800b892:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3301      	adds	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	885b      	ldrh	r3, [r3, #2]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	dbe7      	blt.n	800b876 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b8a6:	bf00      	nop
 800b8a8:	bf00      	nop
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bc80      	pop	{r7}
 800b8b0:	4770      	bx	lr
	...

0800b8b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	80fb      	strh	r3, [r7, #6]
 800b8be:	e009      	b.n	800b8d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b8c0:	88fb      	ldrh	r3, [r7, #6]
 800b8c2:	4a08      	ldr	r2, [pc, #32]	; (800b8e4 <memp_init+0x30>)
 800b8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff ffc3 	bl	800b854 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b8ce:	88fb      	ldrh	r3, [r7, #6]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	80fb      	strh	r3, [r7, #6]
 800b8d4:	88fb      	ldrh	r3, [r7, #6]
 800b8d6:	2b0c      	cmp	r3, #12
 800b8d8:	d9f2      	bls.n	800b8c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	0801cd50 	.word	0x0801cd50

0800b8e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b8f0:	f00c fb30 	bl	8017f54 <sys_arch_protect>
 800b8f4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d015      	beq.n	800b930 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	6812      	ldr	r2, [r2, #0]
 800b90c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	f003 0303 	and.w	r3, r3, #3
 800b914:	2b00      	cmp	r3, #0
 800b916:	d006      	beq.n	800b926 <do_memp_malloc_pool+0x3e>
 800b918:	4b09      	ldr	r3, [pc, #36]	; (800b940 <do_memp_malloc_pool+0x58>)
 800b91a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b91e:	4909      	ldr	r1, [pc, #36]	; (800b944 <do_memp_malloc_pool+0x5c>)
 800b920:	4809      	ldr	r0, [pc, #36]	; (800b948 <do_memp_malloc_pool+0x60>)
 800b922:	f00d f88f 	bl	8018a44 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f00c fb22 	bl	8017f70 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	e003      	b.n	800b938 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	f00c fb1d 	bl	8017f70 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	0801a1b4 	.word	0x0801a1b4
 800b944:	0801a1e4 	.word	0x0801a1e4
 800b948:	0801a208 	.word	0x0801a208

0800b94c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <memp_malloc_pool+0x1c>
 800b95a:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <memp_malloc_pool+0x38>)
 800b95c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b960:	4909      	ldr	r1, [pc, #36]	; (800b988 <memp_malloc_pool+0x3c>)
 800b962:	480a      	ldr	r0, [pc, #40]	; (800b98c <memp_malloc_pool+0x40>)
 800b964:	f00d f86e 	bl	8018a44 <iprintf>
  if (desc == NULL) {
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <memp_malloc_pool+0x26>
    return NULL;
 800b96e:	2300      	movs	r3, #0
 800b970:	e003      	b.n	800b97a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff ffb8 	bl	800b8e8 <do_memp_malloc_pool>
 800b978:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	0801a1b4 	.word	0x0801a1b4
 800b988:	0801a230 	.word	0x0801a230
 800b98c:	0801a208 	.word	0x0801a208

0800b990 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	2b0c      	cmp	r3, #12
 800b99e:	d908      	bls.n	800b9b2 <memp_malloc+0x22>
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	; (800b9cc <memp_malloc+0x3c>)
 800b9a2:	f240 1257 	movw	r2, #343	; 0x157
 800b9a6:	490a      	ldr	r1, [pc, #40]	; (800b9d0 <memp_malloc+0x40>)
 800b9a8:	480a      	ldr	r0, [pc, #40]	; (800b9d4 <memp_malloc+0x44>)
 800b9aa:	f00d f84b 	bl	8018a44 <iprintf>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e008      	b.n	800b9c4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b9b2:	79fb      	ldrb	r3, [r7, #7]
 800b9b4:	4a08      	ldr	r2, [pc, #32]	; (800b9d8 <memp_malloc+0x48>)
 800b9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ff94 	bl	800b8e8 <do_memp_malloc_pool>
 800b9c0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	0801a1b4 	.word	0x0801a1b4
 800b9d0:	0801a244 	.word	0x0801a244
 800b9d4:	0801a208 	.word	0x0801a208
 800b9d8:	0801cd50 	.word	0x0801cd50

0800b9dc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	f003 0303 	and.w	r3, r3, #3
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d006      	beq.n	800b9fe <do_memp_free_pool+0x22>
 800b9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ba28 <do_memp_free_pool+0x4c>)
 800b9f2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b9f6:	490d      	ldr	r1, [pc, #52]	; (800ba2c <do_memp_free_pool+0x50>)
 800b9f8:	480d      	ldr	r0, [pc, #52]	; (800ba30 <do_memp_free_pool+0x54>)
 800b9fa:	f00d f823 	bl	8018a44 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ba02:	f00c faa7 	bl	8017f54 <sys_arch_protect>
 800ba06:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ba1a:	68b8      	ldr	r0, [r7, #8]
 800ba1c:	f00c faa8 	bl	8017f70 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ba20:	bf00      	nop
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	0801a1b4 	.word	0x0801a1b4
 800ba2c:	0801a264 	.word	0x0801a264
 800ba30:	0801a208 	.word	0x0801a208

0800ba34 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d106      	bne.n	800ba52 <memp_free_pool+0x1e>
 800ba44:	4b0a      	ldr	r3, [pc, #40]	; (800ba70 <memp_free_pool+0x3c>)
 800ba46:	f240 1295 	movw	r2, #405	; 0x195
 800ba4a:	490a      	ldr	r1, [pc, #40]	; (800ba74 <memp_free_pool+0x40>)
 800ba4c:	480a      	ldr	r0, [pc, #40]	; (800ba78 <memp_free_pool+0x44>)
 800ba4e:	f00c fff9 	bl	8018a44 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d007      	beq.n	800ba68 <memp_free_pool+0x34>
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff ffbb 	bl	800b9dc <do_memp_free_pool>
 800ba66:	e000      	b.n	800ba6a <memp_free_pool+0x36>
    return;
 800ba68:	bf00      	nop
}
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	0801a1b4 	.word	0x0801a1b4
 800ba74:	0801a230 	.word	0x0801a230
 800ba78:	0801a208 	.word	0x0801a208

0800ba7c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	6039      	str	r1, [r7, #0]
 800ba86:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	2b0c      	cmp	r3, #12
 800ba8c:	d907      	bls.n	800ba9e <memp_free+0x22>
 800ba8e:	4b0c      	ldr	r3, [pc, #48]	; (800bac0 <memp_free+0x44>)
 800ba90:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ba94:	490b      	ldr	r1, [pc, #44]	; (800bac4 <memp_free+0x48>)
 800ba96:	480c      	ldr	r0, [pc, #48]	; (800bac8 <memp_free+0x4c>)
 800ba98:	f00c ffd4 	bl	8018a44 <iprintf>
 800ba9c:	e00c      	b.n	800bab8 <memp_free+0x3c>

  if (mem == NULL) {
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d008      	beq.n	800bab6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	4a09      	ldr	r2, [pc, #36]	; (800bacc <memp_free+0x50>)
 800baa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	4618      	mov	r0, r3
 800bab0:	f7ff ff94 	bl	800b9dc <do_memp_free_pool>
 800bab4:	e000      	b.n	800bab8 <memp_free+0x3c>
    return;
 800bab6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	0801a1b4 	.word	0x0801a1b4
 800bac4:	0801a284 	.word	0x0801a284
 800bac8:	0801a208 	.word	0x0801a208
 800bacc:	0801cd50 	.word	0x0801cd50

0800bad0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bad0:	b480      	push	{r7}
 800bad2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bad4:	bf00      	nop
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bc80      	pop	{r7}
 800bada:	4770      	bx	lr

0800badc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d108      	bne.n	800bb02 <netif_add+0x26>
 800baf0:	4b5b      	ldr	r3, [pc, #364]	; (800bc60 <netif_add+0x184>)
 800baf2:	f240 1227 	movw	r2, #295	; 0x127
 800baf6:	495b      	ldr	r1, [pc, #364]	; (800bc64 <netif_add+0x188>)
 800baf8:	485b      	ldr	r0, [pc, #364]	; (800bc68 <netif_add+0x18c>)
 800bafa:	f00c ffa3 	bl	8018a44 <iprintf>
 800bafe:	2300      	movs	r3, #0
 800bb00:	e0a9      	b.n	800bc56 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d108      	bne.n	800bb1a <netif_add+0x3e>
 800bb08:	4b55      	ldr	r3, [pc, #340]	; (800bc60 <netif_add+0x184>)
 800bb0a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bb0e:	4957      	ldr	r1, [pc, #348]	; (800bc6c <netif_add+0x190>)
 800bb10:	4855      	ldr	r0, [pc, #340]	; (800bc68 <netif_add+0x18c>)
 800bb12:	f00c ff97 	bl	8018a44 <iprintf>
 800bb16:	2300      	movs	r3, #0
 800bb18:	e09d      	b.n	800bc56 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d101      	bne.n	800bb24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bb20:	4b53      	ldr	r3, [pc, #332]	; (800bc70 <netif_add+0x194>)
 800bb22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bb2a:	4b51      	ldr	r3, [pc, #324]	; (800bc70 <netif_add+0x194>)
 800bb2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bb34:	4b4e      	ldr	r3, [pc, #312]	; (800bc70 <netif_add+0x194>)
 800bb36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4a49      	ldr	r2, [pc, #292]	; (800bc74 <netif_add+0x198>)
 800bb4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3324      	adds	r3, #36	; 0x24
 800bb62:	2204      	movs	r2, #4
 800bb64:	2100      	movs	r1, #0
 800bb66:	4618      	mov	r0, r3
 800bb68:	f00c fe86 	bl	8018878 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a3a      	ldr	r2, [r7, #32]
 800bb76:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bb78:	4b3f      	ldr	r3, [pc, #252]	; (800bc78 <netif_add+0x19c>)
 800bb7a:	781a      	ldrb	r2, [r3, #0]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb86:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	68b9      	ldr	r1, [r7, #8]
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f000 f912 	bl	800bdb8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	4798      	blx	r3
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <netif_add+0xc8>
    return NULL;
 800bba0:	2300      	movs	r3, #0
 800bba2:	e058      	b.n	800bc56 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbaa:	2bff      	cmp	r3, #255	; 0xff
 800bbac:	d103      	bne.n	800bbb6 <netif_add+0xda>
        netif->num = 0;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bbba:	4b30      	ldr	r3, [pc, #192]	; (800bc7c <netif_add+0x1a0>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	617b      	str	r3, [r7, #20]
 800bbc0:	e02b      	b.n	800bc1a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d106      	bne.n	800bbd8 <netif_add+0xfc>
 800bbca:	4b25      	ldr	r3, [pc, #148]	; (800bc60 <netif_add+0x184>)
 800bbcc:	f240 128b 	movw	r2, #395	; 0x18b
 800bbd0:	492b      	ldr	r1, [pc, #172]	; (800bc80 <netif_add+0x1a4>)
 800bbd2:	4825      	ldr	r0, [pc, #148]	; (800bc68 <netif_add+0x18c>)
 800bbd4:	f00c ff36 	bl	8018a44 <iprintf>
        num_netifs++;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	2bff      	cmp	r3, #255	; 0xff
 800bbe2:	dd06      	ble.n	800bbf2 <netif_add+0x116>
 800bbe4:	4b1e      	ldr	r3, [pc, #120]	; (800bc60 <netif_add+0x184>)
 800bbe6:	f240 128d 	movw	r2, #397	; 0x18d
 800bbea:	4926      	ldr	r1, [pc, #152]	; (800bc84 <netif_add+0x1a8>)
 800bbec:	481e      	ldr	r0, [pc, #120]	; (800bc68 <netif_add+0x18c>)
 800bbee:	f00c ff29 	bl	8018a44 <iprintf>
        if (netif2->num == netif->num) {
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d108      	bne.n	800bc14 <netif_add+0x138>
          netif->num++;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc08:	3301      	adds	r3, #1
 800bc0a:	b2da      	uxtb	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800bc12:	e005      	b.n	800bc20 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	617b      	str	r3, [r7, #20]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1d0      	bne.n	800bbc2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1be      	bne.n	800bba4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc2c:	2bfe      	cmp	r3, #254	; 0xfe
 800bc2e:	d103      	bne.n	800bc38 <netif_add+0x15c>
    netif_num = 0;
 800bc30:	4b11      	ldr	r3, [pc, #68]	; (800bc78 <netif_add+0x19c>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	701a      	strb	r2, [r3, #0]
 800bc36:	e006      	b.n	800bc46 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc3e:	3301      	adds	r3, #1
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	4b0d      	ldr	r3, [pc, #52]	; (800bc78 <netif_add+0x19c>)
 800bc44:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bc46:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <netif_add+0x1a0>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bc4e:	4a0b      	ldr	r2, [pc, #44]	; (800bc7c <netif_add+0x1a0>)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bc54:	68fb      	ldr	r3, [r7, #12]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	0801a2a0 	.word	0x0801a2a0
 800bc64:	0801a334 	.word	0x0801a334
 800bc68:	0801a2f0 	.word	0x0801a2f0
 800bc6c:	0801a350 	.word	0x0801a350
 800bc70:	0801cdd4 	.word	0x0801cdd4
 800bc74:	0800bfc5 	.word	0x0800bfc5
 800bc78:	2000be2c 	.word	0x2000be2c
 800bc7c:	2000be24 	.word	0x2000be24
 800bc80:	0801a374 	.word	0x0801a374
 800bc84:	0801a388 	.word	0x0801a388

0800bc88 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f002 fe2b 	bl	800e8f0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f007 fed3 	bl	8013a48 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bca2:	bf00      	nop
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b086      	sub	sp, #24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <netif_do_set_ipaddr+0x20>
 800bcbe:	4b1d      	ldr	r3, [pc, #116]	; (800bd34 <netif_do_set_ipaddr+0x88>)
 800bcc0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bcc4:	491c      	ldr	r1, [pc, #112]	; (800bd38 <netif_do_set_ipaddr+0x8c>)
 800bcc6:	481d      	ldr	r0, [pc, #116]	; (800bd3c <netif_do_set_ipaddr+0x90>)
 800bcc8:	f00c febc 	bl	8018a44 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d106      	bne.n	800bce0 <netif_do_set_ipaddr+0x34>
 800bcd2:	4b18      	ldr	r3, [pc, #96]	; (800bd34 <netif_do_set_ipaddr+0x88>)
 800bcd4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bcd8:	4917      	ldr	r1, [pc, #92]	; (800bd38 <netif_do_set_ipaddr+0x8c>)
 800bcda:	4818      	ldr	r0, [pc, #96]	; (800bd3c <netif_do_set_ipaddr+0x90>)
 800bcdc:	f00c feb2 	bl	8018a44 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3304      	adds	r3, #4
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d01c      	beq.n	800bd28 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3304      	adds	r3, #4
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bcfe:	f107 0314 	add.w	r3, r7, #20
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff ffbf 	bl	800bc88 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <netif_do_set_ipaddr+0x6a>
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	e000      	b.n	800bd18 <netif_do_set_ipaddr+0x6c>
 800bd16:	2300      	movs	r3, #0
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 f8ce 	bl	800bec0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bd24:	2301      	movs	r3, #1
 800bd26:	e000      	b.n	800bd2a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	0801a2a0 	.word	0x0801a2a0
 800bd38:	0801a3b8 	.word	0x0801a3b8
 800bd3c:	0801a2f0 	.word	0x0801a2f0

0800bd40 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3308      	adds	r3, #8
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d00a      	beq.n	800bd70 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <netif_do_set_netmask+0x26>
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	e000      	b.n	800bd68 <netif_do_set_netmask+0x28>
 800bd66:	2300      	movs	r3, #0
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e000      	b.n	800bd72 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bc80      	pop	{r7}
 800bd7a:	4770      	bx	lr

0800bd7c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	330c      	adds	r3, #12
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d00a      	beq.n	800bdac <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <netif_do_set_gw+0x26>
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	e000      	b.n	800bda4 <netif_do_set_gw+0x28>
 800bda2:	2300      	movs	r3, #0
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e000      	b.n	800bdae <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bc80      	pop	{r7}
 800bdb6:	4770      	bx	lr

0800bdb8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b088      	sub	sp, #32
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
 800bdc4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bdd4:	4b1c      	ldr	r3, [pc, #112]	; (800be48 <netif_set_addr+0x90>)
 800bdd6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bdde:	4b1a      	ldr	r3, [pc, #104]	; (800be48 <netif_set_addr+0x90>)
 800bde0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bde8:	4b17      	ldr	r3, [pc, #92]	; (800be48 <netif_set_addr+0x90>)
 800bdea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <netif_set_addr+0x42>
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <netif_set_addr+0x46>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e000      	b.n	800be00 <netif_set_addr+0x48>
 800bdfe:	2300      	movs	r3, #0
 800be00:	617b      	str	r3, [r7, #20]
  if (remove) {
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d006      	beq.n	800be16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be08:	f107 0310 	add.w	r3, r7, #16
 800be0c:	461a      	mov	r2, r3
 800be0e:	68b9      	ldr	r1, [r7, #8]
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7ff ff4b 	bl	800bcac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800be16:	69fa      	ldr	r2, [r7, #28]
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff ff90 	bl	800bd40 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800be20:	69ba      	ldr	r2, [r7, #24]
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f7ff ffa9 	bl	800bd7c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d106      	bne.n	800be3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be30:	f107 0310 	add.w	r3, r7, #16
 800be34:	461a      	mov	r2, r3
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f7ff ff37 	bl	800bcac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800be3e:	bf00      	nop
 800be40:	3720      	adds	r7, #32
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	0801cdd4 	.word	0x0801cdd4

0800be4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800be54:	4a03      	ldr	r2, [pc, #12]	; (800be64 <netif_set_default+0x18>)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800be5a:	bf00      	nop
 800be5c:	370c      	adds	r7, #12
 800be5e:	46bd      	mov	sp, r7
 800be60:	bc80      	pop	{r7}
 800be62:	4770      	bx	lr
 800be64:	2000be28 	.word	0x2000be28

0800be68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d107      	bne.n	800be86 <netif_set_up+0x1e>
 800be76:	4b0f      	ldr	r3, [pc, #60]	; (800beb4 <netif_set_up+0x4c>)
 800be78:	f44f 7254 	mov.w	r2, #848	; 0x350
 800be7c:	490e      	ldr	r1, [pc, #56]	; (800beb8 <netif_set_up+0x50>)
 800be7e:	480f      	ldr	r0, [pc, #60]	; (800bebc <netif_set_up+0x54>)
 800be80:	f00c fde0 	bl	8018a44 <iprintf>
 800be84:	e013      	b.n	800beae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10c      	bne.n	800beae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be9a:	f043 0301 	orr.w	r3, r3, #1
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bea6:	2103      	movs	r1, #3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f809 	bl	800bec0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	0801a2a0 	.word	0x0801a2a0
 800beb8:	0801a428 	.word	0x0801a428
 800bebc:	0801a2f0 	.word	0x0801a2f0

0800bec0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	460b      	mov	r3, r1
 800beca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <netif_issue_reports+0x20>
 800bed2:	4b18      	ldr	r3, [pc, #96]	; (800bf34 <netif_issue_reports+0x74>)
 800bed4:	f240 326d 	movw	r2, #877	; 0x36d
 800bed8:	4917      	ldr	r1, [pc, #92]	; (800bf38 <netif_issue_reports+0x78>)
 800beda:	4818      	ldr	r0, [pc, #96]	; (800bf3c <netif_issue_reports+0x7c>)
 800bedc:	f00c fdb2 	bl	8018a44 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bee6:	f003 0304 	and.w	r3, r3, #4
 800beea:	2b00      	cmp	r3, #0
 800beec:	d01e      	beq.n	800bf2c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bef4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d017      	beq.n	800bf2c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800befc:	78fb      	ldrb	r3, [r7, #3]
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d013      	beq.n	800bf2e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00e      	beq.n	800bf2e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf16:	f003 0308 	and.w	r3, r3, #8
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d007      	beq.n	800bf2e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	3304      	adds	r3, #4
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f00a fb51 	bl	80165cc <etharp_request>
 800bf2a:	e000      	b.n	800bf2e <netif_issue_reports+0x6e>
    return;
 800bf2c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	0801a2a0 	.word	0x0801a2a0
 800bf38:	0801a444 	.word	0x0801a444
 800bf3c:	0801a2f0 	.word	0x0801a2f0

0800bf40 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d107      	bne.n	800bf5e <netif_set_down+0x1e>
 800bf4e:	4b12      	ldr	r3, [pc, #72]	; (800bf98 <netif_set_down+0x58>)
 800bf50:	f240 329b 	movw	r2, #923	; 0x39b
 800bf54:	4911      	ldr	r1, [pc, #68]	; (800bf9c <netif_set_down+0x5c>)
 800bf56:	4812      	ldr	r0, [pc, #72]	; (800bfa0 <netif_set_down+0x60>)
 800bf58:	f00c fd74 	bl	8018a44 <iprintf>
 800bf5c:	e019      	b.n	800bf92 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf64:	f003 0301 	and.w	r3, r3, #1
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d012      	beq.n	800bf92 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf72:	f023 0301 	bic.w	r3, r3, #1
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf84:	f003 0308 	and.w	r3, r3, #8
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f009 fed7 	bl	8015d40 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bf92:	3708      	adds	r7, #8
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	0801a2a0 	.word	0x0801a2a0
 800bf9c:	0801a468 	.word	0x0801a468
 800bfa0:	0801a2f0 	.word	0x0801a2f0

0800bfa4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	61da      	str	r2, [r3, #28]
  }
}
 800bfba:	bf00      	nop
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bc80      	pop	{r7}
 800bfc2:	4770      	bx	lr

0800bfc4 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bfd0:	f06f 030b 	mvn.w	r3, #11
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bc80      	pop	{r7}
 800bfdc:	4770      	bx	lr
	...

0800bfe0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d013      	beq.n	800c018 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bff0:	4b0c      	ldr	r3, [pc, #48]	; (800c024 <netif_get_by_index+0x44>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	60fb      	str	r3, [r7, #12]
 800bff6:	e00c      	b.n	800c012 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bffe:	3301      	adds	r3, #1
 800c000:	b2db      	uxtb	r3, r3
 800c002:	79fa      	ldrb	r2, [r7, #7]
 800c004:	429a      	cmp	r2, r3
 800c006:	d101      	bne.n	800c00c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	e006      	b.n	800c01a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1ef      	bne.n	800bff8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	bc80      	pop	{r7}
 800c022:	4770      	bx	lr
 800c024:	2000be24 	.word	0x2000be24

0800c028 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c02e:	f00b ff91 	bl	8017f54 <sys_arch_protect>
 800c032:	6038      	str	r0, [r7, #0]
 800c034:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <pbuf_free_ooseq+0x44>)
 800c036:	2200      	movs	r2, #0
 800c038:	701a      	strb	r2, [r3, #0]
 800c03a:	6838      	ldr	r0, [r7, #0]
 800c03c:	f00b ff98 	bl	8017f70 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c040:	4b0b      	ldr	r3, [pc, #44]	; (800c070 <pbuf_free_ooseq+0x48>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	607b      	str	r3, [r7, #4]
 800c046:	e00a      	b.n	800c05e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f002 fc8b 	bl	800e96c <tcp_free_ooseq>
      return;
 800c056:	e005      	b.n	800c064 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	607b      	str	r3, [r7, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1f1      	bne.n	800c048 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	2000be2d 	.word	0x2000be2d
 800c070:	2000be3c 	.word	0x2000be3c

0800c074 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c07c:	f7ff ffd4 	bl	800c028 <pbuf_free_ooseq>
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c08e:	f00b ff61 	bl	8017f54 <sys_arch_protect>
 800c092:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c094:	4b0f      	ldr	r3, [pc, #60]	; (800c0d4 <pbuf_pool_is_empty+0x4c>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c09a:	4b0e      	ldr	r3, [pc, #56]	; (800c0d4 <pbuf_pool_is_empty+0x4c>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f00b ff65 	bl	8017f70 <sys_arch_unprotect>

  if (!queued) {
 800c0a6:	78fb      	ldrb	r3, [r7, #3]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10f      	bne.n	800c0cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	480a      	ldr	r0, [pc, #40]	; (800c0d8 <pbuf_pool_is_empty+0x50>)
 800c0b0:	f7fd fb94 	bl	80097dc <tcpip_try_callback>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d008      	beq.n	800c0cc <pbuf_pool_is_empty+0x44>
 800c0ba:	f00b ff4b 	bl	8017f54 <sys_arch_protect>
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	4b04      	ldr	r3, [pc, #16]	; (800c0d4 <pbuf_pool_is_empty+0x4c>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f00b ff52 	bl	8017f70 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	2000be2d 	.word	0x2000be2d
 800c0d8:	0800c075 	.word	0x0800c075

0800c0dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	80fb      	strh	r3, [r7, #6]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	88fa      	ldrh	r2, [r7, #6]
 800c102:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	88ba      	ldrh	r2, [r7, #4]
 800c108:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c10a:	8b3b      	ldrh	r3, [r7, #24]
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	7f3a      	ldrb	r2, [r7, #28]
 800c116:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2201      	movs	r2, #1
 800c11c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	73da      	strb	r2, [r3, #15]
}
 800c124:	bf00      	nop
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	bc80      	pop	{r7}
 800c12c:	4770      	bx	lr
	...

0800c130 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b08c      	sub	sp, #48	; 0x30
 800c134:	af02      	add	r7, sp, #8
 800c136:	4603      	mov	r3, r0
 800c138:	71fb      	strb	r3, [r7, #7]
 800c13a:	460b      	mov	r3, r1
 800c13c:	80bb      	strh	r3, [r7, #4]
 800c13e:	4613      	mov	r3, r2
 800c140:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c146:	887b      	ldrh	r3, [r7, #2]
 800c148:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c14c:	d07f      	beq.n	800c24e <pbuf_alloc+0x11e>
 800c14e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c152:	f300 80c8 	bgt.w	800c2e6 <pbuf_alloc+0x1b6>
 800c156:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c15a:	d010      	beq.n	800c17e <pbuf_alloc+0x4e>
 800c15c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c160:	f300 80c1 	bgt.w	800c2e6 <pbuf_alloc+0x1b6>
 800c164:	2b01      	cmp	r3, #1
 800c166:	d002      	beq.n	800c16e <pbuf_alloc+0x3e>
 800c168:	2b41      	cmp	r3, #65	; 0x41
 800c16a:	f040 80bc 	bne.w	800c2e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c16e:	887a      	ldrh	r2, [r7, #2]
 800c170:	88bb      	ldrh	r3, [r7, #4]
 800c172:	4619      	mov	r1, r3
 800c174:	2000      	movs	r0, #0
 800c176:	f000 f8d1 	bl	800c31c <pbuf_alloc_reference>
 800c17a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c17c:	e0bd      	b.n	800c2fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c17e:	2300      	movs	r3, #0
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c182:	2300      	movs	r3, #0
 800c184:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c186:	88bb      	ldrh	r3, [r7, #4]
 800c188:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c18a:	200c      	movs	r0, #12
 800c18c:	f7ff fc00 	bl	800b990 <memp_malloc>
 800c190:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d109      	bne.n	800c1ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c198:	f7ff ff76 	bl	800c088 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d002      	beq.n	800c1a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c1a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1a4:	f000 faa8 	bl	800c6f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	e0a7      	b.n	800c2fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c1ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1ae:	3303      	adds	r3, #3
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	f023 0303 	bic.w	r3, r3, #3
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	8b7a      	ldrh	r2, [r7, #26]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	bf28      	it	cs
 800c1c4:	4613      	movcs	r3, r2
 800c1c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c1c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1ca:	3310      	adds	r3, #16
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3303      	adds	r3, #3
 800c1d2:	f023 0303 	bic.w	r3, r3, #3
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	89f9      	ldrh	r1, [r7, #14]
 800c1da:	8b7a      	ldrh	r2, [r7, #26]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	887b      	ldrh	r3, [r7, #2]
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	6938      	ldr	r0, [r7, #16]
 800c1ea:	f7ff ff77 	bl	800c0dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f003 0303 	and.w	r3, r3, #3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d006      	beq.n	800c208 <pbuf_alloc+0xd8>
 800c1fa:	4b42      	ldr	r3, [pc, #264]	; (800c304 <pbuf_alloc+0x1d4>)
 800c1fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c200:	4941      	ldr	r1, [pc, #260]	; (800c308 <pbuf_alloc+0x1d8>)
 800c202:	4842      	ldr	r0, [pc, #264]	; (800c30c <pbuf_alloc+0x1dc>)
 800c204:	f00c fc1e 	bl	8018a44 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c20a:	3303      	adds	r3, #3
 800c20c:	f023 0303 	bic.w	r3, r3, #3
 800c210:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c214:	d106      	bne.n	800c224 <pbuf_alloc+0xf4>
 800c216:	4b3b      	ldr	r3, [pc, #236]	; (800c304 <pbuf_alloc+0x1d4>)
 800c218:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c21c:	493c      	ldr	r1, [pc, #240]	; (800c310 <pbuf_alloc+0x1e0>)
 800c21e:	483b      	ldr	r0, [pc, #236]	; (800c30c <pbuf_alloc+0x1dc>)
 800c220:	f00c fc10 	bl	8018a44 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24
 800c22e:	e002      	b.n	800c236 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c23a:	8b7a      	ldrh	r2, [r7, #26]
 800c23c:	89fb      	ldrh	r3, [r7, #14]
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c246:	8b7b      	ldrh	r3, [r7, #26]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d19e      	bne.n	800c18a <pbuf_alloc+0x5a>
      break;
 800c24c:	e055      	b.n	800c2fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c24e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c250:	3303      	adds	r3, #3
 800c252:	b29b      	uxth	r3, r3
 800c254:	f023 0303 	bic.w	r3, r3, #3
 800c258:	b29a      	uxth	r2, r3
 800c25a:	88bb      	ldrh	r3, [r7, #4]
 800c25c:	3303      	adds	r3, #3
 800c25e:	b29b      	uxth	r3, r3
 800c260:	f023 0303 	bic.w	r3, r3, #3
 800c264:	b29b      	uxth	r3, r3
 800c266:	4413      	add	r3, r2
 800c268:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c26a:	8b3b      	ldrh	r3, [r7, #24]
 800c26c:	3310      	adds	r3, #16
 800c26e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c270:	8b3a      	ldrh	r2, [r7, #24]
 800c272:	88bb      	ldrh	r3, [r7, #4]
 800c274:	3303      	adds	r3, #3
 800c276:	f023 0303 	bic.w	r3, r3, #3
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d306      	bcc.n	800c28c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c27e:	8afa      	ldrh	r2, [r7, #22]
 800c280:	88bb      	ldrh	r3, [r7, #4]
 800c282:	3303      	adds	r3, #3
 800c284:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c288:	429a      	cmp	r2, r3
 800c28a:	d201      	bcs.n	800c290 <pbuf_alloc+0x160>
        return NULL;
 800c28c:	2300      	movs	r3, #0
 800c28e:	e035      	b.n	800c2fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c290:	8afb      	ldrh	r3, [r7, #22]
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff f9b0 	bl	800b5f8 <mem_malloc>
 800c298:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <pbuf_alloc+0x174>
        return NULL;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e02b      	b.n	800c2fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c2a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2a6:	3310      	adds	r3, #16
 800c2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2aa:	4413      	add	r3, r2
 800c2ac:	3303      	adds	r3, #3
 800c2ae:	f023 0303 	bic.w	r3, r3, #3
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	88b9      	ldrh	r1, [r7, #4]
 800c2b6:	88ba      	ldrh	r2, [r7, #4]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	887b      	ldrh	r3, [r7, #2]
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2c6:	f7ff ff09 	bl	800c0dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	f003 0303 	and.w	r3, r3, #3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d010      	beq.n	800c2f8 <pbuf_alloc+0x1c8>
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	; (800c304 <pbuf_alloc+0x1d4>)
 800c2d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c2dc:	490d      	ldr	r1, [pc, #52]	; (800c314 <pbuf_alloc+0x1e4>)
 800c2de:	480b      	ldr	r0, [pc, #44]	; (800c30c <pbuf_alloc+0x1dc>)
 800c2e0:	f00c fbb0 	bl	8018a44 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c2e4:	e008      	b.n	800c2f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c2e6:	4b07      	ldr	r3, [pc, #28]	; (800c304 <pbuf_alloc+0x1d4>)
 800c2e8:	f240 1227 	movw	r2, #295	; 0x127
 800c2ec:	490a      	ldr	r1, [pc, #40]	; (800c318 <pbuf_alloc+0x1e8>)
 800c2ee:	4807      	ldr	r0, [pc, #28]	; (800c30c <pbuf_alloc+0x1dc>)
 800c2f0:	f00c fba8 	bl	8018a44 <iprintf>
      return NULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e001      	b.n	800c2fc <pbuf_alloc+0x1cc>
      break;
 800c2f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3728      	adds	r7, #40	; 0x28
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	0801a4d0 	.word	0x0801a4d0
 800c308:	0801a500 	.word	0x0801a500
 800c30c:	0801a530 	.word	0x0801a530
 800c310:	0801a558 	.word	0x0801a558
 800c314:	0801a58c 	.word	0x0801a58c
 800c318:	0801a5b8 	.word	0x0801a5b8

0800c31c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af02      	add	r7, sp, #8
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	807b      	strh	r3, [r7, #2]
 800c328:	4613      	mov	r3, r2
 800c32a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c32c:	883b      	ldrh	r3, [r7, #0]
 800c32e:	2b41      	cmp	r3, #65	; 0x41
 800c330:	d009      	beq.n	800c346 <pbuf_alloc_reference+0x2a>
 800c332:	883b      	ldrh	r3, [r7, #0]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d006      	beq.n	800c346 <pbuf_alloc_reference+0x2a>
 800c338:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <pbuf_alloc_reference+0x5c>)
 800c33a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c33e:	490f      	ldr	r1, [pc, #60]	; (800c37c <pbuf_alloc_reference+0x60>)
 800c340:	480f      	ldr	r0, [pc, #60]	; (800c380 <pbuf_alloc_reference+0x64>)
 800c342:	f00c fb7f 	bl	8018a44 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c346:	200b      	movs	r0, #11
 800c348:	f7ff fb22 	bl	800b990 <memp_malloc>
 800c34c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c354:	2300      	movs	r3, #0
 800c356:	e00b      	b.n	800c370 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c358:	8879      	ldrh	r1, [r7, #2]
 800c35a:	887a      	ldrh	r2, [r7, #2]
 800c35c:	2300      	movs	r3, #0
 800c35e:	9301      	str	r3, [sp, #4]
 800c360:	883b      	ldrh	r3, [r7, #0]
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	460b      	mov	r3, r1
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f7ff feb7 	bl	800c0dc <pbuf_init_alloced_pbuf>
  return p;
 800c36e:	68fb      	ldr	r3, [r7, #12]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	0801a4d0 	.word	0x0801a4d0
 800c37c:	0801a5d4 	.word	0x0801a5d4
 800c380:	0801a530 	.word	0x0801a530

0800c384 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b088      	sub	sp, #32
 800c388:	af02      	add	r7, sp, #8
 800c38a:	607b      	str	r3, [r7, #4]
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]
 800c390:	460b      	mov	r3, r1
 800c392:	81bb      	strh	r3, [r7, #12]
 800c394:	4613      	mov	r3, r2
 800c396:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
 800c39a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c39c:	8a7b      	ldrh	r3, [r7, #18]
 800c39e:	3303      	adds	r3, #3
 800c3a0:	f023 0203 	bic.w	r2, r3, #3
 800c3a4:	89bb      	ldrh	r3, [r7, #12]
 800c3a6:	441a      	add	r2, r3
 800c3a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d901      	bls.n	800c3b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e018      	b.n	800c3e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d007      	beq.n	800c3c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c3b8:	8a7b      	ldrh	r3, [r7, #18]
 800c3ba:	3303      	adds	r3, #3
 800c3bc:	f023 0303 	bic.w	r3, r3, #3
 800c3c0:	6a3a      	ldr	r2, [r7, #32]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	617b      	str	r3, [r7, #20]
 800c3c6:	e001      	b.n	800c3cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	89b9      	ldrh	r1, [r7, #12]
 800c3d0:	89ba      	ldrh	r2, [r7, #12]
 800c3d2:	2302      	movs	r3, #2
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	897b      	ldrh	r3, [r7, #10]
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	460b      	mov	r3, r1
 800c3dc:	6979      	ldr	r1, [r7, #20]
 800c3de:	f7ff fe7d 	bl	800c0dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c3e2:	687b      	ldr	r3, [r7, #4]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3718      	adds	r7, #24
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d106      	bne.n	800c40c <pbuf_realloc+0x20>
 800c3fe:	4b3a      	ldr	r3, [pc, #232]	; (800c4e8 <pbuf_realloc+0xfc>)
 800c400:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c404:	4939      	ldr	r1, [pc, #228]	; (800c4ec <pbuf_realloc+0x100>)
 800c406:	483a      	ldr	r0, [pc, #232]	; (800c4f0 <pbuf_realloc+0x104>)
 800c408:	f00c fb1c 	bl	8018a44 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	891b      	ldrh	r3, [r3, #8]
 800c410:	887a      	ldrh	r2, [r7, #2]
 800c412:	429a      	cmp	r2, r3
 800c414:	d263      	bcs.n	800c4de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	891a      	ldrh	r2, [r3, #8]
 800c41a:	887b      	ldrh	r3, [r7, #2]
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c420:	887b      	ldrh	r3, [r7, #2]
 800c422:	817b      	strh	r3, [r7, #10]
  q = p;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c428:	e018      	b.n	800c45c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	895b      	ldrh	r3, [r3, #10]
 800c42e:	897a      	ldrh	r2, [r7, #10]
 800c430:	1ad3      	subs	r3, r2, r3
 800c432:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	891a      	ldrh	r2, [r3, #8]
 800c438:	893b      	ldrh	r3, [r7, #8]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d106      	bne.n	800c45c <pbuf_realloc+0x70>
 800c44e:	4b26      	ldr	r3, [pc, #152]	; (800c4e8 <pbuf_realloc+0xfc>)
 800c450:	f240 12af 	movw	r2, #431	; 0x1af
 800c454:	4927      	ldr	r1, [pc, #156]	; (800c4f4 <pbuf_realloc+0x108>)
 800c456:	4826      	ldr	r0, [pc, #152]	; (800c4f0 <pbuf_realloc+0x104>)
 800c458:	f00c faf4 	bl	8018a44 <iprintf>
  while (rem_len > q->len) {
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	895b      	ldrh	r3, [r3, #10]
 800c460:	897a      	ldrh	r2, [r7, #10]
 800c462:	429a      	cmp	r2, r3
 800c464:	d8e1      	bhi.n	800c42a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	7b1b      	ldrb	r3, [r3, #12]
 800c46a:	f003 030f 	and.w	r3, r3, #15
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d121      	bne.n	800c4b6 <pbuf_realloc+0xca>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	895b      	ldrh	r3, [r3, #10]
 800c476:	897a      	ldrh	r2, [r7, #10]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d01c      	beq.n	800c4b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	7b5b      	ldrb	r3, [r3, #13]
 800c480:	f003 0302 	and.w	r3, r3, #2
 800c484:	2b00      	cmp	r3, #0
 800c486:	d116      	bne.n	800c4b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	b29a      	uxth	r2, r3
 800c492:	897b      	ldrh	r3, [r7, #10]
 800c494:	4413      	add	r3, r2
 800c496:	b29b      	uxth	r3, r3
 800c498:	4619      	mov	r1, r3
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7fe ffa2 	bl	800b3e4 <mem_trim>
 800c4a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d106      	bne.n	800c4b6 <pbuf_realloc+0xca>
 800c4a8:	4b0f      	ldr	r3, [pc, #60]	; (800c4e8 <pbuf_realloc+0xfc>)
 800c4aa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c4ae:	4912      	ldr	r1, [pc, #72]	; (800c4f8 <pbuf_realloc+0x10c>)
 800c4b0:	480f      	ldr	r0, [pc, #60]	; (800c4f0 <pbuf_realloc+0x104>)
 800c4b2:	f00c fac7 	bl	8018a44 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	897a      	ldrh	r2, [r7, #10]
 800c4ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	895a      	ldrh	r2, [r3, #10]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d004      	beq.n	800c4d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 f911 	bl	800c6f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]
 800c4dc:	e000      	b.n	800c4e0 <pbuf_realloc+0xf4>
    return;
 800c4de:	bf00      	nop

}
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	0801a4d0 	.word	0x0801a4d0
 800c4ec:	0801a5e8 	.word	0x0801a5e8
 800c4f0:	0801a530 	.word	0x0801a530
 800c4f4:	0801a600 	.word	0x0801a600
 800c4f8:	0801a618 	.word	0x0801a618

0800c4fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	4613      	mov	r3, r2
 800c508:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d106      	bne.n	800c51e <pbuf_add_header_impl+0x22>
 800c510:	4b2b      	ldr	r3, [pc, #172]	; (800c5c0 <pbuf_add_header_impl+0xc4>)
 800c512:	f240 12df 	movw	r2, #479	; 0x1df
 800c516:	492b      	ldr	r1, [pc, #172]	; (800c5c4 <pbuf_add_header_impl+0xc8>)
 800c518:	482b      	ldr	r0, [pc, #172]	; (800c5c8 <pbuf_add_header_impl+0xcc>)
 800c51a:	f00c fa93 	bl	8018a44 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d003      	beq.n	800c52c <pbuf_add_header_impl+0x30>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c52a:	d301      	bcc.n	800c530 <pbuf_add_header_impl+0x34>
    return 1;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e043      	b.n	800c5b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <pbuf_add_header_impl+0x3e>
    return 0;
 800c536:	2300      	movs	r3, #0
 800c538:	e03e      	b.n	800c5b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	891a      	ldrh	r2, [r3, #8]
 800c542:	8a7b      	ldrh	r3, [r7, #18]
 800c544:	4413      	add	r3, r2
 800c546:	b29b      	uxth	r3, r3
 800c548:	8a7a      	ldrh	r2, [r7, #18]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d901      	bls.n	800c552 <pbuf_add_header_impl+0x56>
    return 1;
 800c54e:	2301      	movs	r3, #1
 800c550:	e032      	b.n	800c5b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	7b1b      	ldrb	r3, [r3, #12]
 800c556:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c558:	8a3b      	ldrh	r3, [r7, #16]
 800c55a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00c      	beq.n	800c57c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	425b      	negs	r3, r3
 800c56a:	4413      	add	r3, r2
 800c56c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3310      	adds	r3, #16
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	429a      	cmp	r2, r3
 800c576:	d20d      	bcs.n	800c594 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c578:	2301      	movs	r3, #1
 800c57a:	e01d      	b.n	800c5b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d006      	beq.n	800c590 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	425b      	negs	r3, r3
 800c58a:	4413      	add	r3, r2
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	e001      	b.n	800c594 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c590:	2301      	movs	r3, #1
 800c592:	e011      	b.n	800c5b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	895a      	ldrh	r2, [r3, #10]
 800c59e:	8a7b      	ldrh	r3, [r7, #18]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	891a      	ldrh	r2, [r3, #8]
 800c5ac:	8a7b      	ldrh	r3, [r7, #18]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	811a      	strh	r2, [r3, #8]


  return 0;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3718      	adds	r7, #24
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	0801a4d0 	.word	0x0801a4d0
 800c5c4:	0801a634 	.word	0x0801a634
 800c5c8:	0801a530 	.word	0x0801a530

0800c5cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff ff8e 	bl	800c4fc <pbuf_add_header_impl>
 800c5e0:	4603      	mov	r3, r0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
	...

0800c5ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d106      	bne.n	800c60a <pbuf_remove_header+0x1e>
 800c5fc:	4b20      	ldr	r3, [pc, #128]	; (800c680 <pbuf_remove_header+0x94>)
 800c5fe:	f240 224b 	movw	r2, #587	; 0x24b
 800c602:	4920      	ldr	r1, [pc, #128]	; (800c684 <pbuf_remove_header+0x98>)
 800c604:	4820      	ldr	r0, [pc, #128]	; (800c688 <pbuf_remove_header+0x9c>)
 800c606:	f00c fa1d 	bl	8018a44 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d003      	beq.n	800c618 <pbuf_remove_header+0x2c>
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c616:	d301      	bcc.n	800c61c <pbuf_remove_header+0x30>
    return 1;
 800c618:	2301      	movs	r3, #1
 800c61a:	e02c      	b.n	800c676 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <pbuf_remove_header+0x3a>
    return 0;
 800c622:	2300      	movs	r3, #0
 800c624:	e027      	b.n	800c676 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	895b      	ldrh	r3, [r3, #10]
 800c62e:	89fa      	ldrh	r2, [r7, #14]
 800c630:	429a      	cmp	r2, r3
 800c632:	d908      	bls.n	800c646 <pbuf_remove_header+0x5a>
 800c634:	4b12      	ldr	r3, [pc, #72]	; (800c680 <pbuf_remove_header+0x94>)
 800c636:	f240 2255 	movw	r2, #597	; 0x255
 800c63a:	4914      	ldr	r1, [pc, #80]	; (800c68c <pbuf_remove_header+0xa0>)
 800c63c:	4812      	ldr	r0, [pc, #72]	; (800c688 <pbuf_remove_header+0x9c>)
 800c63e:	f00c fa01 	bl	8018a44 <iprintf>
 800c642:	2301      	movs	r3, #1
 800c644:	e017      	b.n	800c676 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	441a      	add	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	895a      	ldrh	r2, [r3, #10]
 800c65c:	89fb      	ldrh	r3, [r7, #14]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	b29a      	uxth	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	891a      	ldrh	r2, [r3, #8]
 800c66a:	89fb      	ldrh	r3, [r7, #14]
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	b29a      	uxth	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	0801a4d0 	.word	0x0801a4d0
 800c684:	0801a634 	.word	0x0801a634
 800c688:	0801a530 	.word	0x0801a530
 800c68c:	0801a640 	.word	0x0801a640

0800c690 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	460b      	mov	r3, r1
 800c69a:	807b      	strh	r3, [r7, #2]
 800c69c:	4613      	mov	r3, r2
 800c69e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c6a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	da08      	bge.n	800c6ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c6a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6ac:	425b      	negs	r3, r3
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff ff9b 	bl	800c5ec <pbuf_remove_header>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	e007      	b.n	800c6ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c6ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6be:	787a      	ldrb	r2, [r7, #1]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff ff1a 	bl	800c4fc <pbuf_add_header_impl>
 800c6c8:	4603      	mov	r3, r0
  }
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	460b      	mov	r3, r1
 800c6dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c6de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7ff ffd2 	bl	800c690 <pbuf_header_impl>
 800c6ec:	4603      	mov	r3, r0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10b      	bne.n	800c71e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d106      	bne.n	800c71a <pbuf_free+0x22>
 800c70c:	4b3b      	ldr	r3, [pc, #236]	; (800c7fc <pbuf_free+0x104>)
 800c70e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c712:	493b      	ldr	r1, [pc, #236]	; (800c800 <pbuf_free+0x108>)
 800c714:	483b      	ldr	r0, [pc, #236]	; (800c804 <pbuf_free+0x10c>)
 800c716:	f00c f995 	bl	8018a44 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	e069      	b.n	800c7f2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c722:	e062      	b.n	800c7ea <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c724:	f00b fc16 	bl	8017f54 <sys_arch_protect>
 800c728:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	7b9b      	ldrb	r3, [r3, #14]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d106      	bne.n	800c740 <pbuf_free+0x48>
 800c732:	4b32      	ldr	r3, [pc, #200]	; (800c7fc <pbuf_free+0x104>)
 800c734:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c738:	4933      	ldr	r1, [pc, #204]	; (800c808 <pbuf_free+0x110>)
 800c73a:	4832      	ldr	r0, [pc, #200]	; (800c804 <pbuf_free+0x10c>)
 800c73c:	f00c f982 	bl	8018a44 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	7b9b      	ldrb	r3, [r3, #14]
 800c744:	3b01      	subs	r3, #1
 800c746:	b2da      	uxtb	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	739a      	strb	r2, [r3, #14]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	7b9b      	ldrb	r3, [r3, #14]
 800c750:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c752:	69b8      	ldr	r0, [r7, #24]
 800c754:	f00b fc0c 	bl	8017f70 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c758:	7dfb      	ldrb	r3, [r7, #23]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d143      	bne.n	800c7e6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	7b1b      	ldrb	r3, [r3, #12]
 800c768:	f003 030f 	and.w	r3, r3, #15
 800c76c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	7b5b      	ldrb	r3, [r3, #13]
 800c772:	f003 0302 	and.w	r3, r3, #2
 800c776:	2b00      	cmp	r3, #0
 800c778:	d011      	beq.n	800c79e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d106      	bne.n	800c794 <pbuf_free+0x9c>
 800c786:	4b1d      	ldr	r3, [pc, #116]	; (800c7fc <pbuf_free+0x104>)
 800c788:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c78c:	491f      	ldr	r1, [pc, #124]	; (800c80c <pbuf_free+0x114>)
 800c78e:	481d      	ldr	r0, [pc, #116]	; (800c804 <pbuf_free+0x10c>)
 800c790:	f00c f958 	bl	8018a44 <iprintf>
        pc->custom_free_function(p);
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	4798      	blx	r3
 800c79c:	e01d      	b.n	800c7da <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d104      	bne.n	800c7ae <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c7a4:	6879      	ldr	r1, [r7, #4]
 800c7a6:	200c      	movs	r0, #12
 800c7a8:	f7ff f968 	bl	800ba7c <memp_free>
 800c7ac:	e015      	b.n	800c7da <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d104      	bne.n	800c7be <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c7b4:	6879      	ldr	r1, [r7, #4]
 800c7b6:	200b      	movs	r0, #11
 800c7b8:	f7ff f960 	bl	800ba7c <memp_free>
 800c7bc:	e00d      	b.n	800c7da <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c7be:	7bfb      	ldrb	r3, [r7, #15]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d103      	bne.n	800c7cc <pbuf_free+0xd4>
          mem_free(p);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7fe fd7d 	bl	800b2c4 <mem_free>
 800c7ca:	e006      	b.n	800c7da <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c7cc:	4b0b      	ldr	r3, [pc, #44]	; (800c7fc <pbuf_free+0x104>)
 800c7ce:	f240 320f 	movw	r2, #783	; 0x30f
 800c7d2:	490f      	ldr	r1, [pc, #60]	; (800c810 <pbuf_free+0x118>)
 800c7d4:	480b      	ldr	r0, [pc, #44]	; (800c804 <pbuf_free+0x10c>)
 800c7d6:	f00c f935 	bl	8018a44 <iprintf>
        }
      }
      count++;
 800c7da:	7ffb      	ldrb	r3, [r7, #31]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	607b      	str	r3, [r7, #4]
 800c7e4:	e001      	b.n	800c7ea <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d199      	bne.n	800c724 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c7f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3720      	adds	r7, #32
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	0801a4d0 	.word	0x0801a4d0
 800c800:	0801a634 	.word	0x0801a634
 800c804:	0801a530 	.word	0x0801a530
 800c808:	0801a660 	.word	0x0801a660
 800c80c:	0801a678 	.word	0x0801a678
 800c810:	0801a69c 	.word	0x0801a69c

0800c814 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c820:	e005      	b.n	800c82e <pbuf_clen+0x1a>
    ++len;
 800c822:	89fb      	ldrh	r3, [r7, #14]
 800c824:	3301      	adds	r3, #1
 800c826:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1f6      	bne.n	800c822 <pbuf_clen+0xe>
  }
  return len;
 800c834:	89fb      	ldrh	r3, [r7, #14]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bc80      	pop	{r7}
 800c83e:	4770      	bx	lr

0800c840 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d016      	beq.n	800c87c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c84e:	f00b fb81 	bl	8017f54 <sys_arch_protect>
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	7b9b      	ldrb	r3, [r3, #14]
 800c858:	3301      	adds	r3, #1
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	739a      	strb	r2, [r3, #14]
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f00b fb85 	bl	8017f70 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	7b9b      	ldrb	r3, [r3, #14]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d106      	bne.n	800c87c <pbuf_ref+0x3c>
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <pbuf_ref+0x44>)
 800c870:	f240 3242 	movw	r2, #834	; 0x342
 800c874:	4904      	ldr	r1, [pc, #16]	; (800c888 <pbuf_ref+0x48>)
 800c876:	4805      	ldr	r0, [pc, #20]	; (800c88c <pbuf_ref+0x4c>)
 800c878:	f00c f8e4 	bl	8018a44 <iprintf>
  }
}
 800c87c:	bf00      	nop
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	0801a4d0 	.word	0x0801a4d0
 800c888:	0801a6b0 	.word	0x0801a6b0
 800c88c:	0801a530 	.word	0x0801a530

0800c890 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <pbuf_cat+0x16>
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d107      	bne.n	800c8b6 <pbuf_cat+0x26>
 800c8a6:	4b20      	ldr	r3, [pc, #128]	; (800c928 <pbuf_cat+0x98>)
 800c8a8:	f240 3259 	movw	r2, #857	; 0x359
 800c8ac:	491f      	ldr	r1, [pc, #124]	; (800c92c <pbuf_cat+0x9c>)
 800c8ae:	4820      	ldr	r0, [pc, #128]	; (800c930 <pbuf_cat+0xa0>)
 800c8b0:	f00c f8c8 	bl	8018a44 <iprintf>
 800c8b4:	e034      	b.n	800c920 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	60fb      	str	r3, [r7, #12]
 800c8ba:	e00a      	b.n	800c8d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	891a      	ldrh	r2, [r3, #8]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	891b      	ldrh	r3, [r3, #8]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1f0      	bne.n	800c8bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	891a      	ldrh	r2, [r3, #8]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	895b      	ldrh	r3, [r3, #10]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d006      	beq.n	800c8f4 <pbuf_cat+0x64>
 800c8e6:	4b10      	ldr	r3, [pc, #64]	; (800c928 <pbuf_cat+0x98>)
 800c8e8:	f240 3262 	movw	r2, #866	; 0x362
 800c8ec:	4911      	ldr	r1, [pc, #68]	; (800c934 <pbuf_cat+0xa4>)
 800c8ee:	4810      	ldr	r0, [pc, #64]	; (800c930 <pbuf_cat+0xa0>)
 800c8f0:	f00c f8a8 	bl	8018a44 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d006      	beq.n	800c90a <pbuf_cat+0x7a>
 800c8fc:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <pbuf_cat+0x98>)
 800c8fe:	f240 3263 	movw	r2, #867	; 0x363
 800c902:	490d      	ldr	r1, [pc, #52]	; (800c938 <pbuf_cat+0xa8>)
 800c904:	480a      	ldr	r0, [pc, #40]	; (800c930 <pbuf_cat+0xa0>)
 800c906:	f00c f89d 	bl	8018a44 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	891a      	ldrh	r2, [r3, #8]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	891b      	ldrh	r3, [r3, #8]
 800c912:	4413      	add	r3, r2
 800c914:	b29a      	uxth	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	0801a4d0 	.word	0x0801a4d0
 800c92c:	0801a6c4 	.word	0x0801a6c4
 800c930:	0801a530 	.word	0x0801a530
 800c934:	0801a6fc 	.word	0x0801a6fc
 800c938:	0801a72c 	.word	0x0801a72c

0800c93c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff ffa1 	bl	800c890 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c94e:	6838      	ldr	r0, [r7, #0]
 800c950:	f7ff ff76 	bl	800c840 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c966:	2300      	movs	r3, #0
 800c968:	617b      	str	r3, [r7, #20]
 800c96a:	2300      	movs	r3, #0
 800c96c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d008      	beq.n	800c986 <pbuf_copy+0x2a>
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d005      	beq.n	800c986 <pbuf_copy+0x2a>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	891a      	ldrh	r2, [r3, #8]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	891b      	ldrh	r3, [r3, #8]
 800c982:	429a      	cmp	r2, r3
 800c984:	d209      	bcs.n	800c99a <pbuf_copy+0x3e>
 800c986:	4b57      	ldr	r3, [pc, #348]	; (800cae4 <pbuf_copy+0x188>)
 800c988:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c98c:	4956      	ldr	r1, [pc, #344]	; (800cae8 <pbuf_copy+0x18c>)
 800c98e:	4857      	ldr	r0, [pc, #348]	; (800caec <pbuf_copy+0x190>)
 800c990:	f00c f858 	bl	8018a44 <iprintf>
 800c994:	f06f 030f 	mvn.w	r3, #15
 800c998:	e09f      	b.n	800cada <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	895b      	ldrh	r3, [r3, #10]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	1ad2      	subs	r2, r2, r3
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	895b      	ldrh	r3, [r3, #10]
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	1acb      	subs	r3, r1, r3
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d306      	bcc.n	800c9c0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	895b      	ldrh	r3, [r3, #10]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	60fb      	str	r3, [r7, #12]
 800c9be:	e005      	b.n	800c9cc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	895b      	ldrh	r3, [r3, #10]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685a      	ldr	r2, [r3, #4]
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	18d0      	adds	r0, r2, r3
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	4413      	add	r3, r2
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	4619      	mov	r1, r3
 800c9e0:	f00b ff3c 	bl	801885c <memcpy>
    offset_to += len;
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	895b      	ldrh	r3, [r3, #10]
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d906      	bls.n	800ca0e <pbuf_copy+0xb2>
 800ca00:	4b38      	ldr	r3, [pc, #224]	; (800cae4 <pbuf_copy+0x188>)
 800ca02:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ca06:	493a      	ldr	r1, [pc, #232]	; (800caf0 <pbuf_copy+0x194>)
 800ca08:	4838      	ldr	r0, [pc, #224]	; (800caec <pbuf_copy+0x190>)
 800ca0a:	f00c f81b 	bl	8018a44 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	895b      	ldrh	r3, [r3, #10]
 800ca12:	461a      	mov	r2, r3
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d906      	bls.n	800ca28 <pbuf_copy+0xcc>
 800ca1a:	4b32      	ldr	r3, [pc, #200]	; (800cae4 <pbuf_copy+0x188>)
 800ca1c:	f240 32da 	movw	r2, #986	; 0x3da
 800ca20:	4934      	ldr	r1, [pc, #208]	; (800caf4 <pbuf_copy+0x198>)
 800ca22:	4832      	ldr	r0, [pc, #200]	; (800caec <pbuf_copy+0x190>)
 800ca24:	f00c f80e 	bl	8018a44 <iprintf>
    if (offset_from >= p_from->len) {
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	895b      	ldrh	r3, [r3, #10]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d304      	bcc.n	800ca3e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	895b      	ldrh	r3, [r3, #10]
 800ca42:	461a      	mov	r2, r3
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d114      	bne.n	800ca74 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10c      	bne.n	800ca74 <pbuf_copy+0x118>
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d009      	beq.n	800ca74 <pbuf_copy+0x118>
 800ca60:	4b20      	ldr	r3, [pc, #128]	; (800cae4 <pbuf_copy+0x188>)
 800ca62:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ca66:	4924      	ldr	r1, [pc, #144]	; (800caf8 <pbuf_copy+0x19c>)
 800ca68:	4820      	ldr	r0, [pc, #128]	; (800caec <pbuf_copy+0x190>)
 800ca6a:	f00b ffeb 	bl	8018a44 <iprintf>
 800ca6e:	f06f 030f 	mvn.w	r3, #15
 800ca72:	e032      	b.n	800cada <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d013      	beq.n	800caa2 <pbuf_copy+0x146>
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	895a      	ldrh	r2, [r3, #10]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	891b      	ldrh	r3, [r3, #8]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d10d      	bne.n	800caa2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d009      	beq.n	800caa2 <pbuf_copy+0x146>
 800ca8e:	4b15      	ldr	r3, [pc, #84]	; (800cae4 <pbuf_copy+0x188>)
 800ca90:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ca94:	4919      	ldr	r1, [pc, #100]	; (800cafc <pbuf_copy+0x1a0>)
 800ca96:	4815      	ldr	r0, [pc, #84]	; (800caec <pbuf_copy+0x190>)
 800ca98:	f00b ffd4 	bl	8018a44 <iprintf>
 800ca9c:	f06f 0305 	mvn.w	r3, #5
 800caa0:	e01b      	b.n	800cada <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d013      	beq.n	800cad0 <pbuf_copy+0x174>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	895a      	ldrh	r2, [r3, #10]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	891b      	ldrh	r3, [r3, #8]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d10d      	bne.n	800cad0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d009      	beq.n	800cad0 <pbuf_copy+0x174>
 800cabc:	4b09      	ldr	r3, [pc, #36]	; (800cae4 <pbuf_copy+0x188>)
 800cabe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cac2:	490e      	ldr	r1, [pc, #56]	; (800cafc <pbuf_copy+0x1a0>)
 800cac4:	4809      	ldr	r0, [pc, #36]	; (800caec <pbuf_copy+0x190>)
 800cac6:	f00b ffbd 	bl	8018a44 <iprintf>
 800caca:	f06f 0305 	mvn.w	r3, #5
 800cace:	e004      	b.n	800cada <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f47f af61 	bne.w	800c99a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	0801a4d0 	.word	0x0801a4d0
 800cae8:	0801a778 	.word	0x0801a778
 800caec:	0801a530 	.word	0x0801a530
 800caf0:	0801a7a8 	.word	0x0801a7a8
 800caf4:	0801a7c0 	.word	0x0801a7c0
 800caf8:	0801a7dc 	.word	0x0801a7dc
 800cafc:	0801a7ec 	.word	0x0801a7ec

0800cb00 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b088      	sub	sp, #32
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	460b      	mov	r3, r1
 800cb10:	80fb      	strh	r3, [r7, #6]
 800cb12:	4613      	mov	r3, r2
 800cb14:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d108      	bne.n	800cb36 <pbuf_copy_partial+0x36>
 800cb24:	4b2b      	ldr	r3, [pc, #172]	; (800cbd4 <pbuf_copy_partial+0xd4>)
 800cb26:	f240 420a 	movw	r2, #1034	; 0x40a
 800cb2a:	492b      	ldr	r1, [pc, #172]	; (800cbd8 <pbuf_copy_partial+0xd8>)
 800cb2c:	482b      	ldr	r0, [pc, #172]	; (800cbdc <pbuf_copy_partial+0xdc>)
 800cb2e:	f00b ff89 	bl	8018a44 <iprintf>
 800cb32:	2300      	movs	r3, #0
 800cb34:	e04a      	b.n	800cbcc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d108      	bne.n	800cb4e <pbuf_copy_partial+0x4e>
 800cb3c:	4b25      	ldr	r3, [pc, #148]	; (800cbd4 <pbuf_copy_partial+0xd4>)
 800cb3e:	f240 420b 	movw	r2, #1035	; 0x40b
 800cb42:	4927      	ldr	r1, [pc, #156]	; (800cbe0 <pbuf_copy_partial+0xe0>)
 800cb44:	4825      	ldr	r0, [pc, #148]	; (800cbdc <pbuf_copy_partial+0xdc>)
 800cb46:	f00b ff7d 	bl	8018a44 <iprintf>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	e03e      	b.n	800cbcc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	61fb      	str	r3, [r7, #28]
 800cb52:	e034      	b.n	800cbbe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cb54:	88bb      	ldrh	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <pbuf_copy_partial+0x70>
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	895b      	ldrh	r3, [r3, #10]
 800cb5e:	88ba      	ldrh	r2, [r7, #4]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d305      	bcc.n	800cb70 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	895b      	ldrh	r3, [r3, #10]
 800cb68:	88ba      	ldrh	r2, [r7, #4]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	80bb      	strh	r3, [r7, #4]
 800cb6e:	e023      	b.n	800cbb8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	895a      	ldrh	r2, [r3, #10]
 800cb74:	88bb      	ldrh	r3, [r7, #4]
 800cb76:	1ad3      	subs	r3, r2, r3
 800cb78:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cb7a:	8b3a      	ldrh	r2, [r7, #24]
 800cb7c:	88fb      	ldrh	r3, [r7, #6]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d901      	bls.n	800cb86 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cb82:	88fb      	ldrh	r3, [r7, #6]
 800cb84:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cb86:	8b7b      	ldrh	r3, [r7, #26]
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	18d0      	adds	r0, r2, r3
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	685a      	ldr	r2, [r3, #4]
 800cb90:	88bb      	ldrh	r3, [r7, #4]
 800cb92:	4413      	add	r3, r2
 800cb94:	8b3a      	ldrh	r2, [r7, #24]
 800cb96:	4619      	mov	r1, r3
 800cb98:	f00b fe60 	bl	801885c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cb9c:	8afa      	ldrh	r2, [r7, #22]
 800cb9e:	8b3b      	ldrh	r3, [r7, #24]
 800cba0:	4413      	add	r3, r2
 800cba2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cba4:	8b7a      	ldrh	r2, [r7, #26]
 800cba6:	8b3b      	ldrh	r3, [r7, #24]
 800cba8:	4413      	add	r3, r2
 800cbaa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cbac:	88fa      	ldrh	r2, [r7, #6]
 800cbae:	8b3b      	ldrh	r3, [r7, #24]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	61fb      	str	r3, [r7, #28]
 800cbbe:	88fb      	ldrh	r3, [r7, #6]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <pbuf_copy_partial+0xca>
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1c4      	bne.n	800cb54 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cbca:	8afb      	ldrh	r3, [r7, #22]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3720      	adds	r7, #32
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	0801a4d0 	.word	0x0801a4d0
 800cbd8:	0801a818 	.word	0x0801a818
 800cbdc:	0801a530 	.word	0x0801a530
 800cbe0:	0801a838 	.word	0x0801a838

0800cbe4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	460b      	mov	r3, r1
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800cbf2:	897b      	ldrh	r3, [r7, #10]
 800cbf4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800cbfa:	e007      	b.n	800cc0c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	895b      	ldrh	r3, [r3, #10]
 800cc00:	8afa      	ldrh	r2, [r7, #22]
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d004      	beq.n	800cc1c <pbuf_skip_const+0x38>
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	895b      	ldrh	r3, [r3, #10]
 800cc16:	8afa      	ldrh	r2, [r7, #22]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d2ef      	bcs.n	800cbfc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	8afa      	ldrh	r2, [r7, #22]
 800cc26:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800cc28:	693b      	ldr	r3, [r7, #16]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	371c      	adds	r7, #28
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bc80      	pop	{r7}
 800cc32:	4770      	bx	lr

0800cc34 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	603a      	str	r2, [r7, #0]
 800cc3e:	71fb      	strb	r3, [r7, #7]
 800cc40:	460b      	mov	r3, r1
 800cc42:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	8919      	ldrh	r1, [r3, #8]
 800cc48:	88ba      	ldrh	r2, [r7, #4]
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff fa6f 	bl	800c130 <pbuf_alloc>
 800cc52:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d101      	bne.n	800cc5e <pbuf_clone+0x2a>
    return NULL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e011      	b.n	800cc82 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f7ff fe7b 	bl	800c95c <pbuf_copy>
 800cc66:	4603      	mov	r3, r0
 800cc68:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cc6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d006      	beq.n	800cc80 <pbuf_clone+0x4c>
 800cc72:	4b06      	ldr	r3, [pc, #24]	; (800cc8c <pbuf_clone+0x58>)
 800cc74:	f240 5224 	movw	r2, #1316	; 0x524
 800cc78:	4905      	ldr	r1, [pc, #20]	; (800cc90 <pbuf_clone+0x5c>)
 800cc7a:	4806      	ldr	r0, [pc, #24]	; (800cc94 <pbuf_clone+0x60>)
 800cc7c:	f00b fee2 	bl	8018a44 <iprintf>
  return q;
 800cc80:	68fb      	ldr	r3, [r7, #12]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	0801a4d0 	.word	0x0801a4d0
 800cc90:	0801a944 	.word	0x0801a944
 800cc94:	0801a530 	.word	0x0801a530

0800cc98 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800cca4:	887b      	ldrh	r3, [r7, #2]
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 f80c 	bl	800ccc6 <pbuf_try_get_at>
 800ccae:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	db02      	blt.n	800ccbc <pbuf_get_at+0x24>
    return (u8_t)ret;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	e000      	b.n	800ccbe <pbuf_get_at+0x26>
  }
  return 0;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
 800ccce:	460b      	mov	r3, r1
 800ccd0:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800ccd2:	f107 020a 	add.w	r2, r7, #10
 800ccd6:	887b      	ldrh	r3, [r7, #2]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff ff82 	bl	800cbe4 <pbuf_skip_const>
 800cce0:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00a      	beq.n	800ccfe <pbuf_try_get_at+0x38>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	895a      	ldrh	r2, [r3, #10]
 800ccec:	897b      	ldrh	r3, [r7, #10]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d905      	bls.n	800ccfe <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	897a      	ldrh	r2, [r7, #10]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	e001      	b.n	800cd02 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800ccfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cd10:	f00b feb0 	bl	8018a74 <rand>
 800cd14:	4603      	mov	r3, r0
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	4b01      	ldr	r3, [pc, #4]	; (800cd2c <tcp_init+0x20>)
 800cd26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cd28:	bf00      	nop
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	20000010 	.word	0x20000010

0800cd30 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	7d1b      	ldrb	r3, [r3, #20]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d105      	bne.n	800cd4c <tcp_free+0x1c>
 800cd40:	4b06      	ldr	r3, [pc, #24]	; (800cd5c <tcp_free+0x2c>)
 800cd42:	22d4      	movs	r2, #212	; 0xd4
 800cd44:	4906      	ldr	r1, [pc, #24]	; (800cd60 <tcp_free+0x30>)
 800cd46:	4807      	ldr	r0, [pc, #28]	; (800cd64 <tcp_free+0x34>)
 800cd48:	f00b fe7c 	bl	8018a44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	2001      	movs	r0, #1
 800cd50:	f7fe fe94 	bl	800ba7c <memp_free>
}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	0801a9d0 	.word	0x0801a9d0
 800cd60:	0801aa00 	.word	0x0801aa00
 800cd64:	0801aa14 	.word	0x0801aa14

0800cd68 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7d1b      	ldrb	r3, [r3, #20]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d105      	bne.n	800cd84 <tcp_free_listen+0x1c>
 800cd78:	4b06      	ldr	r3, [pc, #24]	; (800cd94 <tcp_free_listen+0x2c>)
 800cd7a:	22df      	movs	r2, #223	; 0xdf
 800cd7c:	4906      	ldr	r1, [pc, #24]	; (800cd98 <tcp_free_listen+0x30>)
 800cd7e:	4807      	ldr	r0, [pc, #28]	; (800cd9c <tcp_free_listen+0x34>)
 800cd80:	f00b fe60 	bl	8018a44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cd84:	6879      	ldr	r1, [r7, #4]
 800cd86:	2002      	movs	r0, #2
 800cd88:	f7fe fe78 	bl	800ba7c <memp_free>
}
 800cd8c:	bf00      	nop
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	0801a9d0 	.word	0x0801a9d0
 800cd98:	0801aa3c 	.word	0x0801aa3c
 800cd9c:	0801aa14 	.word	0x0801aa14

0800cda0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cda4:	f001 f898 	bl	800ded8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cda8:	4b07      	ldr	r3, [pc, #28]	; (800cdc8 <tcp_tmr+0x28>)
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	3301      	adds	r3, #1
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <tcp_tmr+0x28>)
 800cdb2:	701a      	strb	r2, [r3, #0]
 800cdb4:	4b04      	ldr	r3, [pc, #16]	; (800cdc8 <tcp_tmr+0x28>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	f003 0301 	and.w	r3, r3, #1
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cdc0:	f000 fd4a 	bl	800d858 <tcp_slowtmr>
  }
}
 800cdc4:	bf00      	nop
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	2000be45 	.word	0x2000be45

0800cdcc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d105      	bne.n	800cde8 <tcp_remove_listener+0x1c>
 800cddc:	4b0d      	ldr	r3, [pc, #52]	; (800ce14 <tcp_remove_listener+0x48>)
 800cdde:	22ff      	movs	r2, #255	; 0xff
 800cde0:	490d      	ldr	r1, [pc, #52]	; (800ce18 <tcp_remove_listener+0x4c>)
 800cde2:	480e      	ldr	r0, [pc, #56]	; (800ce1c <tcp_remove_listener+0x50>)
 800cde4:	f00b fe2e 	bl	8018a44 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	e00a      	b.n	800ce04 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d102      	bne.n	800cdfe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1f1      	bne.n	800cdee <tcp_remove_listener+0x22>
    }
  }
}
 800ce0a:	bf00      	nop
 800ce0c:	bf00      	nop
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	0801a9d0 	.word	0x0801a9d0
 800ce18:	0801aa58 	.word	0x0801aa58
 800ce1c:	0801aa14 	.word	0x0801aa14

0800ce20 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d106      	bne.n	800ce3c <tcp_listen_closed+0x1c>
 800ce2e:	4b14      	ldr	r3, [pc, #80]	; (800ce80 <tcp_listen_closed+0x60>)
 800ce30:	f240 1211 	movw	r2, #273	; 0x111
 800ce34:	4913      	ldr	r1, [pc, #76]	; (800ce84 <tcp_listen_closed+0x64>)
 800ce36:	4814      	ldr	r0, [pc, #80]	; (800ce88 <tcp_listen_closed+0x68>)
 800ce38:	f00b fe04 	bl	8018a44 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	7d1b      	ldrb	r3, [r3, #20]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d006      	beq.n	800ce52 <tcp_listen_closed+0x32>
 800ce44:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <tcp_listen_closed+0x60>)
 800ce46:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ce4a:	4910      	ldr	r1, [pc, #64]	; (800ce8c <tcp_listen_closed+0x6c>)
 800ce4c:	480e      	ldr	r0, [pc, #56]	; (800ce88 <tcp_listen_closed+0x68>)
 800ce4e:	f00b fdf9 	bl	8018a44 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ce52:	2301      	movs	r3, #1
 800ce54:	60fb      	str	r3, [r7, #12]
 800ce56:	e00b      	b.n	800ce70 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ce58:	4a0d      	ldr	r2, [pc, #52]	; (800ce90 <tcp_listen_closed+0x70>)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	6879      	ldr	r1, [r7, #4]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7ff ffb1 	bl	800cdcc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	60fb      	str	r3, [r7, #12]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d9f0      	bls.n	800ce58 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ce76:	bf00      	nop
 800ce78:	bf00      	nop
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	0801a9d0 	.word	0x0801a9d0
 800ce84:	0801aa80 	.word	0x0801aa80
 800ce88:	0801aa14 	.word	0x0801aa14
 800ce8c:	0801aa8c 	.word	0x0801aa8c
 800ce90:	0801cd9c 	.word	0x0801cd9c

0800ce94 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ce94:	b5b0      	push	{r4, r5, r7, lr}
 800ce96:	b088      	sub	sp, #32
 800ce98:	af04      	add	r7, sp, #16
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d106      	bne.n	800ceb4 <tcp_close_shutdown+0x20>
 800cea6:	4b63      	ldr	r3, [pc, #396]	; (800d034 <tcp_close_shutdown+0x1a0>)
 800cea8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ceac:	4962      	ldr	r1, [pc, #392]	; (800d038 <tcp_close_shutdown+0x1a4>)
 800ceae:	4863      	ldr	r0, [pc, #396]	; (800d03c <tcp_close_shutdown+0x1a8>)
 800ceb0:	f00b fdc8 	bl	8018a44 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d066      	beq.n	800cf88 <tcp_close_shutdown+0xf4>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7d1b      	ldrb	r3, [r3, #20]
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	d003      	beq.n	800ceca <tcp_close_shutdown+0x36>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	7d1b      	ldrb	r3, [r3, #20]
 800cec6:	2b07      	cmp	r3, #7
 800cec8:	d15e      	bne.n	800cf88 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d104      	bne.n	800cedc <tcp_close_shutdown+0x48>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ced6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ceda:	d055      	beq.n	800cf88 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	8b5b      	ldrh	r3, [r3, #26]
 800cee0:	f003 0310 	and.w	r3, r3, #16
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d106      	bne.n	800cef6 <tcp_close_shutdown+0x62>
 800cee8:	4b52      	ldr	r3, [pc, #328]	; (800d034 <tcp_close_shutdown+0x1a0>)
 800ceea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ceee:	4954      	ldr	r1, [pc, #336]	; (800d040 <tcp_close_shutdown+0x1ac>)
 800cef0:	4852      	ldr	r0, [pc, #328]	; (800d03c <tcp_close_shutdown+0x1a8>)
 800cef2:	f00b fda7 	bl	8018a44 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cefe:	687d      	ldr	r5, [r7, #4]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3304      	adds	r3, #4
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	8ad2      	ldrh	r2, [r2, #22]
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	8b09      	ldrh	r1, [r1, #24]
 800cf0c:	9102      	str	r1, [sp, #8]
 800cf0e:	9201      	str	r2, [sp, #4]
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	462b      	mov	r3, r5
 800cf14:	4622      	mov	r2, r4
 800cf16:	4601      	mov	r1, r0
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f005 fd93 	bl	8012a44 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f001 fb70 	bl	800e604 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cf24:	4b47      	ldr	r3, [pc, #284]	; (800d044 <tcp_close_shutdown+0x1b0>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d105      	bne.n	800cf3a <tcp_close_shutdown+0xa6>
 800cf2e:	4b45      	ldr	r3, [pc, #276]	; (800d044 <tcp_close_shutdown+0x1b0>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	4a43      	ldr	r2, [pc, #268]	; (800d044 <tcp_close_shutdown+0x1b0>)
 800cf36:	6013      	str	r3, [r2, #0]
 800cf38:	e013      	b.n	800cf62 <tcp_close_shutdown+0xce>
 800cf3a:	4b42      	ldr	r3, [pc, #264]	; (800d044 <tcp_close_shutdown+0x1b0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	e00c      	b.n	800cf5c <tcp_close_shutdown+0xc8>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d104      	bne.n	800cf56 <tcp_close_shutdown+0xc2>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	68da      	ldr	r2, [r3, #12]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	60da      	str	r2, [r3, #12]
 800cf54:	e005      	b.n	800cf62 <tcp_close_shutdown+0xce>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1ef      	bne.n	800cf42 <tcp_close_shutdown+0xae>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	60da      	str	r2, [r3, #12]
 800cf68:	4b37      	ldr	r3, [pc, #220]	; (800d048 <tcp_close_shutdown+0x1b4>)
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cf6e:	4b37      	ldr	r3, [pc, #220]	; (800d04c <tcp_close_shutdown+0x1b8>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d102      	bne.n	800cf7e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cf78:	f004 f808 	bl	8010f8c <tcp_trigger_input_pcb_close>
 800cf7c:	e002      	b.n	800cf84 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff fed6 	bl	800cd30 <tcp_free>
      }
      return ERR_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	e050      	b.n	800d02a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	7d1b      	ldrb	r3, [r3, #20]
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d03b      	beq.n	800d008 <tcp_close_shutdown+0x174>
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	dc44      	bgt.n	800d01e <tcp_close_shutdown+0x18a>
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <tcp_close_shutdown+0x10a>
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d02a      	beq.n	800cff2 <tcp_close_shutdown+0x15e>
 800cf9c:	e03f      	b.n	800d01e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	8adb      	ldrh	r3, [r3, #22]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d021      	beq.n	800cfea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cfa6:	4b2a      	ldr	r3, [pc, #168]	; (800d050 <tcp_close_shutdown+0x1bc>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d105      	bne.n	800cfbc <tcp_close_shutdown+0x128>
 800cfb0:	4b27      	ldr	r3, [pc, #156]	; (800d050 <tcp_close_shutdown+0x1bc>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	4a26      	ldr	r2, [pc, #152]	; (800d050 <tcp_close_shutdown+0x1bc>)
 800cfb8:	6013      	str	r3, [r2, #0]
 800cfba:	e013      	b.n	800cfe4 <tcp_close_shutdown+0x150>
 800cfbc:	4b24      	ldr	r3, [pc, #144]	; (800d050 <tcp_close_shutdown+0x1bc>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	60bb      	str	r3, [r7, #8]
 800cfc2:	e00c      	b.n	800cfde <tcp_close_shutdown+0x14a>
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d104      	bne.n	800cfd8 <tcp_close_shutdown+0x144>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	68da      	ldr	r2, [r3, #12]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	60da      	str	r2, [r3, #12]
 800cfd6:	e005      	b.n	800cfe4 <tcp_close_shutdown+0x150>
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	60bb      	str	r3, [r7, #8]
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1ef      	bne.n	800cfc4 <tcp_close_shutdown+0x130>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff fea0 	bl	800cd30 <tcp_free>
      break;
 800cff0:	e01a      	b.n	800d028 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff ff14 	bl	800ce20 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	4816      	ldr	r0, [pc, #88]	; (800d054 <tcp_close_shutdown+0x1c0>)
 800cffc:	f001 fb52 	bl	800e6a4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff feb1 	bl	800cd68 <tcp_free_listen>
      break;
 800d006:	e00f      	b.n	800d028 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d008:	6879      	ldr	r1, [r7, #4]
 800d00a:	480e      	ldr	r0, [pc, #56]	; (800d044 <tcp_close_shutdown+0x1b0>)
 800d00c:	f001 fb4a 	bl	800e6a4 <tcp_pcb_remove>
 800d010:	4b0d      	ldr	r3, [pc, #52]	; (800d048 <tcp_close_shutdown+0x1b4>)
 800d012:	2201      	movs	r2, #1
 800d014:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f7ff fe8a 	bl	800cd30 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d01c:	e004      	b.n	800d028 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 f81a 	bl	800d058 <tcp_close_shutdown_fin>
 800d024:	4603      	mov	r3, r0
 800d026:	e000      	b.n	800d02a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bdb0      	pop	{r4, r5, r7, pc}
 800d032:	bf00      	nop
 800d034:	0801a9d0 	.word	0x0801a9d0
 800d038:	0801aaa4 	.word	0x0801aaa4
 800d03c:	0801aa14 	.word	0x0801aa14
 800d040:	0801aac4 	.word	0x0801aac4
 800d044:	2000be3c 	.word	0x2000be3c
 800d048:	2000be44 	.word	0x2000be44
 800d04c:	2000be7c 	.word	0x2000be7c
 800d050:	2000be34 	.word	0x2000be34
 800d054:	2000be38 	.word	0x2000be38

0800d058 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d106      	bne.n	800d074 <tcp_close_shutdown_fin+0x1c>
 800d066:	4b2e      	ldr	r3, [pc, #184]	; (800d120 <tcp_close_shutdown_fin+0xc8>)
 800d068:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d06c:	492d      	ldr	r1, [pc, #180]	; (800d124 <tcp_close_shutdown_fin+0xcc>)
 800d06e:	482e      	ldr	r0, [pc, #184]	; (800d128 <tcp_close_shutdown_fin+0xd0>)
 800d070:	f00b fce8 	bl	8018a44 <iprintf>

  switch (pcb->state) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	7d1b      	ldrb	r3, [r3, #20]
 800d078:	2b07      	cmp	r3, #7
 800d07a:	d020      	beq.n	800d0be <tcp_close_shutdown_fin+0x66>
 800d07c:	2b07      	cmp	r3, #7
 800d07e:	dc2b      	bgt.n	800d0d8 <tcp_close_shutdown_fin+0x80>
 800d080:	2b03      	cmp	r3, #3
 800d082:	d002      	beq.n	800d08a <tcp_close_shutdown_fin+0x32>
 800d084:	2b04      	cmp	r3, #4
 800d086:	d00d      	beq.n	800d0a4 <tcp_close_shutdown_fin+0x4c>
 800d088:	e026      	b.n	800d0d8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f004 fde8 	bl	8011c60 <tcp_send_fin>
 800d090:	4603      	mov	r3, r0
 800d092:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d11f      	bne.n	800d0dc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2205      	movs	r2, #5
 800d0a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d0a2:	e01b      	b.n	800d0dc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f004 fddb 	bl	8011c60 <tcp_send_fin>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d114      	bne.n	800d0e0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2205      	movs	r2, #5
 800d0ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d0bc:	e010      	b.n	800d0e0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f004 fdce 	bl	8011c60 <tcp_send_fin>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d0c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d109      	bne.n	800d0e4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2209      	movs	r2, #9
 800d0d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d0d6:	e005      	b.n	800d0e4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e01c      	b.n	800d116 <tcp_close_shutdown_fin+0xbe>
      break;
 800d0dc:	bf00      	nop
 800d0de:	e002      	b.n	800d0e6 <tcp_close_shutdown_fin+0x8e>
      break;
 800d0e0:	bf00      	nop
 800d0e2:	e000      	b.n	800d0e6 <tcp_close_shutdown_fin+0x8e>
      break;
 800d0e4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d103      	bne.n	800d0f6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f004 fef4 	bl	8011edc <tcp_output>
 800d0f4:	e00d      	b.n	800d112 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fe:	d108      	bne.n	800d112 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	8b5b      	ldrh	r3, [r3, #26]
 800d104:	f043 0308 	orr.w	r3, r3, #8
 800d108:	b29a      	uxth	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	e001      	b.n	800d116 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d112:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	0801a9d0 	.word	0x0801a9d0
 800d124:	0801aa80 	.word	0x0801aa80
 800d128:	0801aa14 	.word	0x0801aa14

0800d12c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d109      	bne.n	800d14e <tcp_close+0x22>
 800d13a:	4b0f      	ldr	r3, [pc, #60]	; (800d178 <tcp_close+0x4c>)
 800d13c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d140:	490e      	ldr	r1, [pc, #56]	; (800d17c <tcp_close+0x50>)
 800d142:	480f      	ldr	r0, [pc, #60]	; (800d180 <tcp_close+0x54>)
 800d144:	f00b fc7e 	bl	8018a44 <iprintf>
 800d148:	f06f 030f 	mvn.w	r3, #15
 800d14c:	e00f      	b.n	800d16e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	7d1b      	ldrb	r3, [r3, #20]
 800d152:	2b01      	cmp	r3, #1
 800d154:	d006      	beq.n	800d164 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	8b5b      	ldrh	r3, [r3, #26]
 800d15a:	f043 0310 	orr.w	r3, r3, #16
 800d15e:	b29a      	uxth	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d164:	2101      	movs	r1, #1
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7ff fe94 	bl	800ce94 <tcp_close_shutdown>
 800d16c:	4603      	mov	r3, r0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	0801a9d0 	.word	0x0801a9d0
 800d17c:	0801aae0 	.word	0x0801aae0
 800d180:	0801aa14 	.word	0x0801aa14

0800d184 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b08e      	sub	sp, #56	; 0x38
 800d188:	af04      	add	r7, sp, #16
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d107      	bne.n	800d1a4 <tcp_abandon+0x20>
 800d194:	4b52      	ldr	r3, [pc, #328]	; (800d2e0 <tcp_abandon+0x15c>)
 800d196:	f240 223d 	movw	r2, #573	; 0x23d
 800d19a:	4952      	ldr	r1, [pc, #328]	; (800d2e4 <tcp_abandon+0x160>)
 800d19c:	4852      	ldr	r0, [pc, #328]	; (800d2e8 <tcp_abandon+0x164>)
 800d19e:	f00b fc51 	bl	8018a44 <iprintf>
 800d1a2:	e099      	b.n	800d2d8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	7d1b      	ldrb	r3, [r3, #20]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d106      	bne.n	800d1ba <tcp_abandon+0x36>
 800d1ac:	4b4c      	ldr	r3, [pc, #304]	; (800d2e0 <tcp_abandon+0x15c>)
 800d1ae:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d1b2:	494e      	ldr	r1, [pc, #312]	; (800d2ec <tcp_abandon+0x168>)
 800d1b4:	484c      	ldr	r0, [pc, #304]	; (800d2e8 <tcp_abandon+0x164>)
 800d1b6:	f00b fc45 	bl	8018a44 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	7d1b      	ldrb	r3, [r3, #20]
 800d1be:	2b0a      	cmp	r3, #10
 800d1c0:	d107      	bne.n	800d1d2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	484a      	ldr	r0, [pc, #296]	; (800d2f0 <tcp_abandon+0x16c>)
 800d1c6:	f001 fa6d 	bl	800e6a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff fdb0 	bl	800cd30 <tcp_free>
 800d1d0:	e082      	b.n	800d2d8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1de:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	7d1b      	ldrb	r3, [r3, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d126      	bne.n	800d24a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	8adb      	ldrh	r3, [r3, #22]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d02e      	beq.n	800d262 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d204:	4b3b      	ldr	r3, [pc, #236]	; (800d2f4 <tcp_abandon+0x170>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d105      	bne.n	800d21a <tcp_abandon+0x96>
 800d20e:	4b39      	ldr	r3, [pc, #228]	; (800d2f4 <tcp_abandon+0x170>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	4a37      	ldr	r2, [pc, #220]	; (800d2f4 <tcp_abandon+0x170>)
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	e013      	b.n	800d242 <tcp_abandon+0xbe>
 800d21a:	4b36      	ldr	r3, [pc, #216]	; (800d2f4 <tcp_abandon+0x170>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	61fb      	str	r3, [r7, #28]
 800d220:	e00c      	b.n	800d23c <tcp_abandon+0xb8>
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d104      	bne.n	800d236 <tcp_abandon+0xb2>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	68da      	ldr	r2, [r3, #12]
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	60da      	str	r2, [r3, #12]
 800d234:	e005      	b.n	800d242 <tcp_abandon+0xbe>
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	61fb      	str	r3, [r7, #28]
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1ef      	bne.n	800d222 <tcp_abandon+0x9e>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	60da      	str	r2, [r3, #12]
 800d248:	e00b      	b.n	800d262 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	8adb      	ldrh	r3, [r3, #22]
 800d252:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	4828      	ldr	r0, [pc, #160]	; (800d2f8 <tcp_abandon+0x174>)
 800d258:	f001 fa24 	bl	800e6a4 <tcp_pcb_remove>
 800d25c:	4b27      	ldr	r3, [pc, #156]	; (800d2fc <tcp_abandon+0x178>)
 800d25e:	2201      	movs	r2, #1
 800d260:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d266:	2b00      	cmp	r3, #0
 800d268:	d004      	beq.n	800d274 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 ff12 	bl	800e098 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d004      	beq.n	800d286 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d280:	4618      	mov	r0, r3
 800d282:	f000 ff09 	bl	800e098 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d004      	beq.n	800d298 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d292:	4618      	mov	r0, r3
 800d294:	f000 ff00 	bl	800e098 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00e      	beq.n	800d2bc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d29e:	6879      	ldr	r1, [r7, #4]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	3304      	adds	r3, #4
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	8b12      	ldrh	r2, [r2, #24]
 800d2a8:	9202      	str	r2, [sp, #8]
 800d2aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d2ac:	9201      	str	r2, [sp, #4]
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	697a      	ldr	r2, [r7, #20]
 800d2b4:	69b9      	ldr	r1, [r7, #24]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f005 fbc4 	bl	8012a44 <tcp_rst>
    }
    last_state = pcb->state;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	7d1b      	ldrb	r3, [r3, #20]
 800d2c0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff fd34 	bl	800cd30 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <tcp_abandon+0x154>
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f06f 010c 	mvn.w	r1, #12
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	4798      	blx	r3
  }
}
 800d2d8:	3728      	adds	r7, #40	; 0x28
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	0801a9d0 	.word	0x0801a9d0
 800d2e4:	0801ab14 	.word	0x0801ab14
 800d2e8:	0801aa14 	.word	0x0801aa14
 800d2ec:	0801ab30 	.word	0x0801ab30
 800d2f0:	2000be40 	.word	0x2000be40
 800d2f4:	2000be34 	.word	0x2000be34
 800d2f8:	2000be3c 	.word	0x2000be3c
 800d2fc:	2000be44 	.word	0x2000be44

0800d300 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d308:	2101      	movs	r1, #1
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7ff ff3a 	bl	800d184 <tcp_abandon>
}
 800d310:	bf00      	nop
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	4613      	mov	r3, r2
 800d324:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d326:	2304      	movs	r3, #4
 800d328:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d101      	bne.n	800d334 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d330:	4b3e      	ldr	r3, [pc, #248]	; (800d42c <tcp_bind+0x114>)
 800d332:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d109      	bne.n	800d34e <tcp_bind+0x36>
 800d33a:	4b3d      	ldr	r3, [pc, #244]	; (800d430 <tcp_bind+0x118>)
 800d33c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d340:	493c      	ldr	r1, [pc, #240]	; (800d434 <tcp_bind+0x11c>)
 800d342:	483d      	ldr	r0, [pc, #244]	; (800d438 <tcp_bind+0x120>)
 800d344:	f00b fb7e 	bl	8018a44 <iprintf>
 800d348:	f06f 030f 	mvn.w	r3, #15
 800d34c:	e06a      	b.n	800d424 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	7d1b      	ldrb	r3, [r3, #20]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d009      	beq.n	800d36a <tcp_bind+0x52>
 800d356:	4b36      	ldr	r3, [pc, #216]	; (800d430 <tcp_bind+0x118>)
 800d358:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d35c:	4937      	ldr	r1, [pc, #220]	; (800d43c <tcp_bind+0x124>)
 800d35e:	4836      	ldr	r0, [pc, #216]	; (800d438 <tcp_bind+0x120>)
 800d360:	f00b fb70 	bl	8018a44 <iprintf>
 800d364:	f06f 0305 	mvn.w	r3, #5
 800d368:	e05c      	b.n	800d424 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d36a:	88fb      	ldrh	r3, [r7, #6]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d109      	bne.n	800d384 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d370:	f000 f914 	bl	800d59c <tcp_new_port>
 800d374:	4603      	mov	r3, r0
 800d376:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d378:	88fb      	ldrh	r3, [r7, #6]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d135      	bne.n	800d3ea <tcp_bind+0xd2>
      return ERR_BUF;
 800d37e:	f06f 0301 	mvn.w	r3, #1
 800d382:	e04f      	b.n	800d424 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d384:	2300      	movs	r3, #0
 800d386:	61fb      	str	r3, [r7, #28]
 800d388:	e02b      	b.n	800d3e2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d38a:	4a2d      	ldr	r2, [pc, #180]	; (800d440 <tcp_bind+0x128>)
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	61bb      	str	r3, [r7, #24]
 800d396:	e01e      	b.n	800d3d6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	8adb      	ldrh	r3, [r3, #22]
 800d39c:	88fa      	ldrh	r2, [r7, #6]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d116      	bne.n	800d3d0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d3a2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d010      	beq.n	800d3ca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00c      	beq.n	800d3ca <tcp_bind+0xb2>
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d009      	beq.n	800d3ca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d005      	beq.n	800d3ca <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d102      	bne.n	800d3d0 <tcp_bind+0xb8>
              return ERR_USE;
 800d3ca:	f06f 0307 	mvn.w	r3, #7
 800d3ce:	e029      	b.n	800d424 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	61bb      	str	r3, [r7, #24]
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1dd      	bne.n	800d398 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	61fb      	str	r3, [r7, #28]
 800d3e2:	69fa      	ldr	r2, [r7, #28]
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	dbcf      	blt.n	800d38a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00c      	beq.n	800d40a <tcp_bind+0xf2>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d008      	beq.n	800d40a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d002      	beq.n	800d404 <tcp_bind+0xec>
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	e000      	b.n	800d406 <tcp_bind+0xee>
 800d404:	2300      	movs	r3, #0
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	88fa      	ldrh	r2, [r7, #6]
 800d40e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d410:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <tcp_bind+0x12c>)
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	60da      	str	r2, [r3, #12]
 800d418:	4a0a      	ldr	r2, [pc, #40]	; (800d444 <tcp_bind+0x12c>)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6013      	str	r3, [r2, #0]
 800d41e:	f005 fcd3 	bl	8012dc8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3720      	adds	r7, #32
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	0801cdd4 	.word	0x0801cdd4
 800d430:	0801a9d0 	.word	0x0801a9d0
 800d434:	0801ab64 	.word	0x0801ab64
 800d438:	0801aa14 	.word	0x0801aa14
 800d43c:	0801ab7c 	.word	0x0801ab7c
 800d440:	0801cd9c 	.word	0x0801cd9c
 800d444:	2000be34 	.word	0x2000be34

0800d448 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d106      	bne.n	800d464 <tcp_update_rcv_ann_wnd+0x1c>
 800d456:	4b25      	ldr	r3, [pc, #148]	; (800d4ec <tcp_update_rcv_ann_wnd+0xa4>)
 800d458:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d45c:	4924      	ldr	r1, [pc, #144]	; (800d4f0 <tcp_update_rcv_ann_wnd+0xa8>)
 800d45e:	4825      	ldr	r0, [pc, #148]	; (800d4f4 <tcp_update_rcv_ann_wnd+0xac>)
 800d460:	f00b faf0 	bl	8018a44 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d46c:	4413      	add	r3, r2
 800d46e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d478:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d47c:	bf28      	it	cs
 800d47e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d482:	b292      	uxth	r2, r2
 800d484:	4413      	add	r3, r2
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	1ad3      	subs	r3, r2, r3
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	db08      	blt.n	800d4a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	e020      	b.n	800d4e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	dd03      	ble.n	800d4b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4b4:	e014      	b.n	800d4e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4c8:	d306      	bcc.n	800d4d8 <tcp_update_rcv_ann_wnd+0x90>
 800d4ca:	4b08      	ldr	r3, [pc, #32]	; (800d4ec <tcp_update_rcv_ann_wnd+0xa4>)
 800d4cc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d4d0:	4909      	ldr	r1, [pc, #36]	; (800d4f8 <tcp_update_rcv_ann_wnd+0xb0>)
 800d4d2:	4808      	ldr	r0, [pc, #32]	; (800d4f4 <tcp_update_rcv_ann_wnd+0xac>)
 800d4d4:	f00b fab6 	bl	8018a44 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d4e0:	2300      	movs	r3, #0
  }
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	0801a9d0 	.word	0x0801a9d0
 800d4f0:	0801ac2c 	.word	0x0801ac2c
 800d4f4:	0801aa14 	.word	0x0801aa14
 800d4f8:	0801ac50 	.word	0x0801ac50

0800d4fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	460b      	mov	r3, r1
 800d506:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d107      	bne.n	800d51e <tcp_recved+0x22>
 800d50e:	4b1f      	ldr	r3, [pc, #124]	; (800d58c <tcp_recved+0x90>)
 800d510:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d514:	491e      	ldr	r1, [pc, #120]	; (800d590 <tcp_recved+0x94>)
 800d516:	481f      	ldr	r0, [pc, #124]	; (800d594 <tcp_recved+0x98>)
 800d518:	f00b fa94 	bl	8018a44 <iprintf>
 800d51c:	e032      	b.n	800d584 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	7d1b      	ldrb	r3, [r3, #20]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d106      	bne.n	800d534 <tcp_recved+0x38>
 800d526:	4b19      	ldr	r3, [pc, #100]	; (800d58c <tcp_recved+0x90>)
 800d528:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d52c:	491a      	ldr	r1, [pc, #104]	; (800d598 <tcp_recved+0x9c>)
 800d52e:	4819      	ldr	r0, [pc, #100]	; (800d594 <tcp_recved+0x98>)
 800d530:	f00b fa88 	bl	8018a44 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d538:	887b      	ldrh	r3, [r7, #2]
 800d53a:	4413      	add	r3, r2
 800d53c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d53e:	89fb      	ldrh	r3, [r7, #14]
 800d540:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d544:	d804      	bhi.n	800d550 <tcp_recved+0x54>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d54a:	89fa      	ldrh	r2, [r7, #14]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d204      	bcs.n	800d55a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d556:	851a      	strh	r2, [r3, #40]	; 0x28
 800d558:	e002      	b.n	800d560 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	89fa      	ldrh	r2, [r7, #14]
 800d55e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7ff ff71 	bl	800d448 <tcp_update_rcv_ann_wnd>
 800d566:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d56e:	d309      	bcc.n	800d584 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	8b5b      	ldrh	r3, [r3, #26]
 800d574:	f043 0302 	orr.w	r3, r3, #2
 800d578:	b29a      	uxth	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f004 fcac 	bl	8011edc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	0801a9d0 	.word	0x0801a9d0
 800d590:	0801ac6c 	.word	0x0801ac6c
 800d594:	0801aa14 	.word	0x0801aa14
 800d598:	0801ac84 	.word	0x0801ac84

0800d59c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d5a6:	4b1e      	ldr	r3, [pc, #120]	; (800d620 <tcp_new_port+0x84>)
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	4b1c      	ldr	r3, [pc, #112]	; (800d620 <tcp_new_port+0x84>)
 800d5b0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d5b2:	4b1b      	ldr	r3, [pc, #108]	; (800d620 <tcp_new_port+0x84>)
 800d5b4:	881b      	ldrh	r3, [r3, #0]
 800d5b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d103      	bne.n	800d5c6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d5be:	4b18      	ldr	r3, [pc, #96]	; (800d620 <tcp_new_port+0x84>)
 800d5c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d5c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	71fb      	strb	r3, [r7, #7]
 800d5ca:	e01e      	b.n	800d60a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d5cc:	79fb      	ldrb	r3, [r7, #7]
 800d5ce:	4a15      	ldr	r2, [pc, #84]	; (800d624 <tcp_new_port+0x88>)
 800d5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	e011      	b.n	800d5fe <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	8ada      	ldrh	r2, [r3, #22]
 800d5de:	4b10      	ldr	r3, [pc, #64]	; (800d620 <tcp_new_port+0x84>)
 800d5e0:	881b      	ldrh	r3, [r3, #0]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d108      	bne.n	800d5f8 <tcp_new_port+0x5c>
        n++;
 800d5e6:	88bb      	ldrh	r3, [r7, #4]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d5ec:	88bb      	ldrh	r3, [r7, #4]
 800d5ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5f2:	d3d8      	bcc.n	800d5a6 <tcp_new_port+0xa>
          return 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e00d      	b.n	800d614 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	603b      	str	r3, [r7, #0]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1ea      	bne.n	800d5da <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	3301      	adds	r3, #1
 800d608:	71fb      	strb	r3, [r7, #7]
 800d60a:	79fb      	ldrb	r3, [r7, #7]
 800d60c:	2b03      	cmp	r3, #3
 800d60e:	d9dd      	bls.n	800d5cc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d610:	4b03      	ldr	r3, [pc, #12]	; (800d620 <tcp_new_port+0x84>)
 800d612:	881b      	ldrh	r3, [r3, #0]
}
 800d614:	4618      	mov	r0, r3
 800d616:	370c      	adds	r7, #12
 800d618:	46bd      	mov	sp, r7
 800d61a:	bc80      	pop	{r7}
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	20000010 	.word	0x20000010
 800d624:	0801cd9c 	.word	0x0801cd9c

0800d628 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08a      	sub	sp, #40	; 0x28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	603b      	str	r3, [r7, #0]
 800d634:	4613      	mov	r3, r2
 800d636:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d638:	2300      	movs	r3, #0
 800d63a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d109      	bne.n	800d656 <tcp_connect+0x2e>
 800d642:	4b7d      	ldr	r3, [pc, #500]	; (800d838 <tcp_connect+0x210>)
 800d644:	f240 4235 	movw	r2, #1077	; 0x435
 800d648:	497c      	ldr	r1, [pc, #496]	; (800d83c <tcp_connect+0x214>)
 800d64a:	487d      	ldr	r0, [pc, #500]	; (800d840 <tcp_connect+0x218>)
 800d64c:	f00b f9fa 	bl	8018a44 <iprintf>
 800d650:	f06f 030f 	mvn.w	r3, #15
 800d654:	e0ec      	b.n	800d830 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d109      	bne.n	800d670 <tcp_connect+0x48>
 800d65c:	4b76      	ldr	r3, [pc, #472]	; (800d838 <tcp_connect+0x210>)
 800d65e:	f240 4236 	movw	r2, #1078	; 0x436
 800d662:	4978      	ldr	r1, [pc, #480]	; (800d844 <tcp_connect+0x21c>)
 800d664:	4876      	ldr	r0, [pc, #472]	; (800d840 <tcp_connect+0x218>)
 800d666:	f00b f9ed 	bl	8018a44 <iprintf>
 800d66a:	f06f 030f 	mvn.w	r3, #15
 800d66e:	e0df      	b.n	800d830 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	7d1b      	ldrb	r3, [r3, #20]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d009      	beq.n	800d68c <tcp_connect+0x64>
 800d678:	4b6f      	ldr	r3, [pc, #444]	; (800d838 <tcp_connect+0x210>)
 800d67a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800d67e:	4972      	ldr	r1, [pc, #456]	; (800d848 <tcp_connect+0x220>)
 800d680:	486f      	ldr	r0, [pc, #444]	; (800d840 <tcp_connect+0x218>)
 800d682:	f00b f9df 	bl	8018a44 <iprintf>
 800d686:	f06f 0309 	mvn.w	r3, #9
 800d68a:	e0d1      	b.n	800d830 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <tcp_connect+0x70>
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	e000      	b.n	800d69a <tcp_connect+0x72>
 800d698:	2300      	movs	r3, #0
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	88fa      	ldrh	r2, [r7, #6]
 800d6a2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	7a1b      	ldrb	r3, [r3, #8]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d006      	beq.n	800d6ba <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	7a1b      	ldrb	r3, [r3, #8]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fc95 	bl	800bfe0 <netif_get_by_index>
 800d6b6:	6278      	str	r0, [r7, #36]	; 0x24
 800d6b8:	e005      	b.n	800d6c6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	3304      	adds	r3, #4
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f009 f94a 	bl	8016958 <ip4_route>
 800d6c4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800d6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d6cc:	f06f 0303 	mvn.w	r3, #3
 800d6d0:	e0ae      	b.n	800d830 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d003      	beq.n	800d6e0 <tcp_connect+0xb8>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d111      	bne.n	800d704 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <tcp_connect+0xc4>
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	e000      	b.n	800d6ee <tcp_connect+0xc6>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d102      	bne.n	800d6fc <tcp_connect+0xd4>
      return ERR_RTE;
 800d6f6:	f06f 0303 	mvn.w	r3, #3
 800d6fa:	e099      	b.n	800d830 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	8adb      	ldrh	r3, [r3, #22]
 800d708:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	8adb      	ldrh	r3, [r3, #22]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10c      	bne.n	800d72c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d712:	f7ff ff43 	bl	800d59c <tcp_new_port>
 800d716:	4603      	mov	r3, r0
 800d718:	461a      	mov	r2, r3
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	8adb      	ldrh	r3, [r3, #22]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d102      	bne.n	800d72c <tcp_connect+0x104>
      return ERR_BUF;
 800d726:	f06f 0301 	mvn.w	r3, #1
 800d72a:	e081      	b.n	800d830 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f001 f84d 	bl	800e7cc <tcp_next_iss>
 800d732:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2200      	movs	r2, #0
 800d738:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	1e5a      	subs	r2, r3, #1
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	1e5a      	subs	r2, r3, #1
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	1e5a      	subs	r2, r3, #1
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d75e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d776:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d780:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3304      	adds	r3, #4
 800d78a:	461a      	mov	r2, r3
 800d78c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d78e:	f001 f843 	bl	800e818 <tcp_eff_send_mss_netif>
 800d792:	4603      	mov	r3, r0
 800d794:	461a      	mov	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2201      	movs	r2, #1
 800d79e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	683a      	ldr	r2, [r7, #0]
 800d7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d7aa:	2102      	movs	r1, #2
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f004 faa7 	bl	8011d00 <tcp_enqueue_flags>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d7b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d136      	bne.n	800d82c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d7c4:	8b7b      	ldrh	r3, [r7, #26]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d021      	beq.n	800d80e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d7ca:	4b20      	ldr	r3, [pc, #128]	; (800d84c <tcp_connect+0x224>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d105      	bne.n	800d7e0 <tcp_connect+0x1b8>
 800d7d4:	4b1d      	ldr	r3, [pc, #116]	; (800d84c <tcp_connect+0x224>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	4a1c      	ldr	r2, [pc, #112]	; (800d84c <tcp_connect+0x224>)
 800d7dc:	6013      	str	r3, [r2, #0]
 800d7de:	e013      	b.n	800d808 <tcp_connect+0x1e0>
 800d7e0:	4b1a      	ldr	r3, [pc, #104]	; (800d84c <tcp_connect+0x224>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	623b      	str	r3, [r7, #32]
 800d7e6:	e00c      	b.n	800d802 <tcp_connect+0x1da>
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d104      	bne.n	800d7fc <tcp_connect+0x1d4>
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	68da      	ldr	r2, [r3, #12]
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	60da      	str	r2, [r3, #12]
 800d7fa:	e005      	b.n	800d808 <tcp_connect+0x1e0>
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	623b      	str	r3, [r7, #32]
 800d802:	6a3b      	ldr	r3, [r7, #32]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1ef      	bne.n	800d7e8 <tcp_connect+0x1c0>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d80e:	4b10      	ldr	r3, [pc, #64]	; (800d850 <tcp_connect+0x228>)
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	60da      	str	r2, [r3, #12]
 800d816:	4a0e      	ldr	r2, [pc, #56]	; (800d850 <tcp_connect+0x228>)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6013      	str	r3, [r2, #0]
 800d81c:	f005 fad4 	bl	8012dc8 <tcp_timer_needed>
 800d820:	4b0c      	ldr	r3, [pc, #48]	; (800d854 <tcp_connect+0x22c>)
 800d822:	2201      	movs	r2, #1
 800d824:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f004 fb58 	bl	8011edc <tcp_output>
  }
  return ret;
 800d82c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3728      	adds	r7, #40	; 0x28
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	0801a9d0 	.word	0x0801a9d0
 800d83c:	0801acac 	.word	0x0801acac
 800d840:	0801aa14 	.word	0x0801aa14
 800d844:	0801acc8 	.word	0x0801acc8
 800d848:	0801ace4 	.word	0x0801ace4
 800d84c:	2000be34 	.word	0x2000be34
 800d850:	2000be3c 	.word	0x2000be3c
 800d854:	2000be44 	.word	0x2000be44

0800d858 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d858:	b5b0      	push	{r4, r5, r7, lr}
 800d85a:	b090      	sub	sp, #64	; 0x40
 800d85c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d864:	4b94      	ldr	r3, [pc, #592]	; (800dab8 <tcp_slowtmr+0x260>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	3301      	adds	r3, #1
 800d86a:	4a93      	ldr	r2, [pc, #588]	; (800dab8 <tcp_slowtmr+0x260>)
 800d86c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d86e:	4b93      	ldr	r3, [pc, #588]	; (800dabc <tcp_slowtmr+0x264>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	b2da      	uxtb	r2, r3
 800d876:	4b91      	ldr	r3, [pc, #580]	; (800dabc <tcp_slowtmr+0x264>)
 800d878:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d87e:	4b90      	ldr	r3, [pc, #576]	; (800dac0 <tcp_slowtmr+0x268>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d884:	e29f      	b.n	800ddc6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	7d1b      	ldrb	r3, [r3, #20]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_slowtmr+0x44>
 800d88e:	4b8d      	ldr	r3, [pc, #564]	; (800dac4 <tcp_slowtmr+0x26c>)
 800d890:	f240 42be 	movw	r2, #1214	; 0x4be
 800d894:	498c      	ldr	r1, [pc, #560]	; (800dac8 <tcp_slowtmr+0x270>)
 800d896:	488d      	ldr	r0, [pc, #564]	; (800dacc <tcp_slowtmr+0x274>)
 800d898:	f00b f8d4 	bl	8018a44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	7d1b      	ldrb	r3, [r3, #20]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d106      	bne.n	800d8b2 <tcp_slowtmr+0x5a>
 800d8a4:	4b87      	ldr	r3, [pc, #540]	; (800dac4 <tcp_slowtmr+0x26c>)
 800d8a6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d8aa:	4989      	ldr	r1, [pc, #548]	; (800dad0 <tcp_slowtmr+0x278>)
 800d8ac:	4887      	ldr	r0, [pc, #540]	; (800dacc <tcp_slowtmr+0x274>)
 800d8ae:	f00b f8c9 	bl	8018a44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b4:	7d1b      	ldrb	r3, [r3, #20]
 800d8b6:	2b0a      	cmp	r3, #10
 800d8b8:	d106      	bne.n	800d8c8 <tcp_slowtmr+0x70>
 800d8ba:	4b82      	ldr	r3, [pc, #520]	; (800dac4 <tcp_slowtmr+0x26c>)
 800d8bc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d8c0:	4984      	ldr	r1, [pc, #528]	; (800dad4 <tcp_slowtmr+0x27c>)
 800d8c2:	4882      	ldr	r0, [pc, #520]	; (800dacc <tcp_slowtmr+0x274>)
 800d8c4:	f00b f8be 	bl	8018a44 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	7f9a      	ldrb	r2, [r3, #30]
 800d8cc:	4b7b      	ldr	r3, [pc, #492]	; (800dabc <tcp_slowtmr+0x264>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d105      	bne.n	800d8e0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d8de:	e272      	b.n	800ddc6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d8e0:	4b76      	ldr	r3, [pc, #472]	; (800dabc <tcp_slowtmr+0x264>)
 800d8e2:	781a      	ldrb	r2, [r3, #0]
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	7d1b      	ldrb	r3, [r3, #20]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d10a      	bne.n	800d912 <tcp_slowtmr+0xba>
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d902:	2b05      	cmp	r3, #5
 800d904:	d905      	bls.n	800d912 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d90a:	3301      	adds	r3, #1
 800d90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d910:	e11e      	b.n	800db50 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d918:	2b0b      	cmp	r3, #11
 800d91a:	d905      	bls.n	800d928 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d920:	3301      	adds	r3, #1
 800d922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d926:	e113      	b.n	800db50 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d075      	beq.n	800da1e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d936:	2b00      	cmp	r3, #0
 800d938:	d006      	beq.n	800d948 <tcp_slowtmr+0xf0>
 800d93a:	4b62      	ldr	r3, [pc, #392]	; (800dac4 <tcp_slowtmr+0x26c>)
 800d93c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d940:	4965      	ldr	r1, [pc, #404]	; (800dad8 <tcp_slowtmr+0x280>)
 800d942:	4862      	ldr	r0, [pc, #392]	; (800dacc <tcp_slowtmr+0x274>)
 800d944:	f00b f87e 	bl	8018a44 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d106      	bne.n	800d95e <tcp_slowtmr+0x106>
 800d950:	4b5c      	ldr	r3, [pc, #368]	; (800dac4 <tcp_slowtmr+0x26c>)
 800d952:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d956:	4961      	ldr	r1, [pc, #388]	; (800dadc <tcp_slowtmr+0x284>)
 800d958:	485c      	ldr	r0, [pc, #368]	; (800dacc <tcp_slowtmr+0x274>)
 800d95a:	f00b f873 	bl	8018a44 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d960:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d964:	2b0b      	cmp	r3, #11
 800d966:	d905      	bls.n	800d974 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d96c:	3301      	adds	r3, #1
 800d96e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d972:	e0ed      	b.n	800db50 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d97a:	3b01      	subs	r3, #1
 800d97c:	4a58      	ldr	r2, [pc, #352]	; (800dae0 <tcp_slowtmr+0x288>)
 800d97e:	5cd3      	ldrb	r3, [r2, r3]
 800d980:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d984:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d988:	7c7a      	ldrb	r2, [r7, #17]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d907      	bls.n	800d99e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d990:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d994:	3301      	adds	r3, #1
 800d996:	b2da      	uxtb	r2, r3
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d9a4:	7c7a      	ldrb	r2, [r7, #17]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	f200 80d2 	bhi.w	800db50 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d108      	bne.n	800d9cc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d9ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9bc:	f005 f936 	bl	8012c2c <tcp_zero_window_probe>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d014      	beq.n	800d9f0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	623b      	str	r3, [r7, #32]
 800d9ca:	e011      	b.n	800d9f0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9d6:	f003 fffb 	bl	80119d0 <tcp_split_unsent_seg>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d107      	bne.n	800d9f0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d9e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9e2:	f004 fa7b 	bl	8011edc <tcp_output>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d101      	bne.n	800d9f0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 80ac 	beq.w	800db50 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800da00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800da06:	2b06      	cmp	r3, #6
 800da08:	f200 80a2 	bhi.w	800db50 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800da12:	3301      	adds	r3, #1
 800da14:	b2da      	uxtb	r2, r3
 800da16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800da1c:	e098      	b.n	800db50 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800da24:	2b00      	cmp	r3, #0
 800da26:	db0f      	blt.n	800da48 <tcp_slowtmr+0x1f0>
 800da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800da2e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800da32:	4293      	cmp	r3, r2
 800da34:	d008      	beq.n	800da48 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	3301      	adds	r3, #1
 800da40:	b29b      	uxth	r3, r3
 800da42:	b21a      	sxth	r2, r3
 800da44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da46:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800da48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800da4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da50:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800da54:	429a      	cmp	r2, r3
 800da56:	db7b      	blt.n	800db50 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800da58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da5a:	f004 fd31 	bl	80124c0 <tcp_rexmit_rto_prepare>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d007      	beq.n	800da74 <tcp_slowtmr+0x21c>
 800da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d171      	bne.n	800db50 <tcp_slowtmr+0x2f8>
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da70:	2b00      	cmp	r3, #0
 800da72:	d06d      	beq.n	800db50 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	7d1b      	ldrb	r3, [r3, #20]
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d03a      	beq.n	800daf2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800da7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da82:	2b0c      	cmp	r3, #12
 800da84:	bf28      	it	cs
 800da86:	230c      	movcs	r3, #12
 800da88:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800da8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da90:	10db      	asrs	r3, r3, #3
 800da92:	b21b      	sxth	r3, r3
 800da94:	461a      	mov	r2, r3
 800da96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da9c:	4413      	add	r3, r2
 800da9e:	7efa      	ldrb	r2, [r7, #27]
 800daa0:	4910      	ldr	r1, [pc, #64]	; (800dae4 <tcp_slowtmr+0x28c>)
 800daa2:	5c8a      	ldrb	r2, [r1, r2]
 800daa4:	4093      	lsls	r3, r2
 800daa6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800daae:	4293      	cmp	r3, r2
 800dab0:	dc1a      	bgt.n	800dae8 <tcp_slowtmr+0x290>
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	b21a      	sxth	r2, r3
 800dab6:	e019      	b.n	800daec <tcp_slowtmr+0x294>
 800dab8:	2000be30 	.word	0x2000be30
 800dabc:	2000be46 	.word	0x2000be46
 800dac0:	2000be3c 	.word	0x2000be3c
 800dac4:	0801a9d0 	.word	0x0801a9d0
 800dac8:	0801ad14 	.word	0x0801ad14
 800dacc:	0801aa14 	.word	0x0801aa14
 800dad0:	0801ad40 	.word	0x0801ad40
 800dad4:	0801ad6c 	.word	0x0801ad6c
 800dad8:	0801ad9c 	.word	0x0801ad9c
 800dadc:	0801add0 	.word	0x0801add0
 800dae0:	0801cd94 	.word	0x0801cd94
 800dae4:	0801cd84 	.word	0x0801cd84
 800dae8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800daf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf4:	2200      	movs	r2, #0
 800daf6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db04:	4293      	cmp	r3, r2
 800db06:	bf28      	it	cs
 800db08:	4613      	movcs	r3, r2
 800db0a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800db0c:	8a7b      	ldrh	r3, [r7, #18]
 800db0e:	085b      	lsrs	r3, r3, #1
 800db10:	b29a      	uxth	r2, r3
 800db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800db1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db22:	005b      	lsls	r3, r3, #1
 800db24:	b29b      	uxth	r3, r3
 800db26:	429a      	cmp	r2, r3
 800db28:	d206      	bcs.n	800db38 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db2e:	005b      	lsls	r3, r3, #1
 800db30:	b29a      	uxth	r2, r3
 800db32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800db3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800db42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db44:	2200      	movs	r2, #0
 800db46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800db4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db4c:	f004 fd28 	bl	80125a0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db52:	7d1b      	ldrb	r3, [r3, #20]
 800db54:	2b06      	cmp	r3, #6
 800db56:	d111      	bne.n	800db7c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800db58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5a:	8b5b      	ldrh	r3, [r3, #26]
 800db5c:	f003 0310 	and.w	r3, r3, #16
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00b      	beq.n	800db7c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db64:	4b9d      	ldr	r3, [pc, #628]	; (800dddc <tcp_slowtmr+0x584>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	1ad3      	subs	r3, r2, r3
 800db6e:	2b28      	cmp	r3, #40	; 0x28
 800db70:	d904      	bls.n	800db7c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800db72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db76:	3301      	adds	r3, #1
 800db78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7e:	7a5b      	ldrb	r3, [r3, #9]
 800db80:	f003 0308 	and.w	r3, r3, #8
 800db84:	2b00      	cmp	r3, #0
 800db86:	d04c      	beq.n	800dc22 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800db88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	d003      	beq.n	800db98 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800db90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db92:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800db94:	2b07      	cmp	r3, #7
 800db96:	d144      	bne.n	800dc22 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db98:	4b90      	ldr	r3, [pc, #576]	; (800dddc <tcp_slowtmr+0x584>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9e:	6a1b      	ldr	r3, [r3, #32]
 800dba0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dba8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800dbac:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800dbb0:	498b      	ldr	r1, [pc, #556]	; (800dde0 <tcp_slowtmr+0x588>)
 800dbb2:	fba1 1303 	umull	r1, r3, r1, r3
 800dbb6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d90a      	bls.n	800dbd2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800dbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800dbc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbca:	3301      	adds	r3, #1
 800dbcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dbd0:	e027      	b.n	800dc22 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbd2:	4b82      	ldr	r3, [pc, #520]	; (800dddc <tcp_slowtmr+0x584>)
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbde:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dbe8:	4618      	mov	r0, r3
 800dbea:	4b7e      	ldr	r3, [pc, #504]	; (800dde4 <tcp_slowtmr+0x58c>)
 800dbec:	fb00 f303 	mul.w	r3, r0, r3
 800dbf0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dbf2:	497b      	ldr	r1, [pc, #492]	; (800dde0 <tcp_slowtmr+0x588>)
 800dbf4:	fba1 1303 	umull	r1, r3, r1, r3
 800dbf8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d911      	bls.n	800dc22 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800dbfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc00:	f004 ffd4 	bl	8012bac <tcp_keepalive>
 800dc04:	4603      	mov	r3, r0
 800dc06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dc0a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d107      	bne.n	800dc22 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800dc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc14:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dc18:	3301      	adds	r3, #1
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d011      	beq.n	800dc4e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dc2a:	4b6c      	ldr	r3, [pc, #432]	; (800dddc <tcp_slowtmr+0x584>)
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	1ad2      	subs	r2, r2, r3
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc36:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	440b      	add	r3, r1
 800dc42:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d302      	bcc.n	800dc4e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800dc48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc4a:	f000 fe8f 	bl	800e96c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800dc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc50:	7d1b      	ldrb	r3, [r3, #20]
 800dc52:	2b03      	cmp	r3, #3
 800dc54:	d10b      	bne.n	800dc6e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc56:	4b61      	ldr	r3, [pc, #388]	; (800dddc <tcp_slowtmr+0x584>)
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5c:	6a1b      	ldr	r3, [r3, #32]
 800dc5e:	1ad3      	subs	r3, r2, r3
 800dc60:	2b28      	cmp	r3, #40	; 0x28
 800dc62:	d904      	bls.n	800dc6e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc68:	3301      	adds	r3, #1
 800dc6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc70:	7d1b      	ldrb	r3, [r3, #20]
 800dc72:	2b09      	cmp	r3, #9
 800dc74:	d10b      	bne.n	800dc8e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dc76:	4b59      	ldr	r3, [pc, #356]	; (800dddc <tcp_slowtmr+0x584>)
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7c:	6a1b      	ldr	r3, [r3, #32]
 800dc7e:	1ad3      	subs	r3, r2, r3
 800dc80:	2bf0      	cmp	r3, #240	; 0xf0
 800dc82:	d904      	bls.n	800dc8e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800dc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc88:	3301      	adds	r3, #1
 800dc8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dc8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d060      	beq.n	800dd58 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800dc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc9c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dc9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dca0:	f000 fcb0 	bl	800e604 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d010      	beq.n	800dccc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dcaa:	4b4f      	ldr	r3, [pc, #316]	; (800dde8 <tcp_slowtmr+0x590>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d106      	bne.n	800dcc2 <tcp_slowtmr+0x46a>
 800dcb4:	4b4d      	ldr	r3, [pc, #308]	; (800ddec <tcp_slowtmr+0x594>)
 800dcb6:	f240 526d 	movw	r2, #1389	; 0x56d
 800dcba:	494d      	ldr	r1, [pc, #308]	; (800ddf0 <tcp_slowtmr+0x598>)
 800dcbc:	484d      	ldr	r0, [pc, #308]	; (800ddf4 <tcp_slowtmr+0x59c>)
 800dcbe:	f00a fec1 	bl	8018a44 <iprintf>
        prev->next = pcb->next;
 800dcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc4:	68da      	ldr	r2, [r3, #12]
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	60da      	str	r2, [r3, #12]
 800dcca:	e00f      	b.n	800dcec <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dccc:	4b46      	ldr	r3, [pc, #280]	; (800dde8 <tcp_slowtmr+0x590>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d006      	beq.n	800dce4 <tcp_slowtmr+0x48c>
 800dcd6:	4b45      	ldr	r3, [pc, #276]	; (800ddec <tcp_slowtmr+0x594>)
 800dcd8:	f240 5271 	movw	r2, #1393	; 0x571
 800dcdc:	4946      	ldr	r1, [pc, #280]	; (800ddf8 <tcp_slowtmr+0x5a0>)
 800dcde:	4845      	ldr	r0, [pc, #276]	; (800ddf4 <tcp_slowtmr+0x59c>)
 800dce0:	f00a feb0 	bl	8018a44 <iprintf>
        tcp_active_pcbs = pcb->next;
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	4a3f      	ldr	r2, [pc, #252]	; (800dde8 <tcp_slowtmr+0x590>)
 800dcea:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800dcec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d013      	beq.n	800dd1c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dcfc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800dcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd00:	3304      	adds	r3, #4
 800dd02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd04:	8ad2      	ldrh	r2, [r2, #22]
 800dd06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd08:	8b09      	ldrh	r1, [r1, #24]
 800dd0a:	9102      	str	r1, [sp, #8]
 800dd0c:	9201      	str	r2, [sp, #4]
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	462b      	mov	r3, r5
 800dd12:	4622      	mov	r2, r4
 800dd14:	4601      	mov	r1, r0
 800dd16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd18:	f004 fe94 	bl	8012a44 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd24:	7d1b      	ldrb	r3, [r3, #20]
 800dd26:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dd32:	6838      	ldr	r0, [r7, #0]
 800dd34:	f7fe fffc 	bl	800cd30 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800dd38:	4b30      	ldr	r3, [pc, #192]	; (800ddfc <tcp_slowtmr+0x5a4>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d004      	beq.n	800dd4e <tcp_slowtmr+0x4f6>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f06f 010c 	mvn.w	r1, #12
 800dd4a:	68b8      	ldr	r0, [r7, #8]
 800dd4c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dd4e:	4b2b      	ldr	r3, [pc, #172]	; (800ddfc <tcp_slowtmr+0x5a4>)
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d037      	beq.n	800ddc6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800dd56:	e590      	b.n	800d87a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd64:	7f1b      	ldrb	r3, [r3, #28]
 800dd66:	3301      	adds	r3, #1
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd70:	7f1a      	ldrb	r2, [r3, #28]
 800dd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd74:	7f5b      	ldrb	r3, [r3, #29]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d325      	bcc.n	800ddc6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800dd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800dd80:	4b1e      	ldr	r3, [pc, #120]	; (800ddfc <tcp_slowtmr+0x5a4>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00b      	beq.n	800dda8 <tcp_slowtmr+0x550>
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd98:	6912      	ldr	r2, [r2, #16]
 800dd9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	4798      	blx	r3
 800dda0:	4603      	mov	r3, r0
 800dda2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800dda6:	e002      	b.n	800ddae <tcp_slowtmr+0x556>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ddae:	4b13      	ldr	r3, [pc, #76]	; (800ddfc <tcp_slowtmr+0x5a4>)
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d000      	beq.n	800ddb8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ddb6:	e560      	b.n	800d87a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ddb8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d102      	bne.n	800ddc6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ddc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc2:	f004 f88b 	bl	8011edc <tcp_output>
  while (pcb != NULL) {
 800ddc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f47f ad5c 	bne.w	800d886 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ddd2:	4b0b      	ldr	r3, [pc, #44]	; (800de00 <tcp_slowtmr+0x5a8>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ddd8:	e067      	b.n	800deaa <tcp_slowtmr+0x652>
 800ddda:	bf00      	nop
 800dddc:	2000be30 	.word	0x2000be30
 800dde0:	10624dd3 	.word	0x10624dd3
 800dde4:	000124f8 	.word	0x000124f8
 800dde8:	2000be3c 	.word	0x2000be3c
 800ddec:	0801a9d0 	.word	0x0801a9d0
 800ddf0:	0801ae08 	.word	0x0801ae08
 800ddf4:	0801aa14 	.word	0x0801aa14
 800ddf8:	0801ae34 	.word	0x0801ae34
 800ddfc:	2000be44 	.word	0x2000be44
 800de00:	2000be40 	.word	0x2000be40
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800de04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de06:	7d1b      	ldrb	r3, [r3, #20]
 800de08:	2b0a      	cmp	r3, #10
 800de0a:	d006      	beq.n	800de1a <tcp_slowtmr+0x5c2>
 800de0c:	4b2b      	ldr	r3, [pc, #172]	; (800debc <tcp_slowtmr+0x664>)
 800de0e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800de12:	492b      	ldr	r1, [pc, #172]	; (800dec0 <tcp_slowtmr+0x668>)
 800de14:	482b      	ldr	r0, [pc, #172]	; (800dec4 <tcp_slowtmr+0x66c>)
 800de16:	f00a fe15 	bl	8018a44 <iprintf>
    pcb_remove = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800de20:	4b29      	ldr	r3, [pc, #164]	; (800dec8 <tcp_slowtmr+0x670>)
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	6a1b      	ldr	r3, [r3, #32]
 800de28:	1ad3      	subs	r3, r2, r3
 800de2a:	2bf0      	cmp	r3, #240	; 0xf0
 800de2c:	d904      	bls.n	800de38 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800de2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de32:	3301      	adds	r3, #1
 800de34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800de38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d02f      	beq.n	800dea0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800de40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de42:	f000 fbdf 	bl	800e604 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800de46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d010      	beq.n	800de6e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800de4c:	4b1f      	ldr	r3, [pc, #124]	; (800decc <tcp_slowtmr+0x674>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de52:	429a      	cmp	r2, r3
 800de54:	d106      	bne.n	800de64 <tcp_slowtmr+0x60c>
 800de56:	4b19      	ldr	r3, [pc, #100]	; (800debc <tcp_slowtmr+0x664>)
 800de58:	f240 52af 	movw	r2, #1455	; 0x5af
 800de5c:	491c      	ldr	r1, [pc, #112]	; (800ded0 <tcp_slowtmr+0x678>)
 800de5e:	4819      	ldr	r0, [pc, #100]	; (800dec4 <tcp_slowtmr+0x66c>)
 800de60:	f00a fdf0 	bl	8018a44 <iprintf>
        prev->next = pcb->next;
 800de64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de66:	68da      	ldr	r2, [r3, #12]
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	60da      	str	r2, [r3, #12]
 800de6c:	e00f      	b.n	800de8e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800de6e:	4b17      	ldr	r3, [pc, #92]	; (800decc <tcp_slowtmr+0x674>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de74:	429a      	cmp	r2, r3
 800de76:	d006      	beq.n	800de86 <tcp_slowtmr+0x62e>
 800de78:	4b10      	ldr	r3, [pc, #64]	; (800debc <tcp_slowtmr+0x664>)
 800de7a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800de7e:	4915      	ldr	r1, [pc, #84]	; (800ded4 <tcp_slowtmr+0x67c>)
 800de80:	4810      	ldr	r0, [pc, #64]	; (800dec4 <tcp_slowtmr+0x66c>)
 800de82:	f00a fddf 	bl	8018a44 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	4a10      	ldr	r2, [pc, #64]	; (800decc <tcp_slowtmr+0x674>)
 800de8c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800de92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800de98:	69f8      	ldr	r0, [r7, #28]
 800de9a:	f7fe ff49 	bl	800cd30 <tcp_free>
 800de9e:	e004      	b.n	800deaa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800dea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	2b00      	cmp	r3, #0
 800deae:	d1a9      	bne.n	800de04 <tcp_slowtmr+0x5ac>
    }
  }
}
 800deb0:	bf00      	nop
 800deb2:	bf00      	nop
 800deb4:	3730      	adds	r7, #48	; 0x30
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bdb0      	pop	{r4, r5, r7, pc}
 800deba:	bf00      	nop
 800debc:	0801a9d0 	.word	0x0801a9d0
 800dec0:	0801ae60 	.word	0x0801ae60
 800dec4:	0801aa14 	.word	0x0801aa14
 800dec8:	2000be30 	.word	0x2000be30
 800decc:	2000be40 	.word	0x2000be40
 800ded0:	0801ae90 	.word	0x0801ae90
 800ded4:	0801aeb8 	.word	0x0801aeb8

0800ded8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dede:	4b2d      	ldr	r3, [pc, #180]	; (800df94 <tcp_fasttmr+0xbc>)
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	3301      	adds	r3, #1
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	4b2b      	ldr	r3, [pc, #172]	; (800df94 <tcp_fasttmr+0xbc>)
 800dee8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800deea:	4b2b      	ldr	r3, [pc, #172]	; (800df98 <tcp_fasttmr+0xc0>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800def0:	e048      	b.n	800df84 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7f9a      	ldrb	r2, [r3, #30]
 800def6:	4b27      	ldr	r3, [pc, #156]	; (800df94 <tcp_fasttmr+0xbc>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	429a      	cmp	r2, r3
 800defc:	d03f      	beq.n	800df7e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800defe:	4b25      	ldr	r3, [pc, #148]	; (800df94 <tcp_fasttmr+0xbc>)
 800df00:	781a      	ldrb	r2, [r3, #0]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	8b5b      	ldrh	r3, [r3, #26]
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d010      	beq.n	800df34 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	8b5b      	ldrh	r3, [r3, #26]
 800df16:	f043 0302 	orr.w	r3, r3, #2
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f003 ffdb 	bl	8011edc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	8b5b      	ldrh	r3, [r3, #26]
 800df2a:	f023 0303 	bic.w	r3, r3, #3
 800df2e:	b29a      	uxth	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	8b5b      	ldrh	r3, [r3, #26]
 800df38:	f003 0308 	and.w	r3, r3, #8
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d009      	beq.n	800df54 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	8b5b      	ldrh	r3, [r3, #26]
 800df44:	f023 0308 	bic.w	r3, r3, #8
 800df48:	b29a      	uxth	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff f882 	bl	800d058 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00a      	beq.n	800df78 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800df62:	4b0e      	ldr	r3, [pc, #56]	; (800df9c <tcp_fasttmr+0xc4>)
 800df64:	2200      	movs	r2, #0
 800df66:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 f819 	bl	800dfa0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800df6e:	4b0b      	ldr	r3, [pc, #44]	; (800df9c <tcp_fasttmr+0xc4>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d000      	beq.n	800df78 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800df76:	e7b8      	b.n	800deea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	607b      	str	r3, [r7, #4]
 800df7c:	e002      	b.n	800df84 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d1b3      	bne.n	800def2 <tcp_fasttmr+0x1a>
    }
  }
}
 800df8a:	bf00      	nop
 800df8c:	bf00      	nop
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	2000be46 	.word	0x2000be46
 800df98:	2000be3c 	.word	0x2000be3c
 800df9c:	2000be44 	.word	0x2000be44

0800dfa0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dfa0:	b590      	push	{r4, r7, lr}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d109      	bne.n	800dfc2 <tcp_process_refused_data+0x22>
 800dfae:	4b37      	ldr	r3, [pc, #220]	; (800e08c <tcp_process_refused_data+0xec>)
 800dfb0:	f240 6209 	movw	r2, #1545	; 0x609
 800dfb4:	4936      	ldr	r1, [pc, #216]	; (800e090 <tcp_process_refused_data+0xf0>)
 800dfb6:	4837      	ldr	r0, [pc, #220]	; (800e094 <tcp_process_refused_data+0xf4>)
 800dfb8:	f00a fd44 	bl	8018a44 <iprintf>
 800dfbc:	f06f 030f 	mvn.w	r3, #15
 800dfc0:	e060      	b.n	800e084 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfc6:	7b5b      	ldrb	r3, [r3, #13]
 800dfc8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00b      	beq.n	800dff8 <tcp_process_refused_data+0x58>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6918      	ldr	r0, [r3, #16]
 800dfea:	2300      	movs	r3, #0
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	6879      	ldr	r1, [r7, #4]
 800dff0:	47a0      	blx	r4
 800dff2:	4603      	mov	r3, r0
 800dff4:	73fb      	strb	r3, [r7, #15]
 800dff6:	e007      	b.n	800e008 <tcp_process_refused_data+0x68>
 800dff8:	2300      	movs	r3, #0
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	6879      	ldr	r1, [r7, #4]
 800dffe:	2000      	movs	r0, #0
 800e000:	f000 f8a4 	bl	800e14c <tcp_recv_null>
 800e004:	4603      	mov	r3, r0
 800e006:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d12a      	bne.n	800e066 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e010:	7bbb      	ldrb	r3, [r7, #14]
 800e012:	f003 0320 	and.w	r3, r3, #32
 800e016:	2b00      	cmp	r3, #0
 800e018:	d033      	beq.n	800e082 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e01e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e022:	d005      	beq.n	800e030 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e028:	3301      	adds	r3, #1
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00b      	beq.n	800e052 <tcp_process_refused_data+0xb2>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6918      	ldr	r0, [r3, #16]
 800e044:	2300      	movs	r3, #0
 800e046:	2200      	movs	r2, #0
 800e048:	6879      	ldr	r1, [r7, #4]
 800e04a:	47a0      	blx	r4
 800e04c:	4603      	mov	r3, r0
 800e04e:	73fb      	strb	r3, [r7, #15]
 800e050:	e001      	b.n	800e056 <tcp_process_refused_data+0xb6>
 800e052:	2300      	movs	r3, #0
 800e054:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e05a:	f113 0f0d 	cmn.w	r3, #13
 800e05e:	d110      	bne.n	800e082 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e060:	f06f 030c 	mvn.w	r3, #12
 800e064:	e00e      	b.n	800e084 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e06a:	f113 0f0d 	cmn.w	r3, #13
 800e06e:	d102      	bne.n	800e076 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e070:	f06f 030c 	mvn.w	r3, #12
 800e074:	e006      	b.n	800e084 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e07c:	f06f 0304 	mvn.w	r3, #4
 800e080:	e000      	b.n	800e084 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd90      	pop	{r4, r7, pc}
 800e08c:	0801a9d0 	.word	0x0801a9d0
 800e090:	0801aee0 	.word	0x0801aee0
 800e094:	0801aa14 	.word	0x0801aa14

0800e098 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e0a0:	e007      	b.n	800e0b2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 f80a 	bl	800e0c2 <tcp_seg_free>
    seg = next;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1f4      	bne.n	800e0a2 <tcp_segs_free+0xa>
  }
}
 800e0b8:	bf00      	nop
 800e0ba:	bf00      	nop
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b082      	sub	sp, #8
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00c      	beq.n	800e0ea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d004      	beq.n	800e0e2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fe fb0b 	bl	800c6f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e0e2:	6879      	ldr	r1, [r7, #4]
 800e0e4:	2003      	movs	r0, #3
 800e0e6:	f7fd fcc9 	bl	800ba7c <memp_free>
  }
}
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d106      	bne.n	800e110 <tcp_seg_copy+0x1c>
 800e102:	4b0f      	ldr	r3, [pc, #60]	; (800e140 <tcp_seg_copy+0x4c>)
 800e104:	f240 6282 	movw	r2, #1666	; 0x682
 800e108:	490e      	ldr	r1, [pc, #56]	; (800e144 <tcp_seg_copy+0x50>)
 800e10a:	480f      	ldr	r0, [pc, #60]	; (800e148 <tcp_seg_copy+0x54>)
 800e10c:	f00a fc9a 	bl	8018a44 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e110:	2003      	movs	r0, #3
 800e112:	f7fd fc3d 	bl	800b990 <memp_malloc>
 800e116:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d101      	bne.n	800e122 <tcp_seg_copy+0x2e>
    return NULL;
 800e11e:	2300      	movs	r3, #0
 800e120:	e00a      	b.n	800e138 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e122:	2210      	movs	r2, #16
 800e124:	6879      	ldr	r1, [r7, #4]
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f00a fb98 	bl	801885c <memcpy>
  pbuf_ref(cseg->p);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe fb85 	bl	800c840 <pbuf_ref>
  return cseg;
 800e136:	68fb      	ldr	r3, [r7, #12]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3710      	adds	r7, #16
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	0801a9d0 	.word	0x0801a9d0
 800e144:	0801af24 	.word	0x0801af24
 800e148:	0801aa14 	.word	0x0801aa14

0800e14c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
 800e158:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d109      	bne.n	800e174 <tcp_recv_null+0x28>
 800e160:	4b12      	ldr	r3, [pc, #72]	; (800e1ac <tcp_recv_null+0x60>)
 800e162:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e166:	4912      	ldr	r1, [pc, #72]	; (800e1b0 <tcp_recv_null+0x64>)
 800e168:	4812      	ldr	r0, [pc, #72]	; (800e1b4 <tcp_recv_null+0x68>)
 800e16a:	f00a fc6b 	bl	8018a44 <iprintf>
 800e16e:	f06f 030f 	mvn.w	r3, #15
 800e172:	e016      	b.n	800e1a2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d009      	beq.n	800e18e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	891b      	ldrh	r3, [r3, #8]
 800e17e:	4619      	mov	r1, r3
 800e180:	68b8      	ldr	r0, [r7, #8]
 800e182:	f7ff f9bb 	bl	800d4fc <tcp_recved>
    pbuf_free(p);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7fe fab6 	bl	800c6f8 <pbuf_free>
 800e18c:	e008      	b.n	800e1a0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e18e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d104      	bne.n	800e1a0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e196:	68b8      	ldr	r0, [r7, #8]
 800e198:	f7fe ffc8 	bl	800d12c <tcp_close>
 800e19c:	4603      	mov	r3, r0
 800e19e:	e000      	b.n	800e1a2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	0801a9d0 	.word	0x0801a9d0
 800e1b0:	0801af40 	.word	0x0801af40
 800e1b4:	0801aa14 	.word	0x0801aa14

0800e1b8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b086      	sub	sp, #24
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	4603      	mov	r3, r0
 800e1c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	db01      	blt.n	800e1ce <tcp_kill_prio+0x16>
 800e1ca:	79fb      	ldrb	r3, [r7, #7]
 800e1cc:	e000      	b.n	800e1d0 <tcp_kill_prio+0x18>
 800e1ce:	237f      	movs	r3, #127	; 0x7f
 800e1d0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e1d2:	7afb      	ldrb	r3, [r7, #11]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d034      	beq.n	800e242 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e1d8:	7afb      	ldrb	r3, [r7, #11]
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1e6:	4b19      	ldr	r3, [pc, #100]	; (800e24c <tcp_kill_prio+0x94>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	617b      	str	r3, [r7, #20]
 800e1ec:	e01f      	b.n	800e22e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	7d5b      	ldrb	r3, [r3, #21]
 800e1f2:	7afa      	ldrb	r2, [r7, #11]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d80c      	bhi.n	800e212 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e1fc:	7afa      	ldrb	r2, [r7, #11]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d112      	bne.n	800e228 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e202:	4b13      	ldr	r3, [pc, #76]	; (800e250 <tcp_kill_prio+0x98>)
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	6a1b      	ldr	r3, [r3, #32]
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d80a      	bhi.n	800e228 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e212:	4b0f      	ldr	r3, [pc, #60]	; (800e250 <tcp_kill_prio+0x98>)
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	6a1b      	ldr	r3, [r3, #32]
 800e21a:	1ad3      	subs	r3, r2, r3
 800e21c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	7d5b      	ldrb	r3, [r3, #21]
 800e226:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1dc      	bne.n	800e1ee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d004      	beq.n	800e244 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e23a:	6938      	ldr	r0, [r7, #16]
 800e23c:	f7ff f860 	bl	800d300 <tcp_abort>
 800e240:	e000      	b.n	800e244 <tcp_kill_prio+0x8c>
    return;
 800e242:	bf00      	nop
  }
}
 800e244:	3718      	adds	r7, #24
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	2000be3c 	.word	0x2000be3c
 800e250:	2000be30 	.word	0x2000be30

0800e254 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e25e:	79fb      	ldrb	r3, [r7, #7]
 800e260:	2b08      	cmp	r3, #8
 800e262:	d009      	beq.n	800e278 <tcp_kill_state+0x24>
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	2b09      	cmp	r3, #9
 800e268:	d006      	beq.n	800e278 <tcp_kill_state+0x24>
 800e26a:	4b1a      	ldr	r3, [pc, #104]	; (800e2d4 <tcp_kill_state+0x80>)
 800e26c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e270:	4919      	ldr	r1, [pc, #100]	; (800e2d8 <tcp_kill_state+0x84>)
 800e272:	481a      	ldr	r0, [pc, #104]	; (800e2dc <tcp_kill_state+0x88>)
 800e274:	f00a fbe6 	bl	8018a44 <iprintf>

  inactivity = 0;
 800e278:	2300      	movs	r3, #0
 800e27a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e27c:	2300      	movs	r3, #0
 800e27e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e280:	4b17      	ldr	r3, [pc, #92]	; (800e2e0 <tcp_kill_state+0x8c>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	617b      	str	r3, [r7, #20]
 800e286:	e017      	b.n	800e2b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	7d1b      	ldrb	r3, [r3, #20]
 800e28c:	79fa      	ldrb	r2, [r7, #7]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d10f      	bne.n	800e2b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e292:	4b14      	ldr	r3, [pc, #80]	; (800e2e4 <tcp_kill_state+0x90>)
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d807      	bhi.n	800e2b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e2a2:	4b10      	ldr	r3, [pc, #64]	; (800e2e4 <tcp_kill_state+0x90>)
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	6a1b      	ldr	r3, [r3, #32]
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	617b      	str	r3, [r7, #20]
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1e4      	bne.n	800e288 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d003      	beq.n	800e2cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	6938      	ldr	r0, [r7, #16]
 800e2c8:	f7fe ff5c 	bl	800d184 <tcp_abandon>
  }
}
 800e2cc:	bf00      	nop
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	0801a9d0 	.word	0x0801a9d0
 800e2d8:	0801af5c 	.word	0x0801af5c
 800e2dc:	0801aa14 	.word	0x0801aa14
 800e2e0:	2000be3c 	.word	0x2000be3c
 800e2e4:	2000be30 	.word	0x2000be30

0800e2e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2f6:	4b12      	ldr	r3, [pc, #72]	; (800e340 <tcp_kill_timewait+0x58>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	e012      	b.n	800e324 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e2fe:	4b11      	ldr	r3, [pc, #68]	; (800e344 <tcp_kill_timewait+0x5c>)
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	6a1b      	ldr	r3, [r3, #32]
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d807      	bhi.n	800e31e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e30e:	4b0d      	ldr	r3, [pc, #52]	; (800e344 <tcp_kill_timewait+0x5c>)
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6a1b      	ldr	r3, [r3, #32]
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1e9      	bne.n	800e2fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e330:	68b8      	ldr	r0, [r7, #8]
 800e332:	f7fe ffe5 	bl	800d300 <tcp_abort>
  }
}
 800e336:	bf00      	nop
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	2000be40 	.word	0x2000be40
 800e344:	2000be30 	.word	0x2000be30

0800e348 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e34e:	4b10      	ldr	r3, [pc, #64]	; (800e390 <tcp_handle_closepend+0x48>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e354:	e014      	b.n	800e380 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8b5b      	ldrh	r3, [r3, #26]
 800e360:	f003 0308 	and.w	r3, r3, #8
 800e364:	2b00      	cmp	r3, #0
 800e366:	d009      	beq.n	800e37c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	8b5b      	ldrh	r3, [r3, #26]
 800e36c:	f023 0308 	bic.w	r3, r3, #8
 800e370:	b29a      	uxth	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7fe fe6e 	bl	800d058 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1e7      	bne.n	800e356 <tcp_handle_closepend+0xe>
  }
}
 800e386:	bf00      	nop
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	2000be3c 	.word	0x2000be3c

0800e394 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e39e:	2001      	movs	r0, #1
 800e3a0:	f7fd faf6 	bl	800b990 <memp_malloc>
 800e3a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d126      	bne.n	800e3fa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e3ac:	f7ff ffcc 	bl	800e348 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e3b0:	f7ff ff9a 	bl	800e2e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e3b4:	2001      	movs	r0, #1
 800e3b6:	f7fd faeb 	bl	800b990 <memp_malloc>
 800e3ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d11b      	bne.n	800e3fa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e3c2:	2009      	movs	r0, #9
 800e3c4:	f7ff ff46 	bl	800e254 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e3c8:	2001      	movs	r0, #1
 800e3ca:	f7fd fae1 	bl	800b990 <memp_malloc>
 800e3ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d111      	bne.n	800e3fa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e3d6:	2008      	movs	r0, #8
 800e3d8:	f7ff ff3c 	bl	800e254 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e3dc:	2001      	movs	r0, #1
 800e3de:	f7fd fad7 	bl	800b990 <memp_malloc>
 800e3e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d107      	bne.n	800e3fa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e3ea:	79fb      	ldrb	r3, [r7, #7]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7ff fee3 	bl	800e1b8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	f7fd facc 	bl	800b990 <memp_malloc>
 800e3f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d03f      	beq.n	800e480 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e400:	229c      	movs	r2, #156	; 0x9c
 800e402:	2100      	movs	r1, #0
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f00a fa37 	bl	8018878 <memset>
    pcb->prio = prio;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	79fa      	ldrb	r2, [r7, #7]
 800e40e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e416:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e420:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	22ff      	movs	r2, #255	; 0xff
 800e42e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e436:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2206      	movs	r2, #6
 800e43c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2206      	movs	r2, #6
 800e444:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e44c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2201      	movs	r2, #1
 800e452:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e456:	4b0d      	ldr	r3, [pc, #52]	; (800e48c <tcp_alloc+0xf8>)
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e45e:	4b0c      	ldr	r3, [pc, #48]	; (800e490 <tcp_alloc+0xfc>)
 800e460:	781a      	ldrb	r2, [r3, #0]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e46c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	4a08      	ldr	r2, [pc, #32]	; (800e494 <tcp_alloc+0x100>)
 800e474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	4a07      	ldr	r2, [pc, #28]	; (800e498 <tcp_alloc+0x104>)
 800e47c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e480:	68fb      	ldr	r3, [r7, #12]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	2000be30 	.word	0x2000be30
 800e490:	2000be46 	.word	0x2000be46
 800e494:	0800e14d 	.word	0x0800e14d
 800e498:	006ddd00 	.word	0x006ddd00

0800e49c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e4a6:	2040      	movs	r0, #64	; 0x40
 800e4a8:	f7ff ff74 	bl	800e394 <tcp_alloc>
 800e4ac:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3710      	adds	r7, #16
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d002      	beq.n	800e4ce <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	611a      	str	r2, [r3, #16]
  }
}
 800e4ce:	bf00      	nop
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bc80      	pop	{r7}
 800e4d6:	4770      	bx	lr

0800e4d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d00e      	beq.n	800e506 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	7d1b      	ldrb	r3, [r3, #20]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d106      	bne.n	800e4fe <tcp_recv+0x26>
 800e4f0:	4b07      	ldr	r3, [pc, #28]	; (800e510 <tcp_recv+0x38>)
 800e4f2:	f240 72df 	movw	r2, #2015	; 0x7df
 800e4f6:	4907      	ldr	r1, [pc, #28]	; (800e514 <tcp_recv+0x3c>)
 800e4f8:	4807      	ldr	r0, [pc, #28]	; (800e518 <tcp_recv+0x40>)
 800e4fa:	f00a faa3 	bl	8018a44 <iprintf>
    pcb->recv = recv;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	683a      	ldr	r2, [r7, #0]
 800e502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e506:	bf00      	nop
 800e508:	3708      	adds	r7, #8
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	0801a9d0 	.word	0x0801a9d0
 800e514:	0801af6c 	.word	0x0801af6c
 800e518:	0801aa14 	.word	0x0801aa14

0800e51c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00e      	beq.n	800e54a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	7d1b      	ldrb	r3, [r3, #20]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d106      	bne.n	800e542 <tcp_sent+0x26>
 800e534:	4b07      	ldr	r3, [pc, #28]	; (800e554 <tcp_sent+0x38>)
 800e536:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e53a:	4907      	ldr	r1, [pc, #28]	; (800e558 <tcp_sent+0x3c>)
 800e53c:	4807      	ldr	r0, [pc, #28]	; (800e55c <tcp_sent+0x40>)
 800e53e:	f00a fa81 	bl	8018a44 <iprintf>
    pcb->sent = sent;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	683a      	ldr	r2, [r7, #0]
 800e546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e54a:	bf00      	nop
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	0801a9d0 	.word	0x0801a9d0
 800e558:	0801af94 	.word	0x0801af94
 800e55c:	0801aa14 	.word	0x0801aa14

0800e560 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00e      	beq.n	800e58e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7d1b      	ldrb	r3, [r3, #20]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d106      	bne.n	800e586 <tcp_err+0x26>
 800e578:	4b07      	ldr	r3, [pc, #28]	; (800e598 <tcp_err+0x38>)
 800e57a:	f640 020d 	movw	r2, #2061	; 0x80d
 800e57e:	4907      	ldr	r1, [pc, #28]	; (800e59c <tcp_err+0x3c>)
 800e580:	4807      	ldr	r0, [pc, #28]	; (800e5a0 <tcp_err+0x40>)
 800e582:	f00a fa5f 	bl	8018a44 <iprintf>
    pcb->errf = err;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	683a      	ldr	r2, [r7, #0]
 800e58a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e58e:	bf00      	nop
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	0801a9d0 	.word	0x0801a9d0
 800e59c:	0801afbc 	.word	0x0801afbc
 800e5a0:	0801aa14 	.word	0x0801aa14

0800e5a4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d107      	bne.n	800e5c8 <tcp_poll+0x24>
 800e5b8:	4b0e      	ldr	r3, [pc, #56]	; (800e5f4 <tcp_poll+0x50>)
 800e5ba:	f640 023d 	movw	r2, #2109	; 0x83d
 800e5be:	490e      	ldr	r1, [pc, #56]	; (800e5f8 <tcp_poll+0x54>)
 800e5c0:	480e      	ldr	r0, [pc, #56]	; (800e5fc <tcp_poll+0x58>)
 800e5c2:	f00a fa3f 	bl	8018a44 <iprintf>
 800e5c6:	e011      	b.n	800e5ec <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	7d1b      	ldrb	r3, [r3, #20]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d106      	bne.n	800e5de <tcp_poll+0x3a>
 800e5d0:	4b08      	ldr	r3, [pc, #32]	; (800e5f4 <tcp_poll+0x50>)
 800e5d2:	f640 023e 	movw	r2, #2110	; 0x83e
 800e5d6:	490a      	ldr	r1, [pc, #40]	; (800e600 <tcp_poll+0x5c>)
 800e5d8:	4808      	ldr	r0, [pc, #32]	; (800e5fc <tcp_poll+0x58>)
 800e5da:	f00a fa33 	bl	8018a44 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	68ba      	ldr	r2, [r7, #8]
 800e5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	79fa      	ldrb	r2, [r7, #7]
 800e5ea:	775a      	strb	r2, [r3, #29]
}
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	0801a9d0 	.word	0x0801a9d0
 800e5f8:	0801afe4 	.word	0x0801afe4
 800e5fc:	0801aa14 	.word	0x0801aa14
 800e600:	0801affc 	.word	0x0801affc

0800e604 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d107      	bne.n	800e622 <tcp_pcb_purge+0x1e>
 800e612:	4b21      	ldr	r3, [pc, #132]	; (800e698 <tcp_pcb_purge+0x94>)
 800e614:	f640 0251 	movw	r2, #2129	; 0x851
 800e618:	4920      	ldr	r1, [pc, #128]	; (800e69c <tcp_pcb_purge+0x98>)
 800e61a:	4821      	ldr	r0, [pc, #132]	; (800e6a0 <tcp_pcb_purge+0x9c>)
 800e61c:	f00a fa12 	bl	8018a44 <iprintf>
 800e620:	e037      	b.n	800e692 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7d1b      	ldrb	r3, [r3, #20]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d033      	beq.n	800e692 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e62e:	2b0a      	cmp	r3, #10
 800e630:	d02f      	beq.n	800e692 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e636:	2b01      	cmp	r3, #1
 800e638:	d02b      	beq.n	800e692 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d007      	beq.n	800e652 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e646:	4618      	mov	r0, r3
 800e648:	f7fe f856 	bl	800c6f8 <pbuf_free>
      pcb->refused_data = NULL;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e656:	2b00      	cmp	r3, #0
 800e658:	d002      	beq.n	800e660 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 f986 	bl	800e96c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e666:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7ff fd13 	bl	800e098 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e676:	4618      	mov	r0, r3
 800e678:	f7ff fd0e 	bl	800e098 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2200      	movs	r2, #0
 800e680:	66da      	str	r2, [r3, #108]	; 0x6c
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	0801a9d0 	.word	0x0801a9d0
 800e69c:	0801b01c 	.word	0x0801b01c
 800e6a0:	0801aa14 	.word	0x0801aa14

0800e6a4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d106      	bne.n	800e6c2 <tcp_pcb_remove+0x1e>
 800e6b4:	4b3e      	ldr	r3, [pc, #248]	; (800e7b0 <tcp_pcb_remove+0x10c>)
 800e6b6:	f640 0283 	movw	r2, #2179	; 0x883
 800e6ba:	493e      	ldr	r1, [pc, #248]	; (800e7b4 <tcp_pcb_remove+0x110>)
 800e6bc:	483e      	ldr	r0, [pc, #248]	; (800e7b8 <tcp_pcb_remove+0x114>)
 800e6be:	f00a f9c1 	bl	8018a44 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <tcp_pcb_remove+0x32>
 800e6c8:	4b39      	ldr	r3, [pc, #228]	; (800e7b0 <tcp_pcb_remove+0x10c>)
 800e6ca:	f640 0284 	movw	r2, #2180	; 0x884
 800e6ce:	493b      	ldr	r1, [pc, #236]	; (800e7bc <tcp_pcb_remove+0x118>)
 800e6d0:	4839      	ldr	r0, [pc, #228]	; (800e7b8 <tcp_pcb_remove+0x114>)
 800e6d2:	f00a f9b7 	bl	8018a44 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d105      	bne.n	800e6ec <tcp_pcb_remove+0x48>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	68da      	ldr	r2, [r3, #12]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	601a      	str	r2, [r3, #0]
 800e6ea:	e013      	b.n	800e714 <tcp_pcb_remove+0x70>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	60fb      	str	r3, [r7, #12]
 800e6f2:	e00c      	b.n	800e70e <tcp_pcb_remove+0x6a>
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	683a      	ldr	r2, [r7, #0]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d104      	bne.n	800e708 <tcp_pcb_remove+0x64>
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	68da      	ldr	r2, [r3, #12]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	60da      	str	r2, [r3, #12]
 800e706:	e005      	b.n	800e714 <tcp_pcb_remove+0x70>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	60fb      	str	r3, [r7, #12]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1ef      	bne.n	800e6f4 <tcp_pcb_remove+0x50>
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	2200      	movs	r2, #0
 800e718:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e71a:	6838      	ldr	r0, [r7, #0]
 800e71c:	f7ff ff72 	bl	800e604 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	7d1b      	ldrb	r3, [r3, #20]
 800e724:	2b0a      	cmp	r3, #10
 800e726:	d013      	beq.n	800e750 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d00f      	beq.n	800e750 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	8b5b      	ldrh	r3, [r3, #26]
 800e734:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d009      	beq.n	800e750 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	8b5b      	ldrh	r3, [r3, #26]
 800e740:	f043 0302 	orr.w	r3, r3, #2
 800e744:	b29a      	uxth	r2, r3
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e74a:	6838      	ldr	r0, [r7, #0]
 800e74c:	f003 fbc6 	bl	8011edc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	7d1b      	ldrb	r3, [r3, #20]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d020      	beq.n	800e79a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d006      	beq.n	800e76e <tcp_pcb_remove+0xca>
 800e760:	4b13      	ldr	r3, [pc, #76]	; (800e7b0 <tcp_pcb_remove+0x10c>)
 800e762:	f640 0293 	movw	r2, #2195	; 0x893
 800e766:	4916      	ldr	r1, [pc, #88]	; (800e7c0 <tcp_pcb_remove+0x11c>)
 800e768:	4813      	ldr	r0, [pc, #76]	; (800e7b8 <tcp_pcb_remove+0x114>)
 800e76a:	f00a f96b 	bl	8018a44 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e772:	2b00      	cmp	r3, #0
 800e774:	d006      	beq.n	800e784 <tcp_pcb_remove+0xe0>
 800e776:	4b0e      	ldr	r3, [pc, #56]	; (800e7b0 <tcp_pcb_remove+0x10c>)
 800e778:	f640 0294 	movw	r2, #2196	; 0x894
 800e77c:	4911      	ldr	r1, [pc, #68]	; (800e7c4 <tcp_pcb_remove+0x120>)
 800e77e:	480e      	ldr	r0, [pc, #56]	; (800e7b8 <tcp_pcb_remove+0x114>)
 800e780:	f00a f960 	bl	8018a44 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d006      	beq.n	800e79a <tcp_pcb_remove+0xf6>
 800e78c:	4b08      	ldr	r3, [pc, #32]	; (800e7b0 <tcp_pcb_remove+0x10c>)
 800e78e:	f640 0296 	movw	r2, #2198	; 0x896
 800e792:	490d      	ldr	r1, [pc, #52]	; (800e7c8 <tcp_pcb_remove+0x124>)
 800e794:	4808      	ldr	r0, [pc, #32]	; (800e7b8 <tcp_pcb_remove+0x114>)
 800e796:	f00a f955 	bl	8018a44 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2200      	movs	r2, #0
 800e79e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e7a6:	bf00      	nop
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	0801a9d0 	.word	0x0801a9d0
 800e7b4:	0801b038 	.word	0x0801b038
 800e7b8:	0801aa14 	.word	0x0801aa14
 800e7bc:	0801b054 	.word	0x0801b054
 800e7c0:	0801b074 	.word	0x0801b074
 800e7c4:	0801b08c 	.word	0x0801b08c
 800e7c8:	0801b0a8 	.word	0x0801b0a8

0800e7cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d106      	bne.n	800e7e8 <tcp_next_iss+0x1c>
 800e7da:	4b0a      	ldr	r3, [pc, #40]	; (800e804 <tcp_next_iss+0x38>)
 800e7dc:	f640 02af 	movw	r2, #2223	; 0x8af
 800e7e0:	4909      	ldr	r1, [pc, #36]	; (800e808 <tcp_next_iss+0x3c>)
 800e7e2:	480a      	ldr	r0, [pc, #40]	; (800e80c <tcp_next_iss+0x40>)
 800e7e4:	f00a f92e 	bl	8018a44 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e7e8:	4b09      	ldr	r3, [pc, #36]	; (800e810 <tcp_next_iss+0x44>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	4b09      	ldr	r3, [pc, #36]	; (800e814 <tcp_next_iss+0x48>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	4a07      	ldr	r2, [pc, #28]	; (800e810 <tcp_next_iss+0x44>)
 800e7f4:	6013      	str	r3, [r2, #0]
  return iss;
 800e7f6:	4b06      	ldr	r3, [pc, #24]	; (800e810 <tcp_next_iss+0x44>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	0801a9d0 	.word	0x0801a9d0
 800e808:	0801b0c0 	.word	0x0801b0c0
 800e80c:	0801aa14 	.word	0x0801aa14
 800e810:	20000014 	.word	0x20000014
 800e814:	2000be30 	.word	0x2000be30

0800e818 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	4603      	mov	r3, r0
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
 800e824:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <tcp_eff_send_mss_netif+0x22>
 800e82c:	4b14      	ldr	r3, [pc, #80]	; (800e880 <tcp_eff_send_mss_netif+0x68>)
 800e82e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e832:	4914      	ldr	r1, [pc, #80]	; (800e884 <tcp_eff_send_mss_netif+0x6c>)
 800e834:	4814      	ldr	r0, [pc, #80]	; (800e888 <tcp_eff_send_mss_netif+0x70>)
 800e836:	f00a f905 	bl	8018a44 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d101      	bne.n	800e844 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e840:	89fb      	ldrh	r3, [r7, #14]
 800e842:	e019      	b.n	800e878 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e848:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e84a:	8afb      	ldrh	r3, [r7, #22]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d012      	beq.n	800e876 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e850:	2328      	movs	r3, #40	; 0x28
 800e852:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e854:	8afa      	ldrh	r2, [r7, #22]
 800e856:	8abb      	ldrh	r3, [r7, #20]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d904      	bls.n	800e866 <tcp_eff_send_mss_netif+0x4e>
 800e85c:	8afa      	ldrh	r2, [r7, #22]
 800e85e:	8abb      	ldrh	r3, [r7, #20]
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	b29b      	uxth	r3, r3
 800e864:	e000      	b.n	800e868 <tcp_eff_send_mss_netif+0x50>
 800e866:	2300      	movs	r3, #0
 800e868:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e86a:	8a7a      	ldrh	r2, [r7, #18]
 800e86c:	89fb      	ldrh	r3, [r7, #14]
 800e86e:	4293      	cmp	r3, r2
 800e870:	bf28      	it	cs
 800e872:	4613      	movcs	r3, r2
 800e874:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e876:	89fb      	ldrh	r3, [r7, #14]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	0801a9d0 	.word	0x0801a9d0
 800e884:	0801b0dc 	.word	0x0801b0dc
 800e888:	0801aa14 	.word	0x0801aa14

0800e88c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d119      	bne.n	800e8d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e8a0:	4b10      	ldr	r3, [pc, #64]	; (800e8e4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e8a2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e8a6:	4910      	ldr	r1, [pc, #64]	; (800e8e8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e8a8:	4810      	ldr	r0, [pc, #64]	; (800e8ec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e8aa:	f00a f8cb 	bl	8018a44 <iprintf>

  while (pcb != NULL) {
 800e8ae:	e011      	b.n	800e8d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d108      	bne.n	800e8ce <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f7fe fd1c 	bl	800d300 <tcp_abort>
      pcb = next;
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	60fb      	str	r3, [r7, #12]
 800e8cc:	e002      	b.n	800e8d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1ea      	bne.n	800e8b0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e8da:	bf00      	nop
 800e8dc:	bf00      	nop
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	0801a9d0 	.word	0x0801a9d0
 800e8e8:	0801b104 	.word	0x0801b104
 800e8ec:	0801aa14 	.word	0x0801aa14

0800e8f0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d02a      	beq.n	800e956 <tcp_netif_ip_addr_changed+0x66>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d026      	beq.n	800e956 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e908:	4b15      	ldr	r3, [pc, #84]	; (800e960 <tcp_netif_ip_addr_changed+0x70>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4619      	mov	r1, r3
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7ff ffbc 	bl	800e88c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e914:	4b13      	ldr	r3, [pc, #76]	; (800e964 <tcp_netif_ip_addr_changed+0x74>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff ffb6 	bl	800e88c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d017      	beq.n	800e956 <tcp_netif_ip_addr_changed+0x66>
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d013      	beq.n	800e956 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e92e:	4b0e      	ldr	r3, [pc, #56]	; (800e968 <tcp_netif_ip_addr_changed+0x78>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	e00c      	b.n	800e950 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d103      	bne.n	800e94a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	60fb      	str	r3, [r7, #12]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1ef      	bne.n	800e936 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e956:	bf00      	nop
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	2000be3c 	.word	0x2000be3c
 800e964:	2000be34 	.word	0x2000be34
 800e968:	2000be38 	.word	0x2000be38

0800e96c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d007      	beq.n	800e98c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff fb89 	bl	800e098 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e98c:	bf00      	nop
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e994:	b590      	push	{r4, r7, lr}
 800e996:	b08d      	sub	sp, #52	; 0x34
 800e998:	af04      	add	r7, sp, #16
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d105      	bne.n	800e9b0 <tcp_input+0x1c>
 800e9a4:	4b9b      	ldr	r3, [pc, #620]	; (800ec14 <tcp_input+0x280>)
 800e9a6:	2283      	movs	r2, #131	; 0x83
 800e9a8:	499b      	ldr	r1, [pc, #620]	; (800ec18 <tcp_input+0x284>)
 800e9aa:	489c      	ldr	r0, [pc, #624]	; (800ec1c <tcp_input+0x288>)
 800e9ac:	f00a f84a 	bl	8018a44 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	4a9a      	ldr	r2, [pc, #616]	; (800ec20 <tcp_input+0x28c>)
 800e9b6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	895b      	ldrh	r3, [r3, #10]
 800e9bc:	2b13      	cmp	r3, #19
 800e9be:	f240 83d1 	bls.w	800f164 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e9c2:	4b98      	ldr	r3, [pc, #608]	; (800ec24 <tcp_input+0x290>)
 800e9c4:	695b      	ldr	r3, [r3, #20]
 800e9c6:	4a97      	ldr	r2, [pc, #604]	; (800ec24 <tcp_input+0x290>)
 800e9c8:	6812      	ldr	r2, [r2, #0]
 800e9ca:	4611      	mov	r1, r2
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f008 fa75 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f040 83c7 	bne.w	800f168 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e9da:	4b92      	ldr	r3, [pc, #584]	; (800ec24 <tcp_input+0x290>)
 800e9dc:	695b      	ldr	r3, [r3, #20]
 800e9de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e9e2:	2be0      	cmp	r3, #224	; 0xe0
 800e9e4:	f000 83c0 	beq.w	800f168 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e9e8:	4b8d      	ldr	r3, [pc, #564]	; (800ec20 <tcp_input+0x28c>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	899b      	ldrh	r3, [r3, #12]
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fc fa1d 	bl	800ae30 <lwip_htons>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	0b1b      	lsrs	r3, r3, #12
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ea02:	7cbb      	ldrb	r3, [r7, #18]
 800ea04:	2b13      	cmp	r3, #19
 800ea06:	f240 83b1 	bls.w	800f16c <tcp_input+0x7d8>
 800ea0a:	7cbb      	ldrb	r3, [r7, #18]
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	891b      	ldrh	r3, [r3, #8]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	f200 83aa 	bhi.w	800f16c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ea18:	7cbb      	ldrb	r3, [r7, #18]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	3b14      	subs	r3, #20
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	4b81      	ldr	r3, [pc, #516]	; (800ec28 <tcp_input+0x294>)
 800ea22:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ea24:	4b81      	ldr	r3, [pc, #516]	; (800ec2c <tcp_input+0x298>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	895a      	ldrh	r2, [r3, #10]
 800ea2e:	7cbb      	ldrb	r3, [r7, #18]
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d309      	bcc.n	800ea4a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ea36:	4b7c      	ldr	r3, [pc, #496]	; (800ec28 <tcp_input+0x294>)
 800ea38:	881a      	ldrh	r2, [r3, #0]
 800ea3a:	4b7d      	ldr	r3, [pc, #500]	; (800ec30 <tcp_input+0x29c>)
 800ea3c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ea3e:	7cbb      	ldrb	r3, [r7, #18]
 800ea40:	4619      	mov	r1, r3
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f7fd fdd2 	bl	800c5ec <pbuf_remove_header>
 800ea48:	e04e      	b.n	800eae8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d105      	bne.n	800ea5e <tcp_input+0xca>
 800ea52:	4b70      	ldr	r3, [pc, #448]	; (800ec14 <tcp_input+0x280>)
 800ea54:	22c2      	movs	r2, #194	; 0xc2
 800ea56:	4977      	ldr	r1, [pc, #476]	; (800ec34 <tcp_input+0x2a0>)
 800ea58:	4870      	ldr	r0, [pc, #448]	; (800ec1c <tcp_input+0x288>)
 800ea5a:	f009 fff3 	bl	8018a44 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ea5e:	2114      	movs	r1, #20
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7fd fdc3 	bl	800c5ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	895a      	ldrh	r2, [r3, #10]
 800ea6a:	4b71      	ldr	r3, [pc, #452]	; (800ec30 <tcp_input+0x29c>)
 800ea6c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ea6e:	4b6e      	ldr	r3, [pc, #440]	; (800ec28 <tcp_input+0x294>)
 800ea70:	881a      	ldrh	r2, [r3, #0]
 800ea72:	4b6f      	ldr	r3, [pc, #444]	; (800ec30 <tcp_input+0x29c>)
 800ea74:	881b      	ldrh	r3, [r3, #0]
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ea7a:	4b6d      	ldr	r3, [pc, #436]	; (800ec30 <tcp_input+0x29c>)
 800ea7c:	881b      	ldrh	r3, [r3, #0]
 800ea7e:	4619      	mov	r1, r3
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7fd fdb3 	bl	800c5ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	895b      	ldrh	r3, [r3, #10]
 800ea8c:	8a3a      	ldrh	r2, [r7, #16]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	f200 836e 	bhi.w	800f170 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	4a64      	ldr	r2, [pc, #400]	; (800ec2c <tcp_input+0x298>)
 800ea9c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	8a3a      	ldrh	r2, [r7, #16]
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fd fda0 	bl	800c5ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	891a      	ldrh	r2, [r3, #8]
 800eab0:	8a3b      	ldrh	r3, [r7, #16]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	895b      	ldrh	r3, [r3, #10]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d005      	beq.n	800eace <tcp_input+0x13a>
 800eac2:	4b54      	ldr	r3, [pc, #336]	; (800ec14 <tcp_input+0x280>)
 800eac4:	22df      	movs	r2, #223	; 0xdf
 800eac6:	495c      	ldr	r1, [pc, #368]	; (800ec38 <tcp_input+0x2a4>)
 800eac8:	4854      	ldr	r0, [pc, #336]	; (800ec1c <tcp_input+0x288>)
 800eaca:	f009 ffbb 	bl	8018a44 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	891a      	ldrh	r2, [r3, #8]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	891b      	ldrh	r3, [r3, #8]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d005      	beq.n	800eae8 <tcp_input+0x154>
 800eadc:	4b4d      	ldr	r3, [pc, #308]	; (800ec14 <tcp_input+0x280>)
 800eade:	22e0      	movs	r2, #224	; 0xe0
 800eae0:	4956      	ldr	r1, [pc, #344]	; (800ec3c <tcp_input+0x2a8>)
 800eae2:	484e      	ldr	r0, [pc, #312]	; (800ec1c <tcp_input+0x288>)
 800eae4:	f009 ffae 	bl	8018a44 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800eae8:	4b4d      	ldr	r3, [pc, #308]	; (800ec20 <tcp_input+0x28c>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	4a4b      	ldr	r2, [pc, #300]	; (800ec20 <tcp_input+0x28c>)
 800eaf2:	6814      	ldr	r4, [r2, #0]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7fc f99b 	bl	800ae30 <lwip_htons>
 800eafa:	4603      	mov	r3, r0
 800eafc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800eafe:	4b48      	ldr	r3, [pc, #288]	; (800ec20 <tcp_input+0x28c>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	885b      	ldrh	r3, [r3, #2]
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	4a46      	ldr	r2, [pc, #280]	; (800ec20 <tcp_input+0x28c>)
 800eb08:	6814      	ldr	r4, [r2, #0]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fc f990 	bl	800ae30 <lwip_htons>
 800eb10:	4603      	mov	r3, r0
 800eb12:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800eb14:	4b42      	ldr	r3, [pc, #264]	; (800ec20 <tcp_input+0x28c>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	4a41      	ldr	r2, [pc, #260]	; (800ec20 <tcp_input+0x28c>)
 800eb1c:	6814      	ldr	r4, [r2, #0]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fc f99a 	bl	800ae58 <lwip_htonl>
 800eb24:	4603      	mov	r3, r0
 800eb26:	6063      	str	r3, [r4, #4]
 800eb28:	6863      	ldr	r3, [r4, #4]
 800eb2a:	4a45      	ldr	r2, [pc, #276]	; (800ec40 <tcp_input+0x2ac>)
 800eb2c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800eb2e:	4b3c      	ldr	r3, [pc, #240]	; (800ec20 <tcp_input+0x28c>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	4a3a      	ldr	r2, [pc, #232]	; (800ec20 <tcp_input+0x28c>)
 800eb36:	6814      	ldr	r4, [r2, #0]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fc f98d 	bl	800ae58 <lwip_htonl>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	60a3      	str	r3, [r4, #8]
 800eb42:	68a3      	ldr	r3, [r4, #8]
 800eb44:	4a3f      	ldr	r2, [pc, #252]	; (800ec44 <tcp_input+0x2b0>)
 800eb46:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800eb48:	4b35      	ldr	r3, [pc, #212]	; (800ec20 <tcp_input+0x28c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	89db      	ldrh	r3, [r3, #14]
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	4a33      	ldr	r2, [pc, #204]	; (800ec20 <tcp_input+0x28c>)
 800eb52:	6814      	ldr	r4, [r2, #0]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7fc f96b 	bl	800ae30 <lwip_htons>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800eb5e:	4b30      	ldr	r3, [pc, #192]	; (800ec20 <tcp_input+0x28c>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	899b      	ldrh	r3, [r3, #12]
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7fc f962 	bl	800ae30 <lwip_htons>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	4b34      	ldr	r3, [pc, #208]	; (800ec48 <tcp_input+0x2b4>)
 800eb78:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	891a      	ldrh	r2, [r3, #8]
 800eb7e:	4b33      	ldr	r3, [pc, #204]	; (800ec4c <tcp_input+0x2b8>)
 800eb80:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800eb82:	4b31      	ldr	r3, [pc, #196]	; (800ec48 <tcp_input+0x2b4>)
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	f003 0303 	and.w	r3, r3, #3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d00c      	beq.n	800eba8 <tcp_input+0x214>
    tcplen++;
 800eb8e:	4b2f      	ldr	r3, [pc, #188]	; (800ec4c <tcp_input+0x2b8>)
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	3301      	adds	r3, #1
 800eb94:	b29a      	uxth	r2, r3
 800eb96:	4b2d      	ldr	r3, [pc, #180]	; (800ec4c <tcp_input+0x2b8>)
 800eb98:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	891a      	ldrh	r2, [r3, #8]
 800eb9e:	4b2b      	ldr	r3, [pc, #172]	; (800ec4c <tcp_input+0x2b8>)
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	f200 82e6 	bhi.w	800f174 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebac:	4b28      	ldr	r3, [pc, #160]	; (800ec50 <tcp_input+0x2bc>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	61fb      	str	r3, [r7, #28]
 800ebb2:	e09d      	b.n	800ecf0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	7d1b      	ldrb	r3, [r3, #20]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d105      	bne.n	800ebc8 <tcp_input+0x234>
 800ebbc:	4b15      	ldr	r3, [pc, #84]	; (800ec14 <tcp_input+0x280>)
 800ebbe:	22fb      	movs	r2, #251	; 0xfb
 800ebc0:	4924      	ldr	r1, [pc, #144]	; (800ec54 <tcp_input+0x2c0>)
 800ebc2:	4816      	ldr	r0, [pc, #88]	; (800ec1c <tcp_input+0x288>)
 800ebc4:	f009 ff3e 	bl	8018a44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	7d1b      	ldrb	r3, [r3, #20]
 800ebcc:	2b0a      	cmp	r3, #10
 800ebce:	d105      	bne.n	800ebdc <tcp_input+0x248>
 800ebd0:	4b10      	ldr	r3, [pc, #64]	; (800ec14 <tcp_input+0x280>)
 800ebd2:	22fc      	movs	r2, #252	; 0xfc
 800ebd4:	4920      	ldr	r1, [pc, #128]	; (800ec58 <tcp_input+0x2c4>)
 800ebd6:	4811      	ldr	r0, [pc, #68]	; (800ec1c <tcp_input+0x288>)
 800ebd8:	f009 ff34 	bl	8018a44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	7d1b      	ldrb	r3, [r3, #20]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d105      	bne.n	800ebf0 <tcp_input+0x25c>
 800ebe4:	4b0b      	ldr	r3, [pc, #44]	; (800ec14 <tcp_input+0x280>)
 800ebe6:	22fd      	movs	r2, #253	; 0xfd
 800ebe8:	491c      	ldr	r1, [pc, #112]	; (800ec5c <tcp_input+0x2c8>)
 800ebea:	480c      	ldr	r0, [pc, #48]	; (800ec1c <tcp_input+0x288>)
 800ebec:	f009 ff2a 	bl	8018a44 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	7a1b      	ldrb	r3, [r3, #8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d033      	beq.n	800ec60 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	7a1a      	ldrb	r2, [r3, #8]
 800ebfc:	4b09      	ldr	r3, [pc, #36]	; (800ec24 <tcp_input+0x290>)
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec04:	3301      	adds	r3, #1
 800ec06:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d029      	beq.n	800ec60 <tcp_input+0x2cc>
      prev = pcb;
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	61bb      	str	r3, [r7, #24]
      continue;
 800ec10:	e06b      	b.n	800ecea <tcp_input+0x356>
 800ec12:	bf00      	nop
 800ec14:	0801b138 	.word	0x0801b138
 800ec18:	0801b16c 	.word	0x0801b16c
 800ec1c:	0801b184 	.word	0x0801b184
 800ec20:	2000be58 	.word	0x2000be58
 800ec24:	20008d10 	.word	0x20008d10
 800ec28:	2000be5c 	.word	0x2000be5c
 800ec2c:	2000be60 	.word	0x2000be60
 800ec30:	2000be5e 	.word	0x2000be5e
 800ec34:	0801b1ac 	.word	0x0801b1ac
 800ec38:	0801b1bc 	.word	0x0801b1bc
 800ec3c:	0801b1c8 	.word	0x0801b1c8
 800ec40:	2000be68 	.word	0x2000be68
 800ec44:	2000be6c 	.word	0x2000be6c
 800ec48:	2000be74 	.word	0x2000be74
 800ec4c:	2000be72 	.word	0x2000be72
 800ec50:	2000be3c 	.word	0x2000be3c
 800ec54:	0801b1e8 	.word	0x0801b1e8
 800ec58:	0801b210 	.word	0x0801b210
 800ec5c:	0801b23c 	.word	0x0801b23c
    }

    if (pcb->remote_port == tcphdr->src &&
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	8b1a      	ldrh	r2, [r3, #24]
 800ec64:	4b72      	ldr	r3, [pc, #456]	; (800ee30 <tcp_input+0x49c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d13a      	bne.n	800ece6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	8ada      	ldrh	r2, [r3, #22]
 800ec74:	4b6e      	ldr	r3, [pc, #440]	; (800ee30 <tcp_input+0x49c>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	885b      	ldrh	r3, [r3, #2]
 800ec7a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d132      	bne.n	800ece6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	4b6b      	ldr	r3, [pc, #428]	; (800ee34 <tcp_input+0x4a0>)
 800ec86:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d12c      	bne.n	800ece6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	4b68      	ldr	r3, [pc, #416]	; (800ee34 <tcp_input+0x4a0>)
 800ec92:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d126      	bne.n	800ece6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	69fa      	ldr	r2, [r7, #28]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d106      	bne.n	800ecb0 <tcp_input+0x31c>
 800eca2:	4b65      	ldr	r3, [pc, #404]	; (800ee38 <tcp_input+0x4a4>)
 800eca4:	f240 120d 	movw	r2, #269	; 0x10d
 800eca8:	4964      	ldr	r1, [pc, #400]	; (800ee3c <tcp_input+0x4a8>)
 800ecaa:	4865      	ldr	r0, [pc, #404]	; (800ee40 <tcp_input+0x4ac>)
 800ecac:	f009 feca 	bl	8018a44 <iprintf>
      if (prev != NULL) {
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00a      	beq.n	800eccc <tcp_input+0x338>
        prev->next = pcb->next;
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	68da      	ldr	r2, [r3, #12]
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ecbe:	4b61      	ldr	r3, [pc, #388]	; (800ee44 <tcp_input+0x4b0>)
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ecc6:	4a5f      	ldr	r2, [pc, #380]	; (800ee44 <tcp_input+0x4b0>)
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	69fa      	ldr	r2, [r7, #28]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d111      	bne.n	800ecfa <tcp_input+0x366>
 800ecd6:	4b58      	ldr	r3, [pc, #352]	; (800ee38 <tcp_input+0x4a4>)
 800ecd8:	f240 1215 	movw	r2, #277	; 0x115
 800ecdc:	495a      	ldr	r1, [pc, #360]	; (800ee48 <tcp_input+0x4b4>)
 800ecde:	4858      	ldr	r0, [pc, #352]	; (800ee40 <tcp_input+0x4ac>)
 800ece0:	f009 feb0 	bl	8018a44 <iprintf>
      break;
 800ece4:	e009      	b.n	800ecfa <tcp_input+0x366>
    }
    prev = pcb;
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecea:	69fb      	ldr	r3, [r7, #28]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	61fb      	str	r3, [r7, #28]
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f47f af5e 	bne.w	800ebb4 <tcp_input+0x220>
 800ecf8:	e000      	b.n	800ecfc <tcp_input+0x368>
      break;
 800ecfa:	bf00      	nop
  }

  if (pcb == NULL) {
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f040 80aa 	bne.w	800ee58 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed04:	4b51      	ldr	r3, [pc, #324]	; (800ee4c <tcp_input+0x4b8>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	61fb      	str	r3, [r7, #28]
 800ed0a:	e03f      	b.n	800ed8c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	7d1b      	ldrb	r3, [r3, #20]
 800ed10:	2b0a      	cmp	r3, #10
 800ed12:	d006      	beq.n	800ed22 <tcp_input+0x38e>
 800ed14:	4b48      	ldr	r3, [pc, #288]	; (800ee38 <tcp_input+0x4a4>)
 800ed16:	f240 121f 	movw	r2, #287	; 0x11f
 800ed1a:	494d      	ldr	r1, [pc, #308]	; (800ee50 <tcp_input+0x4bc>)
 800ed1c:	4848      	ldr	r0, [pc, #288]	; (800ee40 <tcp_input+0x4ac>)
 800ed1e:	f009 fe91 	bl	8018a44 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	7a1b      	ldrb	r3, [r3, #8]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d009      	beq.n	800ed3e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	7a1a      	ldrb	r2, [r3, #8]
 800ed2e:	4b41      	ldr	r3, [pc, #260]	; (800ee34 <tcp_input+0x4a0>)
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed36:	3301      	adds	r3, #1
 800ed38:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d122      	bne.n	800ed84 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	8b1a      	ldrh	r2, [r3, #24]
 800ed42:	4b3b      	ldr	r3, [pc, #236]	; (800ee30 <tcp_input+0x49c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	881b      	ldrh	r3, [r3, #0]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d11b      	bne.n	800ed86 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	8ada      	ldrh	r2, [r3, #22]
 800ed52:	4b37      	ldr	r3, [pc, #220]	; (800ee30 <tcp_input+0x49c>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	885b      	ldrh	r3, [r3, #2]
 800ed58:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d113      	bne.n	800ed86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	4b34      	ldr	r3, [pc, #208]	; (800ee34 <tcp_input+0x4a0>)
 800ed64:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d10d      	bne.n	800ed86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	4b31      	ldr	r3, [pc, #196]	; (800ee34 <tcp_input+0x4a0>)
 800ed70:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d107      	bne.n	800ed86 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ed76:	69f8      	ldr	r0, [r7, #28]
 800ed78:	f000 fb56 	bl	800f428 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7fd fcbb 	bl	800c6f8 <pbuf_free>
        return;
 800ed82:	e1fd      	b.n	800f180 <tcp_input+0x7ec>
        continue;
 800ed84:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	61fb      	str	r3, [r7, #28]
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1bc      	bne.n	800ed0c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ed92:	2300      	movs	r3, #0
 800ed94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ed96:	4b2f      	ldr	r3, [pc, #188]	; (800ee54 <tcp_input+0x4c0>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	617b      	str	r3, [r7, #20]
 800ed9c:	e02a      	b.n	800edf4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	7a1b      	ldrb	r3, [r3, #8]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00c      	beq.n	800edc0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	7a1a      	ldrb	r2, [r3, #8]
 800edaa:	4b22      	ldr	r3, [pc, #136]	; (800ee34 <tcp_input+0x4a0>)
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800edb2:	3301      	adds	r3, #1
 800edb4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d002      	beq.n	800edc0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	61bb      	str	r3, [r7, #24]
        continue;
 800edbe:	e016      	b.n	800edee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	8ada      	ldrh	r2, [r3, #22]
 800edc4:	4b1a      	ldr	r3, [pc, #104]	; (800ee30 <tcp_input+0x49c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	885b      	ldrh	r3, [r3, #2]
 800edca:	b29b      	uxth	r3, r3
 800edcc:	429a      	cmp	r2, r3
 800edce:	d10c      	bne.n	800edea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	4b17      	ldr	r3, [pc, #92]	; (800ee34 <tcp_input+0x4a0>)
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d00f      	beq.n	800edfc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00d      	beq.n	800edfe <tcp_input+0x46a>
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d009      	beq.n	800edfe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	617b      	str	r3, [r7, #20]
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1d1      	bne.n	800ed9e <tcp_input+0x40a>
 800edfa:	e000      	b.n	800edfe <tcp_input+0x46a>
            break;
 800edfc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d029      	beq.n	800ee58 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00a      	beq.n	800ee20 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	68da      	ldr	r2, [r3, #12]
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ee12:	4b10      	ldr	r3, [pc, #64]	; (800ee54 <tcp_input+0x4c0>)
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ee1a:	4a0e      	ldr	r2, [pc, #56]	; (800ee54 <tcp_input+0x4c0>)
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ee20:	6978      	ldr	r0, [r7, #20]
 800ee22:	f000 fa03 	bl	800f22c <tcp_listen_input>
      }
      pbuf_free(p);
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f7fd fc66 	bl	800c6f8 <pbuf_free>
      return;
 800ee2c:	e1a8      	b.n	800f180 <tcp_input+0x7ec>
 800ee2e:	bf00      	nop
 800ee30:	2000be58 	.word	0x2000be58
 800ee34:	20008d10 	.word	0x20008d10
 800ee38:	0801b138 	.word	0x0801b138
 800ee3c:	0801b264 	.word	0x0801b264
 800ee40:	0801b184 	.word	0x0801b184
 800ee44:	2000be3c 	.word	0x2000be3c
 800ee48:	0801b290 	.word	0x0801b290
 800ee4c:	2000be40 	.word	0x2000be40
 800ee50:	0801b2bc 	.word	0x0801b2bc
 800ee54:	2000be38 	.word	0x2000be38
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f000 8158 	beq.w	800f110 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ee60:	4b95      	ldr	r3, [pc, #596]	; (800f0b8 <tcp_input+0x724>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	891a      	ldrh	r2, [r3, #8]
 800ee6a:	4b93      	ldr	r3, [pc, #588]	; (800f0b8 <tcp_input+0x724>)
 800ee6c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ee6e:	4a92      	ldr	r2, [pc, #584]	; (800f0b8 <tcp_input+0x724>)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ee74:	4b91      	ldr	r3, [pc, #580]	; (800f0bc <tcp_input+0x728>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a8f      	ldr	r2, [pc, #572]	; (800f0b8 <tcp_input+0x724>)
 800ee7a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ee7c:	4b90      	ldr	r3, [pc, #576]	; (800f0c0 <tcp_input+0x72c>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ee82:	4b90      	ldr	r3, [pc, #576]	; (800f0c4 <tcp_input+0x730>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ee88:	4b8f      	ldr	r3, [pc, #572]	; (800f0c8 <tcp_input+0x734>)
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ee8e:	4b8f      	ldr	r3, [pc, #572]	; (800f0cc <tcp_input+0x738>)
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	f003 0308 	and.w	r3, r3, #8
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d006      	beq.n	800eea8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7b5b      	ldrb	r3, [r3, #13]
 800ee9e:	f043 0301 	orr.w	r3, r3, #1
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d017      	beq.n	800eee0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eeb0:	69f8      	ldr	r0, [r7, #28]
 800eeb2:	f7ff f875 	bl	800dfa0 <tcp_process_refused_data>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	f113 0f0d 	cmn.w	r3, #13
 800eebc:	d007      	beq.n	800eece <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00c      	beq.n	800eee0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eec6:	4b82      	ldr	r3, [pc, #520]	; (800f0d0 <tcp_input+0x73c>)
 800eec8:	881b      	ldrh	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d008      	beq.n	800eee0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eece:	69fb      	ldr	r3, [r7, #28]
 800eed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f040 80e3 	bne.w	800f09e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eed8:	69f8      	ldr	r0, [r7, #28]
 800eeda:	f003 fe05 	bl	8012ae8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eede:	e0de      	b.n	800f09e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800eee0:	4a7c      	ldr	r2, [pc, #496]	; (800f0d4 <tcp_input+0x740>)
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eee6:	69f8      	ldr	r0, [r7, #28]
 800eee8:	f000 fb18 	bl	800f51c <tcp_process>
 800eeec:	4603      	mov	r3, r0
 800eeee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eef0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eef4:	f113 0f0d 	cmn.w	r3, #13
 800eef8:	f000 80d3 	beq.w	800f0a2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800eefc:	4b71      	ldr	r3, [pc, #452]	; (800f0c4 <tcp_input+0x730>)
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	f003 0308 	and.w	r3, r3, #8
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d015      	beq.n	800ef34 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d008      	beq.n	800ef24 <tcp_input+0x590>
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef18:	69fa      	ldr	r2, [r7, #28]
 800ef1a:	6912      	ldr	r2, [r2, #16]
 800ef1c:	f06f 010d 	mvn.w	r1, #13
 800ef20:	4610      	mov	r0, r2
 800ef22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ef24:	69f9      	ldr	r1, [r7, #28]
 800ef26:	486c      	ldr	r0, [pc, #432]	; (800f0d8 <tcp_input+0x744>)
 800ef28:	f7ff fbbc 	bl	800e6a4 <tcp_pcb_remove>
        tcp_free(pcb);
 800ef2c:	69f8      	ldr	r0, [r7, #28]
 800ef2e:	f7fd feff 	bl	800cd30 <tcp_free>
 800ef32:	e0da      	b.n	800f0ea <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ef38:	4b63      	ldr	r3, [pc, #396]	; (800f0c8 <tcp_input+0x734>)
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d01d      	beq.n	800ef7c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ef40:	4b61      	ldr	r3, [pc, #388]	; (800f0c8 <tcp_input+0x734>)
 800ef42:	881b      	ldrh	r3, [r3, #0]
 800ef44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d00a      	beq.n	800ef66 <tcp_input+0x5d2>
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef56:	69fa      	ldr	r2, [r7, #28]
 800ef58:	6910      	ldr	r0, [r2, #16]
 800ef5a:	89fa      	ldrh	r2, [r7, #14]
 800ef5c:	69f9      	ldr	r1, [r7, #28]
 800ef5e:	4798      	blx	r3
 800ef60:	4603      	mov	r3, r0
 800ef62:	74fb      	strb	r3, [r7, #19]
 800ef64:	e001      	b.n	800ef6a <tcp_input+0x5d6>
 800ef66:	2300      	movs	r3, #0
 800ef68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ef6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef6e:	f113 0f0d 	cmn.w	r3, #13
 800ef72:	f000 8098 	beq.w	800f0a6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ef76:	4b54      	ldr	r3, [pc, #336]	; (800f0c8 <tcp_input+0x734>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ef7c:	69f8      	ldr	r0, [r7, #28]
 800ef7e:	f000 f915 	bl	800f1ac <tcp_input_delayed_close>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f040 8090 	bne.w	800f0aa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ef8a:	4b4d      	ldr	r3, [pc, #308]	; (800f0c0 <tcp_input+0x72c>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d041      	beq.n	800f016 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d006      	beq.n	800efa8 <tcp_input+0x614>
 800ef9a:	4b50      	ldr	r3, [pc, #320]	; (800f0dc <tcp_input+0x748>)
 800ef9c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800efa0:	494f      	ldr	r1, [pc, #316]	; (800f0e0 <tcp_input+0x74c>)
 800efa2:	4850      	ldr	r0, [pc, #320]	; (800f0e4 <tcp_input+0x750>)
 800efa4:	f009 fd4e 	bl	8018a44 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	8b5b      	ldrh	r3, [r3, #26]
 800efac:	f003 0310 	and.w	r3, r3, #16
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d008      	beq.n	800efc6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800efb4:	4b42      	ldr	r3, [pc, #264]	; (800f0c0 <tcp_input+0x72c>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fd fb9d 	bl	800c6f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800efbe:	69f8      	ldr	r0, [r7, #28]
 800efc0:	f7fe f99e 	bl	800d300 <tcp_abort>
            goto aborted;
 800efc4:	e091      	b.n	800f0ea <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00c      	beq.n	800efea <tcp_input+0x656>
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800efd6:	69fb      	ldr	r3, [r7, #28]
 800efd8:	6918      	ldr	r0, [r3, #16]
 800efda:	4b39      	ldr	r3, [pc, #228]	; (800f0c0 <tcp_input+0x72c>)
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	2300      	movs	r3, #0
 800efe0:	69f9      	ldr	r1, [r7, #28]
 800efe2:	47a0      	blx	r4
 800efe4:	4603      	mov	r3, r0
 800efe6:	74fb      	strb	r3, [r7, #19]
 800efe8:	e008      	b.n	800effc <tcp_input+0x668>
 800efea:	4b35      	ldr	r3, [pc, #212]	; (800f0c0 <tcp_input+0x72c>)
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	2300      	movs	r3, #0
 800eff0:	69f9      	ldr	r1, [r7, #28]
 800eff2:	2000      	movs	r0, #0
 800eff4:	f7ff f8aa 	bl	800e14c <tcp_recv_null>
 800eff8:	4603      	mov	r3, r0
 800effa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800effc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f000:	f113 0f0d 	cmn.w	r3, #13
 800f004:	d053      	beq.n	800f0ae <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f006:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d003      	beq.n	800f016 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f00e:	4b2c      	ldr	r3, [pc, #176]	; (800f0c0 <tcp_input+0x72c>)
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	69fb      	ldr	r3, [r7, #28]
 800f014:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f016:	4b2b      	ldr	r3, [pc, #172]	; (800f0c4 <tcp_input+0x730>)
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	f003 0320 	and.w	r3, r3, #32
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d030      	beq.n	800f084 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f026:	2b00      	cmp	r3, #0
 800f028:	d009      	beq.n	800f03e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f02e:	7b5a      	ldrb	r2, [r3, #13]
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f034:	f042 0220 	orr.w	r2, r2, #32
 800f038:	b2d2      	uxtb	r2, r2
 800f03a:	735a      	strb	r2, [r3, #13]
 800f03c:	e022      	b.n	800f084 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f042:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f046:	d005      	beq.n	800f054 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f04c:	3301      	adds	r3, #1
 800f04e:	b29a      	uxth	r2, r3
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00b      	beq.n	800f076 <tcp_input+0x6e2>
 800f05e:	69fb      	ldr	r3, [r7, #28]
 800f060:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	6918      	ldr	r0, [r3, #16]
 800f068:	2300      	movs	r3, #0
 800f06a:	2200      	movs	r2, #0
 800f06c:	69f9      	ldr	r1, [r7, #28]
 800f06e:	47a0      	blx	r4
 800f070:	4603      	mov	r3, r0
 800f072:	74fb      	strb	r3, [r7, #19]
 800f074:	e001      	b.n	800f07a <tcp_input+0x6e6>
 800f076:	2300      	movs	r3, #0
 800f078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f07a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f07e:	f113 0f0d 	cmn.w	r3, #13
 800f082:	d016      	beq.n	800f0b2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f084:	4b13      	ldr	r3, [pc, #76]	; (800f0d4 <tcp_input+0x740>)
 800f086:	2200      	movs	r2, #0
 800f088:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f08a:	69f8      	ldr	r0, [r7, #28]
 800f08c:	f000 f88e 	bl	800f1ac <tcp_input_delayed_close>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d128      	bne.n	800f0e8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f096:	69f8      	ldr	r0, [r7, #28]
 800f098:	f002 ff20 	bl	8011edc <tcp_output>
 800f09c:	e025      	b.n	800f0ea <tcp_input+0x756>
        goto aborted;
 800f09e:	bf00      	nop
 800f0a0:	e023      	b.n	800f0ea <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f0a2:	bf00      	nop
 800f0a4:	e021      	b.n	800f0ea <tcp_input+0x756>
              goto aborted;
 800f0a6:	bf00      	nop
 800f0a8:	e01f      	b.n	800f0ea <tcp_input+0x756>
          goto aborted;
 800f0aa:	bf00      	nop
 800f0ac:	e01d      	b.n	800f0ea <tcp_input+0x756>
            goto aborted;
 800f0ae:	bf00      	nop
 800f0b0:	e01b      	b.n	800f0ea <tcp_input+0x756>
              goto aborted;
 800f0b2:	bf00      	nop
 800f0b4:	e019      	b.n	800f0ea <tcp_input+0x756>
 800f0b6:	bf00      	nop
 800f0b8:	2000be48 	.word	0x2000be48
 800f0bc:	2000be58 	.word	0x2000be58
 800f0c0:	2000be78 	.word	0x2000be78
 800f0c4:	2000be75 	.word	0x2000be75
 800f0c8:	2000be70 	.word	0x2000be70
 800f0cc:	2000be74 	.word	0x2000be74
 800f0d0:	2000be72 	.word	0x2000be72
 800f0d4:	2000be7c 	.word	0x2000be7c
 800f0d8:	2000be3c 	.word	0x2000be3c
 800f0dc:	0801b138 	.word	0x0801b138
 800f0e0:	0801b2ec 	.word	0x0801b2ec
 800f0e4:	0801b184 	.word	0x0801b184
          goto aborted;
 800f0e8:	bf00      	nop
    tcp_input_pcb = NULL;
 800f0ea:	4b27      	ldr	r3, [pc, #156]	; (800f188 <tcp_input+0x7f4>)
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f0f0:	4b26      	ldr	r3, [pc, #152]	; (800f18c <tcp_input+0x7f8>)
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f0f6:	4b26      	ldr	r3, [pc, #152]	; (800f190 <tcp_input+0x7fc>)
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d03f      	beq.n	800f17e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f0fe:	4b24      	ldr	r3, [pc, #144]	; (800f190 <tcp_input+0x7fc>)
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	4618      	mov	r0, r3
 800f104:	f7fd faf8 	bl	800c6f8 <pbuf_free>
      inseg.p = NULL;
 800f108:	4b21      	ldr	r3, [pc, #132]	; (800f190 <tcp_input+0x7fc>)
 800f10a:	2200      	movs	r2, #0
 800f10c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f10e:	e036      	b.n	800f17e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f110:	4b20      	ldr	r3, [pc, #128]	; (800f194 <tcp_input+0x800>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	899b      	ldrh	r3, [r3, #12]
 800f116:	b29b      	uxth	r3, r3
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fb fe89 	bl	800ae30 <lwip_htons>
 800f11e:	4603      	mov	r3, r0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	f003 0304 	and.w	r3, r3, #4
 800f126:	2b00      	cmp	r3, #0
 800f128:	d118      	bne.n	800f15c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f12a:	4b1b      	ldr	r3, [pc, #108]	; (800f198 <tcp_input+0x804>)
 800f12c:	6819      	ldr	r1, [r3, #0]
 800f12e:	4b1b      	ldr	r3, [pc, #108]	; (800f19c <tcp_input+0x808>)
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	461a      	mov	r2, r3
 800f134:	4b1a      	ldr	r3, [pc, #104]	; (800f1a0 <tcp_input+0x80c>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f13a:	4b16      	ldr	r3, [pc, #88]	; (800f194 <tcp_input+0x800>)
 800f13c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f13e:	885b      	ldrh	r3, [r3, #2]
 800f140:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f142:	4a14      	ldr	r2, [pc, #80]	; (800f194 <tcp_input+0x800>)
 800f144:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f146:	8812      	ldrh	r2, [r2, #0]
 800f148:	b292      	uxth	r2, r2
 800f14a:	9202      	str	r2, [sp, #8]
 800f14c:	9301      	str	r3, [sp, #4]
 800f14e:	4b15      	ldr	r3, [pc, #84]	; (800f1a4 <tcp_input+0x810>)
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	4b15      	ldr	r3, [pc, #84]	; (800f1a8 <tcp_input+0x814>)
 800f154:	4602      	mov	r2, r0
 800f156:	2000      	movs	r0, #0
 800f158:	f003 fc74 	bl	8012a44 <tcp_rst>
    pbuf_free(p);
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f7fd facb 	bl	800c6f8 <pbuf_free>
  return;
 800f162:	e00c      	b.n	800f17e <tcp_input+0x7ea>
    goto dropped;
 800f164:	bf00      	nop
 800f166:	e006      	b.n	800f176 <tcp_input+0x7e2>
    goto dropped;
 800f168:	bf00      	nop
 800f16a:	e004      	b.n	800f176 <tcp_input+0x7e2>
    goto dropped;
 800f16c:	bf00      	nop
 800f16e:	e002      	b.n	800f176 <tcp_input+0x7e2>
      goto dropped;
 800f170:	bf00      	nop
 800f172:	e000      	b.n	800f176 <tcp_input+0x7e2>
      goto dropped;
 800f174:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7fd fabe 	bl	800c6f8 <pbuf_free>
 800f17c:	e000      	b.n	800f180 <tcp_input+0x7ec>
  return;
 800f17e:	bf00      	nop
}
 800f180:	3724      	adds	r7, #36	; 0x24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd90      	pop	{r4, r7, pc}
 800f186:	bf00      	nop
 800f188:	2000be7c 	.word	0x2000be7c
 800f18c:	2000be78 	.word	0x2000be78
 800f190:	2000be48 	.word	0x2000be48
 800f194:	2000be58 	.word	0x2000be58
 800f198:	2000be6c 	.word	0x2000be6c
 800f19c:	2000be72 	.word	0x2000be72
 800f1a0:	2000be68 	.word	0x2000be68
 800f1a4:	20008d20 	.word	0x20008d20
 800f1a8:	20008d24 	.word	0x20008d24

0800f1ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d106      	bne.n	800f1c8 <tcp_input_delayed_close+0x1c>
 800f1ba:	4b17      	ldr	r3, [pc, #92]	; (800f218 <tcp_input_delayed_close+0x6c>)
 800f1bc:	f240 225a 	movw	r2, #602	; 0x25a
 800f1c0:	4916      	ldr	r1, [pc, #88]	; (800f21c <tcp_input_delayed_close+0x70>)
 800f1c2:	4817      	ldr	r0, [pc, #92]	; (800f220 <tcp_input_delayed_close+0x74>)
 800f1c4:	f009 fc3e 	bl	8018a44 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f1c8:	4b16      	ldr	r3, [pc, #88]	; (800f224 <tcp_input_delayed_close+0x78>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	f003 0310 	and.w	r3, r3, #16
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d01c      	beq.n	800f20e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	8b5b      	ldrh	r3, [r3, #26]
 800f1d8:	f003 0310 	and.w	r3, r3, #16
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10d      	bne.n	800f1fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d008      	beq.n	800f1fc <tcp_input_delayed_close+0x50>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	6912      	ldr	r2, [r2, #16]
 800f1f4:	f06f 010e 	mvn.w	r1, #14
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f1fc:	6879      	ldr	r1, [r7, #4]
 800f1fe:	480a      	ldr	r0, [pc, #40]	; (800f228 <tcp_input_delayed_close+0x7c>)
 800f200:	f7ff fa50 	bl	800e6a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7fd fd93 	bl	800cd30 <tcp_free>
    return 1;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e000      	b.n	800f210 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f20e:	2300      	movs	r3, #0
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	0801b138 	.word	0x0801b138
 800f21c:	0801b308 	.word	0x0801b308
 800f220:	0801b184 	.word	0x0801b184
 800f224:	2000be75 	.word	0x2000be75
 800f228:	2000be3c 	.word	0x2000be3c

0800f22c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f22c:	b590      	push	{r4, r7, lr}
 800f22e:	b08b      	sub	sp, #44	; 0x2c
 800f230:	af04      	add	r7, sp, #16
 800f232:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f234:	4b6f      	ldr	r3, [pc, #444]	; (800f3f4 <tcp_listen_input+0x1c8>)
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	f003 0304 	and.w	r3, r3, #4
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f040 80d2 	bne.w	800f3e6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d106      	bne.n	800f256 <tcp_listen_input+0x2a>
 800f248:	4b6b      	ldr	r3, [pc, #428]	; (800f3f8 <tcp_listen_input+0x1cc>)
 800f24a:	f240 2281 	movw	r2, #641	; 0x281
 800f24e:	496b      	ldr	r1, [pc, #428]	; (800f3fc <tcp_listen_input+0x1d0>)
 800f250:	486b      	ldr	r0, [pc, #428]	; (800f400 <tcp_listen_input+0x1d4>)
 800f252:	f009 fbf7 	bl	8018a44 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f256:	4b67      	ldr	r3, [pc, #412]	; (800f3f4 <tcp_listen_input+0x1c8>)
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	f003 0310 	and.w	r3, r3, #16
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d019      	beq.n	800f296 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f262:	4b68      	ldr	r3, [pc, #416]	; (800f404 <tcp_listen_input+0x1d8>)
 800f264:	6819      	ldr	r1, [r3, #0]
 800f266:	4b68      	ldr	r3, [pc, #416]	; (800f408 <tcp_listen_input+0x1dc>)
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	461a      	mov	r2, r3
 800f26c:	4b67      	ldr	r3, [pc, #412]	; (800f40c <tcp_listen_input+0x1e0>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f272:	4b67      	ldr	r3, [pc, #412]	; (800f410 <tcp_listen_input+0x1e4>)
 800f274:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f276:	885b      	ldrh	r3, [r3, #2]
 800f278:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f27a:	4a65      	ldr	r2, [pc, #404]	; (800f410 <tcp_listen_input+0x1e4>)
 800f27c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f27e:	8812      	ldrh	r2, [r2, #0]
 800f280:	b292      	uxth	r2, r2
 800f282:	9202      	str	r2, [sp, #8]
 800f284:	9301      	str	r3, [sp, #4]
 800f286:	4b63      	ldr	r3, [pc, #396]	; (800f414 <tcp_listen_input+0x1e8>)
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	4b63      	ldr	r3, [pc, #396]	; (800f418 <tcp_listen_input+0x1ec>)
 800f28c:	4602      	mov	r2, r0
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f003 fbd8 	bl	8012a44 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f294:	e0a9      	b.n	800f3ea <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f296:	4b57      	ldr	r3, [pc, #348]	; (800f3f4 <tcp_listen_input+0x1c8>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 0302 	and.w	r3, r3, #2
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f000 80a3 	beq.w	800f3ea <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	7d5b      	ldrb	r3, [r3, #21]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7ff f873 	bl	800e394 <tcp_alloc>
 800f2ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d111      	bne.n	800f2da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	699b      	ldr	r3, [r3, #24]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00a      	beq.n	800f2d4 <tcp_listen_input+0xa8>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	699b      	ldr	r3, [r3, #24]
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	6910      	ldr	r0, [r2, #16]
 800f2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	4798      	blx	r3
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	73bb      	strb	r3, [r7, #14]
      return;
 800f2d2:	e08b      	b.n	800f3ec <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f2d4:	23f0      	movs	r3, #240	; 0xf0
 800f2d6:	73bb      	strb	r3, [r7, #14]
      return;
 800f2d8:	e088      	b.n	800f3ec <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f2da:	4b50      	ldr	r3, [pc, #320]	; (800f41c <tcp_listen_input+0x1f0>)
 800f2dc:	695a      	ldr	r2, [r3, #20]
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f2e2:	4b4e      	ldr	r3, [pc, #312]	; (800f41c <tcp_listen_input+0x1f0>)
 800f2e4:	691a      	ldr	r2, [r3, #16]
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	8ada      	ldrh	r2, [r3, #22]
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f2f2:	4b47      	ldr	r3, [pc, #284]	; (800f410 <tcp_listen_input+0x1e4>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	2203      	movs	r2, #3
 800f302:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f304:	4b41      	ldr	r3, [pc, #260]	; (800f40c <tcp_listen_input+0x1e0>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	1c5a      	adds	r2, r3, #1
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f316:	6978      	ldr	r0, [r7, #20]
 800f318:	f7ff fa58 	bl	800e7cc <tcp_next_iss>
 800f31c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	693a      	ldr	r2, [r7, #16]
 800f322:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	693a      	ldr	r2, [r7, #16]
 800f328:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	693a      	ldr	r2, [r7, #16]
 800f32e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f336:	4b35      	ldr	r3, [pc, #212]	; (800f40c <tcp_listen_input+0x1e0>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	1e5a      	subs	r2, r3, #1
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	691a      	ldr	r2, [r3, #16]
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	7a5b      	ldrb	r3, [r3, #9]
 800f352:	f003 030c 	and.w	r3, r3, #12
 800f356:	b2da      	uxtb	r2, r3
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	7a1a      	ldrb	r2, [r3, #8]
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f364:	4b2e      	ldr	r3, [pc, #184]	; (800f420 <tcp_listen_input+0x1f4>)
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	60da      	str	r2, [r3, #12]
 800f36c:	4a2c      	ldr	r2, [pc, #176]	; (800f420 <tcp_listen_input+0x1f4>)
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	6013      	str	r3, [r2, #0]
 800f372:	f003 fd29 	bl	8012dc8 <tcp_timer_needed>
 800f376:	4b2b      	ldr	r3, [pc, #172]	; (800f424 <tcp_listen_input+0x1f8>)
 800f378:	2201      	movs	r2, #1
 800f37a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f37c:	6978      	ldr	r0, [r7, #20]
 800f37e:	f001 fd8f 	bl	8010ea0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f382:	4b23      	ldr	r3, [pc, #140]	; (800f410 <tcp_listen_input+0x1e4>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	89db      	ldrh	r3, [r3, #14]
 800f388:	b29a      	uxth	r2, r3
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f007 fad7 	bl	8016958 <ip4_route>
 800f3aa:	4601      	mov	r1, r0
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	3304      	adds	r3, #4
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f7ff fa30 	bl	800e818 <tcp_eff_send_mss_netif>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f3c0:	2112      	movs	r1, #18
 800f3c2:	6978      	ldr	r0, [r7, #20]
 800f3c4:	f002 fc9c 	bl	8011d00 <tcp_enqueue_flags>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f3cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d004      	beq.n	800f3de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	6978      	ldr	r0, [r7, #20]
 800f3d8:	f7fd fed4 	bl	800d184 <tcp_abandon>
      return;
 800f3dc:	e006      	b.n	800f3ec <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f3de:	6978      	ldr	r0, [r7, #20]
 800f3e0:	f002 fd7c 	bl	8011edc <tcp_output>
  return;
 800f3e4:	e001      	b.n	800f3ea <tcp_listen_input+0x1be>
    return;
 800f3e6:	bf00      	nop
 800f3e8:	e000      	b.n	800f3ec <tcp_listen_input+0x1c0>
  return;
 800f3ea:	bf00      	nop
}
 800f3ec:	371c      	adds	r7, #28
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd90      	pop	{r4, r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	2000be74 	.word	0x2000be74
 800f3f8:	0801b138 	.word	0x0801b138
 800f3fc:	0801b330 	.word	0x0801b330
 800f400:	0801b184 	.word	0x0801b184
 800f404:	2000be6c 	.word	0x2000be6c
 800f408:	2000be72 	.word	0x2000be72
 800f40c:	2000be68 	.word	0x2000be68
 800f410:	2000be58 	.word	0x2000be58
 800f414:	20008d20 	.word	0x20008d20
 800f418:	20008d24 	.word	0x20008d24
 800f41c:	20008d10 	.word	0x20008d10
 800f420:	2000be3c 	.word	0x2000be3c
 800f424:	2000be44 	.word	0x2000be44

0800f428 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af04      	add	r7, sp, #16
 800f42e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f430:	4b2f      	ldr	r3, [pc, #188]	; (800f4f0 <tcp_timewait_input+0xc8>)
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	f003 0304 	and.w	r3, r3, #4
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d153      	bne.n	800f4e4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d106      	bne.n	800f450 <tcp_timewait_input+0x28>
 800f442:	4b2c      	ldr	r3, [pc, #176]	; (800f4f4 <tcp_timewait_input+0xcc>)
 800f444:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f448:	492b      	ldr	r1, [pc, #172]	; (800f4f8 <tcp_timewait_input+0xd0>)
 800f44a:	482c      	ldr	r0, [pc, #176]	; (800f4fc <tcp_timewait_input+0xd4>)
 800f44c:	f009 fafa 	bl	8018a44 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f450:	4b27      	ldr	r3, [pc, #156]	; (800f4f0 <tcp_timewait_input+0xc8>)
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	f003 0302 	and.w	r3, r3, #2
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d02a      	beq.n	800f4b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f45c:	4b28      	ldr	r3, [pc, #160]	; (800f500 <tcp_timewait_input+0xd8>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	2b00      	cmp	r3, #0
 800f468:	db2d      	blt.n	800f4c6 <tcp_timewait_input+0x9e>
 800f46a:	4b25      	ldr	r3, [pc, #148]	; (800f500 <tcp_timewait_input+0xd8>)
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f472:	6879      	ldr	r1, [r7, #4]
 800f474:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f476:	440b      	add	r3, r1
 800f478:	1ad3      	subs	r3, r2, r3
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	dc23      	bgt.n	800f4c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f47e:	4b21      	ldr	r3, [pc, #132]	; (800f504 <tcp_timewait_input+0xdc>)
 800f480:	6819      	ldr	r1, [r3, #0]
 800f482:	4b21      	ldr	r3, [pc, #132]	; (800f508 <tcp_timewait_input+0xe0>)
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	461a      	mov	r2, r3
 800f488:	4b1d      	ldr	r3, [pc, #116]	; (800f500 <tcp_timewait_input+0xd8>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f48e:	4b1f      	ldr	r3, [pc, #124]	; (800f50c <tcp_timewait_input+0xe4>)
 800f490:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f492:	885b      	ldrh	r3, [r3, #2]
 800f494:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f496:	4a1d      	ldr	r2, [pc, #116]	; (800f50c <tcp_timewait_input+0xe4>)
 800f498:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f49a:	8812      	ldrh	r2, [r2, #0]
 800f49c:	b292      	uxth	r2, r2
 800f49e:	9202      	str	r2, [sp, #8]
 800f4a0:	9301      	str	r3, [sp, #4]
 800f4a2:	4b1b      	ldr	r3, [pc, #108]	; (800f510 <tcp_timewait_input+0xe8>)
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	4b1b      	ldr	r3, [pc, #108]	; (800f514 <tcp_timewait_input+0xec>)
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f003 faca 	bl	8012a44 <tcp_rst>
      return;
 800f4b0:	e01b      	b.n	800f4ea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f4b2:	4b0f      	ldr	r3, [pc, #60]	; (800f4f0 <tcp_timewait_input+0xc8>)
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f4be:	4b16      	ldr	r3, [pc, #88]	; (800f518 <tcp_timewait_input+0xf0>)
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f4c6:	4b10      	ldr	r3, [pc, #64]	; (800f508 <tcp_timewait_input+0xe0>)
 800f4c8:	881b      	ldrh	r3, [r3, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00c      	beq.n	800f4e8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	8b5b      	ldrh	r3, [r3, #26]
 800f4d2:	f043 0302 	orr.w	r3, r3, #2
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f002 fcfd 	bl	8011edc <tcp_output>
  }
  return;
 800f4e2:	e001      	b.n	800f4e8 <tcp_timewait_input+0xc0>
    return;
 800f4e4:	bf00      	nop
 800f4e6:	e000      	b.n	800f4ea <tcp_timewait_input+0xc2>
  return;
 800f4e8:	bf00      	nop
}
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	2000be74 	.word	0x2000be74
 800f4f4:	0801b138 	.word	0x0801b138
 800f4f8:	0801b350 	.word	0x0801b350
 800f4fc:	0801b184 	.word	0x0801b184
 800f500:	2000be68 	.word	0x2000be68
 800f504:	2000be6c 	.word	0x2000be6c
 800f508:	2000be72 	.word	0x2000be72
 800f50c:	2000be58 	.word	0x2000be58
 800f510:	20008d20 	.word	0x20008d20
 800f514:	20008d24 	.word	0x20008d24
 800f518:	2000be30 	.word	0x2000be30

0800f51c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f51c:	b590      	push	{r4, r7, lr}
 800f51e:	b08d      	sub	sp, #52	; 0x34
 800f520:	af04      	add	r7, sp, #16
 800f522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f524:	2300      	movs	r3, #0
 800f526:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f528:	2300      	movs	r3, #0
 800f52a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d106      	bne.n	800f540 <tcp_process+0x24>
 800f532:	4b9d      	ldr	r3, [pc, #628]	; (800f7a8 <tcp_process+0x28c>)
 800f534:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f538:	499c      	ldr	r1, [pc, #624]	; (800f7ac <tcp_process+0x290>)
 800f53a:	489d      	ldr	r0, [pc, #628]	; (800f7b0 <tcp_process+0x294>)
 800f53c:	f009 fa82 	bl	8018a44 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f540:	4b9c      	ldr	r3, [pc, #624]	; (800f7b4 <tcp_process+0x298>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	f003 0304 	and.w	r3, r3, #4
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d04e      	beq.n	800f5ea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	7d1b      	ldrb	r3, [r3, #20]
 800f550:	2b02      	cmp	r3, #2
 800f552:	d108      	bne.n	800f566 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f558:	4b97      	ldr	r3, [pc, #604]	; (800f7b8 <tcp_process+0x29c>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d123      	bne.n	800f5a8 <tcp_process+0x8c>
        acceptable = 1;
 800f560:	2301      	movs	r3, #1
 800f562:	76fb      	strb	r3, [r7, #27]
 800f564:	e020      	b.n	800f5a8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f56a:	4b94      	ldr	r3, [pc, #592]	; (800f7bc <tcp_process+0x2a0>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d102      	bne.n	800f578 <tcp_process+0x5c>
        acceptable = 1;
 800f572:	2301      	movs	r3, #1
 800f574:	76fb      	strb	r3, [r7, #27]
 800f576:	e017      	b.n	800f5a8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f578:	4b90      	ldr	r3, [pc, #576]	; (800f7bc <tcp_process+0x2a0>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	db10      	blt.n	800f5a8 <tcp_process+0x8c>
 800f586:	4b8d      	ldr	r3, [pc, #564]	; (800f7bc <tcp_process+0x2a0>)
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58e:	6879      	ldr	r1, [r7, #4]
 800f590:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f592:	440b      	add	r3, r1
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	2b00      	cmp	r3, #0
 800f598:	dc06      	bgt.n	800f5a8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	8b5b      	ldrh	r3, [r3, #26]
 800f59e:	f043 0302 	orr.w	r3, r3, #2
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f5a8:	7efb      	ldrb	r3, [r7, #27]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d01b      	beq.n	800f5e6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	7d1b      	ldrb	r3, [r3, #20]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d106      	bne.n	800f5c4 <tcp_process+0xa8>
 800f5b6:	4b7c      	ldr	r3, [pc, #496]	; (800f7a8 <tcp_process+0x28c>)
 800f5b8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f5bc:	4980      	ldr	r1, [pc, #512]	; (800f7c0 <tcp_process+0x2a4>)
 800f5be:	487c      	ldr	r0, [pc, #496]	; (800f7b0 <tcp_process+0x294>)
 800f5c0:	f009 fa40 	bl	8018a44 <iprintf>
      recv_flags |= TF_RESET;
 800f5c4:	4b7f      	ldr	r3, [pc, #508]	; (800f7c4 <tcp_process+0x2a8>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	f043 0308 	orr.w	r3, r3, #8
 800f5cc:	b2da      	uxtb	r2, r3
 800f5ce:	4b7d      	ldr	r3, [pc, #500]	; (800f7c4 <tcp_process+0x2a8>)
 800f5d0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	8b5b      	ldrh	r3, [r3, #26]
 800f5d6:	f023 0301 	bic.w	r3, r3, #1
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f5e0:	f06f 030d 	mvn.w	r3, #13
 800f5e4:	e37a      	b.n	800fcdc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	e378      	b.n	800fcdc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f5ea:	4b72      	ldr	r3, [pc, #456]	; (800f7b4 <tcp_process+0x298>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	f003 0302 	and.w	r3, r3, #2
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d010      	beq.n	800f618 <tcp_process+0xfc>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	7d1b      	ldrb	r3, [r3, #20]
 800f5fa:	2b02      	cmp	r3, #2
 800f5fc:	d00c      	beq.n	800f618 <tcp_process+0xfc>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	7d1b      	ldrb	r3, [r3, #20]
 800f602:	2b03      	cmp	r3, #3
 800f604:	d008      	beq.n	800f618 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	8b5b      	ldrh	r3, [r3, #26]
 800f60a:	f043 0302 	orr.w	r3, r3, #2
 800f60e:	b29a      	uxth	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	e361      	b.n	800fcdc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	8b5b      	ldrh	r3, [r3, #26]
 800f61c:	f003 0310 	and.w	r3, r3, #16
 800f620:	2b00      	cmp	r3, #0
 800f622:	d103      	bne.n	800f62c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f624:	4b68      	ldr	r3, [pc, #416]	; (800f7c8 <tcp_process+0x2ac>)
 800f626:	681a      	ldr	r2, [r3, #0]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f001 fc2f 	bl	8010ea0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	7d1b      	ldrb	r3, [r3, #20]
 800f646:	3b02      	subs	r3, #2
 800f648:	2b07      	cmp	r3, #7
 800f64a:	f200 8337 	bhi.w	800fcbc <tcp_process+0x7a0>
 800f64e:	a201      	add	r2, pc, #4	; (adr r2, 800f654 <tcp_process+0x138>)
 800f650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f654:	0800f675 	.word	0x0800f675
 800f658:	0800f8a5 	.word	0x0800f8a5
 800f65c:	0800fa1d 	.word	0x0800fa1d
 800f660:	0800fa47 	.word	0x0800fa47
 800f664:	0800fb6b 	.word	0x0800fb6b
 800f668:	0800fa1d 	.word	0x0800fa1d
 800f66c:	0800fbf7 	.word	0x0800fbf7
 800f670:	0800fc87 	.word	0x0800fc87
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f674:	4b4f      	ldr	r3, [pc, #316]	; (800f7b4 <tcp_process+0x298>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	f003 0310 	and.w	r3, r3, #16
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f000 80e4 	beq.w	800f84a <tcp_process+0x32e>
 800f682:	4b4c      	ldr	r3, [pc, #304]	; (800f7b4 <tcp_process+0x298>)
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	f003 0302 	and.w	r3, r3, #2
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 80dd 	beq.w	800f84a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f694:	1c5a      	adds	r2, r3, #1
 800f696:	4b48      	ldr	r3, [pc, #288]	; (800f7b8 <tcp_process+0x29c>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	f040 80d5 	bne.w	800f84a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f6a0:	4b46      	ldr	r3, [pc, #280]	; (800f7bc <tcp_process+0x2a0>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	1c5a      	adds	r2, r3, #1
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f6b2:	4b41      	ldr	r3, [pc, #260]	; (800f7b8 <tcp_process+0x29c>)
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f6ba:	4b44      	ldr	r3, [pc, #272]	; (800f7cc <tcp_process+0x2b0>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	89db      	ldrh	r3, [r3, #14]
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f6d4:	4b39      	ldr	r3, [pc, #228]	; (800f7bc <tcp_process+0x2a0>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	1e5a      	subs	r2, r3, #1
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2204      	movs	r2, #4
 800f6e2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3304      	adds	r3, #4
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f007 f933 	bl	8016958 <ip4_route>
 800f6f2:	4601      	mov	r1, r0
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	3304      	adds	r3, #4
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f7ff f88c 	bl	800e818 <tcp_eff_send_mss_netif>
 800f700:	4603      	mov	r3, r0
 800f702:	461a      	mov	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f70c:	009a      	lsls	r2, r3, #2
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	f241 111c 	movw	r1, #4380	; 0x111c
 800f718:	428b      	cmp	r3, r1
 800f71a:	bf38      	it	cc
 800f71c:	460b      	movcc	r3, r1
 800f71e:	429a      	cmp	r2, r3
 800f720:	d204      	bcs.n	800f72c <tcp_process+0x210>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	b29b      	uxth	r3, r3
 800f72a:	e00d      	b.n	800f748 <tcp_process+0x22c>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f730:	005b      	lsls	r3, r3, #1
 800f732:	f241 121c 	movw	r2, #4380	; 0x111c
 800f736:	4293      	cmp	r3, r2
 800f738:	d904      	bls.n	800f744 <tcp_process+0x228>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f73e:	005b      	lsls	r3, r3, #1
 800f740:	b29b      	uxth	r3, r3
 800f742:	e001      	b.n	800f748 <tcp_process+0x22c>
 800f744:	f241 131c 	movw	r3, #4380	; 0x111c
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <tcp_process+0x24a>
 800f758:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <tcp_process+0x28c>)
 800f75a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f75e:	491c      	ldr	r1, [pc, #112]	; (800f7d0 <tcp_process+0x2b4>)
 800f760:	4813      	ldr	r0, [pc, #76]	; (800f7b0 <tcp_process+0x294>)
 800f762:	f009 f96f 	bl	8018a44 <iprintf>
        --pcb->snd_queuelen;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f76c:	3b01      	subs	r3, #1
 800f76e:	b29a      	uxth	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f77a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d12a      	bne.n	800f7d8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f786:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d106      	bne.n	800f79c <tcp_process+0x280>
 800f78e:	4b06      	ldr	r3, [pc, #24]	; (800f7a8 <tcp_process+0x28c>)
 800f790:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f794:	490f      	ldr	r1, [pc, #60]	; (800f7d4 <tcp_process+0x2b8>)
 800f796:	4806      	ldr	r0, [pc, #24]	; (800f7b0 <tcp_process+0x294>)
 800f798:	f009 f954 	bl	8018a44 <iprintf>
          pcb->unsent = rseg->next;
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	66da      	str	r2, [r3, #108]	; 0x6c
 800f7a4:	e01c      	b.n	800f7e0 <tcp_process+0x2c4>
 800f7a6:	bf00      	nop
 800f7a8:	0801b138 	.word	0x0801b138
 800f7ac:	0801b370 	.word	0x0801b370
 800f7b0:	0801b184 	.word	0x0801b184
 800f7b4:	2000be74 	.word	0x2000be74
 800f7b8:	2000be6c 	.word	0x2000be6c
 800f7bc:	2000be68 	.word	0x2000be68
 800f7c0:	0801b38c 	.word	0x0801b38c
 800f7c4:	2000be75 	.word	0x2000be75
 800f7c8:	2000be30 	.word	0x2000be30
 800f7cc:	2000be58 	.word	0x2000be58
 800f7d0:	0801b3ac 	.word	0x0801b3ac
 800f7d4:	0801b3c4 	.word	0x0801b3c4
        } else {
          pcb->unacked = rseg->next;
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f7e0:	69f8      	ldr	r0, [r7, #28]
 800f7e2:	f7fe fc6e 	bl	800e0c2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d104      	bne.n	800f7f8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7f4:	861a      	strh	r2, [r3, #48]	; 0x30
 800f7f6:	e006      	b.n	800f806 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00a      	beq.n	800f826 <tcp_process+0x30a>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	6910      	ldr	r0, [r2, #16]
 800f81a:	2200      	movs	r2, #0
 800f81c:	6879      	ldr	r1, [r7, #4]
 800f81e:	4798      	blx	r3
 800f820:	4603      	mov	r3, r0
 800f822:	76bb      	strb	r3, [r7, #26]
 800f824:	e001      	b.n	800f82a <tcp_process+0x30e>
 800f826:	2300      	movs	r3, #0
 800f828:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f82a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f82e:	f113 0f0d 	cmn.w	r3, #13
 800f832:	d102      	bne.n	800f83a <tcp_process+0x31e>
          return ERR_ABRT;
 800f834:	f06f 030c 	mvn.w	r3, #12
 800f838:	e250      	b.n	800fcdc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	8b5b      	ldrh	r3, [r3, #26]
 800f83e:	f043 0302 	orr.w	r3, r3, #2
 800f842:	b29a      	uxth	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f848:	e23a      	b.n	800fcc0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f84a:	4b98      	ldr	r3, [pc, #608]	; (800faac <tcp_process+0x590>)
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	f003 0310 	and.w	r3, r3, #16
 800f852:	2b00      	cmp	r3, #0
 800f854:	f000 8234 	beq.w	800fcc0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f858:	4b95      	ldr	r3, [pc, #596]	; (800fab0 <tcp_process+0x594>)
 800f85a:	6819      	ldr	r1, [r3, #0]
 800f85c:	4b95      	ldr	r3, [pc, #596]	; (800fab4 <tcp_process+0x598>)
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	461a      	mov	r2, r3
 800f862:	4b95      	ldr	r3, [pc, #596]	; (800fab8 <tcp_process+0x59c>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f868:	4b94      	ldr	r3, [pc, #592]	; (800fabc <tcp_process+0x5a0>)
 800f86a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f86c:	885b      	ldrh	r3, [r3, #2]
 800f86e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f870:	4a92      	ldr	r2, [pc, #584]	; (800fabc <tcp_process+0x5a0>)
 800f872:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f874:	8812      	ldrh	r2, [r2, #0]
 800f876:	b292      	uxth	r2, r2
 800f878:	9202      	str	r2, [sp, #8]
 800f87a:	9301      	str	r3, [sp, #4]
 800f87c:	4b90      	ldr	r3, [pc, #576]	; (800fac0 <tcp_process+0x5a4>)
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	4b90      	ldr	r3, [pc, #576]	; (800fac4 <tcp_process+0x5a8>)
 800f882:	4602      	mov	r2, r0
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f003 f8dd 	bl	8012a44 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f890:	2b05      	cmp	r3, #5
 800f892:	f200 8215 	bhi.w	800fcc0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2200      	movs	r2, #0
 800f89a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f002 fea7 	bl	80125f0 <tcp_rexmit_rto>
      break;
 800f8a2:	e20d      	b.n	800fcc0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f8a4:	4b81      	ldr	r3, [pc, #516]	; (800faac <tcp_process+0x590>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	f003 0310 	and.w	r3, r3, #16
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f000 80a1 	beq.w	800f9f4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f8b2:	4b7f      	ldr	r3, [pc, #508]	; (800fab0 <tcp_process+0x594>)
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	db7e      	blt.n	800f9c0 <tcp_process+0x4a4>
 800f8c2:	4b7b      	ldr	r3, [pc, #492]	; (800fab0 <tcp_process+0x594>)
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	dc77      	bgt.n	800f9c0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2204      	movs	r2, #4
 800f8d4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d102      	bne.n	800f8e4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f8de:	23fa      	movs	r3, #250	; 0xfa
 800f8e0:	76bb      	strb	r3, [r7, #26]
 800f8e2:	e01d      	b.n	800f920 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8e8:	699b      	ldr	r3, [r3, #24]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d106      	bne.n	800f8fc <tcp_process+0x3e0>
 800f8ee:	4b76      	ldr	r3, [pc, #472]	; (800fac8 <tcp_process+0x5ac>)
 800f8f0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f8f4:	4975      	ldr	r1, [pc, #468]	; (800facc <tcp_process+0x5b0>)
 800f8f6:	4876      	ldr	r0, [pc, #472]	; (800fad0 <tcp_process+0x5b4>)
 800f8f8:	f009 f8a4 	bl	8018a44 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f900:	699b      	ldr	r3, [r3, #24]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00a      	beq.n	800f91c <tcp_process+0x400>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f90a:	699b      	ldr	r3, [r3, #24]
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	6910      	ldr	r0, [r2, #16]
 800f910:	2200      	movs	r2, #0
 800f912:	6879      	ldr	r1, [r7, #4]
 800f914:	4798      	blx	r3
 800f916:	4603      	mov	r3, r0
 800f918:	76bb      	strb	r3, [r7, #26]
 800f91a:	e001      	b.n	800f920 <tcp_process+0x404>
 800f91c:	23f0      	movs	r3, #240	; 0xf0
 800f91e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f920:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00a      	beq.n	800f93e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f928:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f92c:	f113 0f0d 	cmn.w	r3, #13
 800f930:	d002      	beq.n	800f938 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7fd fce4 	bl	800d300 <tcp_abort>
            }
            return ERR_ABRT;
 800f938:	f06f 030c 	mvn.w	r3, #12
 800f93c:	e1ce      	b.n	800fcdc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 fae0 	bl	800ff04 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f944:	4b63      	ldr	r3, [pc, #396]	; (800fad4 <tcp_process+0x5b8>)
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d005      	beq.n	800f958 <tcp_process+0x43c>
            recv_acked--;
 800f94c:	4b61      	ldr	r3, [pc, #388]	; (800fad4 <tcp_process+0x5b8>)
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	3b01      	subs	r3, #1
 800f952:	b29a      	uxth	r2, r3
 800f954:	4b5f      	ldr	r3, [pc, #380]	; (800fad4 <tcp_process+0x5b8>)
 800f956:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f95c:	009a      	lsls	r2, r3, #2
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f962:	005b      	lsls	r3, r3, #1
 800f964:	f241 111c 	movw	r1, #4380	; 0x111c
 800f968:	428b      	cmp	r3, r1
 800f96a:	bf38      	it	cc
 800f96c:	460b      	movcc	r3, r1
 800f96e:	429a      	cmp	r2, r3
 800f970:	d204      	bcs.n	800f97c <tcp_process+0x460>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	b29b      	uxth	r3, r3
 800f97a:	e00d      	b.n	800f998 <tcp_process+0x47c>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f980:	005b      	lsls	r3, r3, #1
 800f982:	f241 121c 	movw	r2, #4380	; 0x111c
 800f986:	4293      	cmp	r3, r2
 800f988:	d904      	bls.n	800f994 <tcp_process+0x478>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f98e:	005b      	lsls	r3, r3, #1
 800f990:	b29b      	uxth	r3, r3
 800f992:	e001      	b.n	800f998 <tcp_process+0x47c>
 800f994:	f241 131c 	movw	r3, #4380	; 0x111c
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f99e:	4b4e      	ldr	r3, [pc, #312]	; (800fad8 <tcp_process+0x5bc>)
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	f003 0320 	and.w	r3, r3, #32
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d037      	beq.n	800fa1a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	8b5b      	ldrh	r3, [r3, #26]
 800f9ae:	f043 0302 	orr.w	r3, r3, #2
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2207      	movs	r2, #7
 800f9bc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f9be:	e02c      	b.n	800fa1a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c0:	4b3b      	ldr	r3, [pc, #236]	; (800fab0 <tcp_process+0x594>)
 800f9c2:	6819      	ldr	r1, [r3, #0]
 800f9c4:	4b3b      	ldr	r3, [pc, #236]	; (800fab4 <tcp_process+0x598>)
 800f9c6:	881b      	ldrh	r3, [r3, #0]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	4b3b      	ldr	r3, [pc, #236]	; (800fab8 <tcp_process+0x59c>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9d0:	4b3a      	ldr	r3, [pc, #232]	; (800fabc <tcp_process+0x5a0>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9d4:	885b      	ldrh	r3, [r3, #2]
 800f9d6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9d8:	4a38      	ldr	r2, [pc, #224]	; (800fabc <tcp_process+0x5a0>)
 800f9da:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9dc:	8812      	ldrh	r2, [r2, #0]
 800f9de:	b292      	uxth	r2, r2
 800f9e0:	9202      	str	r2, [sp, #8]
 800f9e2:	9301      	str	r3, [sp, #4]
 800f9e4:	4b36      	ldr	r3, [pc, #216]	; (800fac0 <tcp_process+0x5a4>)
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	4b36      	ldr	r3, [pc, #216]	; (800fac4 <tcp_process+0x5a8>)
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f003 f829 	bl	8012a44 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f9f2:	e167      	b.n	800fcc4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f9f4:	4b2d      	ldr	r3, [pc, #180]	; (800faac <tcp_process+0x590>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	f003 0302 	and.w	r3, r3, #2
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f000 8161 	beq.w	800fcc4 <tcp_process+0x7a8>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa06:	1e5a      	subs	r2, r3, #1
 800fa08:	4b2b      	ldr	r3, [pc, #172]	; (800fab8 <tcp_process+0x59c>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	f040 8159 	bne.w	800fcc4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f002 fe0e 	bl	8012634 <tcp_rexmit>
      break;
 800fa18:	e154      	b.n	800fcc4 <tcp_process+0x7a8>
 800fa1a:	e153      	b.n	800fcc4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 fa71 	bl	800ff04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fa22:	4b2d      	ldr	r3, [pc, #180]	; (800fad8 <tcp_process+0x5bc>)
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	f003 0320 	and.w	r3, r3, #32
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 814c 	beq.w	800fcc8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	8b5b      	ldrh	r3, [r3, #26]
 800fa34:	f043 0302 	orr.w	r3, r3, #2
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2207      	movs	r2, #7
 800fa42:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa44:	e140      	b.n	800fcc8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 fa5c 	bl	800ff04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fa4c:	4b22      	ldr	r3, [pc, #136]	; (800fad8 <tcp_process+0x5bc>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	f003 0320 	and.w	r3, r3, #32
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d071      	beq.n	800fb3c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fa58:	4b14      	ldr	r3, [pc, #80]	; (800faac <tcp_process+0x590>)
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	f003 0310 	and.w	r3, r3, #16
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d060      	beq.n	800fb26 <tcp_process+0x60a>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa68:	4b11      	ldr	r3, [pc, #68]	; (800fab0 <tcp_process+0x594>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d15a      	bne.n	800fb26 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d156      	bne.n	800fb26 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	8b5b      	ldrh	r3, [r3, #26]
 800fa7c:	f043 0302 	orr.w	r3, r3, #2
 800fa80:	b29a      	uxth	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7fe fdbc 	bl	800e604 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fa8c:	4b13      	ldr	r3, [pc, #76]	; (800fadc <tcp_process+0x5c0>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d105      	bne.n	800faa2 <tcp_process+0x586>
 800fa96:	4b11      	ldr	r3, [pc, #68]	; (800fadc <tcp_process+0x5c0>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	4a0f      	ldr	r2, [pc, #60]	; (800fadc <tcp_process+0x5c0>)
 800fa9e:	6013      	str	r3, [r2, #0]
 800faa0:	e02e      	b.n	800fb00 <tcp_process+0x5e4>
 800faa2:	4b0e      	ldr	r3, [pc, #56]	; (800fadc <tcp_process+0x5c0>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	617b      	str	r3, [r7, #20]
 800faa8:	e027      	b.n	800fafa <tcp_process+0x5de>
 800faaa:	bf00      	nop
 800faac:	2000be74 	.word	0x2000be74
 800fab0:	2000be6c 	.word	0x2000be6c
 800fab4:	2000be72 	.word	0x2000be72
 800fab8:	2000be68 	.word	0x2000be68
 800fabc:	2000be58 	.word	0x2000be58
 800fac0:	20008d20 	.word	0x20008d20
 800fac4:	20008d24 	.word	0x20008d24
 800fac8:	0801b138 	.word	0x0801b138
 800facc:	0801b3d8 	.word	0x0801b3d8
 800fad0:	0801b184 	.word	0x0801b184
 800fad4:	2000be70 	.word	0x2000be70
 800fad8:	2000be75 	.word	0x2000be75
 800fadc:	2000be3c 	.word	0x2000be3c
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d104      	bne.n	800faf4 <tcp_process+0x5d8>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	68da      	ldr	r2, [r3, #12]
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	60da      	str	r2, [r3, #12]
 800faf2:	e005      	b.n	800fb00 <tcp_process+0x5e4>
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	617b      	str	r3, [r7, #20]
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d1ef      	bne.n	800fae0 <tcp_process+0x5c4>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	60da      	str	r2, [r3, #12]
 800fb06:	4b77      	ldr	r3, [pc, #476]	; (800fce4 <tcp_process+0x7c8>)
 800fb08:	2201      	movs	r2, #1
 800fb0a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	220a      	movs	r2, #10
 800fb10:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fb12:	4b75      	ldr	r3, [pc, #468]	; (800fce8 <tcp_process+0x7cc>)
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	60da      	str	r2, [r3, #12]
 800fb1a:	4a73      	ldr	r2, [pc, #460]	; (800fce8 <tcp_process+0x7cc>)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6013      	str	r3, [r2, #0]
 800fb20:	f003 f952 	bl	8012dc8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fb24:	e0d2      	b.n	800fccc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	8b5b      	ldrh	r3, [r3, #26]
 800fb2a:	f043 0302 	orr.w	r3, r3, #2
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2208      	movs	r2, #8
 800fb38:	751a      	strb	r2, [r3, #20]
      break;
 800fb3a:	e0c7      	b.n	800fccc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb3c:	4b6b      	ldr	r3, [pc, #428]	; (800fcec <tcp_process+0x7d0>)
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	f003 0310 	and.w	r3, r3, #16
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f000 80c1 	beq.w	800fccc <tcp_process+0x7b0>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb4e:	4b68      	ldr	r3, [pc, #416]	; (800fcf0 <tcp_process+0x7d4>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	f040 80ba 	bne.w	800fccc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f040 80b5 	bne.w	800fccc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2206      	movs	r2, #6
 800fb66:	751a      	strb	r2, [r3, #20]
      break;
 800fb68:	e0b0      	b.n	800fccc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 f9ca 	bl	800ff04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fb70:	4b60      	ldr	r3, [pc, #384]	; (800fcf4 <tcp_process+0x7d8>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	f003 0320 	and.w	r3, r3, #32
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	f000 80a9 	beq.w	800fcd0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	8b5b      	ldrh	r3, [r3, #26]
 800fb82:	f043 0302 	orr.w	r3, r3, #2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7fe fd39 	bl	800e604 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fb92:	4b59      	ldr	r3, [pc, #356]	; (800fcf8 <tcp_process+0x7dc>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d105      	bne.n	800fba8 <tcp_process+0x68c>
 800fb9c:	4b56      	ldr	r3, [pc, #344]	; (800fcf8 <tcp_process+0x7dc>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	4a55      	ldr	r2, [pc, #340]	; (800fcf8 <tcp_process+0x7dc>)
 800fba4:	6013      	str	r3, [r2, #0]
 800fba6:	e013      	b.n	800fbd0 <tcp_process+0x6b4>
 800fba8:	4b53      	ldr	r3, [pc, #332]	; (800fcf8 <tcp_process+0x7dc>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	613b      	str	r3, [r7, #16]
 800fbae:	e00c      	b.n	800fbca <tcp_process+0x6ae>
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d104      	bne.n	800fbc4 <tcp_process+0x6a8>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	68da      	ldr	r2, [r3, #12]
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	60da      	str	r2, [r3, #12]
 800fbc2:	e005      	b.n	800fbd0 <tcp_process+0x6b4>
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	613b      	str	r3, [r7, #16]
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1ef      	bne.n	800fbb0 <tcp_process+0x694>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	60da      	str	r2, [r3, #12]
 800fbd6:	4b43      	ldr	r3, [pc, #268]	; (800fce4 <tcp_process+0x7c8>)
 800fbd8:	2201      	movs	r2, #1
 800fbda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	220a      	movs	r2, #10
 800fbe0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fbe2:	4b41      	ldr	r3, [pc, #260]	; (800fce8 <tcp_process+0x7cc>)
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	60da      	str	r2, [r3, #12]
 800fbea:	4a3f      	ldr	r2, [pc, #252]	; (800fce8 <tcp_process+0x7cc>)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	f003 f8ea 	bl	8012dc8 <tcp_timer_needed>
      }
      break;
 800fbf4:	e06c      	b.n	800fcd0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 f984 	bl	800ff04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fbfc:	4b3b      	ldr	r3, [pc, #236]	; (800fcec <tcp_process+0x7d0>)
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	f003 0310 	and.w	r3, r3, #16
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d065      	beq.n	800fcd4 <tcp_process+0x7b8>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc0c:	4b38      	ldr	r3, [pc, #224]	; (800fcf0 <tcp_process+0x7d4>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d15f      	bne.n	800fcd4 <tcp_process+0x7b8>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d15b      	bne.n	800fcd4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7fe fcf1 	bl	800e604 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fc22:	4b35      	ldr	r3, [pc, #212]	; (800fcf8 <tcp_process+0x7dc>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d105      	bne.n	800fc38 <tcp_process+0x71c>
 800fc2c:	4b32      	ldr	r3, [pc, #200]	; (800fcf8 <tcp_process+0x7dc>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	4a31      	ldr	r2, [pc, #196]	; (800fcf8 <tcp_process+0x7dc>)
 800fc34:	6013      	str	r3, [r2, #0]
 800fc36:	e013      	b.n	800fc60 <tcp_process+0x744>
 800fc38:	4b2f      	ldr	r3, [pc, #188]	; (800fcf8 <tcp_process+0x7dc>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	e00c      	b.n	800fc5a <tcp_process+0x73e>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d104      	bne.n	800fc54 <tcp_process+0x738>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	68da      	ldr	r2, [r3, #12]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	60da      	str	r2, [r3, #12]
 800fc52:	e005      	b.n	800fc60 <tcp_process+0x744>
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	60fb      	str	r3, [r7, #12]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d1ef      	bne.n	800fc40 <tcp_process+0x724>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	60da      	str	r2, [r3, #12]
 800fc66:	4b1f      	ldr	r3, [pc, #124]	; (800fce4 <tcp_process+0x7c8>)
 800fc68:	2201      	movs	r2, #1
 800fc6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	220a      	movs	r2, #10
 800fc70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fc72:	4b1d      	ldr	r3, [pc, #116]	; (800fce8 <tcp_process+0x7cc>)
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	60da      	str	r2, [r3, #12]
 800fc7a:	4a1b      	ldr	r2, [pc, #108]	; (800fce8 <tcp_process+0x7cc>)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6013      	str	r3, [r2, #0]
 800fc80:	f003 f8a2 	bl	8012dc8 <tcp_timer_needed>
      }
      break;
 800fc84:	e026      	b.n	800fcd4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 f93c 	bl	800ff04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fc8c:	4b17      	ldr	r3, [pc, #92]	; (800fcec <tcp_process+0x7d0>)
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	f003 0310 	and.w	r3, r3, #16
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d01f      	beq.n	800fcd8 <tcp_process+0x7bc>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc9c:	4b14      	ldr	r3, [pc, #80]	; (800fcf0 <tcp_process+0x7d4>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d119      	bne.n	800fcd8 <tcp_process+0x7bc>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d115      	bne.n	800fcd8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fcac:	4b11      	ldr	r3, [pc, #68]	; (800fcf4 <tcp_process+0x7d8>)
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	f043 0310 	orr.w	r3, r3, #16
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	4b0f      	ldr	r3, [pc, #60]	; (800fcf4 <tcp_process+0x7d8>)
 800fcb8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fcba:	e00d      	b.n	800fcd8 <tcp_process+0x7bc>
    default:
      break;
 800fcbc:	bf00      	nop
 800fcbe:	e00c      	b.n	800fcda <tcp_process+0x7be>
      break;
 800fcc0:	bf00      	nop
 800fcc2:	e00a      	b.n	800fcda <tcp_process+0x7be>
      break;
 800fcc4:	bf00      	nop
 800fcc6:	e008      	b.n	800fcda <tcp_process+0x7be>
      break;
 800fcc8:	bf00      	nop
 800fcca:	e006      	b.n	800fcda <tcp_process+0x7be>
      break;
 800fccc:	bf00      	nop
 800fcce:	e004      	b.n	800fcda <tcp_process+0x7be>
      break;
 800fcd0:	bf00      	nop
 800fcd2:	e002      	b.n	800fcda <tcp_process+0x7be>
      break;
 800fcd4:	bf00      	nop
 800fcd6:	e000      	b.n	800fcda <tcp_process+0x7be>
      break;
 800fcd8:	bf00      	nop
  }
  return ERR_OK;
 800fcda:	2300      	movs	r3, #0
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3724      	adds	r7, #36	; 0x24
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd90      	pop	{r4, r7, pc}
 800fce4:	2000be44 	.word	0x2000be44
 800fce8:	2000be40 	.word	0x2000be40
 800fcec:	2000be74 	.word	0x2000be74
 800fcf0:	2000be6c 	.word	0x2000be6c
 800fcf4:	2000be75 	.word	0x2000be75
 800fcf8:	2000be3c 	.word	0x2000be3c

0800fcfc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fcfc:	b590      	push	{r4, r7, lr}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d106      	bne.n	800fd1a <tcp_oos_insert_segment+0x1e>
 800fd0c:	4b3b      	ldr	r3, [pc, #236]	; (800fdfc <tcp_oos_insert_segment+0x100>)
 800fd0e:	f240 421f 	movw	r2, #1055	; 0x41f
 800fd12:	493b      	ldr	r1, [pc, #236]	; (800fe00 <tcp_oos_insert_segment+0x104>)
 800fd14:	483b      	ldr	r0, [pc, #236]	; (800fe04 <tcp_oos_insert_segment+0x108>)
 800fd16:	f008 fe95 	bl	8018a44 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	899b      	ldrh	r3, [r3, #12]
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fb f884 	bl	800ae30 <lwip_htons>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	f003 0301 	and.w	r3, r3, #1
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d028      	beq.n	800fd86 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fd34:	6838      	ldr	r0, [r7, #0]
 800fd36:	f7fe f9af 	bl	800e098 <tcp_segs_free>
    next = NULL;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	603b      	str	r3, [r7, #0]
 800fd3e:	e056      	b.n	800fdee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	899b      	ldrh	r3, [r3, #12]
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fb f871 	bl	800ae30 <lwip_htons>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	f003 0301 	and.w	r3, r3, #1
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00d      	beq.n	800fd76 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	899b      	ldrh	r3, [r3, #12]
 800fd60:	b29c      	uxth	r4, r3
 800fd62:	2001      	movs	r0, #1
 800fd64:	f7fb f864 	bl	800ae30 <lwip_htons>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	4322      	orrs	r2, r4
 800fd72:	b292      	uxth	r2, r2
 800fd74:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f7fe f99e 	bl	800e0c2 <tcp_seg_free>
    while (next &&
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d00e      	beq.n	800fdaa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	891b      	ldrh	r3, [r3, #8]
 800fd90:	461a      	mov	r2, r3
 800fd92:	4b1d      	ldr	r3, [pc, #116]	; (800fe08 <tcp_oos_insert_segment+0x10c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	441a      	add	r2, r3
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	6839      	ldr	r1, [r7, #0]
 800fda0:	8909      	ldrh	r1, [r1, #8]
 800fda2:	440b      	add	r3, r1
 800fda4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	daca      	bge.n	800fd40 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d01e      	beq.n	800fdee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	891b      	ldrh	r3, [r3, #8]
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	4b14      	ldr	r3, [pc, #80]	; (800fe08 <tcp_oos_insert_segment+0x10c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	441a      	add	r2, r3
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	dd12      	ble.n	800fdee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	4b0d      	ldr	r3, [pc, #52]	; (800fe08 <tcp_oos_insert_segment+0x10c>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685a      	ldr	r2, [r3, #4]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	891b      	ldrh	r3, [r3, #8]
 800fde6:	4619      	mov	r1, r3
 800fde8:	4610      	mov	r0, r2
 800fdea:	f7fc faff 	bl	800c3ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	683a      	ldr	r2, [r7, #0]
 800fdf2:	601a      	str	r2, [r3, #0]
}
 800fdf4:	bf00      	nop
 800fdf6:	3714      	adds	r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd90      	pop	{r4, r7, pc}
 800fdfc:	0801b138 	.word	0x0801b138
 800fe00:	0801b3f8 	.word	0x0801b3f8
 800fe04:	0801b184 	.word	0x0801b184
 800fe08:	2000be68 	.word	0x2000be68

0800fe0c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fe0c:	b5b0      	push	{r4, r5, r7, lr}
 800fe0e:	b086      	sub	sp, #24
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	607a      	str	r2, [r7, #4]
 800fe18:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fe1a:	e03e      	b.n	800fe9a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fc fcf2 	bl	800c814 <pbuf_clen>
 800fe30:	4603      	mov	r3, r0
 800fe32:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe3a:	8a7a      	ldrh	r2, [r7, #18]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d906      	bls.n	800fe4e <tcp_free_acked_segments+0x42>
 800fe40:	4b2a      	ldr	r3, [pc, #168]	; (800feec <tcp_free_acked_segments+0xe0>)
 800fe42:	f240 4257 	movw	r2, #1111	; 0x457
 800fe46:	492a      	ldr	r1, [pc, #168]	; (800fef0 <tcp_free_acked_segments+0xe4>)
 800fe48:	482a      	ldr	r0, [pc, #168]	; (800fef4 <tcp_free_acked_segments+0xe8>)
 800fe4a:	f008 fdfb 	bl	8018a44 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fe54:	8a7b      	ldrh	r3, [r7, #18]
 800fe56:	1ad3      	subs	r3, r2, r3
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	891a      	ldrh	r2, [r3, #8]
 800fe64:	4b24      	ldr	r3, [pc, #144]	; (800fef8 <tcp_free_acked_segments+0xec>)
 800fe66:	881b      	ldrh	r3, [r3, #0]
 800fe68:	4413      	add	r3, r2
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	4b22      	ldr	r3, [pc, #136]	; (800fef8 <tcp_free_acked_segments+0xec>)
 800fe6e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fe70:	6978      	ldr	r0, [r7, #20]
 800fe72:	f7fe f926 	bl	800e0c2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00c      	beq.n	800fe9a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d109      	bne.n	800fe9a <tcp_free_acked_segments+0x8e>
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d106      	bne.n	800fe9a <tcp_free_acked_segments+0x8e>
 800fe8c:	4b17      	ldr	r3, [pc, #92]	; (800feec <tcp_free_acked_segments+0xe0>)
 800fe8e:	f240 4261 	movw	r2, #1121	; 0x461
 800fe92:	491a      	ldr	r1, [pc, #104]	; (800fefc <tcp_free_acked_segments+0xf0>)
 800fe94:	4817      	ldr	r0, [pc, #92]	; (800fef4 <tcp_free_acked_segments+0xe8>)
 800fe96:	f008 fdd5 	bl	8018a44 <iprintf>
  while (seg_list != NULL &&
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d020      	beq.n	800fee2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fa ffd6 	bl	800ae58 <lwip_htonl>
 800feac:	4604      	mov	r4, r0
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	891b      	ldrh	r3, [r3, #8]
 800feb2:	461d      	mov	r5, r3
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	899b      	ldrh	r3, [r3, #12]
 800feba:	b29b      	uxth	r3, r3
 800febc:	4618      	mov	r0, r3
 800febe:	f7fa ffb7 	bl	800ae30 <lwip_htons>
 800fec2:	4603      	mov	r3, r0
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	f003 0303 	and.w	r3, r3, #3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d001      	beq.n	800fed2 <tcp_free_acked_segments+0xc6>
 800fece:	2301      	movs	r3, #1
 800fed0:	e000      	b.n	800fed4 <tcp_free_acked_segments+0xc8>
 800fed2:	2300      	movs	r3, #0
 800fed4:	442b      	add	r3, r5
 800fed6:	18e2      	adds	r2, r4, r3
 800fed8:	4b09      	ldr	r3, [pc, #36]	; (800ff00 <tcp_free_acked_segments+0xf4>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fede:	2b00      	cmp	r3, #0
 800fee0:	dd9c      	ble.n	800fe1c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fee2:	68bb      	ldr	r3, [r7, #8]
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3718      	adds	r7, #24
 800fee8:	46bd      	mov	sp, r7
 800feea:	bdb0      	pop	{r4, r5, r7, pc}
 800feec:	0801b138 	.word	0x0801b138
 800fef0:	0801b420 	.word	0x0801b420
 800fef4:	0801b184 	.word	0x0801b184
 800fef8:	2000be70 	.word	0x2000be70
 800fefc:	0801b448 	.word	0x0801b448
 800ff00:	2000be6c 	.word	0x2000be6c

0800ff04 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ff04:	b5b0      	push	{r4, r5, r7, lr}
 800ff06:	b094      	sub	sp, #80	; 0x50
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d106      	bne.n	800ff24 <tcp_receive+0x20>
 800ff16:	4b91      	ldr	r3, [pc, #580]	; (801015c <tcp_receive+0x258>)
 800ff18:	f240 427b 	movw	r2, #1147	; 0x47b
 800ff1c:	4990      	ldr	r1, [pc, #576]	; (8010160 <tcp_receive+0x25c>)
 800ff1e:	4891      	ldr	r0, [pc, #580]	; (8010164 <tcp_receive+0x260>)
 800ff20:	f008 fd90 	bl	8018a44 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	7d1b      	ldrb	r3, [r3, #20]
 800ff28:	2b03      	cmp	r3, #3
 800ff2a:	d806      	bhi.n	800ff3a <tcp_receive+0x36>
 800ff2c:	4b8b      	ldr	r3, [pc, #556]	; (801015c <tcp_receive+0x258>)
 800ff2e:	f240 427c 	movw	r2, #1148	; 0x47c
 800ff32:	498d      	ldr	r1, [pc, #564]	; (8010168 <tcp_receive+0x264>)
 800ff34:	488b      	ldr	r0, [pc, #556]	; (8010164 <tcp_receive+0x260>)
 800ff36:	f008 fd85 	bl	8018a44 <iprintf>

  if (flags & TCP_ACK) {
 800ff3a:	4b8c      	ldr	r3, [pc, #560]	; (801016c <tcp_receive+0x268>)
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	f003 0310 	and.w	r3, r3, #16
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f000 8264 	beq.w	8010410 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff4e:	461a      	mov	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff54:	4413      	add	r3, r2
 800ff56:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff5c:	4b84      	ldr	r3, [pc, #528]	; (8010170 <tcp_receive+0x26c>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	db1b      	blt.n	800ff9e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff6a:	4b81      	ldr	r3, [pc, #516]	; (8010170 <tcp_receive+0x26c>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d106      	bne.n	800ff80 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff76:	4b7f      	ldr	r3, [pc, #508]	; (8010174 <tcp_receive+0x270>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	1ad3      	subs	r3, r2, r3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	db0e      	blt.n	800ff9e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff84:	4b7b      	ldr	r3, [pc, #492]	; (8010174 <tcp_receive+0x270>)
 800ff86:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d125      	bne.n	800ffd8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ff8c:	4b7a      	ldr	r3, [pc, #488]	; (8010178 <tcp_receive+0x274>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	89db      	ldrh	r3, [r3, #14]
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d91c      	bls.n	800ffd8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ff9e:	4b76      	ldr	r3, [pc, #472]	; (8010178 <tcp_receive+0x274>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	89db      	ldrh	r3, [r3, #14]
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d205      	bcs.n	800ffc8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ffc8:	4b69      	ldr	r3, [pc, #420]	; (8010170 <tcp_receive+0x26c>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ffd0:	4b68      	ldr	r3, [pc, #416]	; (8010174 <tcp_receive+0x270>)
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ffd8:	4b66      	ldr	r3, [pc, #408]	; (8010174 <tcp_receive+0x270>)
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	dc58      	bgt.n	8010098 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ffe6:	4b65      	ldr	r3, [pc, #404]	; (801017c <tcp_receive+0x278>)
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d14b      	bne.n	8010086 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fff8:	4413      	add	r3, r2
 800fffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d142      	bne.n	8010086 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010006:	2b00      	cmp	r3, #0
 8010008:	db3d      	blt.n	8010086 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801000e:	4b59      	ldr	r3, [pc, #356]	; (8010174 <tcp_receive+0x270>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	d137      	bne.n	8010086 <tcp_receive+0x182>
              found_dupack = 1;
 8010016:	2301      	movs	r3, #1
 8010018:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010020:	2bff      	cmp	r3, #255	; 0xff
 8010022:	d007      	beq.n	8010034 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801002a:	3301      	adds	r3, #1
 801002c:	b2da      	uxtb	r2, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801003a:	2b03      	cmp	r3, #3
 801003c:	d91b      	bls.n	8010076 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010048:	4413      	add	r3, r2
 801004a:	b29a      	uxth	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010052:	429a      	cmp	r2, r3
 8010054:	d30a      	bcc.n	801006c <tcp_receive+0x168>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010060:	4413      	add	r3, r2
 8010062:	b29a      	uxth	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801006a:	e004      	b.n	8010076 <tcp_receive+0x172>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010072:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801007c:	2b02      	cmp	r3, #2
 801007e:	d902      	bls.n	8010086 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f002 fb43 	bl	801270c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010088:	2b00      	cmp	r3, #0
 801008a:	f040 8161 	bne.w	8010350 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010096:	e15b      	b.n	8010350 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010098:	4b36      	ldr	r3, [pc, #216]	; (8010174 <tcp_receive+0x270>)
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	3b01      	subs	r3, #1
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f2c0 814e 	blt.w	8010346 <tcp_receive+0x442>
 80100aa:	4b32      	ldr	r3, [pc, #200]	; (8010174 <tcp_receive+0x270>)
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f300 8146 	bgt.w	8010346 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	8b5b      	ldrh	r3, [r3, #26]
 80100be:	f003 0304 	and.w	r3, r3, #4
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d010      	beq.n	80100e8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	8b5b      	ldrh	r3, [r3, #26]
 80100ca:	f023 0304 	bic.w	r3, r3, #4
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80100f6:	10db      	asrs	r3, r3, #3
 80100f8:	b21b      	sxth	r3, r3
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010102:	b29b      	uxth	r3, r3
 8010104:	4413      	add	r3, r2
 8010106:	b29b      	uxth	r3, r3
 8010108:	b21a      	sxth	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010110:	4b18      	ldr	r3, [pc, #96]	; (8010174 <tcp_receive+0x270>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	b29a      	uxth	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801011a:	b29b      	uxth	r3, r3
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010128:	4b12      	ldr	r3, [pc, #72]	; (8010174 <tcp_receive+0x270>)
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	7d1b      	ldrb	r3, [r3, #20]
 8010134:	2b03      	cmp	r3, #3
 8010136:	f240 8097 	bls.w	8010268 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010146:	429a      	cmp	r2, r3
 8010148:	d245      	bcs.n	80101d6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	8b5b      	ldrh	r3, [r3, #26]
 801014e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010152:	2b00      	cmp	r3, #0
 8010154:	d014      	beq.n	8010180 <tcp_receive+0x27c>
 8010156:	2301      	movs	r3, #1
 8010158:	e013      	b.n	8010182 <tcp_receive+0x27e>
 801015a:	bf00      	nop
 801015c:	0801b138 	.word	0x0801b138
 8010160:	0801b468 	.word	0x0801b468
 8010164:	0801b184 	.word	0x0801b184
 8010168:	0801b484 	.word	0x0801b484
 801016c:	2000be74 	.word	0x2000be74
 8010170:	2000be68 	.word	0x2000be68
 8010174:	2000be6c 	.word	0x2000be6c
 8010178:	2000be58 	.word	0x2000be58
 801017c:	2000be72 	.word	0x2000be72
 8010180:	2302      	movs	r3, #2
 8010182:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010186:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801018a:	b29a      	uxth	r2, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010190:	fb12 f303 	smulbb	r3, r2, r3
 8010194:	b29b      	uxth	r3, r3
 8010196:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010198:	4293      	cmp	r3, r2
 801019a:	bf28      	it	cs
 801019c:	4613      	movcs	r3, r2
 801019e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80101a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101a8:	4413      	add	r3, r2
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d309      	bcc.n	80101ca <tcp_receive+0x2c6>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80101bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101be:	4413      	add	r3, r2
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80101c8:	e04e      	b.n	8010268 <tcp_receive+0x364>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80101d4:	e048      	b.n	8010268 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80101dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80101de:	4413      	add	r3, r2
 80101e0:	b29a      	uxth	r2, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d309      	bcc.n	8010200 <tcp_receive+0x2fc>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80101f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80101f4:	4413      	add	r3, r2
 80101f6:	b29a      	uxth	r2, r3
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80101fe:	e004      	b.n	801020a <tcp_receive+0x306>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010216:	429a      	cmp	r2, r3
 8010218:	d326      	bcc.n	8010268 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	b29a      	uxth	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801023a:	4413      	add	r3, r2
 801023c:	b29a      	uxth	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010244:	429a      	cmp	r2, r3
 8010246:	d30a      	bcc.n	801025e <tcp_receive+0x35a>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010252:	4413      	add	r3, r2
 8010254:	b29a      	uxth	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801025c:	e004      	b.n	8010268 <tcp_receive+0x364>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010264:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010270:	4a98      	ldr	r2, [pc, #608]	; (80104d4 <tcp_receive+0x5d0>)
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7ff fdca 	bl	800fe0c <tcp_free_acked_segments>
 8010278:	4602      	mov	r2, r0
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010286:	4a94      	ldr	r2, [pc, #592]	; (80104d8 <tcp_receive+0x5d4>)
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7ff fdbf 	bl	800fe0c <tcp_free_acked_segments>
 801028e:	4602      	mov	r2, r0
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010298:	2b00      	cmp	r3, #0
 801029a:	d104      	bne.n	80102a6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102a2:	861a      	strh	r2, [r3, #48]	; 0x30
 80102a4:	e002      	b.n	80102ac <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2200      	movs	r2, #0
 80102aa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d103      	bne.n	80102c2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80102c8:	4b84      	ldr	r3, [pc, #528]	; (80104dc <tcp_receive+0x5d8>)
 80102ca:	881b      	ldrh	r3, [r3, #0]
 80102cc:	4413      	add	r3, r2
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	8b5b      	ldrh	r3, [r3, #26]
 80102da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d035      	beq.n	801034e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d118      	bne.n	801031c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00c      	beq.n	801030c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fa fdaa 	bl	800ae58 <lwip_htonl>
 8010304:	4603      	mov	r3, r0
 8010306:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010308:	2b00      	cmp	r3, #0
 801030a:	dc20      	bgt.n	801034e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	8b5b      	ldrh	r3, [r3, #26]
 8010310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010314:	b29a      	uxth	r2, r3
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801031a:	e018      	b.n	801034e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	4618      	mov	r0, r3
 801032a:	f7fa fd95 	bl	800ae58 <lwip_htonl>
 801032e:	4603      	mov	r3, r0
 8010330:	1ae3      	subs	r3, r4, r3
 8010332:	2b00      	cmp	r3, #0
 8010334:	dc0b      	bgt.n	801034e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	8b5b      	ldrh	r3, [r3, #26]
 801033a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801033e:	b29a      	uxth	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010344:	e003      	b.n	801034e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f002 fbce 	bl	8012ae8 <tcp_send_empty_ack>
 801034c:	e000      	b.n	8010350 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801034e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010354:	2b00      	cmp	r3, #0
 8010356:	d05b      	beq.n	8010410 <tcp_receive+0x50c>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801035c:	4b60      	ldr	r3, [pc, #384]	; (80104e0 <tcp_receive+0x5dc>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	1ad3      	subs	r3, r2, r3
 8010362:	2b00      	cmp	r3, #0
 8010364:	da54      	bge.n	8010410 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010366:	4b5f      	ldr	r3, [pc, #380]	; (80104e4 <tcp_receive+0x5e0>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	b29a      	uxth	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010370:	b29b      	uxth	r3, r3
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	b29b      	uxth	r3, r3
 8010376:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801037a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010384:	10db      	asrs	r3, r3, #3
 8010386:	b21b      	sxth	r3, r3
 8010388:	b29b      	uxth	r3, r3
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	b29b      	uxth	r3, r3
 801038e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010398:	b29a      	uxth	r2, r3
 801039a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801039e:	4413      	add	r3, r2
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	b21a      	sxth	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80103a8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	da05      	bge.n	80103bc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80103b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80103b4:	425b      	negs	r3, r3
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80103bc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103c6:	109b      	asrs	r3, r3, #2
 80103c8:	b21b      	sxth	r3, r3
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103da:	b29a      	uxth	r2, r3
 80103dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80103e0:	4413      	add	r3, r2
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	b21a      	sxth	r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80103f0:	10db      	asrs	r3, r3, #3
 80103f2:	b21b      	sxth	r3, r3
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	4413      	add	r3, r2
 8010400:	b29b      	uxth	r3, r3
 8010402:	b21a      	sxth	r2, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2200      	movs	r2, #0
 801040e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010410:	4b35      	ldr	r3, [pc, #212]	; (80104e8 <tcp_receive+0x5e4>)
 8010412:	881b      	ldrh	r3, [r3, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	f000 84e2 	beq.w	8010dde <tcp_receive+0xeda>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	7d1b      	ldrb	r3, [r3, #20]
 801041e:	2b06      	cmp	r3, #6
 8010420:	f200 84dd 	bhi.w	8010dde <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010428:	4b30      	ldr	r3, [pc, #192]	; (80104ec <tcp_receive+0x5e8>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	3b01      	subs	r3, #1
 8010430:	2b00      	cmp	r3, #0
 8010432:	f2c0 808f 	blt.w	8010554 <tcp_receive+0x650>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801043a:	4b2b      	ldr	r3, [pc, #172]	; (80104e8 <tcp_receive+0x5e4>)
 801043c:	881b      	ldrh	r3, [r3, #0]
 801043e:	4619      	mov	r1, r3
 8010440:	4b2a      	ldr	r3, [pc, #168]	; (80104ec <tcp_receive+0x5e8>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	440b      	add	r3, r1
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	3301      	adds	r3, #1
 801044a:	2b00      	cmp	r3, #0
 801044c:	f300 8082 	bgt.w	8010554 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010450:	4b27      	ldr	r3, [pc, #156]	; (80104f0 <tcp_receive+0x5ec>)
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801045a:	4b24      	ldr	r3, [pc, #144]	; (80104ec <tcp_receive+0x5e8>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010462:	4b23      	ldr	r3, [pc, #140]	; (80104f0 <tcp_receive+0x5ec>)
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d106      	bne.n	8010478 <tcp_receive+0x574>
 801046a:	4b22      	ldr	r3, [pc, #136]	; (80104f4 <tcp_receive+0x5f0>)
 801046c:	f240 5294 	movw	r2, #1428	; 0x594
 8010470:	4921      	ldr	r1, [pc, #132]	; (80104f8 <tcp_receive+0x5f4>)
 8010472:	4822      	ldr	r0, [pc, #136]	; (80104fc <tcp_receive+0x5f8>)
 8010474:	f008 fae6 	bl	8018a44 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801047e:	4293      	cmp	r3, r2
 8010480:	d906      	bls.n	8010490 <tcp_receive+0x58c>
 8010482:	4b1c      	ldr	r3, [pc, #112]	; (80104f4 <tcp_receive+0x5f0>)
 8010484:	f240 5295 	movw	r2, #1429	; 0x595
 8010488:	491d      	ldr	r1, [pc, #116]	; (8010500 <tcp_receive+0x5fc>)
 801048a:	481c      	ldr	r0, [pc, #112]	; (80104fc <tcp_receive+0x5f8>)
 801048c:	f008 fada 	bl	8018a44 <iprintf>
      off = (u16_t)off32;
 8010490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010492:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010496:	4b16      	ldr	r3, [pc, #88]	; (80104f0 <tcp_receive+0x5ec>)
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	891b      	ldrh	r3, [r3, #8]
 801049c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d906      	bls.n	80104b2 <tcp_receive+0x5ae>
 80104a4:	4b13      	ldr	r3, [pc, #76]	; (80104f4 <tcp_receive+0x5f0>)
 80104a6:	f240 5297 	movw	r2, #1431	; 0x597
 80104aa:	4916      	ldr	r1, [pc, #88]	; (8010504 <tcp_receive+0x600>)
 80104ac:	4813      	ldr	r0, [pc, #76]	; (80104fc <tcp_receive+0x5f8>)
 80104ae:	f008 fac9 	bl	8018a44 <iprintf>
      inseg.len -= off;
 80104b2:	4b0f      	ldr	r3, [pc, #60]	; (80104f0 <tcp_receive+0x5ec>)
 80104b4:	891a      	ldrh	r2, [r3, #8]
 80104b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	b29a      	uxth	r2, r3
 80104be:	4b0c      	ldr	r3, [pc, #48]	; (80104f0 <tcp_receive+0x5ec>)
 80104c0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80104c2:	4b0b      	ldr	r3, [pc, #44]	; (80104f0 <tcp_receive+0x5ec>)
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	891a      	ldrh	r2, [r3, #8]
 80104c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80104d0:	e02a      	b.n	8010528 <tcp_receive+0x624>
 80104d2:	bf00      	nop
 80104d4:	0801b4a0 	.word	0x0801b4a0
 80104d8:	0801b4a8 	.word	0x0801b4a8
 80104dc:	2000be70 	.word	0x2000be70
 80104e0:	2000be6c 	.word	0x2000be6c
 80104e4:	2000be30 	.word	0x2000be30
 80104e8:	2000be72 	.word	0x2000be72
 80104ec:	2000be68 	.word	0x2000be68
 80104f0:	2000be48 	.word	0x2000be48
 80104f4:	0801b138 	.word	0x0801b138
 80104f8:	0801b4b0 	.word	0x0801b4b0
 80104fc:	0801b184 	.word	0x0801b184
 8010500:	0801b4c0 	.word	0x0801b4c0
 8010504:	0801b4d0 	.word	0x0801b4d0
        off -= p->len;
 8010508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801050a:	895b      	ldrh	r3, [r3, #10]
 801050c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010518:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801051a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801051c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801051e:	2200      	movs	r2, #0
 8010520:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801052a:	895b      	ldrh	r3, [r3, #10]
 801052c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010530:	429a      	cmp	r2, r3
 8010532:	d8e9      	bhi.n	8010508 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010538:	4619      	mov	r1, r3
 801053a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801053c:	f7fc f856 	bl	800c5ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010544:	4a91      	ldr	r2, [pc, #580]	; (801078c <tcp_receive+0x888>)
 8010546:	6013      	str	r3, [r2, #0]
 8010548:	4b91      	ldr	r3, [pc, #580]	; (8010790 <tcp_receive+0x88c>)
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	4a8f      	ldr	r2, [pc, #572]	; (801078c <tcp_receive+0x888>)
 801054e:	6812      	ldr	r2, [r2, #0]
 8010550:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010552:	e00d      	b.n	8010570 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010554:	4b8d      	ldr	r3, [pc, #564]	; (801078c <tcp_receive+0x888>)
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	2b00      	cmp	r3, #0
 8010560:	da06      	bge.n	8010570 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	8b5b      	ldrh	r3, [r3, #26]
 8010566:	f043 0302 	orr.w	r3, r3, #2
 801056a:	b29a      	uxth	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010570:	4b86      	ldr	r3, [pc, #536]	; (801078c <tcp_receive+0x888>)
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010578:	1ad3      	subs	r3, r2, r3
 801057a:	2b00      	cmp	r3, #0
 801057c:	f2c0 842a 	blt.w	8010dd4 <tcp_receive+0xed0>
 8010580:	4b82      	ldr	r3, [pc, #520]	; (801078c <tcp_receive+0x888>)
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010588:	6879      	ldr	r1, [r7, #4]
 801058a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801058c:	440b      	add	r3, r1
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	3301      	adds	r3, #1
 8010592:	2b00      	cmp	r3, #0
 8010594:	f300 841e 	bgt.w	8010dd4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801059c:	4b7b      	ldr	r3, [pc, #492]	; (801078c <tcp_receive+0x888>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	f040 829a 	bne.w	8010ada <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80105a6:	4b7a      	ldr	r3, [pc, #488]	; (8010790 <tcp_receive+0x88c>)
 80105a8:	891c      	ldrh	r4, [r3, #8]
 80105aa:	4b79      	ldr	r3, [pc, #484]	; (8010790 <tcp_receive+0x88c>)
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	899b      	ldrh	r3, [r3, #12]
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7fa fc3c 	bl	800ae30 <lwip_htons>
 80105b8:	4603      	mov	r3, r0
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	f003 0303 	and.w	r3, r3, #3
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d001      	beq.n	80105c8 <tcp_receive+0x6c4>
 80105c4:	2301      	movs	r3, #1
 80105c6:	e000      	b.n	80105ca <tcp_receive+0x6c6>
 80105c8:	2300      	movs	r3, #0
 80105ca:	4423      	add	r3, r4
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	4b71      	ldr	r3, [pc, #452]	; (8010794 <tcp_receive+0x890>)
 80105d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80105d6:	4b6f      	ldr	r3, [pc, #444]	; (8010794 <tcp_receive+0x890>)
 80105d8:	881b      	ldrh	r3, [r3, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d275      	bcs.n	80106ca <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80105de:	4b6c      	ldr	r3, [pc, #432]	; (8010790 <tcp_receive+0x88c>)
 80105e0:	68db      	ldr	r3, [r3, #12]
 80105e2:	899b      	ldrh	r3, [r3, #12]
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fa fc22 	bl	800ae30 <lwip_htons>
 80105ec:	4603      	mov	r3, r0
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	f003 0301 	and.w	r3, r3, #1
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d01f      	beq.n	8010638 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80105f8:	4b65      	ldr	r3, [pc, #404]	; (8010790 <tcp_receive+0x88c>)
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	899b      	ldrh	r3, [r3, #12]
 80105fe:	b29b      	uxth	r3, r3
 8010600:	b21b      	sxth	r3, r3
 8010602:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010606:	b21c      	sxth	r4, r3
 8010608:	4b61      	ldr	r3, [pc, #388]	; (8010790 <tcp_receive+0x88c>)
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	899b      	ldrh	r3, [r3, #12]
 801060e:	b29b      	uxth	r3, r3
 8010610:	4618      	mov	r0, r3
 8010612:	f7fa fc0d 	bl	800ae30 <lwip_htons>
 8010616:	4603      	mov	r3, r0
 8010618:	b2db      	uxtb	r3, r3
 801061a:	b29b      	uxth	r3, r3
 801061c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010620:	b29b      	uxth	r3, r3
 8010622:	4618      	mov	r0, r3
 8010624:	f7fa fc04 	bl	800ae30 <lwip_htons>
 8010628:	4603      	mov	r3, r0
 801062a:	b21b      	sxth	r3, r3
 801062c:	4323      	orrs	r3, r4
 801062e:	b21a      	sxth	r2, r3
 8010630:	4b57      	ldr	r3, [pc, #348]	; (8010790 <tcp_receive+0x88c>)
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	b292      	uxth	r2, r2
 8010636:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801063c:	4b54      	ldr	r3, [pc, #336]	; (8010790 <tcp_receive+0x88c>)
 801063e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010640:	4b53      	ldr	r3, [pc, #332]	; (8010790 <tcp_receive+0x88c>)
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	899b      	ldrh	r3, [r3, #12]
 8010646:	b29b      	uxth	r3, r3
 8010648:	4618      	mov	r0, r3
 801064a:	f7fa fbf1 	bl	800ae30 <lwip_htons>
 801064e:	4603      	mov	r3, r0
 8010650:	b2db      	uxtb	r3, r3
 8010652:	f003 0302 	and.w	r3, r3, #2
 8010656:	2b00      	cmp	r3, #0
 8010658:	d005      	beq.n	8010666 <tcp_receive+0x762>
            inseg.len -= 1;
 801065a:	4b4d      	ldr	r3, [pc, #308]	; (8010790 <tcp_receive+0x88c>)
 801065c:	891b      	ldrh	r3, [r3, #8]
 801065e:	3b01      	subs	r3, #1
 8010660:	b29a      	uxth	r2, r3
 8010662:	4b4b      	ldr	r3, [pc, #300]	; (8010790 <tcp_receive+0x88c>)
 8010664:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010666:	4b4a      	ldr	r3, [pc, #296]	; (8010790 <tcp_receive+0x88c>)
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	4a49      	ldr	r2, [pc, #292]	; (8010790 <tcp_receive+0x88c>)
 801066c:	8912      	ldrh	r2, [r2, #8]
 801066e:	4611      	mov	r1, r2
 8010670:	4618      	mov	r0, r3
 8010672:	f7fb febb 	bl	800c3ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010676:	4b46      	ldr	r3, [pc, #280]	; (8010790 <tcp_receive+0x88c>)
 8010678:	891c      	ldrh	r4, [r3, #8]
 801067a:	4b45      	ldr	r3, [pc, #276]	; (8010790 <tcp_receive+0x88c>)
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	899b      	ldrh	r3, [r3, #12]
 8010680:	b29b      	uxth	r3, r3
 8010682:	4618      	mov	r0, r3
 8010684:	f7fa fbd4 	bl	800ae30 <lwip_htons>
 8010688:	4603      	mov	r3, r0
 801068a:	b2db      	uxtb	r3, r3
 801068c:	f003 0303 	and.w	r3, r3, #3
 8010690:	2b00      	cmp	r3, #0
 8010692:	d001      	beq.n	8010698 <tcp_receive+0x794>
 8010694:	2301      	movs	r3, #1
 8010696:	e000      	b.n	801069a <tcp_receive+0x796>
 8010698:	2300      	movs	r3, #0
 801069a:	4423      	add	r3, r4
 801069c:	b29a      	uxth	r2, r3
 801069e:	4b3d      	ldr	r3, [pc, #244]	; (8010794 <tcp_receive+0x890>)
 80106a0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80106a2:	4b3c      	ldr	r3, [pc, #240]	; (8010794 <tcp_receive+0x890>)
 80106a4:	881b      	ldrh	r3, [r3, #0]
 80106a6:	461a      	mov	r2, r3
 80106a8:	4b38      	ldr	r3, [pc, #224]	; (801078c <tcp_receive+0x888>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	441a      	add	r2, r3
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b2:	6879      	ldr	r1, [r7, #4]
 80106b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106b6:	440b      	add	r3, r1
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d006      	beq.n	80106ca <tcp_receive+0x7c6>
 80106bc:	4b36      	ldr	r3, [pc, #216]	; (8010798 <tcp_receive+0x894>)
 80106be:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80106c2:	4936      	ldr	r1, [pc, #216]	; (801079c <tcp_receive+0x898>)
 80106c4:	4836      	ldr	r0, [pc, #216]	; (80107a0 <tcp_receive+0x89c>)
 80106c6:	f008 f9bd 	bl	8018a44 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f000 80e7 	beq.w	80108a2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80106d4:	4b2e      	ldr	r3, [pc, #184]	; (8010790 <tcp_receive+0x88c>)
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	899b      	ldrh	r3, [r3, #12]
 80106da:	b29b      	uxth	r3, r3
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fa fba7 	bl	800ae30 <lwip_htons>
 80106e2:	4603      	mov	r3, r0
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	f003 0301 	and.w	r3, r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d010      	beq.n	8010710 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80106ee:	e00a      	b.n	8010706 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106f4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f7fd fcde 	bl	800e0c2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801070a:	2b00      	cmp	r3, #0
 801070c:	d1f0      	bne.n	80106f0 <tcp_receive+0x7ec>
 801070e:	e0c8      	b.n	80108a2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010714:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010716:	e052      	b.n	80107be <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	899b      	ldrh	r3, [r3, #12]
 801071e:	b29b      	uxth	r3, r3
 8010720:	4618      	mov	r0, r3
 8010722:	f7fa fb85 	bl	800ae30 <lwip_htons>
 8010726:	4603      	mov	r3, r0
 8010728:	b2db      	uxtb	r3, r3
 801072a:	f003 0301 	and.w	r3, r3, #1
 801072e:	2b00      	cmp	r3, #0
 8010730:	d03d      	beq.n	80107ae <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010732:	4b17      	ldr	r3, [pc, #92]	; (8010790 <tcp_receive+0x88c>)
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	899b      	ldrh	r3, [r3, #12]
 8010738:	b29b      	uxth	r3, r3
 801073a:	4618      	mov	r0, r3
 801073c:	f7fa fb78 	bl	800ae30 <lwip_htons>
 8010740:	4603      	mov	r3, r0
 8010742:	b2db      	uxtb	r3, r3
 8010744:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010748:	2b00      	cmp	r3, #0
 801074a:	d130      	bne.n	80107ae <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801074c:	4b10      	ldr	r3, [pc, #64]	; (8010790 <tcp_receive+0x88c>)
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	899b      	ldrh	r3, [r3, #12]
 8010752:	b29c      	uxth	r4, r3
 8010754:	2001      	movs	r0, #1
 8010756:	f7fa fb6b 	bl	800ae30 <lwip_htons>
 801075a:	4603      	mov	r3, r0
 801075c:	461a      	mov	r2, r3
 801075e:	4b0c      	ldr	r3, [pc, #48]	; (8010790 <tcp_receive+0x88c>)
 8010760:	68db      	ldr	r3, [r3, #12]
 8010762:	4322      	orrs	r2, r4
 8010764:	b292      	uxth	r2, r2
 8010766:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010768:	4b09      	ldr	r3, [pc, #36]	; (8010790 <tcp_receive+0x88c>)
 801076a:	891c      	ldrh	r4, [r3, #8]
 801076c:	4b08      	ldr	r3, [pc, #32]	; (8010790 <tcp_receive+0x88c>)
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	899b      	ldrh	r3, [r3, #12]
 8010772:	b29b      	uxth	r3, r3
 8010774:	4618      	mov	r0, r3
 8010776:	f7fa fb5b 	bl	800ae30 <lwip_htons>
 801077a:	4603      	mov	r3, r0
 801077c:	b2db      	uxtb	r3, r3
 801077e:	f003 0303 	and.w	r3, r3, #3
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00e      	beq.n	80107a4 <tcp_receive+0x8a0>
 8010786:	2301      	movs	r3, #1
 8010788:	e00d      	b.n	80107a6 <tcp_receive+0x8a2>
 801078a:	bf00      	nop
 801078c:	2000be68 	.word	0x2000be68
 8010790:	2000be48 	.word	0x2000be48
 8010794:	2000be72 	.word	0x2000be72
 8010798:	0801b138 	.word	0x0801b138
 801079c:	0801b4e0 	.word	0x0801b4e0
 80107a0:	0801b184 	.word	0x0801b184
 80107a4:	2300      	movs	r3, #0
 80107a6:	4423      	add	r3, r4
 80107a8:	b29a      	uxth	r2, r3
 80107aa:	4b98      	ldr	r3, [pc, #608]	; (8010a0c <tcp_receive+0xb08>)
 80107ac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80107ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80107b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80107b8:	6938      	ldr	r0, [r7, #16]
 80107ba:	f7fd fc82 	bl	800e0c2 <tcp_seg_free>
            while (next &&
 80107be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d00e      	beq.n	80107e2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80107c4:	4b91      	ldr	r3, [pc, #580]	; (8010a0c <tcp_receive+0xb08>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	461a      	mov	r2, r3
 80107ca:	4b91      	ldr	r3, [pc, #580]	; (8010a10 <tcp_receive+0xb0c>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	441a      	add	r2, r3
 80107d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d2:	68db      	ldr	r3, [r3, #12]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80107d8:	8909      	ldrh	r1, [r1, #8]
 80107da:	440b      	add	r3, r1
 80107dc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80107de:	2b00      	cmp	r3, #0
 80107e0:	da9a      	bge.n	8010718 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80107e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d059      	beq.n	801089c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80107e8:	4b88      	ldr	r3, [pc, #544]	; (8010a0c <tcp_receive+0xb08>)
 80107ea:	881b      	ldrh	r3, [r3, #0]
 80107ec:	461a      	mov	r2, r3
 80107ee:	4b88      	ldr	r3, [pc, #544]	; (8010a10 <tcp_receive+0xb0c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	441a      	add	r2, r3
 80107f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	dd4d      	ble.n	801089c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	b29a      	uxth	r2, r3
 8010808:	4b81      	ldr	r3, [pc, #516]	; (8010a10 <tcp_receive+0xb0c>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	b29b      	uxth	r3, r3
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	b29a      	uxth	r2, r3
 8010812:	4b80      	ldr	r3, [pc, #512]	; (8010a14 <tcp_receive+0xb10>)
 8010814:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010816:	4b7f      	ldr	r3, [pc, #508]	; (8010a14 <tcp_receive+0xb10>)
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	899b      	ldrh	r3, [r3, #12]
 801081c:	b29b      	uxth	r3, r3
 801081e:	4618      	mov	r0, r3
 8010820:	f7fa fb06 	bl	800ae30 <lwip_htons>
 8010824:	4603      	mov	r3, r0
 8010826:	b2db      	uxtb	r3, r3
 8010828:	f003 0302 	and.w	r3, r3, #2
 801082c:	2b00      	cmp	r3, #0
 801082e:	d005      	beq.n	801083c <tcp_receive+0x938>
                inseg.len -= 1;
 8010830:	4b78      	ldr	r3, [pc, #480]	; (8010a14 <tcp_receive+0xb10>)
 8010832:	891b      	ldrh	r3, [r3, #8]
 8010834:	3b01      	subs	r3, #1
 8010836:	b29a      	uxth	r2, r3
 8010838:	4b76      	ldr	r3, [pc, #472]	; (8010a14 <tcp_receive+0xb10>)
 801083a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801083c:	4b75      	ldr	r3, [pc, #468]	; (8010a14 <tcp_receive+0xb10>)
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	4a74      	ldr	r2, [pc, #464]	; (8010a14 <tcp_receive+0xb10>)
 8010842:	8912      	ldrh	r2, [r2, #8]
 8010844:	4611      	mov	r1, r2
 8010846:	4618      	mov	r0, r3
 8010848:	f7fb fdd0 	bl	800c3ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801084c:	4b71      	ldr	r3, [pc, #452]	; (8010a14 <tcp_receive+0xb10>)
 801084e:	891c      	ldrh	r4, [r3, #8]
 8010850:	4b70      	ldr	r3, [pc, #448]	; (8010a14 <tcp_receive+0xb10>)
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	899b      	ldrh	r3, [r3, #12]
 8010856:	b29b      	uxth	r3, r3
 8010858:	4618      	mov	r0, r3
 801085a:	f7fa fae9 	bl	800ae30 <lwip_htons>
 801085e:	4603      	mov	r3, r0
 8010860:	b2db      	uxtb	r3, r3
 8010862:	f003 0303 	and.w	r3, r3, #3
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <tcp_receive+0x96a>
 801086a:	2301      	movs	r3, #1
 801086c:	e000      	b.n	8010870 <tcp_receive+0x96c>
 801086e:	2300      	movs	r3, #0
 8010870:	4423      	add	r3, r4
 8010872:	b29a      	uxth	r2, r3
 8010874:	4b65      	ldr	r3, [pc, #404]	; (8010a0c <tcp_receive+0xb08>)
 8010876:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010878:	4b64      	ldr	r3, [pc, #400]	; (8010a0c <tcp_receive+0xb08>)
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	461a      	mov	r2, r3
 801087e:	4b64      	ldr	r3, [pc, #400]	; (8010a10 <tcp_receive+0xb0c>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	441a      	add	r2, r3
 8010884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	429a      	cmp	r2, r3
 801088c:	d006      	beq.n	801089c <tcp_receive+0x998>
 801088e:	4b62      	ldr	r3, [pc, #392]	; (8010a18 <tcp_receive+0xb14>)
 8010890:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010894:	4961      	ldr	r1, [pc, #388]	; (8010a1c <tcp_receive+0xb18>)
 8010896:	4862      	ldr	r0, [pc, #392]	; (8010a20 <tcp_receive+0xb1c>)
 8010898:	f008 f8d4 	bl	8018a44 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108a0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80108a2:	4b5a      	ldr	r3, [pc, #360]	; (8010a0c <tcp_receive+0xb08>)
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	461a      	mov	r2, r3
 80108a8:	4b59      	ldr	r3, [pc, #356]	; (8010a10 <tcp_receive+0xb0c>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	441a      	add	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108b6:	4b55      	ldr	r3, [pc, #340]	; (8010a0c <tcp_receive+0xb08>)
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d206      	bcs.n	80108cc <tcp_receive+0x9c8>
 80108be:	4b56      	ldr	r3, [pc, #344]	; (8010a18 <tcp_receive+0xb14>)
 80108c0:	f240 6207 	movw	r2, #1543	; 0x607
 80108c4:	4957      	ldr	r1, [pc, #348]	; (8010a24 <tcp_receive+0xb20>)
 80108c6:	4856      	ldr	r0, [pc, #344]	; (8010a20 <tcp_receive+0xb1c>)
 80108c8:	f008 f8bc 	bl	8018a44 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108d0:	4b4e      	ldr	r3, [pc, #312]	; (8010a0c <tcp_receive+0xb08>)
 80108d2:	881b      	ldrh	r3, [r3, #0]
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f7fc fdb3 	bl	800d448 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80108e2:	4b4c      	ldr	r3, [pc, #304]	; (8010a14 <tcp_receive+0xb10>)
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	891b      	ldrh	r3, [r3, #8]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d006      	beq.n	80108fa <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80108ec:	4b49      	ldr	r3, [pc, #292]	; (8010a14 <tcp_receive+0xb10>)
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	4a4d      	ldr	r2, [pc, #308]	; (8010a28 <tcp_receive+0xb24>)
 80108f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80108f4:	4b47      	ldr	r3, [pc, #284]	; (8010a14 <tcp_receive+0xb10>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108fa:	4b46      	ldr	r3, [pc, #280]	; (8010a14 <tcp_receive+0xb10>)
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	899b      	ldrh	r3, [r3, #12]
 8010900:	b29b      	uxth	r3, r3
 8010902:	4618      	mov	r0, r3
 8010904:	f7fa fa94 	bl	800ae30 <lwip_htons>
 8010908:	4603      	mov	r3, r0
 801090a:	b2db      	uxtb	r3, r3
 801090c:	f003 0301 	and.w	r3, r3, #1
 8010910:	2b00      	cmp	r3, #0
 8010912:	f000 80b8 	beq.w	8010a86 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010916:	4b45      	ldr	r3, [pc, #276]	; (8010a2c <tcp_receive+0xb28>)
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	f043 0320 	orr.w	r3, r3, #32
 801091e:	b2da      	uxtb	r2, r3
 8010920:	4b42      	ldr	r3, [pc, #264]	; (8010a2c <tcp_receive+0xb28>)
 8010922:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010924:	e0af      	b.n	8010a86 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801092a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	4a36      	ldr	r2, [pc, #216]	; (8010a10 <tcp_receive+0xb0c>)
 8010936:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	891b      	ldrh	r3, [r3, #8]
 801093c:	461c      	mov	r4, r3
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	899b      	ldrh	r3, [r3, #12]
 8010944:	b29b      	uxth	r3, r3
 8010946:	4618      	mov	r0, r3
 8010948:	f7fa fa72 	bl	800ae30 <lwip_htons>
 801094c:	4603      	mov	r3, r0
 801094e:	b2db      	uxtb	r3, r3
 8010950:	f003 0303 	and.w	r3, r3, #3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <tcp_receive+0xa58>
 8010958:	2301      	movs	r3, #1
 801095a:	e000      	b.n	801095e <tcp_receive+0xa5a>
 801095c:	2300      	movs	r3, #0
 801095e:	191a      	adds	r2, r3, r4
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010964:	441a      	add	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801096e:	461c      	mov	r4, r3
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	891b      	ldrh	r3, [r3, #8]
 8010974:	461d      	mov	r5, r3
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	68db      	ldr	r3, [r3, #12]
 801097a:	899b      	ldrh	r3, [r3, #12]
 801097c:	b29b      	uxth	r3, r3
 801097e:	4618      	mov	r0, r3
 8010980:	f7fa fa56 	bl	800ae30 <lwip_htons>
 8010984:	4603      	mov	r3, r0
 8010986:	b2db      	uxtb	r3, r3
 8010988:	f003 0303 	and.w	r3, r3, #3
 801098c:	2b00      	cmp	r3, #0
 801098e:	d001      	beq.n	8010994 <tcp_receive+0xa90>
 8010990:	2301      	movs	r3, #1
 8010992:	e000      	b.n	8010996 <tcp_receive+0xa92>
 8010994:	2300      	movs	r3, #0
 8010996:	442b      	add	r3, r5
 8010998:	429c      	cmp	r4, r3
 801099a:	d206      	bcs.n	80109aa <tcp_receive+0xaa6>
 801099c:	4b1e      	ldr	r3, [pc, #120]	; (8010a18 <tcp_receive+0xb14>)
 801099e:	f240 622b 	movw	r2, #1579	; 0x62b
 80109a2:	4923      	ldr	r1, [pc, #140]	; (8010a30 <tcp_receive+0xb2c>)
 80109a4:	481e      	ldr	r0, [pc, #120]	; (8010a20 <tcp_receive+0xb1c>)
 80109a6:	f008 f84d 	bl	8018a44 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	891b      	ldrh	r3, [r3, #8]
 80109ae:	461c      	mov	r4, r3
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	68db      	ldr	r3, [r3, #12]
 80109b4:	899b      	ldrh	r3, [r3, #12]
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fa fa39 	bl	800ae30 <lwip_htons>
 80109be:	4603      	mov	r3, r0
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	f003 0303 	and.w	r3, r3, #3
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d001      	beq.n	80109ce <tcp_receive+0xaca>
 80109ca:	2301      	movs	r3, #1
 80109cc:	e000      	b.n	80109d0 <tcp_receive+0xacc>
 80109ce:	2300      	movs	r3, #0
 80109d0:	1919      	adds	r1, r3, r4
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80109d6:	b28b      	uxth	r3, r1
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	b29a      	uxth	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f7fc fd31 	bl	800d448 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	891b      	ldrh	r3, [r3, #8]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d028      	beq.n	8010a42 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80109f0:	4b0d      	ldr	r3, [pc, #52]	; (8010a28 <tcp_receive+0xb24>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d01d      	beq.n	8010a34 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80109f8:	4b0b      	ldr	r3, [pc, #44]	; (8010a28 <tcp_receive+0xb24>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	4619      	mov	r1, r3
 8010a02:	4610      	mov	r0, r2
 8010a04:	f7fb ff44 	bl	800c890 <pbuf_cat>
 8010a08:	e018      	b.n	8010a3c <tcp_receive+0xb38>
 8010a0a:	bf00      	nop
 8010a0c:	2000be72 	.word	0x2000be72
 8010a10:	2000be68 	.word	0x2000be68
 8010a14:	2000be48 	.word	0x2000be48
 8010a18:	0801b138 	.word	0x0801b138
 8010a1c:	0801b518 	.word	0x0801b518
 8010a20:	0801b184 	.word	0x0801b184
 8010a24:	0801b554 	.word	0x0801b554
 8010a28:	2000be78 	.word	0x2000be78
 8010a2c:	2000be75 	.word	0x2000be75
 8010a30:	0801b574 	.word	0x0801b574
            } else {
              recv_data = cseg->p;
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	4a70      	ldr	r2, [pc, #448]	; (8010bfc <tcp_receive+0xcf8>)
 8010a3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	68db      	ldr	r3, [r3, #12]
 8010a46:	899b      	ldrh	r3, [r3, #12]
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fa f9f0 	bl	800ae30 <lwip_htons>
 8010a50:	4603      	mov	r3, r0
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	f003 0301 	and.w	r3, r3, #1
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d00d      	beq.n	8010a78 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010a5c:	4b68      	ldr	r3, [pc, #416]	; (8010c00 <tcp_receive+0xcfc>)
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	f043 0320 	orr.w	r3, r3, #32
 8010a64:	b2da      	uxtb	r2, r3
 8010a66:	4b66      	ldr	r3, [pc, #408]	; (8010c00 <tcp_receive+0xcfc>)
 8010a68:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	7d1b      	ldrb	r3, [r3, #20]
 8010a6e:	2b04      	cmp	r3, #4
 8010a70:	d102      	bne.n	8010a78 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2207      	movs	r2, #7
 8010a76:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010a80:	68b8      	ldr	r0, [r7, #8]
 8010a82:	f7fd fb1e 	bl	800e0c2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d008      	beq.n	8010aa0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	685a      	ldr	r2, [r3, #4]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	f43f af43 	beq.w	8010926 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	8b5b      	ldrh	r3, [r3, #26]
 8010aa4:	f003 0301 	and.w	r3, r3, #1
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d00e      	beq.n	8010aca <tcp_receive+0xbc6>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	8b5b      	ldrh	r3, [r3, #26]
 8010ab0:	f023 0301 	bic.w	r3, r3, #1
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	835a      	strh	r2, [r3, #26]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	8b5b      	ldrh	r3, [r3, #26]
 8010abe:	f043 0302 	orr.w	r3, r3, #2
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ac8:	e188      	b.n	8010ddc <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	8b5b      	ldrh	r3, [r3, #26]
 8010ace:	f043 0301 	orr.w	r3, r3, #1
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ad8:	e180      	b.n	8010ddc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010ae2:	4848      	ldr	r0, [pc, #288]	; (8010c04 <tcp_receive+0xd00>)
 8010ae4:	f7fd fb06 	bl	800e0f4 <tcp_seg_copy>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	675a      	str	r2, [r3, #116]	; 0x74
 8010aee:	e16d      	b.n	8010dcc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010af0:	2300      	movs	r3, #0
 8010af2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010afa:	e157      	b.n	8010dac <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	685a      	ldr	r2, [r3, #4]
 8010b02:	4b41      	ldr	r3, [pc, #260]	; (8010c08 <tcp_receive+0xd04>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d11d      	bne.n	8010b46 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010b0a:	4b3e      	ldr	r3, [pc, #248]	; (8010c04 <tcp_receive+0xd00>)
 8010b0c:	891a      	ldrh	r2, [r3, #8]
 8010b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b10:	891b      	ldrh	r3, [r3, #8]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	f240 814f 	bls.w	8010db6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010b18:	483a      	ldr	r0, [pc, #232]	; (8010c04 <tcp_receive+0xd00>)
 8010b1a:	f7fd faeb 	bl	800e0f4 <tcp_seg_copy>
 8010b1e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f000 8149 	beq.w	8010dba <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d003      	beq.n	8010b36 <tcp_receive+0xc32>
                    prev->next = cseg;
 8010b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b30:	697a      	ldr	r2, [r7, #20]
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	e002      	b.n	8010b3c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	697a      	ldr	r2, [r7, #20]
 8010b3a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010b3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b3e:	6978      	ldr	r0, [r7, #20]
 8010b40:	f7ff f8dc 	bl	800fcfc <tcp_oos_insert_segment>
                }
                break;
 8010b44:	e139      	b.n	8010dba <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d117      	bne.n	8010b7c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010b4c:	4b2e      	ldr	r3, [pc, #184]	; (8010c08 <tcp_receive+0xd04>)
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	1ad3      	subs	r3, r2, r3
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	da57      	bge.n	8010c0c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010b5c:	4829      	ldr	r0, [pc, #164]	; (8010c04 <tcp_receive+0xd00>)
 8010b5e:	f7fd fac9 	bl	800e0f4 <tcp_seg_copy>
 8010b62:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f000 8129 	beq.w	8010dbe <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	69ba      	ldr	r2, [r7, #24]
 8010b70:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b74:	69b8      	ldr	r0, [r7, #24]
 8010b76:	f7ff f8c1 	bl	800fcfc <tcp_oos_insert_segment>
                  }
                  break;
 8010b7a:	e120      	b.n	8010dbe <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010b7c:	4b22      	ldr	r3, [pc, #136]	; (8010c08 <tcp_receive+0xd04>)
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	1ad3      	subs	r3, r2, r3
 8010b88:	3b01      	subs	r3, #1
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	db3e      	blt.n	8010c0c <tcp_receive+0xd08>
 8010b8e:	4b1e      	ldr	r3, [pc, #120]	; (8010c08 <tcp_receive+0xd04>)
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	dc35      	bgt.n	8010c0c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010ba0:	4818      	ldr	r0, [pc, #96]	; (8010c04 <tcp_receive+0xd00>)
 8010ba2:	f7fd faa7 	bl	800e0f4 <tcp_seg_copy>
 8010ba6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010ba8:	69fb      	ldr	r3, [r7, #28]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f000 8109 	beq.w	8010dc2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bb8:	8912      	ldrh	r2, [r2, #8]
 8010bba:	441a      	add	r2, r3
 8010bbc:	4b12      	ldr	r3, [pc, #72]	; (8010c08 <tcp_receive+0xd04>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	1ad3      	subs	r3, r2, r3
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	dd12      	ble.n	8010bec <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010bc6:	4b10      	ldr	r3, [pc, #64]	; (8010c08 <tcp_receive+0xd04>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	1ad3      	subs	r3, r2, r3
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bda:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bde:	685a      	ldr	r2, [r3, #4]
 8010be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be2:	891b      	ldrh	r3, [r3, #8]
 8010be4:	4619      	mov	r1, r3
 8010be6:	4610      	mov	r0, r2
 8010be8:	f7fb fc00 	bl	800c3ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bee:	69fa      	ldr	r2, [r7, #28]
 8010bf0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bf4:	69f8      	ldr	r0, [r7, #28]
 8010bf6:	f7ff f881 	bl	800fcfc <tcp_oos_insert_segment>
                  }
                  break;
 8010bfa:	e0e2      	b.n	8010dc2 <tcp_receive+0xebe>
 8010bfc:	2000be78 	.word	0x2000be78
 8010c00:	2000be75 	.word	0x2000be75
 8010c04:	2000be48 	.word	0x2000be48
 8010c08:	2000be68 	.word	0x2000be68
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f040 80c6 	bne.w	8010da6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010c1a:	4b80      	ldr	r3, [pc, #512]	; (8010e1c <tcp_receive+0xf18>)
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f340 80bd 	ble.w	8010da6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	899b      	ldrh	r3, [r3, #12]
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fa f8fb 	bl	800ae30 <lwip_htons>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	f003 0301 	and.w	r3, r3, #1
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	f040 80bf 	bne.w	8010dc6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010c48:	4875      	ldr	r0, [pc, #468]	; (8010e20 <tcp_receive+0xf1c>)
 8010c4a:	f7fd fa53 	bl	800e0f4 <tcp_seg_copy>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c52:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f000 80b6 	beq.w	8010dca <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c66:	8912      	ldrh	r2, [r2, #8]
 8010c68:	441a      	add	r2, r3
 8010c6a:	4b6c      	ldr	r3, [pc, #432]	; (8010e1c <tcp_receive+0xf18>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	dd12      	ble.n	8010c9a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010c74:	4b69      	ldr	r3, [pc, #420]	; (8010e1c <tcp_receive+0xf18>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	b29a      	uxth	r2, r3
 8010c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c88:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8c:	685a      	ldr	r2, [r3, #4]
 8010c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c90:	891b      	ldrh	r3, [r3, #8]
 8010c92:	4619      	mov	r1, r3
 8010c94:	4610      	mov	r0, r2
 8010c96:	f7fb fba9 	bl	800c3ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010c9a:	4b62      	ldr	r3, [pc, #392]	; (8010e24 <tcp_receive+0xf20>)
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	4b5e      	ldr	r3, [pc, #376]	; (8010e1c <tcp_receive+0xf18>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	441a      	add	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010caa:	6879      	ldr	r1, [r7, #4]
 8010cac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010cae:	440b      	add	r3, r1
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f340 8089 	ble.w	8010dca <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	68db      	ldr	r3, [r3, #12]
 8010cbe:	899b      	ldrh	r3, [r3, #12]
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fa f8b4 	bl	800ae30 <lwip_htons>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	f003 0301 	and.w	r3, r3, #1
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d022      	beq.n	8010d1a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	899b      	ldrh	r3, [r3, #12]
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	b21b      	sxth	r3, r3
 8010ce0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ce4:	b21c      	sxth	r4, r3
 8010ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	899b      	ldrh	r3, [r3, #12]
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fa f89d 	bl	800ae30 <lwip_htons>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	b2db      	uxtb	r3, r3
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fa f894 	bl	800ae30 <lwip_htons>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	b21b      	sxth	r3, r3
 8010d0c:	4323      	orrs	r3, r4
 8010d0e:	b21a      	sxth	r2, r3
 8010d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	b292      	uxth	r2, r2
 8010d18:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d1e:	b29a      	uxth	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d24:	4413      	add	r3, r2
 8010d26:	b299      	uxth	r1, r3
 8010d28:	4b3c      	ldr	r3, [pc, #240]	; (8010e1c <tcp_receive+0xf18>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	b29a      	uxth	r2, r3
 8010d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	1a8a      	subs	r2, r1, r2
 8010d34:	b292      	uxth	r2, r2
 8010d36:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	685a      	ldr	r2, [r3, #4]
 8010d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	891b      	ldrh	r3, [r3, #8]
 8010d44:	4619      	mov	r1, r3
 8010d46:	4610      	mov	r0, r2
 8010d48:	f7fb fb50 	bl	800c3ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	891c      	ldrh	r4, [r3, #8]
 8010d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	899b      	ldrh	r3, [r3, #12]
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7fa f867 	bl	800ae30 <lwip_htons>
 8010d62:	4603      	mov	r3, r0
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	f003 0303 	and.w	r3, r3, #3
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d001      	beq.n	8010d72 <tcp_receive+0xe6e>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	e000      	b.n	8010d74 <tcp_receive+0xe70>
 8010d72:	2300      	movs	r3, #0
 8010d74:	4423      	add	r3, r4
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	4b2a      	ldr	r3, [pc, #168]	; (8010e24 <tcp_receive+0xf20>)
 8010d7a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010d7c:	4b29      	ldr	r3, [pc, #164]	; (8010e24 <tcp_receive+0xf20>)
 8010d7e:	881b      	ldrh	r3, [r3, #0]
 8010d80:	461a      	mov	r2, r3
 8010d82:	4b26      	ldr	r3, [pc, #152]	; (8010e1c <tcp_receive+0xf18>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	441a      	add	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d8c:	6879      	ldr	r1, [r7, #4]
 8010d8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d90:	440b      	add	r3, r1
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d019      	beq.n	8010dca <tcp_receive+0xec6>
 8010d96:	4b24      	ldr	r3, [pc, #144]	; (8010e28 <tcp_receive+0xf24>)
 8010d98:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010d9c:	4923      	ldr	r1, [pc, #140]	; (8010e2c <tcp_receive+0xf28>)
 8010d9e:	4824      	ldr	r0, [pc, #144]	; (8010e30 <tcp_receive+0xf2c>)
 8010da0:	f007 fe50 	bl	8018a44 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010da4:	e011      	b.n	8010dca <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8010dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f47f aea4 	bne.w	8010afc <tcp_receive+0xbf8>
 8010db4:	e00a      	b.n	8010dcc <tcp_receive+0xec8>
                break;
 8010db6:	bf00      	nop
 8010db8:	e008      	b.n	8010dcc <tcp_receive+0xec8>
                break;
 8010dba:	bf00      	nop
 8010dbc:	e006      	b.n	8010dcc <tcp_receive+0xec8>
                  break;
 8010dbe:	bf00      	nop
 8010dc0:	e004      	b.n	8010dcc <tcp_receive+0xec8>
                  break;
 8010dc2:	bf00      	nop
 8010dc4:	e002      	b.n	8010dcc <tcp_receive+0xec8>
                  break;
 8010dc6:	bf00      	nop
 8010dc8:	e000      	b.n	8010dcc <tcp_receive+0xec8>
                break;
 8010dca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f001 fe8b 	bl	8012ae8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010dd2:	e003      	b.n	8010ddc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f001 fe87 	bl	8012ae8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010dda:	e01a      	b.n	8010e12 <tcp_receive+0xf0e>
 8010ddc:	e019      	b.n	8010e12 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010dde:	4b0f      	ldr	r3, [pc, #60]	; (8010e1c <tcp_receive+0xf18>)
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	db0a      	blt.n	8010e02 <tcp_receive+0xefe>
 8010dec:	4b0b      	ldr	r3, [pc, #44]	; (8010e1c <tcp_receive+0xf18>)
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df4:	6879      	ldr	r1, [r7, #4]
 8010df6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010df8:	440b      	add	r3, r1
 8010dfa:	1ad3      	subs	r3, r2, r3
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	dd07      	ble.n	8010e12 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8b5b      	ldrh	r3, [r3, #26]
 8010e06:	f043 0302 	orr.w	r3, r3, #2
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010e10:	e7ff      	b.n	8010e12 <tcp_receive+0xf0e>
 8010e12:	bf00      	nop
 8010e14:	3750      	adds	r7, #80	; 0x50
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bdb0      	pop	{r4, r5, r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	2000be68 	.word	0x2000be68
 8010e20:	2000be48 	.word	0x2000be48
 8010e24:	2000be72 	.word	0x2000be72
 8010e28:	0801b138 	.word	0x0801b138
 8010e2c:	0801b4e0 	.word	0x0801b4e0
 8010e30:	0801b184 	.word	0x0801b184

08010e34 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010e3a:	4b15      	ldr	r3, [pc, #84]	; (8010e90 <tcp_get_next_optbyte+0x5c>)
 8010e3c:	881b      	ldrh	r3, [r3, #0]
 8010e3e:	1c5a      	adds	r2, r3, #1
 8010e40:	b291      	uxth	r1, r2
 8010e42:	4a13      	ldr	r2, [pc, #76]	; (8010e90 <tcp_get_next_optbyte+0x5c>)
 8010e44:	8011      	strh	r1, [r2, #0]
 8010e46:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010e48:	4b12      	ldr	r3, [pc, #72]	; (8010e94 <tcp_get_next_optbyte+0x60>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d004      	beq.n	8010e5a <tcp_get_next_optbyte+0x26>
 8010e50:	4b11      	ldr	r3, [pc, #68]	; (8010e98 <tcp_get_next_optbyte+0x64>)
 8010e52:	881b      	ldrh	r3, [r3, #0]
 8010e54:	88fa      	ldrh	r2, [r7, #6]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d208      	bcs.n	8010e6c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010e5a:	4b10      	ldr	r3, [pc, #64]	; (8010e9c <tcp_get_next_optbyte+0x68>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	3314      	adds	r3, #20
 8010e60:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010e62:	88fb      	ldrh	r3, [r7, #6]
 8010e64:	683a      	ldr	r2, [r7, #0]
 8010e66:	4413      	add	r3, r2
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	e00b      	b.n	8010e84 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010e6c:	88fb      	ldrh	r3, [r7, #6]
 8010e6e:	b2da      	uxtb	r2, r3
 8010e70:	4b09      	ldr	r3, [pc, #36]	; (8010e98 <tcp_get_next_optbyte+0x64>)
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010e7a:	4b06      	ldr	r3, [pc, #24]	; (8010e94 <tcp_get_next_optbyte+0x60>)
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	797b      	ldrb	r3, [r7, #5]
 8010e80:	4413      	add	r3, r2
 8010e82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	370c      	adds	r7, #12
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bc80      	pop	{r7}
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	2000be64 	.word	0x2000be64
 8010e94:	2000be60 	.word	0x2000be60
 8010e98:	2000be5e 	.word	0x2000be5e
 8010e9c:	2000be58 	.word	0x2000be58

08010ea0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d106      	bne.n	8010ebc <tcp_parseopt+0x1c>
 8010eae:	4b32      	ldr	r3, [pc, #200]	; (8010f78 <tcp_parseopt+0xd8>)
 8010eb0:	f240 727d 	movw	r2, #1917	; 0x77d
 8010eb4:	4931      	ldr	r1, [pc, #196]	; (8010f7c <tcp_parseopt+0xdc>)
 8010eb6:	4832      	ldr	r0, [pc, #200]	; (8010f80 <tcp_parseopt+0xe0>)
 8010eb8:	f007 fdc4 	bl	8018a44 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010ebc:	4b31      	ldr	r3, [pc, #196]	; (8010f84 <tcp_parseopt+0xe4>)
 8010ebe:	881b      	ldrh	r3, [r3, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d055      	beq.n	8010f70 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010ec4:	4b30      	ldr	r3, [pc, #192]	; (8010f88 <tcp_parseopt+0xe8>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	801a      	strh	r2, [r3, #0]
 8010eca:	e045      	b.n	8010f58 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010ecc:	f7ff ffb2 	bl	8010e34 <tcp_get_next_optbyte>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
 8010ed6:	2b02      	cmp	r3, #2
 8010ed8:	d006      	beq.n	8010ee8 <tcp_parseopt+0x48>
 8010eda:	2b02      	cmp	r3, #2
 8010edc:	dc2b      	bgt.n	8010f36 <tcp_parseopt+0x96>
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d041      	beq.n	8010f66 <tcp_parseopt+0xc6>
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d127      	bne.n	8010f36 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010ee6:	e037      	b.n	8010f58 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010ee8:	f7ff ffa4 	bl	8010e34 <tcp_get_next_optbyte>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b04      	cmp	r3, #4
 8010ef0:	d13b      	bne.n	8010f6a <tcp_parseopt+0xca>
 8010ef2:	4b25      	ldr	r3, [pc, #148]	; (8010f88 <tcp_parseopt+0xe8>)
 8010ef4:	881b      	ldrh	r3, [r3, #0]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	4a22      	ldr	r2, [pc, #136]	; (8010f84 <tcp_parseopt+0xe4>)
 8010efa:	8812      	ldrh	r2, [r2, #0]
 8010efc:	4293      	cmp	r3, r2
 8010efe:	da34      	bge.n	8010f6a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010f00:	f7ff ff98 	bl	8010e34 <tcp_get_next_optbyte>
 8010f04:	4603      	mov	r3, r0
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	021b      	lsls	r3, r3, #8
 8010f0a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010f0c:	f7ff ff92 	bl	8010e34 <tcp_get_next_optbyte>
 8010f10:	4603      	mov	r3, r0
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	89bb      	ldrh	r3, [r7, #12]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010f1a:	89bb      	ldrh	r3, [r7, #12]
 8010f1c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010f20:	d804      	bhi.n	8010f2c <tcp_parseopt+0x8c>
 8010f22:	89bb      	ldrh	r3, [r7, #12]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d001      	beq.n	8010f2c <tcp_parseopt+0x8c>
 8010f28:	89ba      	ldrh	r2, [r7, #12]
 8010f2a:	e001      	b.n	8010f30 <tcp_parseopt+0x90>
 8010f2c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010f34:	e010      	b.n	8010f58 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010f36:	f7ff ff7d 	bl	8010e34 <tcp_get_next_optbyte>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010f3e:	7afb      	ldrb	r3, [r7, #11]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d914      	bls.n	8010f6e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010f44:	7afb      	ldrb	r3, [r7, #11]
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	4b0f      	ldr	r3, [pc, #60]	; (8010f88 <tcp_parseopt+0xe8>)
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	3b02      	subs	r3, #2
 8010f52:	b29a      	uxth	r2, r3
 8010f54:	4b0c      	ldr	r3, [pc, #48]	; (8010f88 <tcp_parseopt+0xe8>)
 8010f56:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010f58:	4b0b      	ldr	r3, [pc, #44]	; (8010f88 <tcp_parseopt+0xe8>)
 8010f5a:	881a      	ldrh	r2, [r3, #0]
 8010f5c:	4b09      	ldr	r3, [pc, #36]	; (8010f84 <tcp_parseopt+0xe4>)
 8010f5e:	881b      	ldrh	r3, [r3, #0]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d3b3      	bcc.n	8010ecc <tcp_parseopt+0x2c>
 8010f64:	e004      	b.n	8010f70 <tcp_parseopt+0xd0>
          return;
 8010f66:	bf00      	nop
 8010f68:	e002      	b.n	8010f70 <tcp_parseopt+0xd0>
            return;
 8010f6a:	bf00      	nop
 8010f6c:	e000      	b.n	8010f70 <tcp_parseopt+0xd0>
            return;
 8010f6e:	bf00      	nop
      }
    }
  }
}
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	0801b138 	.word	0x0801b138
 8010f7c:	0801b59c 	.word	0x0801b59c
 8010f80:	0801b184 	.word	0x0801b184
 8010f84:	2000be5c 	.word	0x2000be5c
 8010f88:	2000be64 	.word	0x2000be64

08010f8c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010f90:	4b05      	ldr	r3, [pc, #20]	; (8010fa8 <tcp_trigger_input_pcb_close+0x1c>)
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	f043 0310 	orr.w	r3, r3, #16
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	4b03      	ldr	r3, [pc, #12]	; (8010fa8 <tcp_trigger_input_pcb_close+0x1c>)
 8010f9c:	701a      	strb	r2, [r3, #0]
}
 8010f9e:	bf00      	nop
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bc80      	pop	{r7}
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	2000be75 	.word	0x2000be75

08010fac <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00a      	beq.n	8010fd4 <tcp_route+0x28>
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	7a1b      	ldrb	r3, [r3, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d006      	beq.n	8010fd4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	7a1b      	ldrb	r3, [r3, #8]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fb f808 	bl	800bfe0 <netif_get_by_index>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	e003      	b.n	8010fdc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f005 fcbf 	bl	8016958 <ip4_route>
 8010fda:	4603      	mov	r3, r0
  }
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010fe4:	b590      	push	{r4, r7, lr}
 8010fe6:	b087      	sub	sp, #28
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	603b      	str	r3, [r7, #0]
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d105      	bne.n	8011006 <tcp_create_segment+0x22>
 8010ffa:	4b44      	ldr	r3, [pc, #272]	; (801110c <tcp_create_segment+0x128>)
 8010ffc:	22a3      	movs	r2, #163	; 0xa3
 8010ffe:	4944      	ldr	r1, [pc, #272]	; (8011110 <tcp_create_segment+0x12c>)
 8011000:	4844      	ldr	r0, [pc, #272]	; (8011114 <tcp_create_segment+0x130>)
 8011002:	f007 fd1f 	bl	8018a44 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d105      	bne.n	8011018 <tcp_create_segment+0x34>
 801100c:	4b3f      	ldr	r3, [pc, #252]	; (801110c <tcp_create_segment+0x128>)
 801100e:	22a4      	movs	r2, #164	; 0xa4
 8011010:	4941      	ldr	r1, [pc, #260]	; (8011118 <tcp_create_segment+0x134>)
 8011012:	4840      	ldr	r0, [pc, #256]	; (8011114 <tcp_create_segment+0x130>)
 8011014:	f007 fd16 	bl	8018a44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011018:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	b2db      	uxtb	r3, r3
 8011020:	f003 0304 	and.w	r3, r3, #4
 8011024:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011026:	2003      	movs	r0, #3
 8011028:	f7fa fcb2 	bl	800b990 <memp_malloc>
 801102c:	6138      	str	r0, [r7, #16]
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d104      	bne.n	801103e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011034:	68b8      	ldr	r0, [r7, #8]
 8011036:	f7fb fb5f 	bl	800c6f8 <pbuf_free>
    return NULL;
 801103a:	2300      	movs	r3, #0
 801103c:	e061      	b.n	8011102 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011044:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	2200      	movs	r2, #0
 801104a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	68ba      	ldr	r2, [r7, #8]
 8011050:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	891a      	ldrh	r2, [r3, #8]
 8011056:	7dfb      	ldrb	r3, [r7, #23]
 8011058:	b29b      	uxth	r3, r3
 801105a:	429a      	cmp	r2, r3
 801105c:	d205      	bcs.n	801106a <tcp_create_segment+0x86>
 801105e:	4b2b      	ldr	r3, [pc, #172]	; (801110c <tcp_create_segment+0x128>)
 8011060:	22b0      	movs	r2, #176	; 0xb0
 8011062:	492e      	ldr	r1, [pc, #184]	; (801111c <tcp_create_segment+0x138>)
 8011064:	482b      	ldr	r0, [pc, #172]	; (8011114 <tcp_create_segment+0x130>)
 8011066:	f007 fced 	bl	8018a44 <iprintf>
  seg->len = p->tot_len - optlen;
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	891a      	ldrh	r2, [r3, #8]
 801106e:	7dfb      	ldrb	r3, [r7, #23]
 8011070:	b29b      	uxth	r3, r3
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	b29a      	uxth	r2, r3
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801107a:	2114      	movs	r1, #20
 801107c:	68b8      	ldr	r0, [r7, #8]
 801107e:	f7fb faa5 	bl	800c5cc <pbuf_add_header>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d004      	beq.n	8011092 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011088:	6938      	ldr	r0, [r7, #16]
 801108a:	f7fd f81a 	bl	800e0c2 <tcp_seg_free>
    return NULL;
 801108e:	2300      	movs	r3, #0
 8011090:	e037      	b.n	8011102 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	8ada      	ldrh	r2, [r3, #22]
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	68dc      	ldr	r4, [r3, #12]
 80110a4:	4610      	mov	r0, r2
 80110a6:	f7f9 fec3 	bl	800ae30 <lwip_htons>
 80110aa:	4603      	mov	r3, r0
 80110ac:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	8b1a      	ldrh	r2, [r3, #24]
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	68dc      	ldr	r4, [r3, #12]
 80110b6:	4610      	mov	r0, r2
 80110b8:	f7f9 feba 	bl	800ae30 <lwip_htons>
 80110bc:	4603      	mov	r3, r0
 80110be:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	68dc      	ldr	r4, [r3, #12]
 80110c4:	6838      	ldr	r0, [r7, #0]
 80110c6:	f7f9 fec7 	bl	800ae58 <lwip_htonl>
 80110ca:	4603      	mov	r3, r0
 80110cc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80110ce:	7dfb      	ldrb	r3, [r7, #23]
 80110d0:	089b      	lsrs	r3, r3, #2
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	3305      	adds	r3, #5
 80110d8:	b29b      	uxth	r3, r3
 80110da:	031b      	lsls	r3, r3, #12
 80110dc:	b29a      	uxth	r2, r3
 80110de:	79fb      	ldrb	r3, [r7, #7]
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	4313      	orrs	r3, r2
 80110e4:	b29a      	uxth	r2, r3
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	68dc      	ldr	r4, [r3, #12]
 80110ea:	4610      	mov	r0, r2
 80110ec:	f7f9 fea0 	bl	800ae30 <lwip_htons>
 80110f0:	4603      	mov	r3, r0
 80110f2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	2200      	movs	r2, #0
 80110fa:	749a      	strb	r2, [r3, #18]
 80110fc:	2200      	movs	r2, #0
 80110fe:	74da      	strb	r2, [r3, #19]
  return seg;
 8011100:	693b      	ldr	r3, [r7, #16]
}
 8011102:	4618      	mov	r0, r3
 8011104:	371c      	adds	r7, #28
 8011106:	46bd      	mov	sp, r7
 8011108:	bd90      	pop	{r4, r7, pc}
 801110a:	bf00      	nop
 801110c:	0801b5b8 	.word	0x0801b5b8
 8011110:	0801b5ec 	.word	0x0801b5ec
 8011114:	0801b60c 	.word	0x0801b60c
 8011118:	0801b634 	.word	0x0801b634
 801111c:	0801b658 	.word	0x0801b658

08011120 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
 8011126:	607b      	str	r3, [r7, #4]
 8011128:	4603      	mov	r3, r0
 801112a:	73fb      	strb	r3, [r7, #15]
 801112c:	460b      	mov	r3, r1
 801112e:	81bb      	strh	r3, [r7, #12]
 8011130:	4613      	mov	r3, r2
 8011132:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011134:	89bb      	ldrh	r3, [r7, #12]
 8011136:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d105      	bne.n	801114a <tcp_pbuf_prealloc+0x2a>
 801113e:	4b30      	ldr	r3, [pc, #192]	; (8011200 <tcp_pbuf_prealloc+0xe0>)
 8011140:	22e8      	movs	r2, #232	; 0xe8
 8011142:	4930      	ldr	r1, [pc, #192]	; (8011204 <tcp_pbuf_prealloc+0xe4>)
 8011144:	4830      	ldr	r0, [pc, #192]	; (8011208 <tcp_pbuf_prealloc+0xe8>)
 8011146:	f007 fc7d 	bl	8018a44 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d105      	bne.n	801115c <tcp_pbuf_prealloc+0x3c>
 8011150:	4b2b      	ldr	r3, [pc, #172]	; (8011200 <tcp_pbuf_prealloc+0xe0>)
 8011152:	22e9      	movs	r2, #233	; 0xe9
 8011154:	492d      	ldr	r1, [pc, #180]	; (801120c <tcp_pbuf_prealloc+0xec>)
 8011156:	482c      	ldr	r0, [pc, #176]	; (8011208 <tcp_pbuf_prealloc+0xe8>)
 8011158:	f007 fc74 	bl	8018a44 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801115c:	89ba      	ldrh	r2, [r7, #12]
 801115e:	897b      	ldrh	r3, [r7, #10]
 8011160:	429a      	cmp	r2, r3
 8011162:	d221      	bcs.n	80111a8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011164:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011168:	f003 0302 	and.w	r3, r3, #2
 801116c:	2b00      	cmp	r3, #0
 801116e:	d111      	bne.n	8011194 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	8b5b      	ldrh	r3, [r3, #26]
 8011174:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011178:	2b00      	cmp	r3, #0
 801117a:	d115      	bne.n	80111a8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801117c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011180:	2b00      	cmp	r3, #0
 8011182:	d007      	beq.n	8011194 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011184:	6a3b      	ldr	r3, [r7, #32]
 8011186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011188:	2b00      	cmp	r3, #0
 801118a:	d103      	bne.n	8011194 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801118c:	6a3b      	ldr	r3, [r7, #32]
 801118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011190:	2b00      	cmp	r3, #0
 8011192:	d009      	beq.n	80111a8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011194:	89bb      	ldrh	r3, [r7, #12]
 8011196:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801119a:	f023 0203 	bic.w	r2, r3, #3
 801119e:	897b      	ldrh	r3, [r7, #10]
 80111a0:	4293      	cmp	r3, r2
 80111a2:	bf28      	it	cs
 80111a4:	4613      	movcs	r3, r2
 80111a6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80111a8:	8af9      	ldrh	r1, [r7, #22]
 80111aa:	7bfb      	ldrb	r3, [r7, #15]
 80111ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fa ffbd 	bl	800c130 <pbuf_alloc>
 80111b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d101      	bne.n	80111c2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80111be:	2300      	movs	r3, #0
 80111c0:	e019      	b.n	80111f6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d006      	beq.n	80111d8 <tcp_pbuf_prealloc+0xb8>
 80111ca:	4b0d      	ldr	r3, [pc, #52]	; (8011200 <tcp_pbuf_prealloc+0xe0>)
 80111cc:	f240 120b 	movw	r2, #267	; 0x10b
 80111d0:	490f      	ldr	r1, [pc, #60]	; (8011210 <tcp_pbuf_prealloc+0xf0>)
 80111d2:	480d      	ldr	r0, [pc, #52]	; (8011208 <tcp_pbuf_prealloc+0xe8>)
 80111d4:	f007 fc36 	bl	8018a44 <iprintf>
  *oversize = p->len - length;
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	895a      	ldrh	r2, [r3, #10]
 80111dc:	89bb      	ldrh	r3, [r7, #12]
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	89ba      	ldrh	r2, [r7, #12]
 80111ea:	811a      	strh	r2, [r3, #8]
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	891a      	ldrh	r2, [r3, #8]
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	815a      	strh	r2, [r3, #10]
  return p;
 80111f4:	693b      	ldr	r3, [r7, #16]
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3718      	adds	r7, #24
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	0801b5b8 	.word	0x0801b5b8
 8011204:	0801b670 	.word	0x0801b670
 8011208:	0801b60c 	.word	0x0801b60c
 801120c:	0801b694 	.word	0x0801b694
 8011210:	0801b6b4 	.word	0x0801b6b4

08011214 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	460b      	mov	r3, r1
 801121e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d106      	bne.n	8011234 <tcp_write_checks+0x20>
 8011226:	4b33      	ldr	r3, [pc, #204]	; (80112f4 <tcp_write_checks+0xe0>)
 8011228:	f240 1233 	movw	r2, #307	; 0x133
 801122c:	4932      	ldr	r1, [pc, #200]	; (80112f8 <tcp_write_checks+0xe4>)
 801122e:	4833      	ldr	r0, [pc, #204]	; (80112fc <tcp_write_checks+0xe8>)
 8011230:	f007 fc08 	bl	8018a44 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	7d1b      	ldrb	r3, [r3, #20]
 8011238:	2b04      	cmp	r3, #4
 801123a:	d00e      	beq.n	801125a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011240:	2b07      	cmp	r3, #7
 8011242:	d00a      	beq.n	801125a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011248:	2b02      	cmp	r3, #2
 801124a:	d006      	beq.n	801125a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011250:	2b03      	cmp	r3, #3
 8011252:	d002      	beq.n	801125a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011254:	f06f 030a 	mvn.w	r3, #10
 8011258:	e048      	b.n	80112ec <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801125a:	887b      	ldrh	r3, [r7, #2]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <tcp_write_checks+0x50>
    return ERR_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	e043      	b.n	80112ec <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801126a:	887a      	ldrh	r2, [r7, #2]
 801126c:	429a      	cmp	r2, r3
 801126e:	d909      	bls.n	8011284 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	8b5b      	ldrh	r3, [r3, #26]
 8011274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801127e:	f04f 33ff 	mov.w	r3, #4294967295
 8011282:	e033      	b.n	80112ec <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801128a:	2b08      	cmp	r3, #8
 801128c:	d909      	bls.n	80112a2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	8b5b      	ldrh	r3, [r3, #26]
 8011292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011296:	b29a      	uxth	r2, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801129c:	f04f 33ff 	mov.w	r3, #4294967295
 80112a0:	e024      	b.n	80112ec <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00f      	beq.n	80112cc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d11a      	bne.n	80112ea <tcp_write_checks+0xd6>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d116      	bne.n	80112ea <tcp_write_checks+0xd6>
 80112bc:	4b0d      	ldr	r3, [pc, #52]	; (80112f4 <tcp_write_checks+0xe0>)
 80112be:	f240 1255 	movw	r2, #341	; 0x155
 80112c2:	490f      	ldr	r1, [pc, #60]	; (8011300 <tcp_write_checks+0xec>)
 80112c4:	480d      	ldr	r0, [pc, #52]	; (80112fc <tcp_write_checks+0xe8>)
 80112c6:	f007 fbbd 	bl	8018a44 <iprintf>
 80112ca:	e00e      	b.n	80112ea <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d103      	bne.n	80112dc <tcp_write_checks+0xc8>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d006      	beq.n	80112ea <tcp_write_checks+0xd6>
 80112dc:	4b05      	ldr	r3, [pc, #20]	; (80112f4 <tcp_write_checks+0xe0>)
 80112de:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80112e2:	4908      	ldr	r1, [pc, #32]	; (8011304 <tcp_write_checks+0xf0>)
 80112e4:	4805      	ldr	r0, [pc, #20]	; (80112fc <tcp_write_checks+0xe8>)
 80112e6:	f007 fbad 	bl	8018a44 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80112ea:	2300      	movs	r3, #0
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	0801b5b8 	.word	0x0801b5b8
 80112f8:	0801b6c8 	.word	0x0801b6c8
 80112fc:	0801b60c 	.word	0x0801b60c
 8011300:	0801b6e8 	.word	0x0801b6e8
 8011304:	0801b724 	.word	0x0801b724

08011308 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011308:	b590      	push	{r4, r7, lr}
 801130a:	b09b      	sub	sp, #108	; 0x6c
 801130c:	af04      	add	r7, sp, #16
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	4611      	mov	r1, r2
 8011314:	461a      	mov	r2, r3
 8011316:	460b      	mov	r3, r1
 8011318:	80fb      	strh	r3, [r7, #6]
 801131a:	4613      	mov	r3, r2
 801131c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801131e:	2300      	movs	r3, #0
 8011320:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011322:	2300      	movs	r3, #0
 8011324:	653b      	str	r3, [r7, #80]	; 0x50
 8011326:	2300      	movs	r3, #0
 8011328:	64fb      	str	r3, [r7, #76]	; 0x4c
 801132a:	2300      	movs	r3, #0
 801132c:	64bb      	str	r3, [r7, #72]	; 0x48
 801132e:	2300      	movs	r3, #0
 8011330:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011332:	2300      	movs	r3, #0
 8011334:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801133e:	2300      	movs	r3, #0
 8011340:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011342:	2300      	movs	r3, #0
 8011344:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011346:	2300      	movs	r3, #0
 8011348:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d109      	bne.n	8011364 <tcp_write+0x5c>
 8011350:	4ba4      	ldr	r3, [pc, #656]	; (80115e4 <tcp_write+0x2dc>)
 8011352:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011356:	49a4      	ldr	r1, [pc, #656]	; (80115e8 <tcp_write+0x2e0>)
 8011358:	48a4      	ldr	r0, [pc, #656]	; (80115ec <tcp_write+0x2e4>)
 801135a:	f007 fb73 	bl	8018a44 <iprintf>
 801135e:	f06f 030f 	mvn.w	r3, #15
 8011362:	e32a      	b.n	80119ba <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801136a:	085b      	lsrs	r3, r3, #1
 801136c:	b29a      	uxth	r2, r3
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011372:	4293      	cmp	r3, r2
 8011374:	bf28      	it	cs
 8011376:	4613      	movcs	r3, r2
 8011378:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801137a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801137c:	2b00      	cmp	r3, #0
 801137e:	d102      	bne.n	8011386 <tcp_write+0x7e>
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011384:	e000      	b.n	8011388 <tcp_write+0x80>
 8011386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011388:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d109      	bne.n	80113a4 <tcp_write+0x9c>
 8011390:	4b94      	ldr	r3, [pc, #592]	; (80115e4 <tcp_write+0x2dc>)
 8011392:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011396:	4996      	ldr	r1, [pc, #600]	; (80115f0 <tcp_write+0x2e8>)
 8011398:	4894      	ldr	r0, [pc, #592]	; (80115ec <tcp_write+0x2e4>)
 801139a:	f007 fb53 	bl	8018a44 <iprintf>
 801139e:	f06f 030f 	mvn.w	r3, #15
 80113a2:	e30a      	b.n	80119ba <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80113a4:	88fb      	ldrh	r3, [r7, #6]
 80113a6:	4619      	mov	r1, r3
 80113a8:	68f8      	ldr	r0, [r7, #12]
 80113aa:	f7ff ff33 	bl	8011214 <tcp_write_checks>
 80113ae:	4603      	mov	r3, r0
 80113b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80113b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d002      	beq.n	80113c2 <tcp_write+0xba>
    return err;
 80113bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80113c0:	e2fb      	b.n	80119ba <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80113cc:	2300      	movs	r3, #0
 80113ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	f000 80f6 	beq.w	80115c8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113e0:	653b      	str	r3, [r7, #80]	; 0x50
 80113e2:	e002      	b.n	80113ea <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80113e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80113ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1f8      	bne.n	80113e4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80113f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f4:	7a9b      	ldrb	r3, [r3, #10]
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	f003 0304 	and.w	r3, r3, #4
 80113fe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011400:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011404:	891b      	ldrh	r3, [r3, #8]
 8011406:	4619      	mov	r1, r3
 8011408:	8c3b      	ldrh	r3, [r7, #32]
 801140a:	440b      	add	r3, r1
 801140c:	429a      	cmp	r2, r3
 801140e:	da06      	bge.n	801141e <tcp_write+0x116>
 8011410:	4b74      	ldr	r3, [pc, #464]	; (80115e4 <tcp_write+0x2dc>)
 8011412:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011416:	4977      	ldr	r1, [pc, #476]	; (80115f4 <tcp_write+0x2ec>)
 8011418:	4874      	ldr	r0, [pc, #464]	; (80115ec <tcp_write+0x2e4>)
 801141a:	f007 fb13 	bl	8018a44 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801141e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011420:	891a      	ldrh	r2, [r3, #8]
 8011422:	8c3b      	ldrh	r3, [r7, #32]
 8011424:	4413      	add	r3, r2
 8011426:	b29b      	uxth	r3, r3
 8011428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801142a:	1ad3      	subs	r3, r2, r3
 801142c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011434:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011436:	8a7b      	ldrh	r3, [r7, #18]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d026      	beq.n	801148a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801143c:	8a7b      	ldrh	r3, [r7, #18]
 801143e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011440:	429a      	cmp	r2, r3
 8011442:	d206      	bcs.n	8011452 <tcp_write+0x14a>
 8011444:	4b67      	ldr	r3, [pc, #412]	; (80115e4 <tcp_write+0x2dc>)
 8011446:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801144a:	496b      	ldr	r1, [pc, #428]	; (80115f8 <tcp_write+0x2f0>)
 801144c:	4867      	ldr	r0, [pc, #412]	; (80115ec <tcp_write+0x2e4>)
 801144e:	f007 faf9 	bl	8018a44 <iprintf>
      seg = last_unsent;
 8011452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011454:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011456:	8a7b      	ldrh	r3, [r7, #18]
 8011458:	88fa      	ldrh	r2, [r7, #6]
 801145a:	4293      	cmp	r3, r2
 801145c:	bf28      	it	cs
 801145e:	4613      	movcs	r3, r2
 8011460:	b29b      	uxth	r3, r3
 8011462:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011464:	4293      	cmp	r3, r2
 8011466:	bf28      	it	cs
 8011468:	4613      	movcs	r3, r2
 801146a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801146c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011470:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011472:	4413      	add	r3, r2
 8011474:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011478:	8a7a      	ldrh	r2, [r7, #18]
 801147a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	b29b      	uxth	r3, r3
 8011480:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011482:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011484:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011486:	1ad3      	subs	r3, r2, r3
 8011488:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801148a:	8a7b      	ldrh	r3, [r7, #18]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00b      	beq.n	80114a8 <tcp_write+0x1a0>
 8011490:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011494:	88fb      	ldrh	r3, [r7, #6]
 8011496:	429a      	cmp	r2, r3
 8011498:	d006      	beq.n	80114a8 <tcp_write+0x1a0>
 801149a:	4b52      	ldr	r3, [pc, #328]	; (80115e4 <tcp_write+0x2dc>)
 801149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80114a0:	4956      	ldr	r1, [pc, #344]	; (80115fc <tcp_write+0x2f4>)
 80114a2:	4852      	ldr	r0, [pc, #328]	; (80115ec <tcp_write+0x2e4>)
 80114a4:	f007 face 	bl	8018a44 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80114a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114ac:	88fb      	ldrh	r3, [r7, #6]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	f080 8167 	bcs.w	8011782 <tcp_write+0x47a>
 80114b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f000 8163 	beq.w	8011782 <tcp_write+0x47a>
 80114bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114be:	891b      	ldrh	r3, [r3, #8]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f000 815e 	beq.w	8011782 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80114c6:	88fa      	ldrh	r2, [r7, #6]
 80114c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114cc:	1ad2      	subs	r2, r2, r3
 80114ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80114d0:	4293      	cmp	r3, r2
 80114d2:	bfa8      	it	ge
 80114d4:	4613      	movge	r3, r2
 80114d6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80114d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114da:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80114dc:	797b      	ldrb	r3, [r7, #5]
 80114de:	f003 0301 	and.w	r3, r3, #1
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d027      	beq.n	8011536 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80114e6:	f107 0012 	add.w	r0, r7, #18
 80114ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80114ec:	8bf9      	ldrh	r1, [r7, #30]
 80114ee:	2301      	movs	r3, #1
 80114f0:	9302      	str	r3, [sp, #8]
 80114f2:	797b      	ldrb	r3, [r7, #5]
 80114f4:	9301      	str	r3, [sp, #4]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	4603      	mov	r3, r0
 80114fc:	2000      	movs	r0, #0
 80114fe:	f7ff fe0f 	bl	8011120 <tcp_pbuf_prealloc>
 8011502:	6578      	str	r0, [r7, #84]	; 0x54
 8011504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011506:	2b00      	cmp	r3, #0
 8011508:	f000 8225 	beq.w	8011956 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801150c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801150e:	6858      	ldr	r0, [r3, #4]
 8011510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011514:	68ba      	ldr	r2, [r7, #8]
 8011516:	4413      	add	r3, r2
 8011518:	8bfa      	ldrh	r2, [r7, #30]
 801151a:	4619      	mov	r1, r3
 801151c:	f007 f99e 	bl	801885c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011520:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011522:	f7fb f977 	bl	800c814 <pbuf_clen>
 8011526:	4603      	mov	r3, r0
 8011528:	461a      	mov	r2, r3
 801152a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801152e:	4413      	add	r3, r2
 8011530:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011534:	e041      	b.n	80115ba <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	637b      	str	r3, [r7, #52]	; 0x34
 801153c:	e002      	b.n	8011544 <tcp_write+0x23c>
 801153e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	637b      	str	r3, [r7, #52]	; 0x34
 8011544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1f8      	bne.n	801153e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801154e:	7b1b      	ldrb	r3, [r3, #12]
 8011550:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d115      	bne.n	8011584 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801155e:	8952      	ldrh	r2, [r2, #10]
 8011560:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011562:	68ba      	ldr	r2, [r7, #8]
 8011564:	429a      	cmp	r2, r3
 8011566:	d10d      	bne.n	8011584 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011568:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801156c:	2b00      	cmp	r3, #0
 801156e:	d006      	beq.n	801157e <tcp_write+0x276>
 8011570:	4b1c      	ldr	r3, [pc, #112]	; (80115e4 <tcp_write+0x2dc>)
 8011572:	f240 2231 	movw	r2, #561	; 0x231
 8011576:	4922      	ldr	r1, [pc, #136]	; (8011600 <tcp_write+0x2f8>)
 8011578:	481c      	ldr	r0, [pc, #112]	; (80115ec <tcp_write+0x2e4>)
 801157a:	f007 fa63 	bl	8018a44 <iprintf>
          extendlen = seglen;
 801157e:	8bfb      	ldrh	r3, [r7, #30]
 8011580:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011582:	e01a      	b.n	80115ba <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011584:	8bfb      	ldrh	r3, [r7, #30]
 8011586:	2201      	movs	r2, #1
 8011588:	4619      	mov	r1, r3
 801158a:	2000      	movs	r0, #0
 801158c:	f7fa fdd0 	bl	800c130 <pbuf_alloc>
 8011590:	6578      	str	r0, [r7, #84]	; 0x54
 8011592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011594:	2b00      	cmp	r3, #0
 8011596:	f000 81e0 	beq.w	801195a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801159a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	441a      	add	r2, r3
 80115a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115a4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80115a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80115a8:	f7fb f934 	bl	800c814 <pbuf_clen>
 80115ac:	4603      	mov	r3, r0
 80115ae:	461a      	mov	r2, r3
 80115b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80115b4:	4413      	add	r3, r2
 80115b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80115ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115be:	8bfb      	ldrh	r3, [r7, #30]
 80115c0:	4413      	add	r3, r2
 80115c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80115c6:	e0dc      	b.n	8011782 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	f000 80d7 	beq.w	8011782 <tcp_write+0x47a>
 80115d4:	4b03      	ldr	r3, [pc, #12]	; (80115e4 <tcp_write+0x2dc>)
 80115d6:	f240 224a 	movw	r2, #586	; 0x24a
 80115da:	490a      	ldr	r1, [pc, #40]	; (8011604 <tcp_write+0x2fc>)
 80115dc:	4803      	ldr	r0, [pc, #12]	; (80115ec <tcp_write+0x2e4>)
 80115de:	f007 fa31 	bl	8018a44 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80115e2:	e0ce      	b.n	8011782 <tcp_write+0x47a>
 80115e4:	0801b5b8 	.word	0x0801b5b8
 80115e8:	0801b758 	.word	0x0801b758
 80115ec:	0801b60c 	.word	0x0801b60c
 80115f0:	0801b770 	.word	0x0801b770
 80115f4:	0801b7a4 	.word	0x0801b7a4
 80115f8:	0801b7bc 	.word	0x0801b7bc
 80115fc:	0801b7dc 	.word	0x0801b7dc
 8011600:	0801b7fc 	.word	0x0801b7fc
 8011604:	0801b828 	.word	0x0801b828
    struct pbuf *p;
    u16_t left = len - pos;
 8011608:	88fa      	ldrh	r2, [r7, #6]
 801160a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801160e:	1ad3      	subs	r3, r2, r3
 8011610:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011612:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011616:	b29b      	uxth	r3, r3
 8011618:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801161a:	1ad3      	subs	r3, r2, r3
 801161c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801161e:	8b7a      	ldrh	r2, [r7, #26]
 8011620:	8bbb      	ldrh	r3, [r7, #28]
 8011622:	4293      	cmp	r3, r2
 8011624:	bf28      	it	cs
 8011626:	4613      	movcs	r3, r2
 8011628:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801162a:	797b      	ldrb	r3, [r7, #5]
 801162c:	f003 0301 	and.w	r3, r3, #1
 8011630:	2b00      	cmp	r3, #0
 8011632:	d036      	beq.n	80116a2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011634:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011638:	b29a      	uxth	r2, r3
 801163a:	8b3b      	ldrh	r3, [r7, #24]
 801163c:	4413      	add	r3, r2
 801163e:	b299      	uxth	r1, r3
 8011640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011642:	2b00      	cmp	r3, #0
 8011644:	bf0c      	ite	eq
 8011646:	2301      	moveq	r3, #1
 8011648:	2300      	movne	r3, #0
 801164a:	b2db      	uxtb	r3, r3
 801164c:	f107 0012 	add.w	r0, r7, #18
 8011650:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011652:	9302      	str	r3, [sp, #8]
 8011654:	797b      	ldrb	r3, [r7, #5]
 8011656:	9301      	str	r3, [sp, #4]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	4603      	mov	r3, r0
 801165e:	2036      	movs	r0, #54	; 0x36
 8011660:	f7ff fd5e 	bl	8011120 <tcp_pbuf_prealloc>
 8011664:	6338      	str	r0, [r7, #48]	; 0x30
 8011666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011668:	2b00      	cmp	r3, #0
 801166a:	f000 8178 	beq.w	801195e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011670:	895b      	ldrh	r3, [r3, #10]
 8011672:	8b3a      	ldrh	r2, [r7, #24]
 8011674:	429a      	cmp	r2, r3
 8011676:	d906      	bls.n	8011686 <tcp_write+0x37e>
 8011678:	4b8c      	ldr	r3, [pc, #560]	; (80118ac <tcp_write+0x5a4>)
 801167a:	f240 2266 	movw	r2, #614	; 0x266
 801167e:	498c      	ldr	r1, [pc, #560]	; (80118b0 <tcp_write+0x5a8>)
 8011680:	488c      	ldr	r0, [pc, #560]	; (80118b4 <tcp_write+0x5ac>)
 8011682:	f007 f9df 	bl	8018a44 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011688:	685a      	ldr	r2, [r3, #4]
 801168a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801168e:	18d0      	adds	r0, r2, r3
 8011690:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011694:	68ba      	ldr	r2, [r7, #8]
 8011696:	4413      	add	r3, r2
 8011698:	8b3a      	ldrh	r2, [r7, #24]
 801169a:	4619      	mov	r1, r3
 801169c:	f007 f8de 	bl	801885c <memcpy>
 80116a0:	e02f      	b.n	8011702 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80116a2:	8a7b      	ldrh	r3, [r7, #18]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d006      	beq.n	80116b6 <tcp_write+0x3ae>
 80116a8:	4b80      	ldr	r3, [pc, #512]	; (80118ac <tcp_write+0x5a4>)
 80116aa:	f240 2271 	movw	r2, #625	; 0x271
 80116ae:	4982      	ldr	r1, [pc, #520]	; (80118b8 <tcp_write+0x5b0>)
 80116b0:	4880      	ldr	r0, [pc, #512]	; (80118b4 <tcp_write+0x5ac>)
 80116b2:	f007 f9c7 	bl	8018a44 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80116b6:	8b3b      	ldrh	r3, [r7, #24]
 80116b8:	2201      	movs	r2, #1
 80116ba:	4619      	mov	r1, r3
 80116bc:	2036      	movs	r0, #54	; 0x36
 80116be:	f7fa fd37 	bl	800c130 <pbuf_alloc>
 80116c2:	6178      	str	r0, [r7, #20]
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f000 814b 	beq.w	8011962 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80116cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116d0:	68ba      	ldr	r2, [r7, #8]
 80116d2:	441a      	add	r2, r3
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80116d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80116dc:	b29b      	uxth	r3, r3
 80116de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116e2:	4619      	mov	r1, r3
 80116e4:	2036      	movs	r0, #54	; 0x36
 80116e6:	f7fa fd23 	bl	800c130 <pbuf_alloc>
 80116ea:	6338      	str	r0, [r7, #48]	; 0x30
 80116ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d103      	bne.n	80116fa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80116f2:	6978      	ldr	r0, [r7, #20]
 80116f4:	f7fb f800 	bl	800c6f8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80116f8:	e136      	b.n	8011968 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80116fa:	6979      	ldr	r1, [r7, #20]
 80116fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116fe:	f7fb f8c7 	bl	800c890 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011704:	f7fb f886 	bl	800c814 <pbuf_clen>
 8011708:	4603      	mov	r3, r0
 801170a:	461a      	mov	r2, r3
 801170c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011710:	4413      	add	r3, r2
 8011712:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011716:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801171a:	2b09      	cmp	r3, #9
 801171c:	d903      	bls.n	8011726 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801171e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011720:	f7fa ffea 	bl	800c6f8 <pbuf_free>
      goto memerr;
 8011724:	e120      	b.n	8011968 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801172a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801172e:	441a      	add	r2, r3
 8011730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	4613      	mov	r3, r2
 8011738:	2200      	movs	r2, #0
 801173a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f7ff fc51 	bl	8010fe4 <tcp_create_segment>
 8011742:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011746:	2b00      	cmp	r3, #0
 8011748:	f000 810d 	beq.w	8011966 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801174c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801174e:	2b00      	cmp	r3, #0
 8011750:	d102      	bne.n	8011758 <tcp_write+0x450>
      queue = seg;
 8011752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011754:	647b      	str	r3, [r7, #68]	; 0x44
 8011756:	e00c      	b.n	8011772 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801175a:	2b00      	cmp	r3, #0
 801175c:	d106      	bne.n	801176c <tcp_write+0x464>
 801175e:	4b53      	ldr	r3, [pc, #332]	; (80118ac <tcp_write+0x5a4>)
 8011760:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011764:	4955      	ldr	r1, [pc, #340]	; (80118bc <tcp_write+0x5b4>)
 8011766:	4853      	ldr	r0, [pc, #332]	; (80118b4 <tcp_write+0x5ac>)
 8011768:	f007 f96c 	bl	8018a44 <iprintf>
      prev_seg->next = seg;
 801176c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801176e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011770:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011774:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011776:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801177a:	8b3b      	ldrh	r3, [r7, #24]
 801177c:	4413      	add	r3, r2
 801177e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011782:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011786:	88fb      	ldrh	r3, [r7, #6]
 8011788:	429a      	cmp	r2, r3
 801178a:	f4ff af3d 	bcc.w	8011608 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801178e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011790:	2b00      	cmp	r3, #0
 8011792:	d02c      	beq.n	80117ee <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	62fb      	str	r3, [r7, #44]	; 0x2c
 801179a:	e01e      	b.n	80117da <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179e:	891a      	ldrh	r2, [r3, #8]
 80117a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80117a2:	4413      	add	r3, r2
 80117a4:	b29a      	uxth	r2, r3
 80117a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80117aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d110      	bne.n	80117d4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80117b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117b8:	8952      	ldrh	r2, [r2, #10]
 80117ba:	4413      	add	r3, r2
 80117bc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80117be:	68b9      	ldr	r1, [r7, #8]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f007 f84b 	bl	801885c <memcpy>
        p->len += oversize_used;
 80117c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c8:	895a      	ldrh	r2, [r3, #10]
 80117ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80117cc:	4413      	add	r3, r2
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80117d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1dd      	bne.n	801179c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80117e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117e2:	891a      	ldrh	r2, [r3, #8]
 80117e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80117e6:	4413      	add	r3, r2
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ec:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80117ee:	8a7a      	ldrh	r2, [r7, #18]
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80117f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d018      	beq.n	801182e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80117fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d106      	bne.n	8011810 <tcp_write+0x508>
 8011802:	4b2a      	ldr	r3, [pc, #168]	; (80118ac <tcp_write+0x5a4>)
 8011804:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011808:	492d      	ldr	r1, [pc, #180]	; (80118c0 <tcp_write+0x5b8>)
 801180a:	482a      	ldr	r0, [pc, #168]	; (80118b4 <tcp_write+0x5ac>)
 801180c:	f007 f91a 	bl	8018a44 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011816:	4618      	mov	r0, r3
 8011818:	f7fb f83a 	bl	800c890 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801181e:	891a      	ldrh	r2, [r3, #8]
 8011820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011822:	891b      	ldrh	r3, [r3, #8]
 8011824:	4413      	add	r3, r2
 8011826:	b29a      	uxth	r2, r3
 8011828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801182a:	811a      	strh	r2, [r3, #8]
 801182c:	e037      	b.n	801189e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801182e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011830:	2b00      	cmp	r3, #0
 8011832:	d034      	beq.n	801189e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011836:	2b00      	cmp	r3, #0
 8011838:	d003      	beq.n	8011842 <tcp_write+0x53a>
 801183a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d106      	bne.n	8011850 <tcp_write+0x548>
 8011842:	4b1a      	ldr	r3, [pc, #104]	; (80118ac <tcp_write+0x5a4>)
 8011844:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011848:	491e      	ldr	r1, [pc, #120]	; (80118c4 <tcp_write+0x5bc>)
 801184a:	481a      	ldr	r0, [pc, #104]	; (80118b4 <tcp_write+0x5ac>)
 801184c:	f007 f8fa 	bl	8018a44 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	62bb      	str	r3, [r7, #40]	; 0x28
 8011856:	e009      	b.n	801186c <tcp_write+0x564>
      p->tot_len += extendlen;
 8011858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185a:	891a      	ldrh	r2, [r3, #8]
 801185c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801185e:	4413      	add	r3, r2
 8011860:	b29a      	uxth	r2, r3
 8011862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011864:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	62bb      	str	r3, [r7, #40]	; 0x28
 801186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1f1      	bne.n	8011858 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011876:	891a      	ldrh	r2, [r3, #8]
 8011878:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801187a:	4413      	add	r3, r2
 801187c:	b29a      	uxth	r2, r3
 801187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011880:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011884:	895a      	ldrh	r2, [r3, #10]
 8011886:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011888:	4413      	add	r3, r2
 801188a:	b29a      	uxth	r2, r3
 801188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011892:	891a      	ldrh	r2, [r3, #8]
 8011894:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011896:	4413      	add	r3, r2
 8011898:	b29a      	uxth	r2, r3
 801189a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801189c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801189e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d111      	bne.n	80118c8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80118aa:	e010      	b.n	80118ce <tcp_write+0x5c6>
 80118ac:	0801b5b8 	.word	0x0801b5b8
 80118b0:	0801b858 	.word	0x0801b858
 80118b4:	0801b60c 	.word	0x0801b60c
 80118b8:	0801b898 	.word	0x0801b898
 80118bc:	0801b8a8 	.word	0x0801b8a8
 80118c0:	0801b8bc 	.word	0x0801b8bc
 80118c4:	0801b8f4 	.word	0x0801b8f4
  } else {
    last_unsent->next = queue;
 80118c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118cc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80118d2:	88fb      	ldrh	r3, [r7, #6]
 80118d4:	441a      	add	r2, r3
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80118e0:	88fb      	ldrh	r3, [r7, #6]
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80118f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00e      	beq.n	801191e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011904:	2b00      	cmp	r3, #0
 8011906:	d10a      	bne.n	801191e <tcp_write+0x616>
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801190c:	2b00      	cmp	r3, #0
 801190e:	d106      	bne.n	801191e <tcp_write+0x616>
 8011910:	4b2c      	ldr	r3, [pc, #176]	; (80119c4 <tcp_write+0x6bc>)
 8011912:	f240 3212 	movw	r2, #786	; 0x312
 8011916:	492c      	ldr	r1, [pc, #176]	; (80119c8 <tcp_write+0x6c0>)
 8011918:	482c      	ldr	r0, [pc, #176]	; (80119cc <tcp_write+0x6c4>)
 801191a:	f007 f893 	bl	8018a44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801191e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011920:	2b00      	cmp	r3, #0
 8011922:	d016      	beq.n	8011952 <tcp_write+0x64a>
 8011924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d012      	beq.n	8011952 <tcp_write+0x64a>
 801192c:	797b      	ldrb	r3, [r7, #5]
 801192e:	f003 0302 	and.w	r3, r3, #2
 8011932:	2b00      	cmp	r3, #0
 8011934:	d10d      	bne.n	8011952 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	899b      	ldrh	r3, [r3, #12]
 801193c:	b29c      	uxth	r4, r3
 801193e:	2008      	movs	r0, #8
 8011940:	f7f9 fa76 	bl	800ae30 <lwip_htons>
 8011944:	4603      	mov	r3, r0
 8011946:	461a      	mov	r2, r3
 8011948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	4322      	orrs	r2, r4
 801194e:	b292      	uxth	r2, r2
 8011950:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011952:	2300      	movs	r3, #0
 8011954:	e031      	b.n	80119ba <tcp_write+0x6b2>
          goto memerr;
 8011956:	bf00      	nop
 8011958:	e006      	b.n	8011968 <tcp_write+0x660>
            goto memerr;
 801195a:	bf00      	nop
 801195c:	e004      	b.n	8011968 <tcp_write+0x660>
        goto memerr;
 801195e:	bf00      	nop
 8011960:	e002      	b.n	8011968 <tcp_write+0x660>
        goto memerr;
 8011962:	bf00      	nop
 8011964:	e000      	b.n	8011968 <tcp_write+0x660>
      goto memerr;
 8011966:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	8b5b      	ldrh	r3, [r3, #26]
 801196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011970:	b29a      	uxth	r2, r3
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801197c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801197e:	f7fa febb 	bl	800c6f8 <pbuf_free>
  }
  if (queue != NULL) {
 8011982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011984:	2b00      	cmp	r3, #0
 8011986:	d002      	beq.n	801198e <tcp_write+0x686>
    tcp_segs_free(queue);
 8011988:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801198a:	f7fc fb85 	bl	800e098 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00e      	beq.n	80119b6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801199c:	2b00      	cmp	r3, #0
 801199e:	d10a      	bne.n	80119b6 <tcp_write+0x6ae>
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d106      	bne.n	80119b6 <tcp_write+0x6ae>
 80119a8:	4b06      	ldr	r3, [pc, #24]	; (80119c4 <tcp_write+0x6bc>)
 80119aa:	f240 3227 	movw	r2, #807	; 0x327
 80119ae:	4906      	ldr	r1, [pc, #24]	; (80119c8 <tcp_write+0x6c0>)
 80119b0:	4806      	ldr	r0, [pc, #24]	; (80119cc <tcp_write+0x6c4>)
 80119b2:	f007 f847 	bl	8018a44 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80119b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	375c      	adds	r7, #92	; 0x5c
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd90      	pop	{r4, r7, pc}
 80119c2:	bf00      	nop
 80119c4:	0801b5b8 	.word	0x0801b5b8
 80119c8:	0801b92c 	.word	0x0801b92c
 80119cc:	0801b60c 	.word	0x0801b60c

080119d0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80119d0:	b590      	push	{r4, r7, lr}
 80119d2:	b08b      	sub	sp, #44	; 0x2c
 80119d4:	af02      	add	r7, sp, #8
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	460b      	mov	r3, r1
 80119da:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80119dc:	2300      	movs	r3, #0
 80119de:	61fb      	str	r3, [r7, #28]
 80119e0:	2300      	movs	r3, #0
 80119e2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80119e4:	2300      	movs	r3, #0
 80119e6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d106      	bne.n	80119fc <tcp_split_unsent_seg+0x2c>
 80119ee:	4b95      	ldr	r3, [pc, #596]	; (8011c44 <tcp_split_unsent_seg+0x274>)
 80119f0:	f240 324b 	movw	r2, #843	; 0x34b
 80119f4:	4994      	ldr	r1, [pc, #592]	; (8011c48 <tcp_split_unsent_seg+0x278>)
 80119f6:	4895      	ldr	r0, [pc, #596]	; (8011c4c <tcp_split_unsent_seg+0x27c>)
 80119f8:	f007 f824 	bl	8018a44 <iprintf>

  useg = pcb->unsent;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a00:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d102      	bne.n	8011a0e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011a08:	f04f 33ff 	mov.w	r3, #4294967295
 8011a0c:	e116      	b.n	8011c3c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011a0e:	887b      	ldrh	r3, [r7, #2]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d109      	bne.n	8011a28 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011a14:	4b8b      	ldr	r3, [pc, #556]	; (8011c44 <tcp_split_unsent_seg+0x274>)
 8011a16:	f240 3253 	movw	r2, #851	; 0x353
 8011a1a:	498d      	ldr	r1, [pc, #564]	; (8011c50 <tcp_split_unsent_seg+0x280>)
 8011a1c:	488b      	ldr	r0, [pc, #556]	; (8011c4c <tcp_split_unsent_seg+0x27c>)
 8011a1e:	f007 f811 	bl	8018a44 <iprintf>
    return ERR_VAL;
 8011a22:	f06f 0305 	mvn.w	r3, #5
 8011a26:	e109      	b.n	8011c3c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	891b      	ldrh	r3, [r3, #8]
 8011a2c:	887a      	ldrh	r2, [r7, #2]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d301      	bcc.n	8011a36 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011a32:	2300      	movs	r3, #0
 8011a34:	e102      	b.n	8011c3c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a3a:	887a      	ldrh	r2, [r7, #2]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d906      	bls.n	8011a4e <tcp_split_unsent_seg+0x7e>
 8011a40:	4b80      	ldr	r3, [pc, #512]	; (8011c44 <tcp_split_unsent_seg+0x274>)
 8011a42:	f240 325b 	movw	r2, #859	; 0x35b
 8011a46:	4983      	ldr	r1, [pc, #524]	; (8011c54 <tcp_split_unsent_seg+0x284>)
 8011a48:	4880      	ldr	r0, [pc, #512]	; (8011c4c <tcp_split_unsent_seg+0x27c>)
 8011a4a:	f006 fffb 	bl	8018a44 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	891b      	ldrh	r3, [r3, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d106      	bne.n	8011a64 <tcp_split_unsent_seg+0x94>
 8011a56:	4b7b      	ldr	r3, [pc, #492]	; (8011c44 <tcp_split_unsent_seg+0x274>)
 8011a58:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011a5c:	497e      	ldr	r1, [pc, #504]	; (8011c58 <tcp_split_unsent_seg+0x288>)
 8011a5e:	487b      	ldr	r0, [pc, #492]	; (8011c4c <tcp_split_unsent_seg+0x27c>)
 8011a60:	f006 fff0 	bl	8018a44 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	7a9b      	ldrb	r3, [r3, #10]
 8011a68:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011a6a:	7bfb      	ldrb	r3, [r7, #15]
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	f003 0304 	and.w	r3, r3, #4
 8011a74:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	891a      	ldrh	r2, [r3, #8]
 8011a7a:	887b      	ldrh	r3, [r7, #2]
 8011a7c:	1ad3      	subs	r3, r2, r3
 8011a7e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011a80:	7bbb      	ldrb	r3, [r7, #14]
 8011a82:	b29a      	uxth	r2, r3
 8011a84:	89bb      	ldrh	r3, [r7, #12]
 8011a86:	4413      	add	r3, r2
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a8e:	4619      	mov	r1, r3
 8011a90:	2036      	movs	r0, #54	; 0x36
 8011a92:	f7fa fb4d 	bl	800c130 <pbuf_alloc>
 8011a96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	f000 80b7 	beq.w	8011c0e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	685b      	ldr	r3, [r3, #4]
 8011aa4:	891a      	ldrh	r2, [r3, #8]
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	891b      	ldrh	r3, [r3, #8]
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	b29a      	uxth	r2, r3
 8011aae:	887b      	ldrh	r3, [r7, #2]
 8011ab0:	4413      	add	r3, r2
 8011ab2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	6858      	ldr	r0, [r3, #4]
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	685a      	ldr	r2, [r3, #4]
 8011abc:	7bbb      	ldrb	r3, [r7, #14]
 8011abe:	18d1      	adds	r1, r2, r3
 8011ac0:	897b      	ldrh	r3, [r7, #10]
 8011ac2:	89ba      	ldrh	r2, [r7, #12]
 8011ac4:	f7fb f81c 	bl	800cb00 <pbuf_copy_partial>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	461a      	mov	r2, r3
 8011acc:	89bb      	ldrh	r3, [r7, #12]
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	f040 809f 	bne.w	8011c12 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	899b      	ldrh	r3, [r3, #12]
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7f9 f9a7 	bl	800ae30 <lwip_htons>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011aea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011aec:	2300      	movs	r3, #0
 8011aee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011af0:	7efb      	ldrb	r3, [r7, #27]
 8011af2:	f003 0308 	and.w	r3, r3, #8
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d007      	beq.n	8011b0a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011afa:	7efb      	ldrb	r3, [r7, #27]
 8011afc:	f023 0308 	bic.w	r3, r3, #8
 8011b00:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011b02:	7ebb      	ldrb	r3, [r7, #26]
 8011b04:	f043 0308 	orr.w	r3, r3, #8
 8011b08:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011b0a:	7efb      	ldrb	r3, [r7, #27]
 8011b0c:	f003 0301 	and.w	r3, r3, #1
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d007      	beq.n	8011b24 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011b14:	7efb      	ldrb	r3, [r7, #27]
 8011b16:	f023 0301 	bic.w	r3, r3, #1
 8011b1a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011b1c:	7ebb      	ldrb	r3, [r7, #26]
 8011b1e:	f043 0301 	orr.w	r3, r3, #1
 8011b22:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	68db      	ldr	r3, [r3, #12]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7f9 f994 	bl	800ae58 <lwip_htonl>
 8011b30:	4602      	mov	r2, r0
 8011b32:	887b      	ldrh	r3, [r7, #2]
 8011b34:	18d1      	adds	r1, r2, r3
 8011b36:	7eba      	ldrb	r2, [r7, #26]
 8011b38:	7bfb      	ldrb	r3, [r7, #15]
 8011b3a:	9300      	str	r3, [sp, #0]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	6939      	ldr	r1, [r7, #16]
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7ff fa4f 	bl	8010fe4 <tcp_create_segment>
 8011b46:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d063      	beq.n	8011c16 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fa fe5e 	bl	800c814 <pbuf_clen>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b62:	1a9b      	subs	r3, r3, r2
 8011b64:	b29a      	uxth	r2, r3
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	6858      	ldr	r0, [r3, #4]
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	891a      	ldrh	r2, [r3, #8]
 8011b76:	89bb      	ldrh	r3, [r7, #12]
 8011b78:	1ad3      	subs	r3, r2, r3
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	f7fa fc35 	bl	800c3ec <pbuf_realloc>
  useg->len -= remainder;
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	891a      	ldrh	r2, [r3, #8]
 8011b86:	89bb      	ldrh	r3, [r7, #12]
 8011b88:	1ad3      	subs	r3, r2, r3
 8011b8a:	b29a      	uxth	r2, r3
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	68db      	ldr	r3, [r3, #12]
 8011b94:	899b      	ldrh	r3, [r3, #12]
 8011b96:	b29c      	uxth	r4, r3
 8011b98:	7efb      	ldrb	r3, [r7, #27]
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7f9 f947 	bl	800ae30 <lwip_htons>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	4322      	orrs	r2, r4
 8011bac:	b292      	uxth	r2, r2
 8011bae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fa fe2d 	bl	800c814 <pbuf_clen>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bc4:	4413      	add	r3, r2
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fa fe1e 	bl	800c814 <pbuf_clen>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	461a      	mov	r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011be2:	4413      	add	r3, r2
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	69fa      	ldr	r2, [r7, #28]
 8011bf8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d103      	bne.n	8011c0a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2200      	movs	r2, #0
 8011c06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	e016      	b.n	8011c3c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011c0e:	bf00      	nop
 8011c10:	e002      	b.n	8011c18 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011c12:	bf00      	nop
 8011c14:	e000      	b.n	8011c18 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011c16:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d006      	beq.n	8011c2c <tcp_split_unsent_seg+0x25c>
 8011c1e:	4b09      	ldr	r3, [pc, #36]	; (8011c44 <tcp_split_unsent_seg+0x274>)
 8011c20:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011c24:	490d      	ldr	r1, [pc, #52]	; (8011c5c <tcp_split_unsent_seg+0x28c>)
 8011c26:	4809      	ldr	r0, [pc, #36]	; (8011c4c <tcp_split_unsent_seg+0x27c>)
 8011c28:	f006 ff0c 	bl	8018a44 <iprintf>
  if (p != NULL) {
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d002      	beq.n	8011c38 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011c32:	6938      	ldr	r0, [r7, #16]
 8011c34:	f7fa fd60 	bl	800c6f8 <pbuf_free>
  }

  return ERR_MEM;
 8011c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3724      	adds	r7, #36	; 0x24
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd90      	pop	{r4, r7, pc}
 8011c44:	0801b5b8 	.word	0x0801b5b8
 8011c48:	0801b94c 	.word	0x0801b94c
 8011c4c:	0801b60c 	.word	0x0801b60c
 8011c50:	0801b970 	.word	0x0801b970
 8011c54:	0801b994 	.word	0x0801b994
 8011c58:	0801b9a4 	.word	0x0801b9a4
 8011c5c:	0801b9b4 	.word	0x0801b9b4

08011c60 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011c60:	b590      	push	{r4, r7, lr}
 8011c62:	b085      	sub	sp, #20
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d106      	bne.n	8011c7c <tcp_send_fin+0x1c>
 8011c6e:	4b21      	ldr	r3, [pc, #132]	; (8011cf4 <tcp_send_fin+0x94>)
 8011c70:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011c74:	4920      	ldr	r1, [pc, #128]	; (8011cf8 <tcp_send_fin+0x98>)
 8011c76:	4821      	ldr	r0, [pc, #132]	; (8011cfc <tcp_send_fin+0x9c>)
 8011c78:	f006 fee4 	bl	8018a44 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d02e      	beq.n	8011ce2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c88:	60fb      	str	r3, [r7, #12]
 8011c8a:	e002      	b.n	8011c92 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1f8      	bne.n	8011c8c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	68db      	ldr	r3, [r3, #12]
 8011c9e:	899b      	ldrh	r3, [r3, #12]
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7f9 f8c4 	bl	800ae30 <lwip_htons>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	f003 0307 	and.w	r3, r3, #7
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d116      	bne.n	8011ce2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	899b      	ldrh	r3, [r3, #12]
 8011cba:	b29c      	uxth	r4, r3
 8011cbc:	2001      	movs	r0, #1
 8011cbe:	f7f9 f8b7 	bl	800ae30 <lwip_htons>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	4322      	orrs	r2, r4
 8011ccc:	b292      	uxth	r2, r2
 8011cce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	8b5b      	ldrh	r3, [r3, #26]
 8011cd4:	f043 0320 	orr.w	r3, r3, #32
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	e004      	b.n	8011cec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f000 f80b 	bl	8011d00 <tcp_enqueue_flags>
 8011cea:	4603      	mov	r3, r0
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3714      	adds	r7, #20
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd90      	pop	{r4, r7, pc}
 8011cf4:	0801b5b8 	.word	0x0801b5b8
 8011cf8:	0801b9c0 	.word	0x0801b9c0
 8011cfc:	0801b60c 	.word	0x0801b60c

08011d00 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b08a      	sub	sp, #40	; 0x28
 8011d04:	af02      	add	r7, sp, #8
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	460b      	mov	r3, r1
 8011d0a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011d10:	2300      	movs	r3, #0
 8011d12:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011d14:	78fb      	ldrb	r3, [r7, #3]
 8011d16:	f003 0303 	and.w	r3, r3, #3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d106      	bne.n	8011d2c <tcp_enqueue_flags+0x2c>
 8011d1e:	4b67      	ldr	r3, [pc, #412]	; (8011ebc <tcp_enqueue_flags+0x1bc>)
 8011d20:	f240 4211 	movw	r2, #1041	; 0x411
 8011d24:	4966      	ldr	r1, [pc, #408]	; (8011ec0 <tcp_enqueue_flags+0x1c0>)
 8011d26:	4867      	ldr	r0, [pc, #412]	; (8011ec4 <tcp_enqueue_flags+0x1c4>)
 8011d28:	f006 fe8c 	bl	8018a44 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d106      	bne.n	8011d40 <tcp_enqueue_flags+0x40>
 8011d32:	4b62      	ldr	r3, [pc, #392]	; (8011ebc <tcp_enqueue_flags+0x1bc>)
 8011d34:	f240 4213 	movw	r2, #1043	; 0x413
 8011d38:	4963      	ldr	r1, [pc, #396]	; (8011ec8 <tcp_enqueue_flags+0x1c8>)
 8011d3a:	4862      	ldr	r0, [pc, #392]	; (8011ec4 <tcp_enqueue_flags+0x1c4>)
 8011d3c:	f006 fe82 	bl	8018a44 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011d40:	78fb      	ldrb	r3, [r7, #3]
 8011d42:	f003 0302 	and.w	r3, r3, #2
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d001      	beq.n	8011d4e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d4e:	7ffb      	ldrb	r3, [r7, #31]
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	f003 0304 	and.w	r3, r3, #4
 8011d58:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d5a:	7dfb      	ldrb	r3, [r7, #23]
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d62:	4619      	mov	r1, r3
 8011d64:	2036      	movs	r0, #54	; 0x36
 8011d66:	f7fa f9e3 	bl	800c130 <pbuf_alloc>
 8011d6a:	6138      	str	r0, [r7, #16]
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d109      	bne.n	8011d86 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	8b5b      	ldrh	r3, [r3, #26]
 8011d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d7a:	b29a      	uxth	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d80:	f04f 33ff 	mov.w	r3, #4294967295
 8011d84:	e095      	b.n	8011eb2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	895a      	ldrh	r2, [r3, #10]
 8011d8a:	7dfb      	ldrb	r3, [r7, #23]
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d206      	bcs.n	8011da0 <tcp_enqueue_flags+0xa0>
 8011d92:	4b4a      	ldr	r3, [pc, #296]	; (8011ebc <tcp_enqueue_flags+0x1bc>)
 8011d94:	f240 4239 	movw	r2, #1081	; 0x439
 8011d98:	494c      	ldr	r1, [pc, #304]	; (8011ecc <tcp_enqueue_flags+0x1cc>)
 8011d9a:	484a      	ldr	r0, [pc, #296]	; (8011ec4 <tcp_enqueue_flags+0x1c4>)
 8011d9c:	f006 fe52 	bl	8018a44 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011da4:	78fa      	ldrb	r2, [r7, #3]
 8011da6:	7ffb      	ldrb	r3, [r7, #31]
 8011da8:	9300      	str	r3, [sp, #0]
 8011daa:	460b      	mov	r3, r1
 8011dac:	6939      	ldr	r1, [r7, #16]
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f7ff f918 	bl	8010fe4 <tcp_create_segment>
 8011db4:	60f8      	str	r0, [r7, #12]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d109      	bne.n	8011dd0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	8b5b      	ldrh	r3, [r3, #26]
 8011dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011dca:	f04f 33ff 	mov.w	r3, #4294967295
 8011dce:	e070      	b.n	8011eb2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	f003 0303 	and.w	r3, r3, #3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d006      	beq.n	8011dea <tcp_enqueue_flags+0xea>
 8011ddc:	4b37      	ldr	r3, [pc, #220]	; (8011ebc <tcp_enqueue_flags+0x1bc>)
 8011dde:	f240 4242 	movw	r2, #1090	; 0x442
 8011de2:	493b      	ldr	r1, [pc, #236]	; (8011ed0 <tcp_enqueue_flags+0x1d0>)
 8011de4:	4837      	ldr	r0, [pc, #220]	; (8011ec4 <tcp_enqueue_flags+0x1c4>)
 8011de6:	f006 fe2d 	bl	8018a44 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	891b      	ldrh	r3, [r3, #8]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d006      	beq.n	8011e00 <tcp_enqueue_flags+0x100>
 8011df2:	4b32      	ldr	r3, [pc, #200]	; (8011ebc <tcp_enqueue_flags+0x1bc>)
 8011df4:	f240 4243 	movw	r2, #1091	; 0x443
 8011df8:	4936      	ldr	r1, [pc, #216]	; (8011ed4 <tcp_enqueue_flags+0x1d4>)
 8011dfa:	4832      	ldr	r0, [pc, #200]	; (8011ec4 <tcp_enqueue_flags+0x1c4>)
 8011dfc:	f006 fe22 	bl	8018a44 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d103      	bne.n	8011e10 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011e0e:	e00d      	b.n	8011e2c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e14:	61bb      	str	r3, [r7, #24]
 8011e16:	e002      	b.n	8011e1e <tcp_enqueue_flags+0x11e>
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	61bb      	str	r3, [r7, #24]
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d1f8      	bne.n	8011e18 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	68fa      	ldr	r2, [r7, #12]
 8011e2a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011e34:	78fb      	ldrb	r3, [r7, #3]
 8011e36:	f003 0302 	and.w	r3, r3, #2
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d104      	bne.n	8011e48 <tcp_enqueue_flags+0x148>
 8011e3e:	78fb      	ldrb	r3, [r7, #3]
 8011e40:	f003 0301 	and.w	r3, r3, #1
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d004      	beq.n	8011e52 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e4c:	1c5a      	adds	r2, r3, #1
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011e52:	78fb      	ldrb	r3, [r7, #3]
 8011e54:	f003 0301 	and.w	r3, r3, #1
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d006      	beq.n	8011e6a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	8b5b      	ldrh	r3, [r3, #26]
 8011e60:	f043 0320 	orr.w	r3, r3, #32
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7fa fcd0 	bl	800c814 <pbuf_clen>
 8011e74:	4603      	mov	r3, r0
 8011e76:	461a      	mov	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e7e:	4413      	add	r3, r2
 8011e80:	b29a      	uxth	r2, r3
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d00e      	beq.n	8011eb0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d10a      	bne.n	8011eb0 <tcp_enqueue_flags+0x1b0>
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <tcp_enqueue_flags+0x1b0>
 8011ea2:	4b06      	ldr	r3, [pc, #24]	; (8011ebc <tcp_enqueue_flags+0x1bc>)
 8011ea4:	f240 4265 	movw	r2, #1125	; 0x465
 8011ea8:	490b      	ldr	r1, [pc, #44]	; (8011ed8 <tcp_enqueue_flags+0x1d8>)
 8011eaa:	4806      	ldr	r0, [pc, #24]	; (8011ec4 <tcp_enqueue_flags+0x1c4>)
 8011eac:	f006 fdca 	bl	8018a44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3720      	adds	r7, #32
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	0801b5b8 	.word	0x0801b5b8
 8011ec0:	0801b9dc 	.word	0x0801b9dc
 8011ec4:	0801b60c 	.word	0x0801b60c
 8011ec8:	0801ba34 	.word	0x0801ba34
 8011ecc:	0801ba54 	.word	0x0801ba54
 8011ed0:	0801ba90 	.word	0x0801ba90
 8011ed4:	0801baa8 	.word	0x0801baa8
 8011ed8:	0801bad4 	.word	0x0801bad4

08011edc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011edc:	b5b0      	push	{r4, r5, r7, lr}
 8011ede:	b08a      	sub	sp, #40	; 0x28
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d106      	bne.n	8011ef8 <tcp_output+0x1c>
 8011eea:	4b8a      	ldr	r3, [pc, #552]	; (8012114 <tcp_output+0x238>)
 8011eec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011ef0:	4989      	ldr	r1, [pc, #548]	; (8012118 <tcp_output+0x23c>)
 8011ef2:	488a      	ldr	r0, [pc, #552]	; (801211c <tcp_output+0x240>)
 8011ef4:	f006 fda6 	bl	8018a44 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	7d1b      	ldrb	r3, [r3, #20]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d106      	bne.n	8011f0e <tcp_output+0x32>
 8011f00:	4b84      	ldr	r3, [pc, #528]	; (8012114 <tcp_output+0x238>)
 8011f02:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011f06:	4986      	ldr	r1, [pc, #536]	; (8012120 <tcp_output+0x244>)
 8011f08:	4884      	ldr	r0, [pc, #528]	; (801211c <tcp_output+0x240>)
 8011f0a:	f006 fd9b 	bl	8018a44 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011f0e:	4b85      	ldr	r3, [pc, #532]	; (8012124 <tcp_output+0x248>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	687a      	ldr	r2, [r7, #4]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d101      	bne.n	8011f1c <tcp_output+0x40>
    return ERR_OK;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	e1ce      	b.n	80122ba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	bf28      	it	cs
 8011f2c:	4613      	movcs	r3, r2
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f36:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d10b      	bne.n	8011f56 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	8b5b      	ldrh	r3, [r3, #26]
 8011f42:	f003 0302 	and.w	r3, r3, #2
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	f000 81aa 	beq.w	80122a0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 fdcb 	bl	8012ae8 <tcp_send_empty_ack>
 8011f52:	4603      	mov	r3, r0
 8011f54:	e1b1      	b.n	80122ba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011f56:	6879      	ldr	r1, [r7, #4]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f7ff f824 	bl	8010fac <tcp_route>
 8011f64:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f66:	697b      	ldr	r3, [r7, #20]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d102      	bne.n	8011f72 <tcp_output+0x96>
    return ERR_RTE;
 8011f6c:	f06f 0303 	mvn.w	r3, #3
 8011f70:	e1a3      	b.n	80122ba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d003      	beq.n	8011f80 <tcp_output+0xa4>
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d111      	bne.n	8011fa4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d002      	beq.n	8011f8c <tcp_output+0xb0>
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	3304      	adds	r3, #4
 8011f8a:	e000      	b.n	8011f8e <tcp_output+0xb2>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d102      	bne.n	8011f9c <tcp_output+0xc0>
      return ERR_RTE;
 8011f96:	f06f 0303 	mvn.w	r3, #3
 8011f9a:	e18e      	b.n	80122ba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	681a      	ldr	r2, [r3, #0]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa6:	68db      	ldr	r3, [r3, #12]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7f8 ff54 	bl	800ae58 <lwip_htonl>
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fb6:	1ad3      	subs	r3, r2, r3
 8011fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fba:	8912      	ldrh	r2, [r2, #8]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	69ba      	ldr	r2, [r7, #24]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d227      	bcs.n	8012014 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fca:	461a      	mov	r2, r3
 8011fcc:	69bb      	ldr	r3, [r7, #24]
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d114      	bne.n	8011ffc <tcp_output+0x120>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d110      	bne.n	8011ffc <tcp_output+0x120>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10b      	bne.n	8011ffc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2201      	movs	r2, #1
 8011ff0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	8b5b      	ldrh	r3, [r3, #26]
 8012000:	f003 0302 	and.w	r3, r3, #2
 8012004:	2b00      	cmp	r3, #0
 8012006:	f000 814d 	beq.w	80122a4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 fd6c 	bl	8012ae8 <tcp_send_empty_ack>
 8012010:	4603      	mov	r3, r0
 8012012:	e152      	b.n	80122ba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012020:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	2b00      	cmp	r3, #0
 8012026:	f000 811c 	beq.w	8012262 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801202a:	e002      	b.n	8012032 <tcp_output+0x156>
 801202c:	6a3b      	ldr	r3, [r7, #32]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	623b      	str	r3, [r7, #32]
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d1f8      	bne.n	801202c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801203a:	e112      	b.n	8012262 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	899b      	ldrh	r3, [r3, #12]
 8012042:	b29b      	uxth	r3, r3
 8012044:	4618      	mov	r0, r3
 8012046:	f7f8 fef3 	bl	800ae30 <lwip_htons>
 801204a:	4603      	mov	r3, r0
 801204c:	b2db      	uxtb	r3, r3
 801204e:	f003 0304 	and.w	r3, r3, #4
 8012052:	2b00      	cmp	r3, #0
 8012054:	d006      	beq.n	8012064 <tcp_output+0x188>
 8012056:	4b2f      	ldr	r3, [pc, #188]	; (8012114 <tcp_output+0x238>)
 8012058:	f240 5236 	movw	r2, #1334	; 0x536
 801205c:	4932      	ldr	r1, [pc, #200]	; (8012128 <tcp_output+0x24c>)
 801205e:	482f      	ldr	r0, [pc, #188]	; (801211c <tcp_output+0x240>)
 8012060:	f006 fcf0 	bl	8018a44 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012068:	2b00      	cmp	r3, #0
 801206a:	d01f      	beq.n	80120ac <tcp_output+0x1d0>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	8b5b      	ldrh	r3, [r3, #26]
 8012070:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012074:	2b00      	cmp	r3, #0
 8012076:	d119      	bne.n	80120ac <tcp_output+0x1d0>
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00b      	beq.n	8012098 <tcp_output+0x1bc>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d110      	bne.n	80120ac <tcp_output+0x1d0>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801208e:	891a      	ldrh	r2, [r3, #8]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012094:	429a      	cmp	r2, r3
 8012096:	d209      	bcs.n	80120ac <tcp_output+0x1d0>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d004      	beq.n	80120ac <tcp_output+0x1d0>
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120a8:	2b08      	cmp	r3, #8
 80120aa:	d901      	bls.n	80120b0 <tcp_output+0x1d4>
 80120ac:	2301      	movs	r3, #1
 80120ae:	e000      	b.n	80120b2 <tcp_output+0x1d6>
 80120b0:	2300      	movs	r3, #0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d106      	bne.n	80120c4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	8b5b      	ldrh	r3, [r3, #26]
 80120ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80120be:	2b00      	cmp	r3, #0
 80120c0:	f000 80e4 	beq.w	801228c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	7d1b      	ldrb	r3, [r3, #20]
 80120c8:	2b02      	cmp	r3, #2
 80120ca:	d00d      	beq.n	80120e8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80120cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	899b      	ldrh	r3, [r3, #12]
 80120d2:	b29c      	uxth	r4, r3
 80120d4:	2010      	movs	r0, #16
 80120d6:	f7f8 feab 	bl	800ae30 <lwip_htons>
 80120da:	4603      	mov	r3, r0
 80120dc:	461a      	mov	r2, r3
 80120de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	4322      	orrs	r2, r4
 80120e4:	b292      	uxth	r2, r2
 80120e6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80120e8:	697a      	ldr	r2, [r7, #20]
 80120ea:	6879      	ldr	r1, [r7, #4]
 80120ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ee:	f000 f909 	bl	8012304 <tcp_output_segment>
 80120f2:	4603      	mov	r3, r0
 80120f4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80120f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d016      	beq.n	801212c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	8b5b      	ldrh	r3, [r3, #26]
 8012102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012106:	b29a      	uxth	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	835a      	strh	r2, [r3, #26]
      return err;
 801210c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012110:	e0d3      	b.n	80122ba <tcp_output+0x3de>
 8012112:	bf00      	nop
 8012114:	0801b5b8 	.word	0x0801b5b8
 8012118:	0801bafc 	.word	0x0801bafc
 801211c:	0801b60c 	.word	0x0801b60c
 8012120:	0801bb14 	.word	0x0801bb14
 8012124:	2000be7c 	.word	0x2000be7c
 8012128:	0801bb3c 	.word	0x0801bb3c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	7d1b      	ldrb	r3, [r3, #20]
 8012138:	2b02      	cmp	r3, #2
 801213a:	d006      	beq.n	801214a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	8b5b      	ldrh	r3, [r3, #26]
 8012140:	f023 0303 	bic.w	r3, r3, #3
 8012144:	b29a      	uxth	r2, r3
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	4618      	mov	r0, r3
 8012152:	f7f8 fe81 	bl	800ae58 <lwip_htonl>
 8012156:	4604      	mov	r4, r0
 8012158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215a:	891b      	ldrh	r3, [r3, #8]
 801215c:	461d      	mov	r5, r3
 801215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	899b      	ldrh	r3, [r3, #12]
 8012164:	b29b      	uxth	r3, r3
 8012166:	4618      	mov	r0, r3
 8012168:	f7f8 fe62 	bl	800ae30 <lwip_htons>
 801216c:	4603      	mov	r3, r0
 801216e:	b2db      	uxtb	r3, r3
 8012170:	f003 0303 	and.w	r3, r3, #3
 8012174:	2b00      	cmp	r3, #0
 8012176:	d001      	beq.n	801217c <tcp_output+0x2a0>
 8012178:	2301      	movs	r3, #1
 801217a:	e000      	b.n	801217e <tcp_output+0x2a2>
 801217c:	2300      	movs	r3, #0
 801217e:	442b      	add	r3, r5
 8012180:	4423      	add	r3, r4
 8012182:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	2b00      	cmp	r3, #0
 801218e:	da02      	bge.n	8012196 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	68ba      	ldr	r2, [r7, #8]
 8012194:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012198:	891b      	ldrh	r3, [r3, #8]
 801219a:	461c      	mov	r4, r3
 801219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	899b      	ldrh	r3, [r3, #12]
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7f8 fe43 	bl	800ae30 <lwip_htons>
 80121aa:	4603      	mov	r3, r0
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	f003 0303 	and.w	r3, r3, #3
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d001      	beq.n	80121ba <tcp_output+0x2de>
 80121b6:	2301      	movs	r3, #1
 80121b8:	e000      	b.n	80121bc <tcp_output+0x2e0>
 80121ba:	2300      	movs	r3, #0
 80121bc:	4423      	add	r3, r4
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d049      	beq.n	8012256 <tcp_output+0x37a>
      seg->next = NULL;
 80121c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c4:	2200      	movs	r2, #0
 80121c6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d105      	bne.n	80121dc <tcp_output+0x300>
        pcb->unacked = seg;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121d4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	623b      	str	r3, [r7, #32]
 80121da:	e03f      	b.n	801225c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80121dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7f8 fe38 	bl	800ae58 <lwip_htonl>
 80121e8:	4604      	mov	r4, r0
 80121ea:	6a3b      	ldr	r3, [r7, #32]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7f8 fe31 	bl	800ae58 <lwip_htonl>
 80121f6:	4603      	mov	r3, r0
 80121f8:	1ae3      	subs	r3, r4, r3
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	da24      	bge.n	8012248 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	3370      	adds	r3, #112	; 0x70
 8012202:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012204:	e002      	b.n	801220c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d011      	beq.n	8012238 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	4618      	mov	r0, r3
 801221e:	f7f8 fe1b 	bl	800ae58 <lwip_htonl>
 8012222:	4604      	mov	r4, r0
 8012224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	4618      	mov	r0, r3
 801222c:	f7f8 fe14 	bl	800ae58 <lwip_htonl>
 8012230:	4603      	mov	r3, r0
 8012232:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012234:	2b00      	cmp	r3, #0
 8012236:	dbe6      	blt.n	8012206 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012244:	601a      	str	r2, [r3, #0]
 8012246:	e009      	b.n	801225c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012248:	6a3b      	ldr	r3, [r7, #32]
 801224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801224c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801224e:	6a3b      	ldr	r3, [r7, #32]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	623b      	str	r3, [r7, #32]
 8012254:	e002      	b.n	801225c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012258:	f7fb ff33 	bl	800e0c2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012260:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012264:	2b00      	cmp	r3, #0
 8012266:	d012      	beq.n	801228e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	4618      	mov	r0, r3
 8012270:	f7f8 fdf2 	bl	800ae58 <lwip_htonl>
 8012274:	4602      	mov	r2, r0
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801227e:	8912      	ldrh	r2, [r2, #8]
 8012280:	4413      	add	r3, r2
  while (seg != NULL &&
 8012282:	69ba      	ldr	r2, [r7, #24]
 8012284:	429a      	cmp	r2, r3
 8012286:	f4bf aed9 	bcs.w	801203c <tcp_output+0x160>
 801228a:	e000      	b.n	801228e <tcp_output+0x3b2>
      break;
 801228c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012292:	2b00      	cmp	r3, #0
 8012294:	d108      	bne.n	80122a8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801229e:	e004      	b.n	80122aa <tcp_output+0x3ce>
    goto output_done;
 80122a0:	bf00      	nop
 80122a2:	e002      	b.n	80122aa <tcp_output+0x3ce>
    goto output_done;
 80122a4:	bf00      	nop
 80122a6:	e000      	b.n	80122aa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80122a8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	8b5b      	ldrh	r3, [r3, #26]
 80122ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80122b8:	2300      	movs	r3, #0
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3728      	adds	r7, #40	; 0x28
 80122be:	46bd      	mov	sp, r7
 80122c0:	bdb0      	pop	{r4, r5, r7, pc}
 80122c2:	bf00      	nop

080122c4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d106      	bne.n	80122e0 <tcp_output_segment_busy+0x1c>
 80122d2:	4b09      	ldr	r3, [pc, #36]	; (80122f8 <tcp_output_segment_busy+0x34>)
 80122d4:	f240 529a 	movw	r2, #1434	; 0x59a
 80122d8:	4908      	ldr	r1, [pc, #32]	; (80122fc <tcp_output_segment_busy+0x38>)
 80122da:	4809      	ldr	r0, [pc, #36]	; (8012300 <tcp_output_segment_busy+0x3c>)
 80122dc:	f006 fbb2 	bl	8018a44 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	7b9b      	ldrb	r3, [r3, #14]
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	d001      	beq.n	80122ee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80122ea:	2301      	movs	r3, #1
 80122ec:	e000      	b.n	80122f0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80122ee:	2300      	movs	r3, #0
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	0801b5b8 	.word	0x0801b5b8
 80122fc:	0801bb54 	.word	0x0801bb54
 8012300:	0801b60c 	.word	0x0801b60c

08012304 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012304:	b5b0      	push	{r4, r5, r7, lr}
 8012306:	b08c      	sub	sp, #48	; 0x30
 8012308:	af04      	add	r7, sp, #16
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d106      	bne.n	8012324 <tcp_output_segment+0x20>
 8012316:	4b63      	ldr	r3, [pc, #396]	; (80124a4 <tcp_output_segment+0x1a0>)
 8012318:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801231c:	4962      	ldr	r1, [pc, #392]	; (80124a8 <tcp_output_segment+0x1a4>)
 801231e:	4863      	ldr	r0, [pc, #396]	; (80124ac <tcp_output_segment+0x1a8>)
 8012320:	f006 fb90 	bl	8018a44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <tcp_output_segment+0x34>
 801232a:	4b5e      	ldr	r3, [pc, #376]	; (80124a4 <tcp_output_segment+0x1a0>)
 801232c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012330:	495f      	ldr	r1, [pc, #380]	; (80124b0 <tcp_output_segment+0x1ac>)
 8012332:	485e      	ldr	r0, [pc, #376]	; (80124ac <tcp_output_segment+0x1a8>)
 8012334:	f006 fb86 	bl	8018a44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_output_segment+0x48>
 801233e:	4b59      	ldr	r3, [pc, #356]	; (80124a4 <tcp_output_segment+0x1a0>)
 8012340:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012344:	495b      	ldr	r1, [pc, #364]	; (80124b4 <tcp_output_segment+0x1b0>)
 8012346:	4859      	ldr	r0, [pc, #356]	; (80124ac <tcp_output_segment+0x1a8>)
 8012348:	f006 fb7c 	bl	8018a44 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f7ff ffb9 	bl	80122c4 <tcp_output_segment_busy>
 8012352:	4603      	mov	r3, r0
 8012354:	2b00      	cmp	r3, #0
 8012356:	d001      	beq.n	801235c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012358:	2300      	movs	r3, #0
 801235a:	e09f      	b.n	801249c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	68dc      	ldr	r4, [r3, #12]
 8012364:	4610      	mov	r0, r2
 8012366:	f7f8 fd77 	bl	800ae58 <lwip_htonl>
 801236a:	4603      	mov	r3, r0
 801236c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	68dc      	ldr	r4, [r3, #12]
 8012376:	4610      	mov	r0, r2
 8012378:	f7f8 fd5a 	bl	800ae30 <lwip_htons>
 801237c:	4603      	mov	r3, r0
 801237e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012384:	68ba      	ldr	r2, [r7, #8]
 8012386:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012388:	441a      	add	r2, r3
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	68db      	ldr	r3, [r3, #12]
 8012392:	3314      	adds	r3, #20
 8012394:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	7a9b      	ldrb	r3, [r3, #10]
 801239a:	f003 0301 	and.w	r3, r3, #1
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d015      	beq.n	80123ce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	3304      	adds	r3, #4
 80123a6:	461a      	mov	r2, r3
 80123a8:	6879      	ldr	r1, [r7, #4]
 80123aa:	f44f 7006 	mov.w	r0, #536	; 0x218
 80123ae:	f7fc fa33 	bl	800e818 <tcp_eff_send_mss_netif>
 80123b2:	4603      	mov	r3, r0
 80123b4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80123b6:	8b7b      	ldrh	r3, [r7, #26]
 80123b8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80123bc:	4618      	mov	r0, r3
 80123be:	f7f8 fd4b 	bl	800ae58 <lwip_htonl>
 80123c2:	4602      	mov	r2, r0
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	3304      	adds	r3, #4
 80123cc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	da02      	bge.n	80123de <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	2200      	movs	r2, #0
 80123dc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d10c      	bne.n	8012400 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80123e6:	4b34      	ldr	r3, [pc, #208]	; (80124b8 <tcp_output_segment+0x1b4>)
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	68db      	ldr	r3, [r3, #12]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7f8 fd2f 	bl	800ae58 <lwip_htonl>
 80123fa:	4602      	mov	r2, r0
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	68da      	ldr	r2, [r3, #12]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	8959      	ldrh	r1, [r3, #10]
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	8b3a      	ldrh	r2, [r7, #24]
 801241a:	1a8a      	subs	r2, r1, r2
 801241c:	b292      	uxth	r2, r2
 801241e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	8919      	ldrh	r1, [r3, #8]
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	8b3a      	ldrh	r2, [r7, #24]
 801242c:	1a8a      	subs	r2, r1, r2
 801242e:	b292      	uxth	r2, r2
 8012430:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	68fa      	ldr	r2, [r7, #12]
 8012438:	68d2      	ldr	r2, [r2, #12]
 801243a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	2200      	movs	r2, #0
 8012442:	741a      	strb	r2, [r3, #16]
 8012444:	2200      	movs	r2, #0
 8012446:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	68db      	ldr	r3, [r3, #12]
 801244c:	f103 0214 	add.w	r2, r3, #20
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	7a9b      	ldrb	r3, [r3, #10]
 8012454:	009b      	lsls	r3, r3, #2
 8012456:	f003 0304 	and.w	r3, r3, #4
 801245a:	4413      	add	r3, r2
 801245c:	69fa      	ldr	r2, [r7, #28]
 801245e:	429a      	cmp	r2, r3
 8012460:	d006      	beq.n	8012470 <tcp_output_segment+0x16c>
 8012462:	4b10      	ldr	r3, [pc, #64]	; (80124a4 <tcp_output_segment+0x1a0>)
 8012464:	f240 621c 	movw	r2, #1564	; 0x61c
 8012468:	4914      	ldr	r1, [pc, #80]	; (80124bc <tcp_output_segment+0x1b8>)
 801246a:	4810      	ldr	r0, [pc, #64]	; (80124ac <tcp_output_segment+0x1a8>)
 801246c:	f006 faea 	bl	8018a44 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6858      	ldr	r0, [r3, #4]
 8012474:	68b9      	ldr	r1, [r7, #8]
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	1d1c      	adds	r4, r3, #4
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	7add      	ldrb	r5, [r3, #11]
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	7a9b      	ldrb	r3, [r3, #10]
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	9202      	str	r2, [sp, #8]
 8012486:	2206      	movs	r2, #6
 8012488:	9201      	str	r2, [sp, #4]
 801248a:	9300      	str	r3, [sp, #0]
 801248c:	462b      	mov	r3, r5
 801248e:	4622      	mov	r2, r4
 8012490:	f004 fc3c 	bl	8016d0c <ip4_output_if>
 8012494:	4603      	mov	r3, r0
 8012496:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012498:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801249c:	4618      	mov	r0, r3
 801249e:	3720      	adds	r7, #32
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bdb0      	pop	{r4, r5, r7, pc}
 80124a4:	0801b5b8 	.word	0x0801b5b8
 80124a8:	0801bb7c 	.word	0x0801bb7c
 80124ac:	0801b60c 	.word	0x0801b60c
 80124b0:	0801bb9c 	.word	0x0801bb9c
 80124b4:	0801bbbc 	.word	0x0801bbbc
 80124b8:	2000be30 	.word	0x2000be30
 80124bc:	0801bbe0 	.word	0x0801bbe0

080124c0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80124c0:	b5b0      	push	{r4, r5, r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d106      	bne.n	80124dc <tcp_rexmit_rto_prepare+0x1c>
 80124ce:	4b31      	ldr	r3, [pc, #196]	; (8012594 <tcp_rexmit_rto_prepare+0xd4>)
 80124d0:	f240 6263 	movw	r2, #1635	; 0x663
 80124d4:	4930      	ldr	r1, [pc, #192]	; (8012598 <tcp_rexmit_rto_prepare+0xd8>)
 80124d6:	4831      	ldr	r0, [pc, #196]	; (801259c <tcp_rexmit_rto_prepare+0xdc>)
 80124d8:	f006 fab4 	bl	8018a44 <iprintf>

  if (pcb->unacked == NULL) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d102      	bne.n	80124ea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80124e4:	f06f 0305 	mvn.w	r3, #5
 80124e8:	e050      	b.n	801258c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ee:	60fb      	str	r3, [r7, #12]
 80124f0:	e00b      	b.n	801250a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80124f2:	68f8      	ldr	r0, [r7, #12]
 80124f4:	f7ff fee6 	bl	80122c4 <tcp_output_segment_busy>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d002      	beq.n	8012504 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80124fe:	f06f 0305 	mvn.w	r3, #5
 8012502:	e043      	b.n	801258c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d1ef      	bne.n	80124f2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f7ff fed6 	bl	80122c4 <tcp_output_segment_busy>
 8012518:	4603      	mov	r3, r0
 801251a:	2b00      	cmp	r3, #0
 801251c:	d002      	beq.n	8012524 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801251e:	f06f 0305 	mvn.w	r3, #5
 8012522:	e033      	b.n	801258c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2200      	movs	r2, #0
 8012538:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	8b5b      	ldrh	r3, [r3, #26]
 801253e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012542:	b29a      	uxth	r2, r3
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	4618      	mov	r0, r3
 8012550:	f7f8 fc82 	bl	800ae58 <lwip_htonl>
 8012554:	4604      	mov	r4, r0
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	891b      	ldrh	r3, [r3, #8]
 801255a:	461d      	mov	r5, r3
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	899b      	ldrh	r3, [r3, #12]
 8012562:	b29b      	uxth	r3, r3
 8012564:	4618      	mov	r0, r3
 8012566:	f7f8 fc63 	bl	800ae30 <lwip_htons>
 801256a:	4603      	mov	r3, r0
 801256c:	b2db      	uxtb	r3, r3
 801256e:	f003 0303 	and.w	r3, r3, #3
 8012572:	2b00      	cmp	r3, #0
 8012574:	d001      	beq.n	801257a <tcp_rexmit_rto_prepare+0xba>
 8012576:	2301      	movs	r3, #1
 8012578:	e000      	b.n	801257c <tcp_rexmit_rto_prepare+0xbc>
 801257a:	2300      	movs	r3, #0
 801257c:	442b      	add	r3, r5
 801257e:	18e2      	adds	r2, r4, r3
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801258a:	2300      	movs	r3, #0
}
 801258c:	4618      	mov	r0, r3
 801258e:	3710      	adds	r7, #16
 8012590:	46bd      	mov	sp, r7
 8012592:	bdb0      	pop	{r4, r5, r7, pc}
 8012594:	0801b5b8 	.word	0x0801b5b8
 8012598:	0801bbf4 	.word	0x0801bbf4
 801259c:	0801b60c 	.word	0x0801b60c

080125a0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d106      	bne.n	80125bc <tcp_rexmit_rto_commit+0x1c>
 80125ae:	4b0d      	ldr	r3, [pc, #52]	; (80125e4 <tcp_rexmit_rto_commit+0x44>)
 80125b0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80125b4:	490c      	ldr	r1, [pc, #48]	; (80125e8 <tcp_rexmit_rto_commit+0x48>)
 80125b6:	480d      	ldr	r0, [pc, #52]	; (80125ec <tcp_rexmit_rto_commit+0x4c>)
 80125b8:	f006 fa44 	bl	8018a44 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125c2:	2bff      	cmp	r3, #255	; 0xff
 80125c4:	d007      	beq.n	80125d6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125cc:	3301      	adds	r3, #1
 80125ce:	b2da      	uxtb	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f7ff fc80 	bl	8011edc <tcp_output>
}
 80125dc:	bf00      	nop
 80125de:	3708      	adds	r7, #8
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	0801b5b8 	.word	0x0801b5b8
 80125e8:	0801bc18 	.word	0x0801bc18
 80125ec:	0801b60c 	.word	0x0801b60c

080125f0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d106      	bne.n	801260c <tcp_rexmit_rto+0x1c>
 80125fe:	4b0a      	ldr	r3, [pc, #40]	; (8012628 <tcp_rexmit_rto+0x38>)
 8012600:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012604:	4909      	ldr	r1, [pc, #36]	; (801262c <tcp_rexmit_rto+0x3c>)
 8012606:	480a      	ldr	r0, [pc, #40]	; (8012630 <tcp_rexmit_rto+0x40>)
 8012608:	f006 fa1c 	bl	8018a44 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7ff ff57 	bl	80124c0 <tcp_rexmit_rto_prepare>
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	d102      	bne.n	801261e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f7ff ffc1 	bl	80125a0 <tcp_rexmit_rto_commit>
  }
}
 801261e:	bf00      	nop
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	0801b5b8 	.word	0x0801b5b8
 801262c:	0801bc3c 	.word	0x0801bc3c
 8012630:	0801b60c 	.word	0x0801b60c

08012634 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012634:	b590      	push	{r4, r7, lr}
 8012636:	b085      	sub	sp, #20
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d106      	bne.n	8012650 <tcp_rexmit+0x1c>
 8012642:	4b2f      	ldr	r3, [pc, #188]	; (8012700 <tcp_rexmit+0xcc>)
 8012644:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012648:	492e      	ldr	r1, [pc, #184]	; (8012704 <tcp_rexmit+0xd0>)
 801264a:	482f      	ldr	r0, [pc, #188]	; (8012708 <tcp_rexmit+0xd4>)
 801264c:	f006 f9fa 	bl	8018a44 <iprintf>

  if (pcb->unacked == NULL) {
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012654:	2b00      	cmp	r3, #0
 8012656:	d102      	bne.n	801265e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012658:	f06f 0305 	mvn.w	r3, #5
 801265c:	e04c      	b.n	80126f8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012662:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012664:	68b8      	ldr	r0, [r7, #8]
 8012666:	f7ff fe2d 	bl	80122c4 <tcp_output_segment_busy>
 801266a:	4603      	mov	r3, r0
 801266c:	2b00      	cmp	r3, #0
 801266e:	d002      	beq.n	8012676 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012670:	f06f 0305 	mvn.w	r3, #5
 8012674:	e040      	b.n	80126f8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	336c      	adds	r3, #108	; 0x6c
 8012682:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012684:	e002      	b.n	801268c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d011      	beq.n	80126b8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	68db      	ldr	r3, [r3, #12]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	4618      	mov	r0, r3
 801269e:	f7f8 fbdb 	bl	800ae58 <lwip_htonl>
 80126a2:	4604      	mov	r4, r0
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7f8 fbd4 	bl	800ae58 <lwip_htonl>
 80126b0:	4603      	mov	r3, r0
 80126b2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	dbe6      	blt.n	8012686 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d103      	bne.n	80126d6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126dc:	2bff      	cmp	r3, #255	; 0xff
 80126de:	d007      	beq.n	80126f0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126e6:	3301      	adds	r3, #1
 80126e8:	b2da      	uxtb	r2, r3
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2200      	movs	r2, #0
 80126f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80126f6:	2300      	movs	r3, #0
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3714      	adds	r7, #20
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd90      	pop	{r4, r7, pc}
 8012700:	0801b5b8 	.word	0x0801b5b8
 8012704:	0801bc58 	.word	0x0801bc58
 8012708:	0801b60c 	.word	0x0801b60c

0801270c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d106      	bne.n	8012728 <tcp_rexmit_fast+0x1c>
 801271a:	4b2a      	ldr	r3, [pc, #168]	; (80127c4 <tcp_rexmit_fast+0xb8>)
 801271c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012720:	4929      	ldr	r1, [pc, #164]	; (80127c8 <tcp_rexmit_fast+0xbc>)
 8012722:	482a      	ldr	r0, [pc, #168]	; (80127cc <tcp_rexmit_fast+0xc0>)
 8012724:	f006 f98e 	bl	8018a44 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801272c:	2b00      	cmp	r3, #0
 801272e:	d044      	beq.n	80127ba <tcp_rexmit_fast+0xae>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	8b5b      	ldrh	r3, [r3, #26]
 8012734:	f003 0304 	and.w	r3, r3, #4
 8012738:	2b00      	cmp	r3, #0
 801273a:	d13e      	bne.n	80127ba <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7ff ff79 	bl	8012634 <tcp_rexmit>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d138      	bne.n	80127ba <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012754:	4293      	cmp	r3, r2
 8012756:	bf28      	it	cs
 8012758:	4613      	movcs	r3, r2
 801275a:	b29b      	uxth	r3, r3
 801275c:	0fda      	lsrs	r2, r3, #31
 801275e:	4413      	add	r3, r2
 8012760:	105b      	asrs	r3, r3, #1
 8012762:	b29a      	uxth	r2, r3
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012770:	461a      	mov	r2, r3
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012776:	005b      	lsls	r3, r3, #1
 8012778:	429a      	cmp	r2, r3
 801277a:	d206      	bcs.n	801278a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012780:	005b      	lsls	r3, r3, #1
 8012782:	b29a      	uxth	r2, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012794:	4619      	mov	r1, r3
 8012796:	0049      	lsls	r1, r1, #1
 8012798:	440b      	add	r3, r1
 801279a:	b29b      	uxth	r3, r3
 801279c:	4413      	add	r3, r2
 801279e:	b29a      	uxth	r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	8b5b      	ldrh	r3, [r3, #26]
 80127aa:	f043 0304 	orr.w	r3, r3, #4
 80127ae:	b29a      	uxth	r2, r3
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2200      	movs	r2, #0
 80127b8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80127ba:	bf00      	nop
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	0801b5b8 	.word	0x0801b5b8
 80127c8:	0801bc70 	.word	0x0801bc70
 80127cc:	0801b60c 	.word	0x0801b60c

080127d0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	607b      	str	r3, [r7, #4]
 80127da:	460b      	mov	r3, r1
 80127dc:	817b      	strh	r3, [r7, #10]
 80127de:	4613      	mov	r3, r2
 80127e0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80127e2:	897a      	ldrh	r2, [r7, #10]
 80127e4:	893b      	ldrh	r3, [r7, #8]
 80127e6:	4413      	add	r3, r2
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	3314      	adds	r3, #20
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127f2:	4619      	mov	r1, r3
 80127f4:	2022      	movs	r0, #34	; 0x22
 80127f6:	f7f9 fc9b 	bl	800c130 <pbuf_alloc>
 80127fa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d04d      	beq.n	801289e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012802:	897b      	ldrh	r3, [r7, #10]
 8012804:	3313      	adds	r3, #19
 8012806:	697a      	ldr	r2, [r7, #20]
 8012808:	8952      	ldrh	r2, [r2, #10]
 801280a:	4293      	cmp	r3, r2
 801280c:	db06      	blt.n	801281c <tcp_output_alloc_header_common+0x4c>
 801280e:	4b26      	ldr	r3, [pc, #152]	; (80128a8 <tcp_output_alloc_header_common+0xd8>)
 8012810:	f240 7223 	movw	r2, #1827	; 0x723
 8012814:	4925      	ldr	r1, [pc, #148]	; (80128ac <tcp_output_alloc_header_common+0xdc>)
 8012816:	4826      	ldr	r0, [pc, #152]	; (80128b0 <tcp_output_alloc_header_common+0xe0>)
 8012818:	f006 f914 	bl	8018a44 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012822:	8c3b      	ldrh	r3, [r7, #32]
 8012824:	4618      	mov	r0, r3
 8012826:	f7f8 fb03 	bl	800ae30 <lwip_htons>
 801282a:	4603      	mov	r3, r0
 801282c:	461a      	mov	r2, r3
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012834:	4618      	mov	r0, r3
 8012836:	f7f8 fafb 	bl	800ae30 <lwip_htons>
 801283a:	4603      	mov	r3, r0
 801283c:	461a      	mov	r2, r3
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f7f8 fb05 	bl	800ae58 <lwip_htonl>
 801284e:	4602      	mov	r2, r0
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012854:	897b      	ldrh	r3, [r7, #10]
 8012856:	089b      	lsrs	r3, r3, #2
 8012858:	b29b      	uxth	r3, r3
 801285a:	3305      	adds	r3, #5
 801285c:	b29b      	uxth	r3, r3
 801285e:	031b      	lsls	r3, r3, #12
 8012860:	b29a      	uxth	r2, r3
 8012862:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012866:	b29b      	uxth	r3, r3
 8012868:	4313      	orrs	r3, r2
 801286a:	b29b      	uxth	r3, r3
 801286c:	4618      	mov	r0, r3
 801286e:	f7f8 fadf 	bl	800ae30 <lwip_htons>
 8012872:	4603      	mov	r3, r0
 8012874:	461a      	mov	r2, r3
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801287a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801287c:	4618      	mov	r0, r3
 801287e:	f7f8 fad7 	bl	800ae30 <lwip_htons>
 8012882:	4603      	mov	r3, r0
 8012884:	461a      	mov	r2, r3
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	2200      	movs	r2, #0
 801288e:	741a      	strb	r2, [r3, #16]
 8012890:	2200      	movs	r2, #0
 8012892:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	2200      	movs	r2, #0
 8012898:	749a      	strb	r2, [r3, #18]
 801289a:	2200      	movs	r2, #0
 801289c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801289e:	697b      	ldr	r3, [r7, #20]
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3718      	adds	r7, #24
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	0801b5b8 	.word	0x0801b5b8
 80128ac:	0801bc90 	.word	0x0801bc90
 80128b0:	0801b60c 	.word	0x0801b60c

080128b4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80128b4:	b5b0      	push	{r4, r5, r7, lr}
 80128b6:	b08a      	sub	sp, #40	; 0x28
 80128b8:	af04      	add	r7, sp, #16
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	607b      	str	r3, [r7, #4]
 80128be:	460b      	mov	r3, r1
 80128c0:	817b      	strh	r3, [r7, #10]
 80128c2:	4613      	mov	r3, r2
 80128c4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d106      	bne.n	80128da <tcp_output_alloc_header+0x26>
 80128cc:	4b15      	ldr	r3, [pc, #84]	; (8012924 <tcp_output_alloc_header+0x70>)
 80128ce:	f240 7242 	movw	r2, #1858	; 0x742
 80128d2:	4915      	ldr	r1, [pc, #84]	; (8012928 <tcp_output_alloc_header+0x74>)
 80128d4:	4815      	ldr	r0, [pc, #84]	; (801292c <tcp_output_alloc_header+0x78>)
 80128d6:	f006 f8b5 	bl	8018a44 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	8adb      	ldrh	r3, [r3, #22]
 80128e2:	68fa      	ldr	r2, [r7, #12]
 80128e4:	8b12      	ldrh	r2, [r2, #24]
 80128e6:	68f9      	ldr	r1, [r7, #12]
 80128e8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80128ea:	893d      	ldrh	r5, [r7, #8]
 80128ec:	897c      	ldrh	r4, [r7, #10]
 80128ee:	9103      	str	r1, [sp, #12]
 80128f0:	2110      	movs	r1, #16
 80128f2:	9102      	str	r1, [sp, #8]
 80128f4:	9201      	str	r2, [sp, #4]
 80128f6:	9300      	str	r3, [sp, #0]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	462a      	mov	r2, r5
 80128fc:	4621      	mov	r1, r4
 80128fe:	f7ff ff67 	bl	80127d0 <tcp_output_alloc_header_common>
 8012902:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d006      	beq.n	8012918 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801290e:	68fa      	ldr	r2, [r7, #12]
 8012910:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012912:	441a      	add	r2, r3
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012918:	697b      	ldr	r3, [r7, #20]
}
 801291a:	4618      	mov	r0, r3
 801291c:	3718      	adds	r7, #24
 801291e:	46bd      	mov	sp, r7
 8012920:	bdb0      	pop	{r4, r5, r7, pc}
 8012922:	bf00      	nop
 8012924:	0801b5b8 	.word	0x0801b5b8
 8012928:	0801bcc0 	.word	0x0801bcc0
 801292c:	0801b60c 	.word	0x0801b60c

08012930 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b088      	sub	sp, #32
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	4611      	mov	r1, r2
 801293c:	461a      	mov	r2, r3
 801293e:	460b      	mov	r3, r1
 8012940:	71fb      	strb	r3, [r7, #7]
 8012942:	4613      	mov	r3, r2
 8012944:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012946:	2300      	movs	r3, #0
 8012948:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d106      	bne.n	801295e <tcp_output_fill_options+0x2e>
 8012950:	4b13      	ldr	r3, [pc, #76]	; (80129a0 <tcp_output_fill_options+0x70>)
 8012952:	f240 7256 	movw	r2, #1878	; 0x756
 8012956:	4913      	ldr	r1, [pc, #76]	; (80129a4 <tcp_output_fill_options+0x74>)
 8012958:	4813      	ldr	r0, [pc, #76]	; (80129a8 <tcp_output_fill_options+0x78>)
 801295a:	f006 f873 	bl	8018a44 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012964:	69bb      	ldr	r3, [r7, #24]
 8012966:	3314      	adds	r3, #20
 8012968:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	f103 0214 	add.w	r2, r3, #20
 8012970:	8bfb      	ldrh	r3, [r7, #30]
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	4619      	mov	r1, r3
 8012976:	79fb      	ldrb	r3, [r7, #7]
 8012978:	009b      	lsls	r3, r3, #2
 801297a:	f003 0304 	and.w	r3, r3, #4
 801297e:	440b      	add	r3, r1
 8012980:	4413      	add	r3, r2
 8012982:	697a      	ldr	r2, [r7, #20]
 8012984:	429a      	cmp	r2, r3
 8012986:	d006      	beq.n	8012996 <tcp_output_fill_options+0x66>
 8012988:	4b05      	ldr	r3, [pc, #20]	; (80129a0 <tcp_output_fill_options+0x70>)
 801298a:	f240 7275 	movw	r2, #1909	; 0x775
 801298e:	4907      	ldr	r1, [pc, #28]	; (80129ac <tcp_output_fill_options+0x7c>)
 8012990:	4805      	ldr	r0, [pc, #20]	; (80129a8 <tcp_output_fill_options+0x78>)
 8012992:	f006 f857 	bl	8018a44 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012996:	bf00      	nop
 8012998:	3720      	adds	r7, #32
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	0801b5b8 	.word	0x0801b5b8
 80129a4:	0801bce8 	.word	0x0801bce8
 80129a8:	0801b60c 	.word	0x0801b60c
 80129ac:	0801bbe0 	.word	0x0801bbe0

080129b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b08a      	sub	sp, #40	; 0x28
 80129b4:	af04      	add	r7, sp, #16
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	607a      	str	r2, [r7, #4]
 80129bc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d106      	bne.n	80129d2 <tcp_output_control_segment+0x22>
 80129c4:	4b1c      	ldr	r3, [pc, #112]	; (8012a38 <tcp_output_control_segment+0x88>)
 80129c6:	f240 7287 	movw	r2, #1927	; 0x787
 80129ca:	491c      	ldr	r1, [pc, #112]	; (8012a3c <tcp_output_control_segment+0x8c>)
 80129cc:	481c      	ldr	r0, [pc, #112]	; (8012a40 <tcp_output_control_segment+0x90>)
 80129ce:	f006 f839 	bl	8018a44 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80129d2:	683a      	ldr	r2, [r7, #0]
 80129d4:	6879      	ldr	r1, [r7, #4]
 80129d6:	68f8      	ldr	r0, [r7, #12]
 80129d8:	f7fe fae8 	bl	8010fac <tcp_route>
 80129dc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d102      	bne.n	80129ea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80129e4:	23fc      	movs	r3, #252	; 0xfc
 80129e6:	75fb      	strb	r3, [r7, #23]
 80129e8:	e01c      	b.n	8012a24 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d006      	beq.n	80129fe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	7adb      	ldrb	r3, [r3, #11]
 80129f4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	7a9b      	ldrb	r3, [r3, #10]
 80129fa:	757b      	strb	r3, [r7, #21]
 80129fc:	e003      	b.n	8012a06 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80129fe:	23ff      	movs	r3, #255	; 0xff
 8012a00:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012a02:	2300      	movs	r3, #0
 8012a04:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012a06:	7dba      	ldrb	r2, [r7, #22]
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	9302      	str	r3, [sp, #8]
 8012a0c:	2306      	movs	r3, #6
 8012a0e:	9301      	str	r3, [sp, #4]
 8012a10:	7d7b      	ldrb	r3, [r7, #21]
 8012a12:	9300      	str	r3, [sp, #0]
 8012a14:	4613      	mov	r3, r2
 8012a16:	683a      	ldr	r2, [r7, #0]
 8012a18:	6879      	ldr	r1, [r7, #4]
 8012a1a:	68b8      	ldr	r0, [r7, #8]
 8012a1c:	f004 f976 	bl	8016d0c <ip4_output_if>
 8012a20:	4603      	mov	r3, r0
 8012a22:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012a24:	68b8      	ldr	r0, [r7, #8]
 8012a26:	f7f9 fe67 	bl	800c6f8 <pbuf_free>
  return err;
 8012a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3718      	adds	r7, #24
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	0801b5b8 	.word	0x0801b5b8
 8012a3c:	0801bd10 	.word	0x0801bd10
 8012a40:	0801b60c 	.word	0x0801b60c

08012a44 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012a44:	b590      	push	{r4, r7, lr}
 8012a46:	b08b      	sub	sp, #44	; 0x2c
 8012a48:	af04      	add	r7, sp, #16
 8012a4a:	60f8      	str	r0, [r7, #12]
 8012a4c:	60b9      	str	r1, [r7, #8]
 8012a4e:	607a      	str	r2, [r7, #4]
 8012a50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d106      	bne.n	8012a66 <tcp_rst+0x22>
 8012a58:	4b1f      	ldr	r3, [pc, #124]	; (8012ad8 <tcp_rst+0x94>)
 8012a5a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012a5e:	491f      	ldr	r1, [pc, #124]	; (8012adc <tcp_rst+0x98>)
 8012a60:	481f      	ldr	r0, [pc, #124]	; (8012ae0 <tcp_rst+0x9c>)
 8012a62:	f005 ffef 	bl	8018a44 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d106      	bne.n	8012a7a <tcp_rst+0x36>
 8012a6c:	4b1a      	ldr	r3, [pc, #104]	; (8012ad8 <tcp_rst+0x94>)
 8012a6e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012a72:	491c      	ldr	r1, [pc, #112]	; (8012ae4 <tcp_rst+0xa0>)
 8012a74:	481a      	ldr	r0, [pc, #104]	; (8012ae0 <tcp_rst+0x9c>)
 8012a76:	f005 ffe5 	bl	8018a44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012a7e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012a82:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012a84:	7dfb      	ldrb	r3, [r7, #23]
 8012a86:	b29c      	uxth	r4, r3
 8012a88:	68b8      	ldr	r0, [r7, #8]
 8012a8a:	f7f8 f9e5 	bl	800ae58 <lwip_htonl>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	8abb      	ldrh	r3, [r7, #20]
 8012a92:	9303      	str	r3, [sp, #12]
 8012a94:	2314      	movs	r3, #20
 8012a96:	9302      	str	r3, [sp, #8]
 8012a98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012a9a:	9301      	str	r3, [sp, #4]
 8012a9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a9e:	9300      	str	r3, [sp, #0]
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f7ff fe92 	bl	80127d0 <tcp_output_alloc_header_common>
 8012aac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00c      	beq.n	8012ace <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ab4:	7dfb      	ldrb	r3, [r7, #23]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	6939      	ldr	r1, [r7, #16]
 8012aba:	68f8      	ldr	r0, [r7, #12]
 8012abc:	f7ff ff38 	bl	8012930 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac2:	683a      	ldr	r2, [r7, #0]
 8012ac4:	6939      	ldr	r1, [r7, #16]
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f7ff ff72 	bl	80129b0 <tcp_output_control_segment>
 8012acc:	e000      	b.n	8012ad0 <tcp_rst+0x8c>
    return;
 8012ace:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012ad0:	371c      	adds	r7, #28
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd90      	pop	{r4, r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	0801b5b8 	.word	0x0801b5b8
 8012adc:	0801bd3c 	.word	0x0801bd3c
 8012ae0:	0801b60c 	.word	0x0801b60c
 8012ae4:	0801bd58 	.word	0x0801bd58

08012ae8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012ae8:	b590      	push	{r4, r7, lr}
 8012aea:	b087      	sub	sp, #28
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012af0:	2300      	movs	r3, #0
 8012af2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012af4:	2300      	movs	r3, #0
 8012af6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d106      	bne.n	8012b0c <tcp_send_empty_ack+0x24>
 8012afe:	4b28      	ldr	r3, [pc, #160]	; (8012ba0 <tcp_send_empty_ack+0xb8>)
 8012b00:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012b04:	4927      	ldr	r1, [pc, #156]	; (8012ba4 <tcp_send_empty_ack+0xbc>)
 8012b06:	4828      	ldr	r0, [pc, #160]	; (8012ba8 <tcp_send_empty_ack+0xc0>)
 8012b08:	f005 ff9c 	bl	8018a44 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012b0c:	7dfb      	ldrb	r3, [r7, #23]
 8012b0e:	009b      	lsls	r3, r3, #2
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	f003 0304 	and.w	r3, r3, #4
 8012b16:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012b18:	7d7b      	ldrb	r3, [r7, #21]
 8012b1a:	b29c      	uxth	r4, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7f8 f999 	bl	800ae58 <lwip_htonl>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2200      	movs	r2, #0
 8012b2a:	4621      	mov	r1, r4
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7ff fec1 	bl	80128b4 <tcp_output_alloc_header>
 8012b32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d109      	bne.n	8012b4e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	8b5b      	ldrh	r3, [r3, #26]
 8012b3e:	f043 0303 	orr.w	r3, r3, #3
 8012b42:	b29a      	uxth	r2, r3
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012b48:	f06f 0301 	mvn.w	r3, #1
 8012b4c:	e023      	b.n	8012b96 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012b4e:	7dbb      	ldrb	r3, [r7, #22]
 8012b50:	7dfa      	ldrb	r2, [r7, #23]
 8012b52:	6939      	ldr	r1, [r7, #16]
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7ff feeb 	bl	8012930 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	3304      	adds	r3, #4
 8012b60:	6939      	ldr	r1, [r7, #16]
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f7ff ff24 	bl	80129b0 <tcp_output_control_segment>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d007      	beq.n	8012b84 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	8b5b      	ldrh	r3, [r3, #26]
 8012b78:	f043 0303 	orr.w	r3, r3, #3
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	835a      	strh	r2, [r3, #26]
 8012b82:	e006      	b.n	8012b92 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	8b5b      	ldrh	r3, [r3, #26]
 8012b88:	f023 0303 	bic.w	r3, r3, #3
 8012b8c:	b29a      	uxth	r2, r3
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	371c      	adds	r7, #28
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd90      	pop	{r4, r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	0801b5b8 	.word	0x0801b5b8
 8012ba4:	0801bd74 	.word	0x0801bd74
 8012ba8:	0801b60c 	.word	0x0801b60c

08012bac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012bac:	b590      	push	{r4, r7, lr}
 8012bae:	b087      	sub	sp, #28
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d106      	bne.n	8012bcc <tcp_keepalive+0x20>
 8012bbe:	4b18      	ldr	r3, [pc, #96]	; (8012c20 <tcp_keepalive+0x74>)
 8012bc0:	f640 0224 	movw	r2, #2084	; 0x824
 8012bc4:	4917      	ldr	r1, [pc, #92]	; (8012c24 <tcp_keepalive+0x78>)
 8012bc6:	4818      	ldr	r0, [pc, #96]	; (8012c28 <tcp_keepalive+0x7c>)
 8012bc8:	f005 ff3c 	bl	8018a44 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012bcc:	7dfb      	ldrb	r3, [r7, #23]
 8012bce:	b29c      	uxth	r4, r3
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bd4:	3b01      	subs	r3, #1
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7f8 f93e 	bl	800ae58 <lwip_htonl>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2200      	movs	r2, #0
 8012be0:	4621      	mov	r1, r4
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f7ff fe66 	bl	80128b4 <tcp_output_alloc_header>
 8012be8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d102      	bne.n	8012bf6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf4:	e010      	b.n	8012c18 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012bf6:	7dfb      	ldrb	r3, [r7, #23]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	6939      	ldr	r1, [r7, #16]
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7ff fe97 	bl	8012930 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	3304      	adds	r3, #4
 8012c08:	6939      	ldr	r1, [r7, #16]
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f7ff fed0 	bl	80129b0 <tcp_output_control_segment>
 8012c10:	4603      	mov	r3, r0
 8012c12:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	371c      	adds	r7, #28
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd90      	pop	{r4, r7, pc}
 8012c20:	0801b5b8 	.word	0x0801b5b8
 8012c24:	0801bd94 	.word	0x0801bd94
 8012c28:	0801b60c 	.word	0x0801b60c

08012c2c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012c2c:	b590      	push	{r4, r7, lr}
 8012c2e:	b08b      	sub	sp, #44	; 0x2c
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c34:	2300      	movs	r3, #0
 8012c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d106      	bne.n	8012c4e <tcp_zero_window_probe+0x22>
 8012c40:	4b4c      	ldr	r3, [pc, #304]	; (8012d74 <tcp_zero_window_probe+0x148>)
 8012c42:	f640 024f 	movw	r2, #2127	; 0x84f
 8012c46:	494c      	ldr	r1, [pc, #304]	; (8012d78 <tcp_zero_window_probe+0x14c>)
 8012c48:	484c      	ldr	r0, [pc, #304]	; (8012d7c <tcp_zero_window_probe+0x150>)
 8012c4a:	f005 fefb 	bl	8018a44 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c52:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012c54:	6a3b      	ldr	r3, [r7, #32]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d101      	bne.n	8012c5e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	e086      	b.n	8012d6c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012c64:	2bff      	cmp	r3, #255	; 0xff
 8012c66:	d007      	beq.n	8012c78 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012c6e:	3301      	adds	r3, #1
 8012c70:	b2da      	uxtb	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	899b      	ldrh	r3, [r3, #12]
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7f8 f8d5 	bl	800ae30 <lwip_htons>
 8012c86:	4603      	mov	r3, r0
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	f003 0301 	and.w	r3, r3, #1
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d005      	beq.n	8012c9e <tcp_zero_window_probe+0x72>
 8012c92:	6a3b      	ldr	r3, [r7, #32]
 8012c94:	891b      	ldrh	r3, [r3, #8]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d101      	bne.n	8012c9e <tcp_zero_window_probe+0x72>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e000      	b.n	8012ca0 <tcp_zero_window_probe+0x74>
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012ca2:	7ffb      	ldrb	r3, [r7, #31]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	bf0c      	ite	eq
 8012ca8:	2301      	moveq	r3, #1
 8012caa:	2300      	movne	r3, #0
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cb4:	b299      	uxth	r1, r3
 8012cb6:	6a3b      	ldr	r3, [r7, #32]
 8012cb8:	68db      	ldr	r3, [r3, #12]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	8bba      	ldrh	r2, [r7, #28]
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f7ff fdf8 	bl	80128b4 <tcp_output_alloc_header>
 8012cc4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d102      	bne.n	8012cd2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8012cd0:	e04c      	b.n	8012d6c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012cd8:	7ffb      	ldrb	r3, [r7, #31]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d011      	beq.n	8012d02 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	899b      	ldrh	r3, [r3, #12]
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	b21b      	sxth	r3, r3
 8012ce6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012cea:	b21c      	sxth	r4, r3
 8012cec:	2011      	movs	r0, #17
 8012cee:	f7f8 f89f 	bl	800ae30 <lwip_htons>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	b21b      	sxth	r3, r3
 8012cf6:	4323      	orrs	r3, r4
 8012cf8:	b21b      	sxth	r3, r3
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	819a      	strh	r2, [r3, #12]
 8012d00:	e010      	b.n	8012d24 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	3314      	adds	r3, #20
 8012d08:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012d0a:	6a3b      	ldr	r3, [r7, #32]
 8012d0c:	6858      	ldr	r0, [r3, #4]
 8012d0e:	6a3b      	ldr	r3, [r7, #32]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	891a      	ldrh	r2, [r3, #8]
 8012d14:	6a3b      	ldr	r3, [r7, #32]
 8012d16:	891b      	ldrh	r3, [r3, #8]
 8012d18:	1ad3      	subs	r3, r2, r3
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	6939      	ldr	r1, [r7, #16]
 8012d20:	f7f9 feee 	bl	800cb00 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012d24:	6a3b      	ldr	r3, [r7, #32]
 8012d26:	68db      	ldr	r3, [r3, #12]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7f8 f894 	bl	800ae58 <lwip_htonl>
 8012d30:	4603      	mov	r3, r0
 8012d32:	3301      	adds	r3, #1
 8012d34:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	1ad3      	subs	r3, r2, r3
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	da02      	bge.n	8012d48 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	68fa      	ldr	r2, [r7, #12]
 8012d46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	69b9      	ldr	r1, [r7, #24]
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f7ff fded 	bl	8012930 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	3304      	adds	r3, #4
 8012d5c:	69b9      	ldr	r1, [r7, #24]
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7ff fe26 	bl	80129b0 <tcp_output_control_segment>
 8012d64:	4603      	mov	r3, r0
 8012d66:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d68:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	372c      	adds	r7, #44	; 0x2c
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd90      	pop	{r4, r7, pc}
 8012d74:	0801b5b8 	.word	0x0801b5b8
 8012d78:	0801bdb0 	.word	0x0801bdb0
 8012d7c:	0801b60c 	.word	0x0801b60c

08012d80 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012d88:	f7fa f80a 	bl	800cda0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012d8c:	4b0a      	ldr	r3, [pc, #40]	; (8012db8 <tcpip_tcp_timer+0x38>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d103      	bne.n	8012d9c <tcpip_tcp_timer+0x1c>
 8012d94:	4b09      	ldr	r3, [pc, #36]	; (8012dbc <tcpip_tcp_timer+0x3c>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d005      	beq.n	8012da8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	4908      	ldr	r1, [pc, #32]	; (8012dc0 <tcpip_tcp_timer+0x40>)
 8012da0:	20fa      	movs	r0, #250	; 0xfa
 8012da2:	f000 f8f3 	bl	8012f8c <sys_timeout>
 8012da6:	e003      	b.n	8012db0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012da8:	4b06      	ldr	r3, [pc, #24]	; (8012dc4 <tcpip_tcp_timer+0x44>)
 8012daa:	2200      	movs	r2, #0
 8012dac:	601a      	str	r2, [r3, #0]
  }
}
 8012dae:	bf00      	nop
 8012db0:	bf00      	nop
 8012db2:	3708      	adds	r7, #8
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	2000be3c 	.word	0x2000be3c
 8012dbc:	2000be40 	.word	0x2000be40
 8012dc0:	08012d81 	.word	0x08012d81
 8012dc4:	2000be88 	.word	0x2000be88

08012dc8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012dcc:	4b0a      	ldr	r3, [pc, #40]	; (8012df8 <tcp_timer_needed+0x30>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d10f      	bne.n	8012df4 <tcp_timer_needed+0x2c>
 8012dd4:	4b09      	ldr	r3, [pc, #36]	; (8012dfc <tcp_timer_needed+0x34>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d103      	bne.n	8012de4 <tcp_timer_needed+0x1c>
 8012ddc:	4b08      	ldr	r3, [pc, #32]	; (8012e00 <tcp_timer_needed+0x38>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d007      	beq.n	8012df4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012de4:	4b04      	ldr	r3, [pc, #16]	; (8012df8 <tcp_timer_needed+0x30>)
 8012de6:	2201      	movs	r2, #1
 8012de8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012dea:	2200      	movs	r2, #0
 8012dec:	4905      	ldr	r1, [pc, #20]	; (8012e04 <tcp_timer_needed+0x3c>)
 8012dee:	20fa      	movs	r0, #250	; 0xfa
 8012df0:	f000 f8cc 	bl	8012f8c <sys_timeout>
  }
}
 8012df4:	bf00      	nop
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	2000be88 	.word	0x2000be88
 8012dfc:	2000be3c 	.word	0x2000be3c
 8012e00:	2000be40 	.word	0x2000be40
 8012e04:	08012d81 	.word	0x08012d81

08012e08 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b086      	sub	sp, #24
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	60f8      	str	r0, [r7, #12]
 8012e10:	60b9      	str	r1, [r7, #8]
 8012e12:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012e14:	200a      	movs	r0, #10
 8012e16:	f7f8 fdbb 	bl	800b990 <memp_malloc>
 8012e1a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d109      	bne.n	8012e36 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d151      	bne.n	8012ecc <sys_timeout_abs+0xc4>
 8012e28:	4b2a      	ldr	r3, [pc, #168]	; (8012ed4 <sys_timeout_abs+0xcc>)
 8012e2a:	22be      	movs	r2, #190	; 0xbe
 8012e2c:	492a      	ldr	r1, [pc, #168]	; (8012ed8 <sys_timeout_abs+0xd0>)
 8012e2e:	482b      	ldr	r0, [pc, #172]	; (8012edc <sys_timeout_abs+0xd4>)
 8012e30:	f005 fe08 	bl	8018a44 <iprintf>
    return;
 8012e34:	e04a      	b.n	8012ecc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	68ba      	ldr	r2, [r7, #8]
 8012e40:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	687a      	ldr	r2, [r7, #4]
 8012e46:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	68fa      	ldr	r2, [r7, #12]
 8012e4c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012e4e:	4b24      	ldr	r3, [pc, #144]	; (8012ee0 <sys_timeout_abs+0xd8>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d103      	bne.n	8012e5e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012e56:	4a22      	ldr	r2, [pc, #136]	; (8012ee0 <sys_timeout_abs+0xd8>)
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	6013      	str	r3, [r2, #0]
    return;
 8012e5c:	e037      	b.n	8012ece <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	685a      	ldr	r2, [r3, #4]
 8012e62:	4b1f      	ldr	r3, [pc, #124]	; (8012ee0 <sys_timeout_abs+0xd8>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	1ad3      	subs	r3, r2, r3
 8012e6a:	0fdb      	lsrs	r3, r3, #31
 8012e6c:	f003 0301 	and.w	r3, r3, #1
 8012e70:	b2db      	uxtb	r3, r3
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d007      	beq.n	8012e86 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012e76:	4b1a      	ldr	r3, [pc, #104]	; (8012ee0 <sys_timeout_abs+0xd8>)
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012e7e:	4a18      	ldr	r2, [pc, #96]	; (8012ee0 <sys_timeout_abs+0xd8>)
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	6013      	str	r3, [r2, #0]
 8012e84:	e023      	b.n	8012ece <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e86:	4b16      	ldr	r3, [pc, #88]	; (8012ee0 <sys_timeout_abs+0xd8>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	617b      	str	r3, [r7, #20]
 8012e8c:	e01a      	b.n	8012ec4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d00b      	beq.n	8012eae <sys_timeout_abs+0xa6>
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	685a      	ldr	r2, [r3, #4]
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	1ad3      	subs	r3, r2, r3
 8012ea2:	0fdb      	lsrs	r3, r3, #31
 8012ea4:	f003 0301 	and.w	r3, r3, #1
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d007      	beq.n	8012ebe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	693a      	ldr	r2, [r7, #16]
 8012eba:	601a      	str	r2, [r3, #0]
        break;
 8012ebc:	e007      	b.n	8012ece <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	617b      	str	r3, [r7, #20]
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d1e1      	bne.n	8012e8e <sys_timeout_abs+0x86>
 8012eca:	e000      	b.n	8012ece <sys_timeout_abs+0xc6>
    return;
 8012ecc:	bf00      	nop
      }
    }
  }
}
 8012ece:	3718      	adds	r7, #24
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	0801bdd4 	.word	0x0801bdd4
 8012ed8:	0801be08 	.word	0x0801be08
 8012edc:	0801be48 	.word	0x0801be48
 8012ee0:	2000be80 	.word	0x2000be80

08012ee4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b086      	sub	sp, #24
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	4798      	blx	r3

  now = sys_now();
 8012ef6:	f7f2 fac5 	bl	8005484 <sys_now>
 8012efa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	4b0f      	ldr	r3, [pc, #60]	; (8012f40 <lwip_cyclic_timer+0x5c>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4413      	add	r3, r2
 8012f06:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012f08:	68fa      	ldr	r2, [r7, #12]
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	1ad3      	subs	r3, r2, r3
 8012f0e:	0fdb      	lsrs	r3, r3, #31
 8012f10:	f003 0301 	and.w	r3, r3, #1
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d009      	beq.n	8012f2e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	4413      	add	r3, r2
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	4907      	ldr	r1, [pc, #28]	; (8012f44 <lwip_cyclic_timer+0x60>)
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7ff ff6e 	bl	8012e08 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012f2c:	e004      	b.n	8012f38 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	4904      	ldr	r1, [pc, #16]	; (8012f44 <lwip_cyclic_timer+0x60>)
 8012f32:	68f8      	ldr	r0, [r7, #12]
 8012f34:	f7ff ff68 	bl	8012e08 <sys_timeout_abs>
}
 8012f38:	bf00      	nop
 8012f3a:	3718      	adds	r7, #24
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}
 8012f40:	2000be84 	.word	0x2000be84
 8012f44:	08012ee5 	.word	0x08012ee5

08012f48 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f4e:	2301      	movs	r3, #1
 8012f50:	607b      	str	r3, [r7, #4]
 8012f52:	e00e      	b.n	8012f72 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012f54:	4a0b      	ldr	r2, [pc, #44]	; (8012f84 <sys_timeouts_init+0x3c>)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	00db      	lsls	r3, r3, #3
 8012f60:	4a08      	ldr	r2, [pc, #32]	; (8012f84 <sys_timeouts_init+0x3c>)
 8012f62:	4413      	add	r3, r2
 8012f64:	461a      	mov	r2, r3
 8012f66:	4908      	ldr	r1, [pc, #32]	; (8012f88 <sys_timeouts_init+0x40>)
 8012f68:	f000 f810 	bl	8012f8c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	3301      	adds	r3, #1
 8012f70:	607b      	str	r3, [r7, #4]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2b04      	cmp	r3, #4
 8012f76:	d9ed      	bls.n	8012f54 <sys_timeouts_init+0xc>
  }
}
 8012f78:	bf00      	nop
 8012f7a:	bf00      	nop
 8012f7c:	3708      	adds	r7, #8
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
 8012f82:	bf00      	nop
 8012f84:	0801cdac 	.word	0x0801cdac
 8012f88:	08012ee5 	.word	0x08012ee5

08012f8c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f9e:	d306      	bcc.n	8012fae <sys_timeout+0x22>
 8012fa0:	4b0a      	ldr	r3, [pc, #40]	; (8012fcc <sys_timeout+0x40>)
 8012fa2:	f240 1229 	movw	r2, #297	; 0x129
 8012fa6:	490a      	ldr	r1, [pc, #40]	; (8012fd0 <sys_timeout+0x44>)
 8012fa8:	480a      	ldr	r0, [pc, #40]	; (8012fd4 <sys_timeout+0x48>)
 8012faa:	f005 fd4b 	bl	8018a44 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012fae:	f7f2 fa69 	bl	8005484 <sys_now>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	68b9      	ldr	r1, [r7, #8]
 8012fbe:	6978      	ldr	r0, [r7, #20]
 8012fc0:	f7ff ff22 	bl	8012e08 <sys_timeout_abs>
#endif
}
 8012fc4:	bf00      	nop
 8012fc6:	3718      	adds	r7, #24
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	0801bdd4 	.word	0x0801bdd4
 8012fd0:	0801be70 	.word	0x0801be70
 8012fd4:	0801be48 	.word	0x0801be48

08012fd8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012fe2:	4b19      	ldr	r3, [pc, #100]	; (8013048 <sys_untimeout+0x70>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d029      	beq.n	801303e <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8012fea:	4b17      	ldr	r3, [pc, #92]	; (8013048 <sys_untimeout+0x70>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	60bb      	str	r3, [r7, #8]
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	60fb      	str	r3, [r7, #12]
 8012ff4:	e01f      	b.n	8013036 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d115      	bne.n	801302c <sys_untimeout+0x54>
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	68db      	ldr	r3, [r3, #12]
 8013004:	683a      	ldr	r2, [r7, #0]
 8013006:	429a      	cmp	r2, r3
 8013008:	d110      	bne.n	801302c <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d104      	bne.n	801301a <sys_untimeout+0x42>
        next_timeout = t->next;
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	4a0c      	ldr	r2, [pc, #48]	; (8013048 <sys_untimeout+0x70>)
 8013016:	6013      	str	r3, [r2, #0]
 8013018:	e003      	b.n	8013022 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8013022:	68b9      	ldr	r1, [r7, #8]
 8013024:	200a      	movs	r0, #10
 8013026:	f7f8 fd29 	bl	800ba7c <memp_free>
      return;
 801302a:	e009      	b.n	8013040 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	60fb      	str	r3, [r7, #12]
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	60bb      	str	r3, [r7, #8]
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d1dc      	bne.n	8012ff6 <sys_untimeout+0x1e>
    }
  }
  return;
 801303c:	e000      	b.n	8013040 <sys_untimeout+0x68>
    return;
 801303e:	bf00      	nop
}
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	2000be80 	.word	0x2000be80

0801304c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013052:	f7f2 fa17 	bl	8005484 <sys_now>
 8013056:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013058:	4b17      	ldr	r3, [pc, #92]	; (80130b8 <sys_check_timeouts+0x6c>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d022      	beq.n	80130aa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	68fa      	ldr	r2, [r7, #12]
 801306a:	1ad3      	subs	r3, r2, r3
 801306c:	0fdb      	lsrs	r3, r3, #31
 801306e:	f003 0301 	and.w	r3, r3, #1
 8013072:	b2db      	uxtb	r3, r3
 8013074:	2b00      	cmp	r3, #0
 8013076:	d11a      	bne.n	80130ae <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4a0e      	ldr	r2, [pc, #56]	; (80130b8 <sys_check_timeouts+0x6c>)
 801307e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	689b      	ldr	r3, [r3, #8]
 8013084:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	68db      	ldr	r3, [r3, #12]
 801308a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	685b      	ldr	r3, [r3, #4]
 8013090:	4a0a      	ldr	r2, [pc, #40]	; (80130bc <sys_check_timeouts+0x70>)
 8013092:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013094:	68b9      	ldr	r1, [r7, #8]
 8013096:	200a      	movs	r0, #10
 8013098:	f7f8 fcf0 	bl	800ba7c <memp_free>
    if (handler != NULL) {
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d0da      	beq.n	8013058 <sys_check_timeouts+0xc>
      handler(arg);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6838      	ldr	r0, [r7, #0]
 80130a6:	4798      	blx	r3
  do {
 80130a8:	e7d6      	b.n	8013058 <sys_check_timeouts+0xc>
      return;
 80130aa:	bf00      	nop
 80130ac:	e000      	b.n	80130b0 <sys_check_timeouts+0x64>
      return;
 80130ae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80130b0:	3710      	adds	r7, #16
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	2000be80 	.word	0x2000be80
 80130bc:	2000be84 	.word	0x2000be84

080130c0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80130c6:	4b16      	ldr	r3, [pc, #88]	; (8013120 <sys_timeouts_sleeptime+0x60>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d102      	bne.n	80130d4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80130ce:	f04f 33ff 	mov.w	r3, #4294967295
 80130d2:	e020      	b.n	8013116 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80130d4:	f7f2 f9d6 	bl	8005484 <sys_now>
 80130d8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80130da:	4b11      	ldr	r3, [pc, #68]	; (8013120 <sys_timeouts_sleeptime+0x60>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	685a      	ldr	r2, [r3, #4]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	1ad3      	subs	r3, r2, r3
 80130e4:	0fdb      	lsrs	r3, r3, #31
 80130e6:	f003 0301 	and.w	r3, r3, #1
 80130ea:	b2db      	uxtb	r3, r3
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d001      	beq.n	80130f4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80130f0:	2300      	movs	r3, #0
 80130f2:	e010      	b.n	8013116 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80130f4:	4b0a      	ldr	r3, [pc, #40]	; (8013120 <sys_timeouts_sleeptime+0x60>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	685a      	ldr	r2, [r3, #4]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	1ad3      	subs	r3, r2, r3
 80130fe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	2b00      	cmp	r3, #0
 8013104:	da06      	bge.n	8013114 <sys_timeouts_sleeptime+0x54>
 8013106:	4b07      	ldr	r3, [pc, #28]	; (8013124 <sys_timeouts_sleeptime+0x64>)
 8013108:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801310c:	4906      	ldr	r1, [pc, #24]	; (8013128 <sys_timeouts_sleeptime+0x68>)
 801310e:	4807      	ldr	r0, [pc, #28]	; (801312c <sys_timeouts_sleeptime+0x6c>)
 8013110:	f005 fc98 	bl	8018a44 <iprintf>
    return ret;
 8013114:	683b      	ldr	r3, [r7, #0]
  }
}
 8013116:	4618      	mov	r0, r3
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	2000be80 	.word	0x2000be80
 8013124:	0801bdd4 	.word	0x0801bdd4
 8013128:	0801bea8 	.word	0x0801bea8
 801312c:	0801be48 	.word	0x0801be48

08013130 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013134:	f005 fc9e 	bl	8018a74 <rand>
 8013138:	4603      	mov	r3, r0
 801313a:	b29b      	uxth	r3, r3
 801313c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013140:	b29b      	uxth	r3, r3
 8013142:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013146:	b29a      	uxth	r2, r3
 8013148:	4b01      	ldr	r3, [pc, #4]	; (8013150 <udp_init+0x20>)
 801314a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801314c:	bf00      	nop
 801314e:	bd80      	pop	{r7, pc}
 8013150:	20000018 	.word	0x20000018

08013154 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013154:	b480      	push	{r7}
 8013156:	b083      	sub	sp, #12
 8013158:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801315a:	2300      	movs	r3, #0
 801315c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801315e:	4b17      	ldr	r3, [pc, #92]	; (80131bc <udp_new_port+0x68>)
 8013160:	881b      	ldrh	r3, [r3, #0]
 8013162:	1c5a      	adds	r2, r3, #1
 8013164:	b291      	uxth	r1, r2
 8013166:	4a15      	ldr	r2, [pc, #84]	; (80131bc <udp_new_port+0x68>)
 8013168:	8011      	strh	r1, [r2, #0]
 801316a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801316e:	4293      	cmp	r3, r2
 8013170:	d103      	bne.n	801317a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013172:	4b12      	ldr	r3, [pc, #72]	; (80131bc <udp_new_port+0x68>)
 8013174:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013178:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801317a:	4b11      	ldr	r3, [pc, #68]	; (80131c0 <udp_new_port+0x6c>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	603b      	str	r3, [r7, #0]
 8013180:	e011      	b.n	80131a6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	8a5a      	ldrh	r2, [r3, #18]
 8013186:	4b0d      	ldr	r3, [pc, #52]	; (80131bc <udp_new_port+0x68>)
 8013188:	881b      	ldrh	r3, [r3, #0]
 801318a:	429a      	cmp	r2, r3
 801318c:	d108      	bne.n	80131a0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801318e:	88fb      	ldrh	r3, [r7, #6]
 8013190:	3301      	adds	r3, #1
 8013192:	80fb      	strh	r3, [r7, #6]
 8013194:	88fb      	ldrh	r3, [r7, #6]
 8013196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801319a:	d3e0      	bcc.n	801315e <udp_new_port+0xa>
        return 0;
 801319c:	2300      	movs	r3, #0
 801319e:	e007      	b.n	80131b0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	603b      	str	r3, [r7, #0]
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d1ea      	bne.n	8013182 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80131ac:	4b03      	ldr	r3, [pc, #12]	; (80131bc <udp_new_port+0x68>)
 80131ae:	881b      	ldrh	r3, [r3, #0]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bc80      	pop	{r7}
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	20000018 	.word	0x20000018
 80131c0:	2000be8c 	.word	0x2000be8c

080131c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	60f8      	str	r0, [r7, #12]
 80131cc:	60b9      	str	r1, [r7, #8]
 80131ce:	4613      	mov	r3, r2
 80131d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d105      	bne.n	80131e4 <udp_input_local_match+0x20>
 80131d8:	4b27      	ldr	r3, [pc, #156]	; (8013278 <udp_input_local_match+0xb4>)
 80131da:	2287      	movs	r2, #135	; 0x87
 80131dc:	4927      	ldr	r1, [pc, #156]	; (801327c <udp_input_local_match+0xb8>)
 80131de:	4828      	ldr	r0, [pc, #160]	; (8013280 <udp_input_local_match+0xbc>)
 80131e0:	f005 fc30 	bl	8018a44 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d105      	bne.n	80131f6 <udp_input_local_match+0x32>
 80131ea:	4b23      	ldr	r3, [pc, #140]	; (8013278 <udp_input_local_match+0xb4>)
 80131ec:	2288      	movs	r2, #136	; 0x88
 80131ee:	4925      	ldr	r1, [pc, #148]	; (8013284 <udp_input_local_match+0xc0>)
 80131f0:	4823      	ldr	r0, [pc, #140]	; (8013280 <udp_input_local_match+0xbc>)
 80131f2:	f005 fc27 	bl	8018a44 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	7a1b      	ldrb	r3, [r3, #8]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d00b      	beq.n	8013216 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	7a1a      	ldrb	r2, [r3, #8]
 8013202:	4b21      	ldr	r3, [pc, #132]	; (8013288 <udp_input_local_match+0xc4>)
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801320a:	3301      	adds	r3, #1
 801320c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801320e:	429a      	cmp	r2, r3
 8013210:	d001      	beq.n	8013216 <udp_input_local_match+0x52>
    return 0;
 8013212:	2300      	movs	r3, #0
 8013214:	e02b      	b.n	801326e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013216:	79fb      	ldrb	r3, [r7, #7]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d018      	beq.n	801324e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d013      	beq.n	801324a <udp_input_local_match+0x86>
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d00f      	beq.n	801324a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801322a:	4b17      	ldr	r3, [pc, #92]	; (8013288 <udp_input_local_match+0xc4>)
 801322c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013232:	d00a      	beq.n	801324a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	681a      	ldr	r2, [r3, #0]
 8013238:	4b13      	ldr	r3, [pc, #76]	; (8013288 <udp_input_local_match+0xc4>)
 801323a:	695b      	ldr	r3, [r3, #20]
 801323c:	405a      	eors	r2, r3
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	3308      	adds	r3, #8
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013246:	2b00      	cmp	r3, #0
 8013248:	d110      	bne.n	801326c <udp_input_local_match+0xa8>
          return 1;
 801324a:	2301      	movs	r3, #1
 801324c:	e00f      	b.n	801326e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d009      	beq.n	8013268 <udp_input_local_match+0xa4>
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d005      	beq.n	8013268 <udp_input_local_match+0xa4>
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	4b09      	ldr	r3, [pc, #36]	; (8013288 <udp_input_local_match+0xc4>)
 8013262:	695b      	ldr	r3, [r3, #20]
 8013264:	429a      	cmp	r2, r3
 8013266:	d101      	bne.n	801326c <udp_input_local_match+0xa8>
        return 1;
 8013268:	2301      	movs	r3, #1
 801326a:	e000      	b.n	801326e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801326c:	2300      	movs	r3, #0
}
 801326e:	4618      	mov	r0, r3
 8013270:	3710      	adds	r7, #16
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop
 8013278:	0801bebc 	.word	0x0801bebc
 801327c:	0801beec 	.word	0x0801beec
 8013280:	0801bf10 	.word	0x0801bf10
 8013284:	0801bf38 	.word	0x0801bf38
 8013288:	20008d10 	.word	0x20008d10

0801328c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801328c:	b590      	push	{r4, r7, lr}
 801328e:	b08d      	sub	sp, #52	; 0x34
 8013290:	af02      	add	r7, sp, #8
 8013292:	6078      	str	r0, [r7, #4]
 8013294:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013296:	2300      	movs	r3, #0
 8013298:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d105      	bne.n	80132ac <udp_input+0x20>
 80132a0:	4b7c      	ldr	r3, [pc, #496]	; (8013494 <udp_input+0x208>)
 80132a2:	22cf      	movs	r2, #207	; 0xcf
 80132a4:	497c      	ldr	r1, [pc, #496]	; (8013498 <udp_input+0x20c>)
 80132a6:	487d      	ldr	r0, [pc, #500]	; (801349c <udp_input+0x210>)
 80132a8:	f005 fbcc 	bl	8018a44 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d105      	bne.n	80132be <udp_input+0x32>
 80132b2:	4b78      	ldr	r3, [pc, #480]	; (8013494 <udp_input+0x208>)
 80132b4:	22d0      	movs	r2, #208	; 0xd0
 80132b6:	497a      	ldr	r1, [pc, #488]	; (80134a0 <udp_input+0x214>)
 80132b8:	4878      	ldr	r0, [pc, #480]	; (801349c <udp_input+0x210>)
 80132ba:	f005 fbc3 	bl	8018a44 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	895b      	ldrh	r3, [r3, #10]
 80132c2:	2b07      	cmp	r3, #7
 80132c4:	d803      	bhi.n	80132ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f7f9 fa16 	bl	800c6f8 <pbuf_free>
    goto end;
 80132cc:	e0de      	b.n	801348c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80132d4:	4b73      	ldr	r3, [pc, #460]	; (80134a4 <udp_input+0x218>)
 80132d6:	695b      	ldr	r3, [r3, #20]
 80132d8:	4a72      	ldr	r2, [pc, #456]	; (80134a4 <udp_input+0x218>)
 80132da:	6812      	ldr	r2, [r2, #0]
 80132dc:	4611      	mov	r1, r2
 80132de:	4618      	mov	r0, r3
 80132e0:	f003 fdec 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 80132e4:	4603      	mov	r3, r0
 80132e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80132e8:	697b      	ldr	r3, [r7, #20]
 80132ea:	881b      	ldrh	r3, [r3, #0]
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7f7 fd9e 	bl	800ae30 <lwip_htons>
 80132f4:	4603      	mov	r3, r0
 80132f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	885b      	ldrh	r3, [r3, #2]
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	4618      	mov	r0, r3
 8013300:	f7f7 fd96 	bl	800ae30 <lwip_htons>
 8013304:	4603      	mov	r3, r0
 8013306:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013308:	2300      	movs	r3, #0
 801330a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801330c:	2300      	movs	r3, #0
 801330e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013310:	2300      	movs	r3, #0
 8013312:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013314:	4b64      	ldr	r3, [pc, #400]	; (80134a8 <udp_input+0x21c>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	627b      	str	r3, [r7, #36]	; 0x24
 801331a:	e054      	b.n	80133c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801331e:	8a5b      	ldrh	r3, [r3, #18]
 8013320:	89fa      	ldrh	r2, [r7, #14]
 8013322:	429a      	cmp	r2, r3
 8013324:	d14a      	bne.n	80133bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013326:	7cfb      	ldrb	r3, [r7, #19]
 8013328:	461a      	mov	r2, r3
 801332a:	6839      	ldr	r1, [r7, #0]
 801332c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801332e:	f7ff ff49 	bl	80131c4 <udp_input_local_match>
 8013332:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013334:	2b00      	cmp	r3, #0
 8013336:	d041      	beq.n	80133bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333a:	7c1b      	ldrb	r3, [r3, #16]
 801333c:	f003 0304 	and.w	r3, r3, #4
 8013340:	2b00      	cmp	r3, #0
 8013342:	d11d      	bne.n	8013380 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d102      	bne.n	8013350 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801334c:	61fb      	str	r3, [r7, #28]
 801334e:	e017      	b.n	8013380 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013350:	7cfb      	ldrb	r3, [r7, #19]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d014      	beq.n	8013380 <udp_input+0xf4>
 8013356:	4b53      	ldr	r3, [pc, #332]	; (80134a4 <udp_input+0x218>)
 8013358:	695b      	ldr	r3, [r3, #20]
 801335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801335e:	d10f      	bne.n	8013380 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	3304      	adds	r3, #4
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	429a      	cmp	r2, r3
 801336c:	d008      	beq.n	8013380 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	3304      	adds	r3, #4
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	429a      	cmp	r2, r3
 801337a:	d101      	bne.n	8013380 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801337e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013382:	8a9b      	ldrh	r3, [r3, #20]
 8013384:	8a3a      	ldrh	r2, [r7, #16]
 8013386:	429a      	cmp	r2, r3
 8013388:	d118      	bne.n	80133bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801338c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801338e:	2b00      	cmp	r3, #0
 8013390:	d005      	beq.n	801339e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013394:	685a      	ldr	r2, [r3, #4]
 8013396:	4b43      	ldr	r3, [pc, #268]	; (80134a4 <udp_input+0x218>)
 8013398:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801339a:	429a      	cmp	r2, r3
 801339c:	d10e      	bne.n	80133bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801339e:	6a3b      	ldr	r3, [r7, #32]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d014      	beq.n	80133ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80133a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a6:	68da      	ldr	r2, [r3, #12]
 80133a8:	6a3b      	ldr	r3, [r7, #32]
 80133aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80133ac:	4b3e      	ldr	r3, [pc, #248]	; (80134a8 <udp_input+0x21c>)
 80133ae:	681a      	ldr	r2, [r3, #0]
 80133b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80133b4:	4a3c      	ldr	r2, [pc, #240]	; (80134a8 <udp_input+0x21c>)
 80133b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80133ba:	e008      	b.n	80133ce <udp_input+0x142>
      }
    }

    prev = pcb;
 80133bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	627b      	str	r3, [r7, #36]	; 0x24
 80133c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d1a7      	bne.n	801331c <udp_input+0x90>
 80133cc:	e000      	b.n	80133d0 <udp_input+0x144>
        break;
 80133ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80133d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d101      	bne.n	80133da <udp_input+0x14e>
    pcb = uncon_pcb;
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80133da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d002      	beq.n	80133e6 <udp_input+0x15a>
    for_us = 1;
 80133e0:	2301      	movs	r3, #1
 80133e2:	76fb      	strb	r3, [r7, #27]
 80133e4:	e00a      	b.n	80133fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	3304      	adds	r3, #4
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	4b2d      	ldr	r3, [pc, #180]	; (80134a4 <udp_input+0x218>)
 80133ee:	695b      	ldr	r3, [r3, #20]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	bf0c      	ite	eq
 80133f4:	2301      	moveq	r3, #1
 80133f6:	2300      	movne	r3, #0
 80133f8:	b2db      	uxtb	r3, r3
 80133fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80133fc:	7efb      	ldrb	r3, [r7, #27]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d041      	beq.n	8013486 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013402:	2108      	movs	r1, #8
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7f9 f8f1 	bl	800c5ec <pbuf_remove_header>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d00a      	beq.n	8013426 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013410:	4b20      	ldr	r3, [pc, #128]	; (8013494 <udp_input+0x208>)
 8013412:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013416:	4925      	ldr	r1, [pc, #148]	; (80134ac <udp_input+0x220>)
 8013418:	4820      	ldr	r0, [pc, #128]	; (801349c <udp_input+0x210>)
 801341a:	f005 fb13 	bl	8018a44 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f7f9 f96a 	bl	800c6f8 <pbuf_free>
      goto end;
 8013424:	e032      	b.n	801348c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013428:	2b00      	cmp	r3, #0
 801342a:	d012      	beq.n	8013452 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342e:	699b      	ldr	r3, [r3, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d00a      	beq.n	801344a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013436:	699c      	ldr	r4, [r3, #24]
 8013438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343a:	69d8      	ldr	r0, [r3, #28]
 801343c:	8a3b      	ldrh	r3, [r7, #16]
 801343e:	9300      	str	r3, [sp, #0]
 8013440:	4b1b      	ldr	r3, [pc, #108]	; (80134b0 <udp_input+0x224>)
 8013442:	687a      	ldr	r2, [r7, #4]
 8013444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013446:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013448:	e021      	b.n	801348e <udp_input+0x202>
        pbuf_free(p);
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7f9 f954 	bl	800c6f8 <pbuf_free>
        goto end;
 8013450:	e01c      	b.n	801348c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013452:	7cfb      	ldrb	r3, [r7, #19]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d112      	bne.n	801347e <udp_input+0x1f2>
 8013458:	4b12      	ldr	r3, [pc, #72]	; (80134a4 <udp_input+0x218>)
 801345a:	695b      	ldr	r3, [r3, #20]
 801345c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013460:	2be0      	cmp	r3, #224	; 0xe0
 8013462:	d00c      	beq.n	801347e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013464:	4b0f      	ldr	r3, [pc, #60]	; (80134a4 <udp_input+0x218>)
 8013466:	899b      	ldrh	r3, [r3, #12]
 8013468:	3308      	adds	r3, #8
 801346a:	b29b      	uxth	r3, r3
 801346c:	b21b      	sxth	r3, r3
 801346e:	4619      	mov	r1, r3
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f7f9 f92e 	bl	800c6d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013476:	2103      	movs	r1, #3
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f003 f9d9 	bl	8016830 <icmp_dest_unreach>
      pbuf_free(p);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f7f9 f93a 	bl	800c6f8 <pbuf_free>
  return;
 8013484:	e003      	b.n	801348e <udp_input+0x202>
    pbuf_free(p);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f7f9 f936 	bl	800c6f8 <pbuf_free>
  return;
 801348c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801348e:	372c      	adds	r7, #44	; 0x2c
 8013490:	46bd      	mov	sp, r7
 8013492:	bd90      	pop	{r4, r7, pc}
 8013494:	0801bebc 	.word	0x0801bebc
 8013498:	0801bf60 	.word	0x0801bf60
 801349c:	0801bf10 	.word	0x0801bf10
 80134a0:	0801bf78 	.word	0x0801bf78
 80134a4:	20008d10 	.word	0x20008d10
 80134a8:	2000be8c 	.word	0x2000be8c
 80134ac:	0801bf94 	.word	0x0801bf94
 80134b0:	20008d20 	.word	0x20008d20

080134b4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b088      	sub	sp, #32
 80134b8:	af02      	add	r7, sp, #8
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	607a      	str	r2, [r7, #4]
 80134c0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d109      	bne.n	80134dc <udp_sendto_if+0x28>
 80134c8:	4b2e      	ldr	r3, [pc, #184]	; (8013584 <udp_sendto_if+0xd0>)
 80134ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134ce:	492e      	ldr	r1, [pc, #184]	; (8013588 <udp_sendto_if+0xd4>)
 80134d0:	482e      	ldr	r0, [pc, #184]	; (801358c <udp_sendto_if+0xd8>)
 80134d2:	f005 fab7 	bl	8018a44 <iprintf>
 80134d6:	f06f 030f 	mvn.w	r3, #15
 80134da:	e04f      	b.n	801357c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d109      	bne.n	80134f6 <udp_sendto_if+0x42>
 80134e2:	4b28      	ldr	r3, [pc, #160]	; (8013584 <udp_sendto_if+0xd0>)
 80134e4:	f240 2281 	movw	r2, #641	; 0x281
 80134e8:	4929      	ldr	r1, [pc, #164]	; (8013590 <udp_sendto_if+0xdc>)
 80134ea:	4828      	ldr	r0, [pc, #160]	; (801358c <udp_sendto_if+0xd8>)
 80134ec:	f005 faaa 	bl	8018a44 <iprintf>
 80134f0:	f06f 030f 	mvn.w	r3, #15
 80134f4:	e042      	b.n	801357c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d109      	bne.n	8013510 <udp_sendto_if+0x5c>
 80134fc:	4b21      	ldr	r3, [pc, #132]	; (8013584 <udp_sendto_if+0xd0>)
 80134fe:	f240 2282 	movw	r2, #642	; 0x282
 8013502:	4924      	ldr	r1, [pc, #144]	; (8013594 <udp_sendto_if+0xe0>)
 8013504:	4821      	ldr	r0, [pc, #132]	; (801358c <udp_sendto_if+0xd8>)
 8013506:	f005 fa9d 	bl	8018a44 <iprintf>
 801350a:	f06f 030f 	mvn.w	r3, #15
 801350e:	e035      	b.n	801357c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013510:	6a3b      	ldr	r3, [r7, #32]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d109      	bne.n	801352a <udp_sendto_if+0x76>
 8013516:	4b1b      	ldr	r3, [pc, #108]	; (8013584 <udp_sendto_if+0xd0>)
 8013518:	f240 2283 	movw	r2, #643	; 0x283
 801351c:	491e      	ldr	r1, [pc, #120]	; (8013598 <udp_sendto_if+0xe4>)
 801351e:	481b      	ldr	r0, [pc, #108]	; (801358c <udp_sendto_if+0xd8>)
 8013520:	f005 fa90 	bl	8018a44 <iprintf>
 8013524:	f06f 030f 	mvn.w	r3, #15
 8013528:	e028      	b.n	801357c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d009      	beq.n	8013544 <udp_sendto_if+0x90>
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d005      	beq.n	8013544 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013540:	2be0      	cmp	r3, #224	; 0xe0
 8013542:	d103      	bne.n	801354c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013544:	6a3b      	ldr	r3, [r7, #32]
 8013546:	3304      	adds	r3, #4
 8013548:	617b      	str	r3, [r7, #20]
 801354a:	e00b      	b.n	8013564 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	6a3b      	ldr	r3, [r7, #32]
 8013552:	3304      	adds	r3, #4
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	429a      	cmp	r2, r3
 8013558:	d002      	beq.n	8013560 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801355a:	f06f 0303 	mvn.w	r3, #3
 801355e:	e00d      	b.n	801357c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013564:	887a      	ldrh	r2, [r7, #2]
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	9301      	str	r3, [sp, #4]
 801356a:	6a3b      	ldr	r3, [r7, #32]
 801356c:	9300      	str	r3, [sp, #0]
 801356e:	4613      	mov	r3, r2
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	68b9      	ldr	r1, [r7, #8]
 8013574:	68f8      	ldr	r0, [r7, #12]
 8013576:	f000 f811 	bl	801359c <udp_sendto_if_src>
 801357a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801357c:	4618      	mov	r0, r3
 801357e:	3718      	adds	r7, #24
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	0801bebc 	.word	0x0801bebc
 8013588:	0801c030 	.word	0x0801c030
 801358c:	0801bf10 	.word	0x0801bf10
 8013590:	0801c04c 	.word	0x0801c04c
 8013594:	0801c068 	.word	0x0801c068
 8013598:	0801c088 	.word	0x0801c088

0801359c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b08c      	sub	sp, #48	; 0x30
 80135a0:	af04      	add	r7, sp, #16
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	607a      	str	r2, [r7, #4]
 80135a8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d109      	bne.n	80135c4 <udp_sendto_if_src+0x28>
 80135b0:	4b65      	ldr	r3, [pc, #404]	; (8013748 <udp_sendto_if_src+0x1ac>)
 80135b2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80135b6:	4965      	ldr	r1, [pc, #404]	; (801374c <udp_sendto_if_src+0x1b0>)
 80135b8:	4865      	ldr	r0, [pc, #404]	; (8013750 <udp_sendto_if_src+0x1b4>)
 80135ba:	f005 fa43 	bl	8018a44 <iprintf>
 80135be:	f06f 030f 	mvn.w	r3, #15
 80135c2:	e0bc      	b.n	801373e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d109      	bne.n	80135de <udp_sendto_if_src+0x42>
 80135ca:	4b5f      	ldr	r3, [pc, #380]	; (8013748 <udp_sendto_if_src+0x1ac>)
 80135cc:	f240 22d2 	movw	r2, #722	; 0x2d2
 80135d0:	4960      	ldr	r1, [pc, #384]	; (8013754 <udp_sendto_if_src+0x1b8>)
 80135d2:	485f      	ldr	r0, [pc, #380]	; (8013750 <udp_sendto_if_src+0x1b4>)
 80135d4:	f005 fa36 	bl	8018a44 <iprintf>
 80135d8:	f06f 030f 	mvn.w	r3, #15
 80135dc:	e0af      	b.n	801373e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d109      	bne.n	80135f8 <udp_sendto_if_src+0x5c>
 80135e4:	4b58      	ldr	r3, [pc, #352]	; (8013748 <udp_sendto_if_src+0x1ac>)
 80135e6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80135ea:	495b      	ldr	r1, [pc, #364]	; (8013758 <udp_sendto_if_src+0x1bc>)
 80135ec:	4858      	ldr	r0, [pc, #352]	; (8013750 <udp_sendto_if_src+0x1b4>)
 80135ee:	f005 fa29 	bl	8018a44 <iprintf>
 80135f2:	f06f 030f 	mvn.w	r3, #15
 80135f6:	e0a2      	b.n	801373e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80135f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d109      	bne.n	8013612 <udp_sendto_if_src+0x76>
 80135fe:	4b52      	ldr	r3, [pc, #328]	; (8013748 <udp_sendto_if_src+0x1ac>)
 8013600:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013604:	4955      	ldr	r1, [pc, #340]	; (801375c <udp_sendto_if_src+0x1c0>)
 8013606:	4852      	ldr	r0, [pc, #328]	; (8013750 <udp_sendto_if_src+0x1b4>)
 8013608:	f005 fa1c 	bl	8018a44 <iprintf>
 801360c:	f06f 030f 	mvn.w	r3, #15
 8013610:	e095      	b.n	801373e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013614:	2b00      	cmp	r3, #0
 8013616:	d109      	bne.n	801362c <udp_sendto_if_src+0x90>
 8013618:	4b4b      	ldr	r3, [pc, #300]	; (8013748 <udp_sendto_if_src+0x1ac>)
 801361a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801361e:	4950      	ldr	r1, [pc, #320]	; (8013760 <udp_sendto_if_src+0x1c4>)
 8013620:	484b      	ldr	r0, [pc, #300]	; (8013750 <udp_sendto_if_src+0x1b4>)
 8013622:	f005 fa0f 	bl	8018a44 <iprintf>
 8013626:	f06f 030f 	mvn.w	r3, #15
 801362a:	e088      	b.n	801373e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	8a5b      	ldrh	r3, [r3, #18]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d10f      	bne.n	8013654 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013634:	68f9      	ldr	r1, [r7, #12]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	8a5b      	ldrh	r3, [r3, #18]
 801363a:	461a      	mov	r2, r3
 801363c:	68f8      	ldr	r0, [r7, #12]
 801363e:	f000 f893 	bl	8013768 <udp_bind>
 8013642:	4603      	mov	r3, r0
 8013644:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013646:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d002      	beq.n	8013654 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801364e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013652:	e074      	b.n	801373e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	891b      	ldrh	r3, [r3, #8]
 8013658:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801365c:	4293      	cmp	r3, r2
 801365e:	d902      	bls.n	8013666 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013660:	f04f 33ff 	mov.w	r3, #4294967295
 8013664:	e06b      	b.n	801373e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013666:	2108      	movs	r1, #8
 8013668:	68b8      	ldr	r0, [r7, #8]
 801366a:	f7f8 ffaf 	bl	800c5cc <pbuf_add_header>
 801366e:	4603      	mov	r3, r0
 8013670:	2b00      	cmp	r3, #0
 8013672:	d015      	beq.n	80136a0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013674:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013678:	2108      	movs	r1, #8
 801367a:	2022      	movs	r0, #34	; 0x22
 801367c:	f7f8 fd58 	bl	800c130 <pbuf_alloc>
 8013680:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d102      	bne.n	801368e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013688:	f04f 33ff 	mov.w	r3, #4294967295
 801368c:	e057      	b.n	801373e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	891b      	ldrh	r3, [r3, #8]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d006      	beq.n	80136a4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013696:	68b9      	ldr	r1, [r7, #8]
 8013698:	69f8      	ldr	r0, [r7, #28]
 801369a:	f7f9 f94f 	bl	800c93c <pbuf_chain>
 801369e:	e001      	b.n	80136a4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	895b      	ldrh	r3, [r3, #10]
 80136a8:	2b07      	cmp	r3, #7
 80136aa:	d806      	bhi.n	80136ba <udp_sendto_if_src+0x11e>
 80136ac:	4b26      	ldr	r3, [pc, #152]	; (8013748 <udp_sendto_if_src+0x1ac>)
 80136ae:	f240 320d 	movw	r2, #781	; 0x30d
 80136b2:	492c      	ldr	r1, [pc, #176]	; (8013764 <udp_sendto_if_src+0x1c8>)
 80136b4:	4826      	ldr	r0, [pc, #152]	; (8013750 <udp_sendto_if_src+0x1b4>)
 80136b6:	f005 f9c5 	bl	8018a44 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	685b      	ldr	r3, [r3, #4]
 80136be:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	8a5b      	ldrh	r3, [r3, #18]
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7f7 fbb3 	bl	800ae30 <lwip_htons>
 80136ca:	4603      	mov	r3, r0
 80136cc:	461a      	mov	r2, r3
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80136d2:	887b      	ldrh	r3, [r7, #2]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7f7 fbab 	bl	800ae30 <lwip_htons>
 80136da:	4603      	mov	r3, r0
 80136dc:	461a      	mov	r2, r3
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	2200      	movs	r2, #0
 80136e6:	719a      	strb	r2, [r3, #6]
 80136e8:	2200      	movs	r2, #0
 80136ea:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80136ec:	69fb      	ldr	r3, [r7, #28]
 80136ee:	891b      	ldrh	r3, [r3, #8]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f7 fb9d 	bl	800ae30 <lwip_htons>
 80136f6:	4603      	mov	r3, r0
 80136f8:	461a      	mov	r2, r3
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80136fe:	2311      	movs	r3, #17
 8013700:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	7adb      	ldrb	r3, [r3, #11]
 8013706:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	7a9b      	ldrb	r3, [r3, #10]
 801370c:	7cb9      	ldrb	r1, [r7, #18]
 801370e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013710:	9202      	str	r2, [sp, #8]
 8013712:	7cfa      	ldrb	r2, [r7, #19]
 8013714:	9201      	str	r2, [sp, #4]
 8013716:	9300      	str	r3, [sp, #0]
 8013718:	460b      	mov	r3, r1
 801371a:	687a      	ldr	r2, [r7, #4]
 801371c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801371e:	69f8      	ldr	r0, [r7, #28]
 8013720:	f003 fb1e 	bl	8016d60 <ip4_output_if_src>
 8013724:	4603      	mov	r3, r0
 8013726:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013728:	69fa      	ldr	r2, [r7, #28]
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	429a      	cmp	r2, r3
 801372e:	d004      	beq.n	801373a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013730:	69f8      	ldr	r0, [r7, #28]
 8013732:	f7f8 ffe1 	bl	800c6f8 <pbuf_free>
    q = NULL;
 8013736:	2300      	movs	r3, #0
 8013738:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801373a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801373e:	4618      	mov	r0, r3
 8013740:	3720      	adds	r7, #32
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	0801bebc 	.word	0x0801bebc
 801374c:	0801c0a8 	.word	0x0801c0a8
 8013750:	0801bf10 	.word	0x0801bf10
 8013754:	0801c0c8 	.word	0x0801c0c8
 8013758:	0801c0e8 	.word	0x0801c0e8
 801375c:	0801c10c 	.word	0x0801c10c
 8013760:	0801c130 	.word	0x0801c130
 8013764:	0801c154 	.word	0x0801c154

08013768 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b086      	sub	sp, #24
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	4613      	mov	r3, r2
 8013774:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d101      	bne.n	8013780 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801377c:	4b39      	ldr	r3, [pc, #228]	; (8013864 <udp_bind+0xfc>)
 801377e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d109      	bne.n	801379a <udp_bind+0x32>
 8013786:	4b38      	ldr	r3, [pc, #224]	; (8013868 <udp_bind+0x100>)
 8013788:	f240 32b7 	movw	r2, #951	; 0x3b7
 801378c:	4937      	ldr	r1, [pc, #220]	; (801386c <udp_bind+0x104>)
 801378e:	4838      	ldr	r0, [pc, #224]	; (8013870 <udp_bind+0x108>)
 8013790:	f005 f958 	bl	8018a44 <iprintf>
 8013794:	f06f 030f 	mvn.w	r3, #15
 8013798:	e060      	b.n	801385c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801379a:	2300      	movs	r3, #0
 801379c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801379e:	4b35      	ldr	r3, [pc, #212]	; (8013874 <udp_bind+0x10c>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	617b      	str	r3, [r7, #20]
 80137a4:	e009      	b.n	80137ba <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80137a6:	68fa      	ldr	r2, [r7, #12]
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d102      	bne.n	80137b4 <udp_bind+0x4c>
      rebind = 1;
 80137ae:	2301      	movs	r3, #1
 80137b0:	74fb      	strb	r3, [r7, #19]
      break;
 80137b2:	e005      	b.n	80137c0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	617b      	str	r3, [r7, #20]
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d1f2      	bne.n	80137a6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80137c0:	88fb      	ldrh	r3, [r7, #6]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d109      	bne.n	80137da <udp_bind+0x72>
    port = udp_new_port();
 80137c6:	f7ff fcc5 	bl	8013154 <udp_new_port>
 80137ca:	4603      	mov	r3, r0
 80137cc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80137ce:	88fb      	ldrh	r3, [r7, #6]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d12c      	bne.n	801382e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80137d4:	f06f 0307 	mvn.w	r3, #7
 80137d8:	e040      	b.n	801385c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137da:	4b26      	ldr	r3, [pc, #152]	; (8013874 <udp_bind+0x10c>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	617b      	str	r3, [r7, #20]
 80137e0:	e022      	b.n	8013828 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80137e2:	68fa      	ldr	r2, [r7, #12]
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d01b      	beq.n	8013822 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	8a5b      	ldrh	r3, [r3, #18]
 80137ee:	88fa      	ldrh	r2, [r7, #6]
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d116      	bne.n	8013822 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d00d      	beq.n	801381c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d00a      	beq.n	801381c <udp_bind+0xb4>
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d006      	beq.n	801381c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801380e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013810:	2b00      	cmp	r3, #0
 8013812:	d003      	beq.n	801381c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d102      	bne.n	8013822 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801381c:	f06f 0307 	mvn.w	r3, #7
 8013820:	e01c      	b.n	801385c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	68db      	ldr	r3, [r3, #12]
 8013826:	617b      	str	r3, [r7, #20]
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d1d9      	bne.n	80137e2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d002      	beq.n	801383a <udp_bind+0xd2>
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	e000      	b.n	801383c <udp_bind+0xd4>
 801383a:	2300      	movs	r3, #0
 801383c:	68fa      	ldr	r2, [r7, #12]
 801383e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	88fa      	ldrh	r2, [r7, #6]
 8013844:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013846:	7cfb      	ldrb	r3, [r7, #19]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d106      	bne.n	801385a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801384c:	4b09      	ldr	r3, [pc, #36]	; (8013874 <udp_bind+0x10c>)
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013854:	4a07      	ldr	r2, [pc, #28]	; (8013874 <udp_bind+0x10c>)
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801385a:	2300      	movs	r3, #0
}
 801385c:	4618      	mov	r0, r3
 801385e:	3718      	adds	r7, #24
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	0801cdd4 	.word	0x0801cdd4
 8013868:	0801bebc 	.word	0x0801bebc
 801386c:	0801c184 	.word	0x0801c184
 8013870:	0801bf10 	.word	0x0801bf10
 8013874:	2000be8c 	.word	0x2000be8c

08013878 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b086      	sub	sp, #24
 801387c:	af00      	add	r7, sp, #0
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	60b9      	str	r1, [r7, #8]
 8013882:	4613      	mov	r3, r2
 8013884:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d109      	bne.n	80138a0 <udp_connect+0x28>
 801388c:	4b2c      	ldr	r3, [pc, #176]	; (8013940 <udp_connect+0xc8>)
 801388e:	f240 4235 	movw	r2, #1077	; 0x435
 8013892:	492c      	ldr	r1, [pc, #176]	; (8013944 <udp_connect+0xcc>)
 8013894:	482c      	ldr	r0, [pc, #176]	; (8013948 <udp_connect+0xd0>)
 8013896:	f005 f8d5 	bl	8018a44 <iprintf>
 801389a:	f06f 030f 	mvn.w	r3, #15
 801389e:	e04b      	b.n	8013938 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d109      	bne.n	80138ba <udp_connect+0x42>
 80138a6:	4b26      	ldr	r3, [pc, #152]	; (8013940 <udp_connect+0xc8>)
 80138a8:	f240 4236 	movw	r2, #1078	; 0x436
 80138ac:	4927      	ldr	r1, [pc, #156]	; (801394c <udp_connect+0xd4>)
 80138ae:	4826      	ldr	r0, [pc, #152]	; (8013948 <udp_connect+0xd0>)
 80138b0:	f005 f8c8 	bl	8018a44 <iprintf>
 80138b4:	f06f 030f 	mvn.w	r3, #15
 80138b8:	e03e      	b.n	8013938 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	8a5b      	ldrh	r3, [r3, #18]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d10f      	bne.n	80138e2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80138c2:	68f9      	ldr	r1, [r7, #12]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	8a5b      	ldrh	r3, [r3, #18]
 80138c8:	461a      	mov	r2, r3
 80138ca:	68f8      	ldr	r0, [r7, #12]
 80138cc:	f7ff ff4c 	bl	8013768 <udp_bind>
 80138d0:	4603      	mov	r3, r0
 80138d2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80138d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d002      	beq.n	80138e2 <udp_connect+0x6a>
      return err;
 80138dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138e0:	e02a      	b.n	8013938 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d002      	beq.n	80138ee <udp_connect+0x76>
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	e000      	b.n	80138f0 <udp_connect+0x78>
 80138ee:	2300      	movs	r3, #0
 80138f0:	68fa      	ldr	r2, [r7, #12]
 80138f2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	88fa      	ldrh	r2, [r7, #6]
 80138f8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	7c1b      	ldrb	r3, [r3, #16]
 80138fe:	f043 0304 	orr.w	r3, r3, #4
 8013902:	b2da      	uxtb	r2, r3
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013908:	4b11      	ldr	r3, [pc, #68]	; (8013950 <udp_connect+0xd8>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	617b      	str	r3, [r7, #20]
 801390e:	e008      	b.n	8013922 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013910:	68fa      	ldr	r2, [r7, #12]
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	429a      	cmp	r2, r3
 8013916:	d101      	bne.n	801391c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013918:	2300      	movs	r3, #0
 801391a:	e00d      	b.n	8013938 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	68db      	ldr	r3, [r3, #12]
 8013920:	617b      	str	r3, [r7, #20]
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d1f3      	bne.n	8013910 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013928:	4b09      	ldr	r3, [pc, #36]	; (8013950 <udp_connect+0xd8>)
 801392a:	681a      	ldr	r2, [r3, #0]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013930:	4a07      	ldr	r2, [pc, #28]	; (8013950 <udp_connect+0xd8>)
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013936:	2300      	movs	r3, #0
}
 8013938:	4618      	mov	r0, r3
 801393a:	3718      	adds	r7, #24
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}
 8013940:	0801bebc 	.word	0x0801bebc
 8013944:	0801c19c 	.word	0x0801c19c
 8013948:	0801bf10 	.word	0x0801bf10
 801394c:	0801c1b8 	.word	0x0801c1b8
 8013950:	2000be8c 	.word	0x2000be8c

08013954 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d107      	bne.n	8013976 <udp_recv+0x22>
 8013966:	4b08      	ldr	r3, [pc, #32]	; (8013988 <udp_recv+0x34>)
 8013968:	f240 428a 	movw	r2, #1162	; 0x48a
 801396c:	4907      	ldr	r1, [pc, #28]	; (801398c <udp_recv+0x38>)
 801396e:	4808      	ldr	r0, [pc, #32]	; (8013990 <udp_recv+0x3c>)
 8013970:	f005 f868 	bl	8018a44 <iprintf>
 8013974:	e005      	b.n	8013982 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	68ba      	ldr	r2, [r7, #8]
 801397a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	61da      	str	r2, [r3, #28]
}
 8013982:	3710      	adds	r7, #16
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}
 8013988:	0801bebc 	.word	0x0801bebc
 801398c:	0801c1f0 	.word	0x0801c1f0
 8013990:	0801bf10 	.word	0x0801bf10

08013994 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d107      	bne.n	80139b2 <udp_remove+0x1e>
 80139a2:	4b19      	ldr	r3, [pc, #100]	; (8013a08 <udp_remove+0x74>)
 80139a4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80139a8:	4918      	ldr	r1, [pc, #96]	; (8013a0c <udp_remove+0x78>)
 80139aa:	4819      	ldr	r0, [pc, #100]	; (8013a10 <udp_remove+0x7c>)
 80139ac:	f005 f84a 	bl	8018a44 <iprintf>
 80139b0:	e026      	b.n	8013a00 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80139b2:	4b18      	ldr	r3, [pc, #96]	; (8013a14 <udp_remove+0x80>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d105      	bne.n	80139c8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80139bc:	4b15      	ldr	r3, [pc, #84]	; (8013a14 <udp_remove+0x80>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	68db      	ldr	r3, [r3, #12]
 80139c2:	4a14      	ldr	r2, [pc, #80]	; (8013a14 <udp_remove+0x80>)
 80139c4:	6013      	str	r3, [r2, #0]
 80139c6:	e017      	b.n	80139f8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80139c8:	4b12      	ldr	r3, [pc, #72]	; (8013a14 <udp_remove+0x80>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	60fb      	str	r3, [r7, #12]
 80139ce:	e010      	b.n	80139f2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	68db      	ldr	r3, [r3, #12]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d009      	beq.n	80139ec <udp_remove+0x58>
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d104      	bne.n	80139ec <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	68da      	ldr	r2, [r3, #12]
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	60da      	str	r2, [r3, #12]
        break;
 80139ea:	e005      	b.n	80139f8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	60fb      	str	r3, [r7, #12]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d1eb      	bne.n	80139d0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80139f8:	6879      	ldr	r1, [r7, #4]
 80139fa:	2000      	movs	r0, #0
 80139fc:	f7f8 f83e 	bl	800ba7c <memp_free>
}
 8013a00:	3710      	adds	r7, #16
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	0801bebc 	.word	0x0801bebc
 8013a0c:	0801c208 	.word	0x0801c208
 8013a10:	0801bf10 	.word	0x0801bf10
 8013a14:	2000be8c 	.word	0x2000be8c

08013a18 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013a1e:	2000      	movs	r0, #0
 8013a20:	f7f7 ffb6 	bl	800b990 <memp_malloc>
 8013a24:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d007      	beq.n	8013a3c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013a2c:	2220      	movs	r2, #32
 8013a2e:	2100      	movs	r1, #0
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f004 ff21 	bl	8018878 <memset>
    pcb->ttl = UDP_TTL;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	22ff      	movs	r2, #255	; 0xff
 8013a3a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013a3c:	687b      	ldr	r3, [r7, #4]
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3708      	adds	r7, #8
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
	...

08013a48 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b085      	sub	sp, #20
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d01e      	beq.n	8013a96 <udp_netif_ip_addr_changed+0x4e>
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d01a      	beq.n	8013a96 <udp_netif_ip_addr_changed+0x4e>
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d017      	beq.n	8013a96 <udp_netif_ip_addr_changed+0x4e>
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d013      	beq.n	8013a96 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013a6e:	4b0c      	ldr	r3, [pc, #48]	; (8013aa0 <udp_netif_ip_addr_changed+0x58>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	e00c      	b.n	8013a90 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d103      	bne.n	8013a8a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	681a      	ldr	r2, [r3, #0]
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	68db      	ldr	r3, [r3, #12]
 8013a8e:	60fb      	str	r3, [r7, #12]
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d1ef      	bne.n	8013a76 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013a96:	bf00      	nop
 8013a98:	3714      	adds	r7, #20
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bc80      	pop	{r7}
 8013a9e:	4770      	bx	lr
 8013aa0:	2000be8c 	.word	0x2000be8c

08013aa4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013aa8:	4b20      	ldr	r3, [pc, #128]	; (8013b2c <dhcp_inc_pcb_refcount+0x88>)
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d133      	bne.n	8013b18 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013ab0:	4b1f      	ldr	r3, [pc, #124]	; (8013b30 <dhcp_inc_pcb_refcount+0x8c>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d005      	beq.n	8013ac4 <dhcp_inc_pcb_refcount+0x20>
 8013ab8:	4b1e      	ldr	r3, [pc, #120]	; (8013b34 <dhcp_inc_pcb_refcount+0x90>)
 8013aba:	22e5      	movs	r2, #229	; 0xe5
 8013abc:	491e      	ldr	r1, [pc, #120]	; (8013b38 <dhcp_inc_pcb_refcount+0x94>)
 8013abe:	481f      	ldr	r0, [pc, #124]	; (8013b3c <dhcp_inc_pcb_refcount+0x98>)
 8013ac0:	f004 ffc0 	bl	8018a44 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013ac4:	f7ff ffa8 	bl	8013a18 <udp_new>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	4a19      	ldr	r2, [pc, #100]	; (8013b30 <dhcp_inc_pcb_refcount+0x8c>)
 8013acc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013ace:	4b18      	ldr	r3, [pc, #96]	; (8013b30 <dhcp_inc_pcb_refcount+0x8c>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d102      	bne.n	8013adc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8013ada:	e024      	b.n	8013b26 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013adc:	4b14      	ldr	r3, [pc, #80]	; (8013b30 <dhcp_inc_pcb_refcount+0x8c>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	7a5a      	ldrb	r2, [r3, #9]
 8013ae2:	4b13      	ldr	r3, [pc, #76]	; (8013b30 <dhcp_inc_pcb_refcount+0x8c>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f042 0220 	orr.w	r2, r2, #32
 8013aea:	b2d2      	uxtb	r2, r2
 8013aec:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013aee:	4b10      	ldr	r3, [pc, #64]	; (8013b30 <dhcp_inc_pcb_refcount+0x8c>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	2244      	movs	r2, #68	; 0x44
 8013af4:	4912      	ldr	r1, [pc, #72]	; (8013b40 <dhcp_inc_pcb_refcount+0x9c>)
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7ff fe36 	bl	8013768 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013afc:	4b0c      	ldr	r3, [pc, #48]	; (8013b30 <dhcp_inc_pcb_refcount+0x8c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2243      	movs	r2, #67	; 0x43
 8013b02:	490f      	ldr	r1, [pc, #60]	; (8013b40 <dhcp_inc_pcb_refcount+0x9c>)
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7ff feb7 	bl	8013878 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013b0a:	4b09      	ldr	r3, [pc, #36]	; (8013b30 <dhcp_inc_pcb_refcount+0x8c>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	490c      	ldr	r1, [pc, #48]	; (8013b44 <dhcp_inc_pcb_refcount+0xa0>)
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff ff1e 	bl	8013954 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013b18:	4b04      	ldr	r3, [pc, #16]	; (8013b2c <dhcp_inc_pcb_refcount+0x88>)
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	b2da      	uxtb	r2, r3
 8013b20:	4b02      	ldr	r3, [pc, #8]	; (8013b2c <dhcp_inc_pcb_refcount+0x88>)
 8013b22:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013b24:	2300      	movs	r3, #0
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	2000bebc 	.word	0x2000bebc
 8013b30:	2000beb8 	.word	0x2000beb8
 8013b34:	0801c220 	.word	0x0801c220
 8013b38:	0801c258 	.word	0x0801c258
 8013b3c:	0801c280 	.word	0x0801c280
 8013b40:	0801cdd4 	.word	0x0801cdd4
 8013b44:	08015361 	.word	0x08015361

08013b48 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013b4c:	4b0e      	ldr	r3, [pc, #56]	; (8013b88 <dhcp_dec_pcb_refcount+0x40>)
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d105      	bne.n	8013b60 <dhcp_dec_pcb_refcount+0x18>
 8013b54:	4b0d      	ldr	r3, [pc, #52]	; (8013b8c <dhcp_dec_pcb_refcount+0x44>)
 8013b56:	22ff      	movs	r2, #255	; 0xff
 8013b58:	490d      	ldr	r1, [pc, #52]	; (8013b90 <dhcp_dec_pcb_refcount+0x48>)
 8013b5a:	480e      	ldr	r0, [pc, #56]	; (8013b94 <dhcp_dec_pcb_refcount+0x4c>)
 8013b5c:	f004 ff72 	bl	8018a44 <iprintf>
  dhcp_pcb_refcount--;
 8013b60:	4b09      	ldr	r3, [pc, #36]	; (8013b88 <dhcp_dec_pcb_refcount+0x40>)
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	3b01      	subs	r3, #1
 8013b66:	b2da      	uxtb	r2, r3
 8013b68:	4b07      	ldr	r3, [pc, #28]	; (8013b88 <dhcp_dec_pcb_refcount+0x40>)
 8013b6a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013b6c:	4b06      	ldr	r3, [pc, #24]	; (8013b88 <dhcp_dec_pcb_refcount+0x40>)
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d107      	bne.n	8013b84 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013b74:	4b08      	ldr	r3, [pc, #32]	; (8013b98 <dhcp_dec_pcb_refcount+0x50>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7ff ff0b 	bl	8013994 <udp_remove>
    dhcp_pcb = NULL;
 8013b7e:	4b06      	ldr	r3, [pc, #24]	; (8013b98 <dhcp_dec_pcb_refcount+0x50>)
 8013b80:	2200      	movs	r2, #0
 8013b82:	601a      	str	r2, [r3, #0]
  }
}
 8013b84:	bf00      	nop
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	2000bebc 	.word	0x2000bebc
 8013b8c:	0801c220 	.word	0x0801c220
 8013b90:	0801c2a8 	.word	0x0801c2a8
 8013b94:	0801c280 	.word	0x0801c280
 8013b98:	2000beb8 	.word	0x2000beb8

08013b9c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013baa:	210c      	movs	r1, #12
 8013bac:	68f8      	ldr	r0, [r7, #12]
 8013bae:	f001 f819 	bl	8014be4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013bb2:	4b06      	ldr	r3, [pc, #24]	; (8013bcc <dhcp_handle_nak+0x30>)
 8013bb4:	4a05      	ldr	r2, [pc, #20]	; (8013bcc <dhcp_handle_nak+0x30>)
 8013bb6:	4905      	ldr	r1, [pc, #20]	; (8013bcc <dhcp_handle_nak+0x30>)
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f7f8 f8fd 	bl	800bdb8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f000 fc0c 	bl	80143dc <dhcp_discover>
}
 8013bc4:	bf00      	nop
 8013bc6:	3710      	adds	r7, #16
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}
 8013bcc:	0801cdd4 	.word	0x0801cdd4

08013bd0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b084      	sub	sp, #16
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bdc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013bde:	2108      	movs	r1, #8
 8013be0:	68f8      	ldr	r0, [r7, #12]
 8013be2:	f000 ffff 	bl	8014be4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	331c      	adds	r3, #28
 8013bea:	2200      	movs	r2, #0
 8013bec:	4619      	mov	r1, r3
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f002 fb00 	bl	80161f4 <etharp_query>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	799b      	ldrb	r3, [r3, #6]
 8013bfc:	2bff      	cmp	r3, #255	; 0xff
 8013bfe:	d005      	beq.n	8013c0c <dhcp_check+0x3c>
    dhcp->tries++;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	799b      	ldrb	r3, [r3, #6]
 8013c04:	3301      	adds	r3, #1
 8013c06:	b2da      	uxtb	r2, r3
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013c0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013c10:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013c12:	893b      	ldrh	r3, [r7, #8]
 8013c14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013c18:	4a06      	ldr	r2, [pc, #24]	; (8013c34 <dhcp_check+0x64>)
 8013c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8013c1e:	1152      	asrs	r2, r2, #5
 8013c20:	17db      	asrs	r3, r3, #31
 8013c22:	1ad3      	subs	r3, r2, r3
 8013c24:	b29a      	uxth	r2, r3
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013c2a:	bf00      	nop
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop
 8013c34:	10624dd3 	.word	0x10624dd3

08013c38 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c46:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013c48:	4b0c      	ldr	r3, [pc, #48]	; (8013c7c <dhcp_handle_offer+0x44>)
 8013c4a:	789b      	ldrb	r3, [r3, #2]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d011      	beq.n	8013c74 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	2200      	movs	r2, #0
 8013c54:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013c56:	4b0a      	ldr	r3, [pc, #40]	; (8013c80 <dhcp_handle_offer+0x48>)
 8013c58:	689b      	ldr	r3, [r3, #8]
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7f7 f8fc 	bl	800ae58 <lwip_htonl>
 8013c60:	4602      	mov	r2, r0
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	691a      	ldr	r2, [r3, #16]
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f000 f808 	bl	8013c84 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013c74:	bf00      	nop
 8013c76:	3710      	adds	r7, #16
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	2000beb0 	.word	0x2000beb0
 8013c80:	2000be90 	.word	0x2000be90

08013c84 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013c84:	b5b0      	push	{r4, r5, r7, lr}
 8013c86:	b08a      	sub	sp, #40	; 0x28
 8013c88:	af02      	add	r7, sp, #8
 8013c8a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d109      	bne.n	8013ca6 <dhcp_select+0x22>
 8013c92:	4b71      	ldr	r3, [pc, #452]	; (8013e58 <dhcp_select+0x1d4>)
 8013c94:	f240 1277 	movw	r2, #375	; 0x177
 8013c98:	4970      	ldr	r1, [pc, #448]	; (8013e5c <dhcp_select+0x1d8>)
 8013c9a:	4871      	ldr	r0, [pc, #452]	; (8013e60 <dhcp_select+0x1dc>)
 8013c9c:	f004 fed2 	bl	8018a44 <iprintf>
 8013ca0:	f06f 030f 	mvn.w	r3, #15
 8013ca4:	e0d3      	b.n	8013e4e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013caa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013cac:	69bb      	ldr	r3, [r7, #24]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d109      	bne.n	8013cc6 <dhcp_select+0x42>
 8013cb2:	4b69      	ldr	r3, [pc, #420]	; (8013e58 <dhcp_select+0x1d4>)
 8013cb4:	f240 1279 	movw	r2, #377	; 0x179
 8013cb8:	496a      	ldr	r1, [pc, #424]	; (8013e64 <dhcp_select+0x1e0>)
 8013cba:	4869      	ldr	r0, [pc, #420]	; (8013e60 <dhcp_select+0x1dc>)
 8013cbc:	f004 fec2 	bl	8018a44 <iprintf>
 8013cc0:	f06f 0305 	mvn.w	r3, #5
 8013cc4:	e0c3      	b.n	8013e4e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013cc6:	2101      	movs	r1, #1
 8013cc8:	69b8      	ldr	r0, [r7, #24]
 8013cca:	f000 ff8b 	bl	8014be4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013cce:	f107 030c 	add.w	r3, r7, #12
 8013cd2:	2203      	movs	r2, #3
 8013cd4:	69b9      	ldr	r1, [r7, #24]
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f001 fc10 	bl	80154fc <dhcp_create_msg>
 8013cdc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	f000 8085 	beq.w	8013df0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013cec:	89b8      	ldrh	r0, [r7, #12]
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013cf4:	2302      	movs	r3, #2
 8013cf6:	2239      	movs	r2, #57	; 0x39
 8013cf8:	f000 ff8e 	bl	8014c18 <dhcp_option>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013d00:	89b8      	ldrh	r0, [r7, #12]
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	f000 ffdd 	bl	8014ccc <dhcp_option_short>
 8013d12:	4603      	mov	r3, r0
 8013d14:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013d16:	89b8      	ldrh	r0, [r7, #12]
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d1e:	2304      	movs	r3, #4
 8013d20:	2232      	movs	r2, #50	; 0x32
 8013d22:	f000 ff79 	bl	8014c18 <dhcp_option>
 8013d26:	4603      	mov	r3, r0
 8013d28:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013d2a:	89bc      	ldrh	r4, [r7, #12]
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013d32:	69bb      	ldr	r3, [r7, #24]
 8013d34:	69db      	ldr	r3, [r3, #28]
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7f7 f88e 	bl	800ae58 <lwip_htonl>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	461a      	mov	r2, r3
 8013d40:	4629      	mov	r1, r5
 8013d42:	4620      	mov	r0, r4
 8013d44:	f000 fff4 	bl	8014d30 <dhcp_option_long>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013d4c:	89b8      	ldrh	r0, [r7, #12]
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d54:	2304      	movs	r3, #4
 8013d56:	2236      	movs	r2, #54	; 0x36
 8013d58:	f000 ff5e 	bl	8014c18 <dhcp_option>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013d60:	89bc      	ldrh	r4, [r7, #12]
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013d68:	69bb      	ldr	r3, [r7, #24]
 8013d6a:	699b      	ldr	r3, [r3, #24]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7f7 f873 	bl	800ae58 <lwip_htonl>
 8013d72:	4603      	mov	r3, r0
 8013d74:	461a      	mov	r2, r3
 8013d76:	4629      	mov	r1, r5
 8013d78:	4620      	mov	r0, r4
 8013d7a:	f000 ffd9 	bl	8014d30 <dhcp_option_long>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013d82:	89b8      	ldrh	r0, [r7, #12]
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d8a:	2303      	movs	r3, #3
 8013d8c:	2237      	movs	r2, #55	; 0x37
 8013d8e:	f000 ff43 	bl	8014c18 <dhcp_option>
 8013d92:	4603      	mov	r3, r0
 8013d94:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013d96:	2300      	movs	r3, #0
 8013d98:	77bb      	strb	r3, [r7, #30]
 8013d9a:	e00e      	b.n	8013dba <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013d9c:	89b8      	ldrh	r0, [r7, #12]
 8013d9e:	693b      	ldr	r3, [r7, #16]
 8013da0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013da4:	7fbb      	ldrb	r3, [r7, #30]
 8013da6:	4a30      	ldr	r2, [pc, #192]	; (8013e68 <dhcp_select+0x1e4>)
 8013da8:	5cd3      	ldrb	r3, [r2, r3]
 8013daa:	461a      	mov	r2, r3
 8013dac:	f000 ff68 	bl	8014c80 <dhcp_option_byte>
 8013db0:	4603      	mov	r3, r0
 8013db2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013db4:	7fbb      	ldrb	r3, [r7, #30]
 8013db6:	3301      	adds	r3, #1
 8013db8:	77bb      	strb	r3, [r7, #30]
 8013dba:	7fbb      	ldrb	r3, [r7, #30]
 8013dbc:	2b02      	cmp	r3, #2
 8013dbe:	d9ed      	bls.n	8013d9c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013dc0:	89b8      	ldrh	r0, [r7, #12]
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	33f0      	adds	r3, #240	; 0xf0
 8013dc6:	697a      	ldr	r2, [r7, #20]
 8013dc8:	4619      	mov	r1, r3
 8013dca:	f001 fc6d 	bl	80156a8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013dce:	4b27      	ldr	r3, [pc, #156]	; (8013e6c <dhcp_select+0x1e8>)
 8013dd0:	6818      	ldr	r0, [r3, #0]
 8013dd2:	4b27      	ldr	r3, [pc, #156]	; (8013e70 <dhcp_select+0x1ec>)
 8013dd4:	9301      	str	r3, [sp, #4]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	2343      	movs	r3, #67	; 0x43
 8013ddc:	4a25      	ldr	r2, [pc, #148]	; (8013e74 <dhcp_select+0x1f0>)
 8013dde:	6979      	ldr	r1, [r7, #20]
 8013de0:	f7ff fbdc 	bl	801359c <udp_sendto_if_src>
 8013de4:	4603      	mov	r3, r0
 8013de6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013de8:	6978      	ldr	r0, [r7, #20]
 8013dea:	f7f8 fc85 	bl	800c6f8 <pbuf_free>
 8013dee:	e001      	b.n	8013df4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013df0:	23ff      	movs	r3, #255	; 0xff
 8013df2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	799b      	ldrb	r3, [r3, #6]
 8013df8:	2bff      	cmp	r3, #255	; 0xff
 8013dfa:	d005      	beq.n	8013e08 <dhcp_select+0x184>
    dhcp->tries++;
 8013dfc:	69bb      	ldr	r3, [r7, #24]
 8013dfe:	799b      	ldrb	r3, [r3, #6]
 8013e00:	3301      	adds	r3, #1
 8013e02:	b2da      	uxtb	r2, r3
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013e08:	69bb      	ldr	r3, [r7, #24]
 8013e0a:	799b      	ldrb	r3, [r3, #6]
 8013e0c:	2b05      	cmp	r3, #5
 8013e0e:	d80d      	bhi.n	8013e2c <dhcp_select+0x1a8>
 8013e10:	69bb      	ldr	r3, [r7, #24]
 8013e12:	799b      	ldrb	r3, [r3, #6]
 8013e14:	461a      	mov	r2, r3
 8013e16:	2301      	movs	r3, #1
 8013e18:	4093      	lsls	r3, r2
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	461a      	mov	r2, r3
 8013e1e:	0152      	lsls	r2, r2, #5
 8013e20:	1ad2      	subs	r2, r2, r3
 8013e22:	0092      	lsls	r2, r2, #2
 8013e24:	4413      	add	r3, r2
 8013e26:	00db      	lsls	r3, r3, #3
 8013e28:	b29b      	uxth	r3, r3
 8013e2a:	e001      	b.n	8013e30 <dhcp_select+0x1ac>
 8013e2c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013e30:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013e32:	89fb      	ldrh	r3, [r7, #14]
 8013e34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013e38:	4a0f      	ldr	r2, [pc, #60]	; (8013e78 <dhcp_select+0x1f4>)
 8013e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8013e3e:	1152      	asrs	r2, r2, #5
 8013e40:	17db      	asrs	r3, r3, #31
 8013e42:	1ad3      	subs	r3, r2, r3
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013e4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3720      	adds	r7, #32
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bdb0      	pop	{r4, r5, r7, pc}
 8013e56:	bf00      	nop
 8013e58:	0801c220 	.word	0x0801c220
 8013e5c:	0801c2cc 	.word	0x0801c2cc
 8013e60:	0801c280 	.word	0x0801c280
 8013e64:	0801c2e8 	.word	0x0801c2e8
 8013e68:	2000001c 	.word	0x2000001c
 8013e6c:	2000beb8 	.word	0x2000beb8
 8013e70:	0801cdd4 	.word	0x0801cdd4
 8013e74:	0801cdd8 	.word	0x0801cdd8
 8013e78:	10624dd3 	.word	0x10624dd3

08013e7c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013e82:	4b27      	ldr	r3, [pc, #156]	; (8013f20 <dhcp_coarse_tmr+0xa4>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	607b      	str	r3, [r7, #4]
 8013e88:	e042      	b.n	8013f10 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e8e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d039      	beq.n	8013f0a <dhcp_coarse_tmr+0x8e>
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	795b      	ldrb	r3, [r3, #5]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d035      	beq.n	8013f0a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	8a9b      	ldrh	r3, [r3, #20]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d012      	beq.n	8013ecc <dhcp_coarse_tmr+0x50>
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	8a5b      	ldrh	r3, [r3, #18]
 8013eaa:	3301      	adds	r3, #1
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	825a      	strh	r2, [r3, #18]
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	8a5a      	ldrh	r2, [r3, #18]
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	8a9b      	ldrh	r3, [r3, #20]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d106      	bne.n	8013ecc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f000 fdf6 	bl	8014ab0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f000 f969 	bl	801419c <dhcp_start>
 8013eca:	e01e      	b.n	8013f0a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	8a1b      	ldrh	r3, [r3, #16]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d00b      	beq.n	8013eec <dhcp_coarse_tmr+0x70>
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	8a1b      	ldrh	r3, [r3, #16]
 8013ed8:	1e5a      	subs	r2, r3, #1
 8013eda:	b291      	uxth	r1, r2
 8013edc:	683a      	ldr	r2, [r7, #0]
 8013ede:	8211      	strh	r1, [r2, #16]
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	d103      	bne.n	8013eec <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f000 f8c6 	bl	8014076 <dhcp_t2_timeout>
 8013eea:	e00e      	b.n	8013f0a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	89db      	ldrh	r3, [r3, #14]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d00a      	beq.n	8013f0a <dhcp_coarse_tmr+0x8e>
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	89db      	ldrh	r3, [r3, #14]
 8013ef8:	1e5a      	subs	r2, r3, #1
 8013efa:	b291      	uxth	r1, r2
 8013efc:	683a      	ldr	r2, [r7, #0]
 8013efe:	81d1      	strh	r1, [r2, #14]
 8013f00:	2b01      	cmp	r3, #1
 8013f02:	d102      	bne.n	8013f0a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f000 f888 	bl	801401a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	607b      	str	r3, [r7, #4]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d1b9      	bne.n	8013e8a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013f16:	bf00      	nop
 8013f18:	bf00      	nop
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	2000be24 	.word	0x2000be24

08013f24 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013f2a:	4b16      	ldr	r3, [pc, #88]	; (8013f84 <dhcp_fine_tmr+0x60>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	607b      	str	r3, [r7, #4]
 8013f30:	e020      	b.n	8013f74 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f36:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d017      	beq.n	8013f6e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	891b      	ldrh	r3, [r3, #8]
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d906      	bls.n	8013f54 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	891b      	ldrh	r3, [r3, #8]
 8013f4a:	3b01      	subs	r3, #1
 8013f4c:	b29a      	uxth	r2, r3
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	811a      	strh	r2, [r3, #8]
 8013f52:	e00c      	b.n	8013f6e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	891b      	ldrh	r3, [r3, #8]
 8013f58:	2b01      	cmp	r3, #1
 8013f5a:	d108      	bne.n	8013f6e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	891b      	ldrh	r3, [r3, #8]
 8013f60:	3b01      	subs	r3, #1
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f000 f80d 	bl	8013f88 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	607b      	str	r3, [r7, #4]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d1db      	bne.n	8013f32 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013f7a:	bf00      	nop
 8013f7c:	bf00      	nop
 8013f7e:	3708      	adds	r7, #8
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}
 8013f84:	2000be24 	.word	0x2000be24

08013f88 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f94:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	795b      	ldrb	r3, [r3, #5]
 8013f9a:	2b0c      	cmp	r3, #12
 8013f9c:	d003      	beq.n	8013fa6 <dhcp_timeout+0x1e>
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	795b      	ldrb	r3, [r3, #5]
 8013fa2:	2b06      	cmp	r3, #6
 8013fa4:	d103      	bne.n	8013fae <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 fa18 	bl	80143dc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013fac:	e031      	b.n	8014012 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	795b      	ldrb	r3, [r3, #5]
 8013fb2:	2b01      	cmp	r3, #1
 8013fb4:	d10e      	bne.n	8013fd4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	799b      	ldrb	r3, [r3, #6]
 8013fba:	2b05      	cmp	r3, #5
 8013fbc:	d803      	bhi.n	8013fc6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f7ff fe60 	bl	8013c84 <dhcp_select>
}
 8013fc4:	e025      	b.n	8014012 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f000 fd72 	bl	8014ab0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f000 f8e5 	bl	801419c <dhcp_start>
}
 8013fd2:	e01e      	b.n	8014012 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	795b      	ldrb	r3, [r3, #5]
 8013fd8:	2b08      	cmp	r3, #8
 8013fda:	d10b      	bne.n	8013ff4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	799b      	ldrb	r3, [r3, #6]
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	d803      	bhi.n	8013fec <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7ff fdf3 	bl	8013bd0 <dhcp_check>
}
 8013fea:	e012      	b.n	8014012 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 fa97 	bl	8014520 <dhcp_bind>
}
 8013ff2:	e00e      	b.n	8014012 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	795b      	ldrb	r3, [r3, #5]
 8013ff8:	2b03      	cmp	r3, #3
 8013ffa:	d10a      	bne.n	8014012 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	799b      	ldrb	r3, [r3, #6]
 8014000:	2b01      	cmp	r3, #1
 8014002:	d803      	bhi.n	801400c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f000 fc9d 	bl	8014944 <dhcp_reboot>
}
 801400a:	e002      	b.n	8014012 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f000 f9e5 	bl	80143dc <dhcp_discover>
}
 8014012:	bf00      	nop
 8014014:	3710      	adds	r7, #16
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}

0801401a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801401a:	b580      	push	{r7, lr}
 801401c:	b084      	sub	sp, #16
 801401e:	af00      	add	r7, sp, #0
 8014020:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014026:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	795b      	ldrb	r3, [r3, #5]
 801402c:	2b01      	cmp	r3, #1
 801402e:	d007      	beq.n	8014040 <dhcp_t1_timeout+0x26>
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	795b      	ldrb	r3, [r3, #5]
 8014034:	2b0a      	cmp	r3, #10
 8014036:	d003      	beq.n	8014040 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801403c:	2b05      	cmp	r3, #5
 801403e:	d116      	bne.n	801406e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f000 fb47 	bl	80146d4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	899b      	ldrh	r3, [r3, #12]
 801404a:	461a      	mov	r2, r3
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	8a5b      	ldrh	r3, [r3, #18]
 8014050:	1ad3      	subs	r3, r2, r3
 8014052:	2b01      	cmp	r3, #1
 8014054:	dd0b      	ble.n	801406e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	899b      	ldrh	r3, [r3, #12]
 801405a:	461a      	mov	r2, r3
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	8a5b      	ldrh	r3, [r3, #18]
 8014060:	1ad3      	subs	r3, r2, r3
 8014062:	0fda      	lsrs	r2, r3, #31
 8014064:	4413      	add	r3, r2
 8014066:	105b      	asrs	r3, r3, #1
 8014068:	b29a      	uxth	r2, r3
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801406e:	bf00      	nop
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}

08014076 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014076:	b580      	push	{r7, lr}
 8014078:	b084      	sub	sp, #16
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014082:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	795b      	ldrb	r3, [r3, #5]
 8014088:	2b01      	cmp	r3, #1
 801408a:	d00b      	beq.n	80140a4 <dhcp_t2_timeout+0x2e>
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	795b      	ldrb	r3, [r3, #5]
 8014090:	2b0a      	cmp	r3, #10
 8014092:	d007      	beq.n	80140a4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014098:	2b05      	cmp	r3, #5
 801409a:	d003      	beq.n	80140a4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	795b      	ldrb	r3, [r3, #5]
 80140a0:	2b04      	cmp	r3, #4
 80140a2:	d116      	bne.n	80140d2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f000 fbb1 	bl	801480c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	8a9b      	ldrh	r3, [r3, #20]
 80140ae:	461a      	mov	r2, r3
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	8a5b      	ldrh	r3, [r3, #18]
 80140b4:	1ad3      	subs	r3, r2, r3
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	dd0b      	ble.n	80140d2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	8a9b      	ldrh	r3, [r3, #20]
 80140be:	461a      	mov	r2, r3
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	8a5b      	ldrh	r3, [r3, #18]
 80140c4:	1ad3      	subs	r3, r2, r3
 80140c6:	0fda      	lsrs	r2, r3, #31
 80140c8:	4413      	add	r3, r2
 80140ca:	105b      	asrs	r3, r3, #1
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80140d2:	bf00      	nop
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
	...

080140dc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ea:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	2200      	movs	r2, #0
 80140f0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2200      	movs	r2, #0
 80140f6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80140f8:	4b26      	ldr	r3, [pc, #152]	; (8014194 <dhcp_handle_ack+0xb8>)
 80140fa:	78db      	ldrb	r3, [r3, #3]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d003      	beq.n	8014108 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014100:	4b25      	ldr	r3, [pc, #148]	; (8014198 <dhcp_handle_ack+0xbc>)
 8014102:	68da      	ldr	r2, [r3, #12]
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014108:	4b22      	ldr	r3, [pc, #136]	; (8014194 <dhcp_handle_ack+0xb8>)
 801410a:	791b      	ldrb	r3, [r3, #4]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d004      	beq.n	801411a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014110:	4b21      	ldr	r3, [pc, #132]	; (8014198 <dhcp_handle_ack+0xbc>)
 8014112:	691a      	ldr	r2, [r3, #16]
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	62da      	str	r2, [r3, #44]	; 0x2c
 8014118:	e004      	b.n	8014124 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801411e:	085a      	lsrs	r2, r3, #1
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014124:	4b1b      	ldr	r3, [pc, #108]	; (8014194 <dhcp_handle_ack+0xb8>)
 8014126:	795b      	ldrb	r3, [r3, #5]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d004      	beq.n	8014136 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801412c:	4b1a      	ldr	r3, [pc, #104]	; (8014198 <dhcp_handle_ack+0xbc>)
 801412e:	695a      	ldr	r2, [r3, #20]
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	631a      	str	r2, [r3, #48]	; 0x30
 8014134:	e007      	b.n	8014146 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801413a:	4613      	mov	r3, r2
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	1a9b      	subs	r3, r3, r2
 8014140:	08da      	lsrs	r2, r3, #3
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	691a      	ldr	r2, [r3, #16]
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801414e:	4b11      	ldr	r3, [pc, #68]	; (8014194 <dhcp_handle_ack+0xb8>)
 8014150:	799b      	ldrb	r3, [r3, #6]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d00b      	beq.n	801416e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014156:	4b10      	ldr	r3, [pc, #64]	; (8014198 <dhcp_handle_ack+0xbc>)
 8014158:	699b      	ldr	r3, [r3, #24]
 801415a:	4618      	mov	r0, r3
 801415c:	f7f6 fe7c 	bl	800ae58 <lwip_htonl>
 8014160:	4602      	mov	r2, r0
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	2201      	movs	r2, #1
 801416a:	71da      	strb	r2, [r3, #7]
 801416c:	e002      	b.n	8014174 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2200      	movs	r2, #0
 8014172:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014174:	4b07      	ldr	r3, [pc, #28]	; (8014194 <dhcp_handle_ack+0xb8>)
 8014176:	79db      	ldrb	r3, [r3, #7]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d007      	beq.n	801418c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801417c:	4b06      	ldr	r3, [pc, #24]	; (8014198 <dhcp_handle_ack+0xbc>)
 801417e:	69db      	ldr	r3, [r3, #28]
 8014180:	4618      	mov	r0, r3
 8014182:	f7f6 fe69 	bl	800ae58 <lwip_htonl>
 8014186:	4602      	mov	r2, r0
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801418c:	bf00      	nop
 801418e:	3710      	adds	r7, #16
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	2000beb0 	.word	0x2000beb0
 8014198:	2000be90 	.word	0x2000be90

0801419c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b084      	sub	sp, #16
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d109      	bne.n	80141be <dhcp_start+0x22>
 80141aa:	4b37      	ldr	r3, [pc, #220]	; (8014288 <dhcp_start+0xec>)
 80141ac:	f240 22e7 	movw	r2, #743	; 0x2e7
 80141b0:	4936      	ldr	r1, [pc, #216]	; (801428c <dhcp_start+0xf0>)
 80141b2:	4837      	ldr	r0, [pc, #220]	; (8014290 <dhcp_start+0xf4>)
 80141b4:	f004 fc46 	bl	8018a44 <iprintf>
 80141b8:	f06f 030f 	mvn.w	r3, #15
 80141bc:	e060      	b.n	8014280 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141c4:	f003 0301 	and.w	r3, r3, #1
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d109      	bne.n	80141e0 <dhcp_start+0x44>
 80141cc:	4b2e      	ldr	r3, [pc, #184]	; (8014288 <dhcp_start+0xec>)
 80141ce:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80141d2:	4930      	ldr	r1, [pc, #192]	; (8014294 <dhcp_start+0xf8>)
 80141d4:	482e      	ldr	r0, [pc, #184]	; (8014290 <dhcp_start+0xf4>)
 80141d6:	f004 fc35 	bl	8018a44 <iprintf>
 80141da:	f06f 030f 	mvn.w	r3, #15
 80141de:	e04f      	b.n	8014280 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141ea:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80141ee:	d202      	bcs.n	80141f6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80141f0:	f04f 33ff 	mov.w	r3, #4294967295
 80141f4:	e044      	b.n	8014280 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d10d      	bne.n	8014218 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80141fc:	2034      	movs	r0, #52	; 0x34
 80141fe:	f7f7 f9fb 	bl	800b5f8 <mem_malloc>
 8014202:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d102      	bne.n	8014210 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801420a:	f04f 33ff 	mov.w	r3, #4294967295
 801420e:	e037      	b.n	8014280 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	625a      	str	r2, [r3, #36]	; 0x24
 8014216:	e005      	b.n	8014224 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	791b      	ldrb	r3, [r3, #4]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d001      	beq.n	8014224 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014220:	f7ff fc92 	bl	8013b48 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014224:	2234      	movs	r2, #52	; 0x34
 8014226:	2100      	movs	r1, #0
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	f004 fb25 	bl	8018878 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801422e:	f7ff fc39 	bl	8013aa4 <dhcp_inc_pcb_refcount>
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	d002      	beq.n	801423e <dhcp_start+0xa2>
    return ERR_MEM;
 8014238:	f04f 33ff 	mov.w	r3, #4294967295
 801423c:	e020      	b.n	8014280 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	2201      	movs	r2, #1
 8014242:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801424a:	f003 0304 	and.w	r3, r3, #4
 801424e:	2b00      	cmp	r3, #0
 8014250:	d105      	bne.n	801425e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014252:	2102      	movs	r1, #2
 8014254:	68f8      	ldr	r0, [r7, #12]
 8014256:	f000 fcc5 	bl	8014be4 <dhcp_set_state>
    return ERR_OK;
 801425a:	2300      	movs	r3, #0
 801425c:	e010      	b.n	8014280 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 f8bc 	bl	80143dc <dhcp_discover>
 8014264:	4603      	mov	r3, r0
 8014266:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014268:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d005      	beq.n	801427c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f000 fc1d 	bl	8014ab0 <dhcp_release_and_stop>
    return ERR_MEM;
 8014276:	f04f 33ff 	mov.w	r3, #4294967295
 801427a:	e001      	b.n	8014280 <dhcp_start+0xe4>
  }
  return result;
 801427c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014280:	4618      	mov	r0, r3
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	0801c220 	.word	0x0801c220
 801428c:	0801c304 	.word	0x0801c304
 8014290:	0801c280 	.word	0x0801c280
 8014294:	0801c348 	.word	0x0801c348

08014298 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b084      	sub	sp, #16
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d107      	bne.n	80142b8 <dhcp_arp_reply+0x20>
 80142a8:	4b0e      	ldr	r3, [pc, #56]	; (80142e4 <dhcp_arp_reply+0x4c>)
 80142aa:	f240 328b 	movw	r2, #907	; 0x38b
 80142ae:	490e      	ldr	r1, [pc, #56]	; (80142e8 <dhcp_arp_reply+0x50>)
 80142b0:	480e      	ldr	r0, [pc, #56]	; (80142ec <dhcp_arp_reply+0x54>)
 80142b2:	f004 fbc7 	bl	8018a44 <iprintf>
 80142b6:	e012      	b.n	80142de <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142bc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d00c      	beq.n	80142de <dhcp_arp_reply+0x46>
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	795b      	ldrb	r3, [r3, #5]
 80142c8:	2b08      	cmp	r3, #8
 80142ca:	d108      	bne.n	80142de <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	69db      	ldr	r3, [r3, #28]
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d102      	bne.n	80142de <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f000 f809 	bl	80142f0 <dhcp_decline>
    }
  }
}
 80142de:	3710      	adds	r7, #16
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	0801c220 	.word	0x0801c220
 80142e8:	0801c304 	.word	0x0801c304
 80142ec:	0801c280 	.word	0x0801c280

080142f0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80142f0:	b5b0      	push	{r4, r5, r7, lr}
 80142f2:	b08a      	sub	sp, #40	; 0x28
 80142f4:	af02      	add	r7, sp, #8
 80142f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142fc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80142fe:	210c      	movs	r1, #12
 8014300:	69b8      	ldr	r0, [r7, #24]
 8014302:	f000 fc6f 	bl	8014be4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014306:	f107 030c 	add.w	r3, r7, #12
 801430a:	2204      	movs	r2, #4
 801430c:	69b9      	ldr	r1, [r7, #24]
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f001 f8f4 	bl	80154fc <dhcp_create_msg>
 8014314:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d035      	beq.n	8014388 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014322:	89b8      	ldrh	r0, [r7, #12]
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801432a:	2304      	movs	r3, #4
 801432c:	2232      	movs	r2, #50	; 0x32
 801432e:	f000 fc73 	bl	8014c18 <dhcp_option>
 8014332:	4603      	mov	r3, r0
 8014334:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014336:	89bc      	ldrh	r4, [r7, #12]
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	69db      	ldr	r3, [r3, #28]
 8014342:	4618      	mov	r0, r3
 8014344:	f7f6 fd88 	bl	800ae58 <lwip_htonl>
 8014348:	4603      	mov	r3, r0
 801434a:	461a      	mov	r2, r3
 801434c:	4629      	mov	r1, r5
 801434e:	4620      	mov	r0, r4
 8014350:	f000 fcee 	bl	8014d30 <dhcp_option_long>
 8014354:	4603      	mov	r3, r0
 8014356:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014358:	89b8      	ldrh	r0, [r7, #12]
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	33f0      	adds	r3, #240	; 0xf0
 801435e:	697a      	ldr	r2, [r7, #20]
 8014360:	4619      	mov	r1, r3
 8014362:	f001 f9a1 	bl	80156a8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014366:	4b19      	ldr	r3, [pc, #100]	; (80143cc <dhcp_decline+0xdc>)
 8014368:	6818      	ldr	r0, [r3, #0]
 801436a:	4b19      	ldr	r3, [pc, #100]	; (80143d0 <dhcp_decline+0xe0>)
 801436c:	9301      	str	r3, [sp, #4]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	9300      	str	r3, [sp, #0]
 8014372:	2343      	movs	r3, #67	; 0x43
 8014374:	4a17      	ldr	r2, [pc, #92]	; (80143d4 <dhcp_decline+0xe4>)
 8014376:	6979      	ldr	r1, [r7, #20]
 8014378:	f7ff f910 	bl	801359c <udp_sendto_if_src>
 801437c:	4603      	mov	r3, r0
 801437e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014380:	6978      	ldr	r0, [r7, #20]
 8014382:	f7f8 f9b9 	bl	800c6f8 <pbuf_free>
 8014386:	e001      	b.n	801438c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014388:	23ff      	movs	r3, #255	; 0xff
 801438a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801438c:	69bb      	ldr	r3, [r7, #24]
 801438e:	799b      	ldrb	r3, [r3, #6]
 8014390:	2bff      	cmp	r3, #255	; 0xff
 8014392:	d005      	beq.n	80143a0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	799b      	ldrb	r3, [r3, #6]
 8014398:	3301      	adds	r3, #1
 801439a:	b2da      	uxtb	r2, r3
 801439c:	69bb      	ldr	r3, [r7, #24]
 801439e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80143a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80143a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80143a6:	89fb      	ldrh	r3, [r7, #14]
 80143a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80143ac:	4a0a      	ldr	r2, [pc, #40]	; (80143d8 <dhcp_decline+0xe8>)
 80143ae:	fb82 1203 	smull	r1, r2, r2, r3
 80143b2:	1152      	asrs	r2, r2, #5
 80143b4:	17db      	asrs	r3, r3, #31
 80143b6:	1ad3      	subs	r3, r2, r3
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	69bb      	ldr	r3, [r7, #24]
 80143bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80143be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	3720      	adds	r7, #32
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bdb0      	pop	{r4, r5, r7, pc}
 80143ca:	bf00      	nop
 80143cc:	2000beb8 	.word	0x2000beb8
 80143d0:	0801cdd4 	.word	0x0801cdd4
 80143d4:	0801cdd8 	.word	0x0801cdd8
 80143d8:	10624dd3 	.word	0x10624dd3

080143dc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b08a      	sub	sp, #40	; 0x28
 80143e0:	af02      	add	r7, sp, #8
 80143e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80143ea:	2300      	movs	r3, #0
 80143ec:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80143ee:	69bb      	ldr	r3, [r7, #24]
 80143f0:	2200      	movs	r2, #0
 80143f2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80143f4:	2106      	movs	r1, #6
 80143f6:	69b8      	ldr	r0, [r7, #24]
 80143f8:	f000 fbf4 	bl	8014be4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80143fc:	f107 0308 	add.w	r3, r7, #8
 8014400:	2201      	movs	r2, #1
 8014402:	69b9      	ldr	r1, [r7, #24]
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f001 f879 	bl	80154fc <dhcp_create_msg>
 801440a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d04b      	beq.n	80144aa <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014418:	8938      	ldrh	r0, [r7, #8]
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014420:	2302      	movs	r3, #2
 8014422:	2239      	movs	r2, #57	; 0x39
 8014424:	f000 fbf8 	bl	8014c18 <dhcp_option>
 8014428:	4603      	mov	r3, r0
 801442a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801442c:	8938      	ldrh	r0, [r7, #8]
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014438:	461a      	mov	r2, r3
 801443a:	f000 fc47 	bl	8014ccc <dhcp_option_short>
 801443e:	4603      	mov	r3, r0
 8014440:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014442:	8938      	ldrh	r0, [r7, #8]
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801444a:	2303      	movs	r3, #3
 801444c:	2237      	movs	r2, #55	; 0x37
 801444e:	f000 fbe3 	bl	8014c18 <dhcp_option>
 8014452:	4603      	mov	r3, r0
 8014454:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014456:	2300      	movs	r3, #0
 8014458:	77fb      	strb	r3, [r7, #31]
 801445a:	e00e      	b.n	801447a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801445c:	8938      	ldrh	r0, [r7, #8]
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014464:	7ffb      	ldrb	r3, [r7, #31]
 8014466:	4a29      	ldr	r2, [pc, #164]	; (801450c <dhcp_discover+0x130>)
 8014468:	5cd3      	ldrb	r3, [r2, r3]
 801446a:	461a      	mov	r2, r3
 801446c:	f000 fc08 	bl	8014c80 <dhcp_option_byte>
 8014470:	4603      	mov	r3, r0
 8014472:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014474:	7ffb      	ldrb	r3, [r7, #31]
 8014476:	3301      	adds	r3, #1
 8014478:	77fb      	strb	r3, [r7, #31]
 801447a:	7ffb      	ldrb	r3, [r7, #31]
 801447c:	2b02      	cmp	r3, #2
 801447e:	d9ed      	bls.n	801445c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014480:	8938      	ldrh	r0, [r7, #8]
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	33f0      	adds	r3, #240	; 0xf0
 8014486:	693a      	ldr	r2, [r7, #16]
 8014488:	4619      	mov	r1, r3
 801448a:	f001 f90d 	bl	80156a8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801448e:	4b20      	ldr	r3, [pc, #128]	; (8014510 <dhcp_discover+0x134>)
 8014490:	6818      	ldr	r0, [r3, #0]
 8014492:	4b20      	ldr	r3, [pc, #128]	; (8014514 <dhcp_discover+0x138>)
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	2343      	movs	r3, #67	; 0x43
 801449c:	4a1e      	ldr	r2, [pc, #120]	; (8014518 <dhcp_discover+0x13c>)
 801449e:	6939      	ldr	r1, [r7, #16]
 80144a0:	f7ff f87c 	bl	801359c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80144a4:	6938      	ldr	r0, [r7, #16]
 80144a6:	f7f8 f927 	bl	800c6f8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	799b      	ldrb	r3, [r3, #6]
 80144ae:	2bff      	cmp	r3, #255	; 0xff
 80144b0:	d005      	beq.n	80144be <dhcp_discover+0xe2>
    dhcp->tries++;
 80144b2:	69bb      	ldr	r3, [r7, #24]
 80144b4:	799b      	ldrb	r3, [r3, #6]
 80144b6:	3301      	adds	r3, #1
 80144b8:	b2da      	uxtb	r2, r3
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	799b      	ldrb	r3, [r3, #6]
 80144c2:	2b05      	cmp	r3, #5
 80144c4:	d80d      	bhi.n	80144e2 <dhcp_discover+0x106>
 80144c6:	69bb      	ldr	r3, [r7, #24]
 80144c8:	799b      	ldrb	r3, [r3, #6]
 80144ca:	461a      	mov	r2, r3
 80144cc:	2301      	movs	r3, #1
 80144ce:	4093      	lsls	r3, r2
 80144d0:	b29b      	uxth	r3, r3
 80144d2:	461a      	mov	r2, r3
 80144d4:	0152      	lsls	r2, r2, #5
 80144d6:	1ad2      	subs	r2, r2, r3
 80144d8:	0092      	lsls	r2, r2, #2
 80144da:	4413      	add	r3, r2
 80144dc:	00db      	lsls	r3, r3, #3
 80144de:	b29b      	uxth	r3, r3
 80144e0:	e001      	b.n	80144e6 <dhcp_discover+0x10a>
 80144e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80144e6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80144e8:	897b      	ldrh	r3, [r7, #10]
 80144ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144ee:	4a0b      	ldr	r2, [pc, #44]	; (801451c <dhcp_discover+0x140>)
 80144f0:	fb82 1203 	smull	r1, r2, r2, r3
 80144f4:	1152      	asrs	r2, r2, #5
 80144f6:	17db      	asrs	r3, r3, #31
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	b29a      	uxth	r2, r3
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014500:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014504:	4618      	mov	r0, r3
 8014506:	3720      	adds	r7, #32
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}
 801450c:	2000001c 	.word	0x2000001c
 8014510:	2000beb8 	.word	0x2000beb8
 8014514:	0801cdd4 	.word	0x0801cdd4
 8014518:	0801cdd8 	.word	0x0801cdd8
 801451c:	10624dd3 	.word	0x10624dd3

08014520 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b088      	sub	sp, #32
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d107      	bne.n	801453e <dhcp_bind+0x1e>
 801452e:	4b64      	ldr	r3, [pc, #400]	; (80146c0 <dhcp_bind+0x1a0>)
 8014530:	f240 4215 	movw	r2, #1045	; 0x415
 8014534:	4963      	ldr	r1, [pc, #396]	; (80146c4 <dhcp_bind+0x1a4>)
 8014536:	4864      	ldr	r0, [pc, #400]	; (80146c8 <dhcp_bind+0x1a8>)
 8014538:	f004 fa84 	bl	8018a44 <iprintf>
 801453c:	e0bc      	b.n	80146b8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014542:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014544:	69bb      	ldr	r3, [r7, #24]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d107      	bne.n	801455a <dhcp_bind+0x3a>
 801454a:	4b5d      	ldr	r3, [pc, #372]	; (80146c0 <dhcp_bind+0x1a0>)
 801454c:	f240 4217 	movw	r2, #1047	; 0x417
 8014550:	495e      	ldr	r1, [pc, #376]	; (80146cc <dhcp_bind+0x1ac>)
 8014552:	485d      	ldr	r0, [pc, #372]	; (80146c8 <dhcp_bind+0x1a8>)
 8014554:	f004 fa76 	bl	8018a44 <iprintf>
 8014558:	e0ae      	b.n	80146b8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801455a:	69bb      	ldr	r3, [r7, #24]
 801455c:	2200      	movs	r2, #0
 801455e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014568:	d019      	beq.n	801459e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801456e:	331e      	adds	r3, #30
 8014570:	4a57      	ldr	r2, [pc, #348]	; (80146d0 <dhcp_bind+0x1b0>)
 8014572:	fba2 2303 	umull	r2, r3, r2, r3
 8014576:	095b      	lsrs	r3, r3, #5
 8014578:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014580:	d302      	bcc.n	8014588 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014586:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	b29a      	uxth	r2, r3
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	8a9b      	ldrh	r3, [r3, #20]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d102      	bne.n	801459e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014598:	69bb      	ldr	r3, [r7, #24]
 801459a:	2201      	movs	r2, #1
 801459c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a6:	d01d      	beq.n	80145e4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ac:	331e      	adds	r3, #30
 80145ae:	4a48      	ldr	r2, [pc, #288]	; (80146d0 <dhcp_bind+0x1b0>)
 80145b0:	fba2 2303 	umull	r2, r3, r2, r3
 80145b4:	095b      	lsrs	r3, r3, #5
 80145b6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145be:	d302      	bcc.n	80145c6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80145c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145c4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	69bb      	ldr	r3, [r7, #24]
 80145cc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80145ce:	69bb      	ldr	r3, [r7, #24]
 80145d0:	895b      	ldrh	r3, [r3, #10]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d102      	bne.n	80145dc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	2201      	movs	r2, #1
 80145da:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80145dc:	69bb      	ldr	r3, [r7, #24]
 80145de:	895a      	ldrh	r2, [r3, #10]
 80145e0:	69bb      	ldr	r3, [r7, #24]
 80145e2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80145e4:	69bb      	ldr	r3, [r7, #24]
 80145e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145ec:	d01d      	beq.n	801462a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145f2:	331e      	adds	r3, #30
 80145f4:	4a36      	ldr	r2, [pc, #216]	; (80146d0 <dhcp_bind+0x1b0>)
 80145f6:	fba2 2303 	umull	r2, r3, r2, r3
 80145fa:	095b      	lsrs	r3, r3, #5
 80145fc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80145fe:	69fb      	ldr	r3, [r7, #28]
 8014600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014604:	d302      	bcc.n	801460c <dhcp_bind+0xec>
      timeout = 0xffff;
 8014606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801460a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801460c:	69fb      	ldr	r3, [r7, #28]
 801460e:	b29a      	uxth	r2, r3
 8014610:	69bb      	ldr	r3, [r7, #24]
 8014612:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014614:	69bb      	ldr	r3, [r7, #24]
 8014616:	899b      	ldrh	r3, [r3, #12]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d102      	bne.n	8014622 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801461c:	69bb      	ldr	r3, [r7, #24]
 801461e:	2201      	movs	r2, #1
 8014620:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	899a      	ldrh	r2, [r3, #12]
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801462a:	69bb      	ldr	r3, [r7, #24]
 801462c:	895a      	ldrh	r2, [r3, #10]
 801462e:	69bb      	ldr	r3, [r7, #24]
 8014630:	899b      	ldrh	r3, [r3, #12]
 8014632:	429a      	cmp	r2, r3
 8014634:	d306      	bcc.n	8014644 <dhcp_bind+0x124>
 8014636:	69bb      	ldr	r3, [r7, #24]
 8014638:	899b      	ldrh	r3, [r3, #12]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d002      	beq.n	8014644 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	2200      	movs	r2, #0
 8014642:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014644:	69bb      	ldr	r3, [r7, #24]
 8014646:	79db      	ldrb	r3, [r3, #7]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d003      	beq.n	8014654 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	6a1b      	ldr	r3, [r3, #32]
 8014650:	613b      	str	r3, [r7, #16]
 8014652:	e014      	b.n	801467e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	331c      	adds	r3, #28
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801465c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014660:	2b00      	cmp	r3, #0
 8014662:	db02      	blt.n	801466a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014664:	23ff      	movs	r3, #255	; 0xff
 8014666:	613b      	str	r3, [r7, #16]
 8014668:	e009      	b.n	801467e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801466a:	7dfb      	ldrb	r3, [r7, #23]
 801466c:	2bbf      	cmp	r3, #191	; 0xbf
 801466e:	d903      	bls.n	8014678 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014670:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014674:	613b      	str	r3, [r7, #16]
 8014676:	e002      	b.n	801467e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801467c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014682:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d108      	bne.n	801469c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801468a:	69bb      	ldr	r3, [r7, #24]
 801468c:	69da      	ldr	r2, [r3, #28]
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	4013      	ands	r3, r2
 8014692:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801469a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801469c:	210a      	movs	r1, #10
 801469e:	69b8      	ldr	r0, [r7, #24]
 80146a0:	f000 faa0 	bl	8014be4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	f103 011c 	add.w	r1, r3, #28
 80146aa:	f107 030c 	add.w	r3, r7, #12
 80146ae:	f107 0210 	add.w	r2, r7, #16
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7f7 fb80 	bl	800bdb8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80146b8:	3720      	adds	r7, #32
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	0801c220 	.word	0x0801c220
 80146c4:	0801c380 	.word	0x0801c380
 80146c8:	0801c280 	.word	0x0801c280
 80146cc:	0801c39c 	.word	0x0801c39c
 80146d0:	88888889 	.word	0x88888889

080146d4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08a      	sub	sp, #40	; 0x28
 80146d8:	af02      	add	r7, sp, #8
 80146da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146e0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80146e2:	2105      	movs	r1, #5
 80146e4:	69b8      	ldr	r0, [r7, #24]
 80146e6:	f000 fa7d 	bl	8014be4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80146ea:	f107 030c 	add.w	r3, r7, #12
 80146ee:	2203      	movs	r2, #3
 80146f0:	69b9      	ldr	r1, [r7, #24]
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f000 ff02 	bl	80154fc <dhcp_create_msg>
 80146f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d04e      	beq.n	801479e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014706:	89b8      	ldrh	r0, [r7, #12]
 8014708:	693b      	ldr	r3, [r7, #16]
 801470a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801470e:	2302      	movs	r3, #2
 8014710:	2239      	movs	r2, #57	; 0x39
 8014712:	f000 fa81 	bl	8014c18 <dhcp_option>
 8014716:	4603      	mov	r3, r0
 8014718:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801471a:	89b8      	ldrh	r0, [r7, #12]
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014726:	461a      	mov	r2, r3
 8014728:	f000 fad0 	bl	8014ccc <dhcp_option_short>
 801472c:	4603      	mov	r3, r0
 801472e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014730:	89b8      	ldrh	r0, [r7, #12]
 8014732:	693b      	ldr	r3, [r7, #16]
 8014734:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014738:	2303      	movs	r3, #3
 801473a:	2237      	movs	r2, #55	; 0x37
 801473c:	f000 fa6c 	bl	8014c18 <dhcp_option>
 8014740:	4603      	mov	r3, r0
 8014742:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014744:	2300      	movs	r3, #0
 8014746:	77bb      	strb	r3, [r7, #30]
 8014748:	e00e      	b.n	8014768 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801474a:	89b8      	ldrh	r0, [r7, #12]
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014752:	7fbb      	ldrb	r3, [r7, #30]
 8014754:	4a2a      	ldr	r2, [pc, #168]	; (8014800 <dhcp_renew+0x12c>)
 8014756:	5cd3      	ldrb	r3, [r2, r3]
 8014758:	461a      	mov	r2, r3
 801475a:	f000 fa91 	bl	8014c80 <dhcp_option_byte>
 801475e:	4603      	mov	r3, r0
 8014760:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014762:	7fbb      	ldrb	r3, [r7, #30]
 8014764:	3301      	adds	r3, #1
 8014766:	77bb      	strb	r3, [r7, #30]
 8014768:	7fbb      	ldrb	r3, [r7, #30]
 801476a:	2b02      	cmp	r3, #2
 801476c:	d9ed      	bls.n	801474a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801476e:	89b8      	ldrh	r0, [r7, #12]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	33f0      	adds	r3, #240	; 0xf0
 8014774:	697a      	ldr	r2, [r7, #20]
 8014776:	4619      	mov	r1, r3
 8014778:	f000 ff96 	bl	80156a8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801477c:	4b21      	ldr	r3, [pc, #132]	; (8014804 <dhcp_renew+0x130>)
 801477e:	6818      	ldr	r0, [r3, #0]
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	f103 0218 	add.w	r2, r3, #24
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	2343      	movs	r3, #67	; 0x43
 801478c:	6979      	ldr	r1, [r7, #20]
 801478e:	f7fe fe91 	bl	80134b4 <udp_sendto_if>
 8014792:	4603      	mov	r3, r0
 8014794:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014796:	6978      	ldr	r0, [r7, #20]
 8014798:	f7f7 ffae 	bl	800c6f8 <pbuf_free>
 801479c:	e001      	b.n	80147a2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801479e:	23ff      	movs	r3, #255	; 0xff
 80147a0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	799b      	ldrb	r3, [r3, #6]
 80147a6:	2bff      	cmp	r3, #255	; 0xff
 80147a8:	d005      	beq.n	80147b6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80147aa:	69bb      	ldr	r3, [r7, #24]
 80147ac:	799b      	ldrb	r3, [r3, #6]
 80147ae:	3301      	adds	r3, #1
 80147b0:	b2da      	uxtb	r2, r3
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80147b6:	69bb      	ldr	r3, [r7, #24]
 80147b8:	799b      	ldrb	r3, [r3, #6]
 80147ba:	2b09      	cmp	r3, #9
 80147bc:	d80a      	bhi.n	80147d4 <dhcp_renew+0x100>
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	799b      	ldrb	r3, [r3, #6]
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	461a      	mov	r2, r3
 80147c6:	0152      	lsls	r2, r2, #5
 80147c8:	1ad2      	subs	r2, r2, r3
 80147ca:	0092      	lsls	r2, r2, #2
 80147cc:	4413      	add	r3, r2
 80147ce:	011b      	lsls	r3, r3, #4
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	e001      	b.n	80147d8 <dhcp_renew+0x104>
 80147d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80147d8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80147da:	89fb      	ldrh	r3, [r7, #14]
 80147dc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80147e0:	4a09      	ldr	r2, [pc, #36]	; (8014808 <dhcp_renew+0x134>)
 80147e2:	fb82 1203 	smull	r1, r2, r2, r3
 80147e6:	1152      	asrs	r2, r2, #5
 80147e8:	17db      	asrs	r3, r3, #31
 80147ea:	1ad3      	subs	r3, r2, r3
 80147ec:	b29a      	uxth	r2, r3
 80147ee:	69bb      	ldr	r3, [r7, #24]
 80147f0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80147f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3720      	adds	r7, #32
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	2000001c 	.word	0x2000001c
 8014804:	2000beb8 	.word	0x2000beb8
 8014808:	10624dd3 	.word	0x10624dd3

0801480c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b08a      	sub	sp, #40	; 0x28
 8014810:	af02      	add	r7, sp, #8
 8014812:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014818:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801481a:	2104      	movs	r1, #4
 801481c:	69b8      	ldr	r0, [r7, #24]
 801481e:	f000 f9e1 	bl	8014be4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014822:	f107 030c 	add.w	r3, r7, #12
 8014826:	2203      	movs	r2, #3
 8014828:	69b9      	ldr	r1, [r7, #24]
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f000 fe66 	bl	80154fc <dhcp_create_msg>
 8014830:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014832:	697b      	ldr	r3, [r7, #20]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d04c      	beq.n	80148d2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801483e:	89b8      	ldrh	r0, [r7, #12]
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014846:	2302      	movs	r3, #2
 8014848:	2239      	movs	r2, #57	; 0x39
 801484a:	f000 f9e5 	bl	8014c18 <dhcp_option>
 801484e:	4603      	mov	r3, r0
 8014850:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014852:	89b8      	ldrh	r0, [r7, #12]
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801485e:	461a      	mov	r2, r3
 8014860:	f000 fa34 	bl	8014ccc <dhcp_option_short>
 8014864:	4603      	mov	r3, r0
 8014866:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014868:	89b8      	ldrh	r0, [r7, #12]
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014870:	2303      	movs	r3, #3
 8014872:	2237      	movs	r2, #55	; 0x37
 8014874:	f000 f9d0 	bl	8014c18 <dhcp_option>
 8014878:	4603      	mov	r3, r0
 801487a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801487c:	2300      	movs	r3, #0
 801487e:	77bb      	strb	r3, [r7, #30]
 8014880:	e00e      	b.n	80148a0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014882:	89b8      	ldrh	r0, [r7, #12]
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801488a:	7fbb      	ldrb	r3, [r7, #30]
 801488c:	4a29      	ldr	r2, [pc, #164]	; (8014934 <dhcp_rebind+0x128>)
 801488e:	5cd3      	ldrb	r3, [r2, r3]
 8014890:	461a      	mov	r2, r3
 8014892:	f000 f9f5 	bl	8014c80 <dhcp_option_byte>
 8014896:	4603      	mov	r3, r0
 8014898:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801489a:	7fbb      	ldrb	r3, [r7, #30]
 801489c:	3301      	adds	r3, #1
 801489e:	77bb      	strb	r3, [r7, #30]
 80148a0:	7fbb      	ldrb	r3, [r7, #30]
 80148a2:	2b02      	cmp	r3, #2
 80148a4:	d9ed      	bls.n	8014882 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80148a6:	89b8      	ldrh	r0, [r7, #12]
 80148a8:	693b      	ldr	r3, [r7, #16]
 80148aa:	33f0      	adds	r3, #240	; 0xf0
 80148ac:	697a      	ldr	r2, [r7, #20]
 80148ae:	4619      	mov	r1, r3
 80148b0:	f000 fefa 	bl	80156a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80148b4:	4b20      	ldr	r3, [pc, #128]	; (8014938 <dhcp_rebind+0x12c>)
 80148b6:	6818      	ldr	r0, [r3, #0]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	9300      	str	r3, [sp, #0]
 80148bc:	2343      	movs	r3, #67	; 0x43
 80148be:	4a1f      	ldr	r2, [pc, #124]	; (801493c <dhcp_rebind+0x130>)
 80148c0:	6979      	ldr	r1, [r7, #20]
 80148c2:	f7fe fdf7 	bl	80134b4 <udp_sendto_if>
 80148c6:	4603      	mov	r3, r0
 80148c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80148ca:	6978      	ldr	r0, [r7, #20]
 80148cc:	f7f7 ff14 	bl	800c6f8 <pbuf_free>
 80148d0:	e001      	b.n	80148d6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80148d2:	23ff      	movs	r3, #255	; 0xff
 80148d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80148d6:	69bb      	ldr	r3, [r7, #24]
 80148d8:	799b      	ldrb	r3, [r3, #6]
 80148da:	2bff      	cmp	r3, #255	; 0xff
 80148dc:	d005      	beq.n	80148ea <dhcp_rebind+0xde>
    dhcp->tries++;
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	799b      	ldrb	r3, [r3, #6]
 80148e2:	3301      	adds	r3, #1
 80148e4:	b2da      	uxtb	r2, r3
 80148e6:	69bb      	ldr	r3, [r7, #24]
 80148e8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	799b      	ldrb	r3, [r3, #6]
 80148ee:	2b09      	cmp	r3, #9
 80148f0:	d80a      	bhi.n	8014908 <dhcp_rebind+0xfc>
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	799b      	ldrb	r3, [r3, #6]
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	461a      	mov	r2, r3
 80148fa:	0152      	lsls	r2, r2, #5
 80148fc:	1ad2      	subs	r2, r2, r3
 80148fe:	0092      	lsls	r2, r2, #2
 8014900:	4413      	add	r3, r2
 8014902:	00db      	lsls	r3, r3, #3
 8014904:	b29b      	uxth	r3, r3
 8014906:	e001      	b.n	801490c <dhcp_rebind+0x100>
 8014908:	f242 7310 	movw	r3, #10000	; 0x2710
 801490c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801490e:	89fb      	ldrh	r3, [r7, #14]
 8014910:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014914:	4a0a      	ldr	r2, [pc, #40]	; (8014940 <dhcp_rebind+0x134>)
 8014916:	fb82 1203 	smull	r1, r2, r2, r3
 801491a:	1152      	asrs	r2, r2, #5
 801491c:	17db      	asrs	r3, r3, #31
 801491e:	1ad3      	subs	r3, r2, r3
 8014920:	b29a      	uxth	r2, r3
 8014922:	69bb      	ldr	r3, [r7, #24]
 8014924:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014926:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801492a:	4618      	mov	r0, r3
 801492c:	3720      	adds	r7, #32
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	2000001c 	.word	0x2000001c
 8014938:	2000beb8 	.word	0x2000beb8
 801493c:	0801cdd8 	.word	0x0801cdd8
 8014940:	10624dd3 	.word	0x10624dd3

08014944 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014944:	b5b0      	push	{r4, r5, r7, lr}
 8014946:	b08a      	sub	sp, #40	; 0x28
 8014948:	af02      	add	r7, sp, #8
 801494a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014950:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014952:	2103      	movs	r1, #3
 8014954:	69b8      	ldr	r0, [r7, #24]
 8014956:	f000 f945 	bl	8014be4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801495a:	f107 030c 	add.w	r3, r7, #12
 801495e:	2203      	movs	r2, #3
 8014960:	69b9      	ldr	r1, [r7, #24]
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f000 fdca 	bl	80154fc <dhcp_create_msg>
 8014968:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d066      	beq.n	8014a3e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014976:	89b8      	ldrh	r0, [r7, #12]
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801497e:	2302      	movs	r3, #2
 8014980:	2239      	movs	r2, #57	; 0x39
 8014982:	f000 f949 	bl	8014c18 <dhcp_option>
 8014986:	4603      	mov	r3, r0
 8014988:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801498a:	89b8      	ldrh	r0, [r7, #12]
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	33f0      	adds	r3, #240	; 0xf0
 8014990:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014994:	4619      	mov	r1, r3
 8014996:	f000 f999 	bl	8014ccc <dhcp_option_short>
 801499a:	4603      	mov	r3, r0
 801499c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801499e:	89b8      	ldrh	r0, [r7, #12]
 80149a0:	693b      	ldr	r3, [r7, #16]
 80149a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149a6:	2304      	movs	r3, #4
 80149a8:	2232      	movs	r2, #50	; 0x32
 80149aa:	f000 f935 	bl	8014c18 <dhcp_option>
 80149ae:	4603      	mov	r3, r0
 80149b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80149b2:	89bc      	ldrh	r4, [r7, #12]
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80149ba:	69bb      	ldr	r3, [r7, #24]
 80149bc:	69db      	ldr	r3, [r3, #28]
 80149be:	4618      	mov	r0, r3
 80149c0:	f7f6 fa4a 	bl	800ae58 <lwip_htonl>
 80149c4:	4603      	mov	r3, r0
 80149c6:	461a      	mov	r2, r3
 80149c8:	4629      	mov	r1, r5
 80149ca:	4620      	mov	r0, r4
 80149cc:	f000 f9b0 	bl	8014d30 <dhcp_option_long>
 80149d0:	4603      	mov	r3, r0
 80149d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80149d4:	89b8      	ldrh	r0, [r7, #12]
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149dc:	2303      	movs	r3, #3
 80149de:	2237      	movs	r2, #55	; 0x37
 80149e0:	f000 f91a 	bl	8014c18 <dhcp_option>
 80149e4:	4603      	mov	r3, r0
 80149e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149e8:	2300      	movs	r3, #0
 80149ea:	77bb      	strb	r3, [r7, #30]
 80149ec:	e00e      	b.n	8014a0c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80149ee:	89b8      	ldrh	r0, [r7, #12]
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149f6:	7fbb      	ldrb	r3, [r7, #30]
 80149f8:	4a29      	ldr	r2, [pc, #164]	; (8014aa0 <dhcp_reboot+0x15c>)
 80149fa:	5cd3      	ldrb	r3, [r2, r3]
 80149fc:	461a      	mov	r2, r3
 80149fe:	f000 f93f 	bl	8014c80 <dhcp_option_byte>
 8014a02:	4603      	mov	r3, r0
 8014a04:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014a06:	7fbb      	ldrb	r3, [r7, #30]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	77bb      	strb	r3, [r7, #30]
 8014a0c:	7fbb      	ldrb	r3, [r7, #30]
 8014a0e:	2b02      	cmp	r3, #2
 8014a10:	d9ed      	bls.n	80149ee <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014a12:	89b8      	ldrh	r0, [r7, #12]
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	33f0      	adds	r3, #240	; 0xf0
 8014a18:	697a      	ldr	r2, [r7, #20]
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	f000 fe44 	bl	80156a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014a20:	4b20      	ldr	r3, [pc, #128]	; (8014aa4 <dhcp_reboot+0x160>)
 8014a22:	6818      	ldr	r0, [r3, #0]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	9300      	str	r3, [sp, #0]
 8014a28:	2343      	movs	r3, #67	; 0x43
 8014a2a:	4a1f      	ldr	r2, [pc, #124]	; (8014aa8 <dhcp_reboot+0x164>)
 8014a2c:	6979      	ldr	r1, [r7, #20]
 8014a2e:	f7fe fd41 	bl	80134b4 <udp_sendto_if>
 8014a32:	4603      	mov	r3, r0
 8014a34:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014a36:	6978      	ldr	r0, [r7, #20]
 8014a38:	f7f7 fe5e 	bl	800c6f8 <pbuf_free>
 8014a3c:	e001      	b.n	8014a42 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014a3e:	23ff      	movs	r3, #255	; 0xff
 8014a40:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014a42:	69bb      	ldr	r3, [r7, #24]
 8014a44:	799b      	ldrb	r3, [r3, #6]
 8014a46:	2bff      	cmp	r3, #255	; 0xff
 8014a48:	d005      	beq.n	8014a56 <dhcp_reboot+0x112>
    dhcp->tries++;
 8014a4a:	69bb      	ldr	r3, [r7, #24]
 8014a4c:	799b      	ldrb	r3, [r3, #6]
 8014a4e:	3301      	adds	r3, #1
 8014a50:	b2da      	uxtb	r2, r3
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014a56:	69bb      	ldr	r3, [r7, #24]
 8014a58:	799b      	ldrb	r3, [r3, #6]
 8014a5a:	2b09      	cmp	r3, #9
 8014a5c:	d80a      	bhi.n	8014a74 <dhcp_reboot+0x130>
 8014a5e:	69bb      	ldr	r3, [r7, #24]
 8014a60:	799b      	ldrb	r3, [r3, #6]
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	461a      	mov	r2, r3
 8014a66:	0152      	lsls	r2, r2, #5
 8014a68:	1ad2      	subs	r2, r2, r3
 8014a6a:	0092      	lsls	r2, r2, #2
 8014a6c:	4413      	add	r3, r2
 8014a6e:	00db      	lsls	r3, r3, #3
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	e001      	b.n	8014a78 <dhcp_reboot+0x134>
 8014a74:	f242 7310 	movw	r3, #10000	; 0x2710
 8014a78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a7a:	89fb      	ldrh	r3, [r7, #14]
 8014a7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014a80:	4a0a      	ldr	r2, [pc, #40]	; (8014aac <dhcp_reboot+0x168>)
 8014a82:	fb82 1203 	smull	r1, r2, r2, r3
 8014a86:	1152      	asrs	r2, r2, #5
 8014a88:	17db      	asrs	r3, r3, #31
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	b29a      	uxth	r2, r3
 8014a8e:	69bb      	ldr	r3, [r7, #24]
 8014a90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3720      	adds	r7, #32
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	2000001c 	.word	0x2000001c
 8014aa4:	2000beb8 	.word	0x2000beb8
 8014aa8:	0801cdd8 	.word	0x0801cdd8
 8014aac:	10624dd3 	.word	0x10624dd3

08014ab0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014ab0:	b5b0      	push	{r4, r5, r7, lr}
 8014ab2:	b08a      	sub	sp, #40	; 0x28
 8014ab4:	af02      	add	r7, sp, #8
 8014ab6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014abc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014abe:	69fb      	ldr	r3, [r7, #28]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	f000 8084 	beq.w	8014bce <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	795b      	ldrb	r3, [r3, #5]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	f000 8081 	beq.w	8014bd2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	699b      	ldr	r3, [r3, #24]
 8014ad4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014adc:	69fb      	ldr	r3, [r7, #28]
 8014ade:	2200      	movs	r2, #0
 8014ae0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014ae8:	69fb      	ldr	r3, [r7, #28]
 8014aea:	2200      	movs	r2, #0
 8014aec:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	2200      	movs	r2, #0
 8014af2:	631a      	str	r2, [r3, #48]	; 0x30
 8014af4:	69fb      	ldr	r3, [r7, #28]
 8014af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	62da      	str	r2, [r3, #44]	; 0x2c
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014b04:	69fb      	ldr	r3, [r7, #28]
 8014b06:	2200      	movs	r2, #0
 8014b08:	829a      	strh	r2, [r3, #20]
 8014b0a:	69fb      	ldr	r3, [r7, #28]
 8014b0c:	8a9a      	ldrh	r2, [r3, #20]
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	825a      	strh	r2, [r3, #18]
 8014b12:	69fb      	ldr	r3, [r7, #28]
 8014b14:	8a5a      	ldrh	r2, [r3, #18]
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	821a      	strh	r2, [r3, #16]
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	8a1a      	ldrh	r2, [r3, #16]
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f000 fdee 	bl	8015704 <dhcp_supplied_address>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d03b      	beq.n	8014ba6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014b2e:	f107 030e 	add.w	r3, r7, #14
 8014b32:	2207      	movs	r2, #7
 8014b34:	69f9      	ldr	r1, [r7, #28]
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	f000 fce0 	bl	80154fc <dhcp_create_msg>
 8014b3c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014b3e:	69bb      	ldr	r3, [r7, #24]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d030      	beq.n	8014ba6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014b4a:	89f8      	ldrh	r0, [r7, #14]
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b52:	2304      	movs	r3, #4
 8014b54:	2236      	movs	r2, #54	; 0x36
 8014b56:	f000 f85f 	bl	8014c18 <dhcp_option>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014b5e:	89fc      	ldrh	r4, [r7, #14]
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7f6 f975 	bl	800ae58 <lwip_htonl>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	461a      	mov	r2, r3
 8014b72:	4629      	mov	r1, r5
 8014b74:	4620      	mov	r0, r4
 8014b76:	f000 f8db 	bl	8014d30 <dhcp_option_long>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b7e:	89f8      	ldrh	r0, [r7, #14]
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	33f0      	adds	r3, #240	; 0xf0
 8014b84:	69ba      	ldr	r2, [r7, #24]
 8014b86:	4619      	mov	r1, r3
 8014b88:	f000 fd8e 	bl	80156a8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014b8c:	4b13      	ldr	r3, [pc, #76]	; (8014bdc <dhcp_release_and_stop+0x12c>)
 8014b8e:	6818      	ldr	r0, [r3, #0]
 8014b90:	f107 0210 	add.w	r2, r7, #16
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	2343      	movs	r3, #67	; 0x43
 8014b9a:	69b9      	ldr	r1, [r7, #24]
 8014b9c:	f7fe fc8a 	bl	80134b4 <udp_sendto_if>
      pbuf_free(p_out);
 8014ba0:	69b8      	ldr	r0, [r7, #24]
 8014ba2:	f7f7 fda9 	bl	800c6f8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014ba6:	4b0e      	ldr	r3, [pc, #56]	; (8014be0 <dhcp_release_and_stop+0x130>)
 8014ba8:	4a0d      	ldr	r2, [pc, #52]	; (8014be0 <dhcp_release_and_stop+0x130>)
 8014baa:	490d      	ldr	r1, [pc, #52]	; (8014be0 <dhcp_release_and_stop+0x130>)
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f7f7 f903 	bl	800bdb8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014bb2:	2100      	movs	r1, #0
 8014bb4:	69f8      	ldr	r0, [r7, #28]
 8014bb6:	f000 f815 	bl	8014be4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	791b      	ldrb	r3, [r3, #4]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d008      	beq.n	8014bd4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014bc2:	f7fe ffc1 	bl	8013b48 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	711a      	strb	r2, [r3, #4]
 8014bcc:	e002      	b.n	8014bd4 <dhcp_release_and_stop+0x124>
    return;
 8014bce:	bf00      	nop
 8014bd0:	e000      	b.n	8014bd4 <dhcp_release_and_stop+0x124>
    return;
 8014bd2:	bf00      	nop
  }
}
 8014bd4:	3720      	adds	r7, #32
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	2000beb8 	.word	0x2000beb8
 8014be0:	0801cdd4 	.word	0x0801cdd4

08014be4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014be4:	b480      	push	{r7}
 8014be6:	b083      	sub	sp, #12
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	460b      	mov	r3, r1
 8014bee:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	795b      	ldrb	r3, [r3, #5]
 8014bf4:	78fa      	ldrb	r2, [r7, #3]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d008      	beq.n	8014c0c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	78fa      	ldrb	r2, [r7, #3]
 8014bfe:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2200      	movs	r2, #0
 8014c04:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	811a      	strh	r2, [r3, #8]
  }
}
 8014c0c:	bf00      	nop
 8014c0e:	370c      	adds	r7, #12
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bc80      	pop	{r7}
 8014c14:	4770      	bx	lr
	...

08014c18 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b082      	sub	sp, #8
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6039      	str	r1, [r7, #0]
 8014c20:	4611      	mov	r1, r2
 8014c22:	461a      	mov	r2, r3
 8014c24:	4603      	mov	r3, r0
 8014c26:	80fb      	strh	r3, [r7, #6]
 8014c28:	460b      	mov	r3, r1
 8014c2a:	717b      	strb	r3, [r7, #5]
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014c30:	88fa      	ldrh	r2, [r7, #6]
 8014c32:	793b      	ldrb	r3, [r7, #4]
 8014c34:	4413      	add	r3, r2
 8014c36:	3302      	adds	r3, #2
 8014c38:	2b44      	cmp	r3, #68	; 0x44
 8014c3a:	d906      	bls.n	8014c4a <dhcp_option+0x32>
 8014c3c:	4b0d      	ldr	r3, [pc, #52]	; (8014c74 <dhcp_option+0x5c>)
 8014c3e:	f240 529a 	movw	r2, #1434	; 0x59a
 8014c42:	490d      	ldr	r1, [pc, #52]	; (8014c78 <dhcp_option+0x60>)
 8014c44:	480d      	ldr	r0, [pc, #52]	; (8014c7c <dhcp_option+0x64>)
 8014c46:	f003 fefd 	bl	8018a44 <iprintf>
  options[options_out_len++] = option_type;
 8014c4a:	88fb      	ldrh	r3, [r7, #6]
 8014c4c:	1c5a      	adds	r2, r3, #1
 8014c4e:	80fa      	strh	r2, [r7, #6]
 8014c50:	461a      	mov	r2, r3
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	4413      	add	r3, r2
 8014c56:	797a      	ldrb	r2, [r7, #5]
 8014c58:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014c5a:	88fb      	ldrh	r3, [r7, #6]
 8014c5c:	1c5a      	adds	r2, r3, #1
 8014c5e:	80fa      	strh	r2, [r7, #6]
 8014c60:	461a      	mov	r2, r3
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	4413      	add	r3, r2
 8014c66:	793a      	ldrb	r2, [r7, #4]
 8014c68:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c6a:	88fb      	ldrh	r3, [r7, #6]
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3708      	adds	r7, #8
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	0801c220 	.word	0x0801c220
 8014c78:	0801c3b4 	.word	0x0801c3b4
 8014c7c:	0801c280 	.word	0x0801c280

08014c80 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	4603      	mov	r3, r0
 8014c88:	6039      	str	r1, [r7, #0]
 8014c8a:	80fb      	strh	r3, [r7, #6]
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014c90:	88fb      	ldrh	r3, [r7, #6]
 8014c92:	2b43      	cmp	r3, #67	; 0x43
 8014c94:	d906      	bls.n	8014ca4 <dhcp_option_byte+0x24>
 8014c96:	4b0a      	ldr	r3, [pc, #40]	; (8014cc0 <dhcp_option_byte+0x40>)
 8014c98:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014c9c:	4909      	ldr	r1, [pc, #36]	; (8014cc4 <dhcp_option_byte+0x44>)
 8014c9e:	480a      	ldr	r0, [pc, #40]	; (8014cc8 <dhcp_option_byte+0x48>)
 8014ca0:	f003 fed0 	bl	8018a44 <iprintf>
  options[options_out_len++] = value;
 8014ca4:	88fb      	ldrh	r3, [r7, #6]
 8014ca6:	1c5a      	adds	r2, r3, #1
 8014ca8:	80fa      	strh	r2, [r7, #6]
 8014caa:	461a      	mov	r2, r3
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	4413      	add	r3, r2
 8014cb0:	797a      	ldrb	r2, [r7, #5]
 8014cb2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014cb4:	88fb      	ldrh	r3, [r7, #6]
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3708      	adds	r7, #8
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	0801c220 	.word	0x0801c220
 8014cc4:	0801c3f8 	.word	0x0801c3f8
 8014cc8:	0801c280 	.word	0x0801c280

08014ccc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b082      	sub	sp, #8
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	6039      	str	r1, [r7, #0]
 8014cd6:	80fb      	strh	r3, [r7, #6]
 8014cd8:	4613      	mov	r3, r2
 8014cda:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014cdc:	88fb      	ldrh	r3, [r7, #6]
 8014cde:	3302      	adds	r3, #2
 8014ce0:	2b44      	cmp	r3, #68	; 0x44
 8014ce2:	d906      	bls.n	8014cf2 <dhcp_option_short+0x26>
 8014ce4:	4b0f      	ldr	r3, [pc, #60]	; (8014d24 <dhcp_option_short+0x58>)
 8014ce6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014cea:	490f      	ldr	r1, [pc, #60]	; (8014d28 <dhcp_option_short+0x5c>)
 8014cec:	480f      	ldr	r0, [pc, #60]	; (8014d2c <dhcp_option_short+0x60>)
 8014cee:	f003 fea9 	bl	8018a44 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014cf2:	88bb      	ldrh	r3, [r7, #4]
 8014cf4:	0a1b      	lsrs	r3, r3, #8
 8014cf6:	b29a      	uxth	r2, r3
 8014cf8:	88fb      	ldrh	r3, [r7, #6]
 8014cfa:	1c59      	adds	r1, r3, #1
 8014cfc:	80f9      	strh	r1, [r7, #6]
 8014cfe:	4619      	mov	r1, r3
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	440b      	add	r3, r1
 8014d04:	b2d2      	uxtb	r2, r2
 8014d06:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014d08:	88fb      	ldrh	r3, [r7, #6]
 8014d0a:	1c5a      	adds	r2, r3, #1
 8014d0c:	80fa      	strh	r2, [r7, #6]
 8014d0e:	461a      	mov	r2, r3
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	4413      	add	r3, r2
 8014d14:	88ba      	ldrh	r2, [r7, #4]
 8014d16:	b2d2      	uxtb	r2, r2
 8014d18:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d1a:	88fb      	ldrh	r3, [r7, #6]
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3708      	adds	r7, #8
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}
 8014d24:	0801c220 	.word	0x0801c220
 8014d28:	0801c430 	.word	0x0801c430
 8014d2c:	0801c280 	.word	0x0801c280

08014d30 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b084      	sub	sp, #16
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	4603      	mov	r3, r0
 8014d38:	60b9      	str	r1, [r7, #8]
 8014d3a:	607a      	str	r2, [r7, #4]
 8014d3c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014d3e:	89fb      	ldrh	r3, [r7, #14]
 8014d40:	3304      	adds	r3, #4
 8014d42:	2b44      	cmp	r3, #68	; 0x44
 8014d44:	d906      	bls.n	8014d54 <dhcp_option_long+0x24>
 8014d46:	4b19      	ldr	r3, [pc, #100]	; (8014dac <dhcp_option_long+0x7c>)
 8014d48:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014d4c:	4918      	ldr	r1, [pc, #96]	; (8014db0 <dhcp_option_long+0x80>)
 8014d4e:	4819      	ldr	r0, [pc, #100]	; (8014db4 <dhcp_option_long+0x84>)
 8014d50:	f003 fe78 	bl	8018a44 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	0e1a      	lsrs	r2, r3, #24
 8014d58:	89fb      	ldrh	r3, [r7, #14]
 8014d5a:	1c59      	adds	r1, r3, #1
 8014d5c:	81f9      	strh	r1, [r7, #14]
 8014d5e:	4619      	mov	r1, r3
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	440b      	add	r3, r1
 8014d64:	b2d2      	uxtb	r2, r2
 8014d66:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	0c1a      	lsrs	r2, r3, #16
 8014d6c:	89fb      	ldrh	r3, [r7, #14]
 8014d6e:	1c59      	adds	r1, r3, #1
 8014d70:	81f9      	strh	r1, [r7, #14]
 8014d72:	4619      	mov	r1, r3
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	440b      	add	r3, r1
 8014d78:	b2d2      	uxtb	r2, r2
 8014d7a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	0a1a      	lsrs	r2, r3, #8
 8014d80:	89fb      	ldrh	r3, [r7, #14]
 8014d82:	1c59      	adds	r1, r3, #1
 8014d84:	81f9      	strh	r1, [r7, #14]
 8014d86:	4619      	mov	r1, r3
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	440b      	add	r3, r1
 8014d8c:	b2d2      	uxtb	r2, r2
 8014d8e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014d90:	89fb      	ldrh	r3, [r7, #14]
 8014d92:	1c5a      	adds	r2, r3, #1
 8014d94:	81fa      	strh	r2, [r7, #14]
 8014d96:	461a      	mov	r2, r3
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	b2d2      	uxtb	r2, r2
 8014da0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014da2:	89fb      	ldrh	r3, [r7, #14]
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3710      	adds	r7, #16
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	0801c220 	.word	0x0801c220
 8014db0:	0801c46c 	.word	0x0801c46c
 8014db4:	0801c280 	.word	0x0801c280

08014db8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b090      	sub	sp, #64	; 0x40
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014dca:	2208      	movs	r2, #8
 8014dcc:	2100      	movs	r1, #0
 8014dce:	48b5      	ldr	r0, [pc, #724]	; (80150a4 <dhcp_parse_reply+0x2ec>)
 8014dd0:	f003 fd52 	bl	8018878 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	895b      	ldrh	r3, [r3, #10]
 8014dd8:	2b2b      	cmp	r3, #43	; 0x2b
 8014dda:	d802      	bhi.n	8014de2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014ddc:	f06f 0301 	mvn.w	r3, #1
 8014de0:	e2a7      	b.n	8015332 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014de8:	23f0      	movs	r3, #240	; 0xf0
 8014dea:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	891b      	ldrh	r3, [r3, #8]
 8014df0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014df6:	e00c      	b.n	8014e12 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dfa:	895b      	ldrh	r3, [r3, #10]
 8014dfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014dfe:	1ad3      	subs	r3, r2, r3
 8014e00:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e04:	895b      	ldrh	r3, [r3, #10]
 8014e06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014e08:	1ad3      	subs	r3, r2, r3
 8014e0a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d004      	beq.n	8014e22 <dhcp_parse_reply+0x6a>
 8014e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e1a:	895b      	ldrh	r3, [r3, #10]
 8014e1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d2ea      	bcs.n	8014df8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d102      	bne.n	8014e2e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014e28:	f06f 0301 	mvn.w	r3, #1
 8014e2c:	e281      	b.n	8015332 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8014e2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014e30:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014e32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014e34:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014e3c:	e239      	b.n	80152b2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8014e3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e42:	4413      	add	r3, r2
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e52:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014e54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e56:	3302      	adds	r3, #2
 8014e58:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014e5a:	8bfa      	ldrh	r2, [r7, #30]
 8014e5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d202      	bcs.n	8014e68 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014e62:	f06f 0301 	mvn.w	r3, #1
 8014e66:	e264      	b.n	8015332 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014e68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e6e:	8952      	ldrh	r2, [r2, #10]
 8014e70:	4293      	cmp	r3, r2
 8014e72:	da07      	bge.n	8014e84 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014e74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e76:	3301      	adds	r3, #1
 8014e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e7a:	4413      	add	r3, r2
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e82:	e00b      	b.n	8014e9c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d004      	beq.n	8014e96 <dhcp_parse_reply+0xde>
 8014e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	e000      	b.n	8014e98 <dhcp_parse_reply+0xe0>
 8014e96:	2300      	movs	r3, #0
 8014e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014ea4:	7dfb      	ldrb	r3, [r7, #23]
 8014ea6:	2b3b      	cmp	r3, #59	; 0x3b
 8014ea8:	f200 812c 	bhi.w	8015104 <dhcp_parse_reply+0x34c>
 8014eac:	a201      	add	r2, pc, #4	; (adr r2, 8014eb4 <dhcp_parse_reply+0xfc>)
 8014eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014eb2:	bf00      	nop
 8014eb4:	08014fa5 	.word	0x08014fa5
 8014eb8:	08014fb5 	.word	0x08014fb5
 8014ebc:	08015105 	.word	0x08015105
 8014ec0:	08014fd7 	.word	0x08014fd7
 8014ec4:	08015105 	.word	0x08015105
 8014ec8:	08015105 	.word	0x08015105
 8014ecc:	08015105 	.word	0x08015105
 8014ed0:	08015105 	.word	0x08015105
 8014ed4:	08015105 	.word	0x08015105
 8014ed8:	08015105 	.word	0x08015105
 8014edc:	08015105 	.word	0x08015105
 8014ee0:	08015105 	.word	0x08015105
 8014ee4:	08015105 	.word	0x08015105
 8014ee8:	08015105 	.word	0x08015105
 8014eec:	08015105 	.word	0x08015105
 8014ef0:	08015105 	.word	0x08015105
 8014ef4:	08015105 	.word	0x08015105
 8014ef8:	08015105 	.word	0x08015105
 8014efc:	08015105 	.word	0x08015105
 8014f00:	08015105 	.word	0x08015105
 8014f04:	08015105 	.word	0x08015105
 8014f08:	08015105 	.word	0x08015105
 8014f0c:	08015105 	.word	0x08015105
 8014f10:	08015105 	.word	0x08015105
 8014f14:	08015105 	.word	0x08015105
 8014f18:	08015105 	.word	0x08015105
 8014f1c:	08015105 	.word	0x08015105
 8014f20:	08015105 	.word	0x08015105
 8014f24:	08015105 	.word	0x08015105
 8014f28:	08015105 	.word	0x08015105
 8014f2c:	08015105 	.word	0x08015105
 8014f30:	08015105 	.word	0x08015105
 8014f34:	08015105 	.word	0x08015105
 8014f38:	08015105 	.word	0x08015105
 8014f3c:	08015105 	.word	0x08015105
 8014f40:	08015105 	.word	0x08015105
 8014f44:	08015105 	.word	0x08015105
 8014f48:	08015105 	.word	0x08015105
 8014f4c:	08015105 	.word	0x08015105
 8014f50:	08015105 	.word	0x08015105
 8014f54:	08015105 	.word	0x08015105
 8014f58:	08015105 	.word	0x08015105
 8014f5c:	08015105 	.word	0x08015105
 8014f60:	08015105 	.word	0x08015105
 8014f64:	08015105 	.word	0x08015105
 8014f68:	08015105 	.word	0x08015105
 8014f6c:	08015105 	.word	0x08015105
 8014f70:	08015105 	.word	0x08015105
 8014f74:	08015105 	.word	0x08015105
 8014f78:	08015105 	.word	0x08015105
 8014f7c:	08015105 	.word	0x08015105
 8014f80:	08015003 	.word	0x08015003
 8014f84:	08015025 	.word	0x08015025
 8014f88:	08015061 	.word	0x08015061
 8014f8c:	08015083 	.word	0x08015083
 8014f90:	08015105 	.word	0x08015105
 8014f94:	08015105 	.word	0x08015105
 8014f98:	08015105 	.word	0x08015105
 8014f9c:	080150c1 	.word	0x080150c1
 8014fa0:	080150e3 	.word	0x080150e3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014fb2:	e0ab      	b.n	801510c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fb8:	2b04      	cmp	r3, #4
 8014fba:	d009      	beq.n	8014fd0 <dhcp_parse_reply+0x218>
 8014fbc:	4b3a      	ldr	r3, [pc, #232]	; (80150a8 <dhcp_parse_reply+0x2f0>)
 8014fbe:	f240 622e 	movw	r2, #1582	; 0x62e
 8014fc2:	493a      	ldr	r1, [pc, #232]	; (80150ac <dhcp_parse_reply+0x2f4>)
 8014fc4:	483a      	ldr	r0, [pc, #232]	; (80150b0 <dhcp_parse_reply+0x2f8>)
 8014fc6:	f003 fd3d 	bl	8018a44 <iprintf>
 8014fca:	f06f 0305 	mvn.w	r3, #5
 8014fce:	e1b0      	b.n	8015332 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014fd0:	2306      	movs	r3, #6
 8014fd2:	623b      	str	r3, [r7, #32]
        break;
 8014fd4:	e09a      	b.n	801510c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014fd6:	2304      	movs	r3, #4
 8014fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014fdc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d209      	bcs.n	8014ffc <dhcp_parse_reply+0x244>
 8014fe8:	4b2f      	ldr	r3, [pc, #188]	; (80150a8 <dhcp_parse_reply+0x2f0>)
 8014fea:	f240 6233 	movw	r2, #1587	; 0x633
 8014fee:	4931      	ldr	r1, [pc, #196]	; (80150b4 <dhcp_parse_reply+0x2fc>)
 8014ff0:	482f      	ldr	r0, [pc, #188]	; (80150b0 <dhcp_parse_reply+0x2f8>)
 8014ff2:	f003 fd27 	bl	8018a44 <iprintf>
 8014ff6:	f06f 0305 	mvn.w	r3, #5
 8014ffa:	e19a      	b.n	8015332 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014ffc:	2307      	movs	r3, #7
 8014ffe:	623b      	str	r3, [r7, #32]
        break;
 8015000:	e084      	b.n	801510c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015006:	2b04      	cmp	r3, #4
 8015008:	d009      	beq.n	801501e <dhcp_parse_reply+0x266>
 801500a:	4b27      	ldr	r3, [pc, #156]	; (80150a8 <dhcp_parse_reply+0x2f0>)
 801500c:	f240 6241 	movw	r2, #1601	; 0x641
 8015010:	4926      	ldr	r1, [pc, #152]	; (80150ac <dhcp_parse_reply+0x2f4>)
 8015012:	4827      	ldr	r0, [pc, #156]	; (80150b0 <dhcp_parse_reply+0x2f8>)
 8015014:	f003 fd16 	bl	8018a44 <iprintf>
 8015018:	f06f 0305 	mvn.w	r3, #5
 801501c:	e189      	b.n	8015332 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801501e:	2303      	movs	r3, #3
 8015020:	623b      	str	r3, [r7, #32]
        break;
 8015022:	e073      	b.n	801510c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015028:	2b01      	cmp	r3, #1
 801502a:	d009      	beq.n	8015040 <dhcp_parse_reply+0x288>
 801502c:	4b1e      	ldr	r3, [pc, #120]	; (80150a8 <dhcp_parse_reply+0x2f0>)
 801502e:	f240 624f 	movw	r2, #1615	; 0x64f
 8015032:	4921      	ldr	r1, [pc, #132]	; (80150b8 <dhcp_parse_reply+0x300>)
 8015034:	481e      	ldr	r0, [pc, #120]	; (80150b0 <dhcp_parse_reply+0x2f8>)
 8015036:	f003 fd05 	bl	8018a44 <iprintf>
 801503a:	f06f 0305 	mvn.w	r3, #5
 801503e:	e178      	b.n	8015332 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015040:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015042:	2bf0      	cmp	r3, #240	; 0xf0
 8015044:	d009      	beq.n	801505a <dhcp_parse_reply+0x2a2>
 8015046:	4b18      	ldr	r3, [pc, #96]	; (80150a8 <dhcp_parse_reply+0x2f0>)
 8015048:	f240 6251 	movw	r2, #1617	; 0x651
 801504c:	491b      	ldr	r1, [pc, #108]	; (80150bc <dhcp_parse_reply+0x304>)
 801504e:	4818      	ldr	r0, [pc, #96]	; (80150b0 <dhcp_parse_reply+0x2f8>)
 8015050:	f003 fcf8 	bl	8018a44 <iprintf>
 8015054:	f06f 0305 	mvn.w	r3, #5
 8015058:	e16b      	b.n	8015332 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801505a:	2300      	movs	r3, #0
 801505c:	623b      	str	r3, [r7, #32]
        break;
 801505e:	e055      	b.n	801510c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015064:	2b01      	cmp	r3, #1
 8015066:	d009      	beq.n	801507c <dhcp_parse_reply+0x2c4>
 8015068:	4b0f      	ldr	r3, [pc, #60]	; (80150a8 <dhcp_parse_reply+0x2f0>)
 801506a:	f240 6255 	movw	r2, #1621	; 0x655
 801506e:	4912      	ldr	r1, [pc, #72]	; (80150b8 <dhcp_parse_reply+0x300>)
 8015070:	480f      	ldr	r0, [pc, #60]	; (80150b0 <dhcp_parse_reply+0x2f8>)
 8015072:	f003 fce7 	bl	8018a44 <iprintf>
 8015076:	f06f 0305 	mvn.w	r3, #5
 801507a:	e15a      	b.n	8015332 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801507c:	2301      	movs	r3, #1
 801507e:	623b      	str	r3, [r7, #32]
        break;
 8015080:	e044      	b.n	801510c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015086:	2b04      	cmp	r3, #4
 8015088:	d009      	beq.n	801509e <dhcp_parse_reply+0x2e6>
 801508a:	4b07      	ldr	r3, [pc, #28]	; (80150a8 <dhcp_parse_reply+0x2f0>)
 801508c:	f240 6259 	movw	r2, #1625	; 0x659
 8015090:	4906      	ldr	r1, [pc, #24]	; (80150ac <dhcp_parse_reply+0x2f4>)
 8015092:	4807      	ldr	r0, [pc, #28]	; (80150b0 <dhcp_parse_reply+0x2f8>)
 8015094:	f003 fcd6 	bl	8018a44 <iprintf>
 8015098:	f06f 0305 	mvn.w	r3, #5
 801509c:	e149      	b.n	8015332 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801509e:	2302      	movs	r3, #2
 80150a0:	623b      	str	r3, [r7, #32]
        break;
 80150a2:	e033      	b.n	801510c <dhcp_parse_reply+0x354>
 80150a4:	2000beb0 	.word	0x2000beb0
 80150a8:	0801c220 	.word	0x0801c220
 80150ac:	0801c4a8 	.word	0x0801c4a8
 80150b0:	0801c280 	.word	0x0801c280
 80150b4:	0801c4b4 	.word	0x0801c4b4
 80150b8:	0801c4c8 	.word	0x0801c4c8
 80150bc:	0801c4d4 	.word	0x0801c4d4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80150c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150c4:	2b04      	cmp	r3, #4
 80150c6:	d009      	beq.n	80150dc <dhcp_parse_reply+0x324>
 80150c8:	4b9c      	ldr	r3, [pc, #624]	; (801533c <dhcp_parse_reply+0x584>)
 80150ca:	f240 625d 	movw	r2, #1629	; 0x65d
 80150ce:	499c      	ldr	r1, [pc, #624]	; (8015340 <dhcp_parse_reply+0x588>)
 80150d0:	489c      	ldr	r0, [pc, #624]	; (8015344 <dhcp_parse_reply+0x58c>)
 80150d2:	f003 fcb7 	bl	8018a44 <iprintf>
 80150d6:	f06f 0305 	mvn.w	r3, #5
 80150da:	e12a      	b.n	8015332 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80150dc:	2304      	movs	r3, #4
 80150de:	623b      	str	r3, [r7, #32]
        break;
 80150e0:	e014      	b.n	801510c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80150e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150e6:	2b04      	cmp	r3, #4
 80150e8:	d009      	beq.n	80150fe <dhcp_parse_reply+0x346>
 80150ea:	4b94      	ldr	r3, [pc, #592]	; (801533c <dhcp_parse_reply+0x584>)
 80150ec:	f240 6261 	movw	r2, #1633	; 0x661
 80150f0:	4993      	ldr	r1, [pc, #588]	; (8015340 <dhcp_parse_reply+0x588>)
 80150f2:	4894      	ldr	r0, [pc, #592]	; (8015344 <dhcp_parse_reply+0x58c>)
 80150f4:	f003 fca6 	bl	8018a44 <iprintf>
 80150f8:	f06f 0305 	mvn.w	r3, #5
 80150fc:	e119      	b.n	8015332 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80150fe:	2305      	movs	r3, #5
 8015100:	623b      	str	r3, [r7, #32]
        break;
 8015102:	e003      	b.n	801510c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015104:	2300      	movs	r3, #0
 8015106:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801510a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801510c:	7dfb      	ldrb	r3, [r7, #23]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d103      	bne.n	801511a <dhcp_parse_reply+0x362>
      offset++;
 8015112:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015114:	3301      	adds	r3, #1
 8015116:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015118:	e0a1      	b.n	801525e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801511a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801511c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015120:	4413      	add	r3, r2
 8015122:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015126:	4293      	cmp	r3, r2
 8015128:	dd02      	ble.n	8015130 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801512a:	f06f 0301 	mvn.w	r3, #1
 801512e:	e100      	b.n	8015332 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015134:	b29a      	uxth	r2, r3
 8015136:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015138:	4413      	add	r3, r2
 801513a:	b29b      	uxth	r3, r3
 801513c:	3302      	adds	r3, #2
 801513e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015144:	2b00      	cmp	r3, #0
 8015146:	f000 808a 	beq.w	801525e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801514a:	2300      	movs	r3, #0
 801514c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801514e:	6a3b      	ldr	r3, [r7, #32]
 8015150:	2b00      	cmp	r3, #0
 8015152:	db02      	blt.n	801515a <dhcp_parse_reply+0x3a2>
 8015154:	6a3b      	ldr	r3, [r7, #32]
 8015156:	2b07      	cmp	r3, #7
 8015158:	dd06      	ble.n	8015168 <dhcp_parse_reply+0x3b0>
 801515a:	4b78      	ldr	r3, [pc, #480]	; (801533c <dhcp_parse_reply+0x584>)
 801515c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015160:	4979      	ldr	r1, [pc, #484]	; (8015348 <dhcp_parse_reply+0x590>)
 8015162:	4878      	ldr	r0, [pc, #480]	; (8015344 <dhcp_parse_reply+0x58c>)
 8015164:	f003 fc6e 	bl	8018a44 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015168:	4a78      	ldr	r2, [pc, #480]	; (801534c <dhcp_parse_reply+0x594>)
 801516a:	6a3b      	ldr	r3, [r7, #32]
 801516c:	4413      	add	r3, r2
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d174      	bne.n	801525e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015178:	2b04      	cmp	r3, #4
 801517a:	bf28      	it	cs
 801517c:	2304      	movcs	r3, #4
 801517e:	b2db      	uxtb	r3, r3
 8015180:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015182:	8bfb      	ldrh	r3, [r7, #30]
 8015184:	8aba      	ldrh	r2, [r7, #20]
 8015186:	f107 0108 	add.w	r1, r7, #8
 801518a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801518c:	f7f7 fcb8 	bl	800cb00 <pbuf_copy_partial>
 8015190:	4603      	mov	r3, r0
 8015192:	461a      	mov	r2, r3
 8015194:	8abb      	ldrh	r3, [r7, #20]
 8015196:	4293      	cmp	r3, r2
 8015198:	d002      	beq.n	80151a0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801519a:	f06f 0301 	mvn.w	r3, #1
 801519e:	e0c8      	b.n	8015332 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80151a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151a4:	2b04      	cmp	r3, #4
 80151a6:	d933      	bls.n	8015210 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80151a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151ac:	f003 0303 	and.w	r3, r3, #3
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d009      	beq.n	80151ca <dhcp_parse_reply+0x412>
 80151b6:	4b61      	ldr	r3, [pc, #388]	; (801533c <dhcp_parse_reply+0x584>)
 80151b8:	f240 6281 	movw	r2, #1665	; 0x681
 80151bc:	4964      	ldr	r1, [pc, #400]	; (8015350 <dhcp_parse_reply+0x598>)
 80151be:	4861      	ldr	r0, [pc, #388]	; (8015344 <dhcp_parse_reply+0x58c>)
 80151c0:	f003 fc40 	bl	8018a44 <iprintf>
 80151c4:	f06f 0305 	mvn.w	r3, #5
 80151c8:	e0b3      	b.n	8015332 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80151ca:	4a60      	ldr	r2, [pc, #384]	; (801534c <dhcp_parse_reply+0x594>)
 80151cc:	6a3b      	ldr	r3, [r7, #32]
 80151ce:	4413      	add	r3, r2
 80151d0:	2201      	movs	r2, #1
 80151d2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7f5 fe3e 	bl	800ae58 <lwip_htonl>
 80151dc:	4602      	mov	r2, r0
 80151de:	495d      	ldr	r1, [pc, #372]	; (8015354 <dhcp_parse_reply+0x59c>)
 80151e0:	6a3b      	ldr	r3, [r7, #32]
 80151e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80151e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151ea:	3b04      	subs	r3, #4
 80151ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80151f0:	8bfb      	ldrh	r3, [r7, #30]
 80151f2:	3304      	adds	r3, #4
 80151f4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80151f6:	8a7a      	ldrh	r2, [r7, #18]
 80151f8:	8bfb      	ldrh	r3, [r7, #30]
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d202      	bcs.n	8015204 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80151fe:	f06f 0301 	mvn.w	r3, #1
 8015202:	e096      	b.n	8015332 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015204:	8a7b      	ldrh	r3, [r7, #18]
 8015206:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015208:	6a3b      	ldr	r3, [r7, #32]
 801520a:	3301      	adds	r3, #1
 801520c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801520e:	e79e      	b.n	801514e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015214:	2b04      	cmp	r3, #4
 8015216:	d106      	bne.n	8015226 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	4618      	mov	r0, r3
 801521c:	f7f5 fe1c 	bl	800ae58 <lwip_htonl>
 8015220:	4603      	mov	r3, r0
 8015222:	60bb      	str	r3, [r7, #8]
 8015224:	e011      	b.n	801524a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801522a:	2b01      	cmp	r3, #1
 801522c:	d009      	beq.n	8015242 <dhcp_parse_reply+0x48a>
 801522e:	4b43      	ldr	r3, [pc, #268]	; (801533c <dhcp_parse_reply+0x584>)
 8015230:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015234:	4948      	ldr	r1, [pc, #288]	; (8015358 <dhcp_parse_reply+0x5a0>)
 8015236:	4843      	ldr	r0, [pc, #268]	; (8015344 <dhcp_parse_reply+0x58c>)
 8015238:	f003 fc04 	bl	8018a44 <iprintf>
 801523c:	f06f 0305 	mvn.w	r3, #5
 8015240:	e077      	b.n	8015332 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015242:	f107 0308 	add.w	r3, r7, #8
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801524a:	4a40      	ldr	r2, [pc, #256]	; (801534c <dhcp_parse_reply+0x594>)
 801524c:	6a3b      	ldr	r3, [r7, #32]
 801524e:	4413      	add	r3, r2
 8015250:	2201      	movs	r2, #1
 8015252:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015254:	68ba      	ldr	r2, [r7, #8]
 8015256:	493f      	ldr	r1, [pc, #252]	; (8015354 <dhcp_parse_reply+0x59c>)
 8015258:	6a3b      	ldr	r3, [r7, #32]
 801525a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015260:	895b      	ldrh	r3, [r3, #10]
 8015262:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015264:	429a      	cmp	r2, r3
 8015266:	d324      	bcc.n	80152b2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526a:	895b      	ldrh	r3, [r3, #10]
 801526c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801526e:	1ad3      	subs	r3, r2, r3
 8015270:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015274:	895b      	ldrh	r3, [r3, #10]
 8015276:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015278:	1ad3      	subs	r3, r2, r3
 801527a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801527c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801527e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015280:	429a      	cmp	r2, r3
 8015282:	d213      	bcs.n	80152ac <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801528c:	2b00      	cmp	r3, #0
 801528e:	d109      	bne.n	80152a4 <dhcp_parse_reply+0x4ec>
 8015290:	4b2a      	ldr	r3, [pc, #168]	; (801533c <dhcp_parse_reply+0x584>)
 8015292:	f240 629d 	movw	r2, #1693	; 0x69d
 8015296:	4931      	ldr	r1, [pc, #196]	; (801535c <dhcp_parse_reply+0x5a4>)
 8015298:	482a      	ldr	r0, [pc, #168]	; (8015344 <dhcp_parse_reply+0x58c>)
 801529a:	f003 fbd3 	bl	8018a44 <iprintf>
 801529e:	f06f 0305 	mvn.w	r3, #5
 80152a2:	e046      	b.n	8015332 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80152a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80152aa:	e002      	b.n	80152b2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80152ac:	f06f 0301 	mvn.w	r3, #1
 80152b0:	e03f      	b.n	8015332 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80152b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d00a      	beq.n	80152ce <dhcp_parse_reply+0x516>
 80152b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80152ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80152bc:	429a      	cmp	r2, r3
 80152be:	d206      	bcs.n	80152ce <dhcp_parse_reply+0x516>
 80152c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80152c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80152c4:	4413      	add	r3, r2
 80152c6:	781b      	ldrb	r3, [r3, #0]
 80152c8:	2bff      	cmp	r3, #255	; 0xff
 80152ca:	f47f adb8 	bne.w	8014e3e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80152ce:	4b1f      	ldr	r3, [pc, #124]	; (801534c <dhcp_parse_reply+0x594>)
 80152d0:	781b      	ldrb	r3, [r3, #0]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d018      	beq.n	8015308 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80152d6:	4b1f      	ldr	r3, [pc, #124]	; (8015354 <dhcp_parse_reply+0x59c>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80152dc:	4b1b      	ldr	r3, [pc, #108]	; (801534c <dhcp_parse_reply+0x594>)
 80152de:	2200      	movs	r2, #0
 80152e0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2b01      	cmp	r3, #1
 80152e6:	d102      	bne.n	80152ee <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80152e8:	2301      	movs	r3, #1
 80152ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152ec:	e00c      	b.n	8015308 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2b02      	cmp	r3, #2
 80152f2:	d102      	bne.n	80152fa <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80152f4:	2301      	movs	r3, #1
 80152f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80152f8:	e006      	b.n	8015308 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	2b03      	cmp	r3, #3
 80152fe:	d103      	bne.n	8015308 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015300:	2301      	movs	r3, #1
 8015302:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015304:	2301      	movs	r3, #1
 8015306:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801530a:	2b00      	cmp	r3, #0
 801530c:	d006      	beq.n	801531c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801530e:	2300      	movs	r3, #0
 8015310:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015312:	236c      	movs	r3, #108	; 0x6c
 8015314:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015316:	23ec      	movs	r3, #236	; 0xec
 8015318:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801531a:	e56a      	b.n	8014df2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801531e:	2b00      	cmp	r3, #0
 8015320:	d006      	beq.n	8015330 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015322:	2300      	movs	r3, #0
 8015324:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015326:	232c      	movs	r3, #44	; 0x2c
 8015328:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801532a:	236c      	movs	r3, #108	; 0x6c
 801532c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801532e:	e560      	b.n	8014df2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015330:	2300      	movs	r3, #0
}
 8015332:	4618      	mov	r0, r3
 8015334:	3740      	adds	r7, #64	; 0x40
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop
 801533c:	0801c220 	.word	0x0801c220
 8015340:	0801c4a8 	.word	0x0801c4a8
 8015344:	0801c280 	.word	0x0801c280
 8015348:	0801c4ec 	.word	0x0801c4ec
 801534c:	2000beb0 	.word	0x2000beb0
 8015350:	0801c500 	.word	0x0801c500
 8015354:	2000be90 	.word	0x2000be90
 8015358:	0801c518 	.word	0x0801c518
 801535c:	0801c52c 	.word	0x0801c52c

08015360 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b08a      	sub	sp, #40	; 0x28
 8015364:	af00      	add	r7, sp, #0
 8015366:	60f8      	str	r0, [r7, #12]
 8015368:	60b9      	str	r1, [r7, #8]
 801536a:	607a      	str	r2, [r7, #4]
 801536c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801536e:	4b60      	ldr	r3, [pc, #384]	; (80154f0 <dhcp_recv+0x190>)
 8015370:	685b      	ldr	r3, [r3, #4]
 8015372:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015374:	6a3b      	ldr	r3, [r7, #32]
 8015376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015378:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	685b      	ldr	r3, [r3, #4]
 801537e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 809d 	beq.w	80154c2 <dhcp_recv+0x162>
 8015388:	69fb      	ldr	r3, [r7, #28]
 801538a:	791b      	ldrb	r3, [r3, #4]
 801538c:	2b00      	cmp	r3, #0
 801538e:	f000 8098 	beq.w	80154c2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	895b      	ldrh	r3, [r3, #10]
 8015396:	2b2b      	cmp	r3, #43	; 0x2b
 8015398:	f240 8095 	bls.w	80154c6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801539c:	69bb      	ldr	r3, [r7, #24]
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	2b02      	cmp	r3, #2
 80153a2:	f040 8092 	bne.w	80154ca <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80153a6:	2300      	movs	r3, #0
 80153a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80153ac:	e012      	b.n	80153d4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80153ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153b2:	6a3a      	ldr	r2, [r7, #32]
 80153b4:	4413      	add	r3, r2
 80153b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80153ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153be:	69b9      	ldr	r1, [r7, #24]
 80153c0:	440b      	add	r3, r1
 80153c2:	7f1b      	ldrb	r3, [r3, #28]
 80153c4:	429a      	cmp	r2, r3
 80153c6:	f040 8082 	bne.w	80154ce <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80153ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153ce:	3301      	adds	r3, #1
 80153d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80153d4:	6a3b      	ldr	r3, [r7, #32]
 80153d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80153da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80153de:	429a      	cmp	r2, r3
 80153e0:	d203      	bcs.n	80153ea <dhcp_recv+0x8a>
 80153e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153e6:	2b05      	cmp	r3, #5
 80153e8:	d9e1      	bls.n	80153ae <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80153ea:	69bb      	ldr	r3, [r7, #24]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f5 fd32 	bl	800ae58 <lwip_htonl>
 80153f4:	4602      	mov	r2, r0
 80153f6:	69fb      	ldr	r3, [r7, #28]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d169      	bne.n	80154d2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80153fe:	69f9      	ldr	r1, [r7, #28]
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7ff fcd9 	bl	8014db8 <dhcp_parse_reply>
 8015406:	4603      	mov	r3, r0
 8015408:	2b00      	cmp	r3, #0
 801540a:	d164      	bne.n	80154d6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801540c:	4b39      	ldr	r3, [pc, #228]	; (80154f4 <dhcp_recv+0x194>)
 801540e:	785b      	ldrb	r3, [r3, #1]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d062      	beq.n	80154da <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801541a:	4b37      	ldr	r3, [pc, #220]	; (80154f8 <dhcp_recv+0x198>)
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015420:	7cfb      	ldrb	r3, [r7, #19]
 8015422:	2b05      	cmp	r3, #5
 8015424:	d12a      	bne.n	801547c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	795b      	ldrb	r3, [r3, #5]
 801542a:	2b01      	cmp	r3, #1
 801542c:	d112      	bne.n	8015454 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801542e:	6979      	ldr	r1, [r7, #20]
 8015430:	6a38      	ldr	r0, [r7, #32]
 8015432:	f7fe fe53 	bl	80140dc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015436:	6a3b      	ldr	r3, [r7, #32]
 8015438:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801543c:	f003 0308 	and.w	r3, r3, #8
 8015440:	2b00      	cmp	r3, #0
 8015442:	d003      	beq.n	801544c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015444:	6a38      	ldr	r0, [r7, #32]
 8015446:	f7fe fbc3 	bl	8013bd0 <dhcp_check>
 801544a:	e049      	b.n	80154e0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801544c:	6a38      	ldr	r0, [r7, #32]
 801544e:	f7ff f867 	bl	8014520 <dhcp_bind>
 8015452:	e045      	b.n	80154e0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015454:	69fb      	ldr	r3, [r7, #28]
 8015456:	795b      	ldrb	r3, [r3, #5]
 8015458:	2b03      	cmp	r3, #3
 801545a:	d007      	beq.n	801546c <dhcp_recv+0x10c>
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	795b      	ldrb	r3, [r3, #5]
 8015460:	2b04      	cmp	r3, #4
 8015462:	d003      	beq.n	801546c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015464:	69fb      	ldr	r3, [r7, #28]
 8015466:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015468:	2b05      	cmp	r3, #5
 801546a:	d139      	bne.n	80154e0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801546c:	6979      	ldr	r1, [r7, #20]
 801546e:	6a38      	ldr	r0, [r7, #32]
 8015470:	f7fe fe34 	bl	80140dc <dhcp_handle_ack>
      dhcp_bind(netif);
 8015474:	6a38      	ldr	r0, [r7, #32]
 8015476:	f7ff f853 	bl	8014520 <dhcp_bind>
 801547a:	e031      	b.n	80154e0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801547c:	7cfb      	ldrb	r3, [r7, #19]
 801547e:	2b06      	cmp	r3, #6
 8015480:	d113      	bne.n	80154aa <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015482:	69fb      	ldr	r3, [r7, #28]
 8015484:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015486:	2b03      	cmp	r3, #3
 8015488:	d00b      	beq.n	80154a2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801548a:	69fb      	ldr	r3, [r7, #28]
 801548c:	795b      	ldrb	r3, [r3, #5]
 801548e:	2b01      	cmp	r3, #1
 8015490:	d007      	beq.n	80154a2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015492:	69fb      	ldr	r3, [r7, #28]
 8015494:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015496:	2b04      	cmp	r3, #4
 8015498:	d003      	beq.n	80154a2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	795b      	ldrb	r3, [r3, #5]
 801549e:	2b05      	cmp	r3, #5
 80154a0:	d103      	bne.n	80154aa <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80154a2:	6a38      	ldr	r0, [r7, #32]
 80154a4:	f7fe fb7a 	bl	8013b9c <dhcp_handle_nak>
 80154a8:	e01a      	b.n	80154e0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80154aa:	7cfb      	ldrb	r3, [r7, #19]
 80154ac:	2b02      	cmp	r3, #2
 80154ae:	d116      	bne.n	80154de <dhcp_recv+0x17e>
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	795b      	ldrb	r3, [r3, #5]
 80154b4:	2b06      	cmp	r3, #6
 80154b6:	d112      	bne.n	80154de <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80154b8:	6979      	ldr	r1, [r7, #20]
 80154ba:	6a38      	ldr	r0, [r7, #32]
 80154bc:	f7fe fbbc 	bl	8013c38 <dhcp_handle_offer>
 80154c0:	e00e      	b.n	80154e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154c2:	bf00      	nop
 80154c4:	e00c      	b.n	80154e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154c6:	bf00      	nop
 80154c8:	e00a      	b.n	80154e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154ca:	bf00      	nop
 80154cc:	e008      	b.n	80154e0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80154ce:	bf00      	nop
 80154d0:	e006      	b.n	80154e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154d2:	bf00      	nop
 80154d4:	e004      	b.n	80154e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154d6:	bf00      	nop
 80154d8:	e002      	b.n	80154e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154da:	bf00      	nop
 80154dc:	e000      	b.n	80154e0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80154de:	bf00      	nop
  pbuf_free(p);
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f7f7 f909 	bl	800c6f8 <pbuf_free>
}
 80154e6:	bf00      	nop
 80154e8:	3728      	adds	r7, #40	; 0x28
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop
 80154f0:	20008d10 	.word	0x20008d10
 80154f4:	2000beb0 	.word	0x2000beb0
 80154f8:	2000be90 	.word	0x2000be90

080154fc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b088      	sub	sp, #32
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	603b      	str	r3, [r7, #0]
 8015508:	4613      	mov	r3, r2
 801550a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d108      	bne.n	8015524 <dhcp_create_msg+0x28>
 8015512:	4b5f      	ldr	r3, [pc, #380]	; (8015690 <dhcp_create_msg+0x194>)
 8015514:	f240 7269 	movw	r2, #1897	; 0x769
 8015518:	495e      	ldr	r1, [pc, #376]	; (8015694 <dhcp_create_msg+0x198>)
 801551a:	485f      	ldr	r0, [pc, #380]	; (8015698 <dhcp_create_msg+0x19c>)
 801551c:	f003 fa92 	bl	8018a44 <iprintf>
 8015520:	2300      	movs	r3, #0
 8015522:	e0b1      	b.n	8015688 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d108      	bne.n	801553c <dhcp_create_msg+0x40>
 801552a:	4b59      	ldr	r3, [pc, #356]	; (8015690 <dhcp_create_msg+0x194>)
 801552c:	f240 726a 	movw	r2, #1898	; 0x76a
 8015530:	495a      	ldr	r1, [pc, #360]	; (801569c <dhcp_create_msg+0x1a0>)
 8015532:	4859      	ldr	r0, [pc, #356]	; (8015698 <dhcp_create_msg+0x19c>)
 8015534:	f003 fa86 	bl	8018a44 <iprintf>
 8015538:	2300      	movs	r3, #0
 801553a:	e0a5      	b.n	8015688 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801553c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015540:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015544:	2036      	movs	r0, #54	; 0x36
 8015546:	f7f6 fdf3 	bl	800c130 <pbuf_alloc>
 801554a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801554c:	69bb      	ldr	r3, [r7, #24]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015552:	2300      	movs	r3, #0
 8015554:	e098      	b.n	8015688 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015556:	69bb      	ldr	r3, [r7, #24]
 8015558:	895b      	ldrh	r3, [r3, #10]
 801555a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801555e:	d206      	bcs.n	801556e <dhcp_create_msg+0x72>
 8015560:	4b4b      	ldr	r3, [pc, #300]	; (8015690 <dhcp_create_msg+0x194>)
 8015562:	f240 7271 	movw	r2, #1905	; 0x771
 8015566:	494e      	ldr	r1, [pc, #312]	; (80156a0 <dhcp_create_msg+0x1a4>)
 8015568:	484b      	ldr	r0, [pc, #300]	; (8015698 <dhcp_create_msg+0x19c>)
 801556a:	f003 fa6b 	bl	8018a44 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801556e:	79fb      	ldrb	r3, [r7, #7]
 8015570:	2b03      	cmp	r3, #3
 8015572:	d103      	bne.n	801557c <dhcp_create_msg+0x80>
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	795b      	ldrb	r3, [r3, #5]
 8015578:	2b03      	cmp	r3, #3
 801557a:	d10d      	bne.n	8015598 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	799b      	ldrb	r3, [r3, #6]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d105      	bne.n	8015590 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015584:	f003 fa76 	bl	8018a74 <rand>
 8015588:	4603      	mov	r3, r0
 801558a:	461a      	mov	r2, r3
 801558c:	4b45      	ldr	r3, [pc, #276]	; (80156a4 <dhcp_create_msg+0x1a8>)
 801558e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015590:	4b44      	ldr	r3, [pc, #272]	; (80156a4 <dhcp_create_msg+0x1a8>)
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015598:	69bb      	ldr	r3, [r7, #24]
 801559a:	685b      	ldr	r3, [r3, #4]
 801559c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801559e:	f44f 729a 	mov.w	r2, #308	; 0x134
 80155a2:	2100      	movs	r1, #0
 80155a4:	6978      	ldr	r0, [r7, #20]
 80155a6:	f003 f967 	bl	8018878 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	2201      	movs	r2, #1
 80155ae:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	2201      	movs	r2, #1
 80155b4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7f5 fc47 	bl	800ae58 <lwip_htonl>
 80155ca:	4602      	mov	r2, r0
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80155d0:	79fb      	ldrb	r3, [r7, #7]
 80155d2:	2b08      	cmp	r3, #8
 80155d4:	d010      	beq.n	80155f8 <dhcp_create_msg+0xfc>
 80155d6:	79fb      	ldrb	r3, [r7, #7]
 80155d8:	2b04      	cmp	r3, #4
 80155da:	d00d      	beq.n	80155f8 <dhcp_create_msg+0xfc>
 80155dc:	79fb      	ldrb	r3, [r7, #7]
 80155de:	2b07      	cmp	r3, #7
 80155e0:	d00a      	beq.n	80155f8 <dhcp_create_msg+0xfc>
 80155e2:	79fb      	ldrb	r3, [r7, #7]
 80155e4:	2b03      	cmp	r3, #3
 80155e6:	d10c      	bne.n	8015602 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80155ec:	2b05      	cmp	r3, #5
 80155ee:	d003      	beq.n	80155f8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	795b      	ldrb	r3, [r3, #5]
 80155f4:	2b04      	cmp	r3, #4
 80155f6:	d104      	bne.n	8015602 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	3304      	adds	r3, #4
 80155fc:	681a      	ldr	r2, [r3, #0]
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015602:	2300      	movs	r3, #0
 8015604:	83fb      	strh	r3, [r7, #30]
 8015606:	e00c      	b.n	8015622 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015608:	8bfa      	ldrh	r2, [r7, #30]
 801560a:	8bfb      	ldrh	r3, [r7, #30]
 801560c:	68f9      	ldr	r1, [r7, #12]
 801560e:	440a      	add	r2, r1
 8015610:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015614:	697a      	ldr	r2, [r7, #20]
 8015616:	4413      	add	r3, r2
 8015618:	460a      	mov	r2, r1
 801561a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801561c:	8bfb      	ldrh	r3, [r7, #30]
 801561e:	3301      	adds	r3, #1
 8015620:	83fb      	strh	r3, [r7, #30]
 8015622:	8bfb      	ldrh	r3, [r7, #30]
 8015624:	2b05      	cmp	r3, #5
 8015626:	d9ef      	bls.n	8015608 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	2200      	movs	r2, #0
 801562c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015630:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015634:	2200      	movs	r2, #0
 8015636:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801563a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801563e:	2200      	movs	r2, #0
 8015640:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015644:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015648:	2200      	movs	r2, #0
 801564a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801564e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015658:	2301      	movs	r3, #1
 801565a:	2235      	movs	r2, #53	; 0x35
 801565c:	2000      	movs	r0, #0
 801565e:	f7ff fadb 	bl	8014c18 <dhcp_option>
 8015662:	4603      	mov	r3, r0
 8015664:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801566c:	79fa      	ldrb	r2, [r7, #7]
 801566e:	8a7b      	ldrh	r3, [r7, #18]
 8015670:	4618      	mov	r0, r3
 8015672:	f7ff fb05 	bl	8014c80 <dhcp_option_byte>
 8015676:	4603      	mov	r3, r0
 8015678:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d002      	beq.n	8015686 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	8a7a      	ldrh	r2, [r7, #18]
 8015684:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015686:	69bb      	ldr	r3, [r7, #24]
}
 8015688:	4618      	mov	r0, r3
 801568a:	3720      	adds	r7, #32
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	0801c220 	.word	0x0801c220
 8015694:	0801c540 	.word	0x0801c540
 8015698:	0801c280 	.word	0x0801c280
 801569c:	0801c560 	.word	0x0801c560
 80156a0:	0801c580 	.word	0x0801c580
 80156a4:	2000bec0 	.word	0x2000bec0

080156a8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b084      	sub	sp, #16
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	4603      	mov	r3, r0
 80156b0:	60b9      	str	r1, [r7, #8]
 80156b2:	607a      	str	r2, [r7, #4]
 80156b4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80156b6:	89fb      	ldrh	r3, [r7, #14]
 80156b8:	1c5a      	adds	r2, r3, #1
 80156ba:	81fa      	strh	r2, [r7, #14]
 80156bc:	461a      	mov	r2, r3
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	4413      	add	r3, r2
 80156c2:	22ff      	movs	r2, #255	; 0xff
 80156c4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80156c6:	e007      	b.n	80156d8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80156c8:	89fb      	ldrh	r3, [r7, #14]
 80156ca:	1c5a      	adds	r2, r3, #1
 80156cc:	81fa      	strh	r2, [r7, #14]
 80156ce:	461a      	mov	r2, r3
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	4413      	add	r3, r2
 80156d4:	2200      	movs	r2, #0
 80156d6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80156d8:	89fb      	ldrh	r3, [r7, #14]
 80156da:	2b43      	cmp	r3, #67	; 0x43
 80156dc:	d904      	bls.n	80156e8 <dhcp_option_trailer+0x40>
 80156de:	89fb      	ldrh	r3, [r7, #14]
 80156e0:	f003 0303 	and.w	r3, r3, #3
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d002      	beq.n	80156ee <dhcp_option_trailer+0x46>
 80156e8:	89fb      	ldrh	r3, [r7, #14]
 80156ea:	2b43      	cmp	r3, #67	; 0x43
 80156ec:	d9ec      	bls.n	80156c8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80156ee:	89fb      	ldrh	r3, [r7, #14]
 80156f0:	33f0      	adds	r3, #240	; 0xf0
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	4619      	mov	r1, r3
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f7f6 fe78 	bl	800c3ec <pbuf_realloc>
}
 80156fc:	bf00      	nop
 80156fe:	3710      	adds	r7, #16
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015704:	b480      	push	{r7}
 8015706:	b085      	sub	sp, #20
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d017      	beq.n	8015742 <dhcp_supplied_address+0x3e>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015716:	2b00      	cmp	r3, #0
 8015718:	d013      	beq.n	8015742 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801571e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	795b      	ldrb	r3, [r3, #5]
 8015724:	2b0a      	cmp	r3, #10
 8015726:	d007      	beq.n	8015738 <dhcp_supplied_address+0x34>
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	795b      	ldrb	r3, [r3, #5]
 801572c:	2b05      	cmp	r3, #5
 801572e:	d003      	beq.n	8015738 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015734:	2b04      	cmp	r3, #4
 8015736:	d101      	bne.n	801573c <dhcp_supplied_address+0x38>
 8015738:	2301      	movs	r3, #1
 801573a:	e000      	b.n	801573e <dhcp_supplied_address+0x3a>
 801573c:	2300      	movs	r3, #0
 801573e:	b2db      	uxtb	r3, r3
 8015740:	e000      	b.n	8015744 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015742:	2300      	movs	r3, #0
}
 8015744:	4618      	mov	r0, r3
 8015746:	3714      	adds	r7, #20
 8015748:	46bd      	mov	sp, r7
 801574a:	bc80      	pop	{r7}
 801574c:	4770      	bx	lr
	...

08015750 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015758:	4915      	ldr	r1, [pc, #84]	; (80157b0 <etharp_free_entry+0x60>)
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	4613      	mov	r3, r2
 801575e:	005b      	lsls	r3, r3, #1
 8015760:	4413      	add	r3, r2
 8015762:	00db      	lsls	r3, r3, #3
 8015764:	440b      	add	r3, r1
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d013      	beq.n	8015794 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801576c:	4910      	ldr	r1, [pc, #64]	; (80157b0 <etharp_free_entry+0x60>)
 801576e:	687a      	ldr	r2, [r7, #4]
 8015770:	4613      	mov	r3, r2
 8015772:	005b      	lsls	r3, r3, #1
 8015774:	4413      	add	r3, r2
 8015776:	00db      	lsls	r3, r3, #3
 8015778:	440b      	add	r3, r1
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4618      	mov	r0, r3
 801577e:	f7f6 ffbb 	bl	800c6f8 <pbuf_free>
    arp_table[i].q = NULL;
 8015782:	490b      	ldr	r1, [pc, #44]	; (80157b0 <etharp_free_entry+0x60>)
 8015784:	687a      	ldr	r2, [r7, #4]
 8015786:	4613      	mov	r3, r2
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	4413      	add	r3, r2
 801578c:	00db      	lsls	r3, r3, #3
 801578e:	440b      	add	r3, r1
 8015790:	2200      	movs	r2, #0
 8015792:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015794:	4906      	ldr	r1, [pc, #24]	; (80157b0 <etharp_free_entry+0x60>)
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	4613      	mov	r3, r2
 801579a:	005b      	lsls	r3, r3, #1
 801579c:	4413      	add	r3, r2
 801579e:	00db      	lsls	r3, r3, #3
 80157a0:	440b      	add	r3, r1
 80157a2:	3314      	adds	r3, #20
 80157a4:	2200      	movs	r2, #0
 80157a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80157a8:	bf00      	nop
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	2000bec4 	.word	0x2000bec4

080157b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b082      	sub	sp, #8
 80157b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157ba:	2300      	movs	r3, #0
 80157bc:	607b      	str	r3, [r7, #4]
 80157be:	e096      	b.n	80158ee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80157c0:	494f      	ldr	r1, [pc, #316]	; (8015900 <etharp_tmr+0x14c>)
 80157c2:	687a      	ldr	r2, [r7, #4]
 80157c4:	4613      	mov	r3, r2
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	4413      	add	r3, r2
 80157ca:	00db      	lsls	r3, r3, #3
 80157cc:	440b      	add	r3, r1
 80157ce:	3314      	adds	r3, #20
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80157d4:	78fb      	ldrb	r3, [r7, #3]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	f000 8086 	beq.w	80158e8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80157dc:	4948      	ldr	r1, [pc, #288]	; (8015900 <etharp_tmr+0x14c>)
 80157de:	687a      	ldr	r2, [r7, #4]
 80157e0:	4613      	mov	r3, r2
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	4413      	add	r3, r2
 80157e6:	00db      	lsls	r3, r3, #3
 80157e8:	440b      	add	r3, r1
 80157ea:	3312      	adds	r3, #18
 80157ec:	881b      	ldrh	r3, [r3, #0]
 80157ee:	3301      	adds	r3, #1
 80157f0:	b298      	uxth	r0, r3
 80157f2:	4943      	ldr	r1, [pc, #268]	; (8015900 <etharp_tmr+0x14c>)
 80157f4:	687a      	ldr	r2, [r7, #4]
 80157f6:	4613      	mov	r3, r2
 80157f8:	005b      	lsls	r3, r3, #1
 80157fa:	4413      	add	r3, r2
 80157fc:	00db      	lsls	r3, r3, #3
 80157fe:	440b      	add	r3, r1
 8015800:	3312      	adds	r3, #18
 8015802:	4602      	mov	r2, r0
 8015804:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015806:	493e      	ldr	r1, [pc, #248]	; (8015900 <etharp_tmr+0x14c>)
 8015808:	687a      	ldr	r2, [r7, #4]
 801580a:	4613      	mov	r3, r2
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	4413      	add	r3, r2
 8015810:	00db      	lsls	r3, r3, #3
 8015812:	440b      	add	r3, r1
 8015814:	3312      	adds	r3, #18
 8015816:	881b      	ldrh	r3, [r3, #0]
 8015818:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801581c:	d215      	bcs.n	801584a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801581e:	4938      	ldr	r1, [pc, #224]	; (8015900 <etharp_tmr+0x14c>)
 8015820:	687a      	ldr	r2, [r7, #4]
 8015822:	4613      	mov	r3, r2
 8015824:	005b      	lsls	r3, r3, #1
 8015826:	4413      	add	r3, r2
 8015828:	00db      	lsls	r3, r3, #3
 801582a:	440b      	add	r3, r1
 801582c:	3314      	adds	r3, #20
 801582e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015830:	2b01      	cmp	r3, #1
 8015832:	d10e      	bne.n	8015852 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015834:	4932      	ldr	r1, [pc, #200]	; (8015900 <etharp_tmr+0x14c>)
 8015836:	687a      	ldr	r2, [r7, #4]
 8015838:	4613      	mov	r3, r2
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	4413      	add	r3, r2
 801583e:	00db      	lsls	r3, r3, #3
 8015840:	440b      	add	r3, r1
 8015842:	3312      	adds	r3, #18
 8015844:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015846:	2b04      	cmp	r3, #4
 8015848:	d903      	bls.n	8015852 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f7ff ff80 	bl	8015750 <etharp_free_entry>
 8015850:	e04a      	b.n	80158e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015852:	492b      	ldr	r1, [pc, #172]	; (8015900 <etharp_tmr+0x14c>)
 8015854:	687a      	ldr	r2, [r7, #4]
 8015856:	4613      	mov	r3, r2
 8015858:	005b      	lsls	r3, r3, #1
 801585a:	4413      	add	r3, r2
 801585c:	00db      	lsls	r3, r3, #3
 801585e:	440b      	add	r3, r1
 8015860:	3314      	adds	r3, #20
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	2b03      	cmp	r3, #3
 8015866:	d10a      	bne.n	801587e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015868:	4925      	ldr	r1, [pc, #148]	; (8015900 <etharp_tmr+0x14c>)
 801586a:	687a      	ldr	r2, [r7, #4]
 801586c:	4613      	mov	r3, r2
 801586e:	005b      	lsls	r3, r3, #1
 8015870:	4413      	add	r3, r2
 8015872:	00db      	lsls	r3, r3, #3
 8015874:	440b      	add	r3, r1
 8015876:	3314      	adds	r3, #20
 8015878:	2204      	movs	r2, #4
 801587a:	701a      	strb	r2, [r3, #0]
 801587c:	e034      	b.n	80158e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801587e:	4920      	ldr	r1, [pc, #128]	; (8015900 <etharp_tmr+0x14c>)
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	4613      	mov	r3, r2
 8015884:	005b      	lsls	r3, r3, #1
 8015886:	4413      	add	r3, r2
 8015888:	00db      	lsls	r3, r3, #3
 801588a:	440b      	add	r3, r1
 801588c:	3314      	adds	r3, #20
 801588e:	781b      	ldrb	r3, [r3, #0]
 8015890:	2b04      	cmp	r3, #4
 8015892:	d10a      	bne.n	80158aa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015894:	491a      	ldr	r1, [pc, #104]	; (8015900 <etharp_tmr+0x14c>)
 8015896:	687a      	ldr	r2, [r7, #4]
 8015898:	4613      	mov	r3, r2
 801589a:	005b      	lsls	r3, r3, #1
 801589c:	4413      	add	r3, r2
 801589e:	00db      	lsls	r3, r3, #3
 80158a0:	440b      	add	r3, r1
 80158a2:	3314      	adds	r3, #20
 80158a4:	2202      	movs	r2, #2
 80158a6:	701a      	strb	r2, [r3, #0]
 80158a8:	e01e      	b.n	80158e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80158aa:	4915      	ldr	r1, [pc, #84]	; (8015900 <etharp_tmr+0x14c>)
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	4613      	mov	r3, r2
 80158b0:	005b      	lsls	r3, r3, #1
 80158b2:	4413      	add	r3, r2
 80158b4:	00db      	lsls	r3, r3, #3
 80158b6:	440b      	add	r3, r1
 80158b8:	3314      	adds	r3, #20
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d113      	bne.n	80158e8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80158c0:	490f      	ldr	r1, [pc, #60]	; (8015900 <etharp_tmr+0x14c>)
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	4613      	mov	r3, r2
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	4413      	add	r3, r2
 80158ca:	00db      	lsls	r3, r3, #3
 80158cc:	440b      	add	r3, r1
 80158ce:	3308      	adds	r3, #8
 80158d0:	6818      	ldr	r0, [r3, #0]
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	4613      	mov	r3, r2
 80158d6:	005b      	lsls	r3, r3, #1
 80158d8:	4413      	add	r3, r2
 80158da:	00db      	lsls	r3, r3, #3
 80158dc:	4a08      	ldr	r2, [pc, #32]	; (8015900 <etharp_tmr+0x14c>)
 80158de:	4413      	add	r3, r2
 80158e0:	3304      	adds	r3, #4
 80158e2:	4619      	mov	r1, r3
 80158e4:	f000 fe72 	bl	80165cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	3301      	adds	r3, #1
 80158ec:	607b      	str	r3, [r7, #4]
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	2b09      	cmp	r3, #9
 80158f2:	f77f af65 	ble.w	80157c0 <etharp_tmr+0xc>
      }
    }
  }
}
 80158f6:	bf00      	nop
 80158f8:	bf00      	nop
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	2000bec4 	.word	0x2000bec4

08015904 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b08a      	sub	sp, #40	; 0x28
 8015908:	af00      	add	r7, sp, #0
 801590a:	60f8      	str	r0, [r7, #12]
 801590c:	460b      	mov	r3, r1
 801590e:	607a      	str	r2, [r7, #4]
 8015910:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015912:	230a      	movs	r3, #10
 8015914:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015916:	230a      	movs	r3, #10
 8015918:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801591a:	230a      	movs	r3, #10
 801591c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801591e:	2300      	movs	r3, #0
 8015920:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015922:	230a      	movs	r3, #10
 8015924:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015926:	2300      	movs	r3, #0
 8015928:	83bb      	strh	r3, [r7, #28]
 801592a:	2300      	movs	r3, #0
 801592c:	837b      	strh	r3, [r7, #26]
 801592e:	2300      	movs	r3, #0
 8015930:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015932:	2300      	movs	r3, #0
 8015934:	843b      	strh	r3, [r7, #32]
 8015936:	e0ae      	b.n	8015a96 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801593c:	49a6      	ldr	r1, [pc, #664]	; (8015bd8 <etharp_find_entry+0x2d4>)
 801593e:	4613      	mov	r3, r2
 8015940:	005b      	lsls	r3, r3, #1
 8015942:	4413      	add	r3, r2
 8015944:	00db      	lsls	r3, r3, #3
 8015946:	440b      	add	r3, r1
 8015948:	3314      	adds	r3, #20
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801594e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015952:	2b0a      	cmp	r3, #10
 8015954:	d105      	bne.n	8015962 <etharp_find_entry+0x5e>
 8015956:	7dfb      	ldrb	r3, [r7, #23]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d102      	bne.n	8015962 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801595c:	8c3b      	ldrh	r3, [r7, #32]
 801595e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015960:	e095      	b.n	8015a8e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015962:	7dfb      	ldrb	r3, [r7, #23]
 8015964:	2b00      	cmp	r3, #0
 8015966:	f000 8092 	beq.w	8015a8e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801596a:	7dfb      	ldrb	r3, [r7, #23]
 801596c:	2b01      	cmp	r3, #1
 801596e:	d009      	beq.n	8015984 <etharp_find_entry+0x80>
 8015970:	7dfb      	ldrb	r3, [r7, #23]
 8015972:	2b01      	cmp	r3, #1
 8015974:	d806      	bhi.n	8015984 <etharp_find_entry+0x80>
 8015976:	4b99      	ldr	r3, [pc, #612]	; (8015bdc <etharp_find_entry+0x2d8>)
 8015978:	f240 1223 	movw	r2, #291	; 0x123
 801597c:	4998      	ldr	r1, [pc, #608]	; (8015be0 <etharp_find_entry+0x2dc>)
 801597e:	4899      	ldr	r0, [pc, #612]	; (8015be4 <etharp_find_entry+0x2e0>)
 8015980:	f003 f860 	bl	8018a44 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d020      	beq.n	80159cc <etharp_find_entry+0xc8>
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	6819      	ldr	r1, [r3, #0]
 801598e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015992:	4891      	ldr	r0, [pc, #580]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015994:	4613      	mov	r3, r2
 8015996:	005b      	lsls	r3, r3, #1
 8015998:	4413      	add	r3, r2
 801599a:	00db      	lsls	r3, r3, #3
 801599c:	4403      	add	r3, r0
 801599e:	3304      	adds	r3, #4
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	4299      	cmp	r1, r3
 80159a4:	d112      	bne.n	80159cc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d00c      	beq.n	80159c6 <etharp_find_entry+0xc2>
 80159ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159b0:	4989      	ldr	r1, [pc, #548]	; (8015bd8 <etharp_find_entry+0x2d4>)
 80159b2:	4613      	mov	r3, r2
 80159b4:	005b      	lsls	r3, r3, #1
 80159b6:	4413      	add	r3, r2
 80159b8:	00db      	lsls	r3, r3, #3
 80159ba:	440b      	add	r3, r1
 80159bc:	3308      	adds	r3, #8
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d102      	bne.n	80159cc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80159c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159ca:	e100      	b.n	8015bce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80159cc:	7dfb      	ldrb	r3, [r7, #23]
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d140      	bne.n	8015a54 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80159d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159d6:	4980      	ldr	r1, [pc, #512]	; (8015bd8 <etharp_find_entry+0x2d4>)
 80159d8:	4613      	mov	r3, r2
 80159da:	005b      	lsls	r3, r3, #1
 80159dc:	4413      	add	r3, r2
 80159de:	00db      	lsls	r3, r3, #3
 80159e0:	440b      	add	r3, r1
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d01a      	beq.n	8015a1e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80159e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159ec:	497a      	ldr	r1, [pc, #488]	; (8015bd8 <etharp_find_entry+0x2d4>)
 80159ee:	4613      	mov	r3, r2
 80159f0:	005b      	lsls	r3, r3, #1
 80159f2:	4413      	add	r3, r2
 80159f4:	00db      	lsls	r3, r3, #3
 80159f6:	440b      	add	r3, r1
 80159f8:	3312      	adds	r3, #18
 80159fa:	881b      	ldrh	r3, [r3, #0]
 80159fc:	8bba      	ldrh	r2, [r7, #28]
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d845      	bhi.n	8015a8e <etharp_find_entry+0x18a>
            old_queue = i;
 8015a02:	8c3b      	ldrh	r3, [r7, #32]
 8015a04:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015a06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a0a:	4973      	ldr	r1, [pc, #460]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	005b      	lsls	r3, r3, #1
 8015a10:	4413      	add	r3, r2
 8015a12:	00db      	lsls	r3, r3, #3
 8015a14:	440b      	add	r3, r1
 8015a16:	3312      	adds	r3, #18
 8015a18:	881b      	ldrh	r3, [r3, #0]
 8015a1a:	83bb      	strh	r3, [r7, #28]
 8015a1c:	e037      	b.n	8015a8e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015a1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a22:	496d      	ldr	r1, [pc, #436]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015a24:	4613      	mov	r3, r2
 8015a26:	005b      	lsls	r3, r3, #1
 8015a28:	4413      	add	r3, r2
 8015a2a:	00db      	lsls	r3, r3, #3
 8015a2c:	440b      	add	r3, r1
 8015a2e:	3312      	adds	r3, #18
 8015a30:	881b      	ldrh	r3, [r3, #0]
 8015a32:	8b7a      	ldrh	r2, [r7, #26]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d82a      	bhi.n	8015a8e <etharp_find_entry+0x18a>
            old_pending = i;
 8015a38:	8c3b      	ldrh	r3, [r7, #32]
 8015a3a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015a3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a40:	4965      	ldr	r1, [pc, #404]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015a42:	4613      	mov	r3, r2
 8015a44:	005b      	lsls	r3, r3, #1
 8015a46:	4413      	add	r3, r2
 8015a48:	00db      	lsls	r3, r3, #3
 8015a4a:	440b      	add	r3, r1
 8015a4c:	3312      	adds	r3, #18
 8015a4e:	881b      	ldrh	r3, [r3, #0]
 8015a50:	837b      	strh	r3, [r7, #26]
 8015a52:	e01c      	b.n	8015a8e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015a54:	7dfb      	ldrb	r3, [r7, #23]
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	d919      	bls.n	8015a8e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015a5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a5e:	495e      	ldr	r1, [pc, #376]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015a60:	4613      	mov	r3, r2
 8015a62:	005b      	lsls	r3, r3, #1
 8015a64:	4413      	add	r3, r2
 8015a66:	00db      	lsls	r3, r3, #3
 8015a68:	440b      	add	r3, r1
 8015a6a:	3312      	adds	r3, #18
 8015a6c:	881b      	ldrh	r3, [r3, #0]
 8015a6e:	8b3a      	ldrh	r2, [r7, #24]
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d80c      	bhi.n	8015a8e <etharp_find_entry+0x18a>
            old_stable = i;
 8015a74:	8c3b      	ldrh	r3, [r7, #32]
 8015a76:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015a78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a7c:	4956      	ldr	r1, [pc, #344]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015a7e:	4613      	mov	r3, r2
 8015a80:	005b      	lsls	r3, r3, #1
 8015a82:	4413      	add	r3, r2
 8015a84:	00db      	lsls	r3, r3, #3
 8015a86:	440b      	add	r3, r1
 8015a88:	3312      	adds	r3, #18
 8015a8a:	881b      	ldrh	r3, [r3, #0]
 8015a8c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a8e:	8c3b      	ldrh	r3, [r7, #32]
 8015a90:	3301      	adds	r3, #1
 8015a92:	b29b      	uxth	r3, r3
 8015a94:	843b      	strh	r3, [r7, #32]
 8015a96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a9a:	2b09      	cmp	r3, #9
 8015a9c:	f77f af4c 	ble.w	8015938 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015aa0:	7afb      	ldrb	r3, [r7, #11]
 8015aa2:	f003 0302 	and.w	r3, r3, #2
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d108      	bne.n	8015abc <etharp_find_entry+0x1b8>
 8015aaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015aae:	2b0a      	cmp	r3, #10
 8015ab0:	d107      	bne.n	8015ac2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015ab2:	7afb      	ldrb	r3, [r7, #11]
 8015ab4:	f003 0301 	and.w	r3, r3, #1
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d102      	bne.n	8015ac2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015abc:	f04f 33ff 	mov.w	r3, #4294967295
 8015ac0:	e085      	b.n	8015bce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015ac2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015ac6:	2b09      	cmp	r3, #9
 8015ac8:	dc02      	bgt.n	8015ad0 <etharp_find_entry+0x1cc>
    i = empty;
 8015aca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015acc:	843b      	strh	r3, [r7, #32]
 8015ace:	e039      	b.n	8015b44 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015ad0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015ad4:	2b09      	cmp	r3, #9
 8015ad6:	dc14      	bgt.n	8015b02 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ada:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015adc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ae0:	493d      	ldr	r1, [pc, #244]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	005b      	lsls	r3, r3, #1
 8015ae6:	4413      	add	r3, r2
 8015ae8:	00db      	lsls	r3, r3, #3
 8015aea:	440b      	add	r3, r1
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d018      	beq.n	8015b24 <etharp_find_entry+0x220>
 8015af2:	4b3a      	ldr	r3, [pc, #232]	; (8015bdc <etharp_find_entry+0x2d8>)
 8015af4:	f240 126d 	movw	r2, #365	; 0x16d
 8015af8:	493b      	ldr	r1, [pc, #236]	; (8015be8 <etharp_find_entry+0x2e4>)
 8015afa:	483a      	ldr	r0, [pc, #232]	; (8015be4 <etharp_find_entry+0x2e0>)
 8015afc:	f002 ffa2 	bl	8018a44 <iprintf>
 8015b00:	e010      	b.n	8015b24 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015b02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015b06:	2b09      	cmp	r3, #9
 8015b08:	dc02      	bgt.n	8015b10 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015b0c:	843b      	strh	r3, [r7, #32]
 8015b0e:	e009      	b.n	8015b24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015b10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015b14:	2b09      	cmp	r3, #9
 8015b16:	dc02      	bgt.n	8015b1e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015b18:	8bfb      	ldrh	r3, [r7, #30]
 8015b1a:	843b      	strh	r3, [r7, #32]
 8015b1c:	e002      	b.n	8015b24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b22:	e054      	b.n	8015bce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015b24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b28:	2b09      	cmp	r3, #9
 8015b2a:	dd06      	ble.n	8015b3a <etharp_find_entry+0x236>
 8015b2c:	4b2b      	ldr	r3, [pc, #172]	; (8015bdc <etharp_find_entry+0x2d8>)
 8015b2e:	f240 127f 	movw	r2, #383	; 0x17f
 8015b32:	492e      	ldr	r1, [pc, #184]	; (8015bec <etharp_find_entry+0x2e8>)
 8015b34:	482b      	ldr	r0, [pc, #172]	; (8015be4 <etharp_find_entry+0x2e0>)
 8015b36:	f002 ff85 	bl	8018a44 <iprintf>
    etharp_free_entry(i);
 8015b3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7ff fe06 	bl	8015750 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015b44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b48:	2b09      	cmp	r3, #9
 8015b4a:	dd06      	ble.n	8015b5a <etharp_find_entry+0x256>
 8015b4c:	4b23      	ldr	r3, [pc, #140]	; (8015bdc <etharp_find_entry+0x2d8>)
 8015b4e:	f240 1283 	movw	r2, #387	; 0x183
 8015b52:	4926      	ldr	r1, [pc, #152]	; (8015bec <etharp_find_entry+0x2e8>)
 8015b54:	4823      	ldr	r0, [pc, #140]	; (8015be4 <etharp_find_entry+0x2e0>)
 8015b56:	f002 ff75 	bl	8018a44 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015b5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b5e:	491e      	ldr	r1, [pc, #120]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015b60:	4613      	mov	r3, r2
 8015b62:	005b      	lsls	r3, r3, #1
 8015b64:	4413      	add	r3, r2
 8015b66:	00db      	lsls	r3, r3, #3
 8015b68:	440b      	add	r3, r1
 8015b6a:	3314      	adds	r3, #20
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d006      	beq.n	8015b80 <etharp_find_entry+0x27c>
 8015b72:	4b1a      	ldr	r3, [pc, #104]	; (8015bdc <etharp_find_entry+0x2d8>)
 8015b74:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015b78:	491d      	ldr	r1, [pc, #116]	; (8015bf0 <etharp_find_entry+0x2ec>)
 8015b7a:	481a      	ldr	r0, [pc, #104]	; (8015be4 <etharp_find_entry+0x2e0>)
 8015b7c:	f002 ff62 	bl	8018a44 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d00b      	beq.n	8015b9e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015b86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	6819      	ldr	r1, [r3, #0]
 8015b8e:	4812      	ldr	r0, [pc, #72]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015b90:	4613      	mov	r3, r2
 8015b92:	005b      	lsls	r3, r3, #1
 8015b94:	4413      	add	r3, r2
 8015b96:	00db      	lsls	r3, r3, #3
 8015b98:	4403      	add	r3, r0
 8015b9a:	3304      	adds	r3, #4
 8015b9c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015b9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ba2:	490d      	ldr	r1, [pc, #52]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	4413      	add	r3, r2
 8015baa:	00db      	lsls	r3, r3, #3
 8015bac:	440b      	add	r3, r1
 8015bae:	3312      	adds	r3, #18
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015bb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bb8:	4907      	ldr	r1, [pc, #28]	; (8015bd8 <etharp_find_entry+0x2d4>)
 8015bba:	4613      	mov	r3, r2
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	4413      	add	r3, r2
 8015bc0:	00db      	lsls	r3, r3, #3
 8015bc2:	440b      	add	r3, r1
 8015bc4:	3308      	adds	r3, #8
 8015bc6:	687a      	ldr	r2, [r7, #4]
 8015bc8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015bca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3728      	adds	r7, #40	; 0x28
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}
 8015bd6:	bf00      	nop
 8015bd8:	2000bec4 	.word	0x2000bec4
 8015bdc:	0801c5c0 	.word	0x0801c5c0
 8015be0:	0801c5f8 	.word	0x0801c5f8
 8015be4:	0801c638 	.word	0x0801c638
 8015be8:	0801c660 	.word	0x0801c660
 8015bec:	0801c678 	.word	0x0801c678
 8015bf0:	0801c68c 	.word	0x0801c68c

08015bf4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b088      	sub	sp, #32
 8015bf8:	af02      	add	r7, sp, #8
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	607a      	str	r2, [r7, #4]
 8015c00:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c08:	2b06      	cmp	r3, #6
 8015c0a:	d006      	beq.n	8015c1a <etharp_update_arp_entry+0x26>
 8015c0c:	4b48      	ldr	r3, [pc, #288]	; (8015d30 <etharp_update_arp_entry+0x13c>)
 8015c0e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015c12:	4948      	ldr	r1, [pc, #288]	; (8015d34 <etharp_update_arp_entry+0x140>)
 8015c14:	4848      	ldr	r0, [pc, #288]	; (8015d38 <etharp_update_arp_entry+0x144>)
 8015c16:	f002 ff15 	bl	8018a44 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d012      	beq.n	8015c46 <etharp_update_arp_entry+0x52>
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d00e      	beq.n	8015c46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	68f9      	ldr	r1, [r7, #12]
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f001 f944 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 8015c34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d105      	bne.n	8015c46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c42:	2be0      	cmp	r3, #224	; 0xe0
 8015c44:	d102      	bne.n	8015c4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015c46:	f06f 030f 	mvn.w	r3, #15
 8015c4a:	e06c      	b.n	8015d26 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015c4c:	78fb      	ldrb	r3, [r7, #3]
 8015c4e:	68fa      	ldr	r2, [r7, #12]
 8015c50:	4619      	mov	r1, r3
 8015c52:	68b8      	ldr	r0, [r7, #8]
 8015c54:	f7ff fe56 	bl	8015904 <etharp_find_entry>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015c5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	da02      	bge.n	8015c6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015c64:	8afb      	ldrh	r3, [r7, #22]
 8015c66:	b25b      	sxtb	r3, r3
 8015c68:	e05d      	b.n	8015d26 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015c6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c6e:	4933      	ldr	r1, [pc, #204]	; (8015d3c <etharp_update_arp_entry+0x148>)
 8015c70:	4613      	mov	r3, r2
 8015c72:	005b      	lsls	r3, r3, #1
 8015c74:	4413      	add	r3, r2
 8015c76:	00db      	lsls	r3, r3, #3
 8015c78:	440b      	add	r3, r1
 8015c7a:	3314      	adds	r3, #20
 8015c7c:	2202      	movs	r2, #2
 8015c7e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015c80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c84:	492d      	ldr	r1, [pc, #180]	; (8015d3c <etharp_update_arp_entry+0x148>)
 8015c86:	4613      	mov	r3, r2
 8015c88:	005b      	lsls	r3, r3, #1
 8015c8a:	4413      	add	r3, r2
 8015c8c:	00db      	lsls	r3, r3, #3
 8015c8e:	440b      	add	r3, r1
 8015c90:	3308      	adds	r3, #8
 8015c92:	68fa      	ldr	r2, [r7, #12]
 8015c94:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015c96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c9a:	4613      	mov	r3, r2
 8015c9c:	005b      	lsls	r3, r3, #1
 8015c9e:	4413      	add	r3, r2
 8015ca0:	00db      	lsls	r3, r3, #3
 8015ca2:	3308      	adds	r3, #8
 8015ca4:	4a25      	ldr	r2, [pc, #148]	; (8015d3c <etharp_update_arp_entry+0x148>)
 8015ca6:	4413      	add	r3, r2
 8015ca8:	3304      	adds	r3, #4
 8015caa:	2206      	movs	r2, #6
 8015cac:	6879      	ldr	r1, [r7, #4]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f002 fdd4 	bl	801885c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015cb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015cb8:	4920      	ldr	r1, [pc, #128]	; (8015d3c <etharp_update_arp_entry+0x148>)
 8015cba:	4613      	mov	r3, r2
 8015cbc:	005b      	lsls	r3, r3, #1
 8015cbe:	4413      	add	r3, r2
 8015cc0:	00db      	lsls	r3, r3, #3
 8015cc2:	440b      	add	r3, r1
 8015cc4:	3312      	adds	r3, #18
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015cca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015cce:	491b      	ldr	r1, [pc, #108]	; (8015d3c <etharp_update_arp_entry+0x148>)
 8015cd0:	4613      	mov	r3, r2
 8015cd2:	005b      	lsls	r3, r3, #1
 8015cd4:	4413      	add	r3, r2
 8015cd6:	00db      	lsls	r3, r3, #3
 8015cd8:	440b      	add	r3, r1
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d021      	beq.n	8015d24 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ce4:	4915      	ldr	r1, [pc, #84]	; (8015d3c <etharp_update_arp_entry+0x148>)
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	005b      	lsls	r3, r3, #1
 8015cea:	4413      	add	r3, r2
 8015cec:	00db      	lsls	r3, r3, #3
 8015cee:	440b      	add	r3, r1
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015cf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015cf8:	4910      	ldr	r1, [pc, #64]	; (8015d3c <etharp_update_arp_entry+0x148>)
 8015cfa:	4613      	mov	r3, r2
 8015cfc:	005b      	lsls	r3, r3, #1
 8015cfe:	4413      	add	r3, r2
 8015d00:	00db      	lsls	r3, r3, #3
 8015d02:	440b      	add	r3, r1
 8015d04:	2200      	movs	r2, #0
 8015d06:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015d12:	9300      	str	r3, [sp, #0]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6939      	ldr	r1, [r7, #16]
 8015d18:	68f8      	ldr	r0, [r7, #12]
 8015d1a:	f001 ffdb 	bl	8017cd4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015d1e:	6938      	ldr	r0, [r7, #16]
 8015d20:	f7f6 fcea 	bl	800c6f8 <pbuf_free>
  }
  return ERR_OK;
 8015d24:	2300      	movs	r3, #0
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3718      	adds	r7, #24
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	0801c5c0 	.word	0x0801c5c0
 8015d34:	0801c6b8 	.word	0x0801c6b8
 8015d38:	0801c638 	.word	0x0801c638
 8015d3c:	2000bec4 	.word	0x2000bec4

08015d40 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b084      	sub	sp, #16
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d48:	2300      	movs	r3, #0
 8015d4a:	60fb      	str	r3, [r7, #12]
 8015d4c:	e01e      	b.n	8015d8c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015d4e:	4913      	ldr	r1, [pc, #76]	; (8015d9c <etharp_cleanup_netif+0x5c>)
 8015d50:	68fa      	ldr	r2, [r7, #12]
 8015d52:	4613      	mov	r3, r2
 8015d54:	005b      	lsls	r3, r3, #1
 8015d56:	4413      	add	r3, r2
 8015d58:	00db      	lsls	r3, r3, #3
 8015d5a:	440b      	add	r3, r1
 8015d5c:	3314      	adds	r3, #20
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015d62:	7afb      	ldrb	r3, [r7, #11]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d00e      	beq.n	8015d86 <etharp_cleanup_netif+0x46>
 8015d68:	490c      	ldr	r1, [pc, #48]	; (8015d9c <etharp_cleanup_netif+0x5c>)
 8015d6a:	68fa      	ldr	r2, [r7, #12]
 8015d6c:	4613      	mov	r3, r2
 8015d6e:	005b      	lsls	r3, r3, #1
 8015d70:	4413      	add	r3, r2
 8015d72:	00db      	lsls	r3, r3, #3
 8015d74:	440b      	add	r3, r1
 8015d76:	3308      	adds	r3, #8
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	687a      	ldr	r2, [r7, #4]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d102      	bne.n	8015d86 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015d80:	68f8      	ldr	r0, [r7, #12]
 8015d82:	f7ff fce5 	bl	8015750 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	3301      	adds	r3, #1
 8015d8a:	60fb      	str	r3, [r7, #12]
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2b09      	cmp	r3, #9
 8015d90:	dddd      	ble.n	8015d4e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015d92:	bf00      	nop
 8015d94:	bf00      	nop
 8015d96:	3710      	adds	r7, #16
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}
 8015d9c:	2000bec4 	.word	0x2000bec4

08015da0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015da0:	b5b0      	push	{r4, r5, r7, lr}
 8015da2:	b08a      	sub	sp, #40	; 0x28
 8015da4:	af04      	add	r7, sp, #16
 8015da6:	6078      	str	r0, [r7, #4]
 8015da8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015daa:	683b      	ldr	r3, [r7, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d107      	bne.n	8015dc0 <etharp_input+0x20>
 8015db0:	4b3f      	ldr	r3, [pc, #252]	; (8015eb0 <etharp_input+0x110>)
 8015db2:	f240 228a 	movw	r2, #650	; 0x28a
 8015db6:	493f      	ldr	r1, [pc, #252]	; (8015eb4 <etharp_input+0x114>)
 8015db8:	483f      	ldr	r0, [pc, #252]	; (8015eb8 <etharp_input+0x118>)
 8015dba:	f002 fe43 	bl	8018a44 <iprintf>
 8015dbe:	e074      	b.n	8015eaa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	881b      	ldrh	r3, [r3, #0]
 8015dca:	b29b      	uxth	r3, r3
 8015dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015dd0:	d10c      	bne.n	8015dec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015dd6:	2b06      	cmp	r3, #6
 8015dd8:	d108      	bne.n	8015dec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015dde:	2b04      	cmp	r3, #4
 8015de0:	d104      	bne.n	8015dec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	885b      	ldrh	r3, [r3, #2]
 8015de6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015de8:	2b08      	cmp	r3, #8
 8015dea:	d003      	beq.n	8015df4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	f7f6 fc83 	bl	800c6f8 <pbuf_free>
    return;
 8015df2:	e05a      	b.n	8015eaa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	330e      	adds	r3, #14
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015dfc:	693b      	ldr	r3, [r7, #16]
 8015dfe:	3318      	adds	r3, #24
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	3304      	adds	r3, #4
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d102      	bne.n	8015e14 <etharp_input+0x74>
    for_us = 0;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	75fb      	strb	r3, [r7, #23]
 8015e12:	e009      	b.n	8015e28 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015e14:	68ba      	ldr	r2, [r7, #8]
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	3304      	adds	r3, #4
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	bf0c      	ite	eq
 8015e20:	2301      	moveq	r3, #1
 8015e22:	2300      	movne	r3, #0
 8015e24:	b2db      	uxtb	r3, r3
 8015e26:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	f103 0208 	add.w	r2, r3, #8
 8015e2e:	7dfb      	ldrb	r3, [r7, #23]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d001      	beq.n	8015e38 <etharp_input+0x98>
 8015e34:	2301      	movs	r3, #1
 8015e36:	e000      	b.n	8015e3a <etharp_input+0x9a>
 8015e38:	2302      	movs	r3, #2
 8015e3a:	f107 010c 	add.w	r1, r7, #12
 8015e3e:	6838      	ldr	r0, [r7, #0]
 8015e40:	f7ff fed8 	bl	8015bf4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	88db      	ldrh	r3, [r3, #6]
 8015e48:	b29b      	uxth	r3, r3
 8015e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e4e:	d003      	beq.n	8015e58 <etharp_input+0xb8>
 8015e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e54:	d01e      	beq.n	8015e94 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015e56:	e025      	b.n	8015ea4 <etharp_input+0x104>
      if (for_us) {
 8015e58:	7dfb      	ldrb	r3, [r7, #23]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d021      	beq.n	8015ea2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015e64:	693b      	ldr	r3, [r7, #16]
 8015e66:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015e74:	693a      	ldr	r2, [r7, #16]
 8015e76:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015e78:	2102      	movs	r1, #2
 8015e7a:	9103      	str	r1, [sp, #12]
 8015e7c:	f107 010c 	add.w	r1, r7, #12
 8015e80:	9102      	str	r1, [sp, #8]
 8015e82:	9201      	str	r2, [sp, #4]
 8015e84:	9300      	str	r3, [sp, #0]
 8015e86:	462b      	mov	r3, r5
 8015e88:	4622      	mov	r2, r4
 8015e8a:	4601      	mov	r1, r0
 8015e8c:	6838      	ldr	r0, [r7, #0]
 8015e8e:	f000 faef 	bl	8016470 <etharp_raw>
      break;
 8015e92:	e006      	b.n	8015ea2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015e94:	f107 030c 	add.w	r3, r7, #12
 8015e98:	4619      	mov	r1, r3
 8015e9a:	6838      	ldr	r0, [r7, #0]
 8015e9c:	f7fe f9fc 	bl	8014298 <dhcp_arp_reply>
      break;
 8015ea0:	e000      	b.n	8015ea4 <etharp_input+0x104>
      break;
 8015ea2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f7f6 fc27 	bl	800c6f8 <pbuf_free>
}
 8015eaa:	3718      	adds	r7, #24
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bdb0      	pop	{r4, r5, r7, pc}
 8015eb0:	0801c5c0 	.word	0x0801c5c0
 8015eb4:	0801c710 	.word	0x0801c710
 8015eb8:	0801c638 	.word	0x0801c638

08015ebc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b086      	sub	sp, #24
 8015ec0:	af02      	add	r7, sp, #8
 8015ec2:	60f8      	str	r0, [r7, #12]
 8015ec4:	60b9      	str	r1, [r7, #8]
 8015ec6:	4613      	mov	r3, r2
 8015ec8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015eca:	79fa      	ldrb	r2, [r7, #7]
 8015ecc:	4944      	ldr	r1, [pc, #272]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015ece:	4613      	mov	r3, r2
 8015ed0:	005b      	lsls	r3, r3, #1
 8015ed2:	4413      	add	r3, r2
 8015ed4:	00db      	lsls	r3, r3, #3
 8015ed6:	440b      	add	r3, r1
 8015ed8:	3314      	adds	r3, #20
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	d806      	bhi.n	8015eee <etharp_output_to_arp_index+0x32>
 8015ee0:	4b40      	ldr	r3, [pc, #256]	; (8015fe4 <etharp_output_to_arp_index+0x128>)
 8015ee2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015ee6:	4940      	ldr	r1, [pc, #256]	; (8015fe8 <etharp_output_to_arp_index+0x12c>)
 8015ee8:	4840      	ldr	r0, [pc, #256]	; (8015fec <etharp_output_to_arp_index+0x130>)
 8015eea:	f002 fdab 	bl	8018a44 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015eee:	79fa      	ldrb	r2, [r7, #7]
 8015ef0:	493b      	ldr	r1, [pc, #236]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015ef2:	4613      	mov	r3, r2
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	4413      	add	r3, r2
 8015ef8:	00db      	lsls	r3, r3, #3
 8015efa:	440b      	add	r3, r1
 8015efc:	3314      	adds	r3, #20
 8015efe:	781b      	ldrb	r3, [r3, #0]
 8015f00:	2b02      	cmp	r3, #2
 8015f02:	d153      	bne.n	8015fac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015f04:	79fa      	ldrb	r2, [r7, #7]
 8015f06:	4936      	ldr	r1, [pc, #216]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015f08:	4613      	mov	r3, r2
 8015f0a:	005b      	lsls	r3, r3, #1
 8015f0c:	4413      	add	r3, r2
 8015f0e:	00db      	lsls	r3, r3, #3
 8015f10:	440b      	add	r3, r1
 8015f12:	3312      	adds	r3, #18
 8015f14:	881b      	ldrh	r3, [r3, #0]
 8015f16:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015f1a:	d919      	bls.n	8015f50 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015f1c:	79fa      	ldrb	r2, [r7, #7]
 8015f1e:	4613      	mov	r3, r2
 8015f20:	005b      	lsls	r3, r3, #1
 8015f22:	4413      	add	r3, r2
 8015f24:	00db      	lsls	r3, r3, #3
 8015f26:	4a2e      	ldr	r2, [pc, #184]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015f28:	4413      	add	r3, r2
 8015f2a:	3304      	adds	r3, #4
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	68f8      	ldr	r0, [r7, #12]
 8015f30:	f000 fb4c 	bl	80165cc <etharp_request>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d138      	bne.n	8015fac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015f3a:	79fa      	ldrb	r2, [r7, #7]
 8015f3c:	4928      	ldr	r1, [pc, #160]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015f3e:	4613      	mov	r3, r2
 8015f40:	005b      	lsls	r3, r3, #1
 8015f42:	4413      	add	r3, r2
 8015f44:	00db      	lsls	r3, r3, #3
 8015f46:	440b      	add	r3, r1
 8015f48:	3314      	adds	r3, #20
 8015f4a:	2203      	movs	r2, #3
 8015f4c:	701a      	strb	r2, [r3, #0]
 8015f4e:	e02d      	b.n	8015fac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015f50:	79fa      	ldrb	r2, [r7, #7]
 8015f52:	4923      	ldr	r1, [pc, #140]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015f54:	4613      	mov	r3, r2
 8015f56:	005b      	lsls	r3, r3, #1
 8015f58:	4413      	add	r3, r2
 8015f5a:	00db      	lsls	r3, r3, #3
 8015f5c:	440b      	add	r3, r1
 8015f5e:	3312      	adds	r3, #18
 8015f60:	881b      	ldrh	r3, [r3, #0]
 8015f62:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015f66:	d321      	bcc.n	8015fac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015f68:	79fa      	ldrb	r2, [r7, #7]
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	005b      	lsls	r3, r3, #1
 8015f6e:	4413      	add	r3, r2
 8015f70:	00db      	lsls	r3, r3, #3
 8015f72:	4a1b      	ldr	r2, [pc, #108]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015f74:	4413      	add	r3, r2
 8015f76:	1d19      	adds	r1, r3, #4
 8015f78:	79fa      	ldrb	r2, [r7, #7]
 8015f7a:	4613      	mov	r3, r2
 8015f7c:	005b      	lsls	r3, r3, #1
 8015f7e:	4413      	add	r3, r2
 8015f80:	00db      	lsls	r3, r3, #3
 8015f82:	3308      	adds	r3, #8
 8015f84:	4a16      	ldr	r2, [pc, #88]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015f86:	4413      	add	r3, r2
 8015f88:	3304      	adds	r3, #4
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	68f8      	ldr	r0, [r7, #12]
 8015f8e:	f000 fafb 	bl	8016588 <etharp_request_dst>
 8015f92:	4603      	mov	r3, r0
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d109      	bne.n	8015fac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015f98:	79fa      	ldrb	r2, [r7, #7]
 8015f9a:	4911      	ldr	r1, [pc, #68]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015f9c:	4613      	mov	r3, r2
 8015f9e:	005b      	lsls	r3, r3, #1
 8015fa0:	4413      	add	r3, r2
 8015fa2:	00db      	lsls	r3, r3, #3
 8015fa4:	440b      	add	r3, r1
 8015fa6:	3314      	adds	r3, #20
 8015fa8:	2203      	movs	r2, #3
 8015faa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015fb2:	79fa      	ldrb	r2, [r7, #7]
 8015fb4:	4613      	mov	r3, r2
 8015fb6:	005b      	lsls	r3, r3, #1
 8015fb8:	4413      	add	r3, r2
 8015fba:	00db      	lsls	r3, r3, #3
 8015fbc:	3308      	adds	r3, #8
 8015fbe:	4a08      	ldr	r2, [pc, #32]	; (8015fe0 <etharp_output_to_arp_index+0x124>)
 8015fc0:	4413      	add	r3, r2
 8015fc2:	3304      	adds	r3, #4
 8015fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015fc8:	9200      	str	r2, [sp, #0]
 8015fca:	460a      	mov	r2, r1
 8015fcc:	68b9      	ldr	r1, [r7, #8]
 8015fce:	68f8      	ldr	r0, [r7, #12]
 8015fd0:	f001 fe80 	bl	8017cd4 <ethernet_output>
 8015fd4:	4603      	mov	r3, r0
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3710      	adds	r7, #16
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	2000bec4 	.word	0x2000bec4
 8015fe4:	0801c5c0 	.word	0x0801c5c0
 8015fe8:	0801c730 	.word	0x0801c730
 8015fec:	0801c638 	.word	0x0801c638

08015ff0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b08a      	sub	sp, #40	; 0x28
 8015ff4:	af02      	add	r7, sp, #8
 8015ff6:	60f8      	str	r0, [r7, #12]
 8015ff8:	60b9      	str	r1, [r7, #8]
 8015ffa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d106      	bne.n	8016014 <etharp_output+0x24>
 8016006:	4b73      	ldr	r3, [pc, #460]	; (80161d4 <etharp_output+0x1e4>)
 8016008:	f240 321e 	movw	r2, #798	; 0x31e
 801600c:	4972      	ldr	r1, [pc, #456]	; (80161d8 <etharp_output+0x1e8>)
 801600e:	4873      	ldr	r0, [pc, #460]	; (80161dc <etharp_output+0x1ec>)
 8016010:	f002 fd18 	bl	8018a44 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d106      	bne.n	8016028 <etharp_output+0x38>
 801601a:	4b6e      	ldr	r3, [pc, #440]	; (80161d4 <etharp_output+0x1e4>)
 801601c:	f240 321f 	movw	r2, #799	; 0x31f
 8016020:	496f      	ldr	r1, [pc, #444]	; (80161e0 <etharp_output+0x1f0>)
 8016022:	486e      	ldr	r0, [pc, #440]	; (80161dc <etharp_output+0x1ec>)
 8016024:	f002 fd0e 	bl	8018a44 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d106      	bne.n	801603c <etharp_output+0x4c>
 801602e:	4b69      	ldr	r3, [pc, #420]	; (80161d4 <etharp_output+0x1e4>)
 8016030:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016034:	496b      	ldr	r1, [pc, #428]	; (80161e4 <etharp_output+0x1f4>)
 8016036:	4869      	ldr	r0, [pc, #420]	; (80161dc <etharp_output+0x1ec>)
 8016038:	f002 fd04 	bl	8018a44 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	68f9      	ldr	r1, [r7, #12]
 8016042:	4618      	mov	r0, r3
 8016044:	f000 ff3a 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 8016048:	4603      	mov	r3, r0
 801604a:	2b00      	cmp	r3, #0
 801604c:	d002      	beq.n	8016054 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801604e:	4b66      	ldr	r3, [pc, #408]	; (80161e8 <etharp_output+0x1f8>)
 8016050:	61fb      	str	r3, [r7, #28]
 8016052:	e0af      	b.n	80161b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801605c:	2be0      	cmp	r3, #224	; 0xe0
 801605e:	d118      	bne.n	8016092 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016060:	2301      	movs	r3, #1
 8016062:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016064:	2300      	movs	r3, #0
 8016066:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016068:	235e      	movs	r3, #94	; 0x5e
 801606a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	3301      	adds	r3, #1
 8016070:	781b      	ldrb	r3, [r3, #0]
 8016072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016076:	b2db      	uxtb	r3, r3
 8016078:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	3302      	adds	r3, #2
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	3303      	adds	r3, #3
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801608a:	f107 0310 	add.w	r3, r7, #16
 801608e:	61fb      	str	r3, [r7, #28]
 8016090:	e090      	b.n	80161b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	681a      	ldr	r2, [r3, #0]
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	3304      	adds	r3, #4
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	405a      	eors	r2, r3
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	3308      	adds	r3, #8
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	4013      	ands	r3, r2
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d012      	beq.n	80160d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80160b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80160b4:	4293      	cmp	r3, r2
 80160b6:	d00b      	beq.n	80160d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	330c      	adds	r3, #12
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d003      	beq.n	80160ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	330c      	adds	r3, #12
 80160c6:	61bb      	str	r3, [r7, #24]
 80160c8:	e002      	b.n	80160d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80160ca:	f06f 0303 	mvn.w	r3, #3
 80160ce:	e07d      	b.n	80161cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80160d0:	4b46      	ldr	r3, [pc, #280]	; (80161ec <etharp_output+0x1fc>)
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	4619      	mov	r1, r3
 80160d6:	4a46      	ldr	r2, [pc, #280]	; (80161f0 <etharp_output+0x200>)
 80160d8:	460b      	mov	r3, r1
 80160da:	005b      	lsls	r3, r3, #1
 80160dc:	440b      	add	r3, r1
 80160de:	00db      	lsls	r3, r3, #3
 80160e0:	4413      	add	r3, r2
 80160e2:	3314      	adds	r3, #20
 80160e4:	781b      	ldrb	r3, [r3, #0]
 80160e6:	2b01      	cmp	r3, #1
 80160e8:	d925      	bls.n	8016136 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80160ea:	4b40      	ldr	r3, [pc, #256]	; (80161ec <etharp_output+0x1fc>)
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	4619      	mov	r1, r3
 80160f0:	4a3f      	ldr	r2, [pc, #252]	; (80161f0 <etharp_output+0x200>)
 80160f2:	460b      	mov	r3, r1
 80160f4:	005b      	lsls	r3, r3, #1
 80160f6:	440b      	add	r3, r1
 80160f8:	00db      	lsls	r3, r3, #3
 80160fa:	4413      	add	r3, r2
 80160fc:	3308      	adds	r3, #8
 80160fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016100:	68fa      	ldr	r2, [r7, #12]
 8016102:	429a      	cmp	r2, r3
 8016104:	d117      	bne.n	8016136 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016106:	69bb      	ldr	r3, [r7, #24]
 8016108:	681a      	ldr	r2, [r3, #0]
 801610a:	4b38      	ldr	r3, [pc, #224]	; (80161ec <etharp_output+0x1fc>)
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	4618      	mov	r0, r3
 8016110:	4937      	ldr	r1, [pc, #220]	; (80161f0 <etharp_output+0x200>)
 8016112:	4603      	mov	r3, r0
 8016114:	005b      	lsls	r3, r3, #1
 8016116:	4403      	add	r3, r0
 8016118:	00db      	lsls	r3, r3, #3
 801611a:	440b      	add	r3, r1
 801611c:	3304      	adds	r3, #4
 801611e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016120:	429a      	cmp	r2, r3
 8016122:	d108      	bne.n	8016136 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016124:	4b31      	ldr	r3, [pc, #196]	; (80161ec <etharp_output+0x1fc>)
 8016126:	781b      	ldrb	r3, [r3, #0]
 8016128:	461a      	mov	r2, r3
 801612a:	68b9      	ldr	r1, [r7, #8]
 801612c:	68f8      	ldr	r0, [r7, #12]
 801612e:	f7ff fec5 	bl	8015ebc <etharp_output_to_arp_index>
 8016132:	4603      	mov	r3, r0
 8016134:	e04a      	b.n	80161cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016136:	2300      	movs	r3, #0
 8016138:	75fb      	strb	r3, [r7, #23]
 801613a:	e031      	b.n	80161a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801613c:	7dfa      	ldrb	r2, [r7, #23]
 801613e:	492c      	ldr	r1, [pc, #176]	; (80161f0 <etharp_output+0x200>)
 8016140:	4613      	mov	r3, r2
 8016142:	005b      	lsls	r3, r3, #1
 8016144:	4413      	add	r3, r2
 8016146:	00db      	lsls	r3, r3, #3
 8016148:	440b      	add	r3, r1
 801614a:	3314      	adds	r3, #20
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	2b01      	cmp	r3, #1
 8016150:	d923      	bls.n	801619a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016152:	7dfa      	ldrb	r2, [r7, #23]
 8016154:	4926      	ldr	r1, [pc, #152]	; (80161f0 <etharp_output+0x200>)
 8016156:	4613      	mov	r3, r2
 8016158:	005b      	lsls	r3, r3, #1
 801615a:	4413      	add	r3, r2
 801615c:	00db      	lsls	r3, r3, #3
 801615e:	440b      	add	r3, r1
 8016160:	3308      	adds	r3, #8
 8016162:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016164:	68fa      	ldr	r2, [r7, #12]
 8016166:	429a      	cmp	r2, r3
 8016168:	d117      	bne.n	801619a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801616a:	69bb      	ldr	r3, [r7, #24]
 801616c:	6819      	ldr	r1, [r3, #0]
 801616e:	7dfa      	ldrb	r2, [r7, #23]
 8016170:	481f      	ldr	r0, [pc, #124]	; (80161f0 <etharp_output+0x200>)
 8016172:	4613      	mov	r3, r2
 8016174:	005b      	lsls	r3, r3, #1
 8016176:	4413      	add	r3, r2
 8016178:	00db      	lsls	r3, r3, #3
 801617a:	4403      	add	r3, r0
 801617c:	3304      	adds	r3, #4
 801617e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016180:	4299      	cmp	r1, r3
 8016182:	d10a      	bne.n	801619a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016184:	4a19      	ldr	r2, [pc, #100]	; (80161ec <etharp_output+0x1fc>)
 8016186:	7dfb      	ldrb	r3, [r7, #23]
 8016188:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801618a:	7dfb      	ldrb	r3, [r7, #23]
 801618c:	461a      	mov	r2, r3
 801618e:	68b9      	ldr	r1, [r7, #8]
 8016190:	68f8      	ldr	r0, [r7, #12]
 8016192:	f7ff fe93 	bl	8015ebc <etharp_output_to_arp_index>
 8016196:	4603      	mov	r3, r0
 8016198:	e018      	b.n	80161cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801619a:	7dfb      	ldrb	r3, [r7, #23]
 801619c:	3301      	adds	r3, #1
 801619e:	75fb      	strb	r3, [r7, #23]
 80161a0:	7dfb      	ldrb	r3, [r7, #23]
 80161a2:	2b09      	cmp	r3, #9
 80161a4:	d9ca      	bls.n	801613c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80161a6:	68ba      	ldr	r2, [r7, #8]
 80161a8:	69b9      	ldr	r1, [r7, #24]
 80161aa:	68f8      	ldr	r0, [r7, #12]
 80161ac:	f000 f822 	bl	80161f4 <etharp_query>
 80161b0:	4603      	mov	r3, r0
 80161b2:	e00b      	b.n	80161cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80161ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80161be:	9300      	str	r3, [sp, #0]
 80161c0:	69fb      	ldr	r3, [r7, #28]
 80161c2:	68b9      	ldr	r1, [r7, #8]
 80161c4:	68f8      	ldr	r0, [r7, #12]
 80161c6:	f001 fd85 	bl	8017cd4 <ethernet_output>
 80161ca:	4603      	mov	r3, r0
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	3720      	adds	r7, #32
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}
 80161d4:	0801c5c0 	.word	0x0801c5c0
 80161d8:	0801c710 	.word	0x0801c710
 80161dc:	0801c638 	.word	0x0801c638
 80161e0:	0801c760 	.word	0x0801c760
 80161e4:	0801c700 	.word	0x0801c700
 80161e8:	0801cddc 	.word	0x0801cddc
 80161ec:	2000bfb4 	.word	0x2000bfb4
 80161f0:	2000bec4 	.word	0x2000bec4

080161f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b08c      	sub	sp, #48	; 0x30
 80161f8:	af02      	add	r7, sp, #8
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	60b9      	str	r1, [r7, #8]
 80161fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	332a      	adds	r3, #42	; 0x2a
 8016204:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016206:	23ff      	movs	r3, #255	; 0xff
 8016208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801620c:	2300      	movs	r3, #0
 801620e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	68f9      	ldr	r1, [r7, #12]
 8016216:	4618      	mov	r0, r3
 8016218:	f000 fe50 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 801621c:	4603      	mov	r3, r0
 801621e:	2b00      	cmp	r3, #0
 8016220:	d10c      	bne.n	801623c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801622a:	2be0      	cmp	r3, #224	; 0xe0
 801622c:	d006      	beq.n	801623c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d003      	beq.n	801623c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016234:	68bb      	ldr	r3, [r7, #8]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d102      	bne.n	8016242 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801623c:	f06f 030f 	mvn.w	r3, #15
 8016240:	e101      	b.n	8016446 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016242:	68fa      	ldr	r2, [r7, #12]
 8016244:	2101      	movs	r1, #1
 8016246:	68b8      	ldr	r0, [r7, #8]
 8016248:	f7ff fb5c 	bl	8015904 <etharp_find_entry>
 801624c:	4603      	mov	r3, r0
 801624e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016250:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016254:	2b00      	cmp	r3, #0
 8016256:	da02      	bge.n	801625e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016258:	8a7b      	ldrh	r3, [r7, #18]
 801625a:	b25b      	sxtb	r3, r3
 801625c:	e0f3      	b.n	8016446 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801625e:	8a7b      	ldrh	r3, [r7, #18]
 8016260:	2b7e      	cmp	r3, #126	; 0x7e
 8016262:	d906      	bls.n	8016272 <etharp_query+0x7e>
 8016264:	4b7a      	ldr	r3, [pc, #488]	; (8016450 <etharp_query+0x25c>)
 8016266:	f240 32c1 	movw	r2, #961	; 0x3c1
 801626a:	497a      	ldr	r1, [pc, #488]	; (8016454 <etharp_query+0x260>)
 801626c:	487a      	ldr	r0, [pc, #488]	; (8016458 <etharp_query+0x264>)
 801626e:	f002 fbe9 	bl	8018a44 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016272:	8a7b      	ldrh	r3, [r7, #18]
 8016274:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016276:	7c7a      	ldrb	r2, [r7, #17]
 8016278:	4978      	ldr	r1, [pc, #480]	; (801645c <etharp_query+0x268>)
 801627a:	4613      	mov	r3, r2
 801627c:	005b      	lsls	r3, r3, #1
 801627e:	4413      	add	r3, r2
 8016280:	00db      	lsls	r3, r3, #3
 8016282:	440b      	add	r3, r1
 8016284:	3314      	adds	r3, #20
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d115      	bne.n	80162b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801628c:	2301      	movs	r3, #1
 801628e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016290:	7c7a      	ldrb	r2, [r7, #17]
 8016292:	4972      	ldr	r1, [pc, #456]	; (801645c <etharp_query+0x268>)
 8016294:	4613      	mov	r3, r2
 8016296:	005b      	lsls	r3, r3, #1
 8016298:	4413      	add	r3, r2
 801629a:	00db      	lsls	r3, r3, #3
 801629c:	440b      	add	r3, r1
 801629e:	3314      	adds	r3, #20
 80162a0:	2201      	movs	r2, #1
 80162a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80162a4:	7c7a      	ldrb	r2, [r7, #17]
 80162a6:	496d      	ldr	r1, [pc, #436]	; (801645c <etharp_query+0x268>)
 80162a8:	4613      	mov	r3, r2
 80162aa:	005b      	lsls	r3, r3, #1
 80162ac:	4413      	add	r3, r2
 80162ae:	00db      	lsls	r3, r3, #3
 80162b0:	440b      	add	r3, r1
 80162b2:	3308      	adds	r3, #8
 80162b4:	68fa      	ldr	r2, [r7, #12]
 80162b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80162b8:	7c7a      	ldrb	r2, [r7, #17]
 80162ba:	4968      	ldr	r1, [pc, #416]	; (801645c <etharp_query+0x268>)
 80162bc:	4613      	mov	r3, r2
 80162be:	005b      	lsls	r3, r3, #1
 80162c0:	4413      	add	r3, r2
 80162c2:	00db      	lsls	r3, r3, #3
 80162c4:	440b      	add	r3, r1
 80162c6:	3314      	adds	r3, #20
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	2b01      	cmp	r3, #1
 80162cc:	d011      	beq.n	80162f2 <etharp_query+0xfe>
 80162ce:	7c7a      	ldrb	r2, [r7, #17]
 80162d0:	4962      	ldr	r1, [pc, #392]	; (801645c <etharp_query+0x268>)
 80162d2:	4613      	mov	r3, r2
 80162d4:	005b      	lsls	r3, r3, #1
 80162d6:	4413      	add	r3, r2
 80162d8:	00db      	lsls	r3, r3, #3
 80162da:	440b      	add	r3, r1
 80162dc:	3314      	adds	r3, #20
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d806      	bhi.n	80162f2 <etharp_query+0xfe>
 80162e4:	4b5a      	ldr	r3, [pc, #360]	; (8016450 <etharp_query+0x25c>)
 80162e6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80162ea:	495d      	ldr	r1, [pc, #372]	; (8016460 <etharp_query+0x26c>)
 80162ec:	485a      	ldr	r0, [pc, #360]	; (8016458 <etharp_query+0x264>)
 80162ee:	f002 fba9 	bl	8018a44 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80162f2:	6a3b      	ldr	r3, [r7, #32]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d102      	bne.n	80162fe <etharp_query+0x10a>
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d10c      	bne.n	8016318 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80162fe:	68b9      	ldr	r1, [r7, #8]
 8016300:	68f8      	ldr	r0, [r7, #12]
 8016302:	f000 f963 	bl	80165cc <etharp_request>
 8016306:	4603      	mov	r3, r0
 8016308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d102      	bne.n	8016318 <etharp_query+0x124>
      return result;
 8016312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016316:	e096      	b.n	8016446 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d106      	bne.n	801632c <etharp_query+0x138>
 801631e:	4b4c      	ldr	r3, [pc, #304]	; (8016450 <etharp_query+0x25c>)
 8016320:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016324:	494f      	ldr	r1, [pc, #316]	; (8016464 <etharp_query+0x270>)
 8016326:	484c      	ldr	r0, [pc, #304]	; (8016458 <etharp_query+0x264>)
 8016328:	f002 fb8c 	bl	8018a44 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801632c:	7c7a      	ldrb	r2, [r7, #17]
 801632e:	494b      	ldr	r1, [pc, #300]	; (801645c <etharp_query+0x268>)
 8016330:	4613      	mov	r3, r2
 8016332:	005b      	lsls	r3, r3, #1
 8016334:	4413      	add	r3, r2
 8016336:	00db      	lsls	r3, r3, #3
 8016338:	440b      	add	r3, r1
 801633a:	3314      	adds	r3, #20
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	2b01      	cmp	r3, #1
 8016340:	d917      	bls.n	8016372 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016342:	4a49      	ldr	r2, [pc, #292]	; (8016468 <etharp_query+0x274>)
 8016344:	7c7b      	ldrb	r3, [r7, #17]
 8016346:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016348:	7c7a      	ldrb	r2, [r7, #17]
 801634a:	4613      	mov	r3, r2
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	4413      	add	r3, r2
 8016350:	00db      	lsls	r3, r3, #3
 8016352:	3308      	adds	r3, #8
 8016354:	4a41      	ldr	r2, [pc, #260]	; (801645c <etharp_query+0x268>)
 8016356:	4413      	add	r3, r2
 8016358:	3304      	adds	r3, #4
 801635a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801635e:	9200      	str	r2, [sp, #0]
 8016360:	697a      	ldr	r2, [r7, #20]
 8016362:	6879      	ldr	r1, [r7, #4]
 8016364:	68f8      	ldr	r0, [r7, #12]
 8016366:	f001 fcb5 	bl	8017cd4 <ethernet_output>
 801636a:	4603      	mov	r3, r0
 801636c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016370:	e067      	b.n	8016442 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016372:	7c7a      	ldrb	r2, [r7, #17]
 8016374:	4939      	ldr	r1, [pc, #228]	; (801645c <etharp_query+0x268>)
 8016376:	4613      	mov	r3, r2
 8016378:	005b      	lsls	r3, r3, #1
 801637a:	4413      	add	r3, r2
 801637c:	00db      	lsls	r3, r3, #3
 801637e:	440b      	add	r3, r1
 8016380:	3314      	adds	r3, #20
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	2b01      	cmp	r3, #1
 8016386:	d15c      	bne.n	8016442 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016388:	2300      	movs	r3, #0
 801638a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016390:	e01c      	b.n	80163cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016392:	69fb      	ldr	r3, [r7, #28]
 8016394:	895a      	ldrh	r2, [r3, #10]
 8016396:	69fb      	ldr	r3, [r7, #28]
 8016398:	891b      	ldrh	r3, [r3, #8]
 801639a:	429a      	cmp	r2, r3
 801639c:	d10a      	bne.n	80163b4 <etharp_query+0x1c0>
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d006      	beq.n	80163b4 <etharp_query+0x1c0>
 80163a6:	4b2a      	ldr	r3, [pc, #168]	; (8016450 <etharp_query+0x25c>)
 80163a8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80163ac:	492f      	ldr	r1, [pc, #188]	; (801646c <etharp_query+0x278>)
 80163ae:	482a      	ldr	r0, [pc, #168]	; (8016458 <etharp_query+0x264>)
 80163b0:	f002 fb48 	bl	8018a44 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80163b4:	69fb      	ldr	r3, [r7, #28]
 80163b6:	7b1b      	ldrb	r3, [r3, #12]
 80163b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d002      	beq.n	80163c6 <etharp_query+0x1d2>
        copy_needed = 1;
 80163c0:	2301      	movs	r3, #1
 80163c2:	61bb      	str	r3, [r7, #24]
        break;
 80163c4:	e005      	b.n	80163d2 <etharp_query+0x1de>
      }
      p = p->next;
 80163c6:	69fb      	ldr	r3, [r7, #28]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d1df      	bne.n	8016392 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80163d2:	69bb      	ldr	r3, [r7, #24]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d007      	beq.n	80163e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80163d8:	687a      	ldr	r2, [r7, #4]
 80163da:	f44f 7120 	mov.w	r1, #640	; 0x280
 80163de:	200e      	movs	r0, #14
 80163e0:	f7f6 fc28 	bl	800cc34 <pbuf_clone>
 80163e4:	61f8      	str	r0, [r7, #28]
 80163e6:	e004      	b.n	80163f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80163ec:	69f8      	ldr	r0, [r7, #28]
 80163ee:	f7f6 fa27 	bl	800c840 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80163f2:	69fb      	ldr	r3, [r7, #28]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d021      	beq.n	801643c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80163f8:	7c7a      	ldrb	r2, [r7, #17]
 80163fa:	4918      	ldr	r1, [pc, #96]	; (801645c <etharp_query+0x268>)
 80163fc:	4613      	mov	r3, r2
 80163fe:	005b      	lsls	r3, r3, #1
 8016400:	4413      	add	r3, r2
 8016402:	00db      	lsls	r3, r3, #3
 8016404:	440b      	add	r3, r1
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d00a      	beq.n	8016422 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801640c:	7c7a      	ldrb	r2, [r7, #17]
 801640e:	4913      	ldr	r1, [pc, #76]	; (801645c <etharp_query+0x268>)
 8016410:	4613      	mov	r3, r2
 8016412:	005b      	lsls	r3, r3, #1
 8016414:	4413      	add	r3, r2
 8016416:	00db      	lsls	r3, r3, #3
 8016418:	440b      	add	r3, r1
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4618      	mov	r0, r3
 801641e:	f7f6 f96b 	bl	800c6f8 <pbuf_free>
      }
      arp_table[i].q = p;
 8016422:	7c7a      	ldrb	r2, [r7, #17]
 8016424:	490d      	ldr	r1, [pc, #52]	; (801645c <etharp_query+0x268>)
 8016426:	4613      	mov	r3, r2
 8016428:	005b      	lsls	r3, r3, #1
 801642a:	4413      	add	r3, r2
 801642c:	00db      	lsls	r3, r3, #3
 801642e:	440b      	add	r3, r1
 8016430:	69fa      	ldr	r2, [r7, #28]
 8016432:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016434:	2300      	movs	r3, #0
 8016436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801643a:	e002      	b.n	8016442 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801643c:	23ff      	movs	r3, #255	; 0xff
 801643e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016442:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016446:	4618      	mov	r0, r3
 8016448:	3728      	adds	r7, #40	; 0x28
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	0801c5c0 	.word	0x0801c5c0
 8016454:	0801c76c 	.word	0x0801c76c
 8016458:	0801c638 	.word	0x0801c638
 801645c:	2000bec4 	.word	0x2000bec4
 8016460:	0801c77c 	.word	0x0801c77c
 8016464:	0801c760 	.word	0x0801c760
 8016468:	2000bfb4 	.word	0x2000bfb4
 801646c:	0801c7a4 	.word	0x0801c7a4

08016470 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b08a      	sub	sp, #40	; 0x28
 8016474:	af02      	add	r7, sp, #8
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
 801647c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801647e:	2300      	movs	r3, #0
 8016480:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d106      	bne.n	8016496 <etharp_raw+0x26>
 8016488:	4b3a      	ldr	r3, [pc, #232]	; (8016574 <etharp_raw+0x104>)
 801648a:	f240 4257 	movw	r2, #1111	; 0x457
 801648e:	493a      	ldr	r1, [pc, #232]	; (8016578 <etharp_raw+0x108>)
 8016490:	483a      	ldr	r0, [pc, #232]	; (801657c <etharp_raw+0x10c>)
 8016492:	f002 fad7 	bl	8018a44 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016496:	f44f 7220 	mov.w	r2, #640	; 0x280
 801649a:	211c      	movs	r1, #28
 801649c:	200e      	movs	r0, #14
 801649e:	f7f5 fe47 	bl	800c130 <pbuf_alloc>
 80164a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80164a4:	69bb      	ldr	r3, [r7, #24]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d102      	bne.n	80164b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80164aa:	f04f 33ff 	mov.w	r3, #4294967295
 80164ae:	e05d      	b.n	801656c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80164b0:	69bb      	ldr	r3, [r7, #24]
 80164b2:	895b      	ldrh	r3, [r3, #10]
 80164b4:	2b1b      	cmp	r3, #27
 80164b6:	d806      	bhi.n	80164c6 <etharp_raw+0x56>
 80164b8:	4b2e      	ldr	r3, [pc, #184]	; (8016574 <etharp_raw+0x104>)
 80164ba:	f240 4262 	movw	r2, #1122	; 0x462
 80164be:	4930      	ldr	r1, [pc, #192]	; (8016580 <etharp_raw+0x110>)
 80164c0:	482e      	ldr	r0, [pc, #184]	; (801657c <etharp_raw+0x10c>)
 80164c2:	f002 fabf 	bl	8018a44 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80164c6:	69bb      	ldr	r3, [r7, #24]
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80164cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7f4 fcae 	bl	800ae30 <lwip_htons>
 80164d4:	4603      	mov	r3, r0
 80164d6:	461a      	mov	r2, r3
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80164e2:	2b06      	cmp	r3, #6
 80164e4:	d006      	beq.n	80164f4 <etharp_raw+0x84>
 80164e6:	4b23      	ldr	r3, [pc, #140]	; (8016574 <etharp_raw+0x104>)
 80164e8:	f240 4269 	movw	r2, #1129	; 0x469
 80164ec:	4925      	ldr	r1, [pc, #148]	; (8016584 <etharp_raw+0x114>)
 80164ee:	4823      	ldr	r0, [pc, #140]	; (801657c <etharp_raw+0x10c>)
 80164f0:	f002 faa8 	bl	8018a44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	3308      	adds	r3, #8
 80164f8:	2206      	movs	r2, #6
 80164fa:	6839      	ldr	r1, [r7, #0]
 80164fc:	4618      	mov	r0, r3
 80164fe:	f002 f9ad 	bl	801885c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016502:	697b      	ldr	r3, [r7, #20]
 8016504:	3312      	adds	r3, #18
 8016506:	2206      	movs	r2, #6
 8016508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801650a:	4618      	mov	r0, r3
 801650c:	f002 f9a6 	bl	801885c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016510:	697b      	ldr	r3, [r7, #20]
 8016512:	330e      	adds	r3, #14
 8016514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016516:	6812      	ldr	r2, [r2, #0]
 8016518:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	3318      	adds	r3, #24
 801651e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016520:	6812      	ldr	r2, [r2, #0]
 8016522:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016524:	697b      	ldr	r3, [r7, #20]
 8016526:	2200      	movs	r2, #0
 8016528:	701a      	strb	r2, [r3, #0]
 801652a:	2200      	movs	r2, #0
 801652c:	f042 0201 	orr.w	r2, r2, #1
 8016530:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	2200      	movs	r2, #0
 8016536:	f042 0208 	orr.w	r2, r2, #8
 801653a:	709a      	strb	r2, [r3, #2]
 801653c:	2200      	movs	r2, #0
 801653e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	2206      	movs	r2, #6
 8016544:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016546:	697b      	ldr	r3, [r7, #20]
 8016548:	2204      	movs	r2, #4
 801654a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801654c:	f640 0306 	movw	r3, #2054	; 0x806
 8016550:	9300      	str	r3, [sp, #0]
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	68ba      	ldr	r2, [r7, #8]
 8016556:	69b9      	ldr	r1, [r7, #24]
 8016558:	68f8      	ldr	r0, [r7, #12]
 801655a:	f001 fbbb 	bl	8017cd4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801655e:	69b8      	ldr	r0, [r7, #24]
 8016560:	f7f6 f8ca 	bl	800c6f8 <pbuf_free>
  p = NULL;
 8016564:	2300      	movs	r3, #0
 8016566:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016568:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801656c:	4618      	mov	r0, r3
 801656e:	3720      	adds	r7, #32
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	0801c5c0 	.word	0x0801c5c0
 8016578:	0801c710 	.word	0x0801c710
 801657c:	0801c638 	.word	0x0801c638
 8016580:	0801c7c0 	.word	0x0801c7c0
 8016584:	0801c7f4 	.word	0x0801c7f4

08016588 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b088      	sub	sp, #32
 801658c:	af04      	add	r7, sp, #16
 801658e:	60f8      	str	r0, [r7, #12]
 8016590:	60b9      	str	r1, [r7, #8]
 8016592:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80165a4:	2201      	movs	r2, #1
 80165a6:	9203      	str	r2, [sp, #12]
 80165a8:	68ba      	ldr	r2, [r7, #8]
 80165aa:	9202      	str	r2, [sp, #8]
 80165ac:	4a06      	ldr	r2, [pc, #24]	; (80165c8 <etharp_request_dst+0x40>)
 80165ae:	9201      	str	r2, [sp, #4]
 80165b0:	9300      	str	r3, [sp, #0]
 80165b2:	4603      	mov	r3, r0
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	68f8      	ldr	r0, [r7, #12]
 80165b8:	f7ff ff5a 	bl	8016470 <etharp_raw>
 80165bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80165be:	4618      	mov	r0, r3
 80165c0:	3710      	adds	r7, #16
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}
 80165c6:	bf00      	nop
 80165c8:	0801cde4 	.word	0x0801cde4

080165cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b082      	sub	sp, #8
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
 80165d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80165d6:	4a05      	ldr	r2, [pc, #20]	; (80165ec <etharp_request+0x20>)
 80165d8:	6839      	ldr	r1, [r7, #0]
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f7ff ffd4 	bl	8016588 <etharp_request_dst>
 80165e0:	4603      	mov	r3, r0
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3708      	adds	r7, #8
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	0801cddc 	.word	0x0801cddc

080165f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b08e      	sub	sp, #56	; 0x38
 80165f4:	af04      	add	r7, sp, #16
 80165f6:	6078      	str	r0, [r7, #4]
 80165f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80165fa:	4b87      	ldr	r3, [pc, #540]	; (8016818 <icmp_input+0x228>)
 80165fc:	689b      	ldr	r3, [r3, #8]
 80165fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016602:	781b      	ldrb	r3, [r3, #0]
 8016604:	f003 030f 	and.w	r3, r3, #15
 8016608:	b2db      	uxtb	r3, r3
 801660a:	009b      	lsls	r3, r3, #2
 801660c:	b2db      	uxtb	r3, r3
 801660e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016612:	2b13      	cmp	r3, #19
 8016614:	f240 80e8 	bls.w	80167e8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	895b      	ldrh	r3, [r3, #10]
 801661c:	2b03      	cmp	r3, #3
 801661e:	f240 80e5 	bls.w	80167ec <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	685b      	ldr	r3, [r3, #4]
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801662c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016630:	2b00      	cmp	r3, #0
 8016632:	f000 80d2 	beq.w	80167da <icmp_input+0x1ea>
 8016636:	2b08      	cmp	r3, #8
 8016638:	f040 80d2 	bne.w	80167e0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801663c:	4b77      	ldr	r3, [pc, #476]	; (801681c <icmp_input+0x22c>)
 801663e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016640:	4b75      	ldr	r3, [pc, #468]	; (8016818 <icmp_input+0x228>)
 8016642:	695b      	ldr	r3, [r3, #20]
 8016644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016648:	2be0      	cmp	r3, #224	; 0xe0
 801664a:	f000 80d6 	beq.w	80167fa <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801664e:	4b72      	ldr	r3, [pc, #456]	; (8016818 <icmp_input+0x228>)
 8016650:	695b      	ldr	r3, [r3, #20]
 8016652:	4a71      	ldr	r2, [pc, #452]	; (8016818 <icmp_input+0x228>)
 8016654:	6812      	ldr	r2, [r2, #0]
 8016656:	4611      	mov	r1, r2
 8016658:	4618      	mov	r0, r3
 801665a:	f000 fc2f 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 801665e:	4603      	mov	r3, r0
 8016660:	2b00      	cmp	r3, #0
 8016662:	f040 80cc 	bne.w	80167fe <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	891b      	ldrh	r3, [r3, #8]
 801666a:	2b07      	cmp	r3, #7
 801666c:	f240 80c0 	bls.w	80167f0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7f4 fc77 	bl	800af64 <inet_chksum_pbuf>
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d003      	beq.n	8016684 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f7f6 f83b 	bl	800c6f8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016682:	e0c5      	b.n	8016810 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016686:	330e      	adds	r3, #14
 8016688:	4619      	mov	r1, r3
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f7f5 ff9e 	bl	800c5cc <pbuf_add_header>
 8016690:	4603      	mov	r3, r0
 8016692:	2b00      	cmp	r3, #0
 8016694:	d04b      	beq.n	801672e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	891a      	ldrh	r2, [r3, #8]
 801669a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801669c:	4413      	add	r3, r2
 801669e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	891b      	ldrh	r3, [r3, #8]
 80166a4:	8b7a      	ldrh	r2, [r7, #26]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	f0c0 80ab 	bcc.w	8016802 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80166ac:	8b7b      	ldrh	r3, [r7, #26]
 80166ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166b2:	4619      	mov	r1, r3
 80166b4:	200e      	movs	r0, #14
 80166b6:	f7f5 fd3b 	bl	800c130 <pbuf_alloc>
 80166ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	f000 80a1 	beq.w	8016806 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	895b      	ldrh	r3, [r3, #10]
 80166c8:	461a      	mov	r2, r3
 80166ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166cc:	3308      	adds	r3, #8
 80166ce:	429a      	cmp	r2, r3
 80166d0:	d203      	bcs.n	80166da <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80166d2:	6978      	ldr	r0, [r7, #20]
 80166d4:	f7f6 f810 	bl	800c6f8 <pbuf_free>
          goto icmperr;
 80166d8:	e096      	b.n	8016808 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80166da:	697b      	ldr	r3, [r7, #20]
 80166dc:	685b      	ldr	r3, [r3, #4]
 80166de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80166e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80166e2:	4618      	mov	r0, r3
 80166e4:	f002 f8ba 	bl	801885c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80166e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166ea:	4619      	mov	r1, r3
 80166ec:	6978      	ldr	r0, [r7, #20]
 80166ee:	f7f5 ff7d 	bl	800c5ec <pbuf_remove_header>
 80166f2:	4603      	mov	r3, r0
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d009      	beq.n	801670c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80166f8:	4b49      	ldr	r3, [pc, #292]	; (8016820 <icmp_input+0x230>)
 80166fa:	22b6      	movs	r2, #182	; 0xb6
 80166fc:	4949      	ldr	r1, [pc, #292]	; (8016824 <icmp_input+0x234>)
 80166fe:	484a      	ldr	r0, [pc, #296]	; (8016828 <icmp_input+0x238>)
 8016700:	f002 f9a0 	bl	8018a44 <iprintf>
          pbuf_free(r);
 8016704:	6978      	ldr	r0, [r7, #20]
 8016706:	f7f5 fff7 	bl	800c6f8 <pbuf_free>
          goto icmperr;
 801670a:	e07d      	b.n	8016808 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801670c:	6879      	ldr	r1, [r7, #4]
 801670e:	6978      	ldr	r0, [r7, #20]
 8016710:	f7f6 f924 	bl	800c95c <pbuf_copy>
 8016714:	4603      	mov	r3, r0
 8016716:	2b00      	cmp	r3, #0
 8016718:	d003      	beq.n	8016722 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801671a:	6978      	ldr	r0, [r7, #20]
 801671c:	f7f5 ffec 	bl	800c6f8 <pbuf_free>
          goto icmperr;
 8016720:	e072      	b.n	8016808 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016722:	6878      	ldr	r0, [r7, #4]
 8016724:	f7f5 ffe8 	bl	800c6f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	607b      	str	r3, [r7, #4]
 801672c:	e00f      	b.n	801674e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801672e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016730:	330e      	adds	r3, #14
 8016732:	4619      	mov	r1, r3
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f7f5 ff59 	bl	800c5ec <pbuf_remove_header>
 801673a:	4603      	mov	r3, r0
 801673c:	2b00      	cmp	r3, #0
 801673e:	d006      	beq.n	801674e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016740:	4b37      	ldr	r3, [pc, #220]	; (8016820 <icmp_input+0x230>)
 8016742:	22c7      	movs	r2, #199	; 0xc7
 8016744:	4939      	ldr	r1, [pc, #228]	; (801682c <icmp_input+0x23c>)
 8016746:	4838      	ldr	r0, [pc, #224]	; (8016828 <icmp_input+0x238>)
 8016748:	f002 f97c 	bl	8018a44 <iprintf>
          goto icmperr;
 801674c:	e05c      	b.n	8016808 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	685b      	ldr	r3, [r3, #4]
 8016752:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016756:	4619      	mov	r1, r3
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7f5 ff37 	bl	800c5cc <pbuf_add_header>
 801675e:	4603      	mov	r3, r0
 8016760:	2b00      	cmp	r3, #0
 8016762:	d13c      	bne.n	80167de <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	685b      	ldr	r3, [r3, #4]
 8016768:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801676a:	69fb      	ldr	r3, [r7, #28]
 801676c:	681a      	ldr	r2, [r3, #0]
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016772:	4b29      	ldr	r3, [pc, #164]	; (8016818 <icmp_input+0x228>)
 8016774:	691a      	ldr	r2, [r3, #16]
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801677a:	693b      	ldr	r3, [r7, #16]
 801677c:	2200      	movs	r2, #0
 801677e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	885b      	ldrh	r3, [r3, #2]
 8016784:	b29b      	uxth	r3, r3
 8016786:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801678a:	4293      	cmp	r3, r2
 801678c:	d907      	bls.n	801679e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	885b      	ldrh	r3, [r3, #2]
 8016792:	b29b      	uxth	r3, r3
 8016794:	3309      	adds	r3, #9
 8016796:	b29a      	uxth	r2, r3
 8016798:	693b      	ldr	r3, [r7, #16]
 801679a:	805a      	strh	r2, [r3, #2]
 801679c:	e006      	b.n	80167ac <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	885b      	ldrh	r3, [r3, #2]
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	3308      	adds	r3, #8
 80167a6:	b29a      	uxth	r2, r3
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	22ff      	movs	r2, #255	; 0xff
 80167b0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	2200      	movs	r2, #0
 80167b6:	729a      	strb	r2, [r3, #10]
 80167b8:	2200      	movs	r2, #0
 80167ba:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	9302      	str	r3, [sp, #8]
 80167c0:	2301      	movs	r3, #1
 80167c2:	9301      	str	r3, [sp, #4]
 80167c4:	2300      	movs	r3, #0
 80167c6:	9300      	str	r3, [sp, #0]
 80167c8:	23ff      	movs	r3, #255	; 0xff
 80167ca:	2200      	movs	r2, #0
 80167cc:	69f9      	ldr	r1, [r7, #28]
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f000 fa9c 	bl	8016d0c <ip4_output_if>
 80167d4:	4603      	mov	r3, r0
 80167d6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80167d8:	e001      	b.n	80167de <icmp_input+0x1ee>
      break;
 80167da:	bf00      	nop
 80167dc:	e000      	b.n	80167e0 <icmp_input+0x1f0>
      break;
 80167de:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	f7f5 ff89 	bl	800c6f8 <pbuf_free>
  return;
 80167e6:	e013      	b.n	8016810 <icmp_input+0x220>
    goto lenerr;
 80167e8:	bf00      	nop
 80167ea:	e002      	b.n	80167f2 <icmp_input+0x202>
    goto lenerr;
 80167ec:	bf00      	nop
 80167ee:	e000      	b.n	80167f2 <icmp_input+0x202>
        goto lenerr;
 80167f0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f7f5 ff80 	bl	800c6f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80167f8:	e00a      	b.n	8016810 <icmp_input+0x220>
        goto icmperr;
 80167fa:	bf00      	nop
 80167fc:	e004      	b.n	8016808 <icmp_input+0x218>
        goto icmperr;
 80167fe:	bf00      	nop
 8016800:	e002      	b.n	8016808 <icmp_input+0x218>
          goto icmperr;
 8016802:	bf00      	nop
 8016804:	e000      	b.n	8016808 <icmp_input+0x218>
          goto icmperr;
 8016806:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f7f5 ff75 	bl	800c6f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801680e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016810:	3728      	adds	r7, #40	; 0x28
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	20008d10 	.word	0x20008d10
 801681c:	20008d24 	.word	0x20008d24
 8016820:	0801c838 	.word	0x0801c838
 8016824:	0801c870 	.word	0x0801c870
 8016828:	0801c8a8 	.word	0x0801c8a8
 801682c:	0801c8d0 	.word	0x0801c8d0

08016830 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b082      	sub	sp, #8
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	460b      	mov	r3, r1
 801683a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801683c:	78fb      	ldrb	r3, [r7, #3]
 801683e:	461a      	mov	r2, r3
 8016840:	2103      	movs	r1, #3
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f000 f814 	bl	8016870 <icmp_send_response>
}
 8016848:	bf00      	nop
 801684a:	3708      	adds	r7, #8
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}

08016850 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	460b      	mov	r3, r1
 801685a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801685c:	78fb      	ldrb	r3, [r7, #3]
 801685e:	461a      	mov	r2, r3
 8016860:	210b      	movs	r1, #11
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f000 f804 	bl	8016870 <icmp_send_response>
}
 8016868:	bf00      	nop
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}

08016870 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b08c      	sub	sp, #48	; 0x30
 8016874:	af04      	add	r7, sp, #16
 8016876:	6078      	str	r0, [r7, #4]
 8016878:	460b      	mov	r3, r1
 801687a:	70fb      	strb	r3, [r7, #3]
 801687c:	4613      	mov	r3, r2
 801687e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016880:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016884:	2124      	movs	r1, #36	; 0x24
 8016886:	2022      	movs	r0, #34	; 0x22
 8016888:	f7f5 fc52 	bl	800c130 <pbuf_alloc>
 801688c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801688e:	69fb      	ldr	r3, [r7, #28]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d056      	beq.n	8016942 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016894:	69fb      	ldr	r3, [r7, #28]
 8016896:	895b      	ldrh	r3, [r3, #10]
 8016898:	2b23      	cmp	r3, #35	; 0x23
 801689a:	d806      	bhi.n	80168aa <icmp_send_response+0x3a>
 801689c:	4b2b      	ldr	r3, [pc, #172]	; (801694c <icmp_send_response+0xdc>)
 801689e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80168a2:	492b      	ldr	r1, [pc, #172]	; (8016950 <icmp_send_response+0xe0>)
 80168a4:	482b      	ldr	r0, [pc, #172]	; (8016954 <icmp_send_response+0xe4>)
 80168a6:	f002 f8cd 	bl	8018a44 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	685b      	ldr	r3, [r3, #4]
 80168b4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80168b6:	697b      	ldr	r3, [r7, #20]
 80168b8:	78fa      	ldrb	r2, [r7, #3]
 80168ba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80168bc:	697b      	ldr	r3, [r7, #20]
 80168be:	78ba      	ldrb	r2, [r7, #2]
 80168c0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80168c2:	697b      	ldr	r3, [r7, #20]
 80168c4:	2200      	movs	r2, #0
 80168c6:	711a      	strb	r2, [r3, #4]
 80168c8:	2200      	movs	r2, #0
 80168ca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	2200      	movs	r2, #0
 80168d0:	719a      	strb	r2, [r3, #6]
 80168d2:	2200      	movs	r2, #0
 80168d4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	f103 0008 	add.w	r0, r3, #8
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	221c      	movs	r2, #28
 80168e4:	4619      	mov	r1, r3
 80168e6:	f001 ffb9 	bl	801885c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80168ea:	69bb      	ldr	r3, [r7, #24]
 80168ec:	68db      	ldr	r3, [r3, #12]
 80168ee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80168f0:	f107 030c 	add.w	r3, r7, #12
 80168f4:	4618      	mov	r0, r3
 80168f6:	f000 f82f 	bl	8016958 <ip4_route>
 80168fa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d01b      	beq.n	801693a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	2200      	movs	r2, #0
 8016906:	709a      	strb	r2, [r3, #2]
 8016908:	2200      	movs	r2, #0
 801690a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801690c:	69fb      	ldr	r3, [r7, #28]
 801690e:	895b      	ldrh	r3, [r3, #10]
 8016910:	4619      	mov	r1, r3
 8016912:	6978      	ldr	r0, [r7, #20]
 8016914:	f7f4 fb14 	bl	800af40 <inet_chksum>
 8016918:	4603      	mov	r3, r0
 801691a:	461a      	mov	r2, r3
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016920:	f107 020c 	add.w	r2, r7, #12
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	9302      	str	r3, [sp, #8]
 8016928:	2301      	movs	r3, #1
 801692a:	9301      	str	r3, [sp, #4]
 801692c:	2300      	movs	r3, #0
 801692e:	9300      	str	r3, [sp, #0]
 8016930:	23ff      	movs	r3, #255	; 0xff
 8016932:	2100      	movs	r1, #0
 8016934:	69f8      	ldr	r0, [r7, #28]
 8016936:	f000 f9e9 	bl	8016d0c <ip4_output_if>
  }
  pbuf_free(q);
 801693a:	69f8      	ldr	r0, [r7, #28]
 801693c:	f7f5 fedc 	bl	800c6f8 <pbuf_free>
 8016940:	e000      	b.n	8016944 <icmp_send_response+0xd4>
    return;
 8016942:	bf00      	nop
}
 8016944:	3720      	adds	r7, #32
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}
 801694a:	bf00      	nop
 801694c:	0801c838 	.word	0x0801c838
 8016950:	0801c904 	.word	0x0801c904
 8016954:	0801c8a8 	.word	0x0801c8a8

08016958 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016958:	b480      	push	{r7}
 801695a:	b085      	sub	sp, #20
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016960:	4b32      	ldr	r3, [pc, #200]	; (8016a2c <ip4_route+0xd4>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	60fb      	str	r3, [r7, #12]
 8016966:	e036      	b.n	80169d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801696e:	f003 0301 	and.w	r3, r3, #1
 8016972:	b2db      	uxtb	r3, r3
 8016974:	2b00      	cmp	r3, #0
 8016976:	d02b      	beq.n	80169d0 <ip4_route+0x78>
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801697e:	089b      	lsrs	r3, r3, #2
 8016980:	f003 0301 	and.w	r3, r3, #1
 8016984:	b2db      	uxtb	r3, r3
 8016986:	2b00      	cmp	r3, #0
 8016988:	d022      	beq.n	80169d0 <ip4_route+0x78>
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	3304      	adds	r3, #4
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d01d      	beq.n	80169d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	3304      	adds	r3, #4
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	405a      	eors	r2, r3
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	3308      	adds	r3, #8
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	4013      	ands	r3, r2
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d101      	bne.n	80169b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	e038      	b.n	8016a22 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80169b6:	f003 0302 	and.w	r3, r3, #2
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d108      	bne.n	80169d0 <ip4_route+0x78>
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	330c      	adds	r3, #12
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	429a      	cmp	r2, r3
 80169ca:	d101      	bne.n	80169d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	e028      	b.n	8016a22 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	60fb      	str	r3, [r7, #12]
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d1c5      	bne.n	8016968 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80169dc:	4b14      	ldr	r3, [pc, #80]	; (8016a30 <ip4_route+0xd8>)
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d01a      	beq.n	8016a1a <ip4_route+0xc2>
 80169e4:	4b12      	ldr	r3, [pc, #72]	; (8016a30 <ip4_route+0xd8>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80169ec:	f003 0301 	and.w	r3, r3, #1
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d012      	beq.n	8016a1a <ip4_route+0xc2>
 80169f4:	4b0e      	ldr	r3, [pc, #56]	; (8016a30 <ip4_route+0xd8>)
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80169fc:	f003 0304 	and.w	r3, r3, #4
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d00a      	beq.n	8016a1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016a04:	4b0a      	ldr	r3, [pc, #40]	; (8016a30 <ip4_route+0xd8>)
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	3304      	adds	r3, #4
 8016a0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d004      	beq.n	8016a1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	b2db      	uxtb	r3, r3
 8016a16:	2b7f      	cmp	r3, #127	; 0x7f
 8016a18:	d101      	bne.n	8016a1e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	e001      	b.n	8016a22 <ip4_route+0xca>
  }

  return netif_default;
 8016a1e:	4b04      	ldr	r3, [pc, #16]	; (8016a30 <ip4_route+0xd8>)
 8016a20:	681b      	ldr	r3, [r3, #0]
}
 8016a22:	4618      	mov	r0, r3
 8016a24:	3714      	adds	r7, #20
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bc80      	pop	{r7}
 8016a2a:	4770      	bx	lr
 8016a2c:	2000be24 	.word	0x2000be24
 8016a30:	2000be28 	.word	0x2000be28

08016a34 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b082      	sub	sp, #8
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a42:	f003 0301 	and.w	r3, r3, #1
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d016      	beq.n	8016a7a <ip4_input_accept+0x46>
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	3304      	adds	r3, #4
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d011      	beq.n	8016a7a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016a56:	4b0b      	ldr	r3, [pc, #44]	; (8016a84 <ip4_input_accept+0x50>)
 8016a58:	695a      	ldr	r2, [r3, #20]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	3304      	adds	r3, #4
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d008      	beq.n	8016a76 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016a64:	4b07      	ldr	r3, [pc, #28]	; (8016a84 <ip4_input_accept+0x50>)
 8016a66:	695b      	ldr	r3, [r3, #20]
 8016a68:	6879      	ldr	r1, [r7, #4]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f000 fa26 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 8016a70:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d001      	beq.n	8016a7a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016a76:	2301      	movs	r3, #1
 8016a78:	e000      	b.n	8016a7c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016a7a:	2300      	movs	r3, #0
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	3708      	adds	r7, #8
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}
 8016a84:	20008d10 	.word	0x20008d10

08016a88 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b088      	sub	sp, #32
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016a92:	2301      	movs	r3, #1
 8016a94:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	685b      	ldr	r3, [r3, #4]
 8016a9a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016a9c:	69fb      	ldr	r3, [r7, #28]
 8016a9e:	781b      	ldrb	r3, [r3, #0]
 8016aa0:	091b      	lsrs	r3, r3, #4
 8016aa2:	b2db      	uxtb	r3, r3
 8016aa4:	2b04      	cmp	r3, #4
 8016aa6:	d004      	beq.n	8016ab2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f7f5 fe25 	bl	800c6f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	e123      	b.n	8016cfa <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016ab2:	69fb      	ldr	r3, [r7, #28]
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	f003 030f 	and.w	r3, r3, #15
 8016aba:	b2db      	uxtb	r3, r3
 8016abc:	009b      	lsls	r3, r3, #2
 8016abe:	b2db      	uxtb	r3, r3
 8016ac0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016ac2:	69fb      	ldr	r3, [r7, #28]
 8016ac4:	885b      	ldrh	r3, [r3, #2]
 8016ac6:	b29b      	uxth	r3, r3
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7f4 f9b1 	bl	800ae30 <lwip_htons>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	891b      	ldrh	r3, [r3, #8]
 8016ad6:	8a3a      	ldrh	r2, [r7, #16]
 8016ad8:	429a      	cmp	r2, r3
 8016ada:	d204      	bcs.n	8016ae6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016adc:	8a3b      	ldrh	r3, [r7, #16]
 8016ade:	4619      	mov	r1, r3
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f7f5 fc83 	bl	800c3ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	895b      	ldrh	r3, [r3, #10]
 8016aea:	8a7a      	ldrh	r2, [r7, #18]
 8016aec:	429a      	cmp	r2, r3
 8016aee:	d807      	bhi.n	8016b00 <ip4_input+0x78>
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	891b      	ldrh	r3, [r3, #8]
 8016af4:	8a3a      	ldrh	r2, [r7, #16]
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d802      	bhi.n	8016b00 <ip4_input+0x78>
 8016afa:	8a7b      	ldrh	r3, [r7, #18]
 8016afc:	2b13      	cmp	r3, #19
 8016afe:	d804      	bhi.n	8016b0a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f7f5 fdf9 	bl	800c6f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016b06:	2300      	movs	r3, #0
 8016b08:	e0f7      	b.n	8016cfa <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016b0a:	69fb      	ldr	r3, [r7, #28]
 8016b0c:	691b      	ldr	r3, [r3, #16]
 8016b0e:	4a7d      	ldr	r2, [pc, #500]	; (8016d04 <ip4_input+0x27c>)
 8016b10:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	68db      	ldr	r3, [r3, #12]
 8016b16:	4a7b      	ldr	r2, [pc, #492]	; (8016d04 <ip4_input+0x27c>)
 8016b18:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016b1a:	4b7a      	ldr	r3, [pc, #488]	; (8016d04 <ip4_input+0x27c>)
 8016b1c:	695b      	ldr	r3, [r3, #20]
 8016b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016b22:	2be0      	cmp	r3, #224	; 0xe0
 8016b24:	d112      	bne.n	8016b4c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b2c:	f003 0301 	and.w	r3, r3, #1
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d007      	beq.n	8016b46 <ip4_input+0xbe>
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	3304      	adds	r3, #4
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d002      	beq.n	8016b46 <ip4_input+0xbe>
      netif = inp;
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	61bb      	str	r3, [r7, #24]
 8016b44:	e02a      	b.n	8016b9c <ip4_input+0x114>
    } else {
      netif = NULL;
 8016b46:	2300      	movs	r3, #0
 8016b48:	61bb      	str	r3, [r7, #24]
 8016b4a:	e027      	b.n	8016b9c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016b4c:	6838      	ldr	r0, [r7, #0]
 8016b4e:	f7ff ff71 	bl	8016a34 <ip4_input_accept>
 8016b52:	4603      	mov	r3, r0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d002      	beq.n	8016b5e <ip4_input+0xd6>
      netif = inp;
 8016b58:	683b      	ldr	r3, [r7, #0]
 8016b5a:	61bb      	str	r3, [r7, #24]
 8016b5c:	e01e      	b.n	8016b9c <ip4_input+0x114>
    } else {
      netif = NULL;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016b62:	4b68      	ldr	r3, [pc, #416]	; (8016d04 <ip4_input+0x27c>)
 8016b64:	695b      	ldr	r3, [r3, #20]
 8016b66:	b2db      	uxtb	r3, r3
 8016b68:	2b7f      	cmp	r3, #127	; 0x7f
 8016b6a:	d017      	beq.n	8016b9c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016b6c:	4b66      	ldr	r3, [pc, #408]	; (8016d08 <ip4_input+0x280>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	61bb      	str	r3, [r7, #24]
 8016b72:	e00e      	b.n	8016b92 <ip4_input+0x10a>
          if (netif == inp) {
 8016b74:	69ba      	ldr	r2, [r7, #24]
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d006      	beq.n	8016b8a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016b7c:	69b8      	ldr	r0, [r7, #24]
 8016b7e:	f7ff ff59 	bl	8016a34 <ip4_input_accept>
 8016b82:	4603      	mov	r3, r0
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d108      	bne.n	8016b9a <ip4_input+0x112>
 8016b88:	e000      	b.n	8016b8c <ip4_input+0x104>
            continue;
 8016b8a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016b8c:	69bb      	ldr	r3, [r7, #24]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	61bb      	str	r3, [r7, #24]
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d1ed      	bne.n	8016b74 <ip4_input+0xec>
 8016b98:	e000      	b.n	8016b9c <ip4_input+0x114>
            break;
 8016b9a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016b9c:	69bb      	ldr	r3, [r7, #24]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d111      	bne.n	8016bc6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	7a5b      	ldrb	r3, [r3, #9]
 8016ba6:	2b11      	cmp	r3, #17
 8016ba8:	d10d      	bne.n	8016bc6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016baa:	8a7b      	ldrh	r3, [r7, #18]
 8016bac:	69fa      	ldr	r2, [r7, #28]
 8016bae:	4413      	add	r3, r2
 8016bb0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	885b      	ldrh	r3, [r3, #2]
 8016bb6:	b29b      	uxth	r3, r3
 8016bb8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016bbc:	d103      	bne.n	8016bc6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d017      	beq.n	8016bfc <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016bcc:	4b4d      	ldr	r3, [pc, #308]	; (8016d04 <ip4_input+0x27c>)
 8016bce:	691b      	ldr	r3, [r3, #16]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d013      	beq.n	8016bfc <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016bd4:	4b4b      	ldr	r3, [pc, #300]	; (8016d04 <ip4_input+0x27c>)
 8016bd6:	691b      	ldr	r3, [r3, #16]
 8016bd8:	6839      	ldr	r1, [r7, #0]
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f000 f96e 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 8016be0:	4603      	mov	r3, r0
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d105      	bne.n	8016bf2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016be6:	4b47      	ldr	r3, [pc, #284]	; (8016d04 <ip4_input+0x27c>)
 8016be8:	691b      	ldr	r3, [r3, #16]
 8016bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016bee:	2be0      	cmp	r3, #224	; 0xe0
 8016bf0:	d104      	bne.n	8016bfc <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016bf2:	6878      	ldr	r0, [r7, #4]
 8016bf4:	f7f5 fd80 	bl	800c6f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	e07e      	b.n	8016cfa <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016bfc:	69bb      	ldr	r3, [r7, #24]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d104      	bne.n	8016c0c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f7f5 fd78 	bl	800c6f8 <pbuf_free>
    return ERR_OK;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	e076      	b.n	8016cfa <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	88db      	ldrh	r3, [r3, #6]
 8016c10:	b29b      	uxth	r3, r3
 8016c12:	461a      	mov	r2, r3
 8016c14:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016c18:	4013      	ands	r3, r2
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d00b      	beq.n	8016c36 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f000 fc90 	bl	8017544 <ip4_reass>
 8016c24:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d101      	bne.n	8016c30 <ip4_input+0x1a8>
      return ERR_OK;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	e064      	b.n	8016cfa <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	685b      	ldr	r3, [r3, #4]
 8016c34:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016c36:	4a33      	ldr	r2, [pc, #204]	; (8016d04 <ip4_input+0x27c>)
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016c3c:	4a31      	ldr	r2, [pc, #196]	; (8016d04 <ip4_input+0x27c>)
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016c42:	4a30      	ldr	r2, [pc, #192]	; (8016d04 <ip4_input+0x27c>)
 8016c44:	69fb      	ldr	r3, [r7, #28]
 8016c46:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016c48:	69fb      	ldr	r3, [r7, #28]
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	f003 030f 	and.w	r3, r3, #15
 8016c50:	b2db      	uxtb	r3, r3
 8016c52:	009b      	lsls	r3, r3, #2
 8016c54:	b2db      	uxtb	r3, r3
 8016c56:	b29a      	uxth	r2, r3
 8016c58:	4b2a      	ldr	r3, [pc, #168]	; (8016d04 <ip4_input+0x27c>)
 8016c5a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016c5c:	8a7b      	ldrh	r3, [r7, #18]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	6878      	ldr	r0, [r7, #4]
 8016c62:	f7f5 fcc3 	bl	800c5ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016c66:	69fb      	ldr	r3, [r7, #28]
 8016c68:	7a5b      	ldrb	r3, [r3, #9]
 8016c6a:	2b11      	cmp	r3, #17
 8016c6c:	d006      	beq.n	8016c7c <ip4_input+0x1f4>
 8016c6e:	2b11      	cmp	r3, #17
 8016c70:	dc13      	bgt.n	8016c9a <ip4_input+0x212>
 8016c72:	2b01      	cmp	r3, #1
 8016c74:	d00c      	beq.n	8016c90 <ip4_input+0x208>
 8016c76:	2b06      	cmp	r3, #6
 8016c78:	d005      	beq.n	8016c86 <ip4_input+0x1fe>
 8016c7a:	e00e      	b.n	8016c9a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016c7c:	6839      	ldr	r1, [r7, #0]
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f7fc fb04 	bl	801328c <udp_input>
        break;
 8016c84:	e026      	b.n	8016cd4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016c86:	6839      	ldr	r1, [r7, #0]
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f7f7 fe83 	bl	800e994 <tcp_input>
        break;
 8016c8e:	e021      	b.n	8016cd4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016c90:	6839      	ldr	r1, [r7, #0]
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f7ff fcac 	bl	80165f0 <icmp_input>
        break;
 8016c98:	e01c      	b.n	8016cd4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016c9a:	4b1a      	ldr	r3, [pc, #104]	; (8016d04 <ip4_input+0x27c>)
 8016c9c:	695b      	ldr	r3, [r3, #20]
 8016c9e:	69b9      	ldr	r1, [r7, #24]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f000 f90b 	bl	8016ebc <ip4_addr_isbroadcast_u32>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d10f      	bne.n	8016ccc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016cac:	4b15      	ldr	r3, [pc, #84]	; (8016d04 <ip4_input+0x27c>)
 8016cae:	695b      	ldr	r3, [r3, #20]
 8016cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016cb4:	2be0      	cmp	r3, #224	; 0xe0
 8016cb6:	d009      	beq.n	8016ccc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016cb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f7f5 fd07 	bl	800c6d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016cc4:	2102      	movs	r1, #2
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7ff fdb2 	bl	8016830 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f7f5 fd13 	bl	800c6f8 <pbuf_free>
        break;
 8016cd2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016cd4:	4b0b      	ldr	r3, [pc, #44]	; (8016d04 <ip4_input+0x27c>)
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016cda:	4b0a      	ldr	r3, [pc, #40]	; (8016d04 <ip4_input+0x27c>)
 8016cdc:	2200      	movs	r2, #0
 8016cde:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016ce0:	4b08      	ldr	r3, [pc, #32]	; (8016d04 <ip4_input+0x27c>)
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016ce6:	4b07      	ldr	r3, [pc, #28]	; (8016d04 <ip4_input+0x27c>)
 8016ce8:	2200      	movs	r2, #0
 8016cea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016cec:	4b05      	ldr	r3, [pc, #20]	; (8016d04 <ip4_input+0x27c>)
 8016cee:	2200      	movs	r2, #0
 8016cf0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016cf2:	4b04      	ldr	r3, [pc, #16]	; (8016d04 <ip4_input+0x27c>)
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016cf8:	2300      	movs	r3, #0
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3720      	adds	r7, #32
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop
 8016d04:	20008d10 	.word	0x20008d10
 8016d08:	2000be24 	.word	0x2000be24

08016d0c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b08a      	sub	sp, #40	; 0x28
 8016d10:	af04      	add	r7, sp, #16
 8016d12:	60f8      	str	r0, [r7, #12]
 8016d14:	60b9      	str	r1, [r7, #8]
 8016d16:	607a      	str	r2, [r7, #4]
 8016d18:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d009      	beq.n	8016d38 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d003      	beq.n	8016d32 <ip4_output_if+0x26>
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d102      	bne.n	8016d38 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d34:	3304      	adds	r3, #4
 8016d36:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016d38:	78fa      	ldrb	r2, [r7, #3]
 8016d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d3c:	9302      	str	r3, [sp, #8]
 8016d3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d42:	9301      	str	r3, [sp, #4]
 8016d44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016d48:	9300      	str	r3, [sp, #0]
 8016d4a:	4613      	mov	r3, r2
 8016d4c:	687a      	ldr	r2, [r7, #4]
 8016d4e:	6979      	ldr	r1, [r7, #20]
 8016d50:	68f8      	ldr	r0, [r7, #12]
 8016d52:	f000 f805 	bl	8016d60 <ip4_output_if_src>
 8016d56:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3718      	adds	r7, #24
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}

08016d60 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b088      	sub	sp, #32
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	60f8      	str	r0, [r7, #12]
 8016d68:	60b9      	str	r1, [r7, #8]
 8016d6a:	607a      	str	r2, [r7, #4]
 8016d6c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	7b9b      	ldrb	r3, [r3, #14]
 8016d72:	2b01      	cmp	r3, #1
 8016d74:	d006      	beq.n	8016d84 <ip4_output_if_src+0x24>
 8016d76:	4b4b      	ldr	r3, [pc, #300]	; (8016ea4 <ip4_output_if_src+0x144>)
 8016d78:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016d7c:	494a      	ldr	r1, [pc, #296]	; (8016ea8 <ip4_output_if_src+0x148>)
 8016d7e:	484b      	ldr	r0, [pc, #300]	; (8016eac <ip4_output_if_src+0x14c>)
 8016d80:	f001 fe60 	bl	8018a44 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d060      	beq.n	8016e4c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016d8a:	2314      	movs	r3, #20
 8016d8c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016d8e:	2114      	movs	r1, #20
 8016d90:	68f8      	ldr	r0, [r7, #12]
 8016d92:	f7f5 fc1b 	bl	800c5cc <pbuf_add_header>
 8016d96:	4603      	mov	r3, r0
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d002      	beq.n	8016da2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016d9c:	f06f 0301 	mvn.w	r3, #1
 8016da0:	e07c      	b.n	8016e9c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	895b      	ldrh	r3, [r3, #10]
 8016dac:	2b13      	cmp	r3, #19
 8016dae:	d806      	bhi.n	8016dbe <ip4_output_if_src+0x5e>
 8016db0:	4b3c      	ldr	r3, [pc, #240]	; (8016ea4 <ip4_output_if_src+0x144>)
 8016db2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016db6:	493e      	ldr	r1, [pc, #248]	; (8016eb0 <ip4_output_if_src+0x150>)
 8016db8:	483c      	ldr	r0, [pc, #240]	; (8016eac <ip4_output_if_src+0x14c>)
 8016dba:	f001 fe43 	bl	8018a44 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	78fa      	ldrb	r2, [r7, #3]
 8016dc2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016dc4:	69fb      	ldr	r3, [r7, #28]
 8016dc6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016dca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	681a      	ldr	r2, [r3, #0]
 8016dd0:	69fb      	ldr	r3, [r7, #28]
 8016dd2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016dd4:	8b7b      	ldrh	r3, [r7, #26]
 8016dd6:	089b      	lsrs	r3, r3, #2
 8016dd8:	b29b      	uxth	r3, r3
 8016dda:	b2db      	uxtb	r3, r3
 8016ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016de0:	b2da      	uxtb	r2, r3
 8016de2:	69fb      	ldr	r3, [r7, #28]
 8016de4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016de6:	69fb      	ldr	r3, [r7, #28]
 8016de8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016dec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	891b      	ldrh	r3, [r3, #8]
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7f4 f81c 	bl	800ae30 <lwip_htons>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	461a      	mov	r2, r3
 8016dfc:	69fb      	ldr	r3, [r7, #28]
 8016dfe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016e00:	69fb      	ldr	r3, [r7, #28]
 8016e02:	2200      	movs	r2, #0
 8016e04:	719a      	strb	r2, [r3, #6]
 8016e06:	2200      	movs	r2, #0
 8016e08:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016e0a:	4b2a      	ldr	r3, [pc, #168]	; (8016eb4 <ip4_output_if_src+0x154>)
 8016e0c:	881b      	ldrh	r3, [r3, #0]
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7f4 f80e 	bl	800ae30 <lwip_htons>
 8016e14:	4603      	mov	r3, r0
 8016e16:	461a      	mov	r2, r3
 8016e18:	69fb      	ldr	r3, [r7, #28]
 8016e1a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016e1c:	4b25      	ldr	r3, [pc, #148]	; (8016eb4 <ip4_output_if_src+0x154>)
 8016e1e:	881b      	ldrh	r3, [r3, #0]
 8016e20:	3301      	adds	r3, #1
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	4b23      	ldr	r3, [pc, #140]	; (8016eb4 <ip4_output_if_src+0x154>)
 8016e26:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d104      	bne.n	8016e38 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016e2e:	4b22      	ldr	r3, [pc, #136]	; (8016eb8 <ip4_output_if_src+0x158>)
 8016e30:	681a      	ldr	r2, [r3, #0]
 8016e32:	69fb      	ldr	r3, [r7, #28]
 8016e34:	60da      	str	r2, [r3, #12]
 8016e36:	e003      	b.n	8016e40 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	681a      	ldr	r2, [r3, #0]
 8016e3c:	69fb      	ldr	r3, [r7, #28]
 8016e3e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016e40:	69fb      	ldr	r3, [r7, #28]
 8016e42:	2200      	movs	r2, #0
 8016e44:	729a      	strb	r2, [r3, #10]
 8016e46:	2200      	movs	r2, #0
 8016e48:	72da      	strb	r2, [r3, #11]
 8016e4a:	e00f      	b.n	8016e6c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	895b      	ldrh	r3, [r3, #10]
 8016e50:	2b13      	cmp	r3, #19
 8016e52:	d802      	bhi.n	8016e5a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016e54:	f06f 0301 	mvn.w	r3, #1
 8016e58:	e020      	b.n	8016e9c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	685b      	ldr	r3, [r3, #4]
 8016e5e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016e60:	69fb      	ldr	r3, [r7, #28]
 8016e62:	691b      	ldr	r3, [r3, #16]
 8016e64:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016e66:	f107 0314 	add.w	r3, r7, #20
 8016e6a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d00c      	beq.n	8016e8e <ip4_output_if_src+0x12e>
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	891a      	ldrh	r2, [r3, #8]
 8016e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e7c:	429a      	cmp	r2, r3
 8016e7e:	d906      	bls.n	8016e8e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016e80:	687a      	ldr	r2, [r7, #4]
 8016e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016e84:	68f8      	ldr	r0, [r7, #12]
 8016e86:	f000 fd51 	bl	801792c <ip4_frag>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	e006      	b.n	8016e9c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e90:	695b      	ldr	r3, [r3, #20]
 8016e92:	687a      	ldr	r2, [r7, #4]
 8016e94:	68f9      	ldr	r1, [r7, #12]
 8016e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e98:	4798      	blx	r3
 8016e9a:	4603      	mov	r3, r0
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3720      	adds	r7, #32
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	0801c930 	.word	0x0801c930
 8016ea8:	0801c964 	.word	0x0801c964
 8016eac:	0801c970 	.word	0x0801c970
 8016eb0:	0801c998 	.word	0x0801c998
 8016eb4:	2000bfb6 	.word	0x2000bfb6
 8016eb8:	0801cdd4 	.word	0x0801cdd4

08016ebc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b085      	sub	sp, #20
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
 8016ec4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ed0:	d002      	beq.n	8016ed8 <ip4_addr_isbroadcast_u32+0x1c>
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d101      	bne.n	8016edc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016ed8:	2301      	movs	r3, #1
 8016eda:	e02a      	b.n	8016f32 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016ee2:	f003 0302 	and.w	r3, r3, #2
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d101      	bne.n	8016eee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016eea:	2300      	movs	r3, #0
 8016eec:	e021      	b.n	8016f32 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	3304      	adds	r3, #4
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d101      	bne.n	8016efe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016efa:	2300      	movs	r3, #0
 8016efc:	e019      	b.n	8016f32 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016efe:	68fa      	ldr	r2, [r7, #12]
 8016f00:	683b      	ldr	r3, [r7, #0]
 8016f02:	3304      	adds	r3, #4
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	405a      	eors	r2, r3
 8016f08:	683b      	ldr	r3, [r7, #0]
 8016f0a:	3308      	adds	r3, #8
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	4013      	ands	r3, r2
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d10d      	bne.n	8016f30 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	3308      	adds	r3, #8
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	43da      	mvns	r2, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	3308      	adds	r3, #8
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	d101      	bne.n	8016f30 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	e000      	b.n	8016f32 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016f30:	2300      	movs	r3, #0
  }
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3714      	adds	r7, #20
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bc80      	pop	{r7}
 8016f3a:	4770      	bx	lr

08016f3c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b084      	sub	sp, #16
 8016f40:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016f42:	2300      	movs	r3, #0
 8016f44:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016f46:	4b12      	ldr	r3, [pc, #72]	; (8016f90 <ip_reass_tmr+0x54>)
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016f4c:	e018      	b.n	8016f80 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	7fdb      	ldrb	r3, [r3, #31]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d00b      	beq.n	8016f6e <ip_reass_tmr+0x32>
      r->timer--;
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	7fdb      	ldrb	r3, [r3, #31]
 8016f5a:	3b01      	subs	r3, #1
 8016f5c:	b2da      	uxtb	r2, r3
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	60fb      	str	r3, [r7, #12]
 8016f6c:	e008      	b.n	8016f80 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016f78:	68b9      	ldr	r1, [r7, #8]
 8016f7a:	6878      	ldr	r0, [r7, #4]
 8016f7c:	f000 f80a 	bl	8016f94 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d1e3      	bne.n	8016f4e <ip_reass_tmr+0x12>
    }
  }
}
 8016f86:	bf00      	nop
 8016f88:	bf00      	nop
 8016f8a:	3710      	adds	r7, #16
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	2000bfb8 	.word	0x2000bfb8

08016f94 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b088      	sub	sp, #32
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016fa2:	683a      	ldr	r2, [r7, #0]
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	429a      	cmp	r2, r3
 8016fa8:	d105      	bne.n	8016fb6 <ip_reass_free_complete_datagram+0x22>
 8016faa:	4b45      	ldr	r3, [pc, #276]	; (80170c0 <ip_reass_free_complete_datagram+0x12c>)
 8016fac:	22ab      	movs	r2, #171	; 0xab
 8016fae:	4945      	ldr	r1, [pc, #276]	; (80170c4 <ip_reass_free_complete_datagram+0x130>)
 8016fb0:	4845      	ldr	r0, [pc, #276]	; (80170c8 <ip_reass_free_complete_datagram+0x134>)
 8016fb2:	f001 fd47 	bl	8018a44 <iprintf>
  if (prev != NULL) {
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d00a      	beq.n	8016fd2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	429a      	cmp	r2, r3
 8016fc4:	d005      	beq.n	8016fd2 <ip_reass_free_complete_datagram+0x3e>
 8016fc6:	4b3e      	ldr	r3, [pc, #248]	; (80170c0 <ip_reass_free_complete_datagram+0x12c>)
 8016fc8:	22ad      	movs	r2, #173	; 0xad
 8016fca:	4940      	ldr	r1, [pc, #256]	; (80170cc <ip_reass_free_complete_datagram+0x138>)
 8016fcc:	483e      	ldr	r0, [pc, #248]	; (80170c8 <ip_reass_free_complete_datagram+0x134>)
 8016fce:	f001 fd39 	bl	8018a44 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016fda:	697b      	ldr	r3, [r7, #20]
 8016fdc:	889b      	ldrh	r3, [r3, #4]
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d12a      	bne.n	801703a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	685b      	ldr	r3, [r3, #4]
 8016fe8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016fea:	697b      	ldr	r3, [r7, #20]
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016ff2:	69bb      	ldr	r3, [r7, #24]
 8016ff4:	6858      	ldr	r0, [r3, #4]
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	3308      	adds	r3, #8
 8016ffa:	2214      	movs	r2, #20
 8016ffc:	4619      	mov	r1, r3
 8016ffe:	f001 fc2d 	bl	801885c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017002:	2101      	movs	r1, #1
 8017004:	69b8      	ldr	r0, [r7, #24]
 8017006:	f7ff fc23 	bl	8016850 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801700a:	69b8      	ldr	r0, [r7, #24]
 801700c:	f7f5 fc02 	bl	800c814 <pbuf_clen>
 8017010:	4603      	mov	r3, r0
 8017012:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017014:	8bfa      	ldrh	r2, [r7, #30]
 8017016:	8a7b      	ldrh	r3, [r7, #18]
 8017018:	4413      	add	r3, r2
 801701a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801701e:	db05      	blt.n	801702c <ip_reass_free_complete_datagram+0x98>
 8017020:	4b27      	ldr	r3, [pc, #156]	; (80170c0 <ip_reass_free_complete_datagram+0x12c>)
 8017022:	22bc      	movs	r2, #188	; 0xbc
 8017024:	492a      	ldr	r1, [pc, #168]	; (80170d0 <ip_reass_free_complete_datagram+0x13c>)
 8017026:	4828      	ldr	r0, [pc, #160]	; (80170c8 <ip_reass_free_complete_datagram+0x134>)
 8017028:	f001 fd0c 	bl	8018a44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801702c:	8bfa      	ldrh	r2, [r7, #30]
 801702e:	8a7b      	ldrh	r3, [r7, #18]
 8017030:	4413      	add	r3, r2
 8017032:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017034:	69b8      	ldr	r0, [r7, #24]
 8017036:	f7f5 fb5f 	bl	800c6f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017040:	e01f      	b.n	8017082 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017042:	69bb      	ldr	r3, [r7, #24]
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017048:	69bb      	ldr	r3, [r7, #24]
 801704a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017052:	68f8      	ldr	r0, [r7, #12]
 8017054:	f7f5 fbde 	bl	800c814 <pbuf_clen>
 8017058:	4603      	mov	r3, r0
 801705a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801705c:	8bfa      	ldrh	r2, [r7, #30]
 801705e:	8a7b      	ldrh	r3, [r7, #18]
 8017060:	4413      	add	r3, r2
 8017062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017066:	db05      	blt.n	8017074 <ip_reass_free_complete_datagram+0xe0>
 8017068:	4b15      	ldr	r3, [pc, #84]	; (80170c0 <ip_reass_free_complete_datagram+0x12c>)
 801706a:	22cc      	movs	r2, #204	; 0xcc
 801706c:	4918      	ldr	r1, [pc, #96]	; (80170d0 <ip_reass_free_complete_datagram+0x13c>)
 801706e:	4816      	ldr	r0, [pc, #88]	; (80170c8 <ip_reass_free_complete_datagram+0x134>)
 8017070:	f001 fce8 	bl	8018a44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017074:	8bfa      	ldrh	r2, [r7, #30]
 8017076:	8a7b      	ldrh	r3, [r7, #18]
 8017078:	4413      	add	r3, r2
 801707a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801707c:	68f8      	ldr	r0, [r7, #12]
 801707e:	f7f5 fb3b 	bl	800c6f8 <pbuf_free>
  while (p != NULL) {
 8017082:	69bb      	ldr	r3, [r7, #24]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d1dc      	bne.n	8017042 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017088:	6839      	ldr	r1, [r7, #0]
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f000 f8c2 	bl	8017214 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017090:	4b10      	ldr	r3, [pc, #64]	; (80170d4 <ip_reass_free_complete_datagram+0x140>)
 8017092:	881b      	ldrh	r3, [r3, #0]
 8017094:	8bfa      	ldrh	r2, [r7, #30]
 8017096:	429a      	cmp	r2, r3
 8017098:	d905      	bls.n	80170a6 <ip_reass_free_complete_datagram+0x112>
 801709a:	4b09      	ldr	r3, [pc, #36]	; (80170c0 <ip_reass_free_complete_datagram+0x12c>)
 801709c:	22d2      	movs	r2, #210	; 0xd2
 801709e:	490e      	ldr	r1, [pc, #56]	; (80170d8 <ip_reass_free_complete_datagram+0x144>)
 80170a0:	4809      	ldr	r0, [pc, #36]	; (80170c8 <ip_reass_free_complete_datagram+0x134>)
 80170a2:	f001 fccf 	bl	8018a44 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80170a6:	4b0b      	ldr	r3, [pc, #44]	; (80170d4 <ip_reass_free_complete_datagram+0x140>)
 80170a8:	881a      	ldrh	r2, [r3, #0]
 80170aa:	8bfb      	ldrh	r3, [r7, #30]
 80170ac:	1ad3      	subs	r3, r2, r3
 80170ae:	b29a      	uxth	r2, r3
 80170b0:	4b08      	ldr	r3, [pc, #32]	; (80170d4 <ip_reass_free_complete_datagram+0x140>)
 80170b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80170b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3720      	adds	r7, #32
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd80      	pop	{r7, pc}
 80170be:	bf00      	nop
 80170c0:	0801c9c8 	.word	0x0801c9c8
 80170c4:	0801ca04 	.word	0x0801ca04
 80170c8:	0801ca10 	.word	0x0801ca10
 80170cc:	0801ca38 	.word	0x0801ca38
 80170d0:	0801ca4c 	.word	0x0801ca4c
 80170d4:	2000bfbc 	.word	0x2000bfbc
 80170d8:	0801ca6c 	.word	0x0801ca6c

080170dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b08a      	sub	sp, #40	; 0x28
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
 80170e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80170e6:	2300      	movs	r3, #0
 80170e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80170ea:	2300      	movs	r3, #0
 80170ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80170ee:	2300      	movs	r3, #0
 80170f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80170f2:	2300      	movs	r3, #0
 80170f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80170f6:	2300      	movs	r3, #0
 80170f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80170fa:	4b28      	ldr	r3, [pc, #160]	; (801719c <ip_reass_remove_oldest_datagram+0xc0>)
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017100:	e030      	b.n	8017164 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017104:	695a      	ldr	r2, [r3, #20]
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	68db      	ldr	r3, [r3, #12]
 801710a:	429a      	cmp	r2, r3
 801710c:	d10c      	bne.n	8017128 <ip_reass_remove_oldest_datagram+0x4c>
 801710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017110:	699a      	ldr	r2, [r3, #24]
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	691b      	ldr	r3, [r3, #16]
 8017116:	429a      	cmp	r2, r3
 8017118:	d106      	bne.n	8017128 <ip_reass_remove_oldest_datagram+0x4c>
 801711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801711c:	899a      	ldrh	r2, [r3, #12]
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	889b      	ldrh	r3, [r3, #4]
 8017122:	b29b      	uxth	r3, r3
 8017124:	429a      	cmp	r2, r3
 8017126:	d014      	beq.n	8017152 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017128:	693b      	ldr	r3, [r7, #16]
 801712a:	3301      	adds	r3, #1
 801712c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801712e:	6a3b      	ldr	r3, [r7, #32]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d104      	bne.n	801713e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017136:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017138:	69fb      	ldr	r3, [r7, #28]
 801713a:	61bb      	str	r3, [r7, #24]
 801713c:	e009      	b.n	8017152 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017140:	7fda      	ldrb	r2, [r3, #31]
 8017142:	6a3b      	ldr	r3, [r7, #32]
 8017144:	7fdb      	ldrb	r3, [r3, #31]
 8017146:	429a      	cmp	r2, r3
 8017148:	d803      	bhi.n	8017152 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801714c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801714e:	69fb      	ldr	r3, [r7, #28]
 8017150:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d001      	beq.n	801715e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801715c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017166:	2b00      	cmp	r3, #0
 8017168:	d1cb      	bne.n	8017102 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801716a:	6a3b      	ldr	r3, [r7, #32]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d008      	beq.n	8017182 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017170:	69b9      	ldr	r1, [r7, #24]
 8017172:	6a38      	ldr	r0, [r7, #32]
 8017174:	f7ff ff0e 	bl	8016f94 <ip_reass_free_complete_datagram>
 8017178:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801717a:	697a      	ldr	r2, [r7, #20]
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	4413      	add	r3, r2
 8017180:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017182:	697a      	ldr	r2, [r7, #20]
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	429a      	cmp	r2, r3
 8017188:	da02      	bge.n	8017190 <ip_reass_remove_oldest_datagram+0xb4>
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	2b01      	cmp	r3, #1
 801718e:	dcac      	bgt.n	80170ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017190:	697b      	ldr	r3, [r7, #20]
}
 8017192:	4618      	mov	r0, r3
 8017194:	3728      	adds	r7, #40	; 0x28
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}
 801719a:	bf00      	nop
 801719c:	2000bfb8 	.word	0x2000bfb8

080171a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b084      	sub	sp, #16
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80171aa:	2004      	movs	r0, #4
 80171ac:	f7f4 fbf0 	bl	800b990 <memp_malloc>
 80171b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d110      	bne.n	80171da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80171b8:	6839      	ldr	r1, [r7, #0]
 80171ba:	6878      	ldr	r0, [r7, #4]
 80171bc:	f7ff ff8e 	bl	80170dc <ip_reass_remove_oldest_datagram>
 80171c0:	4602      	mov	r2, r0
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	4293      	cmp	r3, r2
 80171c6:	dc03      	bgt.n	80171d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80171c8:	2004      	movs	r0, #4
 80171ca:	f7f4 fbe1 	bl	800b990 <memp_malloc>
 80171ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d101      	bne.n	80171da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80171d6:	2300      	movs	r3, #0
 80171d8:	e016      	b.n	8017208 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80171da:	2220      	movs	r2, #32
 80171dc:	2100      	movs	r1, #0
 80171de:	68f8      	ldr	r0, [r7, #12]
 80171e0:	f001 fb4a 	bl	8018878 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	220f      	movs	r2, #15
 80171e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80171ea:	4b09      	ldr	r3, [pc, #36]	; (8017210 <ip_reass_enqueue_new_datagram+0x70>)
 80171ec:	681a      	ldr	r2, [r3, #0]
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80171f2:	4a07      	ldr	r2, [pc, #28]	; (8017210 <ip_reass_enqueue_new_datagram+0x70>)
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	3308      	adds	r3, #8
 80171fc:	2214      	movs	r2, #20
 80171fe:	6879      	ldr	r1, [r7, #4]
 8017200:	4618      	mov	r0, r3
 8017202:	f001 fb2b 	bl	801885c <memcpy>
  return ipr;
 8017206:	68fb      	ldr	r3, [r7, #12]
}
 8017208:	4618      	mov	r0, r3
 801720a:	3710      	adds	r7, #16
 801720c:	46bd      	mov	sp, r7
 801720e:	bd80      	pop	{r7, pc}
 8017210:	2000bfb8 	.word	0x2000bfb8

08017214 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b082      	sub	sp, #8
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
 801721c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801721e:	4b10      	ldr	r3, [pc, #64]	; (8017260 <ip_reass_dequeue_datagram+0x4c>)
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	687a      	ldr	r2, [r7, #4]
 8017224:	429a      	cmp	r2, r3
 8017226:	d104      	bne.n	8017232 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	4a0c      	ldr	r2, [pc, #48]	; (8017260 <ip_reass_dequeue_datagram+0x4c>)
 801722e:	6013      	str	r3, [r2, #0]
 8017230:	e00d      	b.n	801724e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d106      	bne.n	8017246 <ip_reass_dequeue_datagram+0x32>
 8017238:	4b0a      	ldr	r3, [pc, #40]	; (8017264 <ip_reass_dequeue_datagram+0x50>)
 801723a:	f240 1245 	movw	r2, #325	; 0x145
 801723e:	490a      	ldr	r1, [pc, #40]	; (8017268 <ip_reass_dequeue_datagram+0x54>)
 8017240:	480a      	ldr	r0, [pc, #40]	; (801726c <ip_reass_dequeue_datagram+0x58>)
 8017242:	f001 fbff 	bl	8018a44 <iprintf>
    prev->next = ipr->next;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801724e:	6879      	ldr	r1, [r7, #4]
 8017250:	2004      	movs	r0, #4
 8017252:	f7f4 fc13 	bl	800ba7c <memp_free>
}
 8017256:	bf00      	nop
 8017258:	3708      	adds	r7, #8
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}
 801725e:	bf00      	nop
 8017260:	2000bfb8 	.word	0x2000bfb8
 8017264:	0801c9c8 	.word	0x0801c9c8
 8017268:	0801ca90 	.word	0x0801ca90
 801726c:	0801ca10 	.word	0x0801ca10

08017270 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b08c      	sub	sp, #48	; 0x30
 8017274:	af00      	add	r7, sp, #0
 8017276:	60f8      	str	r0, [r7, #12]
 8017278:	60b9      	str	r1, [r7, #8]
 801727a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801727c:	2300      	movs	r3, #0
 801727e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017280:	2301      	movs	r3, #1
 8017282:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	685b      	ldr	r3, [r3, #4]
 8017288:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801728a:	69fb      	ldr	r3, [r7, #28]
 801728c:	885b      	ldrh	r3, [r3, #2]
 801728e:	b29b      	uxth	r3, r3
 8017290:	4618      	mov	r0, r3
 8017292:	f7f3 fdcd 	bl	800ae30 <lwip_htons>
 8017296:	4603      	mov	r3, r0
 8017298:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801729a:	69fb      	ldr	r3, [r7, #28]
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	f003 030f 	and.w	r3, r3, #15
 80172a2:	b2db      	uxtb	r3, r3
 80172a4:	009b      	lsls	r3, r3, #2
 80172a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80172a8:	7e7b      	ldrb	r3, [r7, #25]
 80172aa:	b29b      	uxth	r3, r3
 80172ac:	8b7a      	ldrh	r2, [r7, #26]
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d202      	bcs.n	80172b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172b2:	f04f 33ff 	mov.w	r3, #4294967295
 80172b6:	e135      	b.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80172b8:	7e7b      	ldrb	r3, [r7, #25]
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	8b7a      	ldrh	r2, [r7, #26]
 80172be:	1ad3      	subs	r3, r2, r3
 80172c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80172c2:	69fb      	ldr	r3, [r7, #28]
 80172c4:	88db      	ldrh	r3, [r3, #6]
 80172c6:	b29b      	uxth	r3, r3
 80172c8:	4618      	mov	r0, r3
 80172ca:	f7f3 fdb1 	bl	800ae30 <lwip_htons>
 80172ce:	4603      	mov	r3, r0
 80172d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	00db      	lsls	r3, r3, #3
 80172d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80172da:	68bb      	ldr	r3, [r7, #8]
 80172dc:	685b      	ldr	r3, [r3, #4]
 80172de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80172e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e2:	2200      	movs	r2, #0
 80172e4:	701a      	strb	r2, [r3, #0]
 80172e6:	2200      	movs	r2, #0
 80172e8:	705a      	strb	r2, [r3, #1]
 80172ea:	2200      	movs	r2, #0
 80172ec:	709a      	strb	r2, [r3, #2]
 80172ee:	2200      	movs	r2, #0
 80172f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80172f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f4:	8afa      	ldrh	r2, [r7, #22]
 80172f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80172f8:	8afa      	ldrh	r2, [r7, #22]
 80172fa:	8b7b      	ldrh	r3, [r7, #26]
 80172fc:	4413      	add	r3, r2
 80172fe:	b29a      	uxth	r2, r3
 8017300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017302:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017306:	88db      	ldrh	r3, [r3, #6]
 8017308:	b29b      	uxth	r3, r3
 801730a:	8afa      	ldrh	r2, [r7, #22]
 801730c:	429a      	cmp	r2, r3
 801730e:	d902      	bls.n	8017316 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017310:	f04f 33ff 	mov.w	r3, #4294967295
 8017314:	e106      	b.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	627b      	str	r3, [r7, #36]	; 0x24
 801731c:	e068      	b.n	80173f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017326:	889b      	ldrh	r3, [r3, #4]
 8017328:	b29a      	uxth	r2, r3
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	889b      	ldrh	r3, [r3, #4]
 801732e:	b29b      	uxth	r3, r3
 8017330:	429a      	cmp	r2, r3
 8017332:	d235      	bcs.n	80173a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017338:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733c:	2b00      	cmp	r3, #0
 801733e:	d020      	beq.n	8017382 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017342:	889b      	ldrh	r3, [r3, #4]
 8017344:	b29a      	uxth	r2, r3
 8017346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017348:	88db      	ldrh	r3, [r3, #6]
 801734a:	b29b      	uxth	r3, r3
 801734c:	429a      	cmp	r2, r3
 801734e:	d307      	bcc.n	8017360 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017352:	88db      	ldrh	r3, [r3, #6]
 8017354:	b29a      	uxth	r2, r3
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	889b      	ldrh	r3, [r3, #4]
 801735a:	b29b      	uxth	r3, r3
 801735c:	429a      	cmp	r2, r3
 801735e:	d902      	bls.n	8017366 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017360:	f04f 33ff 	mov.w	r3, #4294967295
 8017364:	e0de      	b.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017368:	68ba      	ldr	r2, [r7, #8]
 801736a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801736e:	88db      	ldrh	r3, [r3, #6]
 8017370:	b29a      	uxth	r2, r3
 8017372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017374:	889b      	ldrh	r3, [r3, #4]
 8017376:	b29b      	uxth	r3, r3
 8017378:	429a      	cmp	r2, r3
 801737a:	d03d      	beq.n	80173f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801737c:	2300      	movs	r3, #0
 801737e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017380:	e03a      	b.n	80173f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017384:	88db      	ldrh	r3, [r3, #6]
 8017386:	b29a      	uxth	r2, r3
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	889b      	ldrh	r3, [r3, #4]
 801738c:	b29b      	uxth	r3, r3
 801738e:	429a      	cmp	r2, r3
 8017390:	d902      	bls.n	8017398 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017392:	f04f 33ff 	mov.w	r3, #4294967295
 8017396:	e0c5      	b.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	68ba      	ldr	r2, [r7, #8]
 801739c:	605a      	str	r2, [r3, #4]
      break;
 801739e:	e02b      	b.n	80173f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80173a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a2:	889b      	ldrh	r3, [r3, #4]
 80173a4:	b29a      	uxth	r2, r3
 80173a6:	693b      	ldr	r3, [r7, #16]
 80173a8:	889b      	ldrh	r3, [r3, #4]
 80173aa:	b29b      	uxth	r3, r3
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d102      	bne.n	80173b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173b0:	f04f 33ff 	mov.w	r3, #4294967295
 80173b4:	e0b6      	b.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80173b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b8:	889b      	ldrh	r3, [r3, #4]
 80173ba:	b29a      	uxth	r2, r3
 80173bc:	693b      	ldr	r3, [r7, #16]
 80173be:	88db      	ldrh	r3, [r3, #6]
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d202      	bcs.n	80173cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173c6:	f04f 33ff 	mov.w	r3, #4294967295
 80173ca:	e0ab      	b.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80173cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d009      	beq.n	80173e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80173d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d4:	88db      	ldrh	r3, [r3, #6]
 80173d6:	b29a      	uxth	r2, r3
 80173d8:	693b      	ldr	r3, [r7, #16]
 80173da:	889b      	ldrh	r3, [r3, #4]
 80173dc:	b29b      	uxth	r3, r3
 80173de:	429a      	cmp	r2, r3
 80173e0:	d001      	beq.n	80173e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80173e2:	2300      	movs	r3, #0
 80173e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80173e6:	693b      	ldr	r3, [r7, #16]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80173ec:	693b      	ldr	r3, [r7, #16]
 80173ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80173f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d193      	bne.n	801731e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80173f6:	e000      	b.n	80173fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80173f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80173fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d12d      	bne.n	801745c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017402:	2b00      	cmp	r3, #0
 8017404:	d01c      	beq.n	8017440 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017408:	88db      	ldrh	r3, [r3, #6]
 801740a:	b29a      	uxth	r2, r3
 801740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740e:	889b      	ldrh	r3, [r3, #4]
 8017410:	b29b      	uxth	r3, r3
 8017412:	429a      	cmp	r2, r3
 8017414:	d906      	bls.n	8017424 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017416:	4b45      	ldr	r3, [pc, #276]	; (801752c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017418:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801741c:	4944      	ldr	r1, [pc, #272]	; (8017530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801741e:	4845      	ldr	r0, [pc, #276]	; (8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017420:	f001 fb10 	bl	8018a44 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017426:	68ba      	ldr	r2, [r7, #8]
 8017428:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742c:	88db      	ldrh	r3, [r3, #6]
 801742e:	b29a      	uxth	r2, r3
 8017430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017432:	889b      	ldrh	r3, [r3, #4]
 8017434:	b29b      	uxth	r3, r3
 8017436:	429a      	cmp	r2, r3
 8017438:	d010      	beq.n	801745c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801743a:	2300      	movs	r3, #0
 801743c:	623b      	str	r3, [r7, #32]
 801743e:	e00d      	b.n	801745c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	685b      	ldr	r3, [r3, #4]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d006      	beq.n	8017456 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017448:	4b38      	ldr	r3, [pc, #224]	; (801752c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801744a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801744e:	493a      	ldr	r1, [pc, #232]	; (8017538 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017450:	4838      	ldr	r0, [pc, #224]	; (8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017452:	f001 faf7 	bl	8018a44 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	68ba      	ldr	r2, [r7, #8]
 801745a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d105      	bne.n	801746e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	7f9b      	ldrb	r3, [r3, #30]
 8017466:	f003 0301 	and.w	r3, r3, #1
 801746a:	2b00      	cmp	r3, #0
 801746c:	d059      	beq.n	8017522 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801746e:	6a3b      	ldr	r3, [r7, #32]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d04f      	beq.n	8017514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	685b      	ldr	r3, [r3, #4]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d006      	beq.n	801748a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	685b      	ldr	r3, [r3, #4]
 8017480:	685b      	ldr	r3, [r3, #4]
 8017482:	889b      	ldrh	r3, [r3, #4]
 8017484:	b29b      	uxth	r3, r3
 8017486:	2b00      	cmp	r3, #0
 8017488:	d002      	beq.n	8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801748a:	2300      	movs	r3, #0
 801748c:	623b      	str	r3, [r7, #32]
 801748e:	e041      	b.n	8017514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017492:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801749a:	e012      	b.n	80174c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801749e:	685b      	ldr	r3, [r3, #4]
 80174a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80174a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a4:	88db      	ldrh	r3, [r3, #6]
 80174a6:	b29a      	uxth	r2, r3
 80174a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174aa:	889b      	ldrh	r3, [r3, #4]
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d002      	beq.n	80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80174b2:	2300      	movs	r3, #0
 80174b4:	623b      	str	r3, [r7, #32]
            break;
 80174b6:	e007      	b.n	80174c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80174b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80174bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80174c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d1e9      	bne.n	801749c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80174c8:	6a3b      	ldr	r3, [r7, #32]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d022      	beq.n	8017514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	685b      	ldr	r3, [r3, #4]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d106      	bne.n	80174e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80174d6:	4b15      	ldr	r3, [pc, #84]	; (801752c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80174d8:	f240 12df 	movw	r2, #479	; 0x1df
 80174dc:	4917      	ldr	r1, [pc, #92]	; (801753c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80174de:	4815      	ldr	r0, [pc, #84]	; (8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80174e0:	f001 fab0 	bl	8018a44 <iprintf>
          LWIP_ASSERT("sanity check",
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	685b      	ldr	r3, [r3, #4]
 80174e8:	685b      	ldr	r3, [r3, #4]
 80174ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174ec:	429a      	cmp	r2, r3
 80174ee:	d106      	bne.n	80174fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80174f0:	4b0e      	ldr	r3, [pc, #56]	; (801752c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80174f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80174f6:	4911      	ldr	r1, [pc, #68]	; (801753c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80174f8:	480e      	ldr	r0, [pc, #56]	; (8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80174fa:	f001 faa3 	bl	8018a44 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80174fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d006      	beq.n	8017514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017506:	4b09      	ldr	r3, [pc, #36]	; (801752c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017508:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801750c:	490c      	ldr	r1, [pc, #48]	; (8017540 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801750e:	4809      	ldr	r0, [pc, #36]	; (8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017510:	f001 fa98 	bl	8018a44 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017514:	6a3b      	ldr	r3, [r7, #32]
 8017516:	2b00      	cmp	r3, #0
 8017518:	bf14      	ite	ne
 801751a:	2301      	movne	r3, #1
 801751c:	2300      	moveq	r3, #0
 801751e:	b2db      	uxtb	r3, r3
 8017520:	e000      	b.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017522:	2300      	movs	r3, #0
}
 8017524:	4618      	mov	r0, r3
 8017526:	3730      	adds	r7, #48	; 0x30
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}
 801752c:	0801c9c8 	.word	0x0801c9c8
 8017530:	0801caac 	.word	0x0801caac
 8017534:	0801ca10 	.word	0x0801ca10
 8017538:	0801cacc 	.word	0x0801cacc
 801753c:	0801cb04 	.word	0x0801cb04
 8017540:	0801cb14 	.word	0x0801cb14

08017544 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b08e      	sub	sp, #56	; 0x38
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	685b      	ldr	r3, [r3, #4]
 8017550:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017554:	781b      	ldrb	r3, [r3, #0]
 8017556:	f003 030f 	and.w	r3, r3, #15
 801755a:	b2db      	uxtb	r3, r3
 801755c:	009b      	lsls	r3, r3, #2
 801755e:	b2db      	uxtb	r3, r3
 8017560:	2b14      	cmp	r3, #20
 8017562:	f040 8171 	bne.w	8017848 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017568:	88db      	ldrh	r3, [r3, #6]
 801756a:	b29b      	uxth	r3, r3
 801756c:	4618      	mov	r0, r3
 801756e:	f7f3 fc5f 	bl	800ae30 <lwip_htons>
 8017572:	4603      	mov	r3, r0
 8017574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017578:	b29b      	uxth	r3, r3
 801757a:	00db      	lsls	r3, r3, #3
 801757c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017580:	885b      	ldrh	r3, [r3, #2]
 8017582:	b29b      	uxth	r3, r3
 8017584:	4618      	mov	r0, r3
 8017586:	f7f3 fc53 	bl	800ae30 <lwip_htons>
 801758a:	4603      	mov	r3, r0
 801758c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	f003 030f 	and.w	r3, r3, #15
 8017596:	b2db      	uxtb	r3, r3
 8017598:	009b      	lsls	r3, r3, #2
 801759a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801759e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80175a2:	b29b      	uxth	r3, r3
 80175a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80175a6:	429a      	cmp	r2, r3
 80175a8:	f0c0 8150 	bcc.w	801784c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80175ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80175b0:	b29b      	uxth	r3, r3
 80175b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80175b4:	1ad3      	subs	r3, r2, r3
 80175b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80175b8:	6878      	ldr	r0, [r7, #4]
 80175ba:	f7f5 f92b 	bl	800c814 <pbuf_clen>
 80175be:	4603      	mov	r3, r0
 80175c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80175c2:	4b8c      	ldr	r3, [pc, #560]	; (80177f4 <ip4_reass+0x2b0>)
 80175c4:	881b      	ldrh	r3, [r3, #0]
 80175c6:	461a      	mov	r2, r3
 80175c8:	8c3b      	ldrh	r3, [r7, #32]
 80175ca:	4413      	add	r3, r2
 80175cc:	2b0a      	cmp	r3, #10
 80175ce:	dd10      	ble.n	80175f2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80175d0:	8c3b      	ldrh	r3, [r7, #32]
 80175d2:	4619      	mov	r1, r3
 80175d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175d6:	f7ff fd81 	bl	80170dc <ip_reass_remove_oldest_datagram>
 80175da:	4603      	mov	r3, r0
 80175dc:	2b00      	cmp	r3, #0
 80175de:	f000 8137 	beq.w	8017850 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80175e2:	4b84      	ldr	r3, [pc, #528]	; (80177f4 <ip4_reass+0x2b0>)
 80175e4:	881b      	ldrh	r3, [r3, #0]
 80175e6:	461a      	mov	r2, r3
 80175e8:	8c3b      	ldrh	r3, [r7, #32]
 80175ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80175ec:	2b0a      	cmp	r3, #10
 80175ee:	f300 812f 	bgt.w	8017850 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80175f2:	4b81      	ldr	r3, [pc, #516]	; (80177f8 <ip4_reass+0x2b4>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	633b      	str	r3, [r7, #48]	; 0x30
 80175f8:	e015      	b.n	8017626 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80175fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175fc:	695a      	ldr	r2, [r3, #20]
 80175fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017600:	68db      	ldr	r3, [r3, #12]
 8017602:	429a      	cmp	r2, r3
 8017604:	d10c      	bne.n	8017620 <ip4_reass+0xdc>
 8017606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017608:	699a      	ldr	r2, [r3, #24]
 801760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801760c:	691b      	ldr	r3, [r3, #16]
 801760e:	429a      	cmp	r2, r3
 8017610:	d106      	bne.n	8017620 <ip4_reass+0xdc>
 8017612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017614:	899a      	ldrh	r2, [r3, #12]
 8017616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017618:	889b      	ldrh	r3, [r3, #4]
 801761a:	b29b      	uxth	r3, r3
 801761c:	429a      	cmp	r2, r3
 801761e:	d006      	beq.n	801762e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	633b      	str	r3, [r7, #48]	; 0x30
 8017626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017628:	2b00      	cmp	r3, #0
 801762a:	d1e6      	bne.n	80175fa <ip4_reass+0xb6>
 801762c:	e000      	b.n	8017630 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801762e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017632:	2b00      	cmp	r3, #0
 8017634:	d109      	bne.n	801764a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017636:	8c3b      	ldrh	r3, [r7, #32]
 8017638:	4619      	mov	r1, r3
 801763a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801763c:	f7ff fdb0 	bl	80171a0 <ip_reass_enqueue_new_datagram>
 8017640:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017644:	2b00      	cmp	r3, #0
 8017646:	d11c      	bne.n	8017682 <ip4_reass+0x13e>
      goto nullreturn;
 8017648:	e105      	b.n	8017856 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801764c:	88db      	ldrh	r3, [r3, #6]
 801764e:	b29b      	uxth	r3, r3
 8017650:	4618      	mov	r0, r3
 8017652:	f7f3 fbed 	bl	800ae30 <lwip_htons>
 8017656:	4603      	mov	r3, r0
 8017658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801765c:	2b00      	cmp	r3, #0
 801765e:	d110      	bne.n	8017682 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017662:	89db      	ldrh	r3, [r3, #14]
 8017664:	4618      	mov	r0, r3
 8017666:	f7f3 fbe3 	bl	800ae30 <lwip_htons>
 801766a:	4603      	mov	r3, r0
 801766c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017670:	2b00      	cmp	r3, #0
 8017672:	d006      	beq.n	8017682 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017676:	3308      	adds	r3, #8
 8017678:	2214      	movs	r2, #20
 801767a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801767c:	4618      	mov	r0, r3
 801767e:	f001 f8ed 	bl	801885c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017684:	88db      	ldrh	r3, [r3, #6]
 8017686:	b29b      	uxth	r3, r3
 8017688:	f003 0320 	and.w	r3, r3, #32
 801768c:	2b00      	cmp	r3, #0
 801768e:	bf0c      	ite	eq
 8017690:	2301      	moveq	r3, #1
 8017692:	2300      	movne	r3, #0
 8017694:	b2db      	uxtb	r3, r3
 8017696:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017698:	69fb      	ldr	r3, [r7, #28]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d00e      	beq.n	80176bc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801769e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80176a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176a2:	4413      	add	r3, r2
 80176a4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80176a6:	8b7a      	ldrh	r2, [r7, #26]
 80176a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80176aa:	429a      	cmp	r2, r3
 80176ac:	f0c0 80a0 	bcc.w	80177f0 <ip4_reass+0x2ac>
 80176b0:	8b7b      	ldrh	r3, [r7, #26]
 80176b2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80176b6:	4293      	cmp	r3, r2
 80176b8:	f200 809a 	bhi.w	80177f0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80176bc:	69fa      	ldr	r2, [r7, #28]
 80176be:	6879      	ldr	r1, [r7, #4]
 80176c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176c2:	f7ff fdd5 	bl	8017270 <ip_reass_chain_frag_into_datagram_and_validate>
 80176c6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80176c8:	697b      	ldr	r3, [r7, #20]
 80176ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176ce:	f000 809b 	beq.w	8017808 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80176d2:	4b48      	ldr	r3, [pc, #288]	; (80177f4 <ip4_reass+0x2b0>)
 80176d4:	881a      	ldrh	r2, [r3, #0]
 80176d6:	8c3b      	ldrh	r3, [r7, #32]
 80176d8:	4413      	add	r3, r2
 80176da:	b29a      	uxth	r2, r3
 80176dc:	4b45      	ldr	r3, [pc, #276]	; (80177f4 <ip4_reass+0x2b0>)
 80176de:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80176e0:	69fb      	ldr	r3, [r7, #28]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d00d      	beq.n	8017702 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80176e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80176e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176ea:	4413      	add	r3, r2
 80176ec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80176ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f0:	8a7a      	ldrh	r2, [r7, #18]
 80176f2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80176f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f6:	7f9b      	ldrb	r3, [r3, #30]
 80176f8:	f043 0301 	orr.w	r3, r3, #1
 80176fc:	b2da      	uxtb	r2, r3
 80176fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017700:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017702:	697b      	ldr	r3, [r7, #20]
 8017704:	2b01      	cmp	r3, #1
 8017706:	d171      	bne.n	80177ec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770a:	8b9b      	ldrh	r3, [r3, #28]
 801770c:	3314      	adds	r3, #20
 801770e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017712:	685b      	ldr	r3, [r3, #4]
 8017714:	685b      	ldr	r3, [r3, #4]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	685b      	ldr	r3, [r3, #4]
 8017720:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017724:	3308      	adds	r3, #8
 8017726:	2214      	movs	r2, #20
 8017728:	4619      	mov	r1, r3
 801772a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801772c:	f001 f896 	bl	801885c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017730:	8a3b      	ldrh	r3, [r7, #16]
 8017732:	4618      	mov	r0, r3
 8017734:	f7f3 fb7c 	bl	800ae30 <lwip_htons>
 8017738:	4603      	mov	r3, r0
 801773a:	461a      	mov	r2, r3
 801773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801773e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017742:	2200      	movs	r2, #0
 8017744:	719a      	strb	r2, [r3, #6]
 8017746:	2200      	movs	r2, #0
 8017748:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801774c:	2200      	movs	r2, #0
 801774e:	729a      	strb	r2, [r3, #10]
 8017750:	2200      	movs	r2, #0
 8017752:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017756:	685b      	ldr	r3, [r3, #4]
 8017758:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801775a:	e00d      	b.n	8017778 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801775e:	685b      	ldr	r3, [r3, #4]
 8017760:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017762:	2114      	movs	r1, #20
 8017764:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017766:	f7f4 ff41 	bl	800c5ec <pbuf_remove_header>
      pbuf_cat(p, r);
 801776a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801776c:	6878      	ldr	r0, [r7, #4]
 801776e:	f7f5 f88f 	bl	800c890 <pbuf_cat>
      r = iprh->next_pbuf;
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801777a:	2b00      	cmp	r3, #0
 801777c:	d1ee      	bne.n	801775c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801777e:	4b1e      	ldr	r3, [pc, #120]	; (80177f8 <ip4_reass+0x2b4>)
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017784:	429a      	cmp	r2, r3
 8017786:	d102      	bne.n	801778e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017788:	2300      	movs	r3, #0
 801778a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801778c:	e010      	b.n	80177b0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801778e:	4b1a      	ldr	r3, [pc, #104]	; (80177f8 <ip4_reass+0x2b4>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017794:	e007      	b.n	80177a6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801779c:	429a      	cmp	r2, r3
 801779e:	d006      	beq.n	80177ae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80177a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80177a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d1f4      	bne.n	8017796 <ip4_reass+0x252>
 80177ac:	e000      	b.n	80177b0 <ip4_reass+0x26c>
          break;
 80177ae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80177b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80177b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177b4:	f7ff fd2e 	bl	8017214 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80177b8:	6878      	ldr	r0, [r7, #4]
 80177ba:	f7f5 f82b 	bl	800c814 <pbuf_clen>
 80177be:	4603      	mov	r3, r0
 80177c0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80177c2:	4b0c      	ldr	r3, [pc, #48]	; (80177f4 <ip4_reass+0x2b0>)
 80177c4:	881b      	ldrh	r3, [r3, #0]
 80177c6:	8c3a      	ldrh	r2, [r7, #32]
 80177c8:	429a      	cmp	r2, r3
 80177ca:	d906      	bls.n	80177da <ip4_reass+0x296>
 80177cc:	4b0b      	ldr	r3, [pc, #44]	; (80177fc <ip4_reass+0x2b8>)
 80177ce:	f240 229b 	movw	r2, #667	; 0x29b
 80177d2:	490b      	ldr	r1, [pc, #44]	; (8017800 <ip4_reass+0x2bc>)
 80177d4:	480b      	ldr	r0, [pc, #44]	; (8017804 <ip4_reass+0x2c0>)
 80177d6:	f001 f935 	bl	8018a44 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80177da:	4b06      	ldr	r3, [pc, #24]	; (80177f4 <ip4_reass+0x2b0>)
 80177dc:	881a      	ldrh	r2, [r3, #0]
 80177de:	8c3b      	ldrh	r3, [r7, #32]
 80177e0:	1ad3      	subs	r3, r2, r3
 80177e2:	b29a      	uxth	r2, r3
 80177e4:	4b03      	ldr	r3, [pc, #12]	; (80177f4 <ip4_reass+0x2b0>)
 80177e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	e038      	b.n	801785e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80177ec:	2300      	movs	r3, #0
 80177ee:	e036      	b.n	801785e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80177f0:	bf00      	nop
 80177f2:	e00a      	b.n	801780a <ip4_reass+0x2c6>
 80177f4:	2000bfbc 	.word	0x2000bfbc
 80177f8:	2000bfb8 	.word	0x2000bfb8
 80177fc:	0801c9c8 	.word	0x0801c9c8
 8017800:	0801cb38 	.word	0x0801cb38
 8017804:	0801ca10 	.word	0x0801ca10
    goto nullreturn_ipr;
 8017808:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801780c:	2b00      	cmp	r3, #0
 801780e:	d106      	bne.n	801781e <ip4_reass+0x2da>
 8017810:	4b15      	ldr	r3, [pc, #84]	; (8017868 <ip4_reass+0x324>)
 8017812:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017816:	4915      	ldr	r1, [pc, #84]	; (801786c <ip4_reass+0x328>)
 8017818:	4815      	ldr	r0, [pc, #84]	; (8017870 <ip4_reass+0x32c>)
 801781a:	f001 f913 	bl	8018a44 <iprintf>
  if (ipr->p == NULL) {
 801781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017820:	685b      	ldr	r3, [r3, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d116      	bne.n	8017854 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017826:	4b13      	ldr	r3, [pc, #76]	; (8017874 <ip4_reass+0x330>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801782c:	429a      	cmp	r2, r3
 801782e:	d006      	beq.n	801783e <ip4_reass+0x2fa>
 8017830:	4b0d      	ldr	r3, [pc, #52]	; (8017868 <ip4_reass+0x324>)
 8017832:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017836:	4910      	ldr	r1, [pc, #64]	; (8017878 <ip4_reass+0x334>)
 8017838:	480d      	ldr	r0, [pc, #52]	; (8017870 <ip4_reass+0x32c>)
 801783a:	f001 f903 	bl	8018a44 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801783e:	2100      	movs	r1, #0
 8017840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017842:	f7ff fce7 	bl	8017214 <ip_reass_dequeue_datagram>
 8017846:	e006      	b.n	8017856 <ip4_reass+0x312>
    goto nullreturn;
 8017848:	bf00      	nop
 801784a:	e004      	b.n	8017856 <ip4_reass+0x312>
    goto nullreturn;
 801784c:	bf00      	nop
 801784e:	e002      	b.n	8017856 <ip4_reass+0x312>
      goto nullreturn;
 8017850:	bf00      	nop
 8017852:	e000      	b.n	8017856 <ip4_reass+0x312>
  }

nullreturn:
 8017854:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	f7f4 ff4e 	bl	800c6f8 <pbuf_free>
  return NULL;
 801785c:	2300      	movs	r3, #0
}
 801785e:	4618      	mov	r0, r3
 8017860:	3738      	adds	r7, #56	; 0x38
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}
 8017866:	bf00      	nop
 8017868:	0801c9c8 	.word	0x0801c9c8
 801786c:	0801cb54 	.word	0x0801cb54
 8017870:	0801ca10 	.word	0x0801ca10
 8017874:	2000bfb8 	.word	0x2000bfb8
 8017878:	0801cb60 	.word	0x0801cb60

0801787c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017880:	2005      	movs	r0, #5
 8017882:	f7f4 f885 	bl	800b990 <memp_malloc>
 8017886:	4603      	mov	r3, r0
}
 8017888:	4618      	mov	r0, r3
 801788a:	bd80      	pop	{r7, pc}

0801788c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b082      	sub	sp, #8
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d106      	bne.n	80178a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801789a:	4b07      	ldr	r3, [pc, #28]	; (80178b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801789c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80178a0:	4906      	ldr	r1, [pc, #24]	; (80178bc <ip_frag_free_pbuf_custom_ref+0x30>)
 80178a2:	4807      	ldr	r0, [pc, #28]	; (80178c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80178a4:	f001 f8ce 	bl	8018a44 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80178a8:	6879      	ldr	r1, [r7, #4]
 80178aa:	2005      	movs	r0, #5
 80178ac:	f7f4 f8e6 	bl	800ba7c <memp_free>
}
 80178b0:	bf00      	nop
 80178b2:	3708      	adds	r7, #8
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd80      	pop	{r7, pc}
 80178b8:	0801c9c8 	.word	0x0801c9c8
 80178bc:	0801cb80 	.word	0x0801cb80
 80178c0:	0801ca10 	.word	0x0801ca10

080178c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b084      	sub	sp, #16
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d106      	bne.n	80178e4 <ipfrag_free_pbuf_custom+0x20>
 80178d6:	4b11      	ldr	r3, [pc, #68]	; (801791c <ipfrag_free_pbuf_custom+0x58>)
 80178d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80178dc:	4910      	ldr	r1, [pc, #64]	; (8017920 <ipfrag_free_pbuf_custom+0x5c>)
 80178de:	4811      	ldr	r0, [pc, #68]	; (8017924 <ipfrag_free_pbuf_custom+0x60>)
 80178e0:	f001 f8b0 	bl	8018a44 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80178e4:	68fa      	ldr	r2, [r7, #12]
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	429a      	cmp	r2, r3
 80178ea:	d006      	beq.n	80178fa <ipfrag_free_pbuf_custom+0x36>
 80178ec:	4b0b      	ldr	r3, [pc, #44]	; (801791c <ipfrag_free_pbuf_custom+0x58>)
 80178ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80178f2:	490d      	ldr	r1, [pc, #52]	; (8017928 <ipfrag_free_pbuf_custom+0x64>)
 80178f4:	480b      	ldr	r0, [pc, #44]	; (8017924 <ipfrag_free_pbuf_custom+0x60>)
 80178f6:	f001 f8a5 	bl	8018a44 <iprintf>
  if (pcr->original != NULL) {
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	695b      	ldr	r3, [r3, #20]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d004      	beq.n	801790c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	695b      	ldr	r3, [r3, #20]
 8017906:	4618      	mov	r0, r3
 8017908:	f7f4 fef6 	bl	800c6f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801790c:	68f8      	ldr	r0, [r7, #12]
 801790e:	f7ff ffbd 	bl	801788c <ip_frag_free_pbuf_custom_ref>
}
 8017912:	bf00      	nop
 8017914:	3710      	adds	r7, #16
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}
 801791a:	bf00      	nop
 801791c:	0801c9c8 	.word	0x0801c9c8
 8017920:	0801cb8c 	.word	0x0801cb8c
 8017924:	0801ca10 	.word	0x0801ca10
 8017928:	0801cb98 	.word	0x0801cb98

0801792c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b094      	sub	sp, #80	; 0x50
 8017930:	af02      	add	r7, sp, #8
 8017932:	60f8      	str	r0, [r7, #12]
 8017934:	60b9      	str	r1, [r7, #8]
 8017936:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017938:	2300      	movs	r3, #0
 801793a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801793e:	68bb      	ldr	r3, [r7, #8]
 8017940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017942:	3b14      	subs	r3, #20
 8017944:	2b00      	cmp	r3, #0
 8017946:	da00      	bge.n	801794a <ip4_frag+0x1e>
 8017948:	3307      	adds	r3, #7
 801794a:	10db      	asrs	r3, r3, #3
 801794c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801794e:	2314      	movs	r3, #20
 8017950:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	685b      	ldr	r3, [r3, #4]
 8017956:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801795a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801795e:	781b      	ldrb	r3, [r3, #0]
 8017960:	f003 030f 	and.w	r3, r3, #15
 8017964:	b2db      	uxtb	r3, r3
 8017966:	009b      	lsls	r3, r3, #2
 8017968:	b2db      	uxtb	r3, r3
 801796a:	2b14      	cmp	r3, #20
 801796c:	d002      	beq.n	8017974 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801796e:	f06f 0305 	mvn.w	r3, #5
 8017972:	e110      	b.n	8017b96 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	895b      	ldrh	r3, [r3, #10]
 8017978:	2b13      	cmp	r3, #19
 801797a:	d809      	bhi.n	8017990 <ip4_frag+0x64>
 801797c:	4b88      	ldr	r3, [pc, #544]	; (8017ba0 <ip4_frag+0x274>)
 801797e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017982:	4988      	ldr	r1, [pc, #544]	; (8017ba4 <ip4_frag+0x278>)
 8017984:	4888      	ldr	r0, [pc, #544]	; (8017ba8 <ip4_frag+0x27c>)
 8017986:	f001 f85d 	bl	8018a44 <iprintf>
 801798a:	f06f 0305 	mvn.w	r3, #5
 801798e:	e102      	b.n	8017b96 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017992:	88db      	ldrh	r3, [r3, #6]
 8017994:	b29b      	uxth	r3, r3
 8017996:	4618      	mov	r0, r3
 8017998:	f7f3 fa4a 	bl	800ae30 <lwip_htons>
 801799c:	4603      	mov	r3, r0
 801799e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80179a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80179a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80179aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80179ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80179b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	891b      	ldrh	r3, [r3, #8]
 80179b6:	3b14      	subs	r3, #20
 80179b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80179bc:	e0e1      	b.n	8017b82 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80179be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80179c0:	00db      	lsls	r3, r3, #3
 80179c2:	b29b      	uxth	r3, r3
 80179c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80179c8:	4293      	cmp	r3, r2
 80179ca:	bf28      	it	cs
 80179cc:	4613      	movcs	r3, r2
 80179ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80179d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80179d4:	2114      	movs	r1, #20
 80179d6:	200e      	movs	r0, #14
 80179d8:	f7f4 fbaa 	bl	800c130 <pbuf_alloc>
 80179dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80179de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	f000 80d5 	beq.w	8017b90 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80179e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e8:	895b      	ldrh	r3, [r3, #10]
 80179ea:	2b13      	cmp	r3, #19
 80179ec:	d806      	bhi.n	80179fc <ip4_frag+0xd0>
 80179ee:	4b6c      	ldr	r3, [pc, #432]	; (8017ba0 <ip4_frag+0x274>)
 80179f0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80179f4:	496d      	ldr	r1, [pc, #436]	; (8017bac <ip4_frag+0x280>)
 80179f6:	486c      	ldr	r0, [pc, #432]	; (8017ba8 <ip4_frag+0x27c>)
 80179f8:	f001 f824 	bl	8018a44 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80179fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179fe:	685b      	ldr	r3, [r3, #4]
 8017a00:	2214      	movs	r2, #20
 8017a02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017a04:	4618      	mov	r0, r3
 8017a06:	f000 ff29 	bl	801885c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a0c:	685b      	ldr	r3, [r3, #4]
 8017a0e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017a10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017a12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017a16:	e064      	b.n	8017ae2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	895a      	ldrh	r2, [r3, #10]
 8017a1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a1e:	1ad3      	subs	r3, r2, r3
 8017a20:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	895b      	ldrh	r3, [r3, #10]
 8017a26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d906      	bls.n	8017a3a <ip4_frag+0x10e>
 8017a2c:	4b5c      	ldr	r3, [pc, #368]	; (8017ba0 <ip4_frag+0x274>)
 8017a2e:	f240 322d 	movw	r2, #813	; 0x32d
 8017a32:	495f      	ldr	r1, [pc, #380]	; (8017bb0 <ip4_frag+0x284>)
 8017a34:	485c      	ldr	r0, [pc, #368]	; (8017ba8 <ip4_frag+0x27c>)
 8017a36:	f001 f805 	bl	8018a44 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017a3a:	8bfa      	ldrh	r2, [r7, #30]
 8017a3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017a40:	4293      	cmp	r3, r2
 8017a42:	bf28      	it	cs
 8017a44:	4613      	movcs	r3, r2
 8017a46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017a4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d105      	bne.n	8017a5e <ip4_frag+0x132>
        poff = 0;
 8017a52:	2300      	movs	r3, #0
 8017a54:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	60fb      	str	r3, [r7, #12]
        continue;
 8017a5c:	e041      	b.n	8017ae2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017a5e:	f7ff ff0d 	bl	801787c <ip_frag_alloc_pbuf_custom_ref>
 8017a62:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017a64:	69bb      	ldr	r3, [r7, #24]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d103      	bne.n	8017a72 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a6c:	f7f4 fe44 	bl	800c6f8 <pbuf_free>
        goto memerr;
 8017a70:	e08f      	b.n	8017b92 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017a72:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017a78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a7a:	4413      	add	r3, r2
 8017a7c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017a80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017a84:	9201      	str	r2, [sp, #4]
 8017a86:	9300      	str	r3, [sp, #0]
 8017a88:	4603      	mov	r3, r0
 8017a8a:	2241      	movs	r2, #65	; 0x41
 8017a8c:	2000      	movs	r0, #0
 8017a8e:	f7f4 fc79 	bl	800c384 <pbuf_alloced_custom>
 8017a92:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d106      	bne.n	8017aa8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017a9a:	69b8      	ldr	r0, [r7, #24]
 8017a9c:	f7ff fef6 	bl	801788c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017aa2:	f7f4 fe29 	bl	800c6f8 <pbuf_free>
        goto memerr;
 8017aa6:	e074      	b.n	8017b92 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017aa8:	68f8      	ldr	r0, [r7, #12]
 8017aaa:	f7f4 fec9 	bl	800c840 <pbuf_ref>
      pcr->original = p;
 8017aae:	69bb      	ldr	r3, [r7, #24]
 8017ab0:	68fa      	ldr	r2, [r7, #12]
 8017ab2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017ab4:	69bb      	ldr	r3, [r7, #24]
 8017ab6:	4a3f      	ldr	r2, [pc, #252]	; (8017bb4 <ip4_frag+0x288>)
 8017ab8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017aba:	6979      	ldr	r1, [r7, #20]
 8017abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017abe:	f7f4 fee7 	bl	800c890 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017ac2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017ac6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017aca:	1ad3      	subs	r3, r2, r3
 8017acc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017ad0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d004      	beq.n	8017ae2 <ip4_frag+0x1b6>
        poff = 0;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017ae2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d196      	bne.n	8017a18 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017aea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017aec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017af0:	4413      	add	r3, r2
 8017af2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017af8:	f1a3 0213 	sub.w	r2, r3, #19
 8017afc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b00:	429a      	cmp	r2, r3
 8017b02:	bfcc      	ite	gt
 8017b04:	2301      	movgt	r3, #1
 8017b06:	2300      	movle	r3, #0
 8017b08:	b2db      	uxtb	r3, r3
 8017b0a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017b0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017b16:	6a3b      	ldr	r3, [r7, #32]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d002      	beq.n	8017b22 <ip4_frag+0x1f6>
 8017b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d003      	beq.n	8017b2a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017b22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017b28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017b2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7f3 f97f 	bl	800ae30 <lwip_htons>
 8017b32:	4603      	mov	r3, r0
 8017b34:	461a      	mov	r2, r3
 8017b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b38:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017b3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017b3c:	3314      	adds	r3, #20
 8017b3e:	b29b      	uxth	r3, r3
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7f3 f975 	bl	800ae30 <lwip_htons>
 8017b46:	4603      	mov	r3, r0
 8017b48:	461a      	mov	r2, r3
 8017b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b4c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b50:	2200      	movs	r2, #0
 8017b52:	729a      	strb	r2, [r3, #10]
 8017b54:	2200      	movs	r2, #0
 8017b56:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	695b      	ldr	r3, [r3, #20]
 8017b5c:	687a      	ldr	r2, [r7, #4]
 8017b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b60:	68b8      	ldr	r0, [r7, #8]
 8017b62:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b66:	f7f4 fdc7 	bl	800c6f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017b6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017b70:	1ad3      	subs	r3, r2, r3
 8017b72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017b76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017b7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b7c:	4413      	add	r3, r2
 8017b7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017b82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	f47f af19 	bne.w	80179be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	e002      	b.n	8017b96 <ip4_frag+0x26a>
      goto memerr;
 8017b90:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017b96:	4618      	mov	r0, r3
 8017b98:	3748      	adds	r7, #72	; 0x48
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}
 8017b9e:	bf00      	nop
 8017ba0:	0801c9c8 	.word	0x0801c9c8
 8017ba4:	0801cba4 	.word	0x0801cba4
 8017ba8:	0801ca10 	.word	0x0801ca10
 8017bac:	0801cbc0 	.word	0x0801cbc0
 8017bb0:	0801cbe0 	.word	0x0801cbe0
 8017bb4:	080178c5 	.word	0x080178c5

08017bb8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b086      	sub	sp, #24
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017bc2:	230e      	movs	r3, #14
 8017bc4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	895b      	ldrh	r3, [r3, #10]
 8017bca:	2b0e      	cmp	r3, #14
 8017bcc:	d96e      	bls.n	8017cac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	7bdb      	ldrb	r3, [r3, #15]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d106      	bne.n	8017be4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017bdc:	3301      	adds	r3, #1
 8017bde:	b2da      	uxtb	r2, r3
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	685b      	ldr	r3, [r3, #4]
 8017be8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017bea:	693b      	ldr	r3, [r7, #16]
 8017bec:	7b1a      	ldrb	r2, [r3, #12]
 8017bee:	7b5b      	ldrb	r3, [r3, #13]
 8017bf0:	021b      	lsls	r3, r3, #8
 8017bf2:	4313      	orrs	r3, r2
 8017bf4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017bf6:	693b      	ldr	r3, [r7, #16]
 8017bf8:	781b      	ldrb	r3, [r3, #0]
 8017bfa:	f003 0301 	and.w	r3, r3, #1
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d023      	beq.n	8017c4a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017c02:	693b      	ldr	r3, [r7, #16]
 8017c04:	781b      	ldrb	r3, [r3, #0]
 8017c06:	2b01      	cmp	r3, #1
 8017c08:	d10f      	bne.n	8017c2a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	785b      	ldrb	r3, [r3, #1]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d11b      	bne.n	8017c4a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017c12:	693b      	ldr	r3, [r7, #16]
 8017c14:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017c16:	2b5e      	cmp	r3, #94	; 0x5e
 8017c18:	d117      	bne.n	8017c4a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	7b5b      	ldrb	r3, [r3, #13]
 8017c1e:	f043 0310 	orr.w	r3, r3, #16
 8017c22:	b2da      	uxtb	r2, r3
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	735a      	strb	r2, [r3, #13]
 8017c28:	e00f      	b.n	8017c4a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017c2a:	693b      	ldr	r3, [r7, #16]
 8017c2c:	2206      	movs	r2, #6
 8017c2e:	4928      	ldr	r1, [pc, #160]	; (8017cd0 <ethernet_input+0x118>)
 8017c30:	4618      	mov	r0, r3
 8017c32:	f000 fe03 	bl	801883c <memcmp>
 8017c36:	4603      	mov	r3, r0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d106      	bne.n	8017c4a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	7b5b      	ldrb	r3, [r3, #13]
 8017c40:	f043 0308 	orr.w	r3, r3, #8
 8017c44:	b2da      	uxtb	r2, r3
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017c4a:	89fb      	ldrh	r3, [r7, #14]
 8017c4c:	2b08      	cmp	r3, #8
 8017c4e:	d003      	beq.n	8017c58 <ethernet_input+0xa0>
 8017c50:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017c54:	d014      	beq.n	8017c80 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017c56:	e032      	b.n	8017cbe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017c5e:	f003 0308 	and.w	r3, r3, #8
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d024      	beq.n	8017cb0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017c66:	8afb      	ldrh	r3, [r7, #22]
 8017c68:	4619      	mov	r1, r3
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f7f4 fcbe 	bl	800c5ec <pbuf_remove_header>
 8017c70:	4603      	mov	r3, r0
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d11e      	bne.n	8017cb4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017c76:	6839      	ldr	r1, [r7, #0]
 8017c78:	6878      	ldr	r0, [r7, #4]
 8017c7a:	f7fe ff05 	bl	8016a88 <ip4_input>
      break;
 8017c7e:	e013      	b.n	8017ca8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017c86:	f003 0308 	and.w	r3, r3, #8
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d014      	beq.n	8017cb8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017c8e:	8afb      	ldrh	r3, [r7, #22]
 8017c90:	4619      	mov	r1, r3
 8017c92:	6878      	ldr	r0, [r7, #4]
 8017c94:	f7f4 fcaa 	bl	800c5ec <pbuf_remove_header>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d10e      	bne.n	8017cbc <ethernet_input+0x104>
        etharp_input(p, netif);
 8017c9e:	6839      	ldr	r1, [r7, #0]
 8017ca0:	6878      	ldr	r0, [r7, #4]
 8017ca2:	f7fe f87d 	bl	8015da0 <etharp_input>
      break;
 8017ca6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017ca8:	2300      	movs	r3, #0
 8017caa:	e00c      	b.n	8017cc6 <ethernet_input+0x10e>
    goto free_and_return;
 8017cac:	bf00      	nop
 8017cae:	e006      	b.n	8017cbe <ethernet_input+0x106>
        goto free_and_return;
 8017cb0:	bf00      	nop
 8017cb2:	e004      	b.n	8017cbe <ethernet_input+0x106>
        goto free_and_return;
 8017cb4:	bf00      	nop
 8017cb6:	e002      	b.n	8017cbe <ethernet_input+0x106>
        goto free_and_return;
 8017cb8:	bf00      	nop
 8017cba:	e000      	b.n	8017cbe <ethernet_input+0x106>
        goto free_and_return;
 8017cbc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017cbe:	6878      	ldr	r0, [r7, #4]
 8017cc0:	f7f4 fd1a 	bl	800c6f8 <pbuf_free>
  return ERR_OK;
 8017cc4:	2300      	movs	r3, #0
}
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	3718      	adds	r7, #24
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bd80      	pop	{r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	0801cddc 	.word	0x0801cddc

08017cd4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b086      	sub	sp, #24
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	60f8      	str	r0, [r7, #12]
 8017cdc:	60b9      	str	r1, [r7, #8]
 8017cde:	607a      	str	r2, [r7, #4]
 8017ce0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017ce2:	8c3b      	ldrh	r3, [r7, #32]
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7f3 f8a3 	bl	800ae30 <lwip_htons>
 8017cea:	4603      	mov	r3, r0
 8017cec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017cee:	210e      	movs	r1, #14
 8017cf0:	68b8      	ldr	r0, [r7, #8]
 8017cf2:	f7f4 fc6b 	bl	800c5cc <pbuf_add_header>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d125      	bne.n	8017d48 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017cfc:	68bb      	ldr	r3, [r7, #8]
 8017cfe:	685b      	ldr	r3, [r3, #4]
 8017d00:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017d02:	693b      	ldr	r3, [r7, #16]
 8017d04:	8afa      	ldrh	r2, [r7, #22]
 8017d06:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017d08:	693b      	ldr	r3, [r7, #16]
 8017d0a:	2206      	movs	r2, #6
 8017d0c:	6839      	ldr	r1, [r7, #0]
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f000 fda4 	bl	801885c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017d14:	693b      	ldr	r3, [r7, #16]
 8017d16:	3306      	adds	r3, #6
 8017d18:	2206      	movs	r2, #6
 8017d1a:	6879      	ldr	r1, [r7, #4]
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f000 fd9d 	bl	801885c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d28:	2b06      	cmp	r3, #6
 8017d2a:	d006      	beq.n	8017d3a <ethernet_output+0x66>
 8017d2c:	4b0a      	ldr	r3, [pc, #40]	; (8017d58 <ethernet_output+0x84>)
 8017d2e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017d32:	490a      	ldr	r1, [pc, #40]	; (8017d5c <ethernet_output+0x88>)
 8017d34:	480a      	ldr	r0, [pc, #40]	; (8017d60 <ethernet_output+0x8c>)
 8017d36:	f000 fe85 	bl	8018a44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	699b      	ldr	r3, [r3, #24]
 8017d3e:	68b9      	ldr	r1, [r7, #8]
 8017d40:	68f8      	ldr	r0, [r7, #12]
 8017d42:	4798      	blx	r3
 8017d44:	4603      	mov	r3, r0
 8017d46:	e002      	b.n	8017d4e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017d48:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017d4a:	f06f 0301 	mvn.w	r3, #1
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	3718      	adds	r7, #24
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop
 8017d58:	0801cbf0 	.word	0x0801cbf0
 8017d5c:	0801cc28 	.word	0x0801cc28
 8017d60:	0801cc5c 	.word	0x0801cc5c

08017d64 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b086      	sub	sp, #24
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
 8017d6c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	60bb      	str	r3, [r7, #8]
 8017d72:	2304      	movs	r3, #4
 8017d74:	60fb      	str	r3, [r7, #12]
 8017d76:	2300      	movs	r3, #0
 8017d78:	613b      	str	r3, [r7, #16]
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017d7e:	f107 0308 	add.w	r3, r7, #8
 8017d82:	2100      	movs	r1, #0
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7ee ff6b 	bl	8006c60 <osMessageCreate>
 8017d8a:	4602      	mov	r2, r0
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d102      	bne.n	8017d9e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017d98:	f04f 33ff 	mov.w	r3, #4294967295
 8017d9c:	e000      	b.n	8017da0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017d9e:	2300      	movs	r3, #0
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3718      	adds	r7, #24
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}

08017da8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b084      	sub	sp, #16
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
 8017db0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	6839      	ldr	r1, [r7, #0]
 8017db8:	2200      	movs	r2, #0
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f7ee ff78 	bl	8006cb0 <osMessagePut>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d102      	bne.n	8017dcc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	73fb      	strb	r3, [r7, #15]
 8017dca:	e001      	b.n	8017dd0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017dcc:	23ff      	movs	r3, #255	; 0xff
 8017dce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3710      	adds	r7, #16
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}

08017ddc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b08c      	sub	sp, #48	; 0x30
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	61f8      	str	r0, [r7, #28]
 8017de4:	61b9      	str	r1, [r7, #24]
 8017de6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017de8:	f7ee fdaa 	bl	8006940 <osKernelSysTick>
 8017dec:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017dee:	697b      	ldr	r3, [r7, #20]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d017      	beq.n	8017e24 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017df4:	69fb      	ldr	r3, [r7, #28]
 8017df6:	6819      	ldr	r1, [r3, #0]
 8017df8:	f107 0320 	add.w	r3, r7, #32
 8017dfc:	697a      	ldr	r2, [r7, #20]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f7ee ff96 	bl	8006d30 <osMessageGet>

    if(event.status == osEventMessage)
 8017e04:	6a3b      	ldr	r3, [r7, #32]
 8017e06:	2b10      	cmp	r3, #16
 8017e08:	d109      	bne.n	8017e1e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0c:	461a      	mov	r2, r3
 8017e0e:	69bb      	ldr	r3, [r7, #24]
 8017e10:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017e12:	f7ee fd95 	bl	8006940 <osKernelSysTick>
 8017e16:	4602      	mov	r2, r0
 8017e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e1a:	1ad3      	subs	r3, r2, r3
 8017e1c:	e019      	b.n	8017e52 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e22:	e016      	b.n	8017e52 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	6819      	ldr	r1, [r3, #0]
 8017e28:	463b      	mov	r3, r7
 8017e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7ee ff7e 	bl	8006d30 <osMessageGet>
 8017e34:	f107 0320 	add.w	r3, r7, #32
 8017e38:	463a      	mov	r2, r7
 8017e3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8017e3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e42:	461a      	mov	r2, r3
 8017e44:	69bb      	ldr	r3, [r7, #24]
 8017e46:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017e48:	f7ee fd7a 	bl	8006940 <osKernelSysTick>
 8017e4c:	4602      	mov	r2, r0
 8017e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e50:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	3730      	adds	r7, #48	; 0x30
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}

08017e5a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017e5a:	b480      	push	{r7}
 8017e5c:	b083      	sub	sp, #12
 8017e5e:	af00      	add	r7, sp, #0
 8017e60:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d101      	bne.n	8017e6e <sys_mbox_valid+0x14>
    return 0;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	e000      	b.n	8017e70 <sys_mbox_valid+0x16>
  else
    return 1;
 8017e6e:	2301      	movs	r3, #1
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	370c      	adds	r7, #12
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bc80      	pop	{r7}
 8017e78:	4770      	bx	lr
	...

08017e7c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017e80:	4803      	ldr	r0, [pc, #12]	; (8017e90 <sys_init+0x14>)
 8017e82:	f7ee fdcd 	bl	8006a20 <osMutexCreate>
 8017e86:	4603      	mov	r3, r0
 8017e88:	4a02      	ldr	r2, [pc, #8]	; (8017e94 <sys_init+0x18>)
 8017e8a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017e8c:	bf00      	nop
 8017e8e:	bd80      	pop	{r7, pc}
 8017e90:	0801cdec 	.word	0x0801cdec
 8017e94:	2000bfc0 	.word	0x2000bfc0

08017e98 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b084      	sub	sp, #16
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	60bb      	str	r3, [r7, #8]
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017ea8:	f107 0308 	add.w	r3, r7, #8
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7ee fdb7 	bl	8006a20 <osMutexCreate>
 8017eb2:	4602      	mov	r2, r0
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d102      	bne.n	8017ec6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ec4:	e000      	b.n	8017ec8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017ec6:	2300      	movs	r3, #0
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3710      	adds	r7, #16
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}

08017ed0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b082      	sub	sp, #8
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	f04f 31ff 	mov.w	r1, #4294967295
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f7ee fdb5 	bl	8006a50 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017ee6:	bf00      	nop
 8017ee8:	3708      	adds	r7, #8
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}

08017eee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017eee:	b580      	push	{r7, lr}
 8017ef0:	b082      	sub	sp, #8
 8017ef2:	af00      	add	r7, sp, #0
 8017ef4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	4618      	mov	r0, r3
 8017efc:	f7ee fdf6 	bl	8006aec <osMutexRelease>
}
 8017f00:	bf00      	nop
 8017f02:	3708      	adds	r7, #8
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b08c      	sub	sp, #48	; 0x30
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	60b9      	str	r1, [r7, #8]
 8017f12:	607a      	str	r2, [r7, #4]
 8017f14:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017f16:	f107 0314 	add.w	r3, r7, #20
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	601a      	str	r2, [r3, #0]
 8017f1e:	605a      	str	r2, [r3, #4]
 8017f20:	609a      	str	r2, [r3, #8]
 8017f22:	60da      	str	r2, [r3, #12]
 8017f24:	611a      	str	r2, [r3, #16]
 8017f26:	615a      	str	r2, [r3, #20]
 8017f28:	619a      	str	r2, [r3, #24]
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	617b      	str	r3, [r7, #20]
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	61bb      	str	r3, [r7, #24]
 8017f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f34:	b21b      	sxth	r3, r3
 8017f36:	83bb      	strh	r3, [r7, #28]
 8017f38:	683b      	ldr	r3, [r7, #0]
 8017f3a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017f3c:	f107 0314 	add.w	r3, r7, #20
 8017f40:	6879      	ldr	r1, [r7, #4]
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7ee fd0c 	bl	8006960 <osThreadCreate>
 8017f48:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3730      	adds	r7, #48	; 0x30
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
	...

08017f54 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017f58:	4b04      	ldr	r3, [pc, #16]	; (8017f6c <sys_arch_protect+0x18>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8017f60:	4618      	mov	r0, r3
 8017f62:	f7ee fd75 	bl	8006a50 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017f66:	2301      	movs	r3, #1
}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	bd80      	pop	{r7, pc}
 8017f6c:	2000bfc0 	.word	0x2000bfc0

08017f70 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b082      	sub	sp, #8
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017f78:	4b04      	ldr	r3, [pc, #16]	; (8017f8c <sys_arch_unprotect+0x1c>)
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f7ee fdb5 	bl	8006aec <osMutexRelease>
}
 8017f82:	bf00      	nop
 8017f84:	3708      	adds	r7, #8
 8017f86:	46bd      	mov	sp, r7
 8017f88:	bd80      	pop	{r7, pc}
 8017f8a:	bf00      	nop
 8017f8c:	2000bfc0 	.word	0x2000bfc0

08017f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b082      	sub	sp, #8
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	4610      	mov	r0, r2
 8017fa8:	f7ed fb36 	bl	8005618 <USBD_LL_SetupStage>
}
 8017fac:	bf00      	nop
 8017fae:	3708      	adds	r7, #8
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}

08017fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b082      	sub	sp, #8
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
 8017fbc:	460b      	mov	r3, r1
 8017fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017fc6:	78fa      	ldrb	r2, [r7, #3]
 8017fc8:	6879      	ldr	r1, [r7, #4]
 8017fca:	4613      	mov	r3, r2
 8017fcc:	00db      	lsls	r3, r3, #3
 8017fce:	4413      	add	r3, r2
 8017fd0:	009b      	lsls	r3, r3, #2
 8017fd2:	440b      	add	r3, r1
 8017fd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017fd8:	681a      	ldr	r2, [r3, #0]
 8017fda:	78fb      	ldrb	r3, [r7, #3]
 8017fdc:	4619      	mov	r1, r3
 8017fde:	f7ed fb70 	bl	80056c2 <USBD_LL_DataOutStage>
}
 8017fe2:	bf00      	nop
 8017fe4:	3708      	adds	r7, #8
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	bd80      	pop	{r7, pc}

08017fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fea:	b580      	push	{r7, lr}
 8017fec:	b082      	sub	sp, #8
 8017fee:	af00      	add	r7, sp, #0
 8017ff0:	6078      	str	r0, [r7, #4]
 8017ff2:	460b      	mov	r3, r1
 8017ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017ffc:	78fa      	ldrb	r2, [r7, #3]
 8017ffe:	6879      	ldr	r1, [r7, #4]
 8018000:	4613      	mov	r3, r2
 8018002:	00db      	lsls	r3, r3, #3
 8018004:	4413      	add	r3, r2
 8018006:	009b      	lsls	r3, r3, #2
 8018008:	440b      	add	r3, r1
 801800a:	334c      	adds	r3, #76	; 0x4c
 801800c:	681a      	ldr	r2, [r3, #0]
 801800e:	78fb      	ldrb	r3, [r7, #3]
 8018010:	4619      	mov	r1, r3
 8018012:	f7ed fc09 	bl	8005828 <USBD_LL_DataInStage>
}
 8018016:	bf00      	nop
 8018018:	3708      	adds	r7, #8
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}

0801801e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801801e:	b580      	push	{r7, lr}
 8018020:	b082      	sub	sp, #8
 8018022:	af00      	add	r7, sp, #0
 8018024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801802c:	4618      	mov	r0, r3
 801802e:	f7ed fd3a 	bl	8005aa6 <USBD_LL_SOF>
}
 8018032:	bf00      	nop
 8018034:	3708      	adds	r7, #8
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}

0801803a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801803a:	b580      	push	{r7, lr}
 801803c:	b084      	sub	sp, #16
 801803e:	af00      	add	r7, sp, #0
 8018040:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018042:	2301      	movs	r3, #1
 8018044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	68db      	ldr	r3, [r3, #12]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d102      	bne.n	8018054 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801804e:	2300      	movs	r3, #0
 8018050:	73fb      	strb	r3, [r7, #15]
 8018052:	e008      	b.n	8018066 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	68db      	ldr	r3, [r3, #12]
 8018058:	2b02      	cmp	r3, #2
 801805a:	d102      	bne.n	8018062 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801805c:	2301      	movs	r3, #1
 801805e:	73fb      	strb	r3, [r7, #15]
 8018060:	e001      	b.n	8018066 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018062:	f7e8 fbd7 	bl	8000814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801806c:	7bfa      	ldrb	r2, [r7, #15]
 801806e:	4611      	mov	r1, r2
 8018070:	4618      	mov	r0, r3
 8018072:	f7ed fcdd 	bl	8005a30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801807c:	4618      	mov	r0, r3
 801807e:	f7ed fc85 	bl	800598c <USBD_LL_Reset>
}
 8018082:	bf00      	nop
 8018084:	3710      	adds	r7, #16
 8018086:	46bd      	mov	sp, r7
 8018088:	bd80      	pop	{r7, pc}
	...

0801808c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b082      	sub	sp, #8
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801809a:	4618      	mov	r0, r3
 801809c:	f7ed fcd7 	bl	8005a4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	687a      	ldr	r2, [r7, #4]
 80180ac:	6812      	ldr	r2, [r2, #0]
 80180ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80180b2:	f043 0301 	orr.w	r3, r3, #1
 80180b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	6a1b      	ldr	r3, [r3, #32]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d005      	beq.n	80180cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80180c0:	4b04      	ldr	r3, [pc, #16]	; (80180d4 <HAL_PCD_SuspendCallback+0x48>)
 80180c2:	691b      	ldr	r3, [r3, #16]
 80180c4:	4a03      	ldr	r2, [pc, #12]	; (80180d4 <HAL_PCD_SuspendCallback+0x48>)
 80180c6:	f043 0306 	orr.w	r3, r3, #6
 80180ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80180cc:	bf00      	nop
 80180ce:	3708      	adds	r7, #8
 80180d0:	46bd      	mov	sp, r7
 80180d2:	bd80      	pop	{r7, pc}
 80180d4:	e000ed00 	.word	0xe000ed00

080180d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80180e6:	4618      	mov	r0, r3
 80180e8:	f7ed fcc6 	bl	8005a78 <USBD_LL_Resume>
}
 80180ec:	bf00      	nop
 80180ee:	3708      	adds	r7, #8
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}

080180f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
 80180fc:	460b      	mov	r3, r1
 80180fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018106:	78fa      	ldrb	r2, [r7, #3]
 8018108:	4611      	mov	r1, r2
 801810a:	4618      	mov	r0, r3
 801810c:	f7ed fd1d 	bl	8005b4a <USBD_LL_IsoOUTIncomplete>
}
 8018110:	bf00      	nop
 8018112:	3708      	adds	r7, #8
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}

08018118 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
 8018120:	460b      	mov	r3, r1
 8018122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801812a:	78fa      	ldrb	r2, [r7, #3]
 801812c:	4611      	mov	r1, r2
 801812e:	4618      	mov	r0, r3
 8018130:	f7ed fcd9 	bl	8005ae6 <USBD_LL_IsoINIncomplete>
}
 8018134:	bf00      	nop
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}

0801813c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b082      	sub	sp, #8
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801814a:	4618      	mov	r0, r3
 801814c:	f7ed fd2f 	bl	8005bae <USBD_LL_DevConnected>
}
 8018150:	bf00      	nop
 8018152:	3708      	adds	r7, #8
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}

08018158 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018166:	4618      	mov	r0, r3
 8018168:	f7ed fd2b 	bl	8005bc2 <USBD_LL_DevDisconnected>
}
 801816c:	bf00      	nop
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}

08018174 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b084      	sub	sp, #16
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	4608      	mov	r0, r1
 801817e:	4611      	mov	r1, r2
 8018180:	461a      	mov	r2, r3
 8018182:	4603      	mov	r3, r0
 8018184:	70fb      	strb	r3, [r7, #3]
 8018186:	460b      	mov	r3, r1
 8018188:	70bb      	strb	r3, [r7, #2]
 801818a:	4613      	mov	r3, r2
 801818c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801818e:	2300      	movs	r3, #0
 8018190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018192:	2300      	movs	r3, #0
 8018194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801819c:	78bb      	ldrb	r3, [r7, #2]
 801819e:	883a      	ldrh	r2, [r7, #0]
 80181a0:	78f9      	ldrb	r1, [r7, #3]
 80181a2:	f7ea fbc1 	bl	8002928 <HAL_PCD_EP_Open>
 80181a6:	4603      	mov	r3, r0
 80181a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181aa:	7bfb      	ldrb	r3, [r7, #15]
 80181ac:	4618      	mov	r0, r3
 80181ae:	f000 f8d1 	bl	8018354 <USBD_Get_USB_Status>
 80181b2:	4603      	mov	r3, r0
 80181b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	3710      	adds	r7, #16
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}

080181c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b084      	sub	sp, #16
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
 80181c8:	460b      	mov	r3, r1
 80181ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181cc:	2300      	movs	r3, #0
 80181ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181d0:	2300      	movs	r3, #0
 80181d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80181da:	78fa      	ldrb	r2, [r7, #3]
 80181dc:	4611      	mov	r1, r2
 80181de:	4618      	mov	r0, r3
 80181e0:	f7ea fc9f 	bl	8002b22 <HAL_PCD_EP_SetStall>
 80181e4:	4603      	mov	r3, r0
 80181e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181e8:	7bfb      	ldrb	r3, [r7, #15]
 80181ea:	4618      	mov	r0, r3
 80181ec:	f000 f8b2 	bl	8018354 <USBD_Get_USB_Status>
 80181f0:	4603      	mov	r3, r0
 80181f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80181f6:	4618      	mov	r0, r3
 80181f8:	3710      	adds	r7, #16
 80181fa:	46bd      	mov	sp, r7
 80181fc:	bd80      	pop	{r7, pc}

080181fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181fe:	b580      	push	{r7, lr}
 8018200:	b084      	sub	sp, #16
 8018202:	af00      	add	r7, sp, #0
 8018204:	6078      	str	r0, [r7, #4]
 8018206:	460b      	mov	r3, r1
 8018208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801820a:	2300      	movs	r3, #0
 801820c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801820e:	2300      	movs	r3, #0
 8018210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018218:	78fa      	ldrb	r2, [r7, #3]
 801821a:	4611      	mov	r1, r2
 801821c:	4618      	mov	r0, r3
 801821e:	f7ea fce4 	bl	8002bea <HAL_PCD_EP_ClrStall>
 8018222:	4603      	mov	r3, r0
 8018224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018226:	7bfb      	ldrb	r3, [r7, #15]
 8018228:	4618      	mov	r0, r3
 801822a:	f000 f893 	bl	8018354 <USBD_Get_USB_Status>
 801822e:	4603      	mov	r3, r0
 8018230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018232:	7bbb      	ldrb	r3, [r7, #14]
}
 8018234:	4618      	mov	r0, r3
 8018236:	3710      	adds	r7, #16
 8018238:	46bd      	mov	sp, r7
 801823a:	bd80      	pop	{r7, pc}

0801823c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801823c:	b480      	push	{r7}
 801823e:	b085      	sub	sp, #20
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
 8018244:	460b      	mov	r3, r1
 8018246:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801824e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018254:	2b00      	cmp	r3, #0
 8018256:	da0b      	bge.n	8018270 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018258:	78fb      	ldrb	r3, [r7, #3]
 801825a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801825e:	68f9      	ldr	r1, [r7, #12]
 8018260:	4613      	mov	r3, r2
 8018262:	00db      	lsls	r3, r3, #3
 8018264:	4413      	add	r3, r2
 8018266:	009b      	lsls	r3, r3, #2
 8018268:	440b      	add	r3, r1
 801826a:	333e      	adds	r3, #62	; 0x3e
 801826c:	781b      	ldrb	r3, [r3, #0]
 801826e:	e00b      	b.n	8018288 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018270:	78fb      	ldrb	r3, [r7, #3]
 8018272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018276:	68f9      	ldr	r1, [r7, #12]
 8018278:	4613      	mov	r3, r2
 801827a:	00db      	lsls	r3, r3, #3
 801827c:	4413      	add	r3, r2
 801827e:	009b      	lsls	r3, r3, #2
 8018280:	440b      	add	r3, r1
 8018282:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018286:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018288:	4618      	mov	r0, r3
 801828a:	3714      	adds	r7, #20
 801828c:	46bd      	mov	sp, r7
 801828e:	bc80      	pop	{r7}
 8018290:	4770      	bx	lr

08018292 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018292:	b580      	push	{r7, lr}
 8018294:	b084      	sub	sp, #16
 8018296:	af00      	add	r7, sp, #0
 8018298:	6078      	str	r0, [r7, #4]
 801829a:	460b      	mov	r3, r1
 801829c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801829e:	2300      	movs	r3, #0
 80182a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182a2:	2300      	movs	r3, #0
 80182a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80182ac:	78fa      	ldrb	r2, [r7, #3]
 80182ae:	4611      	mov	r1, r2
 80182b0:	4618      	mov	r0, r3
 80182b2:	f7ea fb14 	bl	80028de <HAL_PCD_SetAddress>
 80182b6:	4603      	mov	r3, r0
 80182b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182ba:	7bfb      	ldrb	r3, [r7, #15]
 80182bc:	4618      	mov	r0, r3
 80182be:	f000 f849 	bl	8018354 <USBD_Get_USB_Status>
 80182c2:	4603      	mov	r3, r0
 80182c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3710      	adds	r7, #16
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}

080182d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b086      	sub	sp, #24
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	60f8      	str	r0, [r7, #12]
 80182d8:	607a      	str	r2, [r7, #4]
 80182da:	603b      	str	r3, [r7, #0]
 80182dc:	460b      	mov	r3, r1
 80182de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182e0:	2300      	movs	r3, #0
 80182e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182e4:	2300      	movs	r3, #0
 80182e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80182ee:	7af9      	ldrb	r1, [r7, #11]
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	f7ea fbcb 	bl	8002a8e <HAL_PCD_EP_Transmit>
 80182f8:	4603      	mov	r3, r0
 80182fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182fc:	7dfb      	ldrb	r3, [r7, #23]
 80182fe:	4618      	mov	r0, r3
 8018300:	f000 f828 	bl	8018354 <USBD_Get_USB_Status>
 8018304:	4603      	mov	r3, r0
 8018306:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018308:	7dbb      	ldrb	r3, [r7, #22]
}
 801830a:	4618      	mov	r0, r3
 801830c:	3718      	adds	r7, #24
 801830e:	46bd      	mov	sp, r7
 8018310:	bd80      	pop	{r7, pc}

08018312 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018312:	b580      	push	{r7, lr}
 8018314:	b086      	sub	sp, #24
 8018316:	af00      	add	r7, sp, #0
 8018318:	60f8      	str	r0, [r7, #12]
 801831a:	607a      	str	r2, [r7, #4]
 801831c:	603b      	str	r3, [r7, #0]
 801831e:	460b      	mov	r3, r1
 8018320:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018322:	2300      	movs	r3, #0
 8018324:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018326:	2300      	movs	r3, #0
 8018328:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018330:	7af9      	ldrb	r1, [r7, #11]
 8018332:	683b      	ldr	r3, [r7, #0]
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	f7ea fb5f 	bl	80029f8 <HAL_PCD_EP_Receive>
 801833a:	4603      	mov	r3, r0
 801833c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801833e:	7dfb      	ldrb	r3, [r7, #23]
 8018340:	4618      	mov	r0, r3
 8018342:	f000 f807 	bl	8018354 <USBD_Get_USB_Status>
 8018346:	4603      	mov	r3, r0
 8018348:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801834a:	7dbb      	ldrb	r3, [r7, #22]
}
 801834c:	4618      	mov	r0, r3
 801834e:	3718      	adds	r7, #24
 8018350:	46bd      	mov	sp, r7
 8018352:	bd80      	pop	{r7, pc}

08018354 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018354:	b480      	push	{r7}
 8018356:	b085      	sub	sp, #20
 8018358:	af00      	add	r7, sp, #0
 801835a:	4603      	mov	r3, r0
 801835c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801835e:	2300      	movs	r3, #0
 8018360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018362:	79fb      	ldrb	r3, [r7, #7]
 8018364:	2b03      	cmp	r3, #3
 8018366:	d817      	bhi.n	8018398 <USBD_Get_USB_Status+0x44>
 8018368:	a201      	add	r2, pc, #4	; (adr r2, 8018370 <USBD_Get_USB_Status+0x1c>)
 801836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801836e:	bf00      	nop
 8018370:	08018381 	.word	0x08018381
 8018374:	08018387 	.word	0x08018387
 8018378:	0801838d 	.word	0x0801838d
 801837c:	08018393 	.word	0x08018393
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018380:	2300      	movs	r3, #0
 8018382:	73fb      	strb	r3, [r7, #15]
    break;
 8018384:	e00b      	b.n	801839e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018386:	2303      	movs	r3, #3
 8018388:	73fb      	strb	r3, [r7, #15]
    break;
 801838a:	e008      	b.n	801839e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801838c:	2301      	movs	r3, #1
 801838e:	73fb      	strb	r3, [r7, #15]
    break;
 8018390:	e005      	b.n	801839e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018392:	2303      	movs	r3, #3
 8018394:	73fb      	strb	r3, [r7, #15]
    break;
 8018396:	e002      	b.n	801839e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018398:	2303      	movs	r3, #3
 801839a:	73fb      	strb	r3, [r7, #15]
    break;
 801839c:	bf00      	nop
  }
  return usb_status;
 801839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80183a0:	4618      	mov	r0, r3
 80183a2:	3714      	adds	r7, #20
 80183a4:	46bd      	mov	sp, r7
 80183a6:	bc80      	pop	{r7}
 80183a8:	4770      	bx	lr
 80183aa:	bf00      	nop

080183ac <__sflush_r>:
 80183ac:	898a      	ldrh	r2, [r1, #12]
 80183ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183b0:	4605      	mov	r5, r0
 80183b2:	0710      	lsls	r0, r2, #28
 80183b4:	460c      	mov	r4, r1
 80183b6:	d457      	bmi.n	8018468 <__sflush_r+0xbc>
 80183b8:	684b      	ldr	r3, [r1, #4]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	dc04      	bgt.n	80183c8 <__sflush_r+0x1c>
 80183be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	dc01      	bgt.n	80183c8 <__sflush_r+0x1c>
 80183c4:	2000      	movs	r0, #0
 80183c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183ca:	2e00      	cmp	r6, #0
 80183cc:	d0fa      	beq.n	80183c4 <__sflush_r+0x18>
 80183ce:	2300      	movs	r3, #0
 80183d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80183d4:	682f      	ldr	r7, [r5, #0]
 80183d6:	602b      	str	r3, [r5, #0]
 80183d8:	d032      	beq.n	8018440 <__sflush_r+0x94>
 80183da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80183dc:	89a3      	ldrh	r3, [r4, #12]
 80183de:	075a      	lsls	r2, r3, #29
 80183e0:	d505      	bpl.n	80183ee <__sflush_r+0x42>
 80183e2:	6863      	ldr	r3, [r4, #4]
 80183e4:	1ac0      	subs	r0, r0, r3
 80183e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80183e8:	b10b      	cbz	r3, 80183ee <__sflush_r+0x42>
 80183ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80183ec:	1ac0      	subs	r0, r0, r3
 80183ee:	2300      	movs	r3, #0
 80183f0:	4602      	mov	r2, r0
 80183f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183f4:	6a21      	ldr	r1, [r4, #32]
 80183f6:	4628      	mov	r0, r5
 80183f8:	47b0      	blx	r6
 80183fa:	1c43      	adds	r3, r0, #1
 80183fc:	89a3      	ldrh	r3, [r4, #12]
 80183fe:	d106      	bne.n	801840e <__sflush_r+0x62>
 8018400:	6829      	ldr	r1, [r5, #0]
 8018402:	291d      	cmp	r1, #29
 8018404:	d82c      	bhi.n	8018460 <__sflush_r+0xb4>
 8018406:	4a29      	ldr	r2, [pc, #164]	; (80184ac <__sflush_r+0x100>)
 8018408:	40ca      	lsrs	r2, r1
 801840a:	07d6      	lsls	r6, r2, #31
 801840c:	d528      	bpl.n	8018460 <__sflush_r+0xb4>
 801840e:	2200      	movs	r2, #0
 8018410:	6062      	str	r2, [r4, #4]
 8018412:	04d9      	lsls	r1, r3, #19
 8018414:	6922      	ldr	r2, [r4, #16]
 8018416:	6022      	str	r2, [r4, #0]
 8018418:	d504      	bpl.n	8018424 <__sflush_r+0x78>
 801841a:	1c42      	adds	r2, r0, #1
 801841c:	d101      	bne.n	8018422 <__sflush_r+0x76>
 801841e:	682b      	ldr	r3, [r5, #0]
 8018420:	b903      	cbnz	r3, 8018424 <__sflush_r+0x78>
 8018422:	6560      	str	r0, [r4, #84]	; 0x54
 8018424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018426:	602f      	str	r7, [r5, #0]
 8018428:	2900      	cmp	r1, #0
 801842a:	d0cb      	beq.n	80183c4 <__sflush_r+0x18>
 801842c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018430:	4299      	cmp	r1, r3
 8018432:	d002      	beq.n	801843a <__sflush_r+0x8e>
 8018434:	4628      	mov	r0, r5
 8018436:	f000 fa27 	bl	8018888 <_free_r>
 801843a:	2000      	movs	r0, #0
 801843c:	6360      	str	r0, [r4, #52]	; 0x34
 801843e:	e7c2      	b.n	80183c6 <__sflush_r+0x1a>
 8018440:	6a21      	ldr	r1, [r4, #32]
 8018442:	2301      	movs	r3, #1
 8018444:	4628      	mov	r0, r5
 8018446:	47b0      	blx	r6
 8018448:	1c41      	adds	r1, r0, #1
 801844a:	d1c7      	bne.n	80183dc <__sflush_r+0x30>
 801844c:	682b      	ldr	r3, [r5, #0]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d0c4      	beq.n	80183dc <__sflush_r+0x30>
 8018452:	2b1d      	cmp	r3, #29
 8018454:	d001      	beq.n	801845a <__sflush_r+0xae>
 8018456:	2b16      	cmp	r3, #22
 8018458:	d101      	bne.n	801845e <__sflush_r+0xb2>
 801845a:	602f      	str	r7, [r5, #0]
 801845c:	e7b2      	b.n	80183c4 <__sflush_r+0x18>
 801845e:	89a3      	ldrh	r3, [r4, #12]
 8018460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018464:	81a3      	strh	r3, [r4, #12]
 8018466:	e7ae      	b.n	80183c6 <__sflush_r+0x1a>
 8018468:	690f      	ldr	r7, [r1, #16]
 801846a:	2f00      	cmp	r7, #0
 801846c:	d0aa      	beq.n	80183c4 <__sflush_r+0x18>
 801846e:	0793      	lsls	r3, r2, #30
 8018470:	680e      	ldr	r6, [r1, #0]
 8018472:	bf08      	it	eq
 8018474:	694b      	ldreq	r3, [r1, #20]
 8018476:	600f      	str	r7, [r1, #0]
 8018478:	bf18      	it	ne
 801847a:	2300      	movne	r3, #0
 801847c:	1bf6      	subs	r6, r6, r7
 801847e:	608b      	str	r3, [r1, #8]
 8018480:	2e00      	cmp	r6, #0
 8018482:	dd9f      	ble.n	80183c4 <__sflush_r+0x18>
 8018484:	6a21      	ldr	r1, [r4, #32]
 8018486:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801848a:	4633      	mov	r3, r6
 801848c:	463a      	mov	r2, r7
 801848e:	4628      	mov	r0, r5
 8018490:	47e0      	blx	ip
 8018492:	2800      	cmp	r0, #0
 8018494:	dc06      	bgt.n	80184a4 <__sflush_r+0xf8>
 8018496:	89a3      	ldrh	r3, [r4, #12]
 8018498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801849c:	81a3      	strh	r3, [r4, #12]
 801849e:	f04f 30ff 	mov.w	r0, #4294967295
 80184a2:	e790      	b.n	80183c6 <__sflush_r+0x1a>
 80184a4:	4407      	add	r7, r0
 80184a6:	1a36      	subs	r6, r6, r0
 80184a8:	e7ea      	b.n	8018480 <__sflush_r+0xd4>
 80184aa:	bf00      	nop
 80184ac:	20400001 	.word	0x20400001

080184b0 <_fflush_r>:
 80184b0:	b538      	push	{r3, r4, r5, lr}
 80184b2:	690b      	ldr	r3, [r1, #16]
 80184b4:	4605      	mov	r5, r0
 80184b6:	460c      	mov	r4, r1
 80184b8:	b913      	cbnz	r3, 80184c0 <_fflush_r+0x10>
 80184ba:	2500      	movs	r5, #0
 80184bc:	4628      	mov	r0, r5
 80184be:	bd38      	pop	{r3, r4, r5, pc}
 80184c0:	b118      	cbz	r0, 80184ca <_fflush_r+0x1a>
 80184c2:	6983      	ldr	r3, [r0, #24]
 80184c4:	b90b      	cbnz	r3, 80184ca <_fflush_r+0x1a>
 80184c6:	f000 f887 	bl	80185d8 <__sinit>
 80184ca:	4b14      	ldr	r3, [pc, #80]	; (801851c <_fflush_r+0x6c>)
 80184cc:	429c      	cmp	r4, r3
 80184ce:	d11b      	bne.n	8018508 <_fflush_r+0x58>
 80184d0:	686c      	ldr	r4, [r5, #4]
 80184d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d0ef      	beq.n	80184ba <_fflush_r+0xa>
 80184da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80184dc:	07d0      	lsls	r0, r2, #31
 80184de:	d404      	bmi.n	80184ea <_fflush_r+0x3a>
 80184e0:	0599      	lsls	r1, r3, #22
 80184e2:	d402      	bmi.n	80184ea <_fflush_r+0x3a>
 80184e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184e6:	f000 f93a 	bl	801875e <__retarget_lock_acquire_recursive>
 80184ea:	4628      	mov	r0, r5
 80184ec:	4621      	mov	r1, r4
 80184ee:	f7ff ff5d 	bl	80183ac <__sflush_r>
 80184f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80184f4:	07da      	lsls	r2, r3, #31
 80184f6:	4605      	mov	r5, r0
 80184f8:	d4e0      	bmi.n	80184bc <_fflush_r+0xc>
 80184fa:	89a3      	ldrh	r3, [r4, #12]
 80184fc:	059b      	lsls	r3, r3, #22
 80184fe:	d4dd      	bmi.n	80184bc <_fflush_r+0xc>
 8018500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018502:	f000 f92d 	bl	8018760 <__retarget_lock_release_recursive>
 8018506:	e7d9      	b.n	80184bc <_fflush_r+0xc>
 8018508:	4b05      	ldr	r3, [pc, #20]	; (8018520 <_fflush_r+0x70>)
 801850a:	429c      	cmp	r4, r3
 801850c:	d101      	bne.n	8018512 <_fflush_r+0x62>
 801850e:	68ac      	ldr	r4, [r5, #8]
 8018510:	e7df      	b.n	80184d2 <_fflush_r+0x22>
 8018512:	4b04      	ldr	r3, [pc, #16]	; (8018524 <_fflush_r+0x74>)
 8018514:	429c      	cmp	r4, r3
 8018516:	bf08      	it	eq
 8018518:	68ec      	ldreq	r4, [r5, #12]
 801851a:	e7da      	b.n	80184d2 <_fflush_r+0x22>
 801851c:	0801ce14 	.word	0x0801ce14
 8018520:	0801ce34 	.word	0x0801ce34
 8018524:	0801cdf4 	.word	0x0801cdf4

08018528 <std>:
 8018528:	2300      	movs	r3, #0
 801852a:	b510      	push	{r4, lr}
 801852c:	4604      	mov	r4, r0
 801852e:	e9c0 3300 	strd	r3, r3, [r0]
 8018532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018536:	6083      	str	r3, [r0, #8]
 8018538:	8181      	strh	r1, [r0, #12]
 801853a:	6643      	str	r3, [r0, #100]	; 0x64
 801853c:	81c2      	strh	r2, [r0, #14]
 801853e:	6183      	str	r3, [r0, #24]
 8018540:	4619      	mov	r1, r3
 8018542:	2208      	movs	r2, #8
 8018544:	305c      	adds	r0, #92	; 0x5c
 8018546:	f000 f997 	bl	8018878 <memset>
 801854a:	4b05      	ldr	r3, [pc, #20]	; (8018560 <std+0x38>)
 801854c:	6263      	str	r3, [r4, #36]	; 0x24
 801854e:	4b05      	ldr	r3, [pc, #20]	; (8018564 <std+0x3c>)
 8018550:	62a3      	str	r3, [r4, #40]	; 0x28
 8018552:	4b05      	ldr	r3, [pc, #20]	; (8018568 <std+0x40>)
 8018554:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018556:	4b05      	ldr	r3, [pc, #20]	; (801856c <std+0x44>)
 8018558:	6224      	str	r4, [r4, #32]
 801855a:	6323      	str	r3, [r4, #48]	; 0x30
 801855c:	bd10      	pop	{r4, pc}
 801855e:	bf00      	nop
 8018560:	08018be5 	.word	0x08018be5
 8018564:	08018c07 	.word	0x08018c07
 8018568:	08018c3f 	.word	0x08018c3f
 801856c:	08018c63 	.word	0x08018c63

08018570 <_cleanup_r>:
 8018570:	4901      	ldr	r1, [pc, #4]	; (8018578 <_cleanup_r+0x8>)
 8018572:	f000 b8af 	b.w	80186d4 <_fwalk_reent>
 8018576:	bf00      	nop
 8018578:	080184b1 	.word	0x080184b1

0801857c <__sfmoreglue>:
 801857c:	b570      	push	{r4, r5, r6, lr}
 801857e:	2268      	movs	r2, #104	; 0x68
 8018580:	1e4d      	subs	r5, r1, #1
 8018582:	4355      	muls	r5, r2
 8018584:	460e      	mov	r6, r1
 8018586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801858a:	f000 f9e7 	bl	801895c <_malloc_r>
 801858e:	4604      	mov	r4, r0
 8018590:	b140      	cbz	r0, 80185a4 <__sfmoreglue+0x28>
 8018592:	2100      	movs	r1, #0
 8018594:	e9c0 1600 	strd	r1, r6, [r0]
 8018598:	300c      	adds	r0, #12
 801859a:	60a0      	str	r0, [r4, #8]
 801859c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80185a0:	f000 f96a 	bl	8018878 <memset>
 80185a4:	4620      	mov	r0, r4
 80185a6:	bd70      	pop	{r4, r5, r6, pc}

080185a8 <__sfp_lock_acquire>:
 80185a8:	4801      	ldr	r0, [pc, #4]	; (80185b0 <__sfp_lock_acquire+0x8>)
 80185aa:	f000 b8d8 	b.w	801875e <__retarget_lock_acquire_recursive>
 80185ae:	bf00      	nop
 80185b0:	2000c4d1 	.word	0x2000c4d1

080185b4 <__sfp_lock_release>:
 80185b4:	4801      	ldr	r0, [pc, #4]	; (80185bc <__sfp_lock_release+0x8>)
 80185b6:	f000 b8d3 	b.w	8018760 <__retarget_lock_release_recursive>
 80185ba:	bf00      	nop
 80185bc:	2000c4d1 	.word	0x2000c4d1

080185c0 <__sinit_lock_acquire>:
 80185c0:	4801      	ldr	r0, [pc, #4]	; (80185c8 <__sinit_lock_acquire+0x8>)
 80185c2:	f000 b8cc 	b.w	801875e <__retarget_lock_acquire_recursive>
 80185c6:	bf00      	nop
 80185c8:	2000c4d2 	.word	0x2000c4d2

080185cc <__sinit_lock_release>:
 80185cc:	4801      	ldr	r0, [pc, #4]	; (80185d4 <__sinit_lock_release+0x8>)
 80185ce:	f000 b8c7 	b.w	8018760 <__retarget_lock_release_recursive>
 80185d2:	bf00      	nop
 80185d4:	2000c4d2 	.word	0x2000c4d2

080185d8 <__sinit>:
 80185d8:	b510      	push	{r4, lr}
 80185da:	4604      	mov	r4, r0
 80185dc:	f7ff fff0 	bl	80185c0 <__sinit_lock_acquire>
 80185e0:	69a3      	ldr	r3, [r4, #24]
 80185e2:	b11b      	cbz	r3, 80185ec <__sinit+0x14>
 80185e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185e8:	f7ff bff0 	b.w	80185cc <__sinit_lock_release>
 80185ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80185f0:	6523      	str	r3, [r4, #80]	; 0x50
 80185f2:	4b13      	ldr	r3, [pc, #76]	; (8018640 <__sinit+0x68>)
 80185f4:	4a13      	ldr	r2, [pc, #76]	; (8018644 <__sinit+0x6c>)
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80185fa:	42a3      	cmp	r3, r4
 80185fc:	bf04      	itt	eq
 80185fe:	2301      	moveq	r3, #1
 8018600:	61a3      	streq	r3, [r4, #24]
 8018602:	4620      	mov	r0, r4
 8018604:	f000 f820 	bl	8018648 <__sfp>
 8018608:	6060      	str	r0, [r4, #4]
 801860a:	4620      	mov	r0, r4
 801860c:	f000 f81c 	bl	8018648 <__sfp>
 8018610:	60a0      	str	r0, [r4, #8]
 8018612:	4620      	mov	r0, r4
 8018614:	f000 f818 	bl	8018648 <__sfp>
 8018618:	2200      	movs	r2, #0
 801861a:	60e0      	str	r0, [r4, #12]
 801861c:	2104      	movs	r1, #4
 801861e:	6860      	ldr	r0, [r4, #4]
 8018620:	f7ff ff82 	bl	8018528 <std>
 8018624:	68a0      	ldr	r0, [r4, #8]
 8018626:	2201      	movs	r2, #1
 8018628:	2109      	movs	r1, #9
 801862a:	f7ff ff7d 	bl	8018528 <std>
 801862e:	68e0      	ldr	r0, [r4, #12]
 8018630:	2202      	movs	r2, #2
 8018632:	2112      	movs	r1, #18
 8018634:	f7ff ff78 	bl	8018528 <std>
 8018638:	2301      	movs	r3, #1
 801863a:	61a3      	str	r3, [r4, #24]
 801863c:	e7d2      	b.n	80185e4 <__sinit+0xc>
 801863e:	bf00      	nop
 8018640:	0801ce54 	.word	0x0801ce54
 8018644:	08018571 	.word	0x08018571

08018648 <__sfp>:
 8018648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801864a:	4607      	mov	r7, r0
 801864c:	f7ff ffac 	bl	80185a8 <__sfp_lock_acquire>
 8018650:	4b1e      	ldr	r3, [pc, #120]	; (80186cc <__sfp+0x84>)
 8018652:	681e      	ldr	r6, [r3, #0]
 8018654:	69b3      	ldr	r3, [r6, #24]
 8018656:	b913      	cbnz	r3, 801865e <__sfp+0x16>
 8018658:	4630      	mov	r0, r6
 801865a:	f7ff ffbd 	bl	80185d8 <__sinit>
 801865e:	3648      	adds	r6, #72	; 0x48
 8018660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018664:	3b01      	subs	r3, #1
 8018666:	d503      	bpl.n	8018670 <__sfp+0x28>
 8018668:	6833      	ldr	r3, [r6, #0]
 801866a:	b30b      	cbz	r3, 80186b0 <__sfp+0x68>
 801866c:	6836      	ldr	r6, [r6, #0]
 801866e:	e7f7      	b.n	8018660 <__sfp+0x18>
 8018670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018674:	b9d5      	cbnz	r5, 80186ac <__sfp+0x64>
 8018676:	4b16      	ldr	r3, [pc, #88]	; (80186d0 <__sfp+0x88>)
 8018678:	60e3      	str	r3, [r4, #12]
 801867a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801867e:	6665      	str	r5, [r4, #100]	; 0x64
 8018680:	f000 f86c 	bl	801875c <__retarget_lock_init_recursive>
 8018684:	f7ff ff96 	bl	80185b4 <__sfp_lock_release>
 8018688:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801868c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018690:	6025      	str	r5, [r4, #0]
 8018692:	61a5      	str	r5, [r4, #24]
 8018694:	2208      	movs	r2, #8
 8018696:	4629      	mov	r1, r5
 8018698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801869c:	f000 f8ec 	bl	8018878 <memset>
 80186a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80186a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80186a8:	4620      	mov	r0, r4
 80186aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186ac:	3468      	adds	r4, #104	; 0x68
 80186ae:	e7d9      	b.n	8018664 <__sfp+0x1c>
 80186b0:	2104      	movs	r1, #4
 80186b2:	4638      	mov	r0, r7
 80186b4:	f7ff ff62 	bl	801857c <__sfmoreglue>
 80186b8:	4604      	mov	r4, r0
 80186ba:	6030      	str	r0, [r6, #0]
 80186bc:	2800      	cmp	r0, #0
 80186be:	d1d5      	bne.n	801866c <__sfp+0x24>
 80186c0:	f7ff ff78 	bl	80185b4 <__sfp_lock_release>
 80186c4:	230c      	movs	r3, #12
 80186c6:	603b      	str	r3, [r7, #0]
 80186c8:	e7ee      	b.n	80186a8 <__sfp+0x60>
 80186ca:	bf00      	nop
 80186cc:	0801ce54 	.word	0x0801ce54
 80186d0:	ffff0001 	.word	0xffff0001

080186d4 <_fwalk_reent>:
 80186d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186d8:	4606      	mov	r6, r0
 80186da:	4688      	mov	r8, r1
 80186dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80186e0:	2700      	movs	r7, #0
 80186e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80186e6:	f1b9 0901 	subs.w	r9, r9, #1
 80186ea:	d505      	bpl.n	80186f8 <_fwalk_reent+0x24>
 80186ec:	6824      	ldr	r4, [r4, #0]
 80186ee:	2c00      	cmp	r4, #0
 80186f0:	d1f7      	bne.n	80186e2 <_fwalk_reent+0xe>
 80186f2:	4638      	mov	r0, r7
 80186f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186f8:	89ab      	ldrh	r3, [r5, #12]
 80186fa:	2b01      	cmp	r3, #1
 80186fc:	d907      	bls.n	801870e <_fwalk_reent+0x3a>
 80186fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018702:	3301      	adds	r3, #1
 8018704:	d003      	beq.n	801870e <_fwalk_reent+0x3a>
 8018706:	4629      	mov	r1, r5
 8018708:	4630      	mov	r0, r6
 801870a:	47c0      	blx	r8
 801870c:	4307      	orrs	r7, r0
 801870e:	3568      	adds	r5, #104	; 0x68
 8018710:	e7e9      	b.n	80186e6 <_fwalk_reent+0x12>
	...

08018714 <__libc_init_array>:
 8018714:	b570      	push	{r4, r5, r6, lr}
 8018716:	4d0d      	ldr	r5, [pc, #52]	; (801874c <__libc_init_array+0x38>)
 8018718:	4c0d      	ldr	r4, [pc, #52]	; (8018750 <__libc_init_array+0x3c>)
 801871a:	1b64      	subs	r4, r4, r5
 801871c:	10a4      	asrs	r4, r4, #2
 801871e:	2600      	movs	r6, #0
 8018720:	42a6      	cmp	r6, r4
 8018722:	d109      	bne.n	8018738 <__libc_init_array+0x24>
 8018724:	4d0b      	ldr	r5, [pc, #44]	; (8018754 <__libc_init_array+0x40>)
 8018726:	4c0c      	ldr	r4, [pc, #48]	; (8018758 <__libc_init_array+0x44>)
 8018728:	f000 ff3c 	bl	80195a4 <_init>
 801872c:	1b64      	subs	r4, r4, r5
 801872e:	10a4      	asrs	r4, r4, #2
 8018730:	2600      	movs	r6, #0
 8018732:	42a6      	cmp	r6, r4
 8018734:	d105      	bne.n	8018742 <__libc_init_array+0x2e>
 8018736:	bd70      	pop	{r4, r5, r6, pc}
 8018738:	f855 3b04 	ldr.w	r3, [r5], #4
 801873c:	4798      	blx	r3
 801873e:	3601      	adds	r6, #1
 8018740:	e7ee      	b.n	8018720 <__libc_init_array+0xc>
 8018742:	f855 3b04 	ldr.w	r3, [r5], #4
 8018746:	4798      	blx	r3
 8018748:	3601      	adds	r6, #1
 801874a:	e7f2      	b.n	8018732 <__libc_init_array+0x1e>
 801874c:	0801cf44 	.word	0x0801cf44
 8018750:	0801cf44 	.word	0x0801cf44
 8018754:	0801cf44 	.word	0x0801cf44
 8018758:	0801cf48 	.word	0x0801cf48

0801875c <__retarget_lock_init_recursive>:
 801875c:	4770      	bx	lr

0801875e <__retarget_lock_acquire_recursive>:
 801875e:	4770      	bx	lr

08018760 <__retarget_lock_release_recursive>:
 8018760:	4770      	bx	lr

08018762 <__swhatbuf_r>:
 8018762:	b570      	push	{r4, r5, r6, lr}
 8018764:	460e      	mov	r6, r1
 8018766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801876a:	2900      	cmp	r1, #0
 801876c:	b096      	sub	sp, #88	; 0x58
 801876e:	4614      	mov	r4, r2
 8018770:	461d      	mov	r5, r3
 8018772:	da08      	bge.n	8018786 <__swhatbuf_r+0x24>
 8018774:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018778:	2200      	movs	r2, #0
 801877a:	602a      	str	r2, [r5, #0]
 801877c:	061a      	lsls	r2, r3, #24
 801877e:	d410      	bmi.n	80187a2 <__swhatbuf_r+0x40>
 8018780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018784:	e00e      	b.n	80187a4 <__swhatbuf_r+0x42>
 8018786:	466a      	mov	r2, sp
 8018788:	f000 fb82 	bl	8018e90 <_fstat_r>
 801878c:	2800      	cmp	r0, #0
 801878e:	dbf1      	blt.n	8018774 <__swhatbuf_r+0x12>
 8018790:	9a01      	ldr	r2, [sp, #4]
 8018792:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018796:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801879a:	425a      	negs	r2, r3
 801879c:	415a      	adcs	r2, r3
 801879e:	602a      	str	r2, [r5, #0]
 80187a0:	e7ee      	b.n	8018780 <__swhatbuf_r+0x1e>
 80187a2:	2340      	movs	r3, #64	; 0x40
 80187a4:	2000      	movs	r0, #0
 80187a6:	6023      	str	r3, [r4, #0]
 80187a8:	b016      	add	sp, #88	; 0x58
 80187aa:	bd70      	pop	{r4, r5, r6, pc}

080187ac <__smakebuf_r>:
 80187ac:	898b      	ldrh	r3, [r1, #12]
 80187ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80187b0:	079d      	lsls	r5, r3, #30
 80187b2:	4606      	mov	r6, r0
 80187b4:	460c      	mov	r4, r1
 80187b6:	d507      	bpl.n	80187c8 <__smakebuf_r+0x1c>
 80187b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80187bc:	6023      	str	r3, [r4, #0]
 80187be:	6123      	str	r3, [r4, #16]
 80187c0:	2301      	movs	r3, #1
 80187c2:	6163      	str	r3, [r4, #20]
 80187c4:	b002      	add	sp, #8
 80187c6:	bd70      	pop	{r4, r5, r6, pc}
 80187c8:	ab01      	add	r3, sp, #4
 80187ca:	466a      	mov	r2, sp
 80187cc:	f7ff ffc9 	bl	8018762 <__swhatbuf_r>
 80187d0:	9900      	ldr	r1, [sp, #0]
 80187d2:	4605      	mov	r5, r0
 80187d4:	4630      	mov	r0, r6
 80187d6:	f000 f8c1 	bl	801895c <_malloc_r>
 80187da:	b948      	cbnz	r0, 80187f0 <__smakebuf_r+0x44>
 80187dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187e0:	059a      	lsls	r2, r3, #22
 80187e2:	d4ef      	bmi.n	80187c4 <__smakebuf_r+0x18>
 80187e4:	f023 0303 	bic.w	r3, r3, #3
 80187e8:	f043 0302 	orr.w	r3, r3, #2
 80187ec:	81a3      	strh	r3, [r4, #12]
 80187ee:	e7e3      	b.n	80187b8 <__smakebuf_r+0xc>
 80187f0:	4b0d      	ldr	r3, [pc, #52]	; (8018828 <__smakebuf_r+0x7c>)
 80187f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80187f4:	89a3      	ldrh	r3, [r4, #12]
 80187f6:	6020      	str	r0, [r4, #0]
 80187f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187fc:	81a3      	strh	r3, [r4, #12]
 80187fe:	9b00      	ldr	r3, [sp, #0]
 8018800:	6163      	str	r3, [r4, #20]
 8018802:	9b01      	ldr	r3, [sp, #4]
 8018804:	6120      	str	r0, [r4, #16]
 8018806:	b15b      	cbz	r3, 8018820 <__smakebuf_r+0x74>
 8018808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801880c:	4630      	mov	r0, r6
 801880e:	f000 fb51 	bl	8018eb4 <_isatty_r>
 8018812:	b128      	cbz	r0, 8018820 <__smakebuf_r+0x74>
 8018814:	89a3      	ldrh	r3, [r4, #12]
 8018816:	f023 0303 	bic.w	r3, r3, #3
 801881a:	f043 0301 	orr.w	r3, r3, #1
 801881e:	81a3      	strh	r3, [r4, #12]
 8018820:	89a0      	ldrh	r0, [r4, #12]
 8018822:	4305      	orrs	r5, r0
 8018824:	81a5      	strh	r5, [r4, #12]
 8018826:	e7cd      	b.n	80187c4 <__smakebuf_r+0x18>
 8018828:	08018571 	.word	0x08018571

0801882c <malloc>:
 801882c:	4b02      	ldr	r3, [pc, #8]	; (8018838 <malloc+0xc>)
 801882e:	4601      	mov	r1, r0
 8018830:	6818      	ldr	r0, [r3, #0]
 8018832:	f000 b893 	b.w	801895c <_malloc_r>
 8018836:	bf00      	nop
 8018838:	20000020 	.word	0x20000020

0801883c <memcmp>:
 801883c:	b510      	push	{r4, lr}
 801883e:	3901      	subs	r1, #1
 8018840:	4402      	add	r2, r0
 8018842:	4290      	cmp	r0, r2
 8018844:	d101      	bne.n	801884a <memcmp+0xe>
 8018846:	2000      	movs	r0, #0
 8018848:	e005      	b.n	8018856 <memcmp+0x1a>
 801884a:	7803      	ldrb	r3, [r0, #0]
 801884c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018850:	42a3      	cmp	r3, r4
 8018852:	d001      	beq.n	8018858 <memcmp+0x1c>
 8018854:	1b18      	subs	r0, r3, r4
 8018856:	bd10      	pop	{r4, pc}
 8018858:	3001      	adds	r0, #1
 801885a:	e7f2      	b.n	8018842 <memcmp+0x6>

0801885c <memcpy>:
 801885c:	440a      	add	r2, r1
 801885e:	4291      	cmp	r1, r2
 8018860:	f100 33ff 	add.w	r3, r0, #4294967295
 8018864:	d100      	bne.n	8018868 <memcpy+0xc>
 8018866:	4770      	bx	lr
 8018868:	b510      	push	{r4, lr}
 801886a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801886e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018872:	4291      	cmp	r1, r2
 8018874:	d1f9      	bne.n	801886a <memcpy+0xe>
 8018876:	bd10      	pop	{r4, pc}

08018878 <memset>:
 8018878:	4402      	add	r2, r0
 801887a:	4603      	mov	r3, r0
 801887c:	4293      	cmp	r3, r2
 801887e:	d100      	bne.n	8018882 <memset+0xa>
 8018880:	4770      	bx	lr
 8018882:	f803 1b01 	strb.w	r1, [r3], #1
 8018886:	e7f9      	b.n	801887c <memset+0x4>

08018888 <_free_r>:
 8018888:	b538      	push	{r3, r4, r5, lr}
 801888a:	4605      	mov	r5, r0
 801888c:	2900      	cmp	r1, #0
 801888e:	d041      	beq.n	8018914 <_free_r+0x8c>
 8018890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018894:	1f0c      	subs	r4, r1, #4
 8018896:	2b00      	cmp	r3, #0
 8018898:	bfb8      	it	lt
 801889a:	18e4      	addlt	r4, r4, r3
 801889c:	f000 fb2c 	bl	8018ef8 <__malloc_lock>
 80188a0:	4a1d      	ldr	r2, [pc, #116]	; (8018918 <_free_r+0x90>)
 80188a2:	6813      	ldr	r3, [r2, #0]
 80188a4:	b933      	cbnz	r3, 80188b4 <_free_r+0x2c>
 80188a6:	6063      	str	r3, [r4, #4]
 80188a8:	6014      	str	r4, [r2, #0]
 80188aa:	4628      	mov	r0, r5
 80188ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188b0:	f000 bb28 	b.w	8018f04 <__malloc_unlock>
 80188b4:	42a3      	cmp	r3, r4
 80188b6:	d908      	bls.n	80188ca <_free_r+0x42>
 80188b8:	6820      	ldr	r0, [r4, #0]
 80188ba:	1821      	adds	r1, r4, r0
 80188bc:	428b      	cmp	r3, r1
 80188be:	bf01      	itttt	eq
 80188c0:	6819      	ldreq	r1, [r3, #0]
 80188c2:	685b      	ldreq	r3, [r3, #4]
 80188c4:	1809      	addeq	r1, r1, r0
 80188c6:	6021      	streq	r1, [r4, #0]
 80188c8:	e7ed      	b.n	80188a6 <_free_r+0x1e>
 80188ca:	461a      	mov	r2, r3
 80188cc:	685b      	ldr	r3, [r3, #4]
 80188ce:	b10b      	cbz	r3, 80188d4 <_free_r+0x4c>
 80188d0:	42a3      	cmp	r3, r4
 80188d2:	d9fa      	bls.n	80188ca <_free_r+0x42>
 80188d4:	6811      	ldr	r1, [r2, #0]
 80188d6:	1850      	adds	r0, r2, r1
 80188d8:	42a0      	cmp	r0, r4
 80188da:	d10b      	bne.n	80188f4 <_free_r+0x6c>
 80188dc:	6820      	ldr	r0, [r4, #0]
 80188de:	4401      	add	r1, r0
 80188e0:	1850      	adds	r0, r2, r1
 80188e2:	4283      	cmp	r3, r0
 80188e4:	6011      	str	r1, [r2, #0]
 80188e6:	d1e0      	bne.n	80188aa <_free_r+0x22>
 80188e8:	6818      	ldr	r0, [r3, #0]
 80188ea:	685b      	ldr	r3, [r3, #4]
 80188ec:	6053      	str	r3, [r2, #4]
 80188ee:	4401      	add	r1, r0
 80188f0:	6011      	str	r1, [r2, #0]
 80188f2:	e7da      	b.n	80188aa <_free_r+0x22>
 80188f4:	d902      	bls.n	80188fc <_free_r+0x74>
 80188f6:	230c      	movs	r3, #12
 80188f8:	602b      	str	r3, [r5, #0]
 80188fa:	e7d6      	b.n	80188aa <_free_r+0x22>
 80188fc:	6820      	ldr	r0, [r4, #0]
 80188fe:	1821      	adds	r1, r4, r0
 8018900:	428b      	cmp	r3, r1
 8018902:	bf04      	itt	eq
 8018904:	6819      	ldreq	r1, [r3, #0]
 8018906:	685b      	ldreq	r3, [r3, #4]
 8018908:	6063      	str	r3, [r4, #4]
 801890a:	bf04      	itt	eq
 801890c:	1809      	addeq	r1, r1, r0
 801890e:	6021      	streq	r1, [r4, #0]
 8018910:	6054      	str	r4, [r2, #4]
 8018912:	e7ca      	b.n	80188aa <_free_r+0x22>
 8018914:	bd38      	pop	{r3, r4, r5, pc}
 8018916:	bf00      	nop
 8018918:	2000c4d4 	.word	0x2000c4d4

0801891c <sbrk_aligned>:
 801891c:	b570      	push	{r4, r5, r6, lr}
 801891e:	4e0e      	ldr	r6, [pc, #56]	; (8018958 <sbrk_aligned+0x3c>)
 8018920:	460c      	mov	r4, r1
 8018922:	6831      	ldr	r1, [r6, #0]
 8018924:	4605      	mov	r5, r0
 8018926:	b911      	cbnz	r1, 801892e <sbrk_aligned+0x12>
 8018928:	f000 f94c 	bl	8018bc4 <_sbrk_r>
 801892c:	6030      	str	r0, [r6, #0]
 801892e:	4621      	mov	r1, r4
 8018930:	4628      	mov	r0, r5
 8018932:	f000 f947 	bl	8018bc4 <_sbrk_r>
 8018936:	1c43      	adds	r3, r0, #1
 8018938:	d00a      	beq.n	8018950 <sbrk_aligned+0x34>
 801893a:	1cc4      	adds	r4, r0, #3
 801893c:	f024 0403 	bic.w	r4, r4, #3
 8018940:	42a0      	cmp	r0, r4
 8018942:	d007      	beq.n	8018954 <sbrk_aligned+0x38>
 8018944:	1a21      	subs	r1, r4, r0
 8018946:	4628      	mov	r0, r5
 8018948:	f000 f93c 	bl	8018bc4 <_sbrk_r>
 801894c:	3001      	adds	r0, #1
 801894e:	d101      	bne.n	8018954 <sbrk_aligned+0x38>
 8018950:	f04f 34ff 	mov.w	r4, #4294967295
 8018954:	4620      	mov	r0, r4
 8018956:	bd70      	pop	{r4, r5, r6, pc}
 8018958:	2000c4d8 	.word	0x2000c4d8

0801895c <_malloc_r>:
 801895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018960:	1ccd      	adds	r5, r1, #3
 8018962:	f025 0503 	bic.w	r5, r5, #3
 8018966:	3508      	adds	r5, #8
 8018968:	2d0c      	cmp	r5, #12
 801896a:	bf38      	it	cc
 801896c:	250c      	movcc	r5, #12
 801896e:	2d00      	cmp	r5, #0
 8018970:	4607      	mov	r7, r0
 8018972:	db01      	blt.n	8018978 <_malloc_r+0x1c>
 8018974:	42a9      	cmp	r1, r5
 8018976:	d905      	bls.n	8018984 <_malloc_r+0x28>
 8018978:	230c      	movs	r3, #12
 801897a:	603b      	str	r3, [r7, #0]
 801897c:	2600      	movs	r6, #0
 801897e:	4630      	mov	r0, r6
 8018980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018984:	4e2e      	ldr	r6, [pc, #184]	; (8018a40 <_malloc_r+0xe4>)
 8018986:	f000 fab7 	bl	8018ef8 <__malloc_lock>
 801898a:	6833      	ldr	r3, [r6, #0]
 801898c:	461c      	mov	r4, r3
 801898e:	bb34      	cbnz	r4, 80189de <_malloc_r+0x82>
 8018990:	4629      	mov	r1, r5
 8018992:	4638      	mov	r0, r7
 8018994:	f7ff ffc2 	bl	801891c <sbrk_aligned>
 8018998:	1c43      	adds	r3, r0, #1
 801899a:	4604      	mov	r4, r0
 801899c:	d14d      	bne.n	8018a3a <_malloc_r+0xde>
 801899e:	6834      	ldr	r4, [r6, #0]
 80189a0:	4626      	mov	r6, r4
 80189a2:	2e00      	cmp	r6, #0
 80189a4:	d140      	bne.n	8018a28 <_malloc_r+0xcc>
 80189a6:	6823      	ldr	r3, [r4, #0]
 80189a8:	4631      	mov	r1, r6
 80189aa:	4638      	mov	r0, r7
 80189ac:	eb04 0803 	add.w	r8, r4, r3
 80189b0:	f000 f908 	bl	8018bc4 <_sbrk_r>
 80189b4:	4580      	cmp	r8, r0
 80189b6:	d13a      	bne.n	8018a2e <_malloc_r+0xd2>
 80189b8:	6821      	ldr	r1, [r4, #0]
 80189ba:	3503      	adds	r5, #3
 80189bc:	1a6d      	subs	r5, r5, r1
 80189be:	f025 0503 	bic.w	r5, r5, #3
 80189c2:	3508      	adds	r5, #8
 80189c4:	2d0c      	cmp	r5, #12
 80189c6:	bf38      	it	cc
 80189c8:	250c      	movcc	r5, #12
 80189ca:	4629      	mov	r1, r5
 80189cc:	4638      	mov	r0, r7
 80189ce:	f7ff ffa5 	bl	801891c <sbrk_aligned>
 80189d2:	3001      	adds	r0, #1
 80189d4:	d02b      	beq.n	8018a2e <_malloc_r+0xd2>
 80189d6:	6823      	ldr	r3, [r4, #0]
 80189d8:	442b      	add	r3, r5
 80189da:	6023      	str	r3, [r4, #0]
 80189dc:	e00e      	b.n	80189fc <_malloc_r+0xa0>
 80189de:	6822      	ldr	r2, [r4, #0]
 80189e0:	1b52      	subs	r2, r2, r5
 80189e2:	d41e      	bmi.n	8018a22 <_malloc_r+0xc6>
 80189e4:	2a0b      	cmp	r2, #11
 80189e6:	d916      	bls.n	8018a16 <_malloc_r+0xba>
 80189e8:	1961      	adds	r1, r4, r5
 80189ea:	42a3      	cmp	r3, r4
 80189ec:	6025      	str	r5, [r4, #0]
 80189ee:	bf18      	it	ne
 80189f0:	6059      	strne	r1, [r3, #4]
 80189f2:	6863      	ldr	r3, [r4, #4]
 80189f4:	bf08      	it	eq
 80189f6:	6031      	streq	r1, [r6, #0]
 80189f8:	5162      	str	r2, [r4, r5]
 80189fa:	604b      	str	r3, [r1, #4]
 80189fc:	4638      	mov	r0, r7
 80189fe:	f104 060b 	add.w	r6, r4, #11
 8018a02:	f000 fa7f 	bl	8018f04 <__malloc_unlock>
 8018a06:	f026 0607 	bic.w	r6, r6, #7
 8018a0a:	1d23      	adds	r3, r4, #4
 8018a0c:	1af2      	subs	r2, r6, r3
 8018a0e:	d0b6      	beq.n	801897e <_malloc_r+0x22>
 8018a10:	1b9b      	subs	r3, r3, r6
 8018a12:	50a3      	str	r3, [r4, r2]
 8018a14:	e7b3      	b.n	801897e <_malloc_r+0x22>
 8018a16:	6862      	ldr	r2, [r4, #4]
 8018a18:	42a3      	cmp	r3, r4
 8018a1a:	bf0c      	ite	eq
 8018a1c:	6032      	streq	r2, [r6, #0]
 8018a1e:	605a      	strne	r2, [r3, #4]
 8018a20:	e7ec      	b.n	80189fc <_malloc_r+0xa0>
 8018a22:	4623      	mov	r3, r4
 8018a24:	6864      	ldr	r4, [r4, #4]
 8018a26:	e7b2      	b.n	801898e <_malloc_r+0x32>
 8018a28:	4634      	mov	r4, r6
 8018a2a:	6876      	ldr	r6, [r6, #4]
 8018a2c:	e7b9      	b.n	80189a2 <_malloc_r+0x46>
 8018a2e:	230c      	movs	r3, #12
 8018a30:	603b      	str	r3, [r7, #0]
 8018a32:	4638      	mov	r0, r7
 8018a34:	f000 fa66 	bl	8018f04 <__malloc_unlock>
 8018a38:	e7a1      	b.n	801897e <_malloc_r+0x22>
 8018a3a:	6025      	str	r5, [r4, #0]
 8018a3c:	e7de      	b.n	80189fc <_malloc_r+0xa0>
 8018a3e:	bf00      	nop
 8018a40:	2000c4d4 	.word	0x2000c4d4

08018a44 <iprintf>:
 8018a44:	b40f      	push	{r0, r1, r2, r3}
 8018a46:	4b0a      	ldr	r3, [pc, #40]	; (8018a70 <iprintf+0x2c>)
 8018a48:	b513      	push	{r0, r1, r4, lr}
 8018a4a:	681c      	ldr	r4, [r3, #0]
 8018a4c:	b124      	cbz	r4, 8018a58 <iprintf+0x14>
 8018a4e:	69a3      	ldr	r3, [r4, #24]
 8018a50:	b913      	cbnz	r3, 8018a58 <iprintf+0x14>
 8018a52:	4620      	mov	r0, r4
 8018a54:	f7ff fdc0 	bl	80185d8 <__sinit>
 8018a58:	ab05      	add	r3, sp, #20
 8018a5a:	9a04      	ldr	r2, [sp, #16]
 8018a5c:	68a1      	ldr	r1, [r4, #8]
 8018a5e:	9301      	str	r3, [sp, #4]
 8018a60:	4620      	mov	r0, r4
 8018a62:	f000 fa7d 	bl	8018f60 <_vfiprintf_r>
 8018a66:	b002      	add	sp, #8
 8018a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a6c:	b004      	add	sp, #16
 8018a6e:	4770      	bx	lr
 8018a70:	20000020 	.word	0x20000020

08018a74 <rand>:
 8018a74:	4b16      	ldr	r3, [pc, #88]	; (8018ad0 <rand+0x5c>)
 8018a76:	b510      	push	{r4, lr}
 8018a78:	681c      	ldr	r4, [r3, #0]
 8018a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018a7c:	b9b3      	cbnz	r3, 8018aac <rand+0x38>
 8018a7e:	2018      	movs	r0, #24
 8018a80:	f7ff fed4 	bl	801882c <malloc>
 8018a84:	4602      	mov	r2, r0
 8018a86:	63a0      	str	r0, [r4, #56]	; 0x38
 8018a88:	b920      	cbnz	r0, 8018a94 <rand+0x20>
 8018a8a:	4b12      	ldr	r3, [pc, #72]	; (8018ad4 <rand+0x60>)
 8018a8c:	4812      	ldr	r0, [pc, #72]	; (8018ad8 <rand+0x64>)
 8018a8e:	214e      	movs	r1, #78	; 0x4e
 8018a90:	f000 f9be 	bl	8018e10 <__assert_func>
 8018a94:	4911      	ldr	r1, [pc, #68]	; (8018adc <rand+0x68>)
 8018a96:	4b12      	ldr	r3, [pc, #72]	; (8018ae0 <rand+0x6c>)
 8018a98:	e9c0 1300 	strd	r1, r3, [r0]
 8018a9c:	4b11      	ldr	r3, [pc, #68]	; (8018ae4 <rand+0x70>)
 8018a9e:	6083      	str	r3, [r0, #8]
 8018aa0:	230b      	movs	r3, #11
 8018aa2:	8183      	strh	r3, [r0, #12]
 8018aa4:	2100      	movs	r1, #0
 8018aa6:	2001      	movs	r0, #1
 8018aa8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018aac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018aae:	4a0e      	ldr	r2, [pc, #56]	; (8018ae8 <rand+0x74>)
 8018ab0:	6920      	ldr	r0, [r4, #16]
 8018ab2:	6963      	ldr	r3, [r4, #20]
 8018ab4:	490d      	ldr	r1, [pc, #52]	; (8018aec <rand+0x78>)
 8018ab6:	4342      	muls	r2, r0
 8018ab8:	fb01 2203 	mla	r2, r1, r3, r2
 8018abc:	fba0 0101 	umull	r0, r1, r0, r1
 8018ac0:	1c43      	adds	r3, r0, #1
 8018ac2:	eb42 0001 	adc.w	r0, r2, r1
 8018ac6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018aca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018ace:	bd10      	pop	{r4, pc}
 8018ad0:	20000020 	.word	0x20000020
 8018ad4:	0801ce58 	.word	0x0801ce58
 8018ad8:	0801ce6f 	.word	0x0801ce6f
 8018adc:	abcd330e 	.word	0xabcd330e
 8018ae0:	e66d1234 	.word	0xe66d1234
 8018ae4:	0005deec 	.word	0x0005deec
 8018ae8:	5851f42d 	.word	0x5851f42d
 8018aec:	4c957f2d 	.word	0x4c957f2d

08018af0 <cleanup_glue>:
 8018af0:	b538      	push	{r3, r4, r5, lr}
 8018af2:	460c      	mov	r4, r1
 8018af4:	6809      	ldr	r1, [r1, #0]
 8018af6:	4605      	mov	r5, r0
 8018af8:	b109      	cbz	r1, 8018afe <cleanup_glue+0xe>
 8018afa:	f7ff fff9 	bl	8018af0 <cleanup_glue>
 8018afe:	4621      	mov	r1, r4
 8018b00:	4628      	mov	r0, r5
 8018b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b06:	f7ff bebf 	b.w	8018888 <_free_r>
	...

08018b0c <_reclaim_reent>:
 8018b0c:	4b2c      	ldr	r3, [pc, #176]	; (8018bc0 <_reclaim_reent+0xb4>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	4283      	cmp	r3, r0
 8018b12:	b570      	push	{r4, r5, r6, lr}
 8018b14:	4604      	mov	r4, r0
 8018b16:	d051      	beq.n	8018bbc <_reclaim_reent+0xb0>
 8018b18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018b1a:	b143      	cbz	r3, 8018b2e <_reclaim_reent+0x22>
 8018b1c:	68db      	ldr	r3, [r3, #12]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d14a      	bne.n	8018bb8 <_reclaim_reent+0xac>
 8018b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b24:	6819      	ldr	r1, [r3, #0]
 8018b26:	b111      	cbz	r1, 8018b2e <_reclaim_reent+0x22>
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f7ff fead 	bl	8018888 <_free_r>
 8018b2e:	6961      	ldr	r1, [r4, #20]
 8018b30:	b111      	cbz	r1, 8018b38 <_reclaim_reent+0x2c>
 8018b32:	4620      	mov	r0, r4
 8018b34:	f7ff fea8 	bl	8018888 <_free_r>
 8018b38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018b3a:	b111      	cbz	r1, 8018b42 <_reclaim_reent+0x36>
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	f7ff fea3 	bl	8018888 <_free_r>
 8018b42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018b44:	b111      	cbz	r1, 8018b4c <_reclaim_reent+0x40>
 8018b46:	4620      	mov	r0, r4
 8018b48:	f7ff fe9e 	bl	8018888 <_free_r>
 8018b4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018b4e:	b111      	cbz	r1, 8018b56 <_reclaim_reent+0x4a>
 8018b50:	4620      	mov	r0, r4
 8018b52:	f7ff fe99 	bl	8018888 <_free_r>
 8018b56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018b58:	b111      	cbz	r1, 8018b60 <_reclaim_reent+0x54>
 8018b5a:	4620      	mov	r0, r4
 8018b5c:	f7ff fe94 	bl	8018888 <_free_r>
 8018b60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8018b62:	b111      	cbz	r1, 8018b6a <_reclaim_reent+0x5e>
 8018b64:	4620      	mov	r0, r4
 8018b66:	f7ff fe8f 	bl	8018888 <_free_r>
 8018b6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018b6c:	b111      	cbz	r1, 8018b74 <_reclaim_reent+0x68>
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f7ff fe8a 	bl	8018888 <_free_r>
 8018b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b76:	b111      	cbz	r1, 8018b7e <_reclaim_reent+0x72>
 8018b78:	4620      	mov	r0, r4
 8018b7a:	f7ff fe85 	bl	8018888 <_free_r>
 8018b7e:	69a3      	ldr	r3, [r4, #24]
 8018b80:	b1e3      	cbz	r3, 8018bbc <_reclaim_reent+0xb0>
 8018b82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018b84:	4620      	mov	r0, r4
 8018b86:	4798      	blx	r3
 8018b88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018b8a:	b1b9      	cbz	r1, 8018bbc <_reclaim_reent+0xb0>
 8018b8c:	4620      	mov	r0, r4
 8018b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b92:	f7ff bfad 	b.w	8018af0 <cleanup_glue>
 8018b96:	5949      	ldr	r1, [r1, r5]
 8018b98:	b941      	cbnz	r1, 8018bac <_reclaim_reent+0xa0>
 8018b9a:	3504      	adds	r5, #4
 8018b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b9e:	2d80      	cmp	r5, #128	; 0x80
 8018ba0:	68d9      	ldr	r1, [r3, #12]
 8018ba2:	d1f8      	bne.n	8018b96 <_reclaim_reent+0x8a>
 8018ba4:	4620      	mov	r0, r4
 8018ba6:	f7ff fe6f 	bl	8018888 <_free_r>
 8018baa:	e7ba      	b.n	8018b22 <_reclaim_reent+0x16>
 8018bac:	680e      	ldr	r6, [r1, #0]
 8018bae:	4620      	mov	r0, r4
 8018bb0:	f7ff fe6a 	bl	8018888 <_free_r>
 8018bb4:	4631      	mov	r1, r6
 8018bb6:	e7ef      	b.n	8018b98 <_reclaim_reent+0x8c>
 8018bb8:	2500      	movs	r5, #0
 8018bba:	e7ef      	b.n	8018b9c <_reclaim_reent+0x90>
 8018bbc:	bd70      	pop	{r4, r5, r6, pc}
 8018bbe:	bf00      	nop
 8018bc0:	20000020 	.word	0x20000020

08018bc4 <_sbrk_r>:
 8018bc4:	b538      	push	{r3, r4, r5, lr}
 8018bc6:	4d06      	ldr	r5, [pc, #24]	; (8018be0 <_sbrk_r+0x1c>)
 8018bc8:	2300      	movs	r3, #0
 8018bca:	4604      	mov	r4, r0
 8018bcc:	4608      	mov	r0, r1
 8018bce:	602b      	str	r3, [r5, #0]
 8018bd0:	f7e7 ff6a 	bl	8000aa8 <_sbrk>
 8018bd4:	1c43      	adds	r3, r0, #1
 8018bd6:	d102      	bne.n	8018bde <_sbrk_r+0x1a>
 8018bd8:	682b      	ldr	r3, [r5, #0]
 8018bda:	b103      	cbz	r3, 8018bde <_sbrk_r+0x1a>
 8018bdc:	6023      	str	r3, [r4, #0]
 8018bde:	bd38      	pop	{r3, r4, r5, pc}
 8018be0:	2000c4dc 	.word	0x2000c4dc

08018be4 <__sread>:
 8018be4:	b510      	push	{r4, lr}
 8018be6:	460c      	mov	r4, r1
 8018be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bec:	f000 fc7c 	bl	80194e8 <_read_r>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	bfab      	itete	ge
 8018bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8018bf8:	181b      	addge	r3, r3, r0
 8018bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018bfe:	bfac      	ite	ge
 8018c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8018c02:	81a3      	strhlt	r3, [r4, #12]
 8018c04:	bd10      	pop	{r4, pc}

08018c06 <__swrite>:
 8018c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c0a:	461f      	mov	r7, r3
 8018c0c:	898b      	ldrh	r3, [r1, #12]
 8018c0e:	05db      	lsls	r3, r3, #23
 8018c10:	4605      	mov	r5, r0
 8018c12:	460c      	mov	r4, r1
 8018c14:	4616      	mov	r6, r2
 8018c16:	d505      	bpl.n	8018c24 <__swrite+0x1e>
 8018c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c1c:	2302      	movs	r3, #2
 8018c1e:	2200      	movs	r2, #0
 8018c20:	f000 f958 	bl	8018ed4 <_lseek_r>
 8018c24:	89a3      	ldrh	r3, [r4, #12]
 8018c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018c2e:	81a3      	strh	r3, [r4, #12]
 8018c30:	4632      	mov	r2, r6
 8018c32:	463b      	mov	r3, r7
 8018c34:	4628      	mov	r0, r5
 8018c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c3a:	f000 b869 	b.w	8018d10 <_write_r>

08018c3e <__sseek>:
 8018c3e:	b510      	push	{r4, lr}
 8018c40:	460c      	mov	r4, r1
 8018c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c46:	f000 f945 	bl	8018ed4 <_lseek_r>
 8018c4a:	1c43      	adds	r3, r0, #1
 8018c4c:	89a3      	ldrh	r3, [r4, #12]
 8018c4e:	bf15      	itete	ne
 8018c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8018c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018c5a:	81a3      	strheq	r3, [r4, #12]
 8018c5c:	bf18      	it	ne
 8018c5e:	81a3      	strhne	r3, [r4, #12]
 8018c60:	bd10      	pop	{r4, pc}

08018c62 <__sclose>:
 8018c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c66:	f000 b8f1 	b.w	8018e4c <_close_r>
	...

08018c6c <__swbuf_r>:
 8018c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c6e:	460e      	mov	r6, r1
 8018c70:	4614      	mov	r4, r2
 8018c72:	4605      	mov	r5, r0
 8018c74:	b118      	cbz	r0, 8018c7e <__swbuf_r+0x12>
 8018c76:	6983      	ldr	r3, [r0, #24]
 8018c78:	b90b      	cbnz	r3, 8018c7e <__swbuf_r+0x12>
 8018c7a:	f7ff fcad 	bl	80185d8 <__sinit>
 8018c7e:	4b21      	ldr	r3, [pc, #132]	; (8018d04 <__swbuf_r+0x98>)
 8018c80:	429c      	cmp	r4, r3
 8018c82:	d12b      	bne.n	8018cdc <__swbuf_r+0x70>
 8018c84:	686c      	ldr	r4, [r5, #4]
 8018c86:	69a3      	ldr	r3, [r4, #24]
 8018c88:	60a3      	str	r3, [r4, #8]
 8018c8a:	89a3      	ldrh	r3, [r4, #12]
 8018c8c:	071a      	lsls	r2, r3, #28
 8018c8e:	d52f      	bpl.n	8018cf0 <__swbuf_r+0x84>
 8018c90:	6923      	ldr	r3, [r4, #16]
 8018c92:	b36b      	cbz	r3, 8018cf0 <__swbuf_r+0x84>
 8018c94:	6923      	ldr	r3, [r4, #16]
 8018c96:	6820      	ldr	r0, [r4, #0]
 8018c98:	1ac0      	subs	r0, r0, r3
 8018c9a:	6963      	ldr	r3, [r4, #20]
 8018c9c:	b2f6      	uxtb	r6, r6
 8018c9e:	4283      	cmp	r3, r0
 8018ca0:	4637      	mov	r7, r6
 8018ca2:	dc04      	bgt.n	8018cae <__swbuf_r+0x42>
 8018ca4:	4621      	mov	r1, r4
 8018ca6:	4628      	mov	r0, r5
 8018ca8:	f7ff fc02 	bl	80184b0 <_fflush_r>
 8018cac:	bb30      	cbnz	r0, 8018cfc <__swbuf_r+0x90>
 8018cae:	68a3      	ldr	r3, [r4, #8]
 8018cb0:	3b01      	subs	r3, #1
 8018cb2:	60a3      	str	r3, [r4, #8]
 8018cb4:	6823      	ldr	r3, [r4, #0]
 8018cb6:	1c5a      	adds	r2, r3, #1
 8018cb8:	6022      	str	r2, [r4, #0]
 8018cba:	701e      	strb	r6, [r3, #0]
 8018cbc:	6963      	ldr	r3, [r4, #20]
 8018cbe:	3001      	adds	r0, #1
 8018cc0:	4283      	cmp	r3, r0
 8018cc2:	d004      	beq.n	8018cce <__swbuf_r+0x62>
 8018cc4:	89a3      	ldrh	r3, [r4, #12]
 8018cc6:	07db      	lsls	r3, r3, #31
 8018cc8:	d506      	bpl.n	8018cd8 <__swbuf_r+0x6c>
 8018cca:	2e0a      	cmp	r6, #10
 8018ccc:	d104      	bne.n	8018cd8 <__swbuf_r+0x6c>
 8018cce:	4621      	mov	r1, r4
 8018cd0:	4628      	mov	r0, r5
 8018cd2:	f7ff fbed 	bl	80184b0 <_fflush_r>
 8018cd6:	b988      	cbnz	r0, 8018cfc <__swbuf_r+0x90>
 8018cd8:	4638      	mov	r0, r7
 8018cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cdc:	4b0a      	ldr	r3, [pc, #40]	; (8018d08 <__swbuf_r+0x9c>)
 8018cde:	429c      	cmp	r4, r3
 8018ce0:	d101      	bne.n	8018ce6 <__swbuf_r+0x7a>
 8018ce2:	68ac      	ldr	r4, [r5, #8]
 8018ce4:	e7cf      	b.n	8018c86 <__swbuf_r+0x1a>
 8018ce6:	4b09      	ldr	r3, [pc, #36]	; (8018d0c <__swbuf_r+0xa0>)
 8018ce8:	429c      	cmp	r4, r3
 8018cea:	bf08      	it	eq
 8018cec:	68ec      	ldreq	r4, [r5, #12]
 8018cee:	e7ca      	b.n	8018c86 <__swbuf_r+0x1a>
 8018cf0:	4621      	mov	r1, r4
 8018cf2:	4628      	mov	r0, r5
 8018cf4:	f000 f81e 	bl	8018d34 <__swsetup_r>
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	d0cb      	beq.n	8018c94 <__swbuf_r+0x28>
 8018cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8018d00:	e7ea      	b.n	8018cd8 <__swbuf_r+0x6c>
 8018d02:	bf00      	nop
 8018d04:	0801ce14 	.word	0x0801ce14
 8018d08:	0801ce34 	.word	0x0801ce34
 8018d0c:	0801cdf4 	.word	0x0801cdf4

08018d10 <_write_r>:
 8018d10:	b538      	push	{r3, r4, r5, lr}
 8018d12:	4d07      	ldr	r5, [pc, #28]	; (8018d30 <_write_r+0x20>)
 8018d14:	4604      	mov	r4, r0
 8018d16:	4608      	mov	r0, r1
 8018d18:	4611      	mov	r1, r2
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	602a      	str	r2, [r5, #0]
 8018d1e:	461a      	mov	r2, r3
 8018d20:	f7e7 fe75 	bl	8000a0e <_write>
 8018d24:	1c43      	adds	r3, r0, #1
 8018d26:	d102      	bne.n	8018d2e <_write_r+0x1e>
 8018d28:	682b      	ldr	r3, [r5, #0]
 8018d2a:	b103      	cbz	r3, 8018d2e <_write_r+0x1e>
 8018d2c:	6023      	str	r3, [r4, #0]
 8018d2e:	bd38      	pop	{r3, r4, r5, pc}
 8018d30:	2000c4dc 	.word	0x2000c4dc

08018d34 <__swsetup_r>:
 8018d34:	4b32      	ldr	r3, [pc, #200]	; (8018e00 <__swsetup_r+0xcc>)
 8018d36:	b570      	push	{r4, r5, r6, lr}
 8018d38:	681d      	ldr	r5, [r3, #0]
 8018d3a:	4606      	mov	r6, r0
 8018d3c:	460c      	mov	r4, r1
 8018d3e:	b125      	cbz	r5, 8018d4a <__swsetup_r+0x16>
 8018d40:	69ab      	ldr	r3, [r5, #24]
 8018d42:	b913      	cbnz	r3, 8018d4a <__swsetup_r+0x16>
 8018d44:	4628      	mov	r0, r5
 8018d46:	f7ff fc47 	bl	80185d8 <__sinit>
 8018d4a:	4b2e      	ldr	r3, [pc, #184]	; (8018e04 <__swsetup_r+0xd0>)
 8018d4c:	429c      	cmp	r4, r3
 8018d4e:	d10f      	bne.n	8018d70 <__swsetup_r+0x3c>
 8018d50:	686c      	ldr	r4, [r5, #4]
 8018d52:	89a3      	ldrh	r3, [r4, #12]
 8018d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d58:	0719      	lsls	r1, r3, #28
 8018d5a:	d42c      	bmi.n	8018db6 <__swsetup_r+0x82>
 8018d5c:	06dd      	lsls	r5, r3, #27
 8018d5e:	d411      	bmi.n	8018d84 <__swsetup_r+0x50>
 8018d60:	2309      	movs	r3, #9
 8018d62:	6033      	str	r3, [r6, #0]
 8018d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018d68:	81a3      	strh	r3, [r4, #12]
 8018d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8018d6e:	e03e      	b.n	8018dee <__swsetup_r+0xba>
 8018d70:	4b25      	ldr	r3, [pc, #148]	; (8018e08 <__swsetup_r+0xd4>)
 8018d72:	429c      	cmp	r4, r3
 8018d74:	d101      	bne.n	8018d7a <__swsetup_r+0x46>
 8018d76:	68ac      	ldr	r4, [r5, #8]
 8018d78:	e7eb      	b.n	8018d52 <__swsetup_r+0x1e>
 8018d7a:	4b24      	ldr	r3, [pc, #144]	; (8018e0c <__swsetup_r+0xd8>)
 8018d7c:	429c      	cmp	r4, r3
 8018d7e:	bf08      	it	eq
 8018d80:	68ec      	ldreq	r4, [r5, #12]
 8018d82:	e7e6      	b.n	8018d52 <__swsetup_r+0x1e>
 8018d84:	0758      	lsls	r0, r3, #29
 8018d86:	d512      	bpl.n	8018dae <__swsetup_r+0x7a>
 8018d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d8a:	b141      	cbz	r1, 8018d9e <__swsetup_r+0x6a>
 8018d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d90:	4299      	cmp	r1, r3
 8018d92:	d002      	beq.n	8018d9a <__swsetup_r+0x66>
 8018d94:	4630      	mov	r0, r6
 8018d96:	f7ff fd77 	bl	8018888 <_free_r>
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8018d9e:	89a3      	ldrh	r3, [r4, #12]
 8018da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018da4:	81a3      	strh	r3, [r4, #12]
 8018da6:	2300      	movs	r3, #0
 8018da8:	6063      	str	r3, [r4, #4]
 8018daa:	6923      	ldr	r3, [r4, #16]
 8018dac:	6023      	str	r3, [r4, #0]
 8018dae:	89a3      	ldrh	r3, [r4, #12]
 8018db0:	f043 0308 	orr.w	r3, r3, #8
 8018db4:	81a3      	strh	r3, [r4, #12]
 8018db6:	6923      	ldr	r3, [r4, #16]
 8018db8:	b94b      	cbnz	r3, 8018dce <__swsetup_r+0x9a>
 8018dba:	89a3      	ldrh	r3, [r4, #12]
 8018dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018dc4:	d003      	beq.n	8018dce <__swsetup_r+0x9a>
 8018dc6:	4621      	mov	r1, r4
 8018dc8:	4630      	mov	r0, r6
 8018dca:	f7ff fcef 	bl	80187ac <__smakebuf_r>
 8018dce:	89a0      	ldrh	r0, [r4, #12]
 8018dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018dd4:	f010 0301 	ands.w	r3, r0, #1
 8018dd8:	d00a      	beq.n	8018df0 <__swsetup_r+0xbc>
 8018dda:	2300      	movs	r3, #0
 8018ddc:	60a3      	str	r3, [r4, #8]
 8018dde:	6963      	ldr	r3, [r4, #20]
 8018de0:	425b      	negs	r3, r3
 8018de2:	61a3      	str	r3, [r4, #24]
 8018de4:	6923      	ldr	r3, [r4, #16]
 8018de6:	b943      	cbnz	r3, 8018dfa <__swsetup_r+0xc6>
 8018de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018dec:	d1ba      	bne.n	8018d64 <__swsetup_r+0x30>
 8018dee:	bd70      	pop	{r4, r5, r6, pc}
 8018df0:	0781      	lsls	r1, r0, #30
 8018df2:	bf58      	it	pl
 8018df4:	6963      	ldrpl	r3, [r4, #20]
 8018df6:	60a3      	str	r3, [r4, #8]
 8018df8:	e7f4      	b.n	8018de4 <__swsetup_r+0xb0>
 8018dfa:	2000      	movs	r0, #0
 8018dfc:	e7f7      	b.n	8018dee <__swsetup_r+0xba>
 8018dfe:	bf00      	nop
 8018e00:	20000020 	.word	0x20000020
 8018e04:	0801ce14 	.word	0x0801ce14
 8018e08:	0801ce34 	.word	0x0801ce34
 8018e0c:	0801cdf4 	.word	0x0801cdf4

08018e10 <__assert_func>:
 8018e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018e12:	4614      	mov	r4, r2
 8018e14:	461a      	mov	r2, r3
 8018e16:	4b09      	ldr	r3, [pc, #36]	; (8018e3c <__assert_func+0x2c>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	4605      	mov	r5, r0
 8018e1c:	68d8      	ldr	r0, [r3, #12]
 8018e1e:	b14c      	cbz	r4, 8018e34 <__assert_func+0x24>
 8018e20:	4b07      	ldr	r3, [pc, #28]	; (8018e40 <__assert_func+0x30>)
 8018e22:	9100      	str	r1, [sp, #0]
 8018e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018e28:	4906      	ldr	r1, [pc, #24]	; (8018e44 <__assert_func+0x34>)
 8018e2a:	462b      	mov	r3, r5
 8018e2c:	f000 f81e 	bl	8018e6c <fiprintf>
 8018e30:	f000 fb6c 	bl	801950c <abort>
 8018e34:	4b04      	ldr	r3, [pc, #16]	; (8018e48 <__assert_func+0x38>)
 8018e36:	461c      	mov	r4, r3
 8018e38:	e7f3      	b.n	8018e22 <__assert_func+0x12>
 8018e3a:	bf00      	nop
 8018e3c:	20000020 	.word	0x20000020
 8018e40:	0801ceca 	.word	0x0801ceca
 8018e44:	0801ced7 	.word	0x0801ced7
 8018e48:	0801cf05 	.word	0x0801cf05

08018e4c <_close_r>:
 8018e4c:	b538      	push	{r3, r4, r5, lr}
 8018e4e:	4d06      	ldr	r5, [pc, #24]	; (8018e68 <_close_r+0x1c>)
 8018e50:	2300      	movs	r3, #0
 8018e52:	4604      	mov	r4, r0
 8018e54:	4608      	mov	r0, r1
 8018e56:	602b      	str	r3, [r5, #0]
 8018e58:	f7e7 fdf5 	bl	8000a46 <_close>
 8018e5c:	1c43      	adds	r3, r0, #1
 8018e5e:	d102      	bne.n	8018e66 <_close_r+0x1a>
 8018e60:	682b      	ldr	r3, [r5, #0]
 8018e62:	b103      	cbz	r3, 8018e66 <_close_r+0x1a>
 8018e64:	6023      	str	r3, [r4, #0]
 8018e66:	bd38      	pop	{r3, r4, r5, pc}
 8018e68:	2000c4dc 	.word	0x2000c4dc

08018e6c <fiprintf>:
 8018e6c:	b40e      	push	{r1, r2, r3}
 8018e6e:	b503      	push	{r0, r1, lr}
 8018e70:	4601      	mov	r1, r0
 8018e72:	ab03      	add	r3, sp, #12
 8018e74:	4805      	ldr	r0, [pc, #20]	; (8018e8c <fiprintf+0x20>)
 8018e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e7a:	6800      	ldr	r0, [r0, #0]
 8018e7c:	9301      	str	r3, [sp, #4]
 8018e7e:	f000 f86f 	bl	8018f60 <_vfiprintf_r>
 8018e82:	b002      	add	sp, #8
 8018e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e88:	b003      	add	sp, #12
 8018e8a:	4770      	bx	lr
 8018e8c:	20000020 	.word	0x20000020

08018e90 <_fstat_r>:
 8018e90:	b538      	push	{r3, r4, r5, lr}
 8018e92:	4d07      	ldr	r5, [pc, #28]	; (8018eb0 <_fstat_r+0x20>)
 8018e94:	2300      	movs	r3, #0
 8018e96:	4604      	mov	r4, r0
 8018e98:	4608      	mov	r0, r1
 8018e9a:	4611      	mov	r1, r2
 8018e9c:	602b      	str	r3, [r5, #0]
 8018e9e:	f7e7 fddd 	bl	8000a5c <_fstat>
 8018ea2:	1c43      	adds	r3, r0, #1
 8018ea4:	d102      	bne.n	8018eac <_fstat_r+0x1c>
 8018ea6:	682b      	ldr	r3, [r5, #0]
 8018ea8:	b103      	cbz	r3, 8018eac <_fstat_r+0x1c>
 8018eaa:	6023      	str	r3, [r4, #0]
 8018eac:	bd38      	pop	{r3, r4, r5, pc}
 8018eae:	bf00      	nop
 8018eb0:	2000c4dc 	.word	0x2000c4dc

08018eb4 <_isatty_r>:
 8018eb4:	b538      	push	{r3, r4, r5, lr}
 8018eb6:	4d06      	ldr	r5, [pc, #24]	; (8018ed0 <_isatty_r+0x1c>)
 8018eb8:	2300      	movs	r3, #0
 8018eba:	4604      	mov	r4, r0
 8018ebc:	4608      	mov	r0, r1
 8018ebe:	602b      	str	r3, [r5, #0]
 8018ec0:	f7e7 fddb 	bl	8000a7a <_isatty>
 8018ec4:	1c43      	adds	r3, r0, #1
 8018ec6:	d102      	bne.n	8018ece <_isatty_r+0x1a>
 8018ec8:	682b      	ldr	r3, [r5, #0]
 8018eca:	b103      	cbz	r3, 8018ece <_isatty_r+0x1a>
 8018ecc:	6023      	str	r3, [r4, #0]
 8018ece:	bd38      	pop	{r3, r4, r5, pc}
 8018ed0:	2000c4dc 	.word	0x2000c4dc

08018ed4 <_lseek_r>:
 8018ed4:	b538      	push	{r3, r4, r5, lr}
 8018ed6:	4d07      	ldr	r5, [pc, #28]	; (8018ef4 <_lseek_r+0x20>)
 8018ed8:	4604      	mov	r4, r0
 8018eda:	4608      	mov	r0, r1
 8018edc:	4611      	mov	r1, r2
 8018ede:	2200      	movs	r2, #0
 8018ee0:	602a      	str	r2, [r5, #0]
 8018ee2:	461a      	mov	r2, r3
 8018ee4:	f7e7 fdd3 	bl	8000a8e <_lseek>
 8018ee8:	1c43      	adds	r3, r0, #1
 8018eea:	d102      	bne.n	8018ef2 <_lseek_r+0x1e>
 8018eec:	682b      	ldr	r3, [r5, #0]
 8018eee:	b103      	cbz	r3, 8018ef2 <_lseek_r+0x1e>
 8018ef0:	6023      	str	r3, [r4, #0]
 8018ef2:	bd38      	pop	{r3, r4, r5, pc}
 8018ef4:	2000c4dc 	.word	0x2000c4dc

08018ef8 <__malloc_lock>:
 8018ef8:	4801      	ldr	r0, [pc, #4]	; (8018f00 <__malloc_lock+0x8>)
 8018efa:	f7ff bc30 	b.w	801875e <__retarget_lock_acquire_recursive>
 8018efe:	bf00      	nop
 8018f00:	2000c4d0 	.word	0x2000c4d0

08018f04 <__malloc_unlock>:
 8018f04:	4801      	ldr	r0, [pc, #4]	; (8018f0c <__malloc_unlock+0x8>)
 8018f06:	f7ff bc2b 	b.w	8018760 <__retarget_lock_release_recursive>
 8018f0a:	bf00      	nop
 8018f0c:	2000c4d0 	.word	0x2000c4d0

08018f10 <__sfputc_r>:
 8018f10:	6893      	ldr	r3, [r2, #8]
 8018f12:	3b01      	subs	r3, #1
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	b410      	push	{r4}
 8018f18:	6093      	str	r3, [r2, #8]
 8018f1a:	da07      	bge.n	8018f2c <__sfputc_r+0x1c>
 8018f1c:	6994      	ldr	r4, [r2, #24]
 8018f1e:	42a3      	cmp	r3, r4
 8018f20:	db01      	blt.n	8018f26 <__sfputc_r+0x16>
 8018f22:	290a      	cmp	r1, #10
 8018f24:	d102      	bne.n	8018f2c <__sfputc_r+0x1c>
 8018f26:	bc10      	pop	{r4}
 8018f28:	f7ff bea0 	b.w	8018c6c <__swbuf_r>
 8018f2c:	6813      	ldr	r3, [r2, #0]
 8018f2e:	1c58      	adds	r0, r3, #1
 8018f30:	6010      	str	r0, [r2, #0]
 8018f32:	7019      	strb	r1, [r3, #0]
 8018f34:	4608      	mov	r0, r1
 8018f36:	bc10      	pop	{r4}
 8018f38:	4770      	bx	lr

08018f3a <__sfputs_r>:
 8018f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f3c:	4606      	mov	r6, r0
 8018f3e:	460f      	mov	r7, r1
 8018f40:	4614      	mov	r4, r2
 8018f42:	18d5      	adds	r5, r2, r3
 8018f44:	42ac      	cmp	r4, r5
 8018f46:	d101      	bne.n	8018f4c <__sfputs_r+0x12>
 8018f48:	2000      	movs	r0, #0
 8018f4a:	e007      	b.n	8018f5c <__sfputs_r+0x22>
 8018f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f50:	463a      	mov	r2, r7
 8018f52:	4630      	mov	r0, r6
 8018f54:	f7ff ffdc 	bl	8018f10 <__sfputc_r>
 8018f58:	1c43      	adds	r3, r0, #1
 8018f5a:	d1f3      	bne.n	8018f44 <__sfputs_r+0xa>
 8018f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018f60 <_vfiprintf_r>:
 8018f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f64:	460d      	mov	r5, r1
 8018f66:	b09d      	sub	sp, #116	; 0x74
 8018f68:	4614      	mov	r4, r2
 8018f6a:	4698      	mov	r8, r3
 8018f6c:	4606      	mov	r6, r0
 8018f6e:	b118      	cbz	r0, 8018f78 <_vfiprintf_r+0x18>
 8018f70:	6983      	ldr	r3, [r0, #24]
 8018f72:	b90b      	cbnz	r3, 8018f78 <_vfiprintf_r+0x18>
 8018f74:	f7ff fb30 	bl	80185d8 <__sinit>
 8018f78:	4b89      	ldr	r3, [pc, #548]	; (80191a0 <_vfiprintf_r+0x240>)
 8018f7a:	429d      	cmp	r5, r3
 8018f7c:	d11b      	bne.n	8018fb6 <_vfiprintf_r+0x56>
 8018f7e:	6875      	ldr	r5, [r6, #4]
 8018f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f82:	07d9      	lsls	r1, r3, #31
 8018f84:	d405      	bmi.n	8018f92 <_vfiprintf_r+0x32>
 8018f86:	89ab      	ldrh	r3, [r5, #12]
 8018f88:	059a      	lsls	r2, r3, #22
 8018f8a:	d402      	bmi.n	8018f92 <_vfiprintf_r+0x32>
 8018f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f8e:	f7ff fbe6 	bl	801875e <__retarget_lock_acquire_recursive>
 8018f92:	89ab      	ldrh	r3, [r5, #12]
 8018f94:	071b      	lsls	r3, r3, #28
 8018f96:	d501      	bpl.n	8018f9c <_vfiprintf_r+0x3c>
 8018f98:	692b      	ldr	r3, [r5, #16]
 8018f9a:	b9eb      	cbnz	r3, 8018fd8 <_vfiprintf_r+0x78>
 8018f9c:	4629      	mov	r1, r5
 8018f9e:	4630      	mov	r0, r6
 8018fa0:	f7ff fec8 	bl	8018d34 <__swsetup_r>
 8018fa4:	b1c0      	cbz	r0, 8018fd8 <_vfiprintf_r+0x78>
 8018fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018fa8:	07dc      	lsls	r4, r3, #31
 8018faa:	d50e      	bpl.n	8018fca <_vfiprintf_r+0x6a>
 8018fac:	f04f 30ff 	mov.w	r0, #4294967295
 8018fb0:	b01d      	add	sp, #116	; 0x74
 8018fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb6:	4b7b      	ldr	r3, [pc, #492]	; (80191a4 <_vfiprintf_r+0x244>)
 8018fb8:	429d      	cmp	r5, r3
 8018fba:	d101      	bne.n	8018fc0 <_vfiprintf_r+0x60>
 8018fbc:	68b5      	ldr	r5, [r6, #8]
 8018fbe:	e7df      	b.n	8018f80 <_vfiprintf_r+0x20>
 8018fc0:	4b79      	ldr	r3, [pc, #484]	; (80191a8 <_vfiprintf_r+0x248>)
 8018fc2:	429d      	cmp	r5, r3
 8018fc4:	bf08      	it	eq
 8018fc6:	68f5      	ldreq	r5, [r6, #12]
 8018fc8:	e7da      	b.n	8018f80 <_vfiprintf_r+0x20>
 8018fca:	89ab      	ldrh	r3, [r5, #12]
 8018fcc:	0598      	lsls	r0, r3, #22
 8018fce:	d4ed      	bmi.n	8018fac <_vfiprintf_r+0x4c>
 8018fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018fd2:	f7ff fbc5 	bl	8018760 <__retarget_lock_release_recursive>
 8018fd6:	e7e9      	b.n	8018fac <_vfiprintf_r+0x4c>
 8018fd8:	2300      	movs	r3, #0
 8018fda:	9309      	str	r3, [sp, #36]	; 0x24
 8018fdc:	2320      	movs	r3, #32
 8018fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018fe6:	2330      	movs	r3, #48	; 0x30
 8018fe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80191ac <_vfiprintf_r+0x24c>
 8018fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ff0:	f04f 0901 	mov.w	r9, #1
 8018ff4:	4623      	mov	r3, r4
 8018ff6:	469a      	mov	sl, r3
 8018ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ffc:	b10a      	cbz	r2, 8019002 <_vfiprintf_r+0xa2>
 8018ffe:	2a25      	cmp	r2, #37	; 0x25
 8019000:	d1f9      	bne.n	8018ff6 <_vfiprintf_r+0x96>
 8019002:	ebba 0b04 	subs.w	fp, sl, r4
 8019006:	d00b      	beq.n	8019020 <_vfiprintf_r+0xc0>
 8019008:	465b      	mov	r3, fp
 801900a:	4622      	mov	r2, r4
 801900c:	4629      	mov	r1, r5
 801900e:	4630      	mov	r0, r6
 8019010:	f7ff ff93 	bl	8018f3a <__sfputs_r>
 8019014:	3001      	adds	r0, #1
 8019016:	f000 80aa 	beq.w	801916e <_vfiprintf_r+0x20e>
 801901a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801901c:	445a      	add	r2, fp
 801901e:	9209      	str	r2, [sp, #36]	; 0x24
 8019020:	f89a 3000 	ldrb.w	r3, [sl]
 8019024:	2b00      	cmp	r3, #0
 8019026:	f000 80a2 	beq.w	801916e <_vfiprintf_r+0x20e>
 801902a:	2300      	movs	r3, #0
 801902c:	f04f 32ff 	mov.w	r2, #4294967295
 8019030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019034:	f10a 0a01 	add.w	sl, sl, #1
 8019038:	9304      	str	r3, [sp, #16]
 801903a:	9307      	str	r3, [sp, #28]
 801903c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019040:	931a      	str	r3, [sp, #104]	; 0x68
 8019042:	4654      	mov	r4, sl
 8019044:	2205      	movs	r2, #5
 8019046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801904a:	4858      	ldr	r0, [pc, #352]	; (80191ac <_vfiprintf_r+0x24c>)
 801904c:	f7e7 f8c0 	bl	80001d0 <memchr>
 8019050:	9a04      	ldr	r2, [sp, #16]
 8019052:	b9d8      	cbnz	r0, 801908c <_vfiprintf_r+0x12c>
 8019054:	06d1      	lsls	r1, r2, #27
 8019056:	bf44      	itt	mi
 8019058:	2320      	movmi	r3, #32
 801905a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801905e:	0713      	lsls	r3, r2, #28
 8019060:	bf44      	itt	mi
 8019062:	232b      	movmi	r3, #43	; 0x2b
 8019064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019068:	f89a 3000 	ldrb.w	r3, [sl]
 801906c:	2b2a      	cmp	r3, #42	; 0x2a
 801906e:	d015      	beq.n	801909c <_vfiprintf_r+0x13c>
 8019070:	9a07      	ldr	r2, [sp, #28]
 8019072:	4654      	mov	r4, sl
 8019074:	2000      	movs	r0, #0
 8019076:	f04f 0c0a 	mov.w	ip, #10
 801907a:	4621      	mov	r1, r4
 801907c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019080:	3b30      	subs	r3, #48	; 0x30
 8019082:	2b09      	cmp	r3, #9
 8019084:	d94e      	bls.n	8019124 <_vfiprintf_r+0x1c4>
 8019086:	b1b0      	cbz	r0, 80190b6 <_vfiprintf_r+0x156>
 8019088:	9207      	str	r2, [sp, #28]
 801908a:	e014      	b.n	80190b6 <_vfiprintf_r+0x156>
 801908c:	eba0 0308 	sub.w	r3, r0, r8
 8019090:	fa09 f303 	lsl.w	r3, r9, r3
 8019094:	4313      	orrs	r3, r2
 8019096:	9304      	str	r3, [sp, #16]
 8019098:	46a2      	mov	sl, r4
 801909a:	e7d2      	b.n	8019042 <_vfiprintf_r+0xe2>
 801909c:	9b03      	ldr	r3, [sp, #12]
 801909e:	1d19      	adds	r1, r3, #4
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	9103      	str	r1, [sp, #12]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	bfbb      	ittet	lt
 80190a8:	425b      	neglt	r3, r3
 80190aa:	f042 0202 	orrlt.w	r2, r2, #2
 80190ae:	9307      	strge	r3, [sp, #28]
 80190b0:	9307      	strlt	r3, [sp, #28]
 80190b2:	bfb8      	it	lt
 80190b4:	9204      	strlt	r2, [sp, #16]
 80190b6:	7823      	ldrb	r3, [r4, #0]
 80190b8:	2b2e      	cmp	r3, #46	; 0x2e
 80190ba:	d10c      	bne.n	80190d6 <_vfiprintf_r+0x176>
 80190bc:	7863      	ldrb	r3, [r4, #1]
 80190be:	2b2a      	cmp	r3, #42	; 0x2a
 80190c0:	d135      	bne.n	801912e <_vfiprintf_r+0x1ce>
 80190c2:	9b03      	ldr	r3, [sp, #12]
 80190c4:	1d1a      	adds	r2, r3, #4
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	9203      	str	r2, [sp, #12]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	bfb8      	it	lt
 80190ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80190d2:	3402      	adds	r4, #2
 80190d4:	9305      	str	r3, [sp, #20]
 80190d6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80191b0 <_vfiprintf_r+0x250>
 80190da:	7821      	ldrb	r1, [r4, #0]
 80190dc:	2203      	movs	r2, #3
 80190de:	4650      	mov	r0, sl
 80190e0:	f7e7 f876 	bl	80001d0 <memchr>
 80190e4:	b140      	cbz	r0, 80190f8 <_vfiprintf_r+0x198>
 80190e6:	2340      	movs	r3, #64	; 0x40
 80190e8:	eba0 000a 	sub.w	r0, r0, sl
 80190ec:	fa03 f000 	lsl.w	r0, r3, r0
 80190f0:	9b04      	ldr	r3, [sp, #16]
 80190f2:	4303      	orrs	r3, r0
 80190f4:	3401      	adds	r4, #1
 80190f6:	9304      	str	r3, [sp, #16]
 80190f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190fc:	482d      	ldr	r0, [pc, #180]	; (80191b4 <_vfiprintf_r+0x254>)
 80190fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019102:	2206      	movs	r2, #6
 8019104:	f7e7 f864 	bl	80001d0 <memchr>
 8019108:	2800      	cmp	r0, #0
 801910a:	d03f      	beq.n	801918c <_vfiprintf_r+0x22c>
 801910c:	4b2a      	ldr	r3, [pc, #168]	; (80191b8 <_vfiprintf_r+0x258>)
 801910e:	bb1b      	cbnz	r3, 8019158 <_vfiprintf_r+0x1f8>
 8019110:	9b03      	ldr	r3, [sp, #12]
 8019112:	3307      	adds	r3, #7
 8019114:	f023 0307 	bic.w	r3, r3, #7
 8019118:	3308      	adds	r3, #8
 801911a:	9303      	str	r3, [sp, #12]
 801911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801911e:	443b      	add	r3, r7
 8019120:	9309      	str	r3, [sp, #36]	; 0x24
 8019122:	e767      	b.n	8018ff4 <_vfiprintf_r+0x94>
 8019124:	fb0c 3202 	mla	r2, ip, r2, r3
 8019128:	460c      	mov	r4, r1
 801912a:	2001      	movs	r0, #1
 801912c:	e7a5      	b.n	801907a <_vfiprintf_r+0x11a>
 801912e:	2300      	movs	r3, #0
 8019130:	3401      	adds	r4, #1
 8019132:	9305      	str	r3, [sp, #20]
 8019134:	4619      	mov	r1, r3
 8019136:	f04f 0c0a 	mov.w	ip, #10
 801913a:	4620      	mov	r0, r4
 801913c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019140:	3a30      	subs	r2, #48	; 0x30
 8019142:	2a09      	cmp	r2, #9
 8019144:	d903      	bls.n	801914e <_vfiprintf_r+0x1ee>
 8019146:	2b00      	cmp	r3, #0
 8019148:	d0c5      	beq.n	80190d6 <_vfiprintf_r+0x176>
 801914a:	9105      	str	r1, [sp, #20]
 801914c:	e7c3      	b.n	80190d6 <_vfiprintf_r+0x176>
 801914e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019152:	4604      	mov	r4, r0
 8019154:	2301      	movs	r3, #1
 8019156:	e7f0      	b.n	801913a <_vfiprintf_r+0x1da>
 8019158:	ab03      	add	r3, sp, #12
 801915a:	9300      	str	r3, [sp, #0]
 801915c:	462a      	mov	r2, r5
 801915e:	4b17      	ldr	r3, [pc, #92]	; (80191bc <_vfiprintf_r+0x25c>)
 8019160:	a904      	add	r1, sp, #16
 8019162:	4630      	mov	r0, r6
 8019164:	f3af 8000 	nop.w
 8019168:	4607      	mov	r7, r0
 801916a:	1c78      	adds	r0, r7, #1
 801916c:	d1d6      	bne.n	801911c <_vfiprintf_r+0x1bc>
 801916e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019170:	07d9      	lsls	r1, r3, #31
 8019172:	d405      	bmi.n	8019180 <_vfiprintf_r+0x220>
 8019174:	89ab      	ldrh	r3, [r5, #12]
 8019176:	059a      	lsls	r2, r3, #22
 8019178:	d402      	bmi.n	8019180 <_vfiprintf_r+0x220>
 801917a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801917c:	f7ff faf0 	bl	8018760 <__retarget_lock_release_recursive>
 8019180:	89ab      	ldrh	r3, [r5, #12]
 8019182:	065b      	lsls	r3, r3, #25
 8019184:	f53f af12 	bmi.w	8018fac <_vfiprintf_r+0x4c>
 8019188:	9809      	ldr	r0, [sp, #36]	; 0x24
 801918a:	e711      	b.n	8018fb0 <_vfiprintf_r+0x50>
 801918c:	ab03      	add	r3, sp, #12
 801918e:	9300      	str	r3, [sp, #0]
 8019190:	462a      	mov	r2, r5
 8019192:	4b0a      	ldr	r3, [pc, #40]	; (80191bc <_vfiprintf_r+0x25c>)
 8019194:	a904      	add	r1, sp, #16
 8019196:	4630      	mov	r0, r6
 8019198:	f000 f880 	bl	801929c <_printf_i>
 801919c:	e7e4      	b.n	8019168 <_vfiprintf_r+0x208>
 801919e:	bf00      	nop
 80191a0:	0801ce14 	.word	0x0801ce14
 80191a4:	0801ce34 	.word	0x0801ce34
 80191a8:	0801cdf4 	.word	0x0801cdf4
 80191ac:	0801cf06 	.word	0x0801cf06
 80191b0:	0801cf0c 	.word	0x0801cf0c
 80191b4:	0801cf10 	.word	0x0801cf10
 80191b8:	00000000 	.word	0x00000000
 80191bc:	08018f3b 	.word	0x08018f3b

080191c0 <_printf_common>:
 80191c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191c4:	4616      	mov	r6, r2
 80191c6:	4699      	mov	r9, r3
 80191c8:	688a      	ldr	r2, [r1, #8]
 80191ca:	690b      	ldr	r3, [r1, #16]
 80191cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80191d0:	4293      	cmp	r3, r2
 80191d2:	bfb8      	it	lt
 80191d4:	4613      	movlt	r3, r2
 80191d6:	6033      	str	r3, [r6, #0]
 80191d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80191dc:	4607      	mov	r7, r0
 80191de:	460c      	mov	r4, r1
 80191e0:	b10a      	cbz	r2, 80191e6 <_printf_common+0x26>
 80191e2:	3301      	adds	r3, #1
 80191e4:	6033      	str	r3, [r6, #0]
 80191e6:	6823      	ldr	r3, [r4, #0]
 80191e8:	0699      	lsls	r1, r3, #26
 80191ea:	bf42      	ittt	mi
 80191ec:	6833      	ldrmi	r3, [r6, #0]
 80191ee:	3302      	addmi	r3, #2
 80191f0:	6033      	strmi	r3, [r6, #0]
 80191f2:	6825      	ldr	r5, [r4, #0]
 80191f4:	f015 0506 	ands.w	r5, r5, #6
 80191f8:	d106      	bne.n	8019208 <_printf_common+0x48>
 80191fa:	f104 0a19 	add.w	sl, r4, #25
 80191fe:	68e3      	ldr	r3, [r4, #12]
 8019200:	6832      	ldr	r2, [r6, #0]
 8019202:	1a9b      	subs	r3, r3, r2
 8019204:	42ab      	cmp	r3, r5
 8019206:	dc26      	bgt.n	8019256 <_printf_common+0x96>
 8019208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801920c:	1e13      	subs	r3, r2, #0
 801920e:	6822      	ldr	r2, [r4, #0]
 8019210:	bf18      	it	ne
 8019212:	2301      	movne	r3, #1
 8019214:	0692      	lsls	r2, r2, #26
 8019216:	d42b      	bmi.n	8019270 <_printf_common+0xb0>
 8019218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801921c:	4649      	mov	r1, r9
 801921e:	4638      	mov	r0, r7
 8019220:	47c0      	blx	r8
 8019222:	3001      	adds	r0, #1
 8019224:	d01e      	beq.n	8019264 <_printf_common+0xa4>
 8019226:	6823      	ldr	r3, [r4, #0]
 8019228:	68e5      	ldr	r5, [r4, #12]
 801922a:	6832      	ldr	r2, [r6, #0]
 801922c:	f003 0306 	and.w	r3, r3, #6
 8019230:	2b04      	cmp	r3, #4
 8019232:	bf08      	it	eq
 8019234:	1aad      	subeq	r5, r5, r2
 8019236:	68a3      	ldr	r3, [r4, #8]
 8019238:	6922      	ldr	r2, [r4, #16]
 801923a:	bf0c      	ite	eq
 801923c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019240:	2500      	movne	r5, #0
 8019242:	4293      	cmp	r3, r2
 8019244:	bfc4      	itt	gt
 8019246:	1a9b      	subgt	r3, r3, r2
 8019248:	18ed      	addgt	r5, r5, r3
 801924a:	2600      	movs	r6, #0
 801924c:	341a      	adds	r4, #26
 801924e:	42b5      	cmp	r5, r6
 8019250:	d11a      	bne.n	8019288 <_printf_common+0xc8>
 8019252:	2000      	movs	r0, #0
 8019254:	e008      	b.n	8019268 <_printf_common+0xa8>
 8019256:	2301      	movs	r3, #1
 8019258:	4652      	mov	r2, sl
 801925a:	4649      	mov	r1, r9
 801925c:	4638      	mov	r0, r7
 801925e:	47c0      	blx	r8
 8019260:	3001      	adds	r0, #1
 8019262:	d103      	bne.n	801926c <_printf_common+0xac>
 8019264:	f04f 30ff 	mov.w	r0, #4294967295
 8019268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801926c:	3501      	adds	r5, #1
 801926e:	e7c6      	b.n	80191fe <_printf_common+0x3e>
 8019270:	18e1      	adds	r1, r4, r3
 8019272:	1c5a      	adds	r2, r3, #1
 8019274:	2030      	movs	r0, #48	; 0x30
 8019276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801927a:	4422      	add	r2, r4
 801927c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019284:	3302      	adds	r3, #2
 8019286:	e7c7      	b.n	8019218 <_printf_common+0x58>
 8019288:	2301      	movs	r3, #1
 801928a:	4622      	mov	r2, r4
 801928c:	4649      	mov	r1, r9
 801928e:	4638      	mov	r0, r7
 8019290:	47c0      	blx	r8
 8019292:	3001      	adds	r0, #1
 8019294:	d0e6      	beq.n	8019264 <_printf_common+0xa4>
 8019296:	3601      	adds	r6, #1
 8019298:	e7d9      	b.n	801924e <_printf_common+0x8e>
	...

0801929c <_printf_i>:
 801929c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80192a0:	7e0f      	ldrb	r7, [r1, #24]
 80192a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80192a4:	2f78      	cmp	r7, #120	; 0x78
 80192a6:	4691      	mov	r9, r2
 80192a8:	4680      	mov	r8, r0
 80192aa:	460c      	mov	r4, r1
 80192ac:	469a      	mov	sl, r3
 80192ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80192b2:	d807      	bhi.n	80192c4 <_printf_i+0x28>
 80192b4:	2f62      	cmp	r7, #98	; 0x62
 80192b6:	d80a      	bhi.n	80192ce <_printf_i+0x32>
 80192b8:	2f00      	cmp	r7, #0
 80192ba:	f000 80d8 	beq.w	801946e <_printf_i+0x1d2>
 80192be:	2f58      	cmp	r7, #88	; 0x58
 80192c0:	f000 80a3 	beq.w	801940a <_printf_i+0x16e>
 80192c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80192c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80192cc:	e03a      	b.n	8019344 <_printf_i+0xa8>
 80192ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80192d2:	2b15      	cmp	r3, #21
 80192d4:	d8f6      	bhi.n	80192c4 <_printf_i+0x28>
 80192d6:	a101      	add	r1, pc, #4	; (adr r1, 80192dc <_printf_i+0x40>)
 80192d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80192dc:	08019335 	.word	0x08019335
 80192e0:	08019349 	.word	0x08019349
 80192e4:	080192c5 	.word	0x080192c5
 80192e8:	080192c5 	.word	0x080192c5
 80192ec:	080192c5 	.word	0x080192c5
 80192f0:	080192c5 	.word	0x080192c5
 80192f4:	08019349 	.word	0x08019349
 80192f8:	080192c5 	.word	0x080192c5
 80192fc:	080192c5 	.word	0x080192c5
 8019300:	080192c5 	.word	0x080192c5
 8019304:	080192c5 	.word	0x080192c5
 8019308:	08019455 	.word	0x08019455
 801930c:	08019379 	.word	0x08019379
 8019310:	08019437 	.word	0x08019437
 8019314:	080192c5 	.word	0x080192c5
 8019318:	080192c5 	.word	0x080192c5
 801931c:	08019477 	.word	0x08019477
 8019320:	080192c5 	.word	0x080192c5
 8019324:	08019379 	.word	0x08019379
 8019328:	080192c5 	.word	0x080192c5
 801932c:	080192c5 	.word	0x080192c5
 8019330:	0801943f 	.word	0x0801943f
 8019334:	682b      	ldr	r3, [r5, #0]
 8019336:	1d1a      	adds	r2, r3, #4
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	602a      	str	r2, [r5, #0]
 801933c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019344:	2301      	movs	r3, #1
 8019346:	e0a3      	b.n	8019490 <_printf_i+0x1f4>
 8019348:	6820      	ldr	r0, [r4, #0]
 801934a:	6829      	ldr	r1, [r5, #0]
 801934c:	0606      	lsls	r6, r0, #24
 801934e:	f101 0304 	add.w	r3, r1, #4
 8019352:	d50a      	bpl.n	801936a <_printf_i+0xce>
 8019354:	680e      	ldr	r6, [r1, #0]
 8019356:	602b      	str	r3, [r5, #0]
 8019358:	2e00      	cmp	r6, #0
 801935a:	da03      	bge.n	8019364 <_printf_i+0xc8>
 801935c:	232d      	movs	r3, #45	; 0x2d
 801935e:	4276      	negs	r6, r6
 8019360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019364:	485e      	ldr	r0, [pc, #376]	; (80194e0 <_printf_i+0x244>)
 8019366:	230a      	movs	r3, #10
 8019368:	e019      	b.n	801939e <_printf_i+0x102>
 801936a:	680e      	ldr	r6, [r1, #0]
 801936c:	602b      	str	r3, [r5, #0]
 801936e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019372:	bf18      	it	ne
 8019374:	b236      	sxthne	r6, r6
 8019376:	e7ef      	b.n	8019358 <_printf_i+0xbc>
 8019378:	682b      	ldr	r3, [r5, #0]
 801937a:	6820      	ldr	r0, [r4, #0]
 801937c:	1d19      	adds	r1, r3, #4
 801937e:	6029      	str	r1, [r5, #0]
 8019380:	0601      	lsls	r1, r0, #24
 8019382:	d501      	bpl.n	8019388 <_printf_i+0xec>
 8019384:	681e      	ldr	r6, [r3, #0]
 8019386:	e002      	b.n	801938e <_printf_i+0xf2>
 8019388:	0646      	lsls	r6, r0, #25
 801938a:	d5fb      	bpl.n	8019384 <_printf_i+0xe8>
 801938c:	881e      	ldrh	r6, [r3, #0]
 801938e:	4854      	ldr	r0, [pc, #336]	; (80194e0 <_printf_i+0x244>)
 8019390:	2f6f      	cmp	r7, #111	; 0x6f
 8019392:	bf0c      	ite	eq
 8019394:	2308      	moveq	r3, #8
 8019396:	230a      	movne	r3, #10
 8019398:	2100      	movs	r1, #0
 801939a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801939e:	6865      	ldr	r5, [r4, #4]
 80193a0:	60a5      	str	r5, [r4, #8]
 80193a2:	2d00      	cmp	r5, #0
 80193a4:	bfa2      	ittt	ge
 80193a6:	6821      	ldrge	r1, [r4, #0]
 80193a8:	f021 0104 	bicge.w	r1, r1, #4
 80193ac:	6021      	strge	r1, [r4, #0]
 80193ae:	b90e      	cbnz	r6, 80193b4 <_printf_i+0x118>
 80193b0:	2d00      	cmp	r5, #0
 80193b2:	d04d      	beq.n	8019450 <_printf_i+0x1b4>
 80193b4:	4615      	mov	r5, r2
 80193b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80193ba:	fb03 6711 	mls	r7, r3, r1, r6
 80193be:	5dc7      	ldrb	r7, [r0, r7]
 80193c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80193c4:	4637      	mov	r7, r6
 80193c6:	42bb      	cmp	r3, r7
 80193c8:	460e      	mov	r6, r1
 80193ca:	d9f4      	bls.n	80193b6 <_printf_i+0x11a>
 80193cc:	2b08      	cmp	r3, #8
 80193ce:	d10b      	bne.n	80193e8 <_printf_i+0x14c>
 80193d0:	6823      	ldr	r3, [r4, #0]
 80193d2:	07de      	lsls	r6, r3, #31
 80193d4:	d508      	bpl.n	80193e8 <_printf_i+0x14c>
 80193d6:	6923      	ldr	r3, [r4, #16]
 80193d8:	6861      	ldr	r1, [r4, #4]
 80193da:	4299      	cmp	r1, r3
 80193dc:	bfde      	ittt	le
 80193de:	2330      	movle	r3, #48	; 0x30
 80193e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80193e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80193e8:	1b52      	subs	r2, r2, r5
 80193ea:	6122      	str	r2, [r4, #16]
 80193ec:	f8cd a000 	str.w	sl, [sp]
 80193f0:	464b      	mov	r3, r9
 80193f2:	aa03      	add	r2, sp, #12
 80193f4:	4621      	mov	r1, r4
 80193f6:	4640      	mov	r0, r8
 80193f8:	f7ff fee2 	bl	80191c0 <_printf_common>
 80193fc:	3001      	adds	r0, #1
 80193fe:	d14c      	bne.n	801949a <_printf_i+0x1fe>
 8019400:	f04f 30ff 	mov.w	r0, #4294967295
 8019404:	b004      	add	sp, #16
 8019406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801940a:	4835      	ldr	r0, [pc, #212]	; (80194e0 <_printf_i+0x244>)
 801940c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019410:	6829      	ldr	r1, [r5, #0]
 8019412:	6823      	ldr	r3, [r4, #0]
 8019414:	f851 6b04 	ldr.w	r6, [r1], #4
 8019418:	6029      	str	r1, [r5, #0]
 801941a:	061d      	lsls	r5, r3, #24
 801941c:	d514      	bpl.n	8019448 <_printf_i+0x1ac>
 801941e:	07df      	lsls	r7, r3, #31
 8019420:	bf44      	itt	mi
 8019422:	f043 0320 	orrmi.w	r3, r3, #32
 8019426:	6023      	strmi	r3, [r4, #0]
 8019428:	b91e      	cbnz	r6, 8019432 <_printf_i+0x196>
 801942a:	6823      	ldr	r3, [r4, #0]
 801942c:	f023 0320 	bic.w	r3, r3, #32
 8019430:	6023      	str	r3, [r4, #0]
 8019432:	2310      	movs	r3, #16
 8019434:	e7b0      	b.n	8019398 <_printf_i+0xfc>
 8019436:	6823      	ldr	r3, [r4, #0]
 8019438:	f043 0320 	orr.w	r3, r3, #32
 801943c:	6023      	str	r3, [r4, #0]
 801943e:	2378      	movs	r3, #120	; 0x78
 8019440:	4828      	ldr	r0, [pc, #160]	; (80194e4 <_printf_i+0x248>)
 8019442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019446:	e7e3      	b.n	8019410 <_printf_i+0x174>
 8019448:	0659      	lsls	r1, r3, #25
 801944a:	bf48      	it	mi
 801944c:	b2b6      	uxthmi	r6, r6
 801944e:	e7e6      	b.n	801941e <_printf_i+0x182>
 8019450:	4615      	mov	r5, r2
 8019452:	e7bb      	b.n	80193cc <_printf_i+0x130>
 8019454:	682b      	ldr	r3, [r5, #0]
 8019456:	6826      	ldr	r6, [r4, #0]
 8019458:	6961      	ldr	r1, [r4, #20]
 801945a:	1d18      	adds	r0, r3, #4
 801945c:	6028      	str	r0, [r5, #0]
 801945e:	0635      	lsls	r5, r6, #24
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	d501      	bpl.n	8019468 <_printf_i+0x1cc>
 8019464:	6019      	str	r1, [r3, #0]
 8019466:	e002      	b.n	801946e <_printf_i+0x1d2>
 8019468:	0670      	lsls	r0, r6, #25
 801946a:	d5fb      	bpl.n	8019464 <_printf_i+0x1c8>
 801946c:	8019      	strh	r1, [r3, #0]
 801946e:	2300      	movs	r3, #0
 8019470:	6123      	str	r3, [r4, #16]
 8019472:	4615      	mov	r5, r2
 8019474:	e7ba      	b.n	80193ec <_printf_i+0x150>
 8019476:	682b      	ldr	r3, [r5, #0]
 8019478:	1d1a      	adds	r2, r3, #4
 801947a:	602a      	str	r2, [r5, #0]
 801947c:	681d      	ldr	r5, [r3, #0]
 801947e:	6862      	ldr	r2, [r4, #4]
 8019480:	2100      	movs	r1, #0
 8019482:	4628      	mov	r0, r5
 8019484:	f7e6 fea4 	bl	80001d0 <memchr>
 8019488:	b108      	cbz	r0, 801948e <_printf_i+0x1f2>
 801948a:	1b40      	subs	r0, r0, r5
 801948c:	6060      	str	r0, [r4, #4]
 801948e:	6863      	ldr	r3, [r4, #4]
 8019490:	6123      	str	r3, [r4, #16]
 8019492:	2300      	movs	r3, #0
 8019494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019498:	e7a8      	b.n	80193ec <_printf_i+0x150>
 801949a:	6923      	ldr	r3, [r4, #16]
 801949c:	462a      	mov	r2, r5
 801949e:	4649      	mov	r1, r9
 80194a0:	4640      	mov	r0, r8
 80194a2:	47d0      	blx	sl
 80194a4:	3001      	adds	r0, #1
 80194a6:	d0ab      	beq.n	8019400 <_printf_i+0x164>
 80194a8:	6823      	ldr	r3, [r4, #0]
 80194aa:	079b      	lsls	r3, r3, #30
 80194ac:	d413      	bmi.n	80194d6 <_printf_i+0x23a>
 80194ae:	68e0      	ldr	r0, [r4, #12]
 80194b0:	9b03      	ldr	r3, [sp, #12]
 80194b2:	4298      	cmp	r0, r3
 80194b4:	bfb8      	it	lt
 80194b6:	4618      	movlt	r0, r3
 80194b8:	e7a4      	b.n	8019404 <_printf_i+0x168>
 80194ba:	2301      	movs	r3, #1
 80194bc:	4632      	mov	r2, r6
 80194be:	4649      	mov	r1, r9
 80194c0:	4640      	mov	r0, r8
 80194c2:	47d0      	blx	sl
 80194c4:	3001      	adds	r0, #1
 80194c6:	d09b      	beq.n	8019400 <_printf_i+0x164>
 80194c8:	3501      	adds	r5, #1
 80194ca:	68e3      	ldr	r3, [r4, #12]
 80194cc:	9903      	ldr	r1, [sp, #12]
 80194ce:	1a5b      	subs	r3, r3, r1
 80194d0:	42ab      	cmp	r3, r5
 80194d2:	dcf2      	bgt.n	80194ba <_printf_i+0x21e>
 80194d4:	e7eb      	b.n	80194ae <_printf_i+0x212>
 80194d6:	2500      	movs	r5, #0
 80194d8:	f104 0619 	add.w	r6, r4, #25
 80194dc:	e7f5      	b.n	80194ca <_printf_i+0x22e>
 80194de:	bf00      	nop
 80194e0:	0801cf17 	.word	0x0801cf17
 80194e4:	0801cf28 	.word	0x0801cf28

080194e8 <_read_r>:
 80194e8:	b538      	push	{r3, r4, r5, lr}
 80194ea:	4d07      	ldr	r5, [pc, #28]	; (8019508 <_read_r+0x20>)
 80194ec:	4604      	mov	r4, r0
 80194ee:	4608      	mov	r0, r1
 80194f0:	4611      	mov	r1, r2
 80194f2:	2200      	movs	r2, #0
 80194f4:	602a      	str	r2, [r5, #0]
 80194f6:	461a      	mov	r2, r3
 80194f8:	f7e7 fa6c 	bl	80009d4 <_read>
 80194fc:	1c43      	adds	r3, r0, #1
 80194fe:	d102      	bne.n	8019506 <_read_r+0x1e>
 8019500:	682b      	ldr	r3, [r5, #0]
 8019502:	b103      	cbz	r3, 8019506 <_read_r+0x1e>
 8019504:	6023      	str	r3, [r4, #0]
 8019506:	bd38      	pop	{r3, r4, r5, pc}
 8019508:	2000c4dc 	.word	0x2000c4dc

0801950c <abort>:
 801950c:	b508      	push	{r3, lr}
 801950e:	2006      	movs	r0, #6
 8019510:	f000 f82c 	bl	801956c <raise>
 8019514:	2001      	movs	r0, #1
 8019516:	f7e7 fa53 	bl	80009c0 <_exit>

0801951a <_raise_r>:
 801951a:	291f      	cmp	r1, #31
 801951c:	b538      	push	{r3, r4, r5, lr}
 801951e:	4604      	mov	r4, r0
 8019520:	460d      	mov	r5, r1
 8019522:	d904      	bls.n	801952e <_raise_r+0x14>
 8019524:	2316      	movs	r3, #22
 8019526:	6003      	str	r3, [r0, #0]
 8019528:	f04f 30ff 	mov.w	r0, #4294967295
 801952c:	bd38      	pop	{r3, r4, r5, pc}
 801952e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019530:	b112      	cbz	r2, 8019538 <_raise_r+0x1e>
 8019532:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019536:	b94b      	cbnz	r3, 801954c <_raise_r+0x32>
 8019538:	4620      	mov	r0, r4
 801953a:	f000 f831 	bl	80195a0 <_getpid_r>
 801953e:	462a      	mov	r2, r5
 8019540:	4601      	mov	r1, r0
 8019542:	4620      	mov	r0, r4
 8019544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019548:	f000 b818 	b.w	801957c <_kill_r>
 801954c:	2b01      	cmp	r3, #1
 801954e:	d00a      	beq.n	8019566 <_raise_r+0x4c>
 8019550:	1c59      	adds	r1, r3, #1
 8019552:	d103      	bne.n	801955c <_raise_r+0x42>
 8019554:	2316      	movs	r3, #22
 8019556:	6003      	str	r3, [r0, #0]
 8019558:	2001      	movs	r0, #1
 801955a:	e7e7      	b.n	801952c <_raise_r+0x12>
 801955c:	2400      	movs	r4, #0
 801955e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019562:	4628      	mov	r0, r5
 8019564:	4798      	blx	r3
 8019566:	2000      	movs	r0, #0
 8019568:	e7e0      	b.n	801952c <_raise_r+0x12>
	...

0801956c <raise>:
 801956c:	4b02      	ldr	r3, [pc, #8]	; (8019578 <raise+0xc>)
 801956e:	4601      	mov	r1, r0
 8019570:	6818      	ldr	r0, [r3, #0]
 8019572:	f7ff bfd2 	b.w	801951a <_raise_r>
 8019576:	bf00      	nop
 8019578:	20000020 	.word	0x20000020

0801957c <_kill_r>:
 801957c:	b538      	push	{r3, r4, r5, lr}
 801957e:	4d07      	ldr	r5, [pc, #28]	; (801959c <_kill_r+0x20>)
 8019580:	2300      	movs	r3, #0
 8019582:	4604      	mov	r4, r0
 8019584:	4608      	mov	r0, r1
 8019586:	4611      	mov	r1, r2
 8019588:	602b      	str	r3, [r5, #0]
 801958a:	f7e7 fa07 	bl	800099c <_kill>
 801958e:	1c43      	adds	r3, r0, #1
 8019590:	d102      	bne.n	8019598 <_kill_r+0x1c>
 8019592:	682b      	ldr	r3, [r5, #0]
 8019594:	b103      	cbz	r3, 8019598 <_kill_r+0x1c>
 8019596:	6023      	str	r3, [r4, #0]
 8019598:	bd38      	pop	{r3, r4, r5, pc}
 801959a:	bf00      	nop
 801959c:	2000c4dc 	.word	0x2000c4dc

080195a0 <_getpid_r>:
 80195a0:	f7e7 b9f4 	b.w	800098c <_getpid>

080195a4 <_init>:
 80195a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195a6:	bf00      	nop
 80195a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195aa:	bc08      	pop	{r3}
 80195ac:	469e      	mov	lr, r3
 80195ae:	4770      	bx	lr

080195b0 <_fini>:
 80195b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195b2:	bf00      	nop
 80195b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195b6:	bc08      	pop	{r3}
 80195b8:	469e      	mov	lr, r3
 80195ba:	4770      	bx	lr
