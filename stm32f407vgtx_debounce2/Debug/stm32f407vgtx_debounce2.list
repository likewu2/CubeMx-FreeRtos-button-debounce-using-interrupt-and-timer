
stm32f407vgtx_debounce2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c0  08019a98  08019a98  00029a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc58  0801cc58  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  0801cc58  0801cc58  0002cc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cc60  0801cc60  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc60  0801cc60  0002cc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cc64  0801cc64  0002cc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0801cc68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030174  2**0
                  CONTENTS
 10 .bss          0000e584  20000174  20000174  00030174  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  2000e6f8  2000e6f8  00030174  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036785  00000000  00000000  0003019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008885  00000000  00000000  00066923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002868  00000000  00000000  0006f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002658  00000000  00000000  00071a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001411c  00000000  00000000  00074068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c4bf  00000000  00000000  00088184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2d81  00000000  00000000  000c4643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b73c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b064  00000000  00000000  001b7414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  001c2478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019a80 	.word	0x08019a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	08019a80 	.word	0x08019a80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14d      	bne.n	800034c <__udivmoddi4+0xac>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d968      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b152      	cbz	r2, 80002d2 <__udivmoddi4+0x32>
 80002bc:	fa01 f302 	lsl.w	r3, r1, r2
 80002c0:	f1c2 0120 	rsb	r1, r2, #32
 80002c4:	fa20 f101 	lsr.w	r1, r0, r1
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	ea41 0803 	orr.w	r8, r1, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fbb8 fef5 	udiv	lr, r8, r5
 80002dc:	fa1f f78c 	uxth.w	r7, ip
 80002e0:	fb05 831e 	mls	r3, r5, lr, r8
 80002e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e8:	fb0e f107 	mul.w	r1, lr, r7
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d90b      	bls.n	8000308 <__udivmoddi4+0x68>
 80002f0:	eb1c 0303 	adds.w	r3, ip, r3
 80002f4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002f8:	f080 811e 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fc:	4299      	cmp	r1, r3
 80002fe:	f240 811b 	bls.w	8000538 <__udivmoddi4+0x298>
 8000302:	f1ae 0e02 	sub.w	lr, lr, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000310:	fb05 3310 	mls	r3, r5, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x96>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 8108 	bcs.w	800053c <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8105 	bls.w	800053c <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800033c:	2100      	movs	r1, #0
 800033e:	b11e      	cbz	r6, 8000348 <__udivmoddi4+0xa8>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c6 4300 	strd	r4, r3, [r6]
 8000348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034c:	428b      	cmp	r3, r1
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0xc2>
 8000350:	2e00      	cmp	r6, #0
 8000352:	f000 80ee 	beq.w	8000532 <__udivmoddi4+0x292>
 8000356:	2100      	movs	r1, #0
 8000358:	e9c6 0500 	strd	r0, r5, [r6]
 800035c:	4608      	mov	r0, r1
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f183 	clz	r1, r3
 8000366:	2900      	cmp	r1, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb65 0303 	sbc.w	r3, r5, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e2      	beq.n	8000348 <__udivmoddi4+0xa8>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7df      	b.n	8000348 <__udivmoddi4+0xa8>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8091 	bne.w	80004b8 <__udivmoddi4+0x218>
 8000396:	eba1 050c 	sub.w	r5, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2101      	movs	r1, #1
 80003a4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003a8:	fb07 5013 	mls	r0, r7, r3, r5
 80003ac:	0c25      	lsrs	r5, r4, #16
 80003ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0505 	adds.w	r5, ip, r5
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	42a8      	cmp	r0, r5
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a2d      	subs	r5, r5, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003d4:	fb07 5510 	mls	r5, r7, r0, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4628      	mov	r0, r5
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79e      	b.n	800033e <__udivmoddi4+0x9e>
 8000400:	f1c1 0720 	rsb	r7, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa05 f301 	lsl.w	r3, r5, r1
 8000416:	431c      	orrs	r4, r3
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f301 	lsl.w	r3, r0, r1
 8000422:	fbb5 f8f9 	udiv	r8, r5, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 5518 	mls	r5, r9, r8, r5
 8000430:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	42a8      	cmp	r0, r5
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0505 	adds.w	r5, ip, r5
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	42a8      	cmp	r0, r5
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4465      	add	r5, ip
 8000458:	1a2d      	subs	r5, r5, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000460:	fb09 5510 	mls	r5, r9, r0, r5
 8000464:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	45ae      	cmp	lr, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	45ae      	cmp	lr, r5
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba5 050e 	sub.w	r5, r5, lr
 800048e:	42a5      	cmp	r5, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15e      	cbz	r6, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb65 050e 	sbc.w	r5, r5, lr
 80004a2:	fa05 f707 	lsl.w	r7, r5, r7
 80004a6:	fa22 f301 	lsr.w	r3, r2, r1
 80004aa:	40cd      	lsrs	r5, r1
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c6 7500 	strd	r7, r5, [r6]
 80004b2:	2100      	movs	r1, #0
 80004b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b8:	f1c2 0320 	rsb	r3, r2, #32
 80004bc:	fa20 f103 	lsr.w	r1, r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa25 f303 	lsr.w	r3, r5, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	430d      	orrs	r5, r1
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004d8:	fb07 3011 	mls	r0, r7, r1, r3
 80004dc:	0c2b      	lsrs	r3, r5, #16
 80004de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004e2:	fb01 f00e 	mul.w	r0, r1, lr
 80004e6:	4298      	cmp	r0, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	4298      	cmp	r0, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3902      	subs	r1, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1a1b      	subs	r3, r3, r0
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3310 	mls	r3, r7, r0, r3
 800050c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000510:	fb00 f30e 	mul.w	r3, r0, lr
 8000514:	42ab      	cmp	r3, r5
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0505 	adds.w	r5, ip, r5
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3802      	subs	r0, #2
 8000528:	4465      	add	r5, ip
 800052a:	1aed      	subs	r5, r5, r3
 800052c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	4631      	mov	r1, r6
 8000534:	4630      	mov	r0, r6
 8000536:	e707      	b.n	8000348 <__udivmoddi4+0xa8>
 8000538:	4686      	mov	lr, r0
 800053a:	e6e5      	b.n	8000308 <__udivmoddi4+0x68>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fa      	b.n	8000336 <__udivmoddi4+0x96>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4640      	mov	r0, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4641      	mov	r1, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4465      	add	r5, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4608      	mov	r0, r1
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fad8 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f816 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f87e 	bl	8000680 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f007 fcb2 	bl	8007eec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <main+0x2c>)
 800058a:	2100      	movs	r1, #0
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <main+0x30>)
 800058e:	f007 fd0a 	bl	8007fa6 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <main+0x34>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f007 fcca 	bl	8007f30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0x28>
 800059e:	bf00      	nop
 80005a0:	0801c990 	.word	0x0801c990
 80005a4:	0800078d 	.word	0x0800078d
 80005a8:	20000190 	.word	0x20000190

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f018 fbca 	bl	8018d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062a:	2307      	movs	r3, #7
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fe46 	bl	80032c4 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063e:	f000 f8c3 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2105      	movs	r1, #5
 8000660:	4618      	mov	r0, r3
 8000662:	f003 f8a7 	bl	80037b4 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800066c:	f000 f8ac 	bl	80007c8 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <MX_GPIO_Init+0x100>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a38      	ldr	r2, [pc, #224]	; (8000780 <MX_GPIO_Init+0x100>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b36      	ldr	r3, [pc, #216]	; (8000780 <MX_GPIO_Init+0x100>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b32      	ldr	r3, [pc, #200]	; (8000780 <MX_GPIO_Init+0x100>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a31      	ldr	r2, [pc, #196]	; (8000780 <MX_GPIO_Init+0x100>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <MX_GPIO_Init+0x100>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_GPIO_Init+0x100>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2a      	ldr	r2, [pc, #168]	; (8000780 <MX_GPIO_Init+0x100>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_GPIO_Init+0x100>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_GPIO_Init+0x100>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MX_GPIO_Init+0x100>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_GPIO_Init+0x100>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_GPIO_Init+0x100>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_GPIO_Init+0x100>)
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_GPIO_Init+0x100>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000728:	4816      	ldr	r0, [pc, #88]	; (8000784 <MX_GPIO_Init+0x104>)
 800072a:	f001 fb17 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072e:	2301      	movs	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000732:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_GPIO_Init+0x108>)
 8000744:	f001 f970 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000748:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <MX_GPIO_Init+0x104>)
 8000762:	f001 f961 	bl	8001a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2105      	movs	r1, #5
 800076a:	2006      	movs	r0, #6
 800076c:	f000 faf5 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000770:	2006      	movs	r0, #6
 8000772:	f000 fb0e 	bl	8000d92 <HAL_NVIC_EnableIRQ>

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020000 	.word	0x40020000

0800078c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000794:	f017 fb8a 	bl	8017eac <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000798:	f005 f922 	bl	80059e0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f007 fc94 	bl	80080ca <osDelay>
 80007a2:	e7fb      	b.n	800079c <StartDefaultTask+0x10>

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f9db 	bl	8000b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40010000 	.word	0x40010000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_MspInit+0x54>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <HAL_MspInit+0x54>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_MspInit+0x54>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_MspInit+0x54>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fa9e 	bl	8000d5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2019      	movs	r0, #25
 8000842:	f000 fa8a 	bl	8000d5a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000846:	2019      	movs	r0, #25
 8000848:	f000 faa3 	bl	8000d92 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_InitTick+0xa4>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <HAL_InitTick+0xa4>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6453      	str	r3, [r2, #68]	; 0x44
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_InitTick+0xa4>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000868:	f107 0210 	add.w	r2, r7, #16
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f003 f9ae 	bl	8003bd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000878:	f003 f998 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 800087c:	4603      	mov	r3, r0
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_InitTick+0xa8>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	0c9b      	lsrs	r3, r3, #18
 800088c:	3b01      	subs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_InitTick+0xac>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <HAL_InitTick+0xb0>)
 8000894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_InitTick+0xac>)
 8000898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800089c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_InitTick+0xac>)
 80008a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_InitTick+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_InitTick+0xac>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <HAL_InitTick+0xac>)
 80008b2:	f003 f9bf 	bl	8003c34 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <HAL_InitTick+0xac>)
 80008be:	f003 fa11 	bl	8003ce4 <HAL_TIM_Base_Start_IT>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3730      	adds	r7, #48	; 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	431bde83 	.word	0x431bde83
 80008d8:	20000194 	.word	0x20000194
 80008dc:	40010000 	.word	0x40010000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800090e:	2001      	movs	r0, #1
 8000910:	f001 fa3c 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800091e:	f003 fa4f 	bl	8003dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000194 	.word	0x20000194

0800092c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <OTG_FS_IRQHandler+0x10>)
 8000932:	f001 fb9d 	bl	8002070 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000dfbc 	.word	0x2000dfbc

08000940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
	return 1;
 8000944:	2301      	movs	r3, #1
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
	...

08000950 <_kill>:

int _kill(int pid, int sig)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <_kill+0x20>)
 800095c:	2216      	movs	r2, #22
 800095e:	601a      	str	r2, [r3, #0]
	return -1;
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000e6f4 	.word	0x2000e6f4

08000974 <_exit>:

void _exit (int status)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ffe5 	bl	8000950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000986:	e7fe      	b.n	8000986 <_exit+0x12>

08000988 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	e00a      	b.n	80009b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800099a:	f3af 8000 	nop.w
 800099e:	4601      	mov	r1, r0
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	b2ca      	uxtb	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf0      	blt.n	800099a <_read+0x12>
	}

return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e009      	b.n	80009e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf1      	blt.n	80009d4 <_write+0x12>
	}
	return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_close>:

int _close(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	return -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a20:	605a      	str	r2, [r3, #4]
	return 0;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <_isatty>:

int _isatty(int file)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	return 1;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b085      	sub	sp, #20
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
	...

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d205      	bcs.n	8000a98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <_sbrk+0x6c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	e009      	b.n	8000aac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00004000 	.word	0x00004000
 8000ac0:	200001dc 	.word	0x200001dc
 8000ac4:	2000e6f8 	.word	0x2000e6f8
 8000ac8:	2000e6f4 	.word	0x2000e6f4

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b02:	f7ff ffe3 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f018 f873 	bl	8018bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fd33 	bl	8000574 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000b1c:	0801cc68 	.word	0x0801cc68
  ldr r2, =_sbss
 8000b20:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000b24:	2000e6f8 	.word	0x2000e6f8

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f8f5 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f7ff fe66 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe38 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x1c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x20>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <HAL_IncTick+0x20>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200001e0 	.word	0x200001e0

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <HAL_GetTick+0x10>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	200001e0 	.word	0x200001e0

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffe0 	bl	8000b94 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4906      	ldr	r1, [pc, #24]	; (8000c88 <__NVIC_EnableIRQ+0x34>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff4f 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff64 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ffb2 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff81 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff57 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e06c      	b.n	8000e9c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d106      	bne.n	8000dda <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2223      	movs	r2, #35	; 0x23
 8000dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f869 	bl	8000eac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <HAL_ETH_Init+0xf4>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a30      	ldr	r2, [pc, #192]	; (8000ea4 <HAL_ETH_Init+0xf4>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <HAL_ETH_Init+0xf4>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HAL_ETH_Init+0xf8>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <HAL_ETH_Init+0xf8>)
 8000dfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e00:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <HAL_ETH_Init+0xf8>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	4927      	ldr	r1, [pc, #156]	; (8000ea8 <HAL_ETH_Init+0xf8>)
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <HAL_ETH_Init+0xf8>)
 8000e12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000e2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e2c:	f7ff feb2 	bl	8000b94 <HAL_GetTick>
 8000e30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000e32:	e011      	b.n	8000e58 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000e34:	f7ff feae 	bl	8000b94 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e42:	d909      	bls.n	8000e58 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2204      	movs	r2, #4
 8000e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	22e0      	movs	r2, #224	; 0xe0
 8000e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e021      	b.n	8000e9c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1e4      	bne.n	8000e34 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fb3a 	bl	80014e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 fbdf 	bl	8001634 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fc34 	bl	80016e4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	461a      	mov	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 fb9f 	bl	80015c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2210      	movs	r2, #16
 8000e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40013800 	.word	0x40013800

08000eac <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed4:	f043 0201 	orr.w	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e045      	b.n	8000f6e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ee8:	2b23      	cmp	r3, #35	; 0x23
 8000eea:	d13f      	bne.n	8000f6c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 fc5f 	bl	80017bc <ETH_Prepare_Tx_Descriptors>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	f043 0202 	orr.w	r2, r3, #2
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e02a      	b.n	8000f6e <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
}
 8000f1c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d904      	bls.n	8000f3a <HAL_ETH_Transmit_IT+0x7c>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	1f1a      	subs	r2, r3, #4
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00d      	beq.n	8000f68 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f54:	461a      	mov	r2, r3
 8000f56:	2304      	movs	r3, #4
 8000f58:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f62:	461a      	mov	r2, r3
 8000f64:	2300      	movs	r3, #0
 8000f66:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
  }
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b088      	sub	sp, #32
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f94:	f043 0201 	orr.w	r2, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0a8      	b.n	80010f4 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fa8:	2b23      	cmp	r3, #35	; 0x23
 8000faa:	d001      	beq.n	8000fb0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0a1      	b.n	80010f4 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	3212      	adds	r2, #18
 8000fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fc6:	f1c3 0304 	rsb	r3, r3, #4
 8000fca:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8000fcc:	e06a      	b.n	80010a4 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	69da      	ldr	r2, [r3, #28]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <HAL_ETH_ReadData+0x88>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d040      	beq.n	8001080 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00c      	beq.n	8001042 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0c1b      	lsrs	r3, r3, #16
 800102e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001032:	3b04      	subs	r3, #4
 8001034:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800105a:	461a      	mov	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	b29b      	uxth	r3, r3
 8001060:	f004 ff40 	bl	8005ee4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	441a      	add	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	3301      	adds	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	2b03      	cmp	r3, #3
 800108a:	d902      	bls.n	8001092 <HAL_ETH_ReadData+0x11c>
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	3b04      	subs	r3, #4
 8001090:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	3212      	adds	r2, #18
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db06      	blt.n	80010ba <HAL_ETH_ReadData+0x144>
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d202      	bcs.n	80010ba <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d089      	beq.n	8000fce <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	441a      	add	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f814 	bl	80010fc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69fa      	ldr	r2, [r7, #28]
 80010d8:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001108:	2301      	movs	r3, #1
 800110a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001110:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	3212      	adds	r2, #18
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001122:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001124:	e03e      	b.n	80011a4 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d112      	bne.n	8001154 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4618      	mov	r0, r3
 8001134:	f004 fea6 	bl	8005e84 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	74fb      	strb	r3, [r7, #19]
 8001142:	e007      	b.n	8001154 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	461a      	mov	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	461a      	mov	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001154:	7cfb      	ldrb	r3, [r7, #19]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800115a:	f3bf 8f5f 	dmb	sy
}
 800115e:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001166:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <ETH_UpdateDescriptor+0xe0>)
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	e003      	b.n	8001180 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f244 32e8 	movw	r2, #17384	; 0x43e8
 800117e:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	3301      	adds	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d902      	bls.n	8001192 <ETH_UpdateDescriptor+0x96>
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	3b04      	subs	r3, #4
 8001190:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	3212      	adds	r2, #18
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	617b      	str	r3, [r7, #20]
      desccount--;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <ETH_UpdateDescriptor+0xb4>
 80011aa:	7cfb      	ldrb	r3, [r7, #19]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ba      	bne.n	8001126 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d00c      	beq.n	80011d4 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c2:	461a      	mov	r2, r3
 80011c4:	2300      	movs	r3, #0
 80011c6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	800043e8 	.word	0x800043e8

080011e0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3318      	adds	r3, #24
 80011ec:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80011fa:	2301      	movs	r3, #1
 80011fc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80011fe:	e03f      	b.n	8001280 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001200:	2301      	movs	r3, #1
 8001202:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3b01      	subs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	3304      	adds	r3, #4
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	3301      	adds	r3, #1
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d028      	beq.n	8001280 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68d9      	ldr	r1, [r3, #12]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db1b      	blt.n	800127c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	3304      	adds	r3, #4
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	f004 fe86 	bl	8005f62 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	3304      	adds	r3, #4
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	3301      	adds	r3, #1
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
 800127a:	e001      	b.n	8001280 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <HAL_ETH_ReleaseTxPacket+0xac>
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1b9      	bne.n	8001200 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <ETH_SetMACConfig+0x134>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	7c1b      	ldrb	r3, [r3, #16]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <ETH_SetMACConfig+0x28>
 80012ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012be:	e000      	b.n	80012c2 <ETH_SetMACConfig+0x2a>
 80012c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	7c5b      	ldrb	r3, [r3, #17]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <ETH_SetMACConfig+0x38>
 80012ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ce:	e000      	b.n	80012d2 <ETH_SetMACConfig+0x3a>
 80012d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	7fdb      	ldrb	r3, [r3, #31]
 80012de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	7f92      	ldrb	r2, [r2, #30]
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	d102      	bne.n	80012f6 <ETH_SetMACConfig+0x5e>
 80012f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f4:	e000      	b.n	80012f8 <ETH_SetMACConfig+0x60>
 80012f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80012f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	7f1b      	ldrb	r3, [r3, #28]
 80012fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001300:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001306:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800130e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001316:	2a00      	cmp	r2, #0
 8001318:	d102      	bne.n	8001320 <ETH_SetMACConfig+0x88>
 800131a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131e:	e000      	b.n	8001322 <ETH_SetMACConfig+0x8a>
 8001320:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001322:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	7bdb      	ldrb	r3, [r3, #15]
 8001328:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800132a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001330:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001338:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800133a:	4313      	orrs	r3, r2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fc28 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001376:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800137e:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001384:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 800138c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001394:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800139c:	4313      	orrs	r3, r2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fbf7 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	ff20810f 	.word	0xff20810f

080013d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <ETH_SetDMAConfig+0x110>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	7b1b      	ldrb	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <ETH_SetDMAConfig+0x2c>
 80013f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013fa:	e000      	b.n	80013fe <ETH_SetDMAConfig+0x2e>
 80013fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7b5b      	ldrb	r3, [r3, #13]
 8001402:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001404:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	7f52      	ldrb	r2, [r2, #29]
 800140a:	2a00      	cmp	r2, #0
 800140c:	d102      	bne.n	8001414 <ETH_SetDMAConfig+0x44>
 800140e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001412:	e000      	b.n	8001416 <ETH_SetDMAConfig+0x46>
 8001414:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001416:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	7b9b      	ldrb	r3, [r3, #14]
 800141c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800141e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001424:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	7f1b      	ldrb	r3, [r3, #28]
 800142a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800142c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	7f9b      	ldrb	r3, [r3, #30]
 8001432:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001434:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800143a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001442:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001444:	4313      	orrs	r3, r2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fb9e 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001474:	461a      	mov	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	791b      	ldrb	r3, [r3, #4]
 800147e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001484:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800148a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001490:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001498:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800149a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7ff fb6f 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	f8de3f23 	.word	0xf8de3f23

080014e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b0a6      	sub	sp, #152	; 0x98
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001502:	2301      	movs	r3, #1
 8001504:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001520:	2300      	movs	r3, #0
 8001522:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800152a:	2300      	movs	r3, #0
 800152c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800154c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fe9a 	bl	8001298 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001564:	2301      	movs	r3, #1
 8001566:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001568:	2301      	movs	r3, #1
 800156a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800156c:	2301      	movs	r3, #1
 800156e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001572:	2301      	movs	r3, #1
 8001574:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001590:	2301      	movs	r3, #1
 8001592:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001598:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800159a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800159e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	4619      	mov	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff08 	bl	80013d0 <ETH_SetDMAConfig>
}
 80015c0:	bf00      	nop
 80015c2:	3798      	adds	r7, #152	; 0x98
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3305      	adds	r3, #5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	3204      	adds	r2, #4
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <ETH_MACAddressConfig+0x64>)
 80015ea:	4413      	add	r3, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3303      	adds	r3, #3
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	061a      	lsls	r2, r3, #24
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3302      	adds	r3, #2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3301      	adds	r3, #1
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	4313      	orrs	r3, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <ETH_MACAddressConfig+0x68>)
 800161a:	4413      	add	r3, r2
 800161c:	461a      	mov	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	6013      	str	r3, [r2, #0]
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40028040 	.word	0x40028040
 8001630:	40028044 	.word	0x40028044

08001634 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e03e      	b.n	80016c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	3206      	adds	r2, #6
 8001674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d80c      	bhi.n	80016a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68d9      	ldr	r1, [r3, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	461a      	mov	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	e004      	b.n	80016ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	461a      	mov	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3301      	adds	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d9bd      	bls.n	8001642 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d8:	611a      	str	r2, [r3, #16]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e046      	b.n	8001780 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6919      	ldr	r1, [r3, #16]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800172e:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001736:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	3212      	adds	r2, #18
 800174c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d80c      	bhi.n	8001770 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	461a      	mov	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	e004      	b.n	800177a <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	461a      	mov	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d9b5      	bls.n	80016f2 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b0:	60da      	str	r2, [r3, #12]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80017bc:	b480      	push	{r7}
 80017be:	b08d      	sub	sp, #52	; 0x34
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3318      	adds	r3, #24
 80017cc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017fe:	d007      	beq.n	8001810 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	3304      	adds	r3, #4
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001810:	2302      	movs	r3, #2
 8001812:	e103      	b.n	8001a1c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	3301      	adds	r3, #1
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800182c:	f023 031f 	bic.w	r3, r3, #31
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	6852      	ldr	r2, [r2, #4]
 8001834:	431a      	orrs	r2, r3
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	431a      	orrs	r2, r3
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	431a      	orrs	r2, r3
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800189a:	f3bf 8f5f 	dmb	sy
}
 800189e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80018ac:	e084      	b.n	80019b8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e005      	b.n	80018da <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	3301      	adds	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d902      	bls.n	80018ec <ETH_Prepare_Tx_Descriptors+0x130>
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	3b04      	subs	r3, #4
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800190a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800190e:	d007      	beq.n	8001920 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	3304      	adds	r3, #4
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d029      	beq.n	8001974 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800192e:	2300      	movs	r3, #0
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
 8001932:	e019      	b.n	8001968 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001934:	f3bf 8f5f 	dmb	sy
}
 8001938:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	3301      	adds	r3, #1
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194e:	2b03      	cmp	r3, #3
 8001950:	d902      	bls.n	8001958 <ETH_Prepare_Tx_Descriptors+0x19c>
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	3b04      	subs	r3, #4
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001964:	3301      	adds	r3, #1
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
 8001968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	429a      	cmp	r2, r3
 800196e:	d3e1      	bcc.n	8001934 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8001970:	2302      	movs	r3, #2
 8001972:	e053      	b.n	8001a1c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3301      	adds	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001992:	f023 031f 	bic.w	r3, r3, #31
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	6852      	ldr	r2, [r2, #4]
 800199a:	431a      	orrs	r2, r3
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80019a6:	f3bf 8f5f 	dmb	sy
}
 80019aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f47f af76 	bne.w	80018ae <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e005      	b.n	80019e2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f2:	6979      	ldr	r1, [r7, #20]
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	3304      	adds	r3, #4
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a02:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	4413      	add	r3, r2
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001a16:	b662      	cpsie	i
}
 8001a18:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3734      	adds	r7, #52	; 0x34
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e16b      	b.n	8001d1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 815a 	bne.w	8001d16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80b4 	beq.w	8001d16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <HAL_GPIO_Init+0x308>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a5e      	ldr	r2, [pc, #376]	; (8001d30 <HAL_GPIO_Init+0x308>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <HAL_GPIO_Init+0x308>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a5a      	ldr	r2, [pc, #360]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a51      	ldr	r2, [pc, #324]	; (8001d38 <HAL_GPIO_Init+0x310>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x226>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a50      	ldr	r2, [pc, #320]	; (8001d3c <HAL_GPIO_Init+0x314>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x222>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_GPIO_Init+0x318>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x21e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_GPIO_Init+0x31c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x21a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4d      	ldr	r2, [pc, #308]	; (8001d48 <HAL_GPIO_Init+0x320>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x216>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x212>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4b      	ldr	r2, [pc, #300]	; (8001d50 <HAL_GPIO_Init+0x328>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4a      	ldr	r2, [pc, #296]	; (8001d54 <HAL_GPIO_Init+0x32c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x20a>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00e      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e00c      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c36:	2306      	movs	r3, #6
 8001c38:	e00a      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	e008      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f002 0203 	and.w	r2, r2, #3
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c60:	4934      	ldr	r1, [pc, #208]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c92:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d10:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	f67f ae90 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40021c00 	.word	0x40021c00
 8001d58:	40013c00 	.word	0x40013c00

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d78:	e003      	b.n	8001d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	619a      	str	r2, [r3, #24]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f806 	bl	8001dbc <HAL_GPIO_EXTI_Callback>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd2:	b08f      	sub	sp, #60	; 0x3c
 8001dd4:	af0a      	add	r7, sp, #40	; 0x28
 8001dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e10f      	b.n	8002002 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f016 fa31 	bl	8018264 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2203      	movs	r2, #3
 8001e06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f002 fabd 	bl	80043a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	687e      	ldr	r6, [r7, #4]
 8001e2e:	466d      	mov	r5, sp
 8001e30:	f106 0410 	add.w	r4, r6, #16
 8001e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e40:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e44:	1d33      	adds	r3, r6, #4
 8001e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f002 f995 	bl	8004178 <USB_CoreInit>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0d0      	b.n	8002002 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 faaa 	bl	80043c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e04a      	b.n	8001f08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	333d      	adds	r3, #61	; 0x3d
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	333c      	adds	r3, #60	; 0x3c
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	b298      	uxth	r0, r3
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	3344      	adds	r3, #68	; 0x44
 8001eae:	4602      	mov	r2, r0
 8001eb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3340      	adds	r3, #64	; 0x40
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3348      	adds	r3, #72	; 0x48
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	334c      	adds	r3, #76	; 0x4c
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3354      	adds	r3, #84	; 0x54
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	3301      	adds	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3af      	bcc.n	8001e72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e044      	b.n	8001fa2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d3b5      	bcc.n	8001f18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	687e      	ldr	r6, [r7, #4]
 8001fb4:	466d      	mov	r5, sp
 8001fb6:	f106 0410 	add.w	r4, r6, #16
 8001fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fca:	1d33      	adds	r3, r6, #4
 8001fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fce:	6838      	ldr	r0, [r7, #0]
 8001fd0:	f002 fa42 	bl	8004458 <USB_DevInit>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00d      	b.n	8002002 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fb85 	bl	800570a <USB_DevDisconnect>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800200a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_PCD_Start+0x1c>
 8002022:	2302      	movs	r3, #2
 8002024:	e020      	b.n	8002068 <HAL_PCD_Start+0x5e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	2b01      	cmp	r3, #1
 8002034:	d109      	bne.n	800204a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f002 f996 	bl	8004380 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 fb36 	bl	80056ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b08d      	sub	sp, #52	; 0x34
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fbed 	bl	8005866 <USB_GetMode>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 848a 	bne.w	80029a8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f003 fb56 	bl	800574a <USB_ReadInterrupts>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8480 	beq.w	80029a6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fb43 	bl	800574a <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d107      	bne.n	80020de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f002 0202 	and.w	r2, r2, #2
 80020dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fb31 	bl	800574a <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d161      	bne.n	80021b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0210 	bic.w	r2, r2, #16
 8002100:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	0c5b      	lsrs	r3, r3, #17
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	2b02      	cmp	r3, #2
 800212c:	d124      	bne.n	8002178 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d035      	beq.n	80021a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	6a38      	ldr	r0, [r7, #32]
 800214e:	f003 f96e 	bl	800542e <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800215e:	441a      	add	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002170:	441a      	add	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	621a      	str	r2, [r3, #32]
 8002176:	e016      	b.n	80021a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	0c5b      	lsrs	r3, r3, #17
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	2b06      	cmp	r3, #6
 8002182:	d110      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800218a:	2208      	movs	r2, #8
 800218c:	4619      	mov	r1, r3
 800218e:	6a38      	ldr	r0, [r7, #32]
 8002190:	f003 f94d 	bl	800542e <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a0:	441a      	add	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0210 	orr.w	r2, r2, #16
 80021b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fac5 	bl	800574a <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021ca:	f040 80a7 	bne.w	800231c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fac9 	bl	800576e <USB_ReadDevAllOutEpInterrupt>
 80021dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021de:	e099      	b.n	8002314 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 808e 	beq.w	8002308 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 faeb 	bl	80057d2 <USB_ReadDevOutEPInterrupt>
 80021fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00c      	beq.n	8002222 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002214:	461a      	mov	r2, r3
 8002216:	2301      	movs	r3, #1
 8002218:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800221a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fec1 	bl	8002fa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00c      	beq.n	8002246 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	2308      	movs	r3, #8
 800223c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800223e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 ff97 	bl	8003174 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225c:	461a      	mov	r2, r3
 800225e:	2310      	movs	r3, #16
 8002260:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d030      	beq.n	80022ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d109      	bne.n	800228c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	78db      	ldrb	r3, [r3, #3]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d108      	bne.n	80022bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f016 f8da 	bl	8018470 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c8:	461a      	mov	r2, r3
 80022ca:	2302      	movs	r3, #2
 80022cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e4:	461a      	mov	r2, r3
 80022e6:	2320      	movs	r3, #32
 80022e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d009      	beq.n	8002308 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002306:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3301      	adds	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	f47f af62 	bne.w	80021e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fa12 	bl	800574a <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800232c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002330:	f040 80db 	bne.w	80024ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fa31 	bl	80057a0 <USB_ReadDevAllInEpInterrupt>
 800233e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002344:	e0cd      	b.n	80024e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80c2 	beq.w	80024d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f003 fa55 	bl	800580c <USB_ReadDevInEPInterrupt>
 8002362:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d057      	beq.n	800241e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	2201      	movs	r2, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	69f9      	ldr	r1, [r7, #28]
 800238a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800238e:	4013      	ands	r3, r2
 8002390:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239e:	461a      	mov	r2, r3
 80023a0:	2301      	movs	r3, #1
 80023a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d132      	bne.n	8002412 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334c      	adds	r3, #76	; 0x4c
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4403      	add	r3, r0
 80023cc:	3348      	adds	r3, #72	; 0x48
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4419      	add	r1, r3
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4403      	add	r3, r0
 80023e0:	334c      	adds	r3, #76	; 0x4c
 80023e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d113      	bne.n	8002412 <HAL_PCD_IRQHandler+0x3a2>
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3354      	adds	r3, #84	; 0x54
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d108      	bne.n	8002412 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800240a:	461a      	mov	r2, r3
 800240c:	2101      	movs	r1, #1
 800240e:	f003 fa59 	bl	80058c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f015 ffa4 	bl	8018366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002434:	461a      	mov	r2, r3
 8002436:	2308      	movs	r3, #8
 8002438:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002450:	461a      	mov	r2, r3
 8002452:	2310      	movs	r3, #16
 8002454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800246c:	461a      	mov	r2, r3
 800246e:	2340      	movs	r3, #64	; 0x40
 8002470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d023      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800247c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247e:	6a38      	ldr	r0, [r7, #32]
 8002480:	f002 f94e 	bl	8004720 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	3338      	adds	r3, #56	; 0x38
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	3304      	adds	r3, #4
 8002496:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	78db      	ldrb	r3, [r3, #3]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2200      	movs	r2, #0
 80024a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f015 fff1 	bl	8018494 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024be:	461a      	mov	r2, r3
 80024c0:	2302      	movs	r3, #2
 80024c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fcda 	bl	8002e8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	3301      	adds	r3, #1
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f af2e 	bne.w	8002346 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 f92b 	bl	800574a <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024fe:	d122      	bne.n	8002546 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002526:	2100      	movs	r1, #0
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 febf 	bl	80032ac <HAL_PCDEx_LPM_Callback>
 800252e:	e002      	b.n	8002536 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f015 ff8f 	bl	8018454 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f003 f8fd 	bl	800574a <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800255a:	d112      	bne.n	8002582 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d102      	bne.n	8002572 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f015 ff4b 	bl	8018408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002580:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 f8df 	bl	800574a <USB_ReadInterrupts>
 800258c:	4603      	mov	r3, r0
 800258e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	f040 80b7 	bne.w	8002708 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2110      	movs	r1, #16
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 f8b3 	bl	8004720 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025be:	e046      	b.n	800264e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025cc:	461a      	mov	r2, r3
 80025ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e4:	0151      	lsls	r1, r2, #5
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	440a      	add	r2, r1
 80025ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002600:	461a      	mov	r2, r3
 8002602:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002606:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	440a      	add	r2, r1
 800261e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002626:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002638:	0151      	lsls	r1, r2, #5
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	440a      	add	r2, r1
 800263e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002646:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	3301      	adds	r3, #1
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	429a      	cmp	r2, r3
 8002656:	d3b3      	bcc.n	80025c0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002666:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800266a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	2b00      	cmp	r3, #0
 8002672:	d016      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002684:	f043 030b 	orr.w	r3, r3, #11
 8002688:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800269a:	f043 030b 	orr.w	r3, r3, #11
 800269e:	6453      	str	r3, [r2, #68]	; 0x44
 80026a0:	e015      	b.n	80026ce <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c8:	f043 030b 	orr.w	r3, r3, #11
 80026cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026f2:	461a      	mov	r2, r3
 80026f4:	f003 f8e6 	bl	80058c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 f81c 	bl	800574a <USB_ReadInterrupts>
 8002712:	4603      	mov	r3, r0
 8002714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271c:	d124      	bne.n	8002768 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f8ac 	bl	8005880 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f002 f873 	bl	8004818 <USB_GetDevSpeed>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681c      	ldr	r4, [r3, #0]
 800273e:	f001 fa2b 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8002742:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	4620      	mov	r0, r4
 800274e:	f001 fd75 	bl	800423c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f015 fe2f 	bl	80183b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002766:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f002 ffec 	bl	800574a <USB_ReadInterrupts>
 8002772:	4603      	mov	r3, r0
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b08      	cmp	r3, #8
 800277a:	d10a      	bne.n	8002792 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f015 fe0c 	bl	801839a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 0208 	and.w	r2, r2, #8
 8002790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f002 ffd7 	bl	800574a <USB_ReadInterrupts>
 800279c:	4603      	mov	r3, r0
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	2b80      	cmp	r3, #128	; 0x80
 80027a4:	d122      	bne.n	80027ec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027b2:	2301      	movs	r3, #1
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	e014      	b.n	80027e2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4619      	mov	r1, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fb26 	bl	8002e28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	3301      	adds	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d3e5      	bcc.n	80027b8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 ffaa 	bl	800574a <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002800:	d13b      	bne.n	800287a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002802:	2301      	movs	r3, #1
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
 8002806:	e02b      	b.n	8002860 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3340      	adds	r3, #64	; 0x40
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d115      	bne.n	800285a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800282e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	da12      	bge.n	800285a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	333f      	adds	r3, #63	; 0x3f
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fae7 	bl	8002e28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	3301      	adds	r3, #1
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002866:	429a      	cmp	r2, r3
 8002868:	d3ce      	bcc.n	8002808 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f002 ff63 	bl	800574a <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800288e:	d155      	bne.n	800293c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002890:	2301      	movs	r3, #1
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
 8002894:	e045      	b.n	8002922 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d12e      	bne.n	800291c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da2b      	bge.n	800291c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d121      	bne.n	800291c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002918:	6053      	str	r3, [r2, #4]
            break;
 800291a:	e007      	b.n	800292c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	3301      	adds	r3, #1
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	429a      	cmp	r2, r3
 800292a:	d3b4      	bcc.n	8002896 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 ff02 	bl	800574a <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d10a      	bne.n	8002968 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f015 fdb0 	bl	80184b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f002 feec 	bl	800574a <USB_ReadInterrupts>
 8002972:	4603      	mov	r3, r0
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d115      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f015 fda0 	bl	80184d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	e000      	b.n	80029a8 <HAL_PCD_IRQHandler+0x938>
      return;
 80029a6:	bf00      	nop
    }
  }
}
 80029a8:	3734      	adds	r7, #52	; 0x34
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}

080029ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_PCD_SetAddress+0x1a>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e013      	b.n	80029f0 <HAL_PCD_SetAddress+0x42>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 fe4d 	bl	8005680 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	70fb      	strb	r3, [r7, #3]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	803b      	strh	r3, [r7, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da0f      	bge.n	8002a3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	f003 020f 	and.w	r2, r3, #15
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	3338      	adds	r3, #56	; 0x38
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	3304      	adds	r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	705a      	strb	r2, [r3, #1]
 8002a3c:	e00f      	b.n	8002a5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a6a:	883a      	ldrh	r2, [r7, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	78ba      	ldrb	r2, [r7, #2]
 8002a74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a88:	78bb      	ldrb	r3, [r7, #2]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d102      	bne.n	8002a94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_PCD_EP_Open+0xaa>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e00e      	b.n	8002ac0 <HAL_PCD_EP_Open+0xc8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68f9      	ldr	r1, [r7, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 fed5 	bl	8004860 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002abe:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da0f      	bge.n	8002afc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 020f 	and.w	r2, r3, #15
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	3338      	adds	r3, #56	; 0x38
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	705a      	strb	r2, [r3, #1]
 8002afa:	e00f      	b.n	8002b1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 020f 	and.w	r2, r3, #15
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_PCD_EP_Close+0x6e>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e00e      	b.n	8002b54 <HAL_PCD_EP_Close+0x8c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68f9      	ldr	r1, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 ff11 	bl	800496c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f003 020f 	and.w	r2, r3, #15
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	3304      	adds	r3, #4
 8002b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	f002 f9f0 	bl	8004fb4 <USB_EP0StartXfer>
 8002bd4:	e008      	b.n	8002be8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	6979      	ldr	r1, [r7, #20]
 8002be4:	f001 ff9e 	bl	8004b24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	f003 020f 	and.w	r2, r3, #15
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c14:	681b      	ldr	r3, [r3, #0]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c30:	7afb      	ldrb	r3, [r7, #11]
 8002c32:	f003 020f 	and.w	r2, r3, #15
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	3338      	adds	r3, #56	; 0x38
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	3304      	adds	r3, #4
 8002c46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2200      	movs	r2, #0
 8002c58:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c60:	7afb      	ldrb	r3, [r7, #11]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d102      	bne.n	8002c7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c7a:	7afb      	ldrb	r3, [r7, #11]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6979      	ldr	r1, [r7, #20]
 8002c92:	f002 f98f 	bl	8004fb4 <USB_EP0StartXfer>
 8002c96:	e008      	b.n	8002caa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6979      	ldr	r1, [r7, #20]
 8002ca6:	f001 ff3d 	bl	8004b24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 020f 	and.w	r2, r3, #15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d901      	bls.n	8002cd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e050      	b.n	8002d74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da0f      	bge.n	8002cfa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	705a      	strb	r2, [r3, #1]
 8002cf8:	e00d      	b.n	8002d16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_PCD_EP_SetStall+0x82>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e01e      	b.n	8002d74 <HAL_PCD_EP_SetStall+0xc0>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 fbc9 	bl	80054dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	b2d9      	uxtb	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d64:	461a      	mov	r2, r3
 8002d66:	f002 fdad 	bl	80058c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d901      	bls.n	8002d9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e042      	b.n	8002e20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	da0f      	bge.n	8002dc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 020f 	and.w	r2, r3, #15
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3338      	adds	r3, #56	; 0x38
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	3304      	adds	r3, #4
 8002db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	705a      	strb	r2, [r3, #1]
 8002dc0:	e00f      	b.n	8002de2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3304      	adds	r3, #4
 8002dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_PCD_EP_ClrStall+0x86>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e00e      	b.n	8002e20 <HAL_PCD_EP_ClrStall+0xa4>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68f9      	ldr	r1, [r7, #12]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f002 fbd0 	bl	80055b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da0c      	bge.n	8002e56 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3338      	adds	r3, #56	; 0x38
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3304      	adds	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e00c      	b.n	8002e70 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68f9      	ldr	r1, [r7, #12]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 f9f3 	bl	8005262 <USB_EPStopXfer>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e80:	7afb      	ldrb	r3, [r7, #11]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b08a      	sub	sp, #40	; 0x28
 8002e8e:	af02      	add	r7, sp, #8
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3338      	adds	r3, #56	; 0x38
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d901      	bls.n	8002ec2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e06c      	b.n	8002f9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d902      	bls.n	8002ede <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3303      	adds	r3, #3
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ee6:	e02b      	b.n	8002f40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d902      	bls.n	8002f04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	3303      	adds	r3, #3
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6919      	ldr	r1, [r3, #16]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4603      	mov	r3, r0
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f002 fa46 	bl	80053b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d809      	bhi.n	8002f6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d203      	bcs.n	8002f6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1be      	bne.n	8002ee8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d811      	bhi.n	8002f9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	6939      	ldr	r1, [r7, #16]
 8002f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f96:	4013      	ands	r3, r2
 8002f98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	333c      	adds	r3, #60	; 0x3c
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d17b      	bne.n	80030d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d015      	beq.n	8003010 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	4a61      	ldr	r2, [pc, #388]	; (800316c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	f240 80b9 	bls.w	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80b3 	beq.w	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	461a      	mov	r2, r3
 8003008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300c:	6093      	str	r3, [r2, #8]
 800300e:	e0a7      	b.n	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003026:	461a      	mov	r2, r3
 8003028:	2320      	movs	r3, #32
 800302a:	6093      	str	r3, [r2, #8]
 800302c:	e098      	b.n	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	f040 8093 	bne.w	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	4a4b      	ldr	r2, [pc, #300]	; (800316c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d90f      	bls.n	8003062 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305e:	6093      	str	r3, [r2, #8]
 8003060:	e07e      	b.n	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	3304      	adds	r3, #4
 8003076:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	0159      	lsls	r1, r3, #5
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	440b      	add	r3, r1
 8003084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308e:	1ad2      	subs	r2, r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d114      	bne.n	80030c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030ac:	461a      	mov	r2, r3
 80030ae:	2101      	movs	r1, #1
 80030b0:	f002 fc08 	bl	80058c4 <USB_EP0_OutStart>
 80030b4:	e006      	b.n	80030c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	441a      	add	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f015 f930 	bl	8018330 <HAL_PCD_DataOutStageCallback>
 80030d0:	e046      	b.n	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	4a26      	ldr	r2, [pc, #152]	; (8003170 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d124      	bne.n	8003124 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f0:	461a      	mov	r2, r3
 80030f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f6:	6093      	str	r3, [r2, #8]
 80030f8:	e032      	b.n	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	461a      	mov	r2, r3
 8003112:	2320      	movs	r3, #32
 8003114:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f015 f907 	bl	8018330 <HAL_PCD_DataOutStageCallback>
 8003122:	e01d      	b.n	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d114      	bne.n	8003154 <PCD_EP_OutXfrComplete_int+0x1b0>
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d108      	bne.n	8003154 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800314c:	461a      	mov	r2, r3
 800314e:	2100      	movs	r1, #0
 8003150:	f002 fbb8 	bl	80058c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f015 f8e8 	bl	8018330 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	4f54300a 	.word	0x4f54300a
 8003170:	4f54310a 	.word	0x4f54310a

08003174 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	333c      	adds	r3, #60	; 0x3c
 800318c:	3304      	adds	r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <PCD_EP_OutSetupPacket_int+0x88>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d90e      	bls.n	80031c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c0:	461a      	mov	r2, r3
 80031c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f015 f89f 	bl	801830c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <PCD_EP_OutSetupPacket_int+0x88>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d90c      	bls.n	80031f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d108      	bne.n	80031f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031e8:	461a      	mov	r2, r3
 80031ea:	2101      	movs	r1, #1
 80031ec:	f002 fb6a 	bl	80058c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	4f54300a 	.word	0x4f54300a

08003200 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
 800320c:	4613      	mov	r3, r2
 800320e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d107      	bne.n	800322e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800321e:	883b      	ldrh	r3, [r7, #0]
 8003220:	0419      	lsls	r1, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	430a      	orrs	r2, r1
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
 800322c:	e028      	b.n	8003280 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	4413      	add	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e00d      	b.n	800325e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	3340      	adds	r3, #64	; 0x40
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0c1b      	lsrs	r3, r3, #16
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4413      	add	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	3301      	adds	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	3b01      	subs	r3, #1
 8003264:	429a      	cmp	r2, r3
 8003266:	d3ec      	bcc.n	8003242 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003268:	883b      	ldrh	r3, [r7, #0]
 800326a:	0418      	lsls	r0, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	3b01      	subs	r3, #1
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	4302      	orrs	r2, r0
 8003278:	3340      	adds	r3, #64	; 0x40
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	887a      	ldrh	r2, [r7, #2]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e267      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d075      	beq.n	80033ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d00c      	beq.n	8003308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ee:	4b85      	ldr	r3, [pc, #532]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d112      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4b82      	ldr	r3, [pc, #520]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003306:	d10b      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	4b7e      	ldr	r3, [pc, #504]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05b      	beq.n	80033cc <HAL_RCC_OscConfig+0x108>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d157      	bne.n	80033cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e242      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x74>
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x98>
 8003342:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6f      	ldr	r2, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b6d      	ldr	r3, [pc, #436]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6c      	ldr	r2, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 800335c:	4b69      	ldr	r3, [pc, #420]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a68      	ldr	r2, [pc, #416]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fd fc0a 	bl	8000b94 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fd fc06 	bl	8000b94 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e207      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b5b      	ldr	r3, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xc0>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fd fbf6 	bl	8000b94 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fd fbf2 	bl	8000b94 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1f3      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b51      	ldr	r3, [pc, #324]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0xe8>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1c7      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4937      	ldr	r1, [pc, #220]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x244>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fd fbab 	bl	8000b94 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7fd fba7 	bl	8000b94 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1a8      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4925      	ldr	r1, [pc, #148]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCC_OscConfig+0x244>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd fb8a 	bl	8000b94 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7fd fb86 	bl	8000b94 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e187      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d036      	beq.n	800351c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCC_OscConfig+0x248>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fd fb6a 	bl	8000b94 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fd fb66 	bl	8000b94 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e167      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x240>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x200>
 80034e2:	e01b      	b.n	800351c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_OscConfig+0x248>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ea:	f7fd fb53 	bl	8000b94 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00e      	b.n	8003510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fd fb4f 	bl	8000b94 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d907      	bls.n	8003510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e150      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ea      	bne.n	80034f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8097 	beq.w	8003658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b81      	ldr	r3, [pc, #516]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a7c      	ldr	r2, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
 800354a:	4b7a      	ldr	r3, [pc, #488]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b77      	ldr	r3, [pc, #476]	; (8003738 <HAL_RCC_OscConfig+0x474>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b74      	ldr	r3, [pc, #464]	; (8003738 <HAL_RCC_OscConfig+0x474>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a73      	ldr	r2, [pc, #460]	; (8003738 <HAL_RCC_OscConfig+0x474>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fd fb0f 	bl	8000b94 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fd fb0b 	bl	8000b94 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e10c      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCC_OscConfig+0x474>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x2ea>
 80035a0:	4b64      	ldr	r3, [pc, #400]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a63      	ldr	r2, [pc, #396]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x324>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x30c>
 80035b6:	4b5f      	ldr	r3, [pc, #380]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a5e      	ldr	r2, [pc, #376]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	4b5c      	ldr	r3, [pc, #368]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a5b      	ldr	r2, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x324>
 80035d0:	4b58      	ldr	r3, [pc, #352]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a57      	ldr	r2, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	4b55      	ldr	r3, [pc, #340]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a54      	ldr	r2, [pc, #336]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd fad0 	bl	8000b94 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fd facc 	bl	8000b94 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0cb      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4b49      	ldr	r3, [pc, #292]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RCC_OscConfig+0x334>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361c:	f7fd faba 	bl	8000b94 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fd fab6 	bl	8000b94 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0b5      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ee      	bne.n	8003624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4a38      	ldr	r2, [pc, #224]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a1 	beq.w	80037a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d05c      	beq.n	8003728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d141      	bne.n	80036fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b31      	ldr	r3, [pc, #196]	; (800373c <HAL_RCC_OscConfig+0x478>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fd fa8a 	bl	8000b94 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd fa86 	bl	8000b94 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e087      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	491b      	ldr	r1, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x478>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fd fa5f 	bl	8000b94 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036da:	f7fd fa5b 	bl	8000b94 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e05c      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x416>
 80036f8:	e054      	b.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCC_OscConfig+0x478>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fd fa48 	bl	8000b94 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003708:	f7fd fa44 	bl	8000b94 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e045      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_OscConfig+0x470>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x444>
 8003726:	e03d      	b.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e038      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
 8003734:	40023800 	.word	0x40023800
 8003738:	40007000 	.word	0x40007000
 800373c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x4ec>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d028      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d121      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d11a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003778:	4293      	cmp	r3, r2
 800377a:	d111      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800

080037b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0cc      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b68      	ldr	r3, [pc, #416]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d90c      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0b8      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003820:	4b53      	ldr	r3, [pc, #332]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800382a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b50      	ldr	r3, [pc, #320]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	494d      	ldr	r1, [pc, #308]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d044      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d119      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d003      	beq.n	8003872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386e:	2b03      	cmp	r3, #3
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e06f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e067      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4934      	ldr	r1, [pc, #208]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a4:	f7fd f976 	bl	8000b94 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fd f972 	bl	8000b94 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e04f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d20c      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e032      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4916      	ldr	r1, [pc, #88]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	490e      	ldr	r1, [pc, #56]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800393a:	f000 f821 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800393e:	4602      	mov	r2, r0
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	490a      	ldr	r1, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	5ccb      	ldrb	r3, [r1, r3]
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fc ff66 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023c00 	.word	0x40023c00
 8003970:	40023800 	.word	0x40023800
 8003974:	0801c9b4 	.word	0x0801c9b4
 8003978:	20000000 	.word	0x20000000
 800397c:	20000004 	.word	0x20000004

08003980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b094      	sub	sp, #80	; 0x50
 8003986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
 800398c:	2300      	movs	r3, #0
 800398e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003990:	2300      	movs	r3, #0
 8003992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003998:	4b7c      	ldr	r3, [pc, #496]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x20c>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d00d      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x40>
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	f200 80e7 	bhi.w	8003b78 <HAL_RCC_GetSysClockFreq+0x1f8>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x3a>
 80039b2:	e0e1      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b76      	ldr	r3, [pc, #472]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x210>)
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039b8:	e0e1      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ba:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x214>)
 80039bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039be:	e0de      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039c0:	4b72      	ldr	r3, [pc, #456]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x20c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ca:	4b70      	ldr	r3, [pc, #448]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x20c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d065      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x20c>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	2200      	movs	r2, #0
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
 80039e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ea:	2300      	movs	r3, #0
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
 80039ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039f2:	4622      	mov	r2, r4
 80039f4:	462b      	mov	r3, r5
 80039f6:	f04f 0000 	mov.w	r0, #0
 80039fa:	f04f 0100 	mov.w	r1, #0
 80039fe:	0159      	lsls	r1, r3, #5
 8003a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a04:	0150      	lsls	r0, r2, #5
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	1a51      	subs	r1, r2, r1
 8003a0e:	6139      	str	r1, [r7, #16]
 8003a10:	4629      	mov	r1, r5
 8003a12:	eb63 0301 	sbc.w	r3, r3, r1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a24:	4659      	mov	r1, fp
 8003a26:	018b      	lsls	r3, r1, #6
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a2e:	4651      	mov	r1, sl
 8003a30:	018a      	lsls	r2, r1, #6
 8003a32:	46d4      	mov	ip, sl
 8003a34:	ebb2 080c 	subs.w	r8, r2, ip
 8003a38:	4659      	mov	r1, fp
 8003a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a52:	4690      	mov	r8, r2
 8003a54:	4699      	mov	r9, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	eb18 0303 	adds.w	r3, r8, r3
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	462b      	mov	r3, r5
 8003a60:	eb49 0303 	adc.w	r3, r9, r3
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a72:	4629      	mov	r1, r5
 8003a74:	024b      	lsls	r3, r1, #9
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003a80:	4601      	mov	r1, r0
 8003a82:	024a      	lsls	r2, r1, #9
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a94:	f7fc fbec 	bl	8000270 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa0:	e05c      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x20c>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	4611      	mov	r1, r2
 8003aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003abc:	4642      	mov	r2, r8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	f04f 0000 	mov.w	r0, #0
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	0159      	lsls	r1, r3, #5
 8003aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ace:	0150      	lsls	r0, r2, #5
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	46c4      	mov	ip, r8
 8003ad6:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003ada:	4640      	mov	r0, r8
 8003adc:	4649      	mov	r1, r9
 8003ade:	468c      	mov	ip, r1
 8003ae0:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003af0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003af4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003af8:	ebb2 040a 	subs.w	r4, r2, sl
 8003afc:	eb63 050b 	sbc.w	r5, r3, fp
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	00eb      	lsls	r3, r5, #3
 8003b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b0e:	00e2      	lsls	r2, r4, #3
 8003b10:	4614      	mov	r4, r2
 8003b12:	461d      	mov	r5, r3
 8003b14:	4603      	mov	r3, r0
 8003b16:	18e3      	adds	r3, r4, r3
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	eb45 0303 	adc.w	r3, r5, r3
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b2e:	4629      	mov	r1, r5
 8003b30:	028b      	lsls	r3, r1, #10
 8003b32:	4620      	mov	r0, r4
 8003b34:	4629      	mov	r1, r5
 8003b36:	4604      	mov	r4, r0
 8003b38:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003b3c:	4601      	mov	r1, r0
 8003b3e:	028a      	lsls	r2, r1, #10
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b46:	2200      	movs	r2, #0
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	61fa      	str	r2, [r7, #28]
 8003b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b50:	f7fc fb8e 	bl	8000270 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x210>)
 8003b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3750      	adds	r7, #80	; 0x50
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	007a1200 	.word	0x007a1200

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	20000000 	.word	0x20000000

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb0:	f7ff fff2 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0b5b      	lsrs	r3, r3, #13
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	0801c9c4 	.word	0x0801c9c4

08003bd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	220f      	movs	r2, #15
 8003be2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_RCC_GetClockConfig+0x58>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCC_GetClockConfig+0x5c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	601a      	str	r2, [r3, #0]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40023c00 	.word	0x40023c00

08003c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e041      	b.n	8003cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f839 	bl	8003cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 f9d0 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d001      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e04e      	b.n	8003d9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d022      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x80>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d01d      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x80>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d018      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x80>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <HAL_TIM_Base_Start_IT+0xc8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x80>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00e      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x80>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1a      	ldr	r2, [pc, #104]	; (8003db4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x80>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x80>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_TIM_Base_Start_IT+0xd8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d111      	bne.n	8003d88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d010      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d86:	e007      	b.n	8003d98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40001800 	.word	0x40001800

08003dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0202 	mvn.w	r2, #2
 8003dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8ed 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8e0 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8ef 	bl	8003ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0204 	mvn.w	r2, #4
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8c3 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8b6 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8c5 	bl	8003ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d122      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0208 	mvn.w	r2, #8
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f899 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f88c 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f89b 	bl	8003ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d122      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0210 	mvn.w	r2, #16
 8003ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2208      	movs	r2, #8
 8003eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f86f 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f862 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f871 	bl	8003ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0201 	mvn.w	r2, #1
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc fc30 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b80      	cmp	r3, #128	; 0x80
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8fb 	bl	8004166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d10e      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f835 	bl	8004006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0220 	mvn.w	r2, #32
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8c6 	bl	8004154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <TIM_Base_SetConfig+0x110>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d00f      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3c      	ldr	r2, [pc, #240]	; (800412c <TIM_Base_SetConfig+0x114>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00b      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3b      	ldr	r2, [pc, #236]	; (8004130 <TIM_Base_SetConfig+0x118>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a39      	ldr	r2, [pc, #228]	; (8004138 <TIM_Base_SetConfig+0x120>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <TIM_Base_SetConfig+0x110>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d027      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2b      	ldr	r2, [pc, #172]	; (800412c <TIM_Base_SetConfig+0x114>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d023      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <TIM_Base_SetConfig+0x118>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01f      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a29      	ldr	r2, [pc, #164]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a28      	ldr	r2, [pc, #160]	; (8004138 <TIM_Base_SetConfig+0x120>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d017      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a27      	ldr	r2, [pc, #156]	; (800413c <TIM_Base_SetConfig+0x124>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <TIM_Base_SetConfig+0x128>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00f      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a25      	ldr	r2, [pc, #148]	; (8004144 <TIM_Base_SetConfig+0x12c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a24      	ldr	r2, [pc, #144]	; (8004148 <TIM_Base_SetConfig+0x130>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a23      	ldr	r2, [pc, #140]	; (800414c <TIM_Base_SetConfig+0x134>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a22      	ldr	r2, [pc, #136]	; (8004150 <TIM_Base_SetConfig+0x138>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a09      	ldr	r2, [pc, #36]	; (8004128 <TIM_Base_SetConfig+0x110>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_Base_SetConfig+0xf8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0b      	ldr	r2, [pc, #44]	; (8004138 <TIM_Base_SetConfig+0x120>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d103      	bne.n	8004118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	615a      	str	r2, [r3, #20]
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40010000 	.word	0x40010000
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
 8004138:	40010400 	.word	0x40010400
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800
 8004148:	40001800 	.word	0x40001800
 800414c:	40001c00 	.word	0x40001c00
 8004150:	40002000 	.word	0x40002000

08004154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004178:	b084      	sub	sp, #16
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	f107 001c 	add.w	r0, r7, #28
 8004186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	2b01      	cmp	r3, #1
 800418e:	d122      	bne.n	80041d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d105      	bne.n	80041ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f001 fbd6 	bl	800597c <USB_CoreReset>
 80041d0:	4603      	mov	r3, r0
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	e01a      	b.n	800420c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f001 fbca 	bl	800597c <USB_CoreReset>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
 80041fe:	e005      	b.n	800420c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10b      	bne.n	800422a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f043 0206 	orr.w	r2, r3, #6
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004236:	b004      	add	sp, #16
 8004238:	4770      	bx	lr
	...

0800423c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d165      	bne.n	800431c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a41      	ldr	r2, [pc, #260]	; (8004358 <USB_SetTurnaroundTime+0x11c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d906      	bls.n	8004266 <USB_SetTurnaroundTime+0x2a>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a40      	ldr	r2, [pc, #256]	; (800435c <USB_SetTurnaroundTime+0x120>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d202      	bcs.n	8004266 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004260:	230f      	movs	r3, #15
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e062      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4a3c      	ldr	r2, [pc, #240]	; (800435c <USB_SetTurnaroundTime+0x120>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d306      	bcc.n	800427c <USB_SetTurnaroundTime+0x40>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4a3b      	ldr	r2, [pc, #236]	; (8004360 <USB_SetTurnaroundTime+0x124>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d202      	bcs.n	800427c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004276:	230e      	movs	r3, #14
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e057      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4a38      	ldr	r2, [pc, #224]	; (8004360 <USB_SetTurnaroundTime+0x124>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d306      	bcc.n	8004292 <USB_SetTurnaroundTime+0x56>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a37      	ldr	r2, [pc, #220]	; (8004364 <USB_SetTurnaroundTime+0x128>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d202      	bcs.n	8004292 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800428c:	230d      	movs	r3, #13
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e04c      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4a33      	ldr	r2, [pc, #204]	; (8004364 <USB_SetTurnaroundTime+0x128>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d306      	bcc.n	80042a8 <USB_SetTurnaroundTime+0x6c>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4a32      	ldr	r2, [pc, #200]	; (8004368 <USB_SetTurnaroundTime+0x12c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d802      	bhi.n	80042a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042a2:	230c      	movs	r3, #12
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e041      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4a2f      	ldr	r2, [pc, #188]	; (8004368 <USB_SetTurnaroundTime+0x12c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d906      	bls.n	80042be <USB_SetTurnaroundTime+0x82>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4a2e      	ldr	r2, [pc, #184]	; (800436c <USB_SetTurnaroundTime+0x130>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d802      	bhi.n	80042be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042b8:	230b      	movs	r3, #11
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e036      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4a2a      	ldr	r2, [pc, #168]	; (800436c <USB_SetTurnaroundTime+0x130>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d906      	bls.n	80042d4 <USB_SetTurnaroundTime+0x98>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4a29      	ldr	r2, [pc, #164]	; (8004370 <USB_SetTurnaroundTime+0x134>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d802      	bhi.n	80042d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042ce:	230a      	movs	r3, #10
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e02b      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a26      	ldr	r2, [pc, #152]	; (8004370 <USB_SetTurnaroundTime+0x134>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d906      	bls.n	80042ea <USB_SetTurnaroundTime+0xae>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a25      	ldr	r2, [pc, #148]	; (8004374 <USB_SetTurnaroundTime+0x138>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d202      	bcs.n	80042ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042e4:	2309      	movs	r3, #9
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e020      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4a21      	ldr	r2, [pc, #132]	; (8004374 <USB_SetTurnaroundTime+0x138>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d306      	bcc.n	8004300 <USB_SetTurnaroundTime+0xc4>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4a20      	ldr	r2, [pc, #128]	; (8004378 <USB_SetTurnaroundTime+0x13c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d802      	bhi.n	8004300 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042fa:	2308      	movs	r3, #8
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e015      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a1d      	ldr	r2, [pc, #116]	; (8004378 <USB_SetTurnaroundTime+0x13c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d906      	bls.n	8004316 <USB_SetTurnaroundTime+0xda>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <USB_SetTurnaroundTime+0x140>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d202      	bcs.n	8004316 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004310:	2307      	movs	r3, #7
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e00a      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004316:	2306      	movs	r3, #6
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e007      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004322:	2309      	movs	r3, #9
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e001      	b.n	800432c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004328:	2309      	movs	r3, #9
 800432a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	029b      	lsls	r3, r3, #10
 8004340:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	00d8acbf 	.word	0x00d8acbf
 800435c:	00e4e1c0 	.word	0x00e4e1c0
 8004360:	00f42400 	.word	0x00f42400
 8004364:	01067380 	.word	0x01067380
 8004368:	011a499f 	.word	0x011a499f
 800436c:	01312cff 	.word	0x01312cff
 8004370:	014ca43f 	.word	0x014ca43f
 8004374:	016e3600 	.word	0x016e3600
 8004378:	01a6ab1f 	.word	0x01a6ab1f
 800437c:	01e84800 	.word	0x01e84800

08004380 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f043 0201 	orr.w	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f023 0201 	bic.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d115      	bne.n	800440e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043ee:	2001      	movs	r0, #1
 80043f0:	f7fc fbda 	bl	8000ba8 <HAL_Delay>
      ms++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f001 fa33 	bl	8005866 <USB_GetMode>
 8004400:	4603      	mov	r3, r0
 8004402:	2b01      	cmp	r3, #1
 8004404:	d01e      	beq.n	8004444 <USB_SetCurrentMode+0x84>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b31      	cmp	r3, #49	; 0x31
 800440a:	d9f0      	bls.n	80043ee <USB_SetCurrentMode+0x2e>
 800440c:	e01a      	b.n	8004444 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d115      	bne.n	8004440 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004420:	2001      	movs	r0, #1
 8004422:	f7fc fbc1 	bl	8000ba8 <HAL_Delay>
      ms++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f001 fa1a 	bl	8005866 <USB_GetMode>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <USB_SetCurrentMode+0x84>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b31      	cmp	r3, #49	; 0x31
 800443c:	d9f0      	bls.n	8004420 <USB_SetCurrentMode+0x60>
 800443e:	e001      	b.n	8004444 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e005      	b.n	8004450 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b32      	cmp	r3, #50	; 0x32
 8004448:	d101      	bne.n	800444e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004458:	b084      	sub	sp, #16
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e009      	b.n	800448c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3340      	adds	r3, #64	; 0x40
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	2200      	movs	r2, #0
 8004484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3301      	adds	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b0e      	cmp	r3, #14
 8004490:	d9f2      	bls.n	8004478 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11c      	bne.n	80044d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a6:	f043 0302 	orr.w	r3, r3, #2
 80044aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
 80044d0:	e00b      	b.n	80044ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044f0:	461a      	mov	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fc:	4619      	mov	r1, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004504:	461a      	mov	r2, r3
 8004506:	680b      	ldr	r3, [r1, #0]
 8004508:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10c      	bne.n	800452a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004516:	2100      	movs	r1, #0
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f965 	bl	80047e8 <USB_SetDevSpeed>
 800451e:	e008      	b.n	8004532 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f960 	bl	80047e8 <USB_SetDevSpeed>
 8004528:	e003      	b.n	8004532 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800452a:	2103      	movs	r1, #3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f95b 	bl	80047e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004532:	2110      	movs	r1, #16
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f8f3 	bl	8004720 <USB_FlushTxFifo>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f91f 	bl	8004788 <USB_FlushRxFifo>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	461a      	mov	r2, r3
 800455c:	2300      	movs	r3, #0
 800455e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	461a      	mov	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	e043      	b.n	8004606 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004594:	d118      	bne.n	80045c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	461a      	mov	r2, r3
 80045aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e013      	b.n	80045da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	461a      	mov	r2, r3
 80045c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e008      	b.n	80045da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	2300      	movs	r3, #0
 80045d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	461a      	mov	r2, r3
 80045e8:	2300      	movs	r3, #0
 80045ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	461a      	mov	r2, r3
 80045fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	3301      	adds	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d3b7      	bcc.n	800457e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e043      	b.n	800469c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800462a:	d118      	bne.n	800465e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	461a      	mov	r2, r3
 8004640:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e013      	b.n	8004670 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	461a      	mov	r2, r3
 8004656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	e008      	b.n	8004670 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2300      	movs	r3, #0
 800466e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	461a      	mov	r2, r3
 800467e:	2300      	movs	r3, #0
 8004680:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	461a      	mov	r2, r3
 8004690:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004694:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3301      	adds	r3, #1
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3b7      	bcc.n	8004614 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f043 0210 	orr.w	r2, r3, #16
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <USB_DevInit+0x2c4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f043 0208 	orr.w	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004718:	b004      	add	sp, #16
 800471a:	4770      	bx	lr
 800471c:	803c3800 	.word	0x803c3800

08004720 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3301      	adds	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a13      	ldr	r2, [pc, #76]	; (8004784 <USB_FlushTxFifo+0x64>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e01b      	b.n	8004778 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	daf2      	bge.n	800472e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	019b      	lsls	r3, r3, #6
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a08      	ldr	r2, [pc, #32]	; (8004784 <USB_FlushTxFifo+0x64>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e006      	b.n	8004778 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b20      	cmp	r3, #32
 8004774:	d0f0      	beq.n	8004758 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	00030d40 	.word	0x00030d40

08004788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <USB_FlushRxFifo+0x5c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e018      	b.n	80047d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	daf2      	bge.n	8004794 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2210      	movs	r2, #16
 80047b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <USB_FlushRxFifo+0x5c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e006      	b.n	80047d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d0f0      	beq.n	80047b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	00030d40 	.word	0x00030d40

080047e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	68f9      	ldr	r1, [r7, #12]
 8004804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0306 	and.w	r3, r3, #6
 8004830:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004838:	2300      	movs	r3, #0
 800483a:	75fb      	strb	r3, [r7, #23]
 800483c:	e00a      	b.n	8004854 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d002      	beq.n	800484a <USB_GetDevSpeed+0x32>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d102      	bne.n	8004850 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800484a:	2302      	movs	r3, #2
 800484c:	75fb      	strb	r3, [r7, #23]
 800484e:	e001      	b.n	8004854 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004850:	230f      	movs	r3, #15
 8004852:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004854:	7dfb      	ldrb	r3, [r7, #23]
}
 8004856:	4618      	mov	r0, r3
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d13a      	bne.n	80048f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	b29b      	uxth	r3, r3
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800489a:	4313      	orrs	r3, r2
 800489c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d155      	bne.n	8004960 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	791b      	ldrb	r3, [r3, #4]
 80048ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	059b      	lsls	r3, r3, #22
 80048d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048d8:	4313      	orrs	r3, r2
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	0151      	lsls	r1, r2, #5
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	440a      	add	r2, r1
 80048e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	e036      	b.n	8004960 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	2101      	movs	r1, #1
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004910:	4313      	orrs	r3, r2
 8004912:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d11a      	bne.n	8004960 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004946:	430b      	orrs	r3, r1
 8004948:	4313      	orrs	r3, r2
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d161      	bne.n	8004a4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800499a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499e:	d11f      	bne.n	80049e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f303 	lsl.w	r3, r1, r3
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a00:	4013      	ands	r3, r2
 8004a02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	2101      	movs	r1, #1
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a24:	4013      	ands	r3, r2
 8004a26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	0159      	lsls	r1, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	4619      	mov	r1, r3
 8004a44:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <USB_DeactivateEndpoint+0x1b0>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]
 8004a4a:	e060      	b.n	8004b0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a62:	d11f      	bne.n	8004aa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	43db      	mvns	r3, r3
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	68f9      	ldr	r1, [r7, #12]
 8004ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	0159      	lsls	r1, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	440b      	add	r3, r1
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	4619      	mov	r1, r3
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <USB_DeactivateEndpoint+0x1b4>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	ec337800 	.word	0xec337800
 8004b20:	eff37800 	.word	0xeff37800

08004b24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	f040 815c 	bne.w	8004dfe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d132      	bne.n	8004bb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bac:	0cdb      	lsrs	r3, r3, #19
 8004bae:	04db      	lsls	r3, r3, #19
 8004bb0:	6113      	str	r3, [r2, #16]
 8004bb2:	e074      	b.n	8004c9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bce:	0cdb      	lsrs	r3, r3, #19
 8004bd0:	04db      	lsls	r3, r3, #19
 8004bd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6999      	ldr	r1, [r3, #24]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	440b      	add	r3, r1
 8004c10:	1e59      	subs	r1, r3, #1
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c1a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c1c:	4b9d      	ldr	r3, [pc, #628]	; (8004e94 <USB_EPStartXfer+0x370>)
 8004c1e:	400b      	ands	r3, r1
 8004c20:	69b9      	ldr	r1, [r7, #24]
 8004c22:	0148      	lsls	r0, r1, #5
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	4401      	add	r1, r0
 8004c28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c46:	69b9      	ldr	r1, [r7, #24]
 8004c48:	0148      	lsls	r0, r1, #5
 8004c4a:	69f9      	ldr	r1, [r7, #28]
 8004c4c:	4401      	add	r1, r0
 8004c4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c52:	4313      	orrs	r3, r2
 8004c54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	791b      	ldrb	r3, [r3, #4]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d11f      	bne.n	8004c9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d14b      	bne.n	8004d3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	791b      	ldrb	r3, [r3, #4]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d128      	bne.n	8004d1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e00f      	b.n	8004d1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	0151      	lsls	r1, r2, #5
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	440a      	add	r2, r1
 8004d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e133      	b.n	8004fa4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	791b      	ldrb	r3, [r3, #4]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d015      	beq.n	8004d90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 811b 	beq.w	8004fa4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	2101      	movs	r1, #1
 8004d80:	fa01 f303 	lsl.w	r3, r1, r3
 8004d84:	69f9      	ldr	r1, [r7, #28]
 8004d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	634b      	str	r3, [r1, #52]	; 0x34
 8004d8e:	e109      	b.n	8004fa4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d110      	bne.n	8004dc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e00f      	b.n	8004de2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6919      	ldr	r1, [r3, #16]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	b298      	uxth	r0, r3
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	4603      	mov	r3, r0
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fadc 	bl	80053b4 <USB_WritePacket>
 8004dfc:	e0d2      	b.n	8004fa4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e18:	0cdb      	lsrs	r3, r3, #19
 8004e1a:	04db      	lsls	r3, r3, #19
 8004e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d126      	bne.n	8004e98 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	0148      	lsls	r0, r1, #5
 8004e64:	69f9      	ldr	r1, [r7, #28]
 8004e66:	4401      	add	r1, r0
 8004e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e8e:	6113      	str	r3, [r2, #16]
 8004e90:	e03a      	b.n	8004f08 <USB_EPStartXfer+0x3e4>
 8004e92:	bf00      	nop
 8004e94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	1e5a      	subs	r2, r3, #1
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	8afa      	ldrh	r2, [r7, #22]
 8004eb4:	fb03 f202 	mul.w	r2, r3, r2
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	8afb      	ldrh	r3, [r7, #22]
 8004ecc:	04d9      	lsls	r1, r3, #19
 8004ece:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <USB_EPStartXfer+0x48c>)
 8004ed0:	400b      	ands	r3, r1
 8004ed2:	69b9      	ldr	r1, [r7, #24]
 8004ed4:	0148      	lsls	r0, r1, #5
 8004ed6:	69f9      	ldr	r1, [r7, #28]
 8004ed8:	4401      	add	r1, r0
 8004eda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef8:	69b9      	ldr	r1, [r7, #24]
 8004efa:	0148      	lsls	r0, r1, #5
 8004efc:	69f9      	ldr	r1, [r7, #28]
 8004efe:	4401      	add	r1, r0
 8004f00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f04:	4313      	orrs	r3, r2
 8004f06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d10d      	bne.n	8004f2a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6919      	ldr	r1, [r3, #16]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f26:	460a      	mov	r2, r1
 8004f28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	791b      	ldrb	r3, [r3, #4]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d128      	bne.n	8004f84 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d110      	bne.n	8004f64 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e00f      	b.n	8004f84 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	1ff80000 	.word	0x1ff80000

08004fb4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	f040 80ce 	bne.w	8005172 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d132      	bne.n	8005044 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ffc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503c:	0cdb      	lsrs	r3, r3, #19
 800503e:	04db      	lsls	r3, r3, #19
 8005040:	6113      	str	r3, [r2, #16]
 8005042:	e04e      	b.n	80050e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505e:	0cdb      	lsrs	r3, r3, #19
 8005060:	04db      	lsls	r3, r3, #19
 8005062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005082:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005086:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	429a      	cmp	r2, r3
 8005092:	d903      	bls.n	800509c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d2:	6939      	ldr	r1, [r7, #16]
 80050d4:	0148      	lsls	r0, r1, #5
 80050d6:	6979      	ldr	r1, [r7, #20]
 80050d8:	4401      	add	r1, r0
 80050da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050de:	4313      	orrs	r3, r2
 80050e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d11e      	bne.n	8005126 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d009      	beq.n	8005104 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fc:	461a      	mov	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e097      	b.n	8005256 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005144:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8083 	beq.w	8005256 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	2101      	movs	r1, #1
 8005162:	fa01 f303 	lsl.w	r3, r1, r3
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800516c:	4313      	orrs	r3, r2
 800516e:	634b      	str	r3, [r1, #52]	; 0x34
 8005170:	e071      	b.n	8005256 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518c:	0cdb      	lsrs	r3, r3, #19
 800518e:	04db      	lsls	r3, r3, #19
 8005190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005204:	6939      	ldr	r1, [r7, #16]
 8005206:	0148      	lsls	r0, r1, #5
 8005208:	6979      	ldr	r1, [r7, #20]
 800520a:	4401      	add	r1, r0
 800520c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005210:	4313      	orrs	r3, r2
 8005212:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d10d      	bne.n	8005236 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6919      	ldr	r1, [r3, #16]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	460a      	mov	r2, r1
 8005234:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	0151      	lsls	r1, r2, #5
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	440a      	add	r2, r1
 800524c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005250:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005254:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005262:	b480      	push	{r7}
 8005264:	b087      	sub	sp, #28
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d14a      	bne.n	8005316 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005298:	f040 8086 	bne.w	80053a8 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052be:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e2:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d902      	bls.n	80052fa <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
          break;
 80052f8:	e056      	b.n	80053a8 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800530e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005312:	d0e7      	beq.n	80052e4 <USB_EPStopXfer+0x82>
 8005314:	e048      	b.n	80053a8 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800532e:	d13b      	bne.n	80053a8 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	7812      	ldrb	r2, [r2, #0]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005352:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	7812      	ldrb	r2, [r2, #0]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005376:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f242 7210 	movw	r2, #10000	; 0x2710
 8005384:	4293      	cmp	r3, r2
 8005386:	d902      	bls.n	800538e <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]
          break;
 800538c:	e00c      	b.n	80053a8 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a6:	d0e7      	beq.n	8005378 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	4611      	mov	r1, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	460b      	mov	r3, r1
 80053c4:	71fb      	strb	r3, [r7, #7]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d123      	bne.n	8005422 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053da:	88bb      	ldrh	r3, [r7, #4]
 80053dc:	3303      	adds	r3, #3
 80053de:	089b      	lsrs	r3, r3, #2
 80053e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e018      	b.n	800541a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	031a      	lsls	r2, r3, #12
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f4:	461a      	mov	r2, r3
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	3301      	adds	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3301      	adds	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	3301      	adds	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	3301      	adds	r3, #1
 8005412:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	3301      	adds	r3, #1
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d3e2      	bcc.n	80053e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3724      	adds	r7, #36	; 0x24
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800542e:	b480      	push	{r7}
 8005430:	b08b      	sub	sp, #44	; 0x2c
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	4613      	mov	r3, r2
 800543a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	b29b      	uxth	r3, r3
 800544a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005454:	2300      	movs	r3, #0
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	e014      	b.n	8005484 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	601a      	str	r2, [r3, #0]
    pDest++;
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	3301      	adds	r3, #1
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	3301      	adds	r3, #1
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	3301      	adds	r3, #1
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	3301      	adds	r3, #1
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	3301      	adds	r3, #1
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	6a3a      	ldr	r2, [r7, #32]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	429a      	cmp	r2, r3
 800548a:	d3e6      	bcc.n	800545a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800548c:	8bfb      	ldrh	r3, [r7, #30]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01e      	beq.n	80054d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549c:	461a      	mov	r2, r3
 800549e:	f107 0310 	add.w	r3, r7, #16
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	fa22 f303 	lsr.w	r3, r2, r3
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	701a      	strb	r2, [r3, #0]
      i++;
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	3301      	adds	r3, #1
 80054bc:	623b      	str	r3, [r7, #32]
      pDest++;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	3301      	adds	r3, #1
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054c4:	8bfb      	ldrh	r3, [r7, #30]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054ca:	8bfb      	ldrh	r3, [r7, #30]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ea      	bne.n	80054a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	372c      	adds	r7, #44	; 0x2c
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d12c      	bne.n	8005552 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	db12      	blt.n	8005530 <USB_EPSetStall+0x54>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00f      	beq.n	8005530 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800552e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	e02b      	b.n	80055aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	db12      	blt.n	800558a <USB_EPSetStall+0xae>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00f      	beq.n	800558a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	440a      	add	r2, r1
 8005580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005584:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005588:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d128      	bne.n	8005624 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	791b      	ldrb	r3, [r3, #4]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d003      	beq.n	8005602 <USB_EPClearStall+0x4c>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	791b      	ldrb	r3, [r3, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d138      	bne.n	8005674 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e027      	b.n	8005674 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005642:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	791b      	ldrb	r3, [r3, #4]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d003      	beq.n	8005654 <USB_EPClearStall+0x9e>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	791b      	ldrb	r3, [r3, #4]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d10f      	bne.n	8005674 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056e4:	f023 0303 	bic.w	r3, r3, #3
 80056e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f8:	f023 0302 	bic.w	r3, r3, #2
 80056fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005724:	f023 0303 	bic.w	r3, r3, #3
 8005728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4013      	ands	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	0c1b      	lsrs	r3, r3, #16
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	b29b      	uxth	r3, r3
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4013      	ands	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005800:	68bb      	ldr	r3, [r7, #8]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr

0800580c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
 800583c:	01db      	lsls	r3, r3, #7
 800583e:	b2db      	uxtb	r3, r3
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4013      	ands	r3, r2
 8005858:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800585a:	68bb      	ldr	r3, [r7, #8]
}
 800585c:	4618      	mov	r0, r3
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr

08005866 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0301 	and.w	r3, r3, #1
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800589e:	f023 0307 	bic.w	r3, r3, #7
 80058a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr

080058c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	460b      	mov	r3, r1
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	333c      	adds	r3, #60	; 0x3c
 80058da:	3304      	adds	r3, #4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4a25      	ldr	r2, [pc, #148]	; (8005978 <USB_EP0_OutStart+0xb4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d90a      	bls.n	80058fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f8:	d101      	bne.n	80058fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e037      	b.n	800596e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	2300      	movs	r3, #0
 8005908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592c:	f043 0318 	orr.w	r3, r3, #24
 8005930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005940:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005944:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d10f      	bne.n	800596c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	461a      	mov	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005966:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800596a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr
 8005978:	4f54300a 	.word	0x4f54300a

0800597c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a12      	ldr	r2, [pc, #72]	; (80059dc <USB_CoreReset+0x60>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e01b      	b.n	80059d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	daf2      	bge.n	8005988 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f043 0201 	orr.w	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a08      	ldr	r2, [pc, #32]	; (80059dc <USB_CoreReset+0x60>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e006      	b.n	80059d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d0f0      	beq.n	80059b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr
 80059dc:	00030d40 	.word	0x00030d40

080059e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80059e6:	2100      	movs	r1, #0
 80059e8:	2000      	movs	r0, #0
 80059ea:	f006 f94f 	bl	800bc8c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80059ee:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <MX_LWIP_Init+0x9c>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80059f4:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <MX_LWIP_Init+0xa0>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80059fa:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <MX_LWIP_Init+0xa4>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <MX_LWIP_Init+0xa8>)
 8005a02:	9302      	str	r3, [sp, #8]
 8005a04:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <MX_LWIP_Init+0xac>)
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <MX_LWIP_Init+0xa4>)
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <MX_LWIP_Init+0xa0>)
 8005a10:	491a      	ldr	r1, [pc, #104]	; (8005a7c <MX_LWIP_Init+0x9c>)
 8005a12:	481f      	ldr	r0, [pc, #124]	; (8005a90 <MX_LWIP_Init+0xb0>)
 8005a14:	f006 ffb2 	bl	800c97c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005a18:	481d      	ldr	r0, [pc, #116]	; (8005a90 <MX_LWIP_Init+0xb0>)
 8005a1a:	f007 f967 	bl	800ccec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <MX_LWIP_Init+0xb0>)
 8005a20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a24:	089b      	lsrs	r3, r3, #2
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005a30:	4817      	ldr	r0, [pc, #92]	; (8005a90 <MX_LWIP_Init+0xb0>)
 8005a32:	f007 f969 	bl	800cd08 <netif_set_up>
 8005a36:	e002      	b.n	8005a3e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005a38:	4815      	ldr	r0, [pc, #84]	; (8005a90 <MX_LWIP_Init+0xb0>)
 8005a3a:	f007 f9d1 	bl	800cde0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005a3e:	4915      	ldr	r1, [pc, #84]	; (8005a94 <MX_LWIP_Init+0xb4>)
 8005a40:	4813      	ldr	r0, [pc, #76]	; (8005a90 <MX_LWIP_Init+0xb0>)
 8005a42:	f007 f9ff 	bl	800ce44 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005a46:	2224      	movs	r2, #36	; 0x24
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4813      	ldr	r0, [pc, #76]	; (8005a98 <MX_LWIP_Init+0xb8>)
 8005a4c:	f013 f982 	bl	8018d54 <memset>
  attributes.name = "EthLink";
 8005a50:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <MX_LWIP_Init+0xb8>)
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <MX_LWIP_Init+0xbc>)
 8005a54:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005a56:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <MX_LWIP_Init+0xb8>)
 8005a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a5c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005a5e:	4b0e      	ldr	r3, [pc, #56]	; (8005a98 <MX_LWIP_Init+0xb8>)
 8005a60:	2210      	movs	r2, #16
 8005a62:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005a64:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <MX_LWIP_Init+0xb8>)
 8005a66:	490a      	ldr	r1, [pc, #40]	; (8005a90 <MX_LWIP_Init+0xb0>)
 8005a68:	480d      	ldr	r0, [pc, #52]	; (8005aa0 <MX_LWIP_Init+0xc0>)
 8005a6a:	f002 fa9c 	bl	8007fa6 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005a6e:	4808      	ldr	r0, [pc, #32]	; (8005a90 <MX_LWIP_Init+0xb0>)
 8005a70:	f00e fb46 	bl	8014100 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	2000021c 	.word	0x2000021c
 8005a80:	20000220 	.word	0x20000220
 8005a84:	20000224 	.word	0x20000224
 8005a88:	0800bbc9 	.word	0x0800bbc9
 8005a8c:	08005dc9 	.word	0x08005dc9
 8005a90:	200001e4 	.word	0x200001e4
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	20000228 	.word	0x20000228
 8005a9c:	08019aa4 	.word	0x08019aa4
 8005aa0:	08005e73 	.word	0x08005e73

08005aa4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr
	...

08005ab8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08e      	sub	sp, #56	; 0x38
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005ac6:	4b4e      	ldr	r3, [pc, #312]	; (8005c00 <low_level_init+0x148>)
 8005ac8:	4a4e      	ldr	r2, [pc, #312]	; (8005c04 <low_level_init+0x14c>)
 8005aca:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005acc:	2300      	movs	r3, #0
 8005ace:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005ad4:	23e1      	movs	r3, #225	; 0xe1
 8005ad6:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005adc:	2300      	movs	r3, #0
 8005ade:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005ae4:	4a46      	ldr	r2, [pc, #280]	; (8005c00 <low_level_init+0x148>)
 8005ae6:	f107 0308 	add.w	r3, r7, #8
 8005aea:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005aec:	4b44      	ldr	r3, [pc, #272]	; (8005c00 <low_level_init+0x148>)
 8005aee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005af2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005af4:	4b42      	ldr	r3, [pc, #264]	; (8005c00 <low_level_init+0x148>)
 8005af6:	4a44      	ldr	r2, [pc, #272]	; (8005c08 <low_level_init+0x150>)
 8005af8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005afa:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <low_level_init+0x148>)
 8005afc:	4a43      	ldr	r2, [pc, #268]	; (8005c0c <low_level_init+0x154>)
 8005afe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005b00:	4b3f      	ldr	r3, [pc, #252]	; (8005c00 <low_level_init+0x148>)
 8005b02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005b06:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b08:	483d      	ldr	r0, [pc, #244]	; (8005c00 <low_level_init+0x148>)
 8005b0a:	f7fb f951 	bl	8000db0 <HAL_ETH_Init>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005b14:	2238      	movs	r2, #56	; 0x38
 8005b16:	2100      	movs	r1, #0
 8005b18:	483d      	ldr	r0, [pc, #244]	; (8005c10 <low_level_init+0x158>)
 8005b1a:	f013 f91b 	bl	8018d54 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005b1e:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <low_level_init+0x158>)
 8005b20:	2221      	movs	r2, #33	; 0x21
 8005b22:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005b24:	4b3a      	ldr	r3, [pc, #232]	; (8005c10 <low_level_init+0x158>)
 8005b26:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005b2a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005b2c:	4b38      	ldr	r3, [pc, #224]	; (8005c10 <low_level_init+0x158>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005b32:	4838      	ldr	r0, [pc, #224]	; (8005c14 <low_level_init+0x15c>)
 8005b34:	f006 fdde 	bl	800c6f4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2206      	movs	r2, #6
 8005b3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005b40:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <low_level_init+0x148>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005b4c:	4b2c      	ldr	r3, [pc, #176]	; (8005c00 <low_level_init+0x148>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	785a      	ldrb	r2, [r3, #1]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <low_level_init+0x148>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	789a      	ldrb	r2, [r3, #2]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005b64:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <low_level_init+0x148>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	78da      	ldrb	r2, [r3, #3]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005b70:	4b23      	ldr	r3, [pc, #140]	; (8005c00 <low_level_init+0x148>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	791a      	ldrb	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <low_level_init+0x148>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	795a      	ldrb	r2, [r3, #5]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005b8e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b96:	f043 030a 	orr.w	r3, r3, #10
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	f002 fbb8 	bl	800831c <osSemaphoreNew>
 8005bac:	4603      	mov	r3, r0
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <low_level_init+0x160>)
 8005bb0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	f002 fbb0 	bl	800831c <osSemaphoreNew>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <low_level_init+0x164>)
 8005bc0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005bc2:	f107 0310 	add.w	r3, r7, #16
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f013 f8c2 	bl	8018d54 <memset>
  attributes.name = "EthIf";
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <low_level_init+0x168>)
 8005bd2:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005bd4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 8005bda:	2330      	movs	r3, #48	; 0x30
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 8005bde:	f107 0310 	add.w	r3, r7, #16
 8005be2:	461a      	mov	r2, r3
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	480f      	ldr	r0, [pc, #60]	; (8005c24 <low_level_init+0x16c>)
 8005be8:	f002 f9dd 	bl	8007fa6 <osThreadNew>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8005bec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <low_level_init+0x140>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8005bf4:	f7fa fde8 	bl	80007c8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005bf8:	bf00      	nop
 8005bfa:	3738      	adds	r7, #56	; 0x38
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20004d20 	.word	0x20004d20
 8005c04:	40028000 	.word	0x40028000
 8005c08:	20004c78 	.word	0x20004c78
 8005c0c:	20004bd8 	.word	0x20004bd8
 8005c10:	20004dd0 	.word	0x20004dd0
 8005c14:	0801c9cc 	.word	0x0801c9cc
 8005c18:	20004d18 	.word	0x20004d18
 8005c1c:	20004d1c 	.word	0x20004d1c
 8005c20:	08019aac 	.word	0x08019aac
 8005c24:	08005d75 	.word	0x08005d75

08005c28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b092      	sub	sp, #72	; 0x48
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005c40:	f107 030c 	add.w	r3, r7, #12
 8005c44:	2230      	movs	r2, #48	; 0x30
 8005c46:	2100      	movs	r1, #0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f013 f883 	bl	8018d54 <memset>

  for(q = p; q != NULL; q = q->next)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
 8005c52:	e045      	b.n	8005ce0 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d902      	bls.n	8005c60 <low_level_output+0x38>
      return ERR_IF;
 8005c5a:	f06f 030b 	mvn.w	r3, #11
 8005c5e:	e065      	b.n	8005d2c <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8005c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	3348      	adds	r3, #72	; 0x48
 8005c70:	443b      	add	r3, r7
 8005c72:	3b3c      	subs	r3, #60	; 0x3c
 8005c74:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c78:	895b      	ldrh	r3, [r3, #10]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c7e:	4613      	mov	r3, r2
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	3348      	adds	r3, #72	; 0x48
 8005c88:	443b      	add	r3, r7
 8005c8a:	3b38      	subs	r3, #56	; 0x38
 8005c8c:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d011      	beq.n	8005cb8 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c96:	1e5a      	subs	r2, r3, #1
 8005c98:	f107 000c 	add.w	r0, r7, #12
 8005c9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	440b      	add	r3, r1
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	18c1      	adds	r1, r0, r3
 8005ca8:	4613      	mov	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	3348      	adds	r3, #72	; 0x48
 8005cb2:	443b      	add	r3, r7
 8005cb4:	3b34      	subs	r3, #52	; 0x34
 8005cb6:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8005cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	3348      	adds	r3, #72	; 0x48
 8005ccc:	443b      	add	r3, r7
 8005cce:	3b34      	subs	r3, #52	; 0x34
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1b6      	bne.n	8005c54 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	891b      	ldrh	r3, [r3, #8]
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <low_level_output+0x10c>)
 8005cee:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005cf0:	4a10      	ldr	r2, [pc, #64]	; (8005d34 <low_level_output+0x10c>)
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005cf8:	4a0e      	ldr	r2, [pc, #56]	; (8005d34 <low_level_output+0x10c>)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005cfe:	6838      	ldr	r0, [r7, #0]
 8005d00:	f007 fcee 	bl	800d6e0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005d04:	490b      	ldr	r1, [pc, #44]	; (8005d34 <low_level_output+0x10c>)
 8005d06:	480c      	ldr	r0, [pc, #48]	; (8005d38 <low_level_output+0x110>)
 8005d08:	f7fb f8d9 	bl	8000ebe <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005d0c:	bf00      	nop
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <low_level_output+0x114>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f04f 31ff 	mov.w	r1, #4294967295
 8005d16:	4618      	mov	r0, r3
 8005d18:	f002 fb8a 	bl	8008430 <osSemaphoreAcquire>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f5      	bne.n	8005d0e <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005d22:	4805      	ldr	r0, [pc, #20]	; (8005d38 <low_level_output+0x110>)
 8005d24:	f7fb fa5c 	bl	80011e0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005d28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3748      	adds	r7, #72	; 0x48
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20004dd0 	.word	0x20004dd0
 8005d38:	20004d20 	.word	0x20004d20
 8005d3c:	20004d1c 	.word	0x20004d1c

08005d40 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <low_level_input+0x2c>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005d54:	f107 030c 	add.w	r3, r7, #12
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4805      	ldr	r0, [pc, #20]	; (8005d70 <low_level_input+0x30>)
 8005d5c:	f7fb f90b 	bl	8000f76 <HAL_ETH_ReadData>
  }

  return p;
 8005d60:	68fb      	ldr	r3, [r7, #12]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20004bd4 	.word	0x20004bd4
 8005d70:	20004d20 	.word	0x20004d20

08005d74 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d84:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <ethernetif_input+0x50>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f04f 31ff 	mov.w	r1, #4294967295
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f002 fb4f 	bl	8008430 <osSemaphoreAcquire>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f5      	bne.n	8005d84 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005d98:	68b8      	ldr	r0, [r7, #8]
 8005d9a:	f7ff ffd1 	bl	8005d40 <low_level_input>
 8005d9e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	4798      	blx	r3
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f007 fbee 	bl	800d598 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1ea      	bne.n	8005d98 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005dc2:	e7df      	b.n	8005d84 <ethernetif_input+0x10>
 8005dc4:	20004d18 	.word	0x20004d18

08005dc8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <ethernetif_init+0x1c>
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <ethernetif_init+0x48>)
 8005dd8:	f240 12af 	movw	r2, #431	; 0x1af
 8005ddc:	490d      	ldr	r1, [pc, #52]	; (8005e14 <ethernetif_init+0x4c>)
 8005dde:	480e      	ldr	r0, [pc, #56]	; (8005e18 <ethernetif_init+0x50>)
 8005de0:	f013 f89e 	bl	8018f20 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2273      	movs	r2, #115	; 0x73
 8005de8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2274      	movs	r2, #116	; 0x74
 8005df0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <ethernetif_init+0x54>)
 8005df8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <ethernetif_init+0x58>)
 8005dfe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fe59 	bl	8005ab8 <low_level_init>

  return ERR_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	08019ab4 	.word	0x08019ab4
 8005e14:	08019ad0 	.word	0x08019ad0
 8005e18:	08019ae0 	.word	0x08019ae0
 8005e1c:	08015f55 	.word	0x08015f55
 8005e20:	08005c29 	.word	0x08005c29

08005e24 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005e30:	68f9      	ldr	r1, [r7, #12]
 8005e32:	4809      	ldr	r0, [pc, #36]	; (8005e58 <pbuf_free_custom+0x34>)
 8005e34:	f006 fd4e 	bl	800c8d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <pbuf_free_custom+0x38>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d107      	bne.n	8005e50 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <pbuf_free_custom+0x38>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <pbuf_free_custom+0x3c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f002 fb42 	bl	80084d4 <osSemaphoreRelease>
  }
}
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	0801c9cc 	.word	0x0801c9cc
 8005e5c:	20004bd4 	.word	0x20004bd4
 8005e60:	20004d18 	.word	0x20004d18

08005e64 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e68:	f7fa fe94 	bl	8000b94 <HAL_GetTick>
 8005e6c:	4603      	mov	r3, r0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005e7a:	2064      	movs	r0, #100	; 0x64
 8005e7c:	f002 f925 	bl	80080ca <osDelay>
 8005e80:	e7fb      	b.n	8005e7a <ethernet_link_thread+0x8>
	...

08005e84 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005e8c:	4812      	ldr	r0, [pc, #72]	; (8005ed8 <HAL_ETH_RxAllocateCallback+0x54>)
 8005e8e:	f006 fcad 	bl	800c7ec <memp_malloc_pool>
 8005e92:	60f8      	str	r0, [r7, #12]
  if (p)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d014      	beq.n	8005ec4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f103 0220 	add.w	r2, r3, #32
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a0d      	ldr	r2, [pc, #52]	; (8005edc <HAL_ETH_RxAllocateCallback+0x58>)
 8005ea8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005eb2:	9201      	str	r2, [sp, #4]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2241      	movs	r2, #65	; 0x41
 8005eba:	2100      	movs	r1, #0
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f007 f9b1 	bl	800d224 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005ec2:	e005      	b.n	8005ed0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	0801c9cc 	.word	0x0801c9cc
 8005edc:	08005e25 	.word	0x08005e25
 8005ee0:	20004bd4 	.word	0x20004bd4

08005ee4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b089      	sub	sp, #36	; 0x24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3b20      	subs	r3, #32
 8005f02:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e003      	b.n	8005f2e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	e009      	b.n	8005f50 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	891a      	ldrh	r2, [r3, #8]
 8005f40:	887b      	ldrh	r3, [r7, #2]
 8005f42:	4413      	add	r3, r2
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f2      	bne.n	8005f3c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	3724      	adds	r7, #36	; 0x24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f007 fb14 	bl	800d598 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f88:	f012 fc3c 	bl	8018804 <USBD_static_malloc>
 8005f8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d109      	bne.n	8005fa8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	32b0      	adds	r2, #176	; 0xb0
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e0d4      	b.n	8006152 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005fa8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005fac:	2100      	movs	r1, #0
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f012 fed0 	bl	8018d54 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	32b0      	adds	r2, #176	; 0xb0
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	32b0      	adds	r2, #176	; 0xb0
 8005fce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	7c1b      	ldrb	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d138      	bne.n	8006052 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fe0:	4b5e      	ldr	r3, [pc, #376]	; (800615c <USBD_CDC_Init+0x1e4>)
 8005fe2:	7819      	ldrb	r1, [r3, #0]
 8005fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe8:	2202      	movs	r2, #2
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f012 fae7 	bl	80185be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ff0:	4b5a      	ldr	r3, [pc, #360]	; (800615c <USBD_CDC_Init+0x1e4>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 020f 	and.w	r2, r3, #15
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	3324      	adds	r3, #36	; 0x24
 8006006:	2201      	movs	r2, #1
 8006008:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800600a:	4b55      	ldr	r3, [pc, #340]	; (8006160 <USBD_CDC_Init+0x1e8>)
 800600c:	7819      	ldrb	r1, [r3, #0]
 800600e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006012:	2202      	movs	r2, #2
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f012 fad2 	bl	80185be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800601a:	4b51      	ldr	r3, [pc, #324]	; (8006160 <USBD_CDC_Init+0x1e8>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 020f 	and.w	r2, r3, #15
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006032:	2201      	movs	r2, #1
 8006034:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006036:	4b4b      	ldr	r3, [pc, #300]	; (8006164 <USBD_CDC_Init+0x1ec>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3326      	adds	r3, #38	; 0x26
 800604c:	2210      	movs	r2, #16
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e035      	b.n	80060be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006052:	4b42      	ldr	r3, [pc, #264]	; (800615c <USBD_CDC_Init+0x1e4>)
 8006054:	7819      	ldrb	r1, [r3, #0]
 8006056:	2340      	movs	r3, #64	; 0x40
 8006058:	2202      	movs	r2, #2
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f012 faaf 	bl	80185be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006060:	4b3e      	ldr	r3, [pc, #248]	; (800615c <USBD_CDC_Init+0x1e4>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	f003 020f 	and.w	r2, r3, #15
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	3324      	adds	r3, #36	; 0x24
 8006076:	2201      	movs	r2, #1
 8006078:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800607a:	4b39      	ldr	r3, [pc, #228]	; (8006160 <USBD_CDC_Init+0x1e8>)
 800607c:	7819      	ldrb	r1, [r3, #0]
 800607e:	2340      	movs	r3, #64	; 0x40
 8006080:	2202      	movs	r2, #2
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f012 fa9b 	bl	80185be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006088:	4b35      	ldr	r3, [pc, #212]	; (8006160 <USBD_CDC_Init+0x1e8>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060a0:	2201      	movs	r2, #1
 80060a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060a4:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <USBD_CDC_Init+0x1ec>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	3326      	adds	r3, #38	; 0x26
 80060ba:	2210      	movs	r2, #16
 80060bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060be:	4b29      	ldr	r3, [pc, #164]	; (8006164 <USBD_CDC_Init+0x1ec>)
 80060c0:	7819      	ldrb	r1, [r3, #0]
 80060c2:	2308      	movs	r3, #8
 80060c4:	2203      	movs	r2, #3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f012 fa79 	bl	80185be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80060cc:	4b25      	ldr	r3, [pc, #148]	; (8006164 <USBD_CDC_Init+0x1ec>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f003 020f 	and.w	r2, r3, #15
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	3324      	adds	r3, #36	; 0x24
 80060e2:	2201      	movs	r2, #1
 80060e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	33b0      	adds	r3, #176	; 0xb0
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800611c:	2302      	movs	r3, #2
 800611e:	e018      	b.n	8006152 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	7c1b      	ldrb	r3, [r3, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <USBD_CDC_Init+0x1e8>)
 800612a:	7819      	ldrb	r1, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f012 fb2f 	bl	801879a <USBD_LL_PrepareReceive>
 800613c:	e008      	b.n	8006150 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800613e:	4b08      	ldr	r3, [pc, #32]	; (8006160 <USBD_CDC_Init+0x1e8>)
 8006140:	7819      	ldrb	r1, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006148:	2340      	movs	r3, #64	; 0x40
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f012 fb25 	bl	801879a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000093 	.word	0x20000093
 8006160:	20000094 	.word	0x20000094
 8006164:	20000095 	.word	0x20000095

08006168 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006174:	4b3a      	ldr	r3, [pc, #232]	; (8006260 <USBD_CDC_DeInit+0xf8>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f012 fa45 	bl	801860a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006180:	4b37      	ldr	r3, [pc, #220]	; (8006260 <USBD_CDC_DeInit+0xf8>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	3324      	adds	r3, #36	; 0x24
 8006196:	2200      	movs	r2, #0
 8006198:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800619a:	4b32      	ldr	r3, [pc, #200]	; (8006264 <USBD_CDC_DeInit+0xfc>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f012 fa32 	bl	801860a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061a6:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <USBD_CDC_DeInit+0xfc>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	f003 020f 	and.w	r2, r3, #15
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061be:	2200      	movs	r2, #0
 80061c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80061c2:	4b29      	ldr	r3, [pc, #164]	; (8006268 <USBD_CDC_DeInit+0x100>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f012 fa1e 	bl	801860a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80061ce:	4b26      	ldr	r3, [pc, #152]	; (8006268 <USBD_CDC_DeInit+0x100>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	3324      	adds	r3, #36	; 0x24
 80061e4:	2200      	movs	r2, #0
 80061e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80061e8:	4b1f      	ldr	r3, [pc, #124]	; (8006268 <USBD_CDC_DeInit+0x100>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f003 020f 	and.w	r2, r3, #15
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	3326      	adds	r3, #38	; 0x26
 80061fe:	2200      	movs	r2, #0
 8006200:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	32b0      	adds	r2, #176	; 0xb0
 800620c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01f      	beq.n	8006254 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	33b0      	adds	r3, #176	; 0xb0
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	32b0      	adds	r2, #176	; 0xb0
 8006232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006236:	4618      	mov	r0, r3
 8006238:	f012 faf0 	bl	801881c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	32b0      	adds	r2, #176	; 0xb0
 8006246:	2100      	movs	r1, #0
 8006248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000093 	.word	0x20000093
 8006264:	20000094 	.word	0x20000094
 8006268:	20000095 	.word	0x20000095

0800626c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	32b0      	adds	r2, #176	; 0xb0
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006298:	2303      	movs	r3, #3
 800629a:	e0bf      	b.n	800641c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d050      	beq.n	800634a <USBD_CDC_Setup+0xde>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	f040 80af 	bne.w	800640c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	88db      	ldrh	r3, [r3, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d03a      	beq.n	800632c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	b25b      	sxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	da1b      	bge.n	80062f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	33b0      	adds	r3, #176	; 0xb0
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80062d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	88d2      	ldrh	r2, [r2, #6]
 80062dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	88db      	ldrh	r3, [r3, #6]
 80062e2:	2b07      	cmp	r3, #7
 80062e4:	bf28      	it	cs
 80062e6:	2307      	movcs	r3, #7
 80062e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	89fa      	ldrh	r2, [r7, #14]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fd36 	bl	8007d62 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80062f6:	e090      	b.n	800641a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	785a      	ldrb	r2, [r3, #1]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	88db      	ldrh	r3, [r3, #6]
 8006306:	2b3f      	cmp	r3, #63	; 0x3f
 8006308:	d803      	bhi.n	8006312 <USBD_CDC_Setup+0xa6>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	88db      	ldrh	r3, [r3, #6]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	e000      	b.n	8006314 <USBD_CDC_Setup+0xa8>
 8006312:	2240      	movs	r2, #64	; 0x40
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800631a:	6939      	ldr	r1, [r7, #16]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006322:	461a      	mov	r2, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 fd48 	bl	8007dba <USBD_CtlPrepareRx>
      break;
 800632a:	e076      	b.n	800641a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	33b0      	adds	r3, #176	; 0xb0
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	7850      	ldrb	r0, [r2, #1]
 8006342:	2200      	movs	r2, #0
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	4798      	blx	r3
      break;
 8006348:	e067      	b.n	800641a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	2b0b      	cmp	r3, #11
 8006350:	d851      	bhi.n	80063f6 <USBD_CDC_Setup+0x18a>
 8006352:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <USBD_CDC_Setup+0xec>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	08006389 	.word	0x08006389
 800635c:	08006405 	.word	0x08006405
 8006360:	080063f7 	.word	0x080063f7
 8006364:	080063f7 	.word	0x080063f7
 8006368:	080063f7 	.word	0x080063f7
 800636c:	080063f7 	.word	0x080063f7
 8006370:	080063f7 	.word	0x080063f7
 8006374:	080063f7 	.word	0x080063f7
 8006378:	080063f7 	.word	0x080063f7
 800637c:	080063f7 	.word	0x080063f7
 8006380:	080063b3 	.word	0x080063b3
 8006384:	080063dd 	.word	0x080063dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b03      	cmp	r3, #3
 8006392:	d107      	bne.n	80063a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006394:	f107 030a 	add.w	r3, r7, #10
 8006398:	2202      	movs	r2, #2
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 fce0 	bl	8007d62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063a2:	e032      	b.n	800640a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 fc6b 	bl	8007c82 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ac:	2303      	movs	r3, #3
 80063ae:	75fb      	strb	r3, [r7, #23]
          break;
 80063b0:	e02b      	b.n	800640a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d107      	bne.n	80063ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063be:	f107 030d 	add.w	r3, r7, #13
 80063c2:	2201      	movs	r2, #1
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fccb 	bl	8007d62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063cc:	e01d      	b.n	800640a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 fc56 	bl	8007c82 <USBD_CtlError>
            ret = USBD_FAIL;
 80063d6:	2303      	movs	r3, #3
 80063d8:	75fb      	strb	r3, [r7, #23]
          break;
 80063da:	e016      	b.n	800640a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d00f      	beq.n	8006408 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 fc49 	bl	8007c82 <USBD_CtlError>
            ret = USBD_FAIL;
 80063f0:	2303      	movs	r3, #3
 80063f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063f4:	e008      	b.n	8006408 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 fc42 	bl	8007c82 <USBD_CtlError>
          ret = USBD_FAIL;
 80063fe:	2303      	movs	r3, #3
 8006400:	75fb      	strb	r3, [r7, #23]
          break;
 8006402:	e002      	b.n	800640a <USBD_CDC_Setup+0x19e>
          break;
 8006404:	bf00      	nop
 8006406:	e008      	b.n	800641a <USBD_CDC_Setup+0x1ae>
          break;
 8006408:	bf00      	nop
      }
      break;
 800640a:	e006      	b.n	800641a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 fc37 	bl	8007c82 <USBD_CtlError>
      ret = USBD_FAIL;
 8006414:	2303      	movs	r3, #3
 8006416:	75fb      	strb	r3, [r7, #23]
      break;
 8006418:	bf00      	nop
  }

  return (uint8_t)ret;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006436:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	32b0      	adds	r2, #176	; 0xb0
 8006442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800644a:	2303      	movs	r3, #3
 800644c:	e065      	b.n	800651a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	32b0      	adds	r2, #176	; 0xb0
 8006458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	3318      	adds	r3, #24
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d02f      	beq.n	80064d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	f003 020f 	and.w	r2, r3, #15
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	3318      	adds	r3, #24
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	f003 010f 	and.w	r1, r3, #15
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	460b      	mov	r3, r1
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	440b      	add	r3, r1
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4403      	add	r3, r0
 80064a0:	3348      	adds	r3, #72	; 0x48
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d112      	bne.n	80064d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	f003 020f 	and.w	r2, r3, #15
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	3318      	adds	r3, #24
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064ca:	78f9      	ldrb	r1, [r7, #3]
 80064cc:	2300      	movs	r3, #0
 80064ce:	2200      	movs	r2, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f012 f941 	bl	8018758 <USBD_LL_Transmit>
 80064d6:	e01f      	b.n	8006518 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	33b0      	adds	r3, #176	; 0xb0
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d010      	beq.n	8006518 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	33b0      	adds	r3, #176	; 0xb0
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	32b0      	adds	r2, #176	; 0xb0
 8006538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	32b0      	adds	r2, #176	; 0xb0
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	e01a      	b.n	800658a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f012 f93f 	bl	80187dc <USBD_LL_GetRxDataSize>
 800655e:	4602      	mov	r2, r0
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	33b0      	adds	r3, #176	; 0xb0
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006584:	4611      	mov	r1, r2
 8006586:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	32b0      	adds	r2, #176	; 0xb0
 80065a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e025      	b.n	8006600 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	33b0      	adds	r3, #176	; 0xb0
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01a      	beq.n	80065fe <USBD_CDC_EP0_RxReady+0x6c>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065ce:	2bff      	cmp	r3, #255	; 0xff
 80065d0:	d015      	beq.n	80065fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	33b0      	adds	r3, #176	; 0xb0
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80065ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065f2:	b292      	uxth	r2, r2
 80065f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	22ff      	movs	r2, #255	; 0xff
 80065fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006610:	2182      	movs	r1, #130	; 0x82
 8006612:	4818      	ldr	r0, [pc, #96]	; (8006674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006614:	f000 fcfe 	bl	8007014 <USBD_GetEpDesc>
 8006618:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800661a:	2101      	movs	r1, #1
 800661c:	4815      	ldr	r0, [pc, #84]	; (8006674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800661e:	f000 fcf9 	bl	8007014 <USBD_GetEpDesc>
 8006622:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006624:	2181      	movs	r1, #129	; 0x81
 8006626:	4813      	ldr	r0, [pc, #76]	; (8006674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006628:	f000 fcf4 	bl	8007014 <USBD_GetEpDesc>
 800662c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2210      	movs	r2, #16
 8006638:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2200      	movs	r2, #0
 8006644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006648:	711a      	strb	r2, [r3, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d006      	beq.n	8006662 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800665c:	711a      	strb	r2, [r3, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2243      	movs	r2, #67	; 0x43
 8006666:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000050 	.word	0x20000050

08006678 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006680:	2182      	movs	r1, #130	; 0x82
 8006682:	4818      	ldr	r0, [pc, #96]	; (80066e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006684:	f000 fcc6 	bl	8007014 <USBD_GetEpDesc>
 8006688:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800668a:	2101      	movs	r1, #1
 800668c:	4815      	ldr	r0, [pc, #84]	; (80066e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800668e:	f000 fcc1 	bl	8007014 <USBD_GetEpDesc>
 8006692:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006694:	2181      	movs	r1, #129	; 0x81
 8006696:	4813      	ldr	r0, [pc, #76]	; (80066e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006698:	f000 fcbc 	bl	8007014 <USBD_GetEpDesc>
 800669c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2210      	movs	r2, #16
 80066a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d006      	beq.n	80066be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2200      	movs	r2, #0
 80066b4:	711a      	strb	r2, [r3, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f042 0202 	orr.w	r2, r2, #2
 80066bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d006      	beq.n	80066d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	711a      	strb	r2, [r3, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f042 0202 	orr.w	r2, r2, #2
 80066d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2243      	movs	r2, #67	; 0x43
 80066d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066d8:	4b02      	ldr	r3, [pc, #8]	; (80066e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000050 	.word	0x20000050

080066e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066f0:	2182      	movs	r1, #130	; 0x82
 80066f2:	4818      	ldr	r0, [pc, #96]	; (8006754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066f4:	f000 fc8e 	bl	8007014 <USBD_GetEpDesc>
 80066f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066fa:	2101      	movs	r1, #1
 80066fc:	4815      	ldr	r0, [pc, #84]	; (8006754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066fe:	f000 fc89 	bl	8007014 <USBD_GetEpDesc>
 8006702:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006704:	2181      	movs	r1, #129	; 0x81
 8006706:	4813      	ldr	r0, [pc, #76]	; (8006754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006708:	f000 fc84 	bl	8007014 <USBD_GetEpDesc>
 800670c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2210      	movs	r2, #16
 8006718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d006      	beq.n	800672e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2200      	movs	r2, #0
 8006724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006728:	711a      	strb	r2, [r3, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800673c:	711a      	strb	r2, [r3, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2243      	movs	r2, #67	; 0x43
 8006746:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006748:	4b02      	ldr	r3, [pc, #8]	; (8006754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000050 	.word	0x20000050

08006758 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	220a      	movs	r2, #10
 8006764:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006766:	4b03      	ldr	r3, [pc, #12]	; (8006774 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2000000c 	.word	0x2000000c

08006778 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006788:	2303      	movs	r3, #3
 800678a:	e009      	b.n	80067a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	33b0      	adds	r3, #176	; 0xb0
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b087      	sub	sp, #28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	32b0      	adds	r2, #176	; 0xb0
 80067c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e008      	b.n	80067e2 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	32b0      	adds	r2, #176	; 0xb0
 8006800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006804:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800680c:	2303      	movs	r3, #3
 800680e:	e004      	b.n	800681a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	32b0      	adds	r2, #176	; 0xb0
 8006836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	32b0      	adds	r2, #176	; 0xb0
 8006846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800684e:	2303      	movs	r3, #3
 8006850:	e018      	b.n	8006884 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	7c1b      	ldrb	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <USBD_CDC_ReceivePacket+0x68>)
 800685c:	7819      	ldrb	r1, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f011 ff96 	bl	801879a <USBD_LL_PrepareReceive>
 800686e:	e008      	b.n	8006882 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006870:	4b06      	ldr	r3, [pc, #24]	; (800688c <USBD_CDC_ReceivePacket+0x68>)
 8006872:	7819      	ldrb	r1, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800687a:	2340      	movs	r3, #64	; 0x40
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f011 ff8c 	bl	801879a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000094 	.word	0x20000094

08006890 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e01f      	b.n	80068e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	79fa      	ldrb	r2, [r7, #7]
 80068da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f011 fe07 	bl	80184f0 <USBD_LL_Init>
 80068e2:	4603      	mov	r3, r0
 80068e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	e025      	b.n	8006954 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	32ae      	adds	r2, #174	; 0xae
 800691a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00f      	beq.n	8006944 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	32ae      	adds	r2, #174	; 0xae
 800692e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	f107 020e 	add.w	r2, r7, #14
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	4602      	mov	r2, r0
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f011 fe0f 	bl	8018588 <USBD_LL_Start>
 800696a:	4603      	mov	r3, r0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr

08006988 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	4611      	mov	r1, r2
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	4798      	blx	r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	4611      	mov	r1, r2
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069e6:	2303      	movs	r3, #3
 80069e8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 f901 	bl	8007c0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d01a      	beq.n	8006a66 <USBD_LL_SetupStage+0x72>
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d822      	bhi.n	8006a7a <USBD_LL_SetupStage+0x86>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <USBD_LL_SetupStage+0x4a>
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d00a      	beq.n	8006a52 <USBD_LL_SetupStage+0x5e>
 8006a3c:	e01d      	b.n	8006a7a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb58 	bl	80070fc <USBD_StdDevReq>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a50:	e020      	b.n	8006a94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fbc0 	bl	80071e0 <USBD_StdItfReq>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]
      break;
 8006a64:	e016      	b.n	8006a94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fc22 	bl	80072b8 <USBD_StdEPReq>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73fb      	strb	r3, [r7, #15]
      break;
 8006a78:	e00c      	b.n	8006a94 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f011 fddd 	bl	8018648 <USBD_LL_StallEP>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73fb      	strb	r3, [r7, #15]
      break;
 8006a92:	bf00      	nop
  }

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d16e      	bne.n	8006b94 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006abc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	f040 8098 	bne.w	8006bfa <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d913      	bls.n	8006afe <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	4293      	cmp	r3, r2
 8006aee:	bf28      	it	cs
 8006af0:	4613      	movcs	r3, r2
 8006af2:	461a      	mov	r2, r3
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f001 f97c 	bl	8007df4 <USBD_CtlContinueRx>
 8006afc:	e07d      	b.n	8006bfa <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d014      	beq.n	8006b36 <USBD_LL_DataOutStage+0x98>
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d81d      	bhi.n	8006b4c <USBD_LL_DataOutStage+0xae>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <USBD_LL_DataOutStage+0x7c>
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d003      	beq.n	8006b20 <USBD_LL_DataOutStage+0x82>
 8006b18:	e018      	b.n	8006b4c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75bb      	strb	r3, [r7, #22]
            break;
 8006b1e:	e018      	b.n	8006b52 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fa5a 	bl	8006fe4 <USBD_CoreFindIF>
 8006b30:	4603      	mov	r3, r0
 8006b32:	75bb      	strb	r3, [r7, #22]
            break;
 8006b34:	e00d      	b.n	8006b52 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	4619      	mov	r1, r3
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fa5b 	bl	8006ffc <USBD_CoreFindEP>
 8006b46:	4603      	mov	r3, r0
 8006b48:	75bb      	strb	r3, [r7, #22]
            break;
 8006b4a:	e002      	b.n	8006b52 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b50:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b52:	7dbb      	ldrb	r3, [r7, #22]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d119      	bne.n	8006b8c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d113      	bne.n	8006b8c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b64:	7dba      	ldrb	r2, [r7, #22]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	32ae      	adds	r2, #174	; 0xae
 8006b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b74:	7dba      	ldrb	r2, [r7, #22]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b7c:	7dba      	ldrb	r2, [r7, #22]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	32ae      	adds	r2, #174	; 0xae
 8006b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 f942 	bl	8007e16 <USBD_CtlSendStatus>
 8006b92:	e032      	b.n	8006bfa <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fa2c 	bl	8006ffc <USBD_CoreFindEP>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ba8:	7dbb      	ldrb	r3, [r7, #22]
 8006baa:	2bff      	cmp	r3, #255	; 0xff
 8006bac:	d025      	beq.n	8006bfa <USBD_LL_DataOutStage+0x15c>
 8006bae:	7dbb      	ldrb	r3, [r7, #22]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d122      	bne.n	8006bfa <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d117      	bne.n	8006bf0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bc0:	7dba      	ldrb	r2, [r7, #22]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	32ae      	adds	r2, #174	; 0xae
 8006bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00f      	beq.n	8006bf0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bd0:	7dba      	ldrb	r2, [r7, #22]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bd8:	7dba      	ldrb	r2, [r7, #22]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	32ae      	adds	r2, #174	; 0xae
 8006bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	7afa      	ldrb	r2, [r7, #11]
 8006be6:	4611      	mov	r1, r2
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	4798      	blx	r3
 8006bec:	4603      	mov	r3, r0
 8006bee:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	e000      	b.n	8006bfc <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c12:	7afb      	ldrb	r3, [r7, #11]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d16f      	bne.n	8006cf8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3314      	adds	r3, #20
 8006c1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d15a      	bne.n	8006cde <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d914      	bls.n	8006c5e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	1ad2      	subs	r2, r2, r3
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	461a      	mov	r2, r3
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f001 f8a4 	bl	8007d98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c50:	2300      	movs	r3, #0
 8006c52:	2200      	movs	r2, #0
 8006c54:	2100      	movs	r1, #0
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f011 fd9f 	bl	801879a <USBD_LL_PrepareReceive>
 8006c5c:	e03f      	b.n	8006cde <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d11c      	bne.n	8006ca4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d316      	bcc.n	8006ca4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d20f      	bcs.n	8006ca4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c84:	2200      	movs	r2, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f001 f885 	bl	8007d98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c96:	2300      	movs	r3, #0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f011 fd7c 	bl	801879a <USBD_LL_PrepareReceive>
 8006ca2:	e01c      	b.n	8006cde <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d10f      	bne.n	8006cd0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f011 fcb8 	bl	8018648 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f001 f8af 	bl	8007e3c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d03a      	beq.n	8006d5e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff fe43 	bl	8006974 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cf6:	e032      	b.n	8006d5e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cf8:	7afb      	ldrb	r3, [r7, #11]
 8006cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	4619      	mov	r1, r3
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f97a 	bl	8006ffc <USBD_CoreFindEP>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2bff      	cmp	r3, #255	; 0xff
 8006d10:	d025      	beq.n	8006d5e <USBD_LL_DataInStage+0x15a>
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d122      	bne.n	8006d5e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d11c      	bne.n	8006d5e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d24:	7dfa      	ldrb	r2, [r7, #23]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	32ae      	adds	r2, #174	; 0xae
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d014      	beq.n	8006d5e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d34:	7dfa      	ldrb	r2, [r7, #23]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d3c:	7dfa      	ldrb	r2, [r7, #23]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	32ae      	adds	r2, #174	; 0xae
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	7afa      	ldrb	r2, [r7, #11]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	4798      	blx	r3
 8006d50:	4603      	mov	r3, r0
 8006d52:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d54:	7dbb      	ldrb	r3, [r7, #22]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d5a:	7dbb      	ldrb	r3, [r7, #22]
 8006d5c:	e000      	b.n	8006d60 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d014      	beq.n	8006dce <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00e      	beq.n	8006dce <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6852      	ldr	r2, [r2, #4]
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f011 fbf2 	bl	80185be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2240      	movs	r2, #64	; 0x40
 8006de6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dea:	2340      	movs	r3, #64	; 0x40
 8006dec:	2200      	movs	r2, #0
 8006dee:	2180      	movs	r1, #128	; 0x80
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f011 fbe4 	bl	80185be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2240      	movs	r2, #64	; 0x40
 8006e00:	621a      	str	r2, [r3, #32]

  return ret;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	78fa      	ldrb	r2, [r7, #3]
 8006e1c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr

08006e2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2204      	movs	r2, #4
 8006e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d106      	bne.n	8006e76 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d110      	bne.n	8006eb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32ae      	adds	r2, #174	; 0xae
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e01c      	b.n	8006f1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d115      	bne.n	8006f1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	32ae      	adds	r2, #174	; 0xae
 8006efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	32ae      	adds	r2, #174	; 0xae
 8006f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	4611      	mov	r1, r2
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	32ae      	adds	r2, #174	; 0xae
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e01c      	b.n	8006f82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d115      	bne.n	8006f80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	32ae      	adds	r2, #174	; 0xae
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	32ae      	adds	r2, #174	; 0xae
 8006f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr

08006f9e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00e      	beq.n	8006fda <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6852      	ldr	r2, [r2, #4]
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	4611      	mov	r1, r2
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ff0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007008:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr

08007014 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	885b      	ldrh	r3, [r3, #2]
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	429a      	cmp	r2, r3
 800703a:	d920      	bls.n	800707e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007044:	e013      	b.n	800706e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007046:	f107 030a 	add.w	r3, r7, #10
 800704a:	4619      	mov	r1, r3
 800704c:	6978      	ldr	r0, [r7, #20]
 800704e:	f000 f81b 	bl	8007088 <USBD_GetNextDesc>
 8007052:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	2b05      	cmp	r3, #5
 800705a:	d108      	bne.n	800706e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	789b      	ldrb	r3, [r3, #2]
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	429a      	cmp	r2, r3
 8007068:	d008      	beq.n	800707c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	b29a      	uxth	r2, r3
 8007074:	897b      	ldrh	r3, [r7, #10]
 8007076:	429a      	cmp	r2, r3
 8007078:	d8e5      	bhi.n	8007046 <USBD_GetEpDesc+0x32>
 800707a:	e000      	b.n	800707e <USBD_GetEpDesc+0x6a>
          break;
 800707c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800707e:	693b      	ldr	r3, [r7, #16]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	881a      	ldrh	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4413      	add	r3, r2
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4413      	add	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070b4:	68fb      	ldr	r3, [r7, #12]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr

080070c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	3301      	adds	r3, #1
 80070d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070de:	8a3b      	ldrh	r3, [r7, #16]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	b21a      	sxth	r2, r3
 80070e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	b21b      	sxth	r3, r3
 80070ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070ee:	89fb      	ldrh	r3, [r7, #14]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr
	...

080070fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d005      	beq.n	8007122 <USBD_StdDevReq+0x26>
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	d857      	bhi.n	80071ca <USBD_StdDevReq+0xce>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00f      	beq.n	800713e <USBD_StdDevReq+0x42>
 800711e:	2b20      	cmp	r3, #32
 8007120:	d153      	bne.n	80071ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	32ae      	adds	r2, #174	; 0xae
 800712c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
      break;
 800713c:	e04a      	b.n	80071d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b09      	cmp	r3, #9
 8007144:	d83b      	bhi.n	80071be <USBD_StdDevReq+0xc2>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <USBD_StdDevReq+0x50>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	080071a1 	.word	0x080071a1
 8007150:	080071b5 	.word	0x080071b5
 8007154:	080071bf 	.word	0x080071bf
 8007158:	080071ab 	.word	0x080071ab
 800715c:	080071bf 	.word	0x080071bf
 8007160:	0800717f 	.word	0x0800717f
 8007164:	08007175 	.word	0x08007175
 8007168:	080071bf 	.word	0x080071bf
 800716c:	08007197 	.word	0x08007197
 8007170:	08007189 	.word	0x08007189
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa3c 	bl	80075f4 <USBD_GetDescriptor>
          break;
 800717c:	e024      	b.n	80071c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fba1 	bl	80078c8 <USBD_SetAddress>
          break;
 8007186:	e01f      	b.n	80071c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fbe0 	bl	8007950 <USBD_SetConfig>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
          break;
 8007194:	e018      	b.n	80071c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fc83 	bl	8007aa4 <USBD_GetConfig>
          break;
 800719e:	e013      	b.n	80071c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fcb4 	bl	8007b10 <USBD_GetStatus>
          break;
 80071a8:	e00e      	b.n	80071c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fce3 	bl	8007b78 <USBD_SetFeature>
          break;
 80071b2:	e009      	b.n	80071c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fd07 	bl	8007bca <USBD_ClrFeature>
          break;
 80071bc:	e004      	b.n	80071c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fd5e 	bl	8007c82 <USBD_CtlError>
          break;
 80071c6:	bf00      	nop
      }
      break;
 80071c8:	e004      	b.n	80071d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fd58 	bl	8007c82 <USBD_CtlError>
      break;
 80071d2:	bf00      	nop
  }

  return ret;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop

080071e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d005      	beq.n	8007206 <USBD_StdItfReq+0x26>
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d852      	bhi.n	80072a4 <USBD_StdItfReq+0xc4>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <USBD_StdItfReq+0x26>
 8007202:	2b20      	cmp	r3, #32
 8007204:	d14e      	bne.n	80072a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	3b01      	subs	r3, #1
 8007210:	2b02      	cmp	r3, #2
 8007212:	d840      	bhi.n	8007296 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	889b      	ldrh	r3, [r3, #4]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b01      	cmp	r3, #1
 800721c:	d836      	bhi.n	800728c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	889b      	ldrh	r3, [r3, #4]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff fedc 	bl	8006fe4 <USBD_CoreFindIF>
 800722c:	4603      	mov	r3, r0
 800722e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2bff      	cmp	r3, #255	; 0xff
 8007234:	d01d      	beq.n	8007272 <USBD_StdItfReq+0x92>
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d11a      	bne.n	8007272 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800723c:	7bba      	ldrb	r2, [r7, #14]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	32ae      	adds	r2, #174	; 0xae
 8007242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00f      	beq.n	800726c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800724c:	7bba      	ldrb	r2, [r7, #14]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007254:	7bba      	ldrb	r2, [r7, #14]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	32ae      	adds	r2, #174	; 0xae
 800725a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
 8007266:	4603      	mov	r3, r0
 8007268:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800726a:	e004      	b.n	8007276 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007270:	e001      	b.n	8007276 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007272:	2303      	movs	r3, #3
 8007274:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	88db      	ldrh	r3, [r3, #6]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d110      	bne.n	80072a0 <USBD_StdItfReq+0xc0>
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10d      	bne.n	80072a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fdc6 	bl	8007e16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800728a:	e009      	b.n	80072a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fcf7 	bl	8007c82 <USBD_CtlError>
          break;
 8007294:	e004      	b.n	80072a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fcf2 	bl	8007c82 <USBD_CtlError>
          break;
 800729e:	e000      	b.n	80072a2 <USBD_StdItfReq+0xc2>
          break;
 80072a0:	bf00      	nop
      }
      break;
 80072a2:	e004      	b.n	80072ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fceb 	bl	8007c82 <USBD_CtlError>
      break;
 80072ac:	bf00      	nop
  }

  return ret;
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	889b      	ldrh	r3, [r3, #4]
 80072ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d007      	beq.n	80072e8 <USBD_StdEPReq+0x30>
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	f200 817f 	bhi.w	80075dc <USBD_StdEPReq+0x324>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d02a      	beq.n	8007338 <USBD_StdEPReq+0x80>
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	f040 817a 	bne.w	80075dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff fe85 	bl	8006ffc <USBD_CoreFindEP>
 80072f2:	4603      	mov	r3, r0
 80072f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072f6:	7b7b      	ldrb	r3, [r7, #13]
 80072f8:	2bff      	cmp	r3, #255	; 0xff
 80072fa:	f000 8174 	beq.w	80075e6 <USBD_StdEPReq+0x32e>
 80072fe:	7b7b      	ldrb	r3, [r7, #13]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 8170 	bne.w	80075e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007306:	7b7a      	ldrb	r2, [r7, #13]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800730e:	7b7a      	ldrb	r2, [r7, #13]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	32ae      	adds	r2, #174	; 0xae
 8007314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8163 	beq.w	80075e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007320:	7b7a      	ldrb	r2, [r7, #13]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32ae      	adds	r2, #174	; 0xae
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007336:	e156      	b.n	80075e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d008      	beq.n	8007352 <USBD_StdEPReq+0x9a>
 8007340:	2b03      	cmp	r3, #3
 8007342:	f300 8145 	bgt.w	80075d0 <USBD_StdEPReq+0x318>
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 809b 	beq.w	8007482 <USBD_StdEPReq+0x1ca>
 800734c:	2b01      	cmp	r3, #1
 800734e:	d03c      	beq.n	80073ca <USBD_StdEPReq+0x112>
 8007350:	e13e      	b.n	80075d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d002      	beq.n	8007364 <USBD_StdEPReq+0xac>
 800735e:	2b03      	cmp	r3, #3
 8007360:	d016      	beq.n	8007390 <USBD_StdEPReq+0xd8>
 8007362:	e02c      	b.n	80073be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <USBD_StdEPReq+0xce>
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d00a      	beq.n	8007386 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f011 f967 	bl	8018648 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800737a:	2180      	movs	r1, #128	; 0x80
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f011 f963 	bl	8018648 <USBD_LL_StallEP>
 8007382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007384:	e020      	b.n	80073c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fc7a 	bl	8007c82 <USBD_CtlError>
              break;
 800738e:	e01b      	b.n	80073c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	885b      	ldrh	r3, [r3, #2]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10e      	bne.n	80073b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00b      	beq.n	80073b6 <USBD_StdEPReq+0xfe>
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b80      	cmp	r3, #128	; 0x80
 80073a2:	d008      	beq.n	80073b6 <USBD_StdEPReq+0xfe>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	88db      	ldrh	r3, [r3, #6]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f011 f949 	bl	8018648 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fd2d 	bl	8007e16 <USBD_CtlSendStatus>

              break;
 80073bc:	e004      	b.n	80073c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fc5e 	bl	8007c82 <USBD_CtlError>
              break;
 80073c6:	bf00      	nop
          }
          break;
 80073c8:	e107      	b.n	80075da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d002      	beq.n	80073dc <USBD_StdEPReq+0x124>
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d016      	beq.n	8007408 <USBD_StdEPReq+0x150>
 80073da:	e04b      	b.n	8007474 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00d      	beq.n	80073fe <USBD_StdEPReq+0x146>
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d00a      	beq.n	80073fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f011 f92b 	bl	8018648 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073f2:	2180      	movs	r1, #128	; 0x80
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f011 f927 	bl	8018648 <USBD_LL_StallEP>
 80073fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073fc:	e040      	b.n	8007480 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fc3e 	bl	8007c82 <USBD_CtlError>
              break;
 8007406:	e03b      	b.n	8007480 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	885b      	ldrh	r3, [r3, #2]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d136      	bne.n	800747e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007416:	2b00      	cmp	r3, #0
 8007418:	d004      	beq.n	8007424 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f011 f931 	bl	8018686 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fcf6 	bl	8007e16 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff fde4 	bl	8006ffc <USBD_CoreFindEP>
 8007434:	4603      	mov	r3, r0
 8007436:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007438:	7b7b      	ldrb	r3, [r7, #13]
 800743a:	2bff      	cmp	r3, #255	; 0xff
 800743c:	d01f      	beq.n	800747e <USBD_StdEPReq+0x1c6>
 800743e:	7b7b      	ldrb	r3, [r7, #13]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11c      	bne.n	800747e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007444:	7b7a      	ldrb	r2, [r7, #13]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800744c:	7b7a      	ldrb	r2, [r7, #13]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	32ae      	adds	r2, #174	; 0xae
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d010      	beq.n	800747e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800745c:	7b7a      	ldrb	r2, [r7, #13]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32ae      	adds	r2, #174	; 0xae
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007472:	e004      	b.n	800747e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fc03 	bl	8007c82 <USBD_CtlError>
              break;
 800747c:	e000      	b.n	8007480 <USBD_StdEPReq+0x1c8>
              break;
 800747e:	bf00      	nop
          }
          break;
 8007480:	e0ab      	b.n	80075da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d002      	beq.n	8007494 <USBD_StdEPReq+0x1dc>
 800748e:	2b03      	cmp	r3, #3
 8007490:	d032      	beq.n	80074f8 <USBD_StdEPReq+0x240>
 8007492:	e097      	b.n	80075c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d007      	beq.n	80074aa <USBD_StdEPReq+0x1f2>
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b80      	cmp	r3, #128	; 0x80
 800749e:	d004      	beq.n	80074aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fbed 	bl	8007c82 <USBD_CtlError>
                break;
 80074a8:	e091      	b.n	80075ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da0b      	bge.n	80074ca <USBD_StdEPReq+0x212>
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	3310      	adds	r3, #16
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	4413      	add	r3, r2
 80074c6:	3304      	adds	r3, #4
 80074c8:	e00b      	b.n	80074e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4413      	add	r3, r2
 80074e0:	3304      	adds	r3, #4
 80074e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2202      	movs	r2, #2
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fc36 	bl	8007d62 <USBD_CtlSendData>
              break;
 80074f6:	e06a      	b.n	80075ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da11      	bge.n	8007524 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	f003 020f 	and.w	r2, r3, #15
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	3324      	adds	r3, #36	; 0x24
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d117      	bne.n	800754a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fbb0 	bl	8007c82 <USBD_CtlError>
                  break;
 8007522:	e054      	b.n	80075ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	f003 020f 	and.w	r2, r3, #15
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d104      	bne.n	800754a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fb9d 	bl	8007c82 <USBD_CtlError>
                  break;
 8007548:	e041      	b.n	80075ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800754a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800754e:	2b00      	cmp	r3, #0
 8007550:	da0b      	bge.n	800756a <USBD_StdEPReq+0x2b2>
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	3310      	adds	r3, #16
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	4413      	add	r3, r2
 8007566:	3304      	adds	r3, #4
 8007568:	e00b      	b.n	8007582 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	4413      	add	r3, r2
 8007580:	3304      	adds	r3, #4
 8007582:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <USBD_StdEPReq+0x2d8>
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b80      	cmp	r3, #128	; 0x80
 800758e:	d103      	bne.n	8007598 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e00e      	b.n	80075b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f011 f891 	bl	80186c4 <USBD_LL_IsStallEP>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2201      	movs	r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2202      	movs	r2, #2
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fbd0 	bl	8007d62 <USBD_CtlSendData>
              break;
 80075c2:	e004      	b.n	80075ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fb5b 	bl	8007c82 <USBD_CtlError>
              break;
 80075cc:	bf00      	nop
          }
          break;
 80075ce:	e004      	b.n	80075da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fb55 	bl	8007c82 <USBD_CtlError>
          break;
 80075d8:	bf00      	nop
      }
      break;
 80075da:	e005      	b.n	80075e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fb4f 	bl	8007c82 <USBD_CtlError>
      break;
 80075e4:	e000      	b.n	80075e8 <USBD_StdEPReq+0x330>
      break;
 80075e6:	bf00      	nop
  }

  return ret;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	885b      	ldrh	r3, [r3, #2]
 800760e:	0a1b      	lsrs	r3, r3, #8
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	2b06      	cmp	r3, #6
 8007616:	f200 8128 	bhi.w	800786a <USBD_GetDescriptor+0x276>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <USBD_GetDescriptor+0x2c>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	0800763d 	.word	0x0800763d
 8007624:	08007655 	.word	0x08007655
 8007628:	08007695 	.word	0x08007695
 800762c:	0800786b 	.word	0x0800786b
 8007630:	0800786b 	.word	0x0800786b
 8007634:	0800780b 	.word	0x0800780b
 8007638:	08007837 	.word	0x08007837
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	7c12      	ldrb	r2, [r2, #16]
 8007648:	f107 0108 	add.w	r1, r7, #8
 800764c:	4610      	mov	r0, r2
 800764e:	4798      	blx	r3
 8007650:	60f8      	str	r0, [r7, #12]
      break;
 8007652:	e112      	b.n	800787a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	7c1b      	ldrb	r3, [r3, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10d      	bne.n	8007678 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	f107 0208 	add.w	r2, r7, #8
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
 800766c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	2202      	movs	r2, #2
 8007674:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007676:	e100      	b.n	800787a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	f107 0208 	add.w	r2, r7, #8
 8007684:	4610      	mov	r0, r2
 8007686:	4798      	blx	r3
 8007688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	2202      	movs	r2, #2
 8007690:	701a      	strb	r2, [r3, #0]
      break;
 8007692:	e0f2      	b.n	800787a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	885b      	ldrh	r3, [r3, #2]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b05      	cmp	r3, #5
 800769c:	f200 80ac 	bhi.w	80077f8 <USBD_GetDescriptor+0x204>
 80076a0:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <USBD_GetDescriptor+0xb4>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	080076c1 	.word	0x080076c1
 80076ac:	080076f5 	.word	0x080076f5
 80076b0:	08007729 	.word	0x08007729
 80076b4:	0800775d 	.word	0x0800775d
 80076b8:	08007791 	.word	0x08007791
 80076bc:	080077c5 	.word	0x080077c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	7c12      	ldrb	r2, [r2, #16]
 80076d8:	f107 0108 	add.w	r1, r7, #8
 80076dc:	4610      	mov	r0, r2
 80076de:	4798      	blx	r3
 80076e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e2:	e091      	b.n	8007808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 facb 	bl	8007c82 <USBD_CtlError>
            err++;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	3301      	adds	r3, #1
 80076f0:	72fb      	strb	r3, [r7, #11]
          break;
 80076f2:	e089      	b.n	8007808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	7c12      	ldrb	r2, [r2, #16]
 800770c:	f107 0108 	add.w	r1, r7, #8
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
 8007714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007716:	e077      	b.n	8007808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fab1 	bl	8007c82 <USBD_CtlError>
            err++;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3301      	adds	r3, #1
 8007724:	72fb      	strb	r3, [r7, #11]
          break;
 8007726:	e06f      	b.n	8007808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 0108 	add.w	r1, r7, #8
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774a:	e05d      	b.n	8007808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa97 	bl	8007c82 <USBD_CtlError>
            err++;
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	3301      	adds	r3, #1
 8007758:	72fb      	strb	r3, [r7, #11]
          break;
 800775a:	e055      	b.n	8007808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7c12      	ldrb	r2, [r2, #16]
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800777e:	e043      	b.n	8007808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa7d 	bl	8007c82 <USBD_CtlError>
            err++;
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	3301      	adds	r3, #1
 800778c:	72fb      	strb	r3, [r7, #11]
          break;
 800778e:	e03b      	b.n	8007808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	7c12      	ldrb	r2, [r2, #16]
 80077a8:	f107 0108 	add.w	r1, r7, #8
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b2:	e029      	b.n	8007808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa63 	bl	8007c82 <USBD_CtlError>
            err++;
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	3301      	adds	r3, #1
 80077c0:	72fb      	strb	r3, [r7, #11]
          break;
 80077c2:	e021      	b.n	8007808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 0108 	add.w	r1, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e6:	e00f      	b.n	8007808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa49 	bl	8007c82 <USBD_CtlError>
            err++;
 80077f0:	7afb      	ldrb	r3, [r7, #11]
 80077f2:	3301      	adds	r3, #1
 80077f4:	72fb      	strb	r3, [r7, #11]
          break;
 80077f6:	e007      	b.n	8007808 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa41 	bl	8007c82 <USBD_CtlError>
          err++;
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	3301      	adds	r3, #1
 8007804:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007806:	bf00      	nop
      }
      break;
 8007808:	e037      	b.n	800787a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7c1b      	ldrb	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d109      	bne.n	8007826 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	f107 0208 	add.w	r2, r7, #8
 800781e:	4610      	mov	r0, r2
 8007820:	4798      	blx	r3
 8007822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007824:	e029      	b.n	800787a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa2a 	bl	8007c82 <USBD_CtlError>
        err++;
 800782e:	7afb      	ldrb	r3, [r7, #11]
 8007830:	3301      	adds	r3, #1
 8007832:	72fb      	strb	r3, [r7, #11]
      break;
 8007834:	e021      	b.n	800787a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	7c1b      	ldrb	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10d      	bne.n	800785a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	f107 0208 	add.w	r2, r7, #8
 800784a:	4610      	mov	r0, r2
 800784c:	4798      	blx	r3
 800784e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3301      	adds	r3, #1
 8007854:	2207      	movs	r2, #7
 8007856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007858:	e00f      	b.n	800787a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa10 	bl	8007c82 <USBD_CtlError>
        err++;
 8007862:	7afb      	ldrb	r3, [r7, #11]
 8007864:	3301      	adds	r3, #1
 8007866:	72fb      	strb	r3, [r7, #11]
      break;
 8007868:	e007      	b.n	800787a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fa08 	bl	8007c82 <USBD_CtlError>
      err++;
 8007872:	7afb      	ldrb	r3, [r7, #11]
 8007874:	3301      	adds	r3, #1
 8007876:	72fb      	strb	r3, [r7, #11]
      break;
 8007878:	bf00      	nop
  }

  if (err != 0U)
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d11e      	bne.n	80078be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	88db      	ldrh	r3, [r3, #6]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d016      	beq.n	80078b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007888:	893b      	ldrh	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00e      	beq.n	80078ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88da      	ldrh	r2, [r3, #6]
 8007892:	893b      	ldrh	r3, [r7, #8]
 8007894:	4293      	cmp	r3, r2
 8007896:	bf28      	it	cs
 8007898:	4613      	movcs	r3, r2
 800789a:	b29b      	uxth	r3, r3
 800789c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800789e:	893b      	ldrh	r3, [r7, #8]
 80078a0:	461a      	mov	r2, r3
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa5c 	bl	8007d62 <USBD_CtlSendData>
 80078aa:	e009      	b.n	80078c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9e7 	bl	8007c82 <USBD_CtlError>
 80078b4:	e004      	b.n	80078c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 faad 	bl	8007e16 <USBD_CtlSendStatus>
 80078bc:	e000      	b.n	80078c0 <USBD_GetDescriptor+0x2cc>
    return;
 80078be:	bf00      	nop
  }
}
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop

080078c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	889b      	ldrh	r3, [r3, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d131      	bne.n	800793e <USBD_SetAddress+0x76>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88db      	ldrh	r3, [r3, #6]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d12d      	bne.n	800793e <USBD_SetAddress+0x76>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	2b7f      	cmp	r3, #127	; 0x7f
 80078e8:	d829      	bhi.n	800793e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d104      	bne.n	800790c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f9bc 	bl	8007c82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790a:	e01d      	b.n	8007948 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7bfa      	ldrb	r2, [r7, #15]
 8007910:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f010 fefe 	bl	801871a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa79 	bl	8007e16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d004      	beq.n	8007934 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2202      	movs	r2, #2
 800792e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007932:	e009      	b.n	8007948 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793c:	e004      	b.n	8007948 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f99e 	bl	8007c82 <USBD_CtlError>
  }
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	885b      	ldrh	r3, [r3, #2]
 8007962:	b2da      	uxtb	r2, r3
 8007964:	4b4e      	ldr	r3, [pc, #312]	; (8007aa0 <USBD_SetConfig+0x150>)
 8007966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007968:	4b4d      	ldr	r3, [pc, #308]	; (8007aa0 <USBD_SetConfig+0x150>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d905      	bls.n	800797c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f985 	bl	8007c82 <USBD_CtlError>
    return USBD_FAIL;
 8007978:	2303      	movs	r3, #3
 800797a:	e08c      	b.n	8007a96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d002      	beq.n	800798e <USBD_SetConfig+0x3e>
 8007988:	2b03      	cmp	r3, #3
 800798a:	d029      	beq.n	80079e0 <USBD_SetConfig+0x90>
 800798c:	e075      	b.n	8007a7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800798e:	4b44      	ldr	r3, [pc, #272]	; (8007aa0 <USBD_SetConfig+0x150>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d020      	beq.n	80079d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007996:	4b42      	ldr	r3, [pc, #264]	; (8007aa0 <USBD_SetConfig+0x150>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079a0:	4b3f      	ldr	r3, [pc, #252]	; (8007aa0 <USBD_SetConfig+0x150>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fe ffee 	bl	8006988 <USBD_SetClassConfig>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d008      	beq.n	80079c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f962 	bl	8007c82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079c6:	e065      	b.n	8007a94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa24 	bl	8007e16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2203      	movs	r2, #3
 80079d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079d6:	e05d      	b.n	8007a94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa1c 	bl	8007e16 <USBD_CtlSendStatus>
      break;
 80079de:	e059      	b.n	8007a94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079e0:	4b2f      	ldr	r3, [pc, #188]	; (8007aa0 <USBD_SetConfig+0x150>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d112      	bne.n	8007a0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80079f0:	4b2b      	ldr	r3, [pc, #172]	; (8007aa0 <USBD_SetConfig+0x150>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079fa:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <USBD_SetConfig+0x150>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fe ffdd 	bl	80069c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa05 	bl	8007e16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a0c:	e042      	b.n	8007a94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a0e:	4b24      	ldr	r3, [pc, #144]	; (8007aa0 <USBD_SetConfig+0x150>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d02a      	beq.n	8007a72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fe ffcb 	bl	80069c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a2a:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <USBD_SetConfig+0x150>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a34:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <USBD_SetConfig+0x150>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fe ffa4 	bl	8006988 <USBD_SetClassConfig>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00f      	beq.n	8007a6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f918 	bl	8007c82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fe ffb0 	bl	80069c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a68:	e014      	b.n	8007a94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f9d3 	bl	8007e16 <USBD_CtlSendStatus>
      break;
 8007a70:	e010      	b.n	8007a94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9cf 	bl	8007e16 <USBD_CtlSendStatus>
      break;
 8007a78:	e00c      	b.n	8007a94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f900 	bl	8007c82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a82:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <USBD_SetConfig+0x150>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7fe ff99 	bl	80069c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	73fb      	strb	r3, [r7, #15]
      break;
 8007a92:	bf00      	nop
  }

  return ret;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20004e08 	.word	0x20004e08

08007aa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	88db      	ldrh	r3, [r3, #6]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d004      	beq.n	8007ac0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f8e2 	bl	8007c82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007abe:	e023      	b.n	8007b08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	dc02      	bgt.n	8007ad2 <USBD_GetConfig+0x2e>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dc03      	bgt.n	8007ad8 <USBD_GetConfig+0x34>
 8007ad0:	e015      	b.n	8007afe <USBD_GetConfig+0x5a>
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d00b      	beq.n	8007aee <USBD_GetConfig+0x4a>
 8007ad6:	e012      	b.n	8007afe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f93b 	bl	8007d62 <USBD_CtlSendData>
        break;
 8007aec:	e00c      	b.n	8007b08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3304      	adds	r3, #4
 8007af2:	2201      	movs	r2, #1
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f933 	bl	8007d62 <USBD_CtlSendData>
        break;
 8007afc:	e004      	b.n	8007b08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8be 	bl	8007c82 <USBD_CtlError>
        break;
 8007b06:	bf00      	nop
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d81e      	bhi.n	8007b66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	88db      	ldrh	r3, [r3, #6]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d004      	beq.n	8007b3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f8a5 	bl	8007c82 <USBD_CtlError>
        break;
 8007b38:	e01a      	b.n	8007b70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f043 0202 	orr.w	r2, r3, #2
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8ff 	bl	8007d62 <USBD_CtlSendData>
      break;
 8007b64:	e004      	b.n	8007b70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f88a 	bl	8007c82 <USBD_CtlError>
      break;
 8007b6e:	bf00      	nop
  }
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	885b      	ldrh	r3, [r3, #2]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d107      	bne.n	8007b9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f93f 	bl	8007e16 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b98:	e013      	b.n	8007bc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	885b      	ldrh	r3, [r3, #2]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d10b      	bne.n	8007bba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	889b      	ldrh	r3, [r3, #4]
 8007ba6:	0a1b      	lsrs	r3, r3, #8
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f92f 	bl	8007e16 <USBD_CtlSendStatus>
}
 8007bb8:	e003      	b.n	8007bc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f860 	bl	8007c82 <USBD_CtlError>
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d80b      	bhi.n	8007bfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	885b      	ldrh	r3, [r3, #2]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d10c      	bne.n	8007c04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f90f 	bl	8007e16 <USBD_CtlSendStatus>
      }
      break;
 8007bf8:	e004      	b.n	8007c04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f840 	bl	8007c82 <USBD_CtlError>
      break;
 8007c02:	e000      	b.n	8007c06 <USBD_ClrFeature+0x3c>
      break;
 8007c04:	bf00      	nop
  }
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	781a      	ldrb	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff fa41 	bl	80070c0 <SWAPBYTE>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	461a      	mov	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff fa34 	bl	80070c0 <SWAPBYTE>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff fa27 	bl	80070c0 <SWAPBYTE>
 8007c72:	4603      	mov	r3, r0
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	80da      	strh	r2, [r3, #6]
}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c8c:	2180      	movs	r1, #128	; 0x80
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f010 fcda 	bl	8018648 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c94:	2100      	movs	r1, #0
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f010 fcd6 	bl	8018648 <USBD_LL_StallEP>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d036      	beq.n	8007d28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cbe:	6938      	ldr	r0, [r7, #16]
 8007cc0:	f000 f836 	bl	8007d30 <USBD_GetLen>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	7812      	ldrb	r2, [r2, #0]
 8007cdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	4413      	add	r3, r2
 8007cea:	2203      	movs	r2, #3
 8007cec:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cf4:	e013      	b.n	8007d1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	7812      	ldrb	r2, [r2, #0]
 8007d00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3301      	adds	r3, #1
 8007d06:	613b      	str	r3, [r7, #16]
    idx++;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	4413      	add	r3, r2
 8007d14:	2200      	movs	r2, #0
 8007d16:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e7      	bne.n	8007cf6 <USBD_GetString+0x52>
 8007d26:	e000      	b.n	8007d2a <USBD_GetString+0x86>
    return;
 8007d28:	bf00      	nop
  }
}
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d40:	e005      	b.n	8007d4e <USBD_GetLen+0x1e>
  {
    len++;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	3301      	adds	r3, #1
 8007d46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f5      	bne.n	8007d42 <USBD_GetLen+0x12>
  }

  return len;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr

08007d62 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2202      	movs	r2, #2
 8007d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	2100      	movs	r1, #0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f010 fce5 	bl	8018758 <USBD_LL_Transmit>

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	2100      	movs	r1, #0
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f010 fcd4 	bl	8018758 <USBD_LL_Transmit>

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2203      	movs	r2, #3
 8007dca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	2100      	movs	r1, #0
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f010 fcd8 	bl	801879a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	2100      	movs	r1, #0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f010 fcc7 	bl	801879a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2204      	movs	r2, #4
 8007e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e26:	2300      	movs	r3, #0
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f010 fc93 	bl	8018758 <USBD_LL_Transmit>

  return USBD_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2205      	movs	r2, #5
 8007e48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2100      	movs	r1, #0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f010 fca1 	bl	801879a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <__NVIC_SetPriority>:
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	db0a      	blt.n	8007e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	490c      	ldr	r1, [pc, #48]	; (8007eb0 <__NVIC_SetPriority+0x4c>)
 8007e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e82:	0112      	lsls	r2, r2, #4
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	440b      	add	r3, r1
 8007e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e8c:	e00a      	b.n	8007ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	4908      	ldr	r1, [pc, #32]	; (8007eb4 <__NVIC_SetPriority+0x50>)
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	3b04      	subs	r3, #4
 8007e9c:	0112      	lsls	r2, r2, #4
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	440b      	add	r3, r1
 8007ea2:	761a      	strb	r2, [r3, #24]
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	e000e100 	.word	0xe000e100
 8007eb4:	e000ed00 	.word	0xe000ed00

08007eb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <SysTick_Handler+0x1c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ec0:	f002 fc86 	bl	800a7d0 <xTaskGetSchedulerState>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d001      	beq.n	8007ece <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007eca:	f003 fb1d 	bl	800b508 <xPortSysTickHandler>
  }
}
 8007ece:	bf00      	nop
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	e000e010 	.word	0xe000e010

08007ed8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007edc:	2100      	movs	r1, #0
 8007ede:	f06f 0004 	mvn.w	r0, #4
 8007ee2:	f7ff ffbf 	bl	8007e64 <__NVIC_SetPriority>
#endif
}
 8007ee6:	bf00      	nop
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef2:	f3ef 8305 	mrs	r3, IPSR
 8007ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007efe:	f06f 0305 	mvn.w	r3, #5
 8007f02:	607b      	str	r3, [r7, #4]
 8007f04:	e00c      	b.n	8007f20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f06:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <osKernelInitialize+0x40>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d105      	bne.n	8007f1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <osKernelInitialize+0x40>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	607b      	str	r3, [r7, #4]
 8007f18:	e002      	b.n	8007f20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f20:	687b      	ldr	r3, [r7, #4]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr
 8007f2c:	20004e0c 	.word	0x20004e0c

08007f30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f36:	f3ef 8305 	mrs	r3, IPSR
 8007f3a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f42:	f06f 0305 	mvn.w	r3, #5
 8007f46:	607b      	str	r3, [r7, #4]
 8007f48:	e010      	b.n	8007f6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f4a:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <osKernelStart+0x48>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d109      	bne.n	8007f66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f52:	f7ff ffc1 	bl	8007ed8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f56:	4b08      	ldr	r3, [pc, #32]	; (8007f78 <osKernelStart+0x48>)
 8007f58:	2202      	movs	r2, #2
 8007f5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f5c:	f001 ffbe 	bl	8009edc <vTaskStartScheduler>
      stat = osOK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	607b      	str	r3, [r7, #4]
 8007f64:	e002      	b.n	8007f6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f6c:	687b      	ldr	r3, [r7, #4]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20004e0c 	.word	0x20004e0c

08007f7c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f82:	f3ef 8305 	mrs	r3, IPSR
 8007f86:	603b      	str	r3, [r7, #0]
  return(result);
 8007f88:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007f8e:	f002 f8cf 	bl	800a130 <xTaskGetTickCountFromISR>
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	e002      	b.n	8007f9c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007f96:	f002 f8bd 	bl	800a114 <xTaskGetTickCount>
 8007f9a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007f9c:	687b      	ldr	r3, [r7, #4]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b08e      	sub	sp, #56	; 0x38
 8007faa:	af04      	add	r7, sp, #16
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fb6:	f3ef 8305 	mrs	r3, IPSR
 8007fba:	617b      	str	r3, [r7, #20]
  return(result);
 8007fbc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d17e      	bne.n	80080c0 <osThreadNew+0x11a>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d07b      	beq.n	80080c0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fc8:	2380      	movs	r3, #128	; 0x80
 8007fca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fcc:	2318      	movs	r3, #24
 8007fce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d045      	beq.n	800806c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <osThreadNew+0x48>
        name = attr->name;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d008      	beq.n	8008014 <osThreadNew+0x6e>
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	2b38      	cmp	r3, #56	; 0x38
 8008006:	d805      	bhi.n	8008014 <osThreadNew+0x6e>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <osThreadNew+0x72>
        return (NULL);
 8008014:	2300      	movs	r3, #0
 8008016:	e054      	b.n	80080c2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	089b      	lsrs	r3, r3, #2
 8008026:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00e      	beq.n	800804e <osThreadNew+0xa8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	2bbb      	cmp	r3, #187	; 0xbb
 8008036:	d90a      	bls.n	800804e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800803c:	2b00      	cmp	r3, #0
 800803e:	d006      	beq.n	800804e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <osThreadNew+0xa8>
        mem = 1;
 8008048:	2301      	movs	r3, #1
 800804a:	61bb      	str	r3, [r7, #24]
 800804c:	e010      	b.n	8008070 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10c      	bne.n	8008070 <osThreadNew+0xca>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d108      	bne.n	8008070 <osThreadNew+0xca>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <osThreadNew+0xca>
          mem = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	e001      	b.n	8008070 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d110      	bne.n	8008098 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800807e:	9202      	str	r2, [sp, #8]
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6a3a      	ldr	r2, [r7, #32]
 800808a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f001 fd39 	bl	8009b04 <xTaskCreateStatic>
 8008092:	4603      	mov	r3, r0
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	e013      	b.n	80080c0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d110      	bne.n	80080c0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	f107 0310 	add.w	r3, r7, #16
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f001 fd84 	bl	8009bbe <xTaskCreate>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d001      	beq.n	80080c0 <osThreadNew+0x11a>
            hTask = NULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080c0:	693b      	ldr	r3, [r7, #16]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3728      	adds	r7, #40	; 0x28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080d2:	f3ef 8305 	mrs	r3, IPSR
 80080d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80080d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <osDelay+0x1c>
    stat = osErrorISR;
 80080de:	f06f 0305 	mvn.w	r3, #5
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e007      	b.n	80080f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 febf 	bl	8009e74 <vTaskDelay>
    }
  }

  return (stat);
 80080f6:	68fb      	ldr	r3, [r7, #12]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008108:	2300      	movs	r3, #0
 800810a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800810c:	f3ef 8305 	mrs	r3, IPSR
 8008110:	60bb      	str	r3, [r7, #8]
  return(result);
 8008112:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008114:	2b00      	cmp	r3, #0
 8008116:	d174      	bne.n	8008202 <osMutexNew+0x102>
    if (attr != NULL) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <osMutexNew+0x26>
      type = attr->attr_bits;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	61bb      	str	r3, [r7, #24]
 8008124:	e001      	b.n	800812a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <osMutexNew+0x3a>
      rmtx = 1U;
 8008134:	2301      	movs	r3, #1
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e001      	b.n	800813e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b00      	cmp	r3, #0
 8008146:	d15c      	bne.n	8008202 <osMutexNew+0x102>
      mem = -1;
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d015      	beq.n	8008180 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d006      	beq.n	800816a <osMutexNew+0x6a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	2b4f      	cmp	r3, #79	; 0x4f
 8008162:	d902      	bls.n	800816a <osMutexNew+0x6a>
          mem = 1;
 8008164:	2301      	movs	r3, #1
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	e00c      	b.n	8008184 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d108      	bne.n	8008184 <osMutexNew+0x84>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <osMutexNew+0x84>
            mem = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	e001      	b.n	8008184 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d112      	bne.n	80081b0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	4619      	mov	r1, r3
 8008196:	2004      	movs	r0, #4
 8008198:	f000 fd63 	bl	8008c62 <xQueueCreateMutexStatic>
 800819c:	61f8      	str	r0, [r7, #28]
 800819e:	e016      	b.n	80081ce <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	4619      	mov	r1, r3
 80081a6:	2001      	movs	r0, #1
 80081a8:	f000 fd5b 	bl	8008c62 <xQueueCreateMutexStatic>
 80081ac:	61f8      	str	r0, [r7, #28]
 80081ae:	e00e      	b.n	80081ce <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10b      	bne.n	80081ce <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80081bc:	2004      	movs	r0, #4
 80081be:	f000 fd38 	bl	8008c32 <xQueueCreateMutex>
 80081c2:	61f8      	str	r0, [r7, #28]
 80081c4:	e003      	b.n	80081ce <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80081c6:	2001      	movs	r0, #1
 80081c8:	f000 fd33 	bl	8008c32 <xQueueCreateMutex>
 80081cc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00c      	beq.n	80081ee <osMutexNew+0xee>
        if (attr != NULL) {
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <osMutexNew+0xe2>
          name = attr->name;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	e001      	b.n	80081e6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	69f8      	ldr	r0, [r7, #28]
 80081ea:	f001 fc05 	bl	80099f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d006      	beq.n	8008202 <osMutexNew+0x102>
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	f043 0301 	orr.w	r3, r3, #1
 8008200:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008202:	69fb      	ldr	r3, [r7, #28]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3720      	adds	r7, #32
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800822a:	f3ef 8305 	mrs	r3, IPSR
 800822e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008230:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008236:	f06f 0305 	mvn.w	r3, #5
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e02c      	b.n	8008298 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d103      	bne.n	800824c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008244:	f06f 0303 	mvn.w	r3, #3
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	e025      	b.n	8008298 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d011      	beq.n	8008276 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6938      	ldr	r0, [r7, #16]
 8008256:	f000 fd53 	bl	8008d00 <xQueueTakeMutexRecursive>
 800825a:	4603      	mov	r3, r0
 800825c:	2b01      	cmp	r3, #1
 800825e:	d01b      	beq.n	8008298 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008266:	f06f 0301 	mvn.w	r3, #1
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	e014      	b.n	8008298 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800826e:	f06f 0302 	mvn.w	r3, #2
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e010      	b.n	8008298 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6938      	ldr	r0, [r7, #16]
 800827a:	f001 f8e7 	bl	800944c <xQueueSemaphoreTake>
 800827e:	4603      	mov	r3, r0
 8008280:	2b01      	cmp	r3, #1
 8008282:	d009      	beq.n	8008298 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800828a:	f06f 0301 	mvn.w	r3, #1
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	e002      	b.n	8008298 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008292:	f06f 0302 	mvn.w	r3, #2
 8008296:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008298:	697b      	ldr	r3, [r7, #20]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f023 0301 	bic.w	r3, r3, #1
 80082b0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082be:	f3ef 8305 	mrs	r3, IPSR
 80082c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80082c4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <osMutexRelease+0x30>
    stat = osErrorISR;
 80082ca:	f06f 0305 	mvn.w	r3, #5
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e01f      	b.n	8008312 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80082d8:	f06f 0303 	mvn.w	r3, #3
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e018      	b.n	8008312 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80082e6:	6938      	ldr	r0, [r7, #16]
 80082e8:	f000 fcd6 	bl	8008c98 <xQueueGiveMutexRecursive>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d00f      	beq.n	8008312 <osMutexRelease+0x70>
        stat = osErrorResource;
 80082f2:	f06f 0302 	mvn.w	r3, #2
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e00b      	b.n	8008312 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80082fa:	2300      	movs	r3, #0
 80082fc:	2200      	movs	r2, #0
 80082fe:	2100      	movs	r1, #0
 8008300:	6938      	ldr	r0, [r7, #16]
 8008302:	f000 fd9d 	bl	8008e40 <xQueueGenericSend>
 8008306:	4603      	mov	r3, r0
 8008308:	2b01      	cmp	r3, #1
 800830a:	d002      	beq.n	8008312 <osMutexRelease+0x70>
        stat = osErrorResource;
 800830c:	f06f 0302 	mvn.w	r3, #2
 8008310:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008312:	697b      	ldr	r3, [r7, #20]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800831c:	b580      	push	{r7, lr}
 800831e:	b08a      	sub	sp, #40	; 0x28
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800832c:	f3ef 8305 	mrs	r3, IPSR
 8008330:	613b      	str	r3, [r7, #16]
  return(result);
 8008332:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008334:	2b00      	cmp	r3, #0
 8008336:	d175      	bne.n	8008424 <osSemaphoreNew+0x108>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d072      	beq.n	8008424 <osSemaphoreNew+0x108>
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	429a      	cmp	r2, r3
 8008344:	d86e      	bhi.n	8008424 <osSemaphoreNew+0x108>
    mem = -1;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295
 800834a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d015      	beq.n	800837e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d006      	beq.n	8008368 <osSemaphoreNew+0x4c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	2b4f      	cmp	r3, #79	; 0x4f
 8008360:	d902      	bls.n	8008368 <osSemaphoreNew+0x4c>
        mem = 1;
 8008362:	2301      	movs	r3, #1
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	e00c      	b.n	8008382 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d108      	bne.n	8008382 <osSemaphoreNew+0x66>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <osSemaphoreNew+0x66>
          mem = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	e001      	b.n	8008382 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d04c      	beq.n	8008424 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d128      	bne.n	80083e2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d10a      	bne.n	80083ac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2203      	movs	r2, #3
 800839c:	9200      	str	r2, [sp, #0]
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	2001      	movs	r0, #1
 80083a4:	f000 fb56 	bl	8008a54 <xQueueGenericCreateStatic>
 80083a8:	61f8      	str	r0, [r7, #28]
 80083aa:	e005      	b.n	80083b8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80083ac:	2203      	movs	r2, #3
 80083ae:	2100      	movs	r1, #0
 80083b0:	2001      	movs	r0, #1
 80083b2:	f000 fbc7 	bl	8008b44 <xQueueGenericCreate>
 80083b6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d022      	beq.n	8008404 <osSemaphoreNew+0xe8>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01f      	beq.n	8008404 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80083c4:	2300      	movs	r3, #0
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	69f8      	ldr	r0, [r7, #28]
 80083cc:	f000 fd38 	bl	8008e40 <xQueueGenericSend>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d016      	beq.n	8008404 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80083d6:	69f8      	ldr	r0, [r7, #28]
 80083d8:	f001 f9c4 	bl	8009764 <vQueueDelete>
            hSemaphore = NULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	e010      	b.n	8008404 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d108      	bne.n	80083fa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	461a      	mov	r2, r3
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fcbb 	bl	8008d6c <xQueueCreateCountingSemaphoreStatic>
 80083f6:	61f8      	str	r0, [r7, #28]
 80083f8:	e004      	b.n	8008404 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fcec 	bl	8008dda <xQueueCreateCountingSemaphore>
 8008402:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00c      	beq.n	8008424 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e001      	b.n	800841c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800841c:	6979      	ldr	r1, [r7, #20]
 800841e:	69f8      	ldr	r0, [r7, #28]
 8008420:	f001 faea 	bl	80099f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008424:	69fb      	ldr	r3, [r7, #28]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3720      	adds	r7, #32
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d103      	bne.n	8008450 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008448:	f06f 0303 	mvn.w	r3, #3
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e039      	b.n	80084c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008450:	f3ef 8305 	mrs	r3, IPSR
 8008454:	60fb      	str	r3, [r7, #12]
  return(result);
 8008456:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008458:	2b00      	cmp	r3, #0
 800845a:	d022      	beq.n	80084a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008462:	f06f 0303 	mvn.w	r3, #3
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	e02c      	b.n	80084c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800846a:	2300      	movs	r3, #0
 800846c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800846e:	f107 0308 	add.w	r3, r7, #8
 8008472:	461a      	mov	r2, r3
 8008474:	2100      	movs	r1, #0
 8008476:	6938      	ldr	r0, [r7, #16]
 8008478:	f001 f8f4 	bl	8009664 <xQueueReceiveFromISR>
 800847c:	4603      	mov	r3, r0
 800847e:	2b01      	cmp	r3, #1
 8008480:	d003      	beq.n	800848a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008482:	f06f 0302 	mvn.w	r3, #2
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	e01c      	b.n	80084c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d019      	beq.n	80084c4 <osSemaphoreAcquire+0x94>
 8008490:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <osSemaphoreAcquire+0xa0>)
 8008492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	e010      	b.n	80084c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6938      	ldr	r0, [r7, #16]
 80084a6:	f000 ffd1 	bl	800944c <xQueueSemaphoreTake>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d009      	beq.n	80084c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80084b6:	f06f 0301 	mvn.w	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e002      	b.n	80084c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80084be:	f06f 0302 	mvn.w	r3, #2
 80084c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80084c4:	697b      	ldr	r3, [r7, #20]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	e000ed04 	.word	0xe000ed04

080084d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80084ea:	f06f 0303 	mvn.w	r3, #3
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e02c      	b.n	800854c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084f2:	f3ef 8305 	mrs	r3, IPSR
 80084f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80084f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d01a      	beq.n	8008534 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008502:	f107 0308 	add.w	r3, r7, #8
 8008506:	4619      	mov	r1, r3
 8008508:	6938      	ldr	r0, [r7, #16]
 800850a:	f000 fe32 	bl	8009172 <xQueueGiveFromISR>
 800850e:	4603      	mov	r3, r0
 8008510:	2b01      	cmp	r3, #1
 8008512:	d003      	beq.n	800851c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008514:	f06f 0302 	mvn.w	r3, #2
 8008518:	617b      	str	r3, [r7, #20]
 800851a:	e017      	b.n	800854c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d014      	beq.n	800854c <osSemaphoreRelease+0x78>
 8008522:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <osSemaphoreRelease+0x84>)
 8008524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	e00b      	b.n	800854c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008534:	2300      	movs	r3, #0
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f000 fc80 	bl	8008e40 <xQueueGenericSend>
 8008540:	4603      	mov	r3, r0
 8008542:	2b01      	cmp	r3, #1
 8008544:	d002      	beq.n	800854c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008546:	f06f 0302 	mvn.w	r3, #2
 800854a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800854c:	697b      	ldr	r3, [r7, #20]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	; 0x28
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008568:	2300      	movs	r3, #0
 800856a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800856c:	f3ef 8305 	mrs	r3, IPSR
 8008570:	613b      	str	r3, [r7, #16]
  return(result);
 8008572:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008574:	2b00      	cmp	r3, #0
 8008576:	d15f      	bne.n	8008638 <osMessageQueueNew+0xdc>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d05c      	beq.n	8008638 <osMessageQueueNew+0xdc>
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d059      	beq.n	8008638 <osMessageQueueNew+0xdc>
    mem = -1;
 8008584:	f04f 33ff 	mov.w	r3, #4294967295
 8008588:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d029      	beq.n	80085e4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d012      	beq.n	80085be <osMessageQueueNew+0x62>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2b4f      	cmp	r3, #79	; 0x4f
 800859e:	d90e      	bls.n	80085be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	695a      	ldr	r2, [r3, #20]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d302      	bcc.n	80085be <osMessageQueueNew+0x62>
        mem = 1;
 80085b8:	2301      	movs	r3, #1
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	e014      	b.n	80085e8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d110      	bne.n	80085e8 <osMessageQueueNew+0x8c>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10c      	bne.n	80085e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d108      	bne.n	80085e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d104      	bne.n	80085e8 <osMessageQueueNew+0x8c>
          mem = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	e001      	b.n	80085e8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d10b      	bne.n	8008606 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2100      	movs	r1, #0
 80085f8:	9100      	str	r1, [sp, #0]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 fa29 	bl	8008a54 <xQueueGenericCreateStatic>
 8008602:	61f8      	str	r0, [r7, #28]
 8008604:	e008      	b.n	8008618 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d105      	bne.n	8008618 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800860c:	2200      	movs	r2, #0
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 fa97 	bl	8008b44 <xQueueGenericCreate>
 8008616:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00c      	beq.n	8008638 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	e001      	b.n	8008630 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008630:	6979      	ldr	r1, [r7, #20]
 8008632:	69f8      	ldr	r0, [r7, #28]
 8008634:	f001 f9e0 	bl	80099f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008638:	69fb      	ldr	r3, [r7, #28]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	4613      	mov	r3, r2
 8008652:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008658:	2300      	movs	r3, #0
 800865a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800865c:	f3ef 8305 	mrs	r3, IPSR
 8008660:	617b      	str	r3, [r7, #20]
  return(result);
 8008662:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008664:	2b00      	cmp	r3, #0
 8008666:	d028      	beq.n	80086ba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <osMessageQueuePut+0x36>
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <osMessageQueuePut+0x36>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800867a:	f06f 0303 	mvn.w	r3, #3
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	e038      	b.n	80086f4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008682:	2300      	movs	r3, #0
 8008684:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008686:	f107 0210 	add.w	r2, r7, #16
 800868a:	2300      	movs	r3, #0
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	69b8      	ldr	r0, [r7, #24]
 8008690:	f000 fcd4 	bl	800903c <xQueueGenericSendFromISR>
 8008694:	4603      	mov	r3, r0
 8008696:	2b01      	cmp	r3, #1
 8008698:	d003      	beq.n	80086a2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800869a:	f06f 0302 	mvn.w	r3, #2
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	e028      	b.n	80086f4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d025      	beq.n	80086f4 <osMessageQueuePut+0xb0>
 80086a8:	4b15      	ldr	r3, [pc, #84]	; (8008700 <osMessageQueuePut+0xbc>)
 80086aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	e01c      	b.n	80086f4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <osMessageQueuePut+0x82>
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80086c6:	f06f 0303 	mvn.w	r3, #3
 80086ca:	61fb      	str	r3, [r7, #28]
 80086cc:	e012      	b.n	80086f4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80086ce:	2300      	movs	r3, #0
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	69b8      	ldr	r0, [r7, #24]
 80086d6:	f000 fbb3 	bl	8008e40 <xQueueGenericSend>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d009      	beq.n	80086f4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80086e6:	f06f 0301 	mvn.w	r3, #1
 80086ea:	61fb      	str	r3, [r7, #28]
 80086ec:	e002      	b.n	80086f4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80086ee:	f06f 0302 	mvn.w	r3, #2
 80086f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80086f4:	69fb      	ldr	r3, [r7, #28]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3720      	adds	r7, #32
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800871a:	f3ef 8305 	mrs	r3, IPSR
 800871e:	617b      	str	r3, [r7, #20]
  return(result);
 8008720:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008722:	2b00      	cmp	r3, #0
 8008724:	d028      	beq.n	8008778 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <osMessageQueueGet+0x34>
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <osMessageQueueGet+0x34>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008738:	f06f 0303 	mvn.w	r3, #3
 800873c:	61fb      	str	r3, [r7, #28]
 800873e:	e037      	b.n	80087b0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008740:	2300      	movs	r3, #0
 8008742:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008744:	f107 0310 	add.w	r3, r7, #16
 8008748:	461a      	mov	r2, r3
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	69b8      	ldr	r0, [r7, #24]
 800874e:	f000 ff89 	bl	8009664 <xQueueReceiveFromISR>
 8008752:	4603      	mov	r3, r0
 8008754:	2b01      	cmp	r3, #1
 8008756:	d003      	beq.n	8008760 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008758:	f06f 0302 	mvn.w	r3, #2
 800875c:	61fb      	str	r3, [r7, #28]
 800875e:	e027      	b.n	80087b0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d024      	beq.n	80087b0 <osMessageQueueGet+0xac>
 8008766:	4b15      	ldr	r3, [pc, #84]	; (80087bc <osMessageQueueGet+0xb8>)
 8008768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	e01b      	b.n	80087b0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <osMessageQueueGet+0x80>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008784:	f06f 0303 	mvn.w	r3, #3
 8008788:	61fb      	str	r3, [r7, #28]
 800878a:	e011      	b.n	80087b0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	69b8      	ldr	r0, [r7, #24]
 8008792:	f000 fd7b 	bl	800928c <xQueueReceive>
 8008796:	4603      	mov	r3, r0
 8008798:	2b01      	cmp	r3, #1
 800879a:	d009      	beq.n	80087b0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80087a2:	f06f 0301 	mvn.w	r3, #1
 80087a6:	61fb      	str	r3, [r7, #28]
 80087a8:	e002      	b.n	80087b0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80087aa:	f06f 0302 	mvn.w	r3, #2
 80087ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087b0:	69fb      	ldr	r3, [r7, #28]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	e000ed04 	.word	0xe000ed04

080087c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4a06      	ldr	r2, [pc, #24]	; (80087e8 <vApplicationGetIdleTaskMemory+0x28>)
 80087d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4a05      	ldr	r2, [pc, #20]	; (80087ec <vApplicationGetIdleTaskMemory+0x2c>)
 80087d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2280      	movs	r2, #128	; 0x80
 80087dc:	601a      	str	r2, [r3, #0]
}
 80087de:	bf00      	nop
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc80      	pop	{r7}
 80087e6:	4770      	bx	lr
 80087e8:	20004e10 	.word	0x20004e10
 80087ec:	20004ecc 	.word	0x20004ecc

080087f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4a07      	ldr	r2, [pc, #28]	; (800881c <vApplicationGetTimerTaskMemory+0x2c>)
 8008800:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4a06      	ldr	r2, [pc, #24]	; (8008820 <vApplicationGetTimerTaskMemory+0x30>)
 8008806:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800880e:	601a      	str	r2, [r3, #0]
}
 8008810:	bf00      	nop
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	200050cc 	.word	0x200050cc
 8008820:	20005188 	.word	0x20005188

08008824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f103 0208 	add.w	r2, r3, #8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f04f 32ff 	mov.w	r2, #4294967295
 800883c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f103 0208 	add.w	r2, r3, #8
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f103 0208 	add.w	r2, r3, #8
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	bc80      	pop	{r7}
 8008860:	4770      	bx	lr

08008862 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	bc80      	pop	{r7}
 8008878:	4770      	bx	lr

0800887a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	601a      	str	r2, [r3, #0]
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bc80      	pop	{r7}
 80088be:	4770      	bx	lr

080088c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d103      	bne.n	80088e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	e00c      	b.n	80088fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3308      	adds	r3, #8
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	e002      	b.n	80088ee <vListInsert+0x2e>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d2f6      	bcs.n	80088e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	6892      	ldr	r2, [r2, #8]
 8008946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6852      	ldr	r2, [r2, #4]
 8008950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	429a      	cmp	r2, r3
 800895a:	d103      	bne.n	8008964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	1e5a      	subs	r2, r3, #1
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	bc80      	pop	{r7}
 8008980:	4770      	bx	lr
	...

08008984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089ae:	f002 fd2d 	bl	800b40c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	68f9      	ldr	r1, [r7, #12]
 80089bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089be:	fb01 f303 	mul.w	r3, r1, r3
 80089c2:	441a      	add	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	3b01      	subs	r3, #1
 80089e0:	68f9      	ldr	r1, [r7, #12]
 80089e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089e4:	fb01 f303 	mul.w	r3, r1, r3
 80089e8:	441a      	add	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	22ff      	movs	r2, #255	; 0xff
 80089f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	22ff      	movs	r2, #255	; 0xff
 80089fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d114      	bne.n	8008a2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01a      	beq.n	8008a42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3310      	adds	r3, #16
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 fd0d 	bl	800a430 <xTaskRemoveFromEventList>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d012      	beq.n	8008a42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a1c:	4b0c      	ldr	r3, [pc, #48]	; (8008a50 <xQueueGenericReset+0xcc>)
 8008a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	e009      	b.n	8008a42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3310      	adds	r3, #16
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fef6 	bl	8008824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3324      	adds	r3, #36	; 0x24
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff fef1 	bl	8008824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a42:	f002 fd13 	bl	800b46c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a46:	2301      	movs	r3, #1
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	; 0x38
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10a      	bne.n	8008a7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a7a:	bf00      	nop
 8008a7c:	e7fe      	b.n	8008a7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <xQueueGenericCreateStatic+0x52>
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <xQueueGenericCreateStatic+0x56>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e000      	b.n	8008aac <xQueueGenericCreateStatic+0x58>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	623b      	str	r3, [r7, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <xQueueGenericCreateStatic+0x7e>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <xQueueGenericCreateStatic+0x82>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e000      	b.n	8008ad8 <xQueueGenericCreateStatic+0x84>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	61fb      	str	r3, [r7, #28]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008af2:	2350      	movs	r3, #80	; 0x50
 8008af4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b50      	cmp	r3, #80	; 0x50
 8008afa:	d00a      	beq.n	8008b12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	61bb      	str	r3, [r7, #24]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 f83f 	bl	8008bb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3730      	adds	r7, #48	; 0x30
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	; 0x28
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	613b      	str	r3, [r7, #16]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	fb02 f303 	mul.w	r3, r2, r3
 8008b76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	3350      	adds	r3, #80	; 0x50
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f002 fd45 	bl	800b60c <pvPortMalloc>
 8008b82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d011      	beq.n	8008bae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	3350      	adds	r3, #80	; 0x50
 8008b92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b9c:	79fa      	ldrb	r2, [r7, #7]
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f805 	bl	8008bb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bae:	69bb      	ldr	r3, [r7, #24]
	}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3720      	adds	r7, #32
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d103      	bne.n	8008bd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e002      	b.n	8008bda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008be6:	2101      	movs	r1, #1
 8008be8:	69b8      	ldr	r0, [r7, #24]
 8008bea:	f7ff fecb 	bl	8008984 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	78fa      	ldrb	r2, [r7, #3]
 8008bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00e      	beq.n	8008c2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008c1e:	2300      	movs	r3, #0
 8008c20:	2200      	movs	r2, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f90b 	bl	8008e40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b086      	sub	sp, #24
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	4603      	mov	r3, r0
 8008c3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	2300      	movs	r3, #0
 8008c42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	461a      	mov	r2, r3
 8008c48:	6939      	ldr	r1, [r7, #16]
 8008c4a:	6978      	ldr	r0, [r7, #20]
 8008c4c:	f7ff ff7a 	bl	8008b44 <xQueueGenericCreate>
 8008c50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f7ff ffd3 	bl	8008bfe <prvInitialiseMutex>

		return xNewQueue;
 8008c58:	68fb      	ldr	r3, [r7, #12]
	}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b088      	sub	sp, #32
 8008c66:	af02      	add	r7, sp, #8
 8008c68:	4603      	mov	r3, r0
 8008c6a:	6039      	str	r1, [r7, #0]
 8008c6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	2300      	movs	r3, #0
 8008c74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	6939      	ldr	r1, [r7, #16]
 8008c80:	6978      	ldr	r0, [r7, #20]
 8008c82:	f7ff fee7 	bl	8008a54 <xQueueGenericCreateStatic>
 8008c86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f7ff ffb8 	bl	8008bfe <prvInitialiseMutex>

		return xNewQueue;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
	}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008c98:	b590      	push	{r4, r7, lr}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	60fb      	str	r3, [r7, #12]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	689c      	ldr	r4, [r3, #8]
 8008cc4:	f001 fd76 	bl	800a7b4 <xTaskGetCurrentTaskHandle>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	429c      	cmp	r4, r3
 8008ccc:	d111      	bne.n	8008cf2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	1e5a      	subs	r2, r3, #1
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d105      	bne.n	8008cec <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	6938      	ldr	r0, [r7, #16]
 8008ce8:	f000 f8aa 	bl	8008e40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008cec:	2301      	movs	r3, #1
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e001      	b.n	8008cf6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008cf6:	697b      	ldr	r3, [r7, #20]
	}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	371c      	adds	r7, #28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd90      	pop	{r4, r7, pc}

08008d00 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	60fb      	str	r3, [r7, #12]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	689c      	ldr	r4, [r3, #8]
 8008d2e:	f001 fd41 	bl	800a7b4 <xTaskGetCurrentTaskHandle>
 8008d32:	4603      	mov	r3, r0
 8008d34:	429c      	cmp	r4, r3
 8008d36:	d107      	bne.n	8008d48 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008d42:	2301      	movs	r3, #1
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	e00c      	b.n	8008d62 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6938      	ldr	r0, [r7, #16]
 8008d4c:	f000 fb7e 	bl	800944c <xQueueSemaphoreTake>
 8008d50:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008d62:	697b      	ldr	r3, [r7, #20]
	}
 8008d64:	4618      	mov	r0, r3
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd90      	pop	{r4, r7, pc}

08008d6c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	61bb      	str	r3, [r7, #24]
}
 8008d90:	bf00      	nop
 8008d92:	e7fe      	b.n	8008d92 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d90a      	bls.n	8008db2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	617b      	str	r3, [r7, #20]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008db2:	2302      	movs	r3, #2
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	2100      	movs	r1, #0
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff fe49 	bl	8008a54 <xQueueGenericCreateStatic>
 8008dc2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
	}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b086      	sub	sp, #24
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	613b      	str	r3, [r7, #16]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d90a      	bls.n	8008e1e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e1e:	2202      	movs	r2, #2
 8008e20:	2100      	movs	r1, #0
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff fe8e 	bl	8008b44 <xQueueGenericCreate>
 8008e28:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e36:	697b      	ldr	r3, [r7, #20]
	}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08e      	sub	sp, #56	; 0x38
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10a      	bne.n	8008e72 <xQueueGenericSend+0x32>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d103      	bne.n	8008e80 <xQueueGenericSend+0x40>
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <xQueueGenericSend+0x44>
 8008e80:	2301      	movs	r3, #1
 8008e82:	e000      	b.n	8008e86 <xQueueGenericSend+0x46>
 8008e84:	2300      	movs	r3, #0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <xQueueGenericSend+0x60>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e9c:	bf00      	nop
 8008e9e:	e7fe      	b.n	8008e9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d103      	bne.n	8008eae <xQueueGenericSend+0x6e>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d101      	bne.n	8008eb2 <xQueueGenericSend+0x72>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <xQueueGenericSend+0x74>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <xQueueGenericSend+0x8e>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	623b      	str	r3, [r7, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ece:	f001 fc7f 	bl	800a7d0 <xTaskGetSchedulerState>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <xQueueGenericSend+0x9e>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <xQueueGenericSend+0xa2>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <xQueueGenericSend+0xa4>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <xQueueGenericSend+0xbe>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	61fb      	str	r3, [r7, #28]
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008efe:	f002 fa85 	bl	800b40c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d302      	bcc.n	8008f14 <xQueueGenericSend+0xd4>
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d129      	bne.n	8008f68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f1a:	f000 fc5d 	bl	80097d8 <prvCopyDataToQueue>
 8008f1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d010      	beq.n	8008f4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	3324      	adds	r3, #36	; 0x24
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 fa7f 	bl	800a430 <xTaskRemoveFromEventList>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d013      	beq.n	8008f60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f38:	4b3f      	ldr	r3, [pc, #252]	; (8009038 <xQueueGenericSend+0x1f8>)
 8008f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	e00a      	b.n	8008f60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d007      	beq.n	8008f60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f50:	4b39      	ldr	r3, [pc, #228]	; (8009038 <xQueueGenericSend+0x1f8>)
 8008f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f60:	f002 fa84 	bl	800b46c <vPortExitCritical>
				return pdPASS;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e063      	b.n	8009030 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f6e:	f002 fa7d 	bl	800b46c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	e05c      	b.n	8009030 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f7c:	f107 0314 	add.w	r3, r7, #20
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 fab9 	bl	800a4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f86:	2301      	movs	r3, #1
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f8a:	f002 fa6f 	bl	800b46c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f8e:	f001 f815 	bl	8009fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f92:	f002 fa3b 	bl	800b40c <vPortEnterCritical>
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d103      	bne.n	8008fac <xQueueGenericSend+0x16c>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fb2:	b25b      	sxtb	r3, r3
 8008fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb8:	d103      	bne.n	8008fc2 <xQueueGenericSend+0x182>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fc2:	f002 fa53 	bl	800b46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fc6:	1d3a      	adds	r2, r7, #4
 8008fc8:	f107 0314 	add.w	r3, r7, #20
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 faa8 	bl	800a524 <xTaskCheckForTimeOut>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d124      	bne.n	8009024 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fdc:	f000 fcf4 	bl	80099c8 <prvIsQueueFull>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d018      	beq.n	8009018 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	3310      	adds	r3, #16
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 f9ce 	bl	800a390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ff6:	f000 fc7f 	bl	80098f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ffa:	f000 ffed 	bl	8009fd8 <xTaskResumeAll>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	f47f af7c 	bne.w	8008efe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <xQueueGenericSend+0x1f8>)
 8009008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	e772      	b.n	8008efe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800901a:	f000 fc6d 	bl	80098f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800901e:	f000 ffdb 	bl	8009fd8 <xTaskResumeAll>
 8009022:	e76c      	b.n	8008efe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009026:	f000 fc67 	bl	80098f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800902a:	f000 ffd5 	bl	8009fd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800902e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009030:	4618      	mov	r0, r3
 8009032:	3738      	adds	r7, #56	; 0x38
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	e000ed04 	.word	0xe000ed04

0800903c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b090      	sub	sp, #64	; 0x40
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800904e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d103      	bne.n	8009078 <xQueueGenericSendFromISR+0x3c>
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <xQueueGenericSendFromISR+0x40>
 8009078:	2301      	movs	r3, #1
 800907a:	e000      	b.n	800907e <xQueueGenericSendFromISR+0x42>
 800907c:	2300      	movs	r3, #0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d103      	bne.n	80090a6 <xQueueGenericSendFromISR+0x6a>
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d101      	bne.n	80090aa <xQueueGenericSendFromISR+0x6e>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e000      	b.n	80090ac <xQueueGenericSendFromISR+0x70>
 80090aa:	2300      	movs	r3, #0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	623b      	str	r3, [r7, #32]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090c6:	f002 fa63 	bl	800b590 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090ca:	f3ef 8211 	mrs	r2, BASEPRI
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	61fa      	str	r2, [r7, #28]
 80090e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d302      	bcc.n	80090f8 <xQueueGenericSendFromISR+0xbc>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d12f      	bne.n	8009158 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800910e:	f000 fb63 	bl	80097d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009112:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911a:	d112      	bne.n	8009142 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	2b00      	cmp	r3, #0
 8009122:	d016      	beq.n	8009152 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	3324      	adds	r3, #36	; 0x24
 8009128:	4618      	mov	r0, r3
 800912a:	f001 f981 	bl	800a430 <xTaskRemoveFromEventList>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00e      	beq.n	8009152 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00b      	beq.n	8009152 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	e007      	b.n	8009152 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009142:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009146:	3301      	adds	r3, #1
 8009148:	b2db      	uxtb	r3, r3
 800914a:	b25a      	sxtb	r2, r3
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009152:	2301      	movs	r3, #1
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009156:	e001      	b.n	800915c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009166:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800916a:	4618      	mov	r0, r3
 800916c:	3740      	adds	r7, #64	; 0x40
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b08e      	sub	sp, #56	; 0x38
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	623b      	str	r3, [r7, #32]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00a      	beq.n	80091ba <xQueueGiveFromISR+0x48>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	61fb      	str	r3, [r7, #28]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d103      	bne.n	80091ca <xQueueGiveFromISR+0x58>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <xQueueGiveFromISR+0x5c>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e000      	b.n	80091d0 <xQueueGiveFromISR+0x5e>
 80091ce:	2300      	movs	r3, #0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10a      	bne.n	80091ea <xQueueGiveFromISR+0x78>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	61bb      	str	r3, [r7, #24]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091ea:	f002 f9d1 	bl	800b590 <vPortValidateInterruptPriority>
	__asm volatile
 80091ee:	f3ef 8211 	mrs	r2, BASEPRI
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	617a      	str	r2, [r7, #20]
 8009204:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009206:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009216:	429a      	cmp	r2, r3
 8009218:	d22b      	bcs.n	8009272 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800922c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d112      	bne.n	800925c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	2b00      	cmp	r3, #0
 800923c:	d016      	beq.n	800926c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	3324      	adds	r3, #36	; 0x24
 8009242:	4618      	mov	r0, r3
 8009244:	f001 f8f4 	bl	800a430 <xTaskRemoveFromEventList>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00e      	beq.n	800926c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2201      	movs	r2, #1
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	e007      	b.n	800926c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800925c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009260:	3301      	adds	r3, #1
 8009262:	b2db      	uxtb	r3, r3
 8009264:	b25a      	sxtb	r2, r3
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800926c:	2301      	movs	r3, #1
 800926e:	637b      	str	r3, [r7, #52]	; 0x34
 8009270:	e001      	b.n	8009276 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f383 8811 	msr	BASEPRI, r3
}
 8009280:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009284:	4618      	mov	r0, r3
 8009286:	3738      	adds	r7, #56	; 0x38
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08c      	sub	sp, #48	; 0x30
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009298:	2300      	movs	r3, #0
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <xQueueReceive+0x30>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	623b      	str	r3, [r7, #32]
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <xQueueReceive+0x3e>
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <xQueueReceive+0x42>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <xQueueReceive+0x44>
 80092ce:	2300      	movs	r3, #0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <xQueueReceive+0x5e>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	61fb      	str	r3, [r7, #28]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ea:	f001 fa71 	bl	800a7d0 <xTaskGetSchedulerState>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <xQueueReceive+0x6e>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <xQueueReceive+0x72>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xQueueReceive+0x74>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueReceive+0x8e>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	61bb      	str	r3, [r7, #24]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800931a:	f002 f877 	bl	800b40c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	2b00      	cmp	r3, #0
 8009328:	d01f      	beq.n	800936a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932e:	f000 fabd 	bl	80098ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	1e5a      	subs	r2, r3, #1
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00f      	beq.n	8009362 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	3310      	adds	r3, #16
 8009346:	4618      	mov	r0, r3
 8009348:	f001 f872 	bl	800a430 <xTaskRemoveFromEventList>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d007      	beq.n	8009362 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009352:	4b3d      	ldr	r3, [pc, #244]	; (8009448 <xQueueReceive+0x1bc>)
 8009354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009362:	f002 f883 	bl	800b46c <vPortExitCritical>
				return pdPASS;
 8009366:	2301      	movs	r3, #1
 8009368:	e069      	b.n	800943e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009370:	f002 f87c 	bl	800b46c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009374:	2300      	movs	r3, #0
 8009376:	e062      	b.n	800943e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d106      	bne.n	800938c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800937e:	f107 0310 	add.w	r3, r7, #16
 8009382:	4618      	mov	r0, r3
 8009384:	f001 f8b8 	bl	800a4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800938c:	f002 f86e 	bl	800b46c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009390:	f000 fe14 	bl	8009fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009394:	f002 f83a 	bl	800b40c <vPortEnterCritical>
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800939e:	b25b      	sxtb	r3, r3
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a4:	d103      	bne.n	80093ae <xQueueReceive+0x122>
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d103      	bne.n	80093c4 <xQueueReceive+0x138>
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093c4:	f002 f852 	bl	800b46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093c8:	1d3a      	adds	r2, r7, #4
 80093ca:	f107 0310 	add.w	r3, r7, #16
 80093ce:	4611      	mov	r1, r2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 f8a7 	bl	800a524 <xTaskCheckForTimeOut>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d123      	bne.n	8009424 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f000 fadd 	bl	800999c <prvIsQueueEmpty>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d017      	beq.n	8009418 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	3324      	adds	r3, #36	; 0x24
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	4611      	mov	r1, r2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 ffcd 	bl	800a390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f8:	f000 fa7e 	bl	80098f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093fc:	f000 fdec 	bl	8009fd8 <xTaskResumeAll>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d189      	bne.n	800931a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009406:	4b10      	ldr	r3, [pc, #64]	; (8009448 <xQueueReceive+0x1bc>)
 8009408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	e780      	b.n	800931a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800941a:	f000 fa6d 	bl	80098f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800941e:	f000 fddb 	bl	8009fd8 <xTaskResumeAll>
 8009422:	e77a      	b.n	800931a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009426:	f000 fa67 	bl	80098f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800942a:	f000 fdd5 	bl	8009fd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800942e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009430:	f000 fab4 	bl	800999c <prvIsQueueEmpty>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	f43f af6f 	beq.w	800931a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800943c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800943e:	4618      	mov	r0, r3
 8009440:	3730      	adds	r7, #48	; 0x30
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08e      	sub	sp, #56	; 0x38
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009456:	2300      	movs	r3, #0
 8009458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800945e:	2300      	movs	r3, #0
 8009460:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	623b      	str	r3, [r7, #32]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	61fb      	str	r3, [r7, #28]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800949c:	f001 f998 	bl	800a7d0 <xTaskGetSchedulerState>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <xQueueSemaphoreTake+0x60>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <xQueueSemaphoreTake+0x64>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <xQueueSemaphoreTake+0x66>
 80094b0:	2300      	movs	r3, #0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	61bb      	str	r3, [r7, #24]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094cc:	f001 ff9e 	bl	800b40c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d024      	beq.n	8009526 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	1e5a      	subs	r2, r3, #1
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80094ec:	f001 fae6 	bl	800aabc <pvTaskIncrementMutexHeldCount>
 80094f0:	4602      	mov	r2, r0
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00f      	beq.n	800951e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	3310      	adds	r3, #16
 8009502:	4618      	mov	r0, r3
 8009504:	f000 ff94 	bl	800a430 <xTaskRemoveFromEventList>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800950e:	4b54      	ldr	r3, [pc, #336]	; (8009660 <xQueueSemaphoreTake+0x214>)
 8009510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800951e:	f001 ffa5 	bl	800b46c <vPortExitCritical>
				return pdPASS;
 8009522:	2301      	movs	r3, #1
 8009524:	e097      	b.n	8009656 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d111      	bne.n	8009550 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	617b      	str	r3, [r7, #20]
}
 8009544:	bf00      	nop
 8009546:	e7fe      	b.n	8009546 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009548:	f001 ff90 	bl	800b46c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800954c:	2300      	movs	r3, #0
 800954e:	e082      	b.n	8009656 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009556:	f107 030c 	add.w	r3, r7, #12
 800955a:	4618      	mov	r0, r3
 800955c:	f000 ffcc 	bl	800a4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009560:	2301      	movs	r3, #1
 8009562:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009564:	f001 ff82 	bl	800b46c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009568:	f000 fd28 	bl	8009fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800956c:	f001 ff4e 	bl	800b40c <vPortEnterCritical>
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009576:	b25b      	sxtb	r3, r3
 8009578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957c:	d103      	bne.n	8009586 <xQueueSemaphoreTake+0x13a>
 800957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800958c:	b25b      	sxtb	r3, r3
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d103      	bne.n	800959c <xQueueSemaphoreTake+0x150>
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800959c:	f001 ff66 	bl	800b46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095a0:	463a      	mov	r2, r7
 80095a2:	f107 030c 	add.w	r3, r7, #12
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 ffbb 	bl	800a524 <xTaskCheckForTimeOut>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d132      	bne.n	800961a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095b6:	f000 f9f1 	bl	800999c <prvIsQueueEmpty>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d026      	beq.n	800960e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d109      	bne.n	80095dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80095c8:	f001 ff20 	bl	800b40c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f001 f91b 	bl	800a80c <xTaskPriorityInherit>
 80095d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80095d8:	f001 ff48 	bl	800b46c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095de:	3324      	adds	r3, #36	; 0x24
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fed3 	bl	800a390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095ec:	f000 f984 	bl	80098f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095f0:	f000 fcf2 	bl	8009fd8 <xTaskResumeAll>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f47f af68 	bne.w	80094cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80095fc:	4b18      	ldr	r3, [pc, #96]	; (8009660 <xQueueSemaphoreTake+0x214>)
 80095fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	e75e      	b.n	80094cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800960e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009610:	f000 f972 	bl	80098f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009614:	f000 fce0 	bl	8009fd8 <xTaskResumeAll>
 8009618:	e758      	b.n	80094cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800961a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800961c:	f000 f96c 	bl	80098f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009620:	f000 fcda 	bl	8009fd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009626:	f000 f9b9 	bl	800999c <prvIsQueueEmpty>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	f43f af4d 	beq.w	80094cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00d      	beq.n	8009654 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009638:	f001 fee8 	bl	800b40c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800963c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800963e:	f000 f8b4 	bl	80097aa <prvGetDisinheritPriorityAfterTimeout>
 8009642:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800964a:	4618      	mov	r0, r3
 800964c:	f001 f9b4 	bl	800a9b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009650:	f001 ff0c 	bl	800b46c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009656:	4618      	mov	r0, r3
 8009658:	3738      	adds	r7, #56	; 0x38
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08e      	sub	sp, #56	; 0x38
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10a      	bne.n	8009690 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	623b      	str	r3, [r7, #32]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d103      	bne.n	800969e <xQueueReceiveFromISR+0x3a>
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <xQueueReceiveFromISR+0x3e>
 800969e:	2301      	movs	r3, #1
 80096a0:	e000      	b.n	80096a4 <xQueueReceiveFromISR+0x40>
 80096a2:	2300      	movs	r3, #0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10a      	bne.n	80096be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	61fb      	str	r3, [r7, #28]
}
 80096ba:	bf00      	nop
 80096bc:	e7fe      	b.n	80096bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096be:	f001 ff67 	bl	800b590 <vPortValidateInterruptPriority>
	__asm volatile
 80096c2:	f3ef 8211 	mrs	r2, BASEPRI
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	61ba      	str	r2, [r7, #24]
 80096d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80096da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d02f      	beq.n	800974a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096f8:	f000 f8d8 	bl	80098ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	1e5a      	subs	r2, r3, #1
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009704:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970c:	d112      	bne.n	8009734 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d016      	beq.n	8009744 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	3310      	adds	r3, #16
 800971a:	4618      	mov	r0, r3
 800971c:	f000 fe88 	bl	800a430 <xTaskRemoveFromEventList>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00e      	beq.n	8009744 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00b      	beq.n	8009744 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	e007      	b.n	8009744 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009738:	3301      	adds	r3, #1
 800973a:	b2db      	uxtb	r3, r3
 800973c:	b25a      	sxtb	r2, r3
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009744:	2301      	movs	r3, #1
 8009746:	637b      	str	r3, [r7, #52]	; 0x34
 8009748:	e001      	b.n	800974e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800974a:	2300      	movs	r3, #0
 800974c:	637b      	str	r3, [r7, #52]	; 0x34
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f383 8811 	msr	BASEPRI, r3
}
 8009758:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800975a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800975c:	4618      	mov	r0, r3
 800975e:	3738      	adds	r7, #56	; 0x38
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <vQueueDelete+0x28>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	60bb      	str	r3, [r7, #8]
}
 8009788:	bf00      	nop
 800978a:	e7fe      	b.n	800978a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f95b 	bl	8009a48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f002 f801 	bl	800b7a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d006      	beq.n	80097c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	e001      	b.n	80097cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80097c8:	2300      	movs	r3, #0
 80097ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80097cc:	68fb      	ldr	r3, [r7, #12]
	}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bc80      	pop	{r7}
 80097d6:	4770      	bx	lr

080097d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80097e4:	2300      	movs	r3, #0
 80097e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10d      	bne.n	8009812 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d14d      	bne.n	800989a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	4618      	mov	r0, r3
 8009804:	f001 f86a 	bl	800a8dc <xTaskPriorityDisinherit>
 8009808:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	609a      	str	r2, [r3, #8]
 8009810:	e043      	b.n	800989a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d119      	bne.n	800984c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6858      	ldr	r0, [r3, #4]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009820:	461a      	mov	r2, r3
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	f00f fa88 	bl	8018d38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009830:	441a      	add	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	429a      	cmp	r2, r3
 8009840:	d32b      	bcc.n	800989a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	605a      	str	r2, [r3, #4]
 800984a:	e026      	b.n	800989a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	68d8      	ldr	r0, [r3, #12]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009854:	461a      	mov	r2, r3
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	f00f fa6e 	bl	8018d38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	68da      	ldr	r2, [r3, #12]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009864:	425b      	negs	r3, r3
 8009866:	441a      	add	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d207      	bcs.n	8009888 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009880:	425b      	negs	r3, r3
 8009882:	441a      	add	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d105      	bne.n	800989a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	3b01      	subs	r3, #1
 8009898:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80098a2:	697b      	ldr	r3, [r7, #20]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d018      	beq.n	80098f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	441a      	add	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68da      	ldr	r2, [r3, #12]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d303      	bcc.n	80098e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68d9      	ldr	r1, [r3, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e8:	461a      	mov	r2, r3
 80098ea:	6838      	ldr	r0, [r7, #0]
 80098ec:	f00f fa24 	bl	8018d38 <memcpy>
	}
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009900:	f001 fd84 	bl	800b40c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800990a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800990c:	e011      	b.n	8009932 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009912:	2b00      	cmp	r3, #0
 8009914:	d012      	beq.n	800993c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	3324      	adds	r3, #36	; 0x24
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fd88 	bl	800a430 <xTaskRemoveFromEventList>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009926:	f000 fe5f 	bl	800a5e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	3b01      	subs	r3, #1
 800992e:	b2db      	uxtb	r3, r3
 8009930:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009936:	2b00      	cmp	r3, #0
 8009938:	dce9      	bgt.n	800990e <prvUnlockQueue+0x16>
 800993a:	e000      	b.n	800993e <prvUnlockQueue+0x46>
					break;
 800993c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	22ff      	movs	r2, #255	; 0xff
 8009942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009946:	f001 fd91 	bl	800b46c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800994a:	f001 fd5f 	bl	800b40c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009954:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009956:	e011      	b.n	800997c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d012      	beq.n	8009986 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3310      	adds	r3, #16
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fd63 	bl	800a430 <xTaskRemoveFromEventList>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009970:	f000 fe3a 	bl	800a5e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	3b01      	subs	r3, #1
 8009978:	b2db      	uxtb	r3, r3
 800997a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800997c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009980:	2b00      	cmp	r3, #0
 8009982:	dce9      	bgt.n	8009958 <prvUnlockQueue+0x60>
 8009984:	e000      	b.n	8009988 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009986:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	22ff      	movs	r2, #255	; 0xff
 800998c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009990:	f001 fd6c 	bl	800b46c <vPortExitCritical>
}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099a4:	f001 fd32 	bl	800b40c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d102      	bne.n	80099b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80099b0:	2301      	movs	r3, #1
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	e001      	b.n	80099ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099ba:	f001 fd57 	bl	800b46c <vPortExitCritical>

	return xReturn;
 80099be:	68fb      	ldr	r3, [r7, #12]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099d0:	f001 fd1c 	bl	800b40c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099dc:	429a      	cmp	r2, r3
 80099de:	d102      	bne.n	80099e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80099e0:	2301      	movs	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e001      	b.n	80099ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099ea:	f001 fd3f 	bl	800b46c <vPortExitCritical>

	return xReturn;
 80099ee:	68fb      	ldr	r3, [r7, #12]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	e014      	b.n	8009a32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a08:	4a0e      	ldr	r2, [pc, #56]	; (8009a44 <vQueueAddToRegistry+0x4c>)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10b      	bne.n	8009a2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a14:	490b      	ldr	r1, [pc, #44]	; (8009a44 <vQueueAddToRegistry+0x4c>)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a1e:	4a09      	ldr	r2, [pc, #36]	; (8009a44 <vQueueAddToRegistry+0x4c>)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	4413      	add	r3, r2
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a2a:	e006      	b.n	8009a3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b07      	cmp	r3, #7
 8009a36:	d9e7      	bls.n	8009a08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	20005588 	.word	0x20005588

08009a48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a50:	2300      	movs	r3, #0
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	e016      	b.n	8009a84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009a56:	4a10      	ldr	r2, [pc, #64]	; (8009a98 <vQueueUnregisterQueue+0x50>)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d10b      	bne.n	8009a7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009a66:	4a0c      	ldr	r2, [pc, #48]	; (8009a98 <vQueueUnregisterQueue+0x50>)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009a70:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <vQueueUnregisterQueue+0x50>)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	4413      	add	r3, r2
 8009a78:	2200      	movs	r2, #0
 8009a7a:	605a      	str	r2, [r3, #4]
				break;
 8009a7c:	e006      	b.n	8009a8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3301      	adds	r3, #1
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b07      	cmp	r3, #7
 8009a88:	d9e5      	bls.n	8009a56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bc80      	pop	{r7}
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	20005588 	.word	0x20005588

08009a9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009aac:	f001 fcae 	bl	800b40c <vPortEnterCritical>
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ab6:	b25b      	sxtb	r3, r3
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d103      	bne.n	8009ac6 <vQueueWaitForMessageRestricted+0x2a>
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009acc:	b25b      	sxtb	r3, r3
 8009ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad2:	d103      	bne.n	8009adc <vQueueWaitForMessageRestricted+0x40>
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009adc:	f001 fcc6 	bl	800b46c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d106      	bne.n	8009af6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	3324      	adds	r3, #36	; 0x24
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fc71 	bl	800a3d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009af6:	6978      	ldr	r0, [r7, #20]
 8009af8:	f7ff fefe 	bl	80098f8 <prvUnlockQueue>
	}
 8009afc:	bf00      	nop
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08e      	sub	sp, #56	; 0x38
 8009b08:	af04      	add	r7, sp, #16
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	623b      	str	r3, [r7, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10a      	bne.n	8009b4a <xTaskCreateStatic+0x46>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	61fb      	str	r3, [r7, #28]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b4a:	23bc      	movs	r3, #188	; 0xbc
 8009b4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2bbc      	cmp	r3, #188	; 0xbc
 8009b52:	d00a      	beq.n	8009b6a <xTaskCreateStatic+0x66>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	61bb      	str	r3, [r7, #24]
}
 8009b66:	bf00      	nop
 8009b68:	e7fe      	b.n	8009b68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01e      	beq.n	8009bb0 <xTaskCreateStatic+0xac>
 8009b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01b      	beq.n	8009bb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	2202      	movs	r2, #2
 8009b86:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9303      	str	r3, [sp, #12]
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	9302      	str	r3, [sp, #8]
 8009b92:	f107 0314 	add.w	r3, r7, #20
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	68b9      	ldr	r1, [r7, #8]
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f850 	bl	8009c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009baa:	f000 f8f3 	bl	8009d94 <prvAddNewTaskToReadyList>
 8009bae:	e001      	b.n	8009bb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bb4:	697b      	ldr	r3, [r7, #20]
	}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3728      	adds	r7, #40	; 0x28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b08c      	sub	sp, #48	; 0x30
 8009bc2:	af04      	add	r7, sp, #16
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	603b      	str	r3, [r7, #0]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009bce:	88fb      	ldrh	r3, [r7, #6]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f001 fd1a 	bl	800b60c <pvPortMalloc>
 8009bd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00e      	beq.n	8009bfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009be0:	20bc      	movs	r0, #188	; 0xbc
 8009be2:	f001 fd13 	bl	800b60c <pvPortMalloc>
 8009be6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d003      	beq.n	8009bf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8009bf4:	e005      	b.n	8009c02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009bf6:	6978      	ldr	r0, [r7, #20]
 8009bf8:	f001 fdd4 	bl	800b7a4 <vPortFree>
 8009bfc:	e001      	b.n	8009c02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d017      	beq.n	8009c38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c10:	88fa      	ldrh	r2, [r7, #6]
 8009c12:	2300      	movs	r3, #0
 8009c14:	9303      	str	r3, [sp, #12]
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	9302      	str	r3, [sp, #8]
 8009c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68b9      	ldr	r1, [r7, #8]
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f000 f80e 	bl	8009c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c2c:	69f8      	ldr	r0, [r7, #28]
 8009c2e:	f000 f8b1 	bl	8009d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c32:	2301      	movs	r3, #1
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	e002      	b.n	8009c3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c38:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
	}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3720      	adds	r7, #32
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b088      	sub	sp, #32
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	461a      	mov	r2, r3
 8009c60:	21a5      	movs	r1, #165	; 0xa5
 8009c62:	f00f f877 	bl	8018d54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c70:	3b01      	subs	r3, #1
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	617b      	str	r3, [r7, #20]
}
 8009c9c:	bf00      	nop
 8009c9e:	e7fe      	b.n	8009c9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d01f      	beq.n	8009ce6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	61fb      	str	r3, [r7, #28]
 8009caa:	e012      	b.n	8009cd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	7819      	ldrb	r1, [r3, #0]
 8009cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	4413      	add	r3, r2
 8009cba:	3334      	adds	r3, #52	; 0x34
 8009cbc:	460a      	mov	r2, r1
 8009cbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d006      	beq.n	8009cda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	61fb      	str	r3, [r7, #28]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	2b0f      	cmp	r3, #15
 8009cd6:	d9e9      	bls.n	8009cac <prvInitialiseNewTask+0x64>
 8009cd8:	e000      	b.n	8009cdc <prvInitialiseNewTask+0x94>
			{
				break;
 8009cda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ce4:	e003      	b.n	8009cee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf0:	2b37      	cmp	r3, #55	; 0x37
 8009cf2:	d901      	bls.n	8009cf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009cf4:	2337      	movs	r3, #55	; 0x37
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	2200      	movs	r2, #0
 8009d08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fda7 	bl	8008862 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	3318      	adds	r3, #24
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fe fda2 	bl	8008862 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	3354      	adds	r3, #84	; 0x54
 8009d48:	2260      	movs	r2, #96	; 0x60
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f00f f801 	bl	8018d54 <memset>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	4a0c      	ldr	r2, [pc, #48]	; (8009d88 <prvInitialiseNewTask+0x140>)
 8009d56:	659a      	str	r2, [r3, #88]	; 0x58
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5a:	4a0c      	ldr	r2, [pc, #48]	; (8009d8c <prvInitialiseNewTask+0x144>)
 8009d5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	4a0b      	ldr	r2, [pc, #44]	; (8009d90 <prvInitialiseNewTask+0x148>)
 8009d62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	68f9      	ldr	r1, [r7, #12]
 8009d68:	69b8      	ldr	r0, [r7, #24]
 8009d6a:	f001 fa5b 	bl	800b224 <pxPortInitialiseStack>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d80:	bf00      	nop
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	0801cb30 	.word	0x0801cb30
 8009d8c:	0801cb50 	.word	0x0801cb50
 8009d90:	0801cb10 	.word	0x0801cb10

08009d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d9c:	f001 fb36 	bl	800b40c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009da0:	4b2d      	ldr	r3, [pc, #180]	; (8009e58 <prvAddNewTaskToReadyList+0xc4>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	4a2c      	ldr	r2, [pc, #176]	; (8009e58 <prvAddNewTaskToReadyList+0xc4>)
 8009da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009daa:	4b2c      	ldr	r3, [pc, #176]	; (8009e5c <prvAddNewTaskToReadyList+0xc8>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d109      	bne.n	8009dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009db2:	4a2a      	ldr	r2, [pc, #168]	; (8009e5c <prvAddNewTaskToReadyList+0xc8>)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009db8:	4b27      	ldr	r3, [pc, #156]	; (8009e58 <prvAddNewTaskToReadyList+0xc4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d110      	bne.n	8009de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009dc0:	f000 fc36 	bl	800a630 <prvInitialiseTaskLists>
 8009dc4:	e00d      	b.n	8009de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009dc6:	4b26      	ldr	r3, [pc, #152]	; (8009e60 <prvAddNewTaskToReadyList+0xcc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d109      	bne.n	8009de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009dce:	4b23      	ldr	r3, [pc, #140]	; (8009e5c <prvAddNewTaskToReadyList+0xc8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d802      	bhi.n	8009de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ddc:	4a1f      	ldr	r2, [pc, #124]	; (8009e5c <prvAddNewTaskToReadyList+0xc8>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009de2:	4b20      	ldr	r3, [pc, #128]	; (8009e64 <prvAddNewTaskToReadyList+0xd0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3301      	adds	r3, #1
 8009de8:	4a1e      	ldr	r2, [pc, #120]	; (8009e64 <prvAddNewTaskToReadyList+0xd0>)
 8009dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009dec:	4b1d      	ldr	r3, [pc, #116]	; (8009e64 <prvAddNewTaskToReadyList+0xd0>)
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df8:	4b1b      	ldr	r3, [pc, #108]	; (8009e68 <prvAddNewTaskToReadyList+0xd4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d903      	bls.n	8009e08 <prvAddNewTaskToReadyList+0x74>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	4a18      	ldr	r2, [pc, #96]	; (8009e68 <prvAddNewTaskToReadyList+0xd4>)
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4a15      	ldr	r2, [pc, #84]	; (8009e6c <prvAddNewTaskToReadyList+0xd8>)
 8009e16:	441a      	add	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4610      	mov	r0, r2
 8009e20:	f7fe fd2b 	bl	800887a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e24:	f001 fb22 	bl	800b46c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e28:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <prvAddNewTaskToReadyList+0xcc>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00e      	beq.n	8009e4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e30:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <prvAddNewTaskToReadyList+0xc8>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d207      	bcs.n	8009e4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e3e:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <prvAddNewTaskToReadyList+0xdc>)
 8009e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20005a9c 	.word	0x20005a9c
 8009e5c:	200055c8 	.word	0x200055c8
 8009e60:	20005aa8 	.word	0x20005aa8
 8009e64:	20005ab8 	.word	0x20005ab8
 8009e68:	20005aa4 	.word	0x20005aa4
 8009e6c:	200055cc 	.word	0x200055cc
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d017      	beq.n	8009eb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e86:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <vTaskDelay+0x60>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <vTaskDelay+0x30>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	60bb      	str	r3, [r7, #8]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ea4:	f000 f88a 	bl	8009fbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fe1a 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009eb0:	f000 f892 	bl	8009fd8 <xTaskResumeAll>
 8009eb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d107      	bne.n	8009ecc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <vTaskDelay+0x64>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ecc:	bf00      	nop
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20005ac4 	.word	0x20005ac4
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08a      	sub	sp, #40	; 0x28
 8009ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009eea:	463a      	mov	r2, r7
 8009eec:	1d39      	adds	r1, r7, #4
 8009eee:	f107 0308 	add.w	r3, r7, #8
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fc64 	bl	80087c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	9202      	str	r2, [sp, #8]
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	2300      	movs	r3, #0
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	2300      	movs	r3, #0
 8009f08:	460a      	mov	r2, r1
 8009f0a:	4924      	ldr	r1, [pc, #144]	; (8009f9c <vTaskStartScheduler+0xc0>)
 8009f0c:	4824      	ldr	r0, [pc, #144]	; (8009fa0 <vTaskStartScheduler+0xc4>)
 8009f0e:	f7ff fdf9 	bl	8009b04 <xTaskCreateStatic>
 8009f12:	4603      	mov	r3, r0
 8009f14:	4a23      	ldr	r2, [pc, #140]	; (8009fa4 <vTaskStartScheduler+0xc8>)
 8009f16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f18:	4b22      	ldr	r3, [pc, #136]	; (8009fa4 <vTaskStartScheduler+0xc8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f20:	2301      	movs	r3, #1
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	e001      	b.n	8009f2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d102      	bne.n	8009f36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f30:	f000 fe2c 	bl	800ab8c <xTimerCreateTimerTask>
 8009f34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d11b      	bne.n	8009f74 <vTaskStartScheduler+0x98>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	613b      	str	r3, [r7, #16]
}
 8009f4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f50:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <vTaskStartScheduler+0xcc>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3354      	adds	r3, #84	; 0x54
 8009f56:	4a15      	ldr	r2, [pc, #84]	; (8009fac <vTaskStartScheduler+0xd0>)
 8009f58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f5a:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <vTaskStartScheduler+0xd4>)
 8009f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f62:	4b14      	ldr	r3, [pc, #80]	; (8009fb4 <vTaskStartScheduler+0xd8>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f68:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <vTaskStartScheduler+0xdc>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f6e:	f001 f9db 	bl	800b328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f72:	e00e      	b.n	8009f92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7a:	d10a      	bne.n	8009f92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	60fb      	str	r3, [r7, #12]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <vTaskStartScheduler+0xb4>
}
 8009f92:	bf00      	nop
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	08019b08 	.word	0x08019b08
 8009fa0:	0800a601 	.word	0x0800a601
 8009fa4:	20005ac0 	.word	0x20005ac0
 8009fa8:	200055c8 	.word	0x200055c8
 8009fac:	20000110 	.word	0x20000110
 8009fb0:	20005abc 	.word	0x20005abc
 8009fb4:	20005aa8 	.word	0x20005aa8
 8009fb8:	20005aa0 	.word	0x20005aa0

08009fbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009fc0:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <vTaskSuspendAll+0x18>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	4a03      	ldr	r2, [pc, #12]	; (8009fd4 <vTaskSuspendAll+0x18>)
 8009fc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009fca:	bf00      	nop
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20005ac4 	.word	0x20005ac4

08009fd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009fe6:	4b42      	ldr	r3, [pc, #264]	; (800a0f0 <xTaskResumeAll+0x118>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <xTaskResumeAll+0x2c>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	603b      	str	r3, [r7, #0]
}
 800a000:	bf00      	nop
 800a002:	e7fe      	b.n	800a002 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a004:	f001 fa02 	bl	800b40c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a008:	4b39      	ldr	r3, [pc, #228]	; (800a0f0 <xTaskResumeAll+0x118>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	4a38      	ldr	r2, [pc, #224]	; (800a0f0 <xTaskResumeAll+0x118>)
 800a010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a012:	4b37      	ldr	r3, [pc, #220]	; (800a0f0 <xTaskResumeAll+0x118>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d162      	bne.n	800a0e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a01a:	4b36      	ldr	r3, [pc, #216]	; (800a0f4 <xTaskResumeAll+0x11c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d05e      	beq.n	800a0e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a022:	e02f      	b.n	800a084 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a024:	4b34      	ldr	r3, [pc, #208]	; (800a0f8 <xTaskResumeAll+0x120>)
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3318      	adds	r3, #24
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fc7d 	bl	8008930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3304      	adds	r3, #4
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fc78 	bl	8008930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	4b2d      	ldr	r3, [pc, #180]	; (800a0fc <xTaskResumeAll+0x124>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d903      	bls.n	800a054 <xTaskResumeAll+0x7c>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	4a2a      	ldr	r2, [pc, #168]	; (800a0fc <xTaskResumeAll+0x124>)
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4a27      	ldr	r2, [pc, #156]	; (800a100 <xTaskResumeAll+0x128>)
 800a062:	441a      	add	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f7fe fc05 	bl	800887a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a074:	4b23      	ldr	r3, [pc, #140]	; (800a104 <xTaskResumeAll+0x12c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d302      	bcc.n	800a084 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a07e:	4b22      	ldr	r3, [pc, #136]	; (800a108 <xTaskResumeAll+0x130>)
 800a080:	2201      	movs	r2, #1
 800a082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a084:	4b1c      	ldr	r3, [pc, #112]	; (800a0f8 <xTaskResumeAll+0x120>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1cb      	bne.n	800a024 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a092:	f000 fb6f 	bl	800a774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a096:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <xTaskResumeAll+0x134>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d010      	beq.n	800a0c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0a2:	f000 f857 	bl	800a154 <xTaskIncrementTick>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a0ac:	4b16      	ldr	r3, [pc, #88]	; (800a108 <xTaskResumeAll+0x130>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1f1      	bne.n	800a0a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a0be:	4b13      	ldr	r3, [pc, #76]	; (800a10c <xTaskResumeAll+0x134>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a0c4:	4b10      	ldr	r3, [pc, #64]	; (800a108 <xTaskResumeAll+0x130>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d009      	beq.n	800a0e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a0d0:	4b0f      	ldr	r3, [pc, #60]	; (800a110 <xTaskResumeAll+0x138>)
 800a0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d6:	601a      	str	r2, [r3, #0]
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0e0:	f001 f9c4 	bl	800b46c <vPortExitCritical>

	return xAlreadyYielded;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20005ac4 	.word	0x20005ac4
 800a0f4:	20005a9c 	.word	0x20005a9c
 800a0f8:	20005a5c 	.word	0x20005a5c
 800a0fc:	20005aa4 	.word	0x20005aa4
 800a100:	200055cc 	.word	0x200055cc
 800a104:	200055c8 	.word	0x200055c8
 800a108:	20005ab0 	.word	0x20005ab0
 800a10c:	20005aac 	.word	0x20005aac
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a11a:	4b04      	ldr	r3, [pc, #16]	; (800a12c <xTaskGetTickCount+0x18>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a120:	687b      	ldr	r3, [r7, #4]
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	bc80      	pop	{r7}
 800a12a:	4770      	bx	lr
 800a12c:	20005aa0 	.word	0x20005aa0

0800a130 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a136:	f001 fa2b 	bl	800b590 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a13a:	2300      	movs	r3, #0
 800a13c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a13e:	4b04      	ldr	r3, [pc, #16]	; (800a150 <xTaskGetTickCountFromISR+0x20>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a144:	683b      	ldr	r3, [r7, #0]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20005aa0 	.word	0x20005aa0

0800a154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a15e:	4b4f      	ldr	r3, [pc, #316]	; (800a29c <xTaskIncrementTick+0x148>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f040 808f 	bne.w	800a286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a168:	4b4d      	ldr	r3, [pc, #308]	; (800a2a0 <xTaskIncrementTick+0x14c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a170:	4a4b      	ldr	r2, [pc, #300]	; (800a2a0 <xTaskIncrementTick+0x14c>)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d120      	bne.n	800a1be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a17c:	4b49      	ldr	r3, [pc, #292]	; (800a2a4 <xTaskIncrementTick+0x150>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <xTaskIncrementTick+0x48>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	603b      	str	r3, [r7, #0]
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <xTaskIncrementTick+0x46>
 800a19c:	4b41      	ldr	r3, [pc, #260]	; (800a2a4 <xTaskIncrementTick+0x150>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	4b41      	ldr	r3, [pc, #260]	; (800a2a8 <xTaskIncrementTick+0x154>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a3f      	ldr	r2, [pc, #252]	; (800a2a4 <xTaskIncrementTick+0x150>)
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	4a3f      	ldr	r2, [pc, #252]	; (800a2a8 <xTaskIncrementTick+0x154>)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	4b3e      	ldr	r3, [pc, #248]	; (800a2ac <xTaskIncrementTick+0x158>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	4a3d      	ldr	r2, [pc, #244]	; (800a2ac <xTaskIncrementTick+0x158>)
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	f000 fadb 	bl	800a774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1be:	4b3c      	ldr	r3, [pc, #240]	; (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d349      	bcc.n	800a25c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1c8:	4b36      	ldr	r3, [pc, #216]	; (800a2a4 <xTaskIncrementTick+0x150>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d104      	bne.n	800a1dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d2:	4b37      	ldr	r3, [pc, #220]	; (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d8:	601a      	str	r2, [r3, #0]
					break;
 800a1da:	e03f      	b.n	800a25c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1dc:	4b31      	ldr	r3, [pc, #196]	; (800a2a4 <xTaskIncrementTick+0x150>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d203      	bcs.n	800a1fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1f4:	4a2e      	ldr	r2, [pc, #184]	; (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a1fa:	e02f      	b.n	800a25c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe fb95 	bl	8008930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	3318      	adds	r3, #24
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fb8c 	bl	8008930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21c:	4b25      	ldr	r3, [pc, #148]	; (800a2b4 <xTaskIncrementTick+0x160>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d903      	bls.n	800a22c <xTaskIncrementTick+0xd8>
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	4a22      	ldr	r2, [pc, #136]	; (800a2b4 <xTaskIncrementTick+0x160>)
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4a1f      	ldr	r2, [pc, #124]	; (800a2b8 <xTaskIncrementTick+0x164>)
 800a23a:	441a      	add	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f7fe fb19 	bl	800887a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24c:	4b1b      	ldr	r3, [pc, #108]	; (800a2bc <xTaskIncrementTick+0x168>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a252:	429a      	cmp	r2, r3
 800a254:	d3b8      	bcc.n	800a1c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a256:	2301      	movs	r3, #1
 800a258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a25a:	e7b5      	b.n	800a1c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a25c:	4b17      	ldr	r3, [pc, #92]	; (800a2bc <xTaskIncrementTick+0x168>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a262:	4915      	ldr	r1, [pc, #84]	; (800a2b8 <xTaskIncrementTick+0x164>)
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	440b      	add	r3, r1
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d901      	bls.n	800a278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a274:	2301      	movs	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a278:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <xTaskIncrementTick+0x16c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	e004      	b.n	800a290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a286:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <xTaskIncrementTick+0x170>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	4a0d      	ldr	r2, [pc, #52]	; (800a2c4 <xTaskIncrementTick+0x170>)
 800a28e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a290:	697b      	ldr	r3, [r7, #20]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20005ac4 	.word	0x20005ac4
 800a2a0:	20005aa0 	.word	0x20005aa0
 800a2a4:	20005a54 	.word	0x20005a54
 800a2a8:	20005a58 	.word	0x20005a58
 800a2ac:	20005ab4 	.word	0x20005ab4
 800a2b0:	20005abc 	.word	0x20005abc
 800a2b4:	20005aa4 	.word	0x20005aa4
 800a2b8:	200055cc 	.word	0x200055cc
 800a2bc:	200055c8 	.word	0x200055c8
 800a2c0:	20005ab0 	.word	0x20005ab0
 800a2c4:	20005aac 	.word	0x20005aac

0800a2c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2ce:	4b2a      	ldr	r3, [pc, #168]	; (800a378 <vTaskSwitchContext+0xb0>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2d6:	4b29      	ldr	r3, [pc, #164]	; (800a37c <vTaskSwitchContext+0xb4>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2dc:	e046      	b.n	800a36c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a2de:	4b27      	ldr	r3, [pc, #156]	; (800a37c <vTaskSwitchContext+0xb4>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e4:	4b26      	ldr	r3, [pc, #152]	; (800a380 <vTaskSwitchContext+0xb8>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]
 800a2ea:	e010      	b.n	800a30e <vTaskSwitchContext+0x46>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <vTaskSwitchContext+0x40>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	607b      	str	r3, [r7, #4]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <vTaskSwitchContext+0x3e>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	60fb      	str	r3, [r7, #12]
 800a30e:	491d      	ldr	r1, [pc, #116]	; (800a384 <vTaskSwitchContext+0xbc>)
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	440b      	add	r3, r1
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0e4      	beq.n	800a2ec <vTaskSwitchContext+0x24>
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4a15      	ldr	r2, [pc, #84]	; (800a384 <vTaskSwitchContext+0xbc>)
 800a32e:	4413      	add	r3, r2
 800a330:	60bb      	str	r3, [r7, #8]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	605a      	str	r2, [r3, #4]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	3308      	adds	r3, #8
 800a344:	429a      	cmp	r2, r3
 800a346:	d104      	bne.n	800a352 <vTaskSwitchContext+0x8a>
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	605a      	str	r2, [r3, #4]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	4a0b      	ldr	r2, [pc, #44]	; (800a388 <vTaskSwitchContext+0xc0>)
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	4a08      	ldr	r2, [pc, #32]	; (800a380 <vTaskSwitchContext+0xb8>)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a362:	4b09      	ldr	r3, [pc, #36]	; (800a388 <vTaskSwitchContext+0xc0>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3354      	adds	r3, #84	; 0x54
 800a368:	4a08      	ldr	r2, [pc, #32]	; (800a38c <vTaskSwitchContext+0xc4>)
 800a36a:	6013      	str	r3, [r2, #0]
}
 800a36c:	bf00      	nop
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	bc80      	pop	{r7}
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	20005ac4 	.word	0x20005ac4
 800a37c:	20005ab0 	.word	0x20005ab0
 800a380:	20005aa4 	.word	0x20005aa4
 800a384:	200055cc 	.word	0x200055cc
 800a388:	200055c8 	.word	0x200055c8
 800a38c:	20000110 	.word	0x20000110

0800a390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	60fb      	str	r3, [r7, #12]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <vTaskPlaceOnEventList+0x44>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3318      	adds	r3, #24
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7fe fa7e 	bl	80088c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	6838      	ldr	r0, [r7, #0]
 800a3c8:	f000 fb8c 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
}
 800a3cc:	bf00      	nop
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	200055c8 	.word	0x200055c8

0800a3d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10a      	bne.n	800a400 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	617b      	str	r3, [r7, #20]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <vTaskPlaceOnEventListRestricted+0x54>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3318      	adds	r3, #24
 800a406:	4619      	mov	r1, r3
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f7fe fa36 	bl	800887a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a414:	f04f 33ff 	mov.w	r3, #4294967295
 800a418:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	68b8      	ldr	r0, [r7, #8]
 800a41e:	f000 fb61 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
	}
 800a422:	bf00      	nop
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	200055c8 	.word	0x200055c8

0800a430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60fb      	str	r3, [r7, #12]
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	3318      	adds	r3, #24
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe fa65 	bl	8008930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a466:	4b1e      	ldr	r3, [pc, #120]	; (800a4e0 <xTaskRemoveFromEventList+0xb0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d11d      	bne.n	800a4aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	3304      	adds	r3, #4
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fa5c 	bl	8008930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47c:	4b19      	ldr	r3, [pc, #100]	; (800a4e4 <xTaskRemoveFromEventList+0xb4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	429a      	cmp	r2, r3
 800a482:	d903      	bls.n	800a48c <xTaskRemoveFromEventList+0x5c>
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	4a16      	ldr	r2, [pc, #88]	; (800a4e4 <xTaskRemoveFromEventList+0xb4>)
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a490:	4613      	mov	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4a13      	ldr	r2, [pc, #76]	; (800a4e8 <xTaskRemoveFromEventList+0xb8>)
 800a49a:	441a      	add	r2, r3
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f7fe f9e9 	bl	800887a <vListInsertEnd>
 800a4a8:	e005      	b.n	800a4b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	3318      	adds	r3, #24
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	480e      	ldr	r0, [pc, #56]	; (800a4ec <xTaskRemoveFromEventList+0xbc>)
 800a4b2:	f7fe f9e2 	bl	800887a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ba:	4b0d      	ldr	r3, [pc, #52]	; (800a4f0 <xTaskRemoveFromEventList+0xc0>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d905      	bls.n	800a4d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <xTaskRemoveFromEventList+0xc4>)
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	e001      	b.n	800a4d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4d4:	697b      	ldr	r3, [r7, #20]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20005ac4 	.word	0x20005ac4
 800a4e4:	20005aa4 	.word	0x20005aa4
 800a4e8:	200055cc 	.word	0x200055cc
 800a4ec:	20005a5c 	.word	0x20005a5c
 800a4f0:	200055c8 	.word	0x200055c8
 800a4f4:	20005ab0 	.word	0x20005ab0

0800a4f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <vTaskInternalSetTimeOutState+0x24>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a508:	4b05      	ldr	r3, [pc, #20]	; (800a520 <vTaskInternalSetTimeOutState+0x28>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	605a      	str	r2, [r3, #4]
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	bc80      	pop	{r7}
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20005ab4 	.word	0x20005ab4
 800a520:	20005aa0 	.word	0x20005aa0

0800a524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10a      	bne.n	800a54a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	613b      	str	r3, [r7, #16]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10a      	bne.n	800a566 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	60fb      	str	r3, [r7, #12]
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a566:	f000 ff51 	bl	800b40c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a56a:	4b1d      	ldr	r3, [pc, #116]	; (800a5e0 <xTaskCheckForTimeOut+0xbc>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a582:	d102      	bne.n	800a58a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a584:	2300      	movs	r3, #0
 800a586:	61fb      	str	r3, [r7, #28]
 800a588:	e023      	b.n	800a5d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	4b15      	ldr	r3, [pc, #84]	; (800a5e4 <xTaskCheckForTimeOut+0xc0>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	429a      	cmp	r2, r3
 800a594:	d007      	beq.n	800a5a6 <xTaskCheckForTimeOut+0x82>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d302      	bcc.n	800a5a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	e015      	b.n	800a5d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d20b      	bcs.n	800a5c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	1ad2      	subs	r2, r2, r3
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff ff9b 	bl	800a4f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61fb      	str	r3, [r7, #28]
 800a5c6:	e004      	b.n	800a5d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5d2:	f000 ff4b 	bl	800b46c <vPortExitCritical>

	return xReturn;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3720      	adds	r7, #32
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20005aa0 	.word	0x20005aa0
 800a5e4:	20005ab4 	.word	0x20005ab4

0800a5e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5ec:	4b03      	ldr	r3, [pc, #12]	; (800a5fc <vTaskMissedYield+0x14>)
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	601a      	str	r2, [r3, #0]
}
 800a5f2:	bf00      	nop
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bc80      	pop	{r7}
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20005ab0 	.word	0x20005ab0

0800a600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a608:	f000 f852 	bl	800a6b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a60c:	4b06      	ldr	r3, [pc, #24]	; (800a628 <prvIdleTask+0x28>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d9f9      	bls.n	800a608 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a614:	4b05      	ldr	r3, [pc, #20]	; (800a62c <prvIdleTask+0x2c>)
 800a616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a624:	e7f0      	b.n	800a608 <prvIdleTask+0x8>
 800a626:	bf00      	nop
 800a628:	200055cc 	.word	0x200055cc
 800a62c:	e000ed04 	.word	0xe000ed04

0800a630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a636:	2300      	movs	r3, #0
 800a638:	607b      	str	r3, [r7, #4]
 800a63a:	e00c      	b.n	800a656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4a12      	ldr	r2, [pc, #72]	; (800a690 <prvInitialiseTaskLists+0x60>)
 800a648:	4413      	add	r3, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe f8ea 	bl	8008824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	3301      	adds	r3, #1
 800a654:	607b      	str	r3, [r7, #4]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b37      	cmp	r3, #55	; 0x37
 800a65a:	d9ef      	bls.n	800a63c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a65c:	480d      	ldr	r0, [pc, #52]	; (800a694 <prvInitialiseTaskLists+0x64>)
 800a65e:	f7fe f8e1 	bl	8008824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a662:	480d      	ldr	r0, [pc, #52]	; (800a698 <prvInitialiseTaskLists+0x68>)
 800a664:	f7fe f8de 	bl	8008824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a668:	480c      	ldr	r0, [pc, #48]	; (800a69c <prvInitialiseTaskLists+0x6c>)
 800a66a:	f7fe f8db 	bl	8008824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a66e:	480c      	ldr	r0, [pc, #48]	; (800a6a0 <prvInitialiseTaskLists+0x70>)
 800a670:	f7fe f8d8 	bl	8008824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a674:	480b      	ldr	r0, [pc, #44]	; (800a6a4 <prvInitialiseTaskLists+0x74>)
 800a676:	f7fe f8d5 	bl	8008824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a67a:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <prvInitialiseTaskLists+0x78>)
 800a67c:	4a05      	ldr	r2, [pc, #20]	; (800a694 <prvInitialiseTaskLists+0x64>)
 800a67e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <prvInitialiseTaskLists+0x7c>)
 800a682:	4a05      	ldr	r2, [pc, #20]	; (800a698 <prvInitialiseTaskLists+0x68>)
 800a684:	601a      	str	r2, [r3, #0]
}
 800a686:	bf00      	nop
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	200055cc 	.word	0x200055cc
 800a694:	20005a2c 	.word	0x20005a2c
 800a698:	20005a40 	.word	0x20005a40
 800a69c:	20005a5c 	.word	0x20005a5c
 800a6a0:	20005a70 	.word	0x20005a70
 800a6a4:	20005a88 	.word	0x20005a88
 800a6a8:	20005a54 	.word	0x20005a54
 800a6ac:	20005a58 	.word	0x20005a58

0800a6b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6b6:	e019      	b.n	800a6ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6b8:	f000 fea8 	bl	800b40c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6bc:	4b10      	ldr	r3, [pc, #64]	; (800a700 <prvCheckTasksWaitingTermination+0x50>)
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fe f931 	bl	8008930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6ce:	4b0d      	ldr	r3, [pc, #52]	; (800a704 <prvCheckTasksWaitingTermination+0x54>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	4a0b      	ldr	r2, [pc, #44]	; (800a704 <prvCheckTasksWaitingTermination+0x54>)
 800a6d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6d8:	4b0b      	ldr	r3, [pc, #44]	; (800a708 <prvCheckTasksWaitingTermination+0x58>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	4a0a      	ldr	r2, [pc, #40]	; (800a708 <prvCheckTasksWaitingTermination+0x58>)
 800a6e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6e2:	f000 fec3 	bl	800b46c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f810 	bl	800a70c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <prvCheckTasksWaitingTermination+0x58>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e1      	bne.n	800a6b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20005a70 	.word	0x20005a70
 800a704:	20005a9c 	.word	0x20005a9c
 800a708:	20005a84 	.word	0x20005a84

0800a70c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3354      	adds	r3, #84	; 0x54
 800a718:	4618      	mov	r0, r3
 800a71a:	f00e fc65 	bl	8018fe8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a724:	2b00      	cmp	r3, #0
 800a726:	d108      	bne.n	800a73a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	4618      	mov	r0, r3
 800a72e:	f001 f839 	bl	800b7a4 <vPortFree>
				vPortFree( pxTCB );
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 f836 	bl	800b7a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a738:	e018      	b.n	800a76c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a740:	2b01      	cmp	r3, #1
 800a742:	d103      	bne.n	800a74c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f001 f82d 	bl	800b7a4 <vPortFree>
	}
 800a74a:	e00f      	b.n	800a76c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a752:	2b02      	cmp	r3, #2
 800a754:	d00a      	beq.n	800a76c <prvDeleteTCB+0x60>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	60fb      	str	r3, [r7, #12]
}
 800a768:	bf00      	nop
 800a76a:	e7fe      	b.n	800a76a <prvDeleteTCB+0x5e>
	}
 800a76c:	bf00      	nop
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a77a:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <prvResetNextTaskUnblockTime+0x38>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d104      	bne.n	800a78e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a784:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a786:	f04f 32ff 	mov.w	r2, #4294967295
 800a78a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a78c:	e008      	b.n	800a7a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a78e:	4b07      	ldr	r3, [pc, #28]	; (800a7ac <prvResetNextTaskUnblockTime+0x38>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	4a04      	ldr	r2, [pc, #16]	; (800a7b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a79e:	6013      	str	r3, [r2, #0]
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	20005a54 	.word	0x20005a54
 800a7b0:	20005abc 	.word	0x20005abc

0800a7b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a7ba:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <xTaskGetCurrentTaskHandle+0x18>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a7c0:	687b      	ldr	r3, [r7, #4]
	}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bc80      	pop	{r7}
 800a7ca:	4770      	bx	lr
 800a7cc:	200055c8 	.word	0x200055c8

0800a7d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <xTaskGetSchedulerState+0x34>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d102      	bne.n	800a7e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	e008      	b.n	800a7f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7e4:	4b08      	ldr	r3, [pc, #32]	; (800a808 <xTaskGetSchedulerState+0x38>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	607b      	str	r3, [r7, #4]
 800a7f0:	e001      	b.n	800a7f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7f6:	687b      	ldr	r3, [r7, #4]
	}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bc80      	pop	{r7}
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20005aa8 	.word	0x20005aa8
 800a808:	20005ac4 	.word	0x20005ac4

0800a80c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a818:	2300      	movs	r3, #0
 800a81a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d051      	beq.n	800a8c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a826:	4b2a      	ldr	r3, [pc, #168]	; (800a8d0 <xTaskPriorityInherit+0xc4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d241      	bcs.n	800a8b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	db06      	blt.n	800a846 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a838:	4b25      	ldr	r3, [pc, #148]	; (800a8d0 <xTaskPriorityInherit+0xc4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	6959      	ldr	r1, [r3, #20]
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84e:	4613      	mov	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4a1f      	ldr	r2, [pc, #124]	; (800a8d4 <xTaskPriorityInherit+0xc8>)
 800a858:	4413      	add	r3, r2
 800a85a:	4299      	cmp	r1, r3
 800a85c:	d122      	bne.n	800a8a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	3304      	adds	r3, #4
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe f864 	bl	8008930 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a868:	4b19      	ldr	r3, [pc, #100]	; (800a8d0 <xTaskPriorityInherit+0xc4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a876:	4b18      	ldr	r3, [pc, #96]	; (800a8d8 <xTaskPriorityInherit+0xcc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d903      	bls.n	800a886 <xTaskPriorityInherit+0x7a>
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a882:	4a15      	ldr	r2, [pc, #84]	; (800a8d8 <xTaskPriorityInherit+0xcc>)
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88a:	4613      	mov	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4413      	add	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4a10      	ldr	r2, [pc, #64]	; (800a8d4 <xTaskPriorityInherit+0xc8>)
 800a894:	441a      	add	r2, r3
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	3304      	adds	r3, #4
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f7fd ffec 	bl	800887a <vListInsertEnd>
 800a8a2:	e004      	b.n	800a8ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <xTaskPriorityInherit+0xc4>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	e008      	b.n	800a8c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <xTaskPriorityInherit+0xc4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d201      	bcs.n	800a8c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	200055c8 	.word	0x200055c8
 800a8d4:	200055cc 	.word	0x200055cc
 800a8d8:	20005aa4 	.word	0x20005aa4

0800a8dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d056      	beq.n	800a9a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8f2:	4b2e      	ldr	r3, [pc, #184]	; (800a9ac <xTaskPriorityDisinherit+0xd0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d00a      	beq.n	800a912 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	60fb      	str	r3, [r7, #12]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10a      	bne.n	800a930 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	60bb      	str	r3, [r7, #8]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a934:	1e5a      	subs	r2, r3, #1
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a942:	429a      	cmp	r2, r3
 800a944:	d02c      	beq.n	800a9a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d128      	bne.n	800a9a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	3304      	adds	r3, #4
 800a952:	4618      	mov	r0, r3
 800a954:	f7fd ffec 	bl	8008930 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a970:	4b0f      	ldr	r3, [pc, #60]	; (800a9b0 <xTaskPriorityDisinherit+0xd4>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d903      	bls.n	800a980 <xTaskPriorityDisinherit+0xa4>
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	4a0c      	ldr	r2, [pc, #48]	; (800a9b0 <xTaskPriorityDisinherit+0xd4>)
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a984:	4613      	mov	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4a09      	ldr	r2, [pc, #36]	; (800a9b4 <xTaskPriorityDisinherit+0xd8>)
 800a98e:	441a      	add	r2, r3
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	3304      	adds	r3, #4
 800a994:	4619      	mov	r1, r3
 800a996:	4610      	mov	r0, r2
 800a998:	f7fd ff6f 	bl	800887a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a99c:	2301      	movs	r3, #1
 800a99e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9a0:	697b      	ldr	r3, [r7, #20]
	}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	200055c8 	.word	0x200055c8
 800a9b0:	20005aa4 	.word	0x20005aa4
 800a9b4:	200055cc 	.word	0x200055cc

0800a9b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d06a      	beq.n	800aaa6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	60fb      	str	r3, [r7, #12]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d902      	bls.n	800a9fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	e002      	b.n	800aa04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d04b      	beq.n	800aaa6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d146      	bne.n	800aaa6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aa18:	4b25      	ldr	r3, [pc, #148]	; (800aab0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	69ba      	ldr	r2, [r7, #24]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d10a      	bne.n	800aa38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	60bb      	str	r3, [r7, #8]
}
 800aa34:	bf00      	nop
 800aa36:	e7fe      	b.n	800aa36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	69fa      	ldr	r2, [r7, #28]
 800aa42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	db04      	blt.n	800aa56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	6959      	ldr	r1, [r3, #20]
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4a13      	ldr	r2, [pc, #76]	; (800aab4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aa66:	4413      	add	r3, r2
 800aa68:	4299      	cmp	r1, r3
 800aa6a:	d11c      	bne.n	800aaa6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fd ff5d 	bl	8008930 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7a:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d903      	bls.n	800aa8a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa86:	4a0c      	ldr	r2, [pc, #48]	; (800aab8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4a07      	ldr	r2, [pc, #28]	; (800aab4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aa98:	441a      	add	r2, r3
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f7fd feea 	bl	800887a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aaa6:	bf00      	nop
 800aaa8:	3720      	adds	r7, #32
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	200055c8 	.word	0x200055c8
 800aab4:	200055cc 	.word	0x200055cc
 800aab8:	20005aa4 	.word	0x20005aa4

0800aabc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aac0:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d004      	beq.n	800aad2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aac8:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aace:	3201      	adds	r2, #1
 800aad0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800aad2:	4b03      	ldr	r3, [pc, #12]	; (800aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aad4:	681b      	ldr	r3, [r3, #0]
	}
 800aad6:	4618      	mov	r0, r3
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	200055c8 	.word	0x200055c8

0800aae4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aaee:	4b21      	ldr	r3, [pc, #132]	; (800ab74 <prvAddCurrentTaskToDelayedList+0x90>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaf4:	4b20      	ldr	r3, [pc, #128]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fd ff18 	bl	8008930 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab06:	d10a      	bne.n	800ab1e <prvAddCurrentTaskToDelayedList+0x3a>
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d007      	beq.n	800ab1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab0e:	4b1a      	ldr	r3, [pc, #104]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4619      	mov	r1, r3
 800ab16:	4819      	ldr	r0, [pc, #100]	; (800ab7c <prvAddCurrentTaskToDelayedList+0x98>)
 800ab18:	f7fd feaf 	bl	800887a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab1c:	e026      	b.n	800ab6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4413      	add	r3, r2
 800ab24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d209      	bcs.n	800ab4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab36:	4b12      	ldr	r3, [pc, #72]	; (800ab80 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	4619      	mov	r1, r3
 800ab42:	4610      	mov	r0, r2
 800ab44:	f7fd febc 	bl	80088c0 <vListInsert>
}
 800ab48:	e010      	b.n	800ab6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab4a:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f7fd feb2 	bl	80088c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d202      	bcs.n	800ab6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab66:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6013      	str	r3, [r2, #0]
}
 800ab6c:	bf00      	nop
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	20005aa0 	.word	0x20005aa0
 800ab78:	200055c8 	.word	0x200055c8
 800ab7c:	20005a88 	.word	0x20005a88
 800ab80:	20005a58 	.word	0x20005a58
 800ab84:	20005a54 	.word	0x20005a54
 800ab88:	20005abc 	.word	0x20005abc

0800ab8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	; 0x28
 800ab90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab96:	f000 fb05 	bl	800b1a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab9a:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <xTimerCreateTimerTask+0x80>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d021      	beq.n	800abe6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800abaa:	1d3a      	adds	r2, r7, #4
 800abac:	f107 0108 	add.w	r1, r7, #8
 800abb0:	f107 030c 	add.w	r3, r7, #12
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fd fe1b 	bl	80087f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800abba:	6879      	ldr	r1, [r7, #4]
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	9202      	str	r2, [sp, #8]
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	2302      	movs	r3, #2
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	2300      	movs	r3, #0
 800abca:	460a      	mov	r2, r1
 800abcc:	4910      	ldr	r1, [pc, #64]	; (800ac10 <xTimerCreateTimerTask+0x84>)
 800abce:	4811      	ldr	r0, [pc, #68]	; (800ac14 <xTimerCreateTimerTask+0x88>)
 800abd0:	f7fe ff98 	bl	8009b04 <xTaskCreateStatic>
 800abd4:	4603      	mov	r3, r0
 800abd6:	4a10      	ldr	r2, [pc, #64]	; (800ac18 <xTimerCreateTimerTask+0x8c>)
 800abd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <xTimerCreateTimerTask+0x8c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800abe2:	2301      	movs	r3, #1
 800abe4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	613b      	str	r3, [r7, #16]
}
 800abfe:	bf00      	nop
 800ac00:	e7fe      	b.n	800ac00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac02:	697b      	ldr	r3, [r7, #20]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	20005af8 	.word	0x20005af8
 800ac10:	08019b10 	.word	0x08019b10
 800ac14:	0800ad51 	.word	0x0800ad51
 800ac18:	20005afc 	.word	0x20005afc

0800ac1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08a      	sub	sp, #40	; 0x28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10a      	bne.n	800ac4a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	623b      	str	r3, [r7, #32]
}
 800ac46:	bf00      	nop
 800ac48:	e7fe      	b.n	800ac48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac4a:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <xTimerGenericCommand+0x98>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d02a      	beq.n	800aca8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b05      	cmp	r3, #5
 800ac62:	dc18      	bgt.n	800ac96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac64:	f7ff fdb4 	bl	800a7d0 <xTaskGetSchedulerState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d109      	bne.n	800ac82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac6e:	4b11      	ldr	r3, [pc, #68]	; (800acb4 <xTimerGenericCommand+0x98>)
 800ac70:	6818      	ldr	r0, [r3, #0]
 800ac72:	f107 0110 	add.w	r1, r7, #16
 800ac76:	2300      	movs	r3, #0
 800ac78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac7a:	f7fe f8e1 	bl	8008e40 <xQueueGenericSend>
 800ac7e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac80:	e012      	b.n	800aca8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac82:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <xTimerGenericCommand+0x98>)
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	f107 0110 	add.w	r1, r7, #16
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f7fe f8d7 	bl	8008e40 <xQueueGenericSend>
 800ac92:	6278      	str	r0, [r7, #36]	; 0x24
 800ac94:	e008      	b.n	800aca8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac96:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <xTimerGenericCommand+0x98>)
 800ac98:	6818      	ldr	r0, [r3, #0]
 800ac9a:	f107 0110 	add.w	r1, r7, #16
 800ac9e:	2300      	movs	r3, #0
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	f7fe f9cb 	bl	800903c <xQueueGenericSendFromISR>
 800aca6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3728      	adds	r7, #40	; 0x28
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	20005af8 	.word	0x20005af8

0800acb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af02      	add	r7, sp, #8
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acc2:	4b22      	ldr	r3, [pc, #136]	; (800ad4c <prvProcessExpiredTimer+0x94>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	3304      	adds	r3, #4
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fd fe2d 	bl	8008930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d022      	beq.n	800ad2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	699a      	ldr	r2, [r3, #24]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	18d1      	adds	r1, r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	6978      	ldr	r0, [r7, #20]
 800acf2:	f000 f8cf 	bl	800ae94 <prvInsertTimerInActiveList>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01f      	beq.n	800ad3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acfc:	2300      	movs	r3, #0
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	2300      	movs	r3, #0
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	2100      	movs	r1, #0
 800ad06:	6978      	ldr	r0, [r7, #20]
 800ad08:	f7ff ff88 	bl	800ac1c <xTimerGenericCommand>
 800ad0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d113      	bne.n	800ad3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	60fb      	str	r3, [r7, #12]
}
 800ad26:	bf00      	nop
 800ad28:	e7fe      	b.n	800ad28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad30:	f023 0301 	bic.w	r3, r3, #1
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	6978      	ldr	r0, [r7, #20]
 800ad42:	4798      	blx	r3
}
 800ad44:	bf00      	nop
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	20005af0 	.word	0x20005af0

0800ad50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad58:	f107 0308 	add.w	r3, r7, #8
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 f857 	bl	800ae10 <prvGetNextExpireTime>
 800ad62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	4619      	mov	r1, r3
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 f803 	bl	800ad74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad6e:	f000 f8d3 	bl	800af18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad72:	e7f1      	b.n	800ad58 <prvTimerTask+0x8>

0800ad74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad7e:	f7ff f91d 	bl	8009fbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad82:	f107 0308 	add.w	r3, r7, #8
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 f864 	bl	800ae54 <prvSampleTimeNow>
 800ad8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d130      	bne.n	800adf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10a      	bne.n	800adb0 <prvProcessTimerOrBlockTask+0x3c>
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d806      	bhi.n	800adb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ada2:	f7ff f919 	bl	8009fd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ada6:	68f9      	ldr	r1, [r7, #12]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff ff85 	bl	800acb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800adae:	e024      	b.n	800adfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d008      	beq.n	800adc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800adb6:	4b13      	ldr	r3, [pc, #76]	; (800ae04 <prvProcessTimerOrBlockTask+0x90>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <prvProcessTimerOrBlockTask+0x50>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e000      	b.n	800adc6 <prvProcessTimerOrBlockTask+0x52>
 800adc4:	2300      	movs	r3, #0
 800adc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800adc8:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <prvProcessTimerOrBlockTask+0x94>)
 800adca:	6818      	ldr	r0, [r3, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	4619      	mov	r1, r3
 800add6:	f7fe fe61 	bl	8009a9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800adda:	f7ff f8fd 	bl	8009fd8 <xTaskResumeAll>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ade4:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <prvProcessTimerOrBlockTask+0x98>)
 800ade6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	f3bf 8f6f 	isb	sy
}
 800adf4:	e001      	b.n	800adfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adf6:	f7ff f8ef 	bl	8009fd8 <xTaskResumeAll>
}
 800adfa:	bf00      	nop
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	20005af4 	.word	0x20005af4
 800ae08:	20005af8 	.word	0x20005af8
 800ae0c:	e000ed04 	.word	0xe000ed04

0800ae10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae18:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <prvGetNextExpireTime+0x40>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <prvGetNextExpireTime+0x16>
 800ae22:	2201      	movs	r2, #1
 800ae24:	e000      	b.n	800ae28 <prvGetNextExpireTime+0x18>
 800ae26:	2200      	movs	r2, #0
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d105      	bne.n	800ae40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <prvGetNextExpireTime+0x40>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60fb      	str	r3, [r7, #12]
 800ae3e:	e001      	b.n	800ae44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae44:	68fb      	ldr	r3, [r7, #12]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bc80      	pop	{r7}
 800ae4e:	4770      	bx	lr
 800ae50:	20005af0 	.word	0x20005af0

0800ae54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae5c:	f7ff f95a 	bl	800a114 <xTaskGetTickCount>
 800ae60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae62:	4b0b      	ldr	r3, [pc, #44]	; (800ae90 <prvSampleTimeNow+0x3c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d205      	bcs.n	800ae78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae6c:	f000 f936 	bl	800b0dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	e002      	b.n	800ae7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae7e:	4a04      	ldr	r2, [pc, #16]	; (800ae90 <prvSampleTimeNow+0x3c>)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae84:	68fb      	ldr	r3, [r7, #12]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20005b00 	.word	0x20005b00

0800ae94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d812      	bhi.n	800aee0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d302      	bcc.n	800aece <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aec8:	2301      	movs	r3, #1
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	e01b      	b.n	800af06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aece:	4b10      	ldr	r3, [pc, #64]	; (800af10 <prvInsertTimerInActiveList+0x7c>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3304      	adds	r3, #4
 800aed6:	4619      	mov	r1, r3
 800aed8:	4610      	mov	r0, r2
 800aeda:	f7fd fcf1 	bl	80088c0 <vListInsert>
 800aede:	e012      	b.n	800af06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d206      	bcs.n	800aef6 <prvInsertTimerInActiveList+0x62>
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d302      	bcc.n	800aef6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aef0:	2301      	movs	r3, #1
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e007      	b.n	800af06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aef6:	4b07      	ldr	r3, [pc, #28]	; (800af14 <prvInsertTimerInActiveList+0x80>)
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	3304      	adds	r3, #4
 800aefe:	4619      	mov	r1, r3
 800af00:	4610      	mov	r0, r2
 800af02:	f7fd fcdd 	bl	80088c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af06:	697b      	ldr	r3, [r7, #20]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	20005af4 	.word	0x20005af4
 800af14:	20005af0 	.word	0x20005af0

0800af18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08e      	sub	sp, #56	; 0x38
 800af1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af1e:	e0ca      	b.n	800b0b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	da18      	bge.n	800af58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af26:	1d3b      	adds	r3, r7, #4
 800af28:	3304      	adds	r3, #4
 800af2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	61fb      	str	r3, [r7, #28]
}
 800af44:	bf00      	nop
 800af46:	e7fe      	b.n	800af46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4e:	6850      	ldr	r0, [r2, #4]
 800af50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af52:	6892      	ldr	r2, [r2, #8]
 800af54:	4611      	mov	r1, r2
 800af56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f2c0 80aa 	blt.w	800b0b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d004      	beq.n	800af76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	3304      	adds	r3, #4
 800af70:	4618      	mov	r0, r3
 800af72:	f7fd fcdd 	bl	8008930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af76:	463b      	mov	r3, r7
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff ff6b 	bl	800ae54 <prvSampleTimeNow>
 800af7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b09      	cmp	r3, #9
 800af84:	f200 8097 	bhi.w	800b0b6 <prvProcessReceivedCommands+0x19e>
 800af88:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <prvProcessReceivedCommands+0x78>)
 800af8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8e:	bf00      	nop
 800af90:	0800afb9 	.word	0x0800afb9
 800af94:	0800afb9 	.word	0x0800afb9
 800af98:	0800afb9 	.word	0x0800afb9
 800af9c:	0800b02d 	.word	0x0800b02d
 800afa0:	0800b041 	.word	0x0800b041
 800afa4:	0800b08b 	.word	0x0800b08b
 800afa8:	0800afb9 	.word	0x0800afb9
 800afac:	0800afb9 	.word	0x0800afb9
 800afb0:	0800b02d 	.word	0x0800b02d
 800afb4:	0800b041 	.word	0x0800b041
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afbe:	f043 0301 	orr.w	r3, r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	18d1      	adds	r1, r2, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afd8:	f7ff ff5c 	bl	800ae94 <prvInsertTimerInActiveList>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d069      	beq.n	800b0b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff0:	f003 0304 	and.w	r3, r3, #4
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d05e      	beq.n	800b0b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	441a      	add	r2, r3
 800b000:	2300      	movs	r3, #0
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	2300      	movs	r3, #0
 800b006:	2100      	movs	r1, #0
 800b008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b00a:	f7ff fe07 	bl	800ac1c <xTimerGenericCommand>
 800b00e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d14f      	bne.n	800b0b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	61bb      	str	r3, [r7, #24]
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b032:	f023 0301 	bic.w	r3, r3, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b03e:	e03a      	b.n	800b0b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b046:	f043 0301 	orr.w	r3, r3, #1
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	617b      	str	r3, [r7, #20]
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	699a      	ldr	r2, [r3, #24]
 800b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07c:	18d1      	adds	r1, r2, r3
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b084:	f7ff ff06 	bl	800ae94 <prvInsertTimerInActiveList>
					break;
 800b088:	e015      	b.n	800b0b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	2b00      	cmp	r3, #0
 800b096:	d103      	bne.n	800b0a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b09a:	f000 fb83 	bl	800b7a4 <vPortFree>
 800b09e:	e00a      	b.n	800b0b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a6:	f023 0301 	bic.w	r3, r3, #1
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b0b2:	e000      	b.n	800b0b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b0b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0b6:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <prvProcessReceivedCommands+0x1c0>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	1d39      	adds	r1, r7, #4
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe f8e4 	bl	800928c <xQueueReceive>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f47f af2a 	bne.w	800af20 <prvProcessReceivedCommands+0x8>
	}
}
 800b0cc:	bf00      	nop
 800b0ce:	bf00      	nop
 800b0d0:	3730      	adds	r7, #48	; 0x30
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20005af8 	.word	0x20005af8

0800b0dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0e2:	e048      	b.n	800b176 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0e4:	4b2d      	ldr	r3, [pc, #180]	; (800b19c <prvSwitchTimerLists+0xc0>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ee:	4b2b      	ldr	r3, [pc, #172]	; (800b19c <prvSwitchTimerLists+0xc0>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fd fc17 	bl	8008930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b110:	f003 0304 	and.w	r3, r3, #4
 800b114:	2b00      	cmp	r3, #0
 800b116:	d02e      	beq.n	800b176 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	4413      	add	r3, r2
 800b120:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	429a      	cmp	r2, r3
 800b128:	d90e      	bls.n	800b148 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b136:	4b19      	ldr	r3, [pc, #100]	; (800b19c <prvSwitchTimerLists+0xc0>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3304      	adds	r3, #4
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f7fd fbbd 	bl	80088c0 <vListInsert>
 800b146:	e016      	b.n	800b176 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b148:	2300      	movs	r3, #0
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	2300      	movs	r3, #0
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	2100      	movs	r1, #0
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff fd62 	bl	800ac1c <xTimerGenericCommand>
 800b158:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	603b      	str	r3, [r7, #0]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b176:	4b09      	ldr	r3, [pc, #36]	; (800b19c <prvSwitchTimerLists+0xc0>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1b1      	bne.n	800b0e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b180:	4b06      	ldr	r3, [pc, #24]	; (800b19c <prvSwitchTimerLists+0xc0>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b186:	4b06      	ldr	r3, [pc, #24]	; (800b1a0 <prvSwitchTimerLists+0xc4>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a04      	ldr	r2, [pc, #16]	; (800b19c <prvSwitchTimerLists+0xc0>)
 800b18c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b18e:	4a04      	ldr	r2, [pc, #16]	; (800b1a0 <prvSwitchTimerLists+0xc4>)
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	6013      	str	r3, [r2, #0]
}
 800b194:	bf00      	nop
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	20005af0 	.word	0x20005af0
 800b1a0:	20005af4 	.word	0x20005af4

0800b1a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1aa:	f000 f92f 	bl	800b40c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1ae:	4b15      	ldr	r3, [pc, #84]	; (800b204 <prvCheckForValidListAndQueue+0x60>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d120      	bne.n	800b1f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1b6:	4814      	ldr	r0, [pc, #80]	; (800b208 <prvCheckForValidListAndQueue+0x64>)
 800b1b8:	f7fd fb34 	bl	8008824 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1bc:	4813      	ldr	r0, [pc, #76]	; (800b20c <prvCheckForValidListAndQueue+0x68>)
 800b1be:	f7fd fb31 	bl	8008824 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1c2:	4b13      	ldr	r3, [pc, #76]	; (800b210 <prvCheckForValidListAndQueue+0x6c>)
 800b1c4:	4a10      	ldr	r2, [pc, #64]	; (800b208 <prvCheckForValidListAndQueue+0x64>)
 800b1c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1c8:	4b12      	ldr	r3, [pc, #72]	; (800b214 <prvCheckForValidListAndQueue+0x70>)
 800b1ca:	4a10      	ldr	r2, [pc, #64]	; (800b20c <prvCheckForValidListAndQueue+0x68>)
 800b1cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	4b11      	ldr	r3, [pc, #68]	; (800b218 <prvCheckForValidListAndQueue+0x74>)
 800b1d4:	4a11      	ldr	r2, [pc, #68]	; (800b21c <prvCheckForValidListAndQueue+0x78>)
 800b1d6:	2110      	movs	r1, #16
 800b1d8:	200a      	movs	r0, #10
 800b1da:	f7fd fc3b 	bl	8008a54 <xQueueGenericCreateStatic>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4a08      	ldr	r2, [pc, #32]	; (800b204 <prvCheckForValidListAndQueue+0x60>)
 800b1e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1e4:	4b07      	ldr	r3, [pc, #28]	; (800b204 <prvCheckForValidListAndQueue+0x60>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1ec:	4b05      	ldr	r3, [pc, #20]	; (800b204 <prvCheckForValidListAndQueue+0x60>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	490b      	ldr	r1, [pc, #44]	; (800b220 <prvCheckForValidListAndQueue+0x7c>)
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fc00 	bl	80099f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1f8:	f000 f938 	bl	800b46c <vPortExitCritical>
}
 800b1fc:	bf00      	nop
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20005af8 	.word	0x20005af8
 800b208:	20005ac8 	.word	0x20005ac8
 800b20c:	20005adc 	.word	0x20005adc
 800b210:	20005af0 	.word	0x20005af0
 800b214:	20005af4 	.word	0x20005af4
 800b218:	20005ba4 	.word	0x20005ba4
 800b21c:	20005b04 	.word	0x20005b04
 800b220:	08019b18 	.word	0x08019b18

0800b224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3b04      	subs	r3, #4
 800b234:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3b04      	subs	r3, #4
 800b242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f023 0201 	bic.w	r2, r3, #1
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3b04      	subs	r3, #4
 800b252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b254:	4a08      	ldr	r2, [pc, #32]	; (800b278 <pxPortInitialiseStack+0x54>)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3b14      	subs	r3, #20
 800b25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3b20      	subs	r3, #32
 800b26a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b26c:	68fb      	ldr	r3, [r7, #12]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	bc80      	pop	{r7}
 800b276:	4770      	bx	lr
 800b278:	0800b27d 	.word	0x0800b27d

0800b27c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b282:	2300      	movs	r3, #0
 800b284:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b286:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <prvTaskExitError+0x54>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28e:	d00a      	beq.n	800b2a6 <prvTaskExitError+0x2a>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	60fb      	str	r3, [r7, #12]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <prvTaskExitError+0x28>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	60bb      	str	r3, [r7, #8]
}
 800b2b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2ba:	bf00      	nop
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0fc      	beq.n	800b2bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2c2:	bf00      	nop
 800b2c4:	bf00      	nop
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bc80      	pop	{r7}
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	20000098 	.word	0x20000098
	...

0800b2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2e0:	4b07      	ldr	r3, [pc, #28]	; (800b300 <pxCurrentTCBConst2>)
 800b2e2:	6819      	ldr	r1, [r3, #0]
 800b2e4:	6808      	ldr	r0, [r1, #0]
 800b2e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b2ea:	f380 8809 	msr	PSP, r0
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f04f 0000 	mov.w	r0, #0
 800b2f6:	f380 8811 	msr	BASEPRI, r0
 800b2fa:	f04e 0e0d 	orr.w	lr, lr, #13
 800b2fe:	4770      	bx	lr

0800b300 <pxCurrentTCBConst2>:
 800b300:	200055c8 	.word	0x200055c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop

0800b308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b308:	4806      	ldr	r0, [pc, #24]	; (800b324 <prvPortStartFirstTask+0x1c>)
 800b30a:	6800      	ldr	r0, [r0, #0]
 800b30c:	6800      	ldr	r0, [r0, #0]
 800b30e:	f380 8808 	msr	MSP, r0
 800b312:	b662      	cpsie	i
 800b314:	b661      	cpsie	f
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	df00      	svc	0
 800b320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b322:	bf00      	nop
 800b324:	e000ed08 	.word	0xe000ed08

0800b328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b32e:	4b32      	ldr	r3, [pc, #200]	; (800b3f8 <xPortStartScheduler+0xd0>)
 800b330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	b2db      	uxtb	r3, r3
 800b338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	22ff      	movs	r2, #255	; 0xff
 800b33e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	b2db      	uxtb	r3, r3
 800b346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b348:	78fb      	ldrb	r3, [r7, #3]
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b350:	b2da      	uxtb	r2, r3
 800b352:	4b2a      	ldr	r3, [pc, #168]	; (800b3fc <xPortStartScheduler+0xd4>)
 800b354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b356:	4b2a      	ldr	r3, [pc, #168]	; (800b400 <xPortStartScheduler+0xd8>)
 800b358:	2207      	movs	r2, #7
 800b35a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b35c:	e009      	b.n	800b372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b35e:	4b28      	ldr	r3, [pc, #160]	; (800b400 <xPortStartScheduler+0xd8>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3b01      	subs	r3, #1
 800b364:	4a26      	ldr	r2, [pc, #152]	; (800b400 <xPortStartScheduler+0xd8>)
 800b366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b368:	78fb      	ldrb	r3, [r7, #3]
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b372:	78fb      	ldrb	r3, [r7, #3]
 800b374:	b2db      	uxtb	r3, r3
 800b376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37a:	2b80      	cmp	r3, #128	; 0x80
 800b37c:	d0ef      	beq.n	800b35e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b37e:	4b20      	ldr	r3, [pc, #128]	; (800b400 <xPortStartScheduler+0xd8>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f1c3 0307 	rsb	r3, r3, #7
 800b386:	2b04      	cmp	r3, #4
 800b388:	d00a      	beq.n	800b3a0 <xPortStartScheduler+0x78>
	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	60bb      	str	r3, [r7, #8]
}
 800b39c:	bf00      	nop
 800b39e:	e7fe      	b.n	800b39e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3a0:	4b17      	ldr	r3, [pc, #92]	; (800b400 <xPortStartScheduler+0xd8>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	021b      	lsls	r3, r3, #8
 800b3a6:	4a16      	ldr	r2, [pc, #88]	; (800b400 <xPortStartScheduler+0xd8>)
 800b3a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3aa:	4b15      	ldr	r3, [pc, #84]	; (800b400 <xPortStartScheduler+0xd8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3b2:	4a13      	ldr	r2, [pc, #76]	; (800b400 <xPortStartScheduler+0xd8>)
 800b3b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3be:	4b11      	ldr	r3, [pc, #68]	; (800b404 <xPortStartScheduler+0xdc>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a10      	ldr	r2, [pc, #64]	; (800b404 <xPortStartScheduler+0xdc>)
 800b3c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3ca:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <xPortStartScheduler+0xdc>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a0d      	ldr	r2, [pc, #52]	; (800b404 <xPortStartScheduler+0xdc>)
 800b3d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3d6:	f000 f8b9 	bl	800b54c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3da:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <xPortStartScheduler+0xe0>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3e0:	f7ff ff92 	bl	800b308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3e4:	f7fe ff70 	bl	800a2c8 <vTaskSwitchContext>
	prvTaskExitError();
 800b3e8:	f7ff ff48 	bl	800b27c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	e000e400 	.word	0xe000e400
 800b3fc:	20005bf4 	.word	0x20005bf4
 800b400:	20005bf8 	.word	0x20005bf8
 800b404:	e000ed20 	.word	0xe000ed20
 800b408:	20000098 	.word	0x20000098

0800b40c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b416:	f383 8811 	msr	BASEPRI, r3
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	607b      	str	r3, [r7, #4]
}
 800b424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <vPortEnterCritical+0x58>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3301      	adds	r3, #1
 800b42c:	4a0d      	ldr	r2, [pc, #52]	; (800b464 <vPortEnterCritical+0x58>)
 800b42e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b430:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <vPortEnterCritical+0x58>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d10f      	bne.n	800b458 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b438:	4b0b      	ldr	r3, [pc, #44]	; (800b468 <vPortEnterCritical+0x5c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <vPortEnterCritical+0x4c>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	603b      	str	r3, [r7, #0]
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <vPortEnterCritical+0x4a>
	}
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bc80      	pop	{r7}
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	20000098 	.word	0x20000098
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b472:	4b11      	ldr	r3, [pc, #68]	; (800b4b8 <vPortExitCritical+0x4c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <vPortExitCritical+0x24>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	607b      	str	r3, [r7, #4]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b490:	4b09      	ldr	r3, [pc, #36]	; (800b4b8 <vPortExitCritical+0x4c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3b01      	subs	r3, #1
 800b496:	4a08      	ldr	r2, [pc, #32]	; (800b4b8 <vPortExitCritical+0x4c>)
 800b498:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <vPortExitCritical+0x4c>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d105      	bne.n	800b4ae <vPortExitCritical+0x42>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	f383 8811 	msr	BASEPRI, r3
}
 800b4ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4ae:	bf00      	nop
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bc80      	pop	{r7}
 800b4b6:	4770      	bx	lr
 800b4b8:	20000098 	.word	0x20000098
 800b4bc:	00000000 	.word	0x00000000

0800b4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4c0:	f3ef 8009 	mrs	r0, PSP
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <pxCurrentTCBConst>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b4d0:	6010      	str	r0, [r2, #0]
 800b4d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b4d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4da:	f380 8811 	msr	BASEPRI, r0
 800b4de:	f7fe fef3 	bl	800a2c8 <vTaskSwitchContext>
 800b4e2:	f04f 0000 	mov.w	r0, #0
 800b4e6:	f380 8811 	msr	BASEPRI, r0
 800b4ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b4ee:	6819      	ldr	r1, [r3, #0]
 800b4f0:	6808      	ldr	r0, [r1, #0]
 800b4f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b4f6:	f380 8809 	msr	PSP, r0
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	4770      	bx	lr

0800b500 <pxCurrentTCBConst>:
 800b500:	200055c8 	.word	0x200055c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop

0800b508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	607b      	str	r3, [r7, #4]
}
 800b520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b522:	f7fe fe17 	bl	800a154 <xTaskIncrementTick>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <xPortSysTickHandler+0x40>)
 800b52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	2300      	movs	r3, #0
 800b536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	f383 8811 	msr	BASEPRI, r3
}
 800b53e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	e000ed04 	.word	0xe000ed04

0800b54c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b54c:	b480      	push	{r7}
 800b54e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b550:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <vPortSetupTimerInterrupt+0x30>)
 800b552:	2200      	movs	r2, #0
 800b554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b556:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <vPortSetupTimerInterrupt+0x34>)
 800b558:	2200      	movs	r2, #0
 800b55a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b55c:	4b09      	ldr	r3, [pc, #36]	; (800b584 <vPortSetupTimerInterrupt+0x38>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a09      	ldr	r2, [pc, #36]	; (800b588 <vPortSetupTimerInterrupt+0x3c>)
 800b562:	fba2 2303 	umull	r2, r3, r2, r3
 800b566:	099b      	lsrs	r3, r3, #6
 800b568:	4a08      	ldr	r2, [pc, #32]	; (800b58c <vPortSetupTimerInterrupt+0x40>)
 800b56a:	3b01      	subs	r3, #1
 800b56c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b56e:	4b03      	ldr	r3, [pc, #12]	; (800b57c <vPortSetupTimerInterrupt+0x30>)
 800b570:	2207      	movs	r2, #7
 800b572:	601a      	str	r2, [r3, #0]
}
 800b574:	bf00      	nop
 800b576:	46bd      	mov	sp, r7
 800b578:	bc80      	pop	{r7}
 800b57a:	4770      	bx	lr
 800b57c:	e000e010 	.word	0xe000e010
 800b580:	e000e018 	.word	0xe000e018
 800b584:	20000000 	.word	0x20000000
 800b588:	10624dd3 	.word	0x10624dd3
 800b58c:	e000e014 	.word	0xe000e014

0800b590 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b596:	f3ef 8305 	mrs	r3, IPSR
 800b59a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b0f      	cmp	r3, #15
 800b5a0:	d914      	bls.n	800b5cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5a2:	4a16      	ldr	r2, [pc, #88]	; (800b5fc <vPortValidateInterruptPriority+0x6c>)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5ac:	4b14      	ldr	r3, [pc, #80]	; (800b600 <vPortValidateInterruptPriority+0x70>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	7afa      	ldrb	r2, [r7, #11]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d20a      	bcs.n	800b5cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	607b      	str	r3, [r7, #4]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5cc:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <vPortValidateInterruptPriority+0x74>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b5d4:	4b0c      	ldr	r3, [pc, #48]	; (800b608 <vPortValidateInterruptPriority+0x78>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d90a      	bls.n	800b5f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	603b      	str	r3, [r7, #0]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <vPortValidateInterruptPriority+0x60>
	}
 800b5f2:	bf00      	nop
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bc80      	pop	{r7}
 800b5fa:	4770      	bx	lr
 800b5fc:	e000e3f0 	.word	0xe000e3f0
 800b600:	20005bf4 	.word	0x20005bf4
 800b604:	e000ed0c 	.word	0xe000ed0c
 800b608:	20005bf8 	.word	0x20005bf8

0800b60c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08a      	sub	sp, #40	; 0x28
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b614:	2300      	movs	r3, #0
 800b616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b618:	f7fe fcd0 	bl	8009fbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b61c:	4b5b      	ldr	r3, [pc, #364]	; (800b78c <pvPortMalloc+0x180>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b624:	f000 f920 	bl	800b868 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b628:	4b59      	ldr	r3, [pc, #356]	; (800b790 <pvPortMalloc+0x184>)
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4013      	ands	r3, r2
 800b630:	2b00      	cmp	r3, #0
 800b632:	f040 8093 	bne.w	800b75c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d01d      	beq.n	800b678 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b63c:	2208      	movs	r2, #8
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4413      	add	r3, r2
 800b642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f003 0307 	and.w	r3, r3, #7
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d014      	beq.n	800b678 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f023 0307 	bic.w	r3, r3, #7
 800b654:	3308      	adds	r3, #8
 800b656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f003 0307 	and.w	r3, r3, #7
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00a      	beq.n	800b678 <pvPortMalloc+0x6c>
	__asm volatile
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	617b      	str	r3, [r7, #20]
}
 800b674:	bf00      	nop
 800b676:	e7fe      	b.n	800b676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d06e      	beq.n	800b75c <pvPortMalloc+0x150>
 800b67e:	4b45      	ldr	r3, [pc, #276]	; (800b794 <pvPortMalloc+0x188>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d869      	bhi.n	800b75c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b688:	4b43      	ldr	r3, [pc, #268]	; (800b798 <pvPortMalloc+0x18c>)
 800b68a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b68c:	4b42      	ldr	r3, [pc, #264]	; (800b798 <pvPortMalloc+0x18c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b692:	e004      	b.n	800b69e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d903      	bls.n	800b6b0 <pvPortMalloc+0xa4>
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1f1      	bne.n	800b694 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6b0:	4b36      	ldr	r3, [pc, #216]	; (800b78c <pvPortMalloc+0x180>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d050      	beq.n	800b75c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2208      	movs	r2, #8
 800b6c0:	4413      	add	r3, r2
 800b6c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	1ad2      	subs	r2, r2, r3
 800b6d4:	2308      	movs	r3, #8
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d91f      	bls.n	800b71c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	f003 0307 	and.w	r3, r3, #7
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <pvPortMalloc+0xf8>
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	613b      	str	r3, [r7, #16]
}
 800b700:	bf00      	nop
 800b702:	e7fe      	b.n	800b702 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	1ad2      	subs	r2, r2, r3
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b716:	69b8      	ldr	r0, [r7, #24]
 800b718:	f000 f908 	bl	800b92c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b71c:	4b1d      	ldr	r3, [pc, #116]	; (800b794 <pvPortMalloc+0x188>)
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	4a1b      	ldr	r2, [pc, #108]	; (800b794 <pvPortMalloc+0x188>)
 800b728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b72a:	4b1a      	ldr	r3, [pc, #104]	; (800b794 <pvPortMalloc+0x188>)
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	4b1b      	ldr	r3, [pc, #108]	; (800b79c <pvPortMalloc+0x190>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d203      	bcs.n	800b73e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b736:	4b17      	ldr	r3, [pc, #92]	; (800b794 <pvPortMalloc+0x188>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a18      	ldr	r2, [pc, #96]	; (800b79c <pvPortMalloc+0x190>)
 800b73c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	4b13      	ldr	r3, [pc, #76]	; (800b790 <pvPortMalloc+0x184>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	431a      	orrs	r2, r3
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	2200      	movs	r2, #0
 800b750:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b752:	4b13      	ldr	r3, [pc, #76]	; (800b7a0 <pvPortMalloc+0x194>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3301      	adds	r3, #1
 800b758:	4a11      	ldr	r2, [pc, #68]	; (800b7a0 <pvPortMalloc+0x194>)
 800b75a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b75c:	f7fe fc3c 	bl	8009fd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	f003 0307 	and.w	r3, r3, #7
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00a      	beq.n	800b780 <pvPortMalloc+0x174>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	60fb      	str	r3, [r7, #12]
}
 800b77c:	bf00      	nop
 800b77e:	e7fe      	b.n	800b77e <pvPortMalloc+0x172>
	return pvReturn;
 800b780:	69fb      	ldr	r3, [r7, #28]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3728      	adds	r7, #40	; 0x28
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20009804 	.word	0x20009804
 800b790:	20009818 	.word	0x20009818
 800b794:	20009808 	.word	0x20009808
 800b798:	200097fc 	.word	0x200097fc
 800b79c:	2000980c 	.word	0x2000980c
 800b7a0:	20009810 	.word	0x20009810

0800b7a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d04d      	beq.n	800b852 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7b6:	2308      	movs	r3, #8
 800b7b8:	425b      	negs	r3, r3
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	4413      	add	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	4b24      	ldr	r3, [pc, #144]	; (800b85c <vPortFree+0xb8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <vPortFree+0x44>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	60fb      	str	r3, [r7, #12]
}
 800b7e4:	bf00      	nop
 800b7e6:	e7fe      	b.n	800b7e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00a      	beq.n	800b806 <vPortFree+0x62>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	60bb      	str	r3, [r7, #8]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	4b14      	ldr	r3, [pc, #80]	; (800b85c <vPortFree+0xb8>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4013      	ands	r3, r2
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01e      	beq.n	800b852 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d11a      	bne.n	800b852 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	685a      	ldr	r2, [r3, #4]
 800b820:	4b0e      	ldr	r3, [pc, #56]	; (800b85c <vPortFree+0xb8>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	43db      	mvns	r3, r3
 800b826:	401a      	ands	r2, r3
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b82c:	f7fe fbc6 	bl	8009fbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <vPortFree+0xbc>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4413      	add	r3, r2
 800b83a:	4a09      	ldr	r2, [pc, #36]	; (800b860 <vPortFree+0xbc>)
 800b83c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b83e:	6938      	ldr	r0, [r7, #16]
 800b840:	f000 f874 	bl	800b92c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b844:	4b07      	ldr	r3, [pc, #28]	; (800b864 <vPortFree+0xc0>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3301      	adds	r3, #1
 800b84a:	4a06      	ldr	r2, [pc, #24]	; (800b864 <vPortFree+0xc0>)
 800b84c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b84e:	f7fe fbc3 	bl	8009fd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b852:	bf00      	nop
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	20009818 	.word	0x20009818
 800b860:	20009808 	.word	0x20009808
 800b864:	20009814 	.word	0x20009814

0800b868 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b86e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b872:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b874:	4b27      	ldr	r3, [pc, #156]	; (800b914 <prvHeapInit+0xac>)
 800b876:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00c      	beq.n	800b89c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3307      	adds	r3, #7
 800b886:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0307 	bic.w	r3, r3, #7
 800b88e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	4a1f      	ldr	r2, [pc, #124]	; (800b914 <prvHeapInit+0xac>)
 800b898:	4413      	add	r3, r2
 800b89a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8a0:	4a1d      	ldr	r2, [pc, #116]	; (800b918 <prvHeapInit+0xb0>)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8a6:	4b1c      	ldr	r3, [pc, #112]	; (800b918 <prvHeapInit+0xb0>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8b4:	2208      	movs	r2, #8
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	1a9b      	subs	r3, r3, r2
 800b8ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 0307 	bic.w	r3, r3, #7
 800b8c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	4a15      	ldr	r2, [pc, #84]	; (800b91c <prvHeapInit+0xb4>)
 800b8c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8ca:	4b14      	ldr	r3, [pc, #80]	; (800b91c <prvHeapInit+0xb4>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8d2:	4b12      	ldr	r3, [pc, #72]	; (800b91c <prvHeapInit+0xb4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	1ad2      	subs	r2, r2, r3
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8e8:	4b0c      	ldr	r3, [pc, #48]	; (800b91c <prvHeapInit+0xb4>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4a0a      	ldr	r2, [pc, #40]	; (800b920 <prvHeapInit+0xb8>)
 800b8f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	4a09      	ldr	r2, [pc, #36]	; (800b924 <prvHeapInit+0xbc>)
 800b8fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b900:	4b09      	ldr	r3, [pc, #36]	; (800b928 <prvHeapInit+0xc0>)
 800b902:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b906:	601a      	str	r2, [r3, #0]
}
 800b908:	bf00      	nop
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bc80      	pop	{r7}
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	20005bfc 	.word	0x20005bfc
 800b918:	200097fc 	.word	0x200097fc
 800b91c:	20009804 	.word	0x20009804
 800b920:	2000980c 	.word	0x2000980c
 800b924:	20009808 	.word	0x20009808
 800b928:	20009818 	.word	0x20009818

0800b92c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b934:	4b27      	ldr	r3, [pc, #156]	; (800b9d4 <prvInsertBlockIntoFreeList+0xa8>)
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	e002      	b.n	800b940 <prvInsertBlockIntoFreeList+0x14>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	429a      	cmp	r2, r3
 800b948:	d8f7      	bhi.n	800b93a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	4413      	add	r3, r2
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d108      	bne.n	800b96e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	441a      	add	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	441a      	add	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d118      	bne.n	800b9b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	4b14      	ldr	r3, [pc, #80]	; (800b9d8 <prvInsertBlockIntoFreeList+0xac>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d00d      	beq.n	800b9aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	441a      	add	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e008      	b.n	800b9bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9aa:	4b0b      	ldr	r3, [pc, #44]	; (800b9d8 <prvInsertBlockIntoFreeList+0xac>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	e003      	b.n	800b9bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d002      	beq.n	800b9ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9ca:	bf00      	nop
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bc80      	pop	{r7}
 800b9d2:	4770      	bx	lr
 800b9d4:	200097fc 	.word	0x200097fc
 800b9d8:	20009804 	.word	0x20009804

0800b9dc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b9e6:	f007 fb1d 	bl	8013024 <sys_timeouts_sleeptime>
 800b9ea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f2:	d10b      	bne.n	800ba0c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b9f4:	4813      	ldr	r0, [pc, #76]	; (800ba44 <tcpip_timeouts_mbox_fetch+0x68>)
 800b9f6:	f00c fa0e 	bl	8017e16 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f00c f996 	bl	8017d30 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ba04:	480f      	ldr	r0, [pc, #60]	; (800ba44 <tcpip_timeouts_mbox_fetch+0x68>)
 800ba06:	f00c f9f7 	bl	8017df8 <sys_mutex_lock>
    return;
 800ba0a:	e018      	b.n	800ba3e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ba12:	f007 facd 	bl	8012fb0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ba16:	e7e6      	b.n	800b9e6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ba18:	480a      	ldr	r0, [pc, #40]	; (800ba44 <tcpip_timeouts_mbox_fetch+0x68>)
 800ba1a:	f00c f9fc 	bl	8017e16 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f00c f984 	bl	8017d30 <sys_arch_mbox_fetch>
 800ba28:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ba2a:	4806      	ldr	r0, [pc, #24]	; (800ba44 <tcpip_timeouts_mbox_fetch+0x68>)
 800ba2c:	f00c f9e4 	bl	8017df8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba36:	d102      	bne.n	800ba3e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ba38:	f007 faba 	bl	8012fb0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ba3c:	e7d3      	b.n	800b9e6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20009828 	.word	0x20009828

0800ba48 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ba50:	4810      	ldr	r0, [pc, #64]	; (800ba94 <tcpip_thread+0x4c>)
 800ba52:	f00c f9d1 	bl	8017df8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ba56:	4b10      	ldr	r3, [pc, #64]	; (800ba98 <tcpip_thread+0x50>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d005      	beq.n	800ba6a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ba5e:	4b0e      	ldr	r3, [pc, #56]	; (800ba98 <tcpip_thread+0x50>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a0e      	ldr	r2, [pc, #56]	; (800ba9c <tcpip_thread+0x54>)
 800ba64:	6812      	ldr	r2, [r2, #0]
 800ba66:	4610      	mov	r0, r2
 800ba68:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ba6a:	f107 030c 	add.w	r3, r7, #12
 800ba6e:	4619      	mov	r1, r3
 800ba70:	480b      	ldr	r0, [pc, #44]	; (800baa0 <tcpip_thread+0x58>)
 800ba72:	f7ff ffb3 	bl	800b9dc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d106      	bne.n	800ba8a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ba7c:	4b09      	ldr	r3, [pc, #36]	; (800baa4 <tcpip_thread+0x5c>)
 800ba7e:	2291      	movs	r2, #145	; 0x91
 800ba80:	4909      	ldr	r1, [pc, #36]	; (800baa8 <tcpip_thread+0x60>)
 800ba82:	480a      	ldr	r0, [pc, #40]	; (800baac <tcpip_thread+0x64>)
 800ba84:	f00d fa4c 	bl	8018f20 <iprintf>
      continue;
 800ba88:	e003      	b.n	800ba92 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f80f 	bl	800bab0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ba92:	e7ea      	b.n	800ba6a <tcpip_thread+0x22>
 800ba94:	20009828 	.word	0x20009828
 800ba98:	2000981c 	.word	0x2000981c
 800ba9c:	20009820 	.word	0x20009820
 800baa0:	20009824 	.word	0x20009824
 800baa4:	08019b20 	.word	0x08019b20
 800baa8:	08019b50 	.word	0x08019b50
 800baac:	08019b70 	.word	0x08019b70

0800bab0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	2b02      	cmp	r3, #2
 800babe:	d026      	beq.n	800bb0e <tcpip_thread_handle_msg+0x5e>
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	dc2b      	bgt.n	800bb1c <tcpip_thread_handle_msg+0x6c>
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <tcpip_thread_handle_msg+0x1e>
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d015      	beq.n	800baf8 <tcpip_thread_handle_msg+0x48>
 800bacc:	e026      	b.n	800bb1c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	6850      	ldr	r0, [r2, #4]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	6892      	ldr	r2, [r2, #8]
 800bada:	4611      	mov	r1, r2
 800badc:	4798      	blx	r3
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 fd55 	bl	800d598 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800baee:	6879      	ldr	r1, [r7, #4]
 800baf0:	2009      	movs	r0, #9
 800baf2:	f000 ff13 	bl	800c91c <memp_free>
      break;
 800baf6:	e018      	b.n	800bb2a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	6892      	ldr	r2, [r2, #8]
 800bb00:	4610      	mov	r0, r2
 800bb02:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	2008      	movs	r0, #8
 800bb08:	f000 ff08 	bl	800c91c <memp_free>
      break;
 800bb0c:	e00d      	b.n	800bb2a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	6892      	ldr	r2, [r2, #8]
 800bb16:	4610      	mov	r0, r2
 800bb18:	4798      	blx	r3
      break;
 800bb1a:	e006      	b.n	800bb2a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bb1c:	4b05      	ldr	r3, [pc, #20]	; (800bb34 <tcpip_thread_handle_msg+0x84>)
 800bb1e:	22cf      	movs	r2, #207	; 0xcf
 800bb20:	4905      	ldr	r1, [pc, #20]	; (800bb38 <tcpip_thread_handle_msg+0x88>)
 800bb22:	4806      	ldr	r0, [pc, #24]	; (800bb3c <tcpip_thread_handle_msg+0x8c>)
 800bb24:	f00d f9fc 	bl	8018f20 <iprintf>
      break;
 800bb28:	bf00      	nop
  }
}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	08019b20 	.word	0x08019b20
 800bb38:	08019b50 	.word	0x08019b50
 800bb3c:	08019b70 	.word	0x08019b70

0800bb40 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bb4c:	481a      	ldr	r0, [pc, #104]	; (800bbb8 <tcpip_inpkt+0x78>)
 800bb4e:	f00c f920 	bl	8017d92 <sys_mbox_valid>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d105      	bne.n	800bb64 <tcpip_inpkt+0x24>
 800bb58:	4b18      	ldr	r3, [pc, #96]	; (800bbbc <tcpip_inpkt+0x7c>)
 800bb5a:	22fc      	movs	r2, #252	; 0xfc
 800bb5c:	4918      	ldr	r1, [pc, #96]	; (800bbc0 <tcpip_inpkt+0x80>)
 800bb5e:	4819      	ldr	r0, [pc, #100]	; (800bbc4 <tcpip_inpkt+0x84>)
 800bb60:	f00d f9de 	bl	8018f20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bb64:	2009      	movs	r0, #9
 800bb66:	f000 fe63 	bl	800c830 <memp_malloc>
 800bb6a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d102      	bne.n	800bb78 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bb72:	f04f 33ff 	mov.w	r3, #4294967295
 800bb76:	e01a      	b.n	800bbae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bb90:	6979      	ldr	r1, [r7, #20]
 800bb92:	4809      	ldr	r0, [pc, #36]	; (800bbb8 <tcpip_inpkt+0x78>)
 800bb94:	f00c f8b2 	bl	8017cfc <sys_mbox_trypost>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d006      	beq.n	800bbac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bb9e:	6979      	ldr	r1, [r7, #20]
 800bba0:	2009      	movs	r0, #9
 800bba2:	f000 febb 	bl	800c91c <memp_free>
    return ERR_MEM;
 800bba6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbaa:	e000      	b.n	800bbae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bbac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20009824 	.word	0x20009824
 800bbbc:	08019b20 	.word	0x08019b20
 800bbc0:	08019b98 	.word	0x08019b98
 800bbc4:	08019b70 	.word	0x08019b70

0800bbc8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bbd8:	f003 0318 	and.w	r3, r3, #24
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d006      	beq.n	800bbee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bbe0:	4a08      	ldr	r2, [pc, #32]	; (800bc04 <tcpip_input+0x3c>)
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff ffab 	bl	800bb40 <tcpip_inpkt>
 800bbea:	4603      	mov	r3, r0
 800bbec:	e005      	b.n	800bbfa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bbee:	4a06      	ldr	r2, [pc, #24]	; (800bc08 <tcpip_input+0x40>)
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff ffa4 	bl	800bb40 <tcpip_inpkt>
 800bbf8:	4603      	mov	r3, r0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	08017b1d 	.word	0x08017b1d
 800bc08:	080169ed 	.word	0x080169ed

0800bc0c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bc16:	4819      	ldr	r0, [pc, #100]	; (800bc7c <tcpip_try_callback+0x70>)
 800bc18:	f00c f8bb 	bl	8017d92 <sys_mbox_valid>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d106      	bne.n	800bc30 <tcpip_try_callback+0x24>
 800bc22:	4b17      	ldr	r3, [pc, #92]	; (800bc80 <tcpip_try_callback+0x74>)
 800bc24:	f240 125d 	movw	r2, #349	; 0x15d
 800bc28:	4916      	ldr	r1, [pc, #88]	; (800bc84 <tcpip_try_callback+0x78>)
 800bc2a:	4817      	ldr	r0, [pc, #92]	; (800bc88 <tcpip_try_callback+0x7c>)
 800bc2c:	f00d f978 	bl	8018f20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bc30:	2008      	movs	r0, #8
 800bc32:	f000 fdfd 	bl	800c830 <memp_malloc>
 800bc36:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d102      	bne.n	800bc44 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800bc3e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc42:	e017      	b.n	800bc74 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2201      	movs	r2, #1
 800bc48:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bc56:	68f9      	ldr	r1, [r7, #12]
 800bc58:	4808      	ldr	r0, [pc, #32]	; (800bc7c <tcpip_try_callback+0x70>)
 800bc5a:	f00c f84f 	bl	8017cfc <sys_mbox_trypost>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d006      	beq.n	800bc72 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bc64:	68f9      	ldr	r1, [r7, #12]
 800bc66:	2008      	movs	r0, #8
 800bc68:	f000 fe58 	bl	800c91c <memp_free>
    return ERR_MEM;
 800bc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc70:	e000      	b.n	800bc74 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	20009824 	.word	0x20009824
 800bc80:	08019b20 	.word	0x08019b20
 800bc84:	08019b98 	.word	0x08019b98
 800bc88:	08019b70 	.word	0x08019b70

0800bc8c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af02      	add	r7, sp, #8
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bc96:	f000 f92a 	bl	800beee <lwip_init>

  tcpip_init_done = initfunc;
 800bc9a:	4a17      	ldr	r2, [pc, #92]	; (800bcf8 <tcpip_init+0x6c>)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bca0:	4a16      	ldr	r2, [pc, #88]	; (800bcfc <tcpip_init+0x70>)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bca6:	2106      	movs	r1, #6
 800bca8:	4815      	ldr	r0, [pc, #84]	; (800bd00 <tcpip_init+0x74>)
 800bcaa:	f00c f80d 	bl	8017cc8 <sys_mbox_new>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d006      	beq.n	800bcc2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bcb4:	4b13      	ldr	r3, [pc, #76]	; (800bd04 <tcpip_init+0x78>)
 800bcb6:	f240 2261 	movw	r2, #609	; 0x261
 800bcba:	4913      	ldr	r1, [pc, #76]	; (800bd08 <tcpip_init+0x7c>)
 800bcbc:	4813      	ldr	r0, [pc, #76]	; (800bd0c <tcpip_init+0x80>)
 800bcbe:	f00d f92f 	bl	8018f20 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bcc2:	4813      	ldr	r0, [pc, #76]	; (800bd10 <tcpip_init+0x84>)
 800bcc4:	f00c f882 	bl	8017dcc <sys_mutex_new>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d006      	beq.n	800bcdc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bcce:	4b0d      	ldr	r3, [pc, #52]	; (800bd04 <tcpip_init+0x78>)
 800bcd0:	f240 2265 	movw	r2, #613	; 0x265
 800bcd4:	490f      	ldr	r1, [pc, #60]	; (800bd14 <tcpip_init+0x88>)
 800bcd6:	480d      	ldr	r0, [pc, #52]	; (800bd0c <tcpip_init+0x80>)
 800bcd8:	f00d f922 	bl	8018f20 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bcdc:	2318      	movs	r3, #24
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bce4:	2200      	movs	r2, #0
 800bce6:	490c      	ldr	r1, [pc, #48]	; (800bd18 <tcpip_init+0x8c>)
 800bce8:	480c      	ldr	r0, [pc, #48]	; (800bd1c <tcpip_init+0x90>)
 800bcea:	f00c f8a1 	bl	8017e30 <sys_thread_new>
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	2000981c 	.word	0x2000981c
 800bcfc:	20009820 	.word	0x20009820
 800bd00:	20009824 	.word	0x20009824
 800bd04:	08019b20 	.word	0x08019b20
 800bd08:	08019ba8 	.word	0x08019ba8
 800bd0c:	08019b70 	.word	0x08019b70
 800bd10:	20009828 	.word	0x20009828
 800bd14:	08019bcc 	.word	0x08019bcc
 800bd18:	0800ba49 	.word	0x0800ba49
 800bd1c:	08019bf0 	.word	0x08019bf0

0800bd20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bd2a:	88fb      	ldrh	r3, [r7, #6]
 800bd2c:	021b      	lsls	r3, r3, #8
 800bd2e:	b21a      	sxth	r2, r3
 800bd30:	88fb      	ldrh	r3, [r7, #6]
 800bd32:	0a1b      	lsrs	r3, r3, #8
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	b21b      	sxth	r3, r3
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	b21b      	sxth	r3, r3
 800bd3c:	b29b      	uxth	r3, r3
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bc80      	pop	{r7}
 800bd46:	4770      	bx	lr

0800bd48 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	061a      	lsls	r2, r3, #24
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	021b      	lsls	r3, r3, #8
 800bd58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	0a1b      	lsrs	r3, r3, #8
 800bd62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd66:	431a      	orrs	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	0e1b      	lsrs	r3, r3, #24
 800bd6c:	4313      	orrs	r3, r2
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bc80      	pop	{r7}
 800bd76:	4770      	bx	lr

0800bd78 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b089      	sub	sp, #36	; 0x24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00d      	beq.n	800bdb8 <lwip_standard_chksum+0x40>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	dd0a      	ble.n	800bdb8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800bda2:	69fa      	ldr	r2, [r7, #28]
 800bda4:	1c53      	adds	r3, r2, #1
 800bda6:	61fb      	str	r3, [r7, #28]
 800bda8:	f107 030e 	add.w	r3, r7, #14
 800bdac:	3301      	adds	r3, #1
 800bdae:	7812      	ldrb	r2, [r2, #0]
 800bdb0:	701a      	strb	r2, [r3, #0]
    len--;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800bdbc:	e00a      	b.n	800bdd4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	1c9a      	adds	r2, r3, #2
 800bdc2:	61ba      	str	r2, [r7, #24]
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	4413      	add	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	3b02      	subs	r3, #2
 800bdd2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	dcf1      	bgt.n	800bdbe <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dd04      	ble.n	800bdea <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800bde0:	f107 030e 	add.w	r3, r7, #14
 800bde4:	69ba      	ldr	r2, [r7, #24]
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800bdea:	89fb      	ldrh	r3, [r7, #14]
 800bdec:	461a      	mov	r2, r3
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	0c1a      	lsrs	r2, r3, #16
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	4413      	add	r3, r2
 800bdfe:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	0c1a      	lsrs	r2, r3, #16
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	b29b      	uxth	r3, r3
 800be08:	4413      	add	r3, r2
 800be0a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d007      	beq.n	800be22 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	021b      	lsls	r3, r3, #8
 800be16:	b29a      	uxth	r2, r3
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	0a1b      	lsrs	r3, r3, #8
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	4313      	orrs	r3, r2
 800be20:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	b29b      	uxth	r3, r3
}
 800be26:	4618      	mov	r0, r3
 800be28:	3724      	adds	r7, #36	; 0x24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr

0800be30 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800be3c:	887b      	ldrh	r3, [r7, #2]
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff ff99 	bl	800bd78 <lwip_standard_chksum>
 800be46:	4603      	mov	r3, r0
 800be48:	43db      	mvns	r3, r3
 800be4a:	b29b      	uxth	r3, r3
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800be60:	2300      	movs	r3, #0
 800be62:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	613b      	str	r3, [r7, #16]
 800be68:	e02b      	b.n	800bec2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	895b      	ldrh	r3, [r3, #10]
 800be72:	4619      	mov	r1, r3
 800be74:	4610      	mov	r0, r2
 800be76:	f7ff ff7f 	bl	800bd78 <lwip_standard_chksum>
 800be7a:	4603      	mov	r3, r0
 800be7c:	461a      	mov	r2, r3
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	4413      	add	r3, r2
 800be82:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	0c1a      	lsrs	r2, r3, #16
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	4413      	add	r3, r2
 800be8e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	895b      	ldrh	r3, [r3, #10]
 800be94:	f003 0301 	and.w	r3, r3, #1
 800be98:	b29b      	uxth	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00e      	beq.n	800bebc <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bf0c      	ite	eq
 800bea4:	2301      	moveq	r3, #1
 800bea6:	2300      	movne	r3, #0
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	0a1b      	lsrs	r3, r3, #8
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	4313      	orrs	r3, r2
 800beba:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	613b      	str	r3, [r7, #16]
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1d0      	bne.n	800be6a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d007      	beq.n	800bede <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	021b      	lsls	r3, r3, #8
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	0a1b      	lsrs	r3, r3, #8
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	4313      	orrs	r3, r2
 800bedc:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	43db      	mvns	r3, r3
 800bee4:	b29b      	uxth	r3, r3
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b082      	sub	sp, #8
 800bef2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bef8:	f00b ff5c 	bl	8017db4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800befc:	f000 f8d0 	bl	800c0a0 <mem_init>
  memp_init();
 800bf00:	f000 fc28 	bl	800c754 <memp_init>
  pbuf_init();
  netif_init();
 800bf04:	f000 fd34 	bl	800c970 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bf08:	f007 f8c4 	bl	8013094 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bf0c:	f001 fdec 	bl	800dae8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bf10:	f007 f806 	bl	8012f20 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bf14:	bf00      	nop
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bf26:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <ptr_to_mem+0x1c>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	88fb      	ldrh	r3, [r7, #6]
 800bf2c:	4413      	add	r3, r2
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bc80      	pop	{r7}
 800bf36:	4770      	bx	lr
 800bf38:	20009844 	.word	0x20009844

0800bf3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bf44:	4b04      	ldr	r3, [pc, #16]	; (800bf58 <mem_to_ptr+0x1c>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	b29b      	uxth	r3, r3
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bc80      	pop	{r7}
 800bf56:	4770      	bx	lr
 800bf58:	20009844 	.word	0x20009844

0800bf5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bf5c:	b590      	push	{r4, r7, lr}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bf64:	4b45      	ldr	r3, [pc, #276]	; (800c07c <plug_holes+0x120>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d206      	bcs.n	800bf7c <plug_holes+0x20>
 800bf6e:	4b44      	ldr	r3, [pc, #272]	; (800c080 <plug_holes+0x124>)
 800bf70:	f240 12df 	movw	r2, #479	; 0x1df
 800bf74:	4943      	ldr	r1, [pc, #268]	; (800c084 <plug_holes+0x128>)
 800bf76:	4844      	ldr	r0, [pc, #272]	; (800c088 <plug_holes+0x12c>)
 800bf78:	f00c ffd2 	bl	8018f20 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bf7c:	4b43      	ldr	r3, [pc, #268]	; (800c08c <plug_holes+0x130>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d306      	bcc.n	800bf94 <plug_holes+0x38>
 800bf86:	4b3e      	ldr	r3, [pc, #248]	; (800c080 <plug_holes+0x124>)
 800bf88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bf8c:	4940      	ldr	r1, [pc, #256]	; (800c090 <plug_holes+0x134>)
 800bf8e:	483e      	ldr	r0, [pc, #248]	; (800c088 <plug_holes+0x12c>)
 800bf90:	f00c ffc6 	bl	8018f20 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	791b      	ldrb	r3, [r3, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d006      	beq.n	800bfaa <plug_holes+0x4e>
 800bf9c:	4b38      	ldr	r3, [pc, #224]	; (800c080 <plug_holes+0x124>)
 800bf9e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bfa2:	493c      	ldr	r1, [pc, #240]	; (800c094 <plug_holes+0x138>)
 800bfa4:	4838      	ldr	r0, [pc, #224]	; (800c088 <plug_holes+0x12c>)
 800bfa6:	f00c ffbb 	bl	8018f20 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	881b      	ldrh	r3, [r3, #0]
 800bfae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfb2:	d906      	bls.n	800bfc2 <plug_holes+0x66>
 800bfb4:	4b32      	ldr	r3, [pc, #200]	; (800c080 <plug_holes+0x124>)
 800bfb6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bfba:	4937      	ldr	r1, [pc, #220]	; (800c098 <plug_holes+0x13c>)
 800bfbc:	4832      	ldr	r0, [pc, #200]	; (800c088 <plug_holes+0x12c>)
 800bfbe:	f00c ffaf 	bl	8018f20 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff ffa8 	bl	800bf1c <ptr_to_mem>
 800bfcc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d024      	beq.n	800c020 <plug_holes+0xc4>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	791b      	ldrb	r3, [r3, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d120      	bne.n	800c020 <plug_holes+0xc4>
 800bfde:	4b2b      	ldr	r3, [pc, #172]	; (800c08c <plug_holes+0x130>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d01b      	beq.n	800c020 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bfe8:	4b2c      	ldr	r3, [pc, #176]	; (800c09c <plug_holes+0x140>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d102      	bne.n	800bff8 <plug_holes+0x9c>
      lfree = mem;
 800bff2:	4a2a      	ldr	r2, [pc, #168]	; (800c09c <plug_holes+0x140>)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	881a      	ldrh	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c008:	d00a      	beq.n	800c020 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff ff84 	bl	800bf1c <ptr_to_mem>
 800c014:	4604      	mov	r4, r0
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f7ff ff90 	bl	800bf3c <mem_to_ptr>
 800c01c:	4603      	mov	r3, r0
 800c01e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	885b      	ldrh	r3, [r3, #2]
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff ff79 	bl	800bf1c <ptr_to_mem>
 800c02a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d01f      	beq.n	800c074 <plug_holes+0x118>
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	791b      	ldrb	r3, [r3, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d11b      	bne.n	800c074 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c03c:	4b17      	ldr	r3, [pc, #92]	; (800c09c <plug_holes+0x140>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	429a      	cmp	r2, r3
 800c044:	d102      	bne.n	800c04c <plug_holes+0xf0>
      lfree = pmem;
 800c046:	4a15      	ldr	r2, [pc, #84]	; (800c09c <plug_holes+0x140>)
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	881a      	ldrh	r2, [r3, #0]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c05c:	d00a      	beq.n	800c074 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff ff5a 	bl	800bf1c <ptr_to_mem>
 800c068:	4604      	mov	r4, r0
 800c06a:	68b8      	ldr	r0, [r7, #8]
 800c06c:	f7ff ff66 	bl	800bf3c <mem_to_ptr>
 800c070:	4603      	mov	r3, r0
 800c072:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c074:	bf00      	nop
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd90      	pop	{r4, r7, pc}
 800c07c:	20009844 	.word	0x20009844
 800c080:	08019c00 	.word	0x08019c00
 800c084:	08019c30 	.word	0x08019c30
 800c088:	08019c48 	.word	0x08019c48
 800c08c:	20009848 	.word	0x20009848
 800c090:	08019c70 	.word	0x08019c70
 800c094:	08019c8c 	.word	0x08019c8c
 800c098:	08019ca8 	.word	0x08019ca8
 800c09c:	20009850 	.word	0x20009850

0800c0a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c0a6:	4b1d      	ldr	r3, [pc, #116]	; (800c11c <mem_init+0x7c>)
 800c0a8:	4a1d      	ldr	r2, [pc, #116]	; (800c120 <mem_init+0x80>)
 800c0aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c0ac:	4b1b      	ldr	r3, [pc, #108]	; (800c11c <mem_init+0x7c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c0b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c0c6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c0ca:	f7ff ff27 	bl	800bf1c <ptr_to_mem>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	4a14      	ldr	r2, [pc, #80]	; (800c124 <mem_init+0x84>)
 800c0d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c0d4:	4b13      	ldr	r3, [pc, #76]	; (800c124 <mem_init+0x84>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c0dc:	4b11      	ldr	r3, [pc, #68]	; (800c124 <mem_init+0x84>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c0e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c0e6:	4b0f      	ldr	r3, [pc, #60]	; (800c124 <mem_init+0x84>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c0ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <mem_init+0x7c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a0c      	ldr	r2, [pc, #48]	; (800c128 <mem_init+0x88>)
 800c0f6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c0f8:	480c      	ldr	r0, [pc, #48]	; (800c12c <mem_init+0x8c>)
 800c0fa:	f00b fe67 	bl	8017dcc <sys_mutex_new>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d006      	beq.n	800c112 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c104:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <mem_init+0x90>)
 800c106:	f240 221f 	movw	r2, #543	; 0x21f
 800c10a:	490a      	ldr	r1, [pc, #40]	; (800c134 <mem_init+0x94>)
 800c10c:	480a      	ldr	r0, [pc, #40]	; (800c138 <mem_init+0x98>)
 800c10e:	f00c ff07 	bl	8018f20 <iprintf>
  }
}
 800c112:	bf00      	nop
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	20009844 	.word	0x20009844
 800c120:	30044000 	.word	0x30044000
 800c124:	20009848 	.word	0x20009848
 800c128:	20009850 	.word	0x20009850
 800c12c:	2000984c 	.word	0x2000984c
 800c130:	08019c00 	.word	0x08019c00
 800c134:	08019cd4 	.word	0x08019cd4
 800c138:	08019c48 	.word	0x08019c48

0800c13c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff fef9 	bl	800bf3c <mem_to_ptr>
 800c14a:	4603      	mov	r3, r0
 800c14c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff fee2 	bl	800bf1c <ptr_to_mem>
 800c158:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	885b      	ldrh	r3, [r3, #2]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff fedc 	bl	800bf1c <ptr_to_mem>
 800c164:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	881b      	ldrh	r3, [r3, #0]
 800c16a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c16e:	d818      	bhi.n	800c1a2 <mem_link_valid+0x66>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	885b      	ldrh	r3, [r3, #2]
 800c174:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c178:	d813      	bhi.n	800c1a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c17e:	8afa      	ldrh	r2, [r7, #22]
 800c180:	429a      	cmp	r2, r3
 800c182:	d004      	beq.n	800c18e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	8afa      	ldrh	r2, [r7, #22]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d109      	bne.n	800c1a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c18e:	4b08      	ldr	r3, [pc, #32]	; (800c1b0 <mem_link_valid+0x74>)
 800c190:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	429a      	cmp	r2, r3
 800c196:	d006      	beq.n	800c1a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	885b      	ldrh	r3, [r3, #2]
 800c19c:	8afa      	ldrh	r2, [r7, #22]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d001      	beq.n	800c1a6 <mem_link_valid+0x6a>
    return 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	e000      	b.n	800c1a8 <mem_link_valid+0x6c>
  }
  return 1;
 800c1a6:	2301      	movs	r3, #1
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20009848 	.word	0x20009848

0800c1b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d070      	beq.n	800c2a4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f003 0303 	and.w	r3, r3, #3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00d      	beq.n	800c1e8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c1cc:	4b37      	ldr	r3, [pc, #220]	; (800c2ac <mem_free+0xf8>)
 800c1ce:	f240 2273 	movw	r2, #627	; 0x273
 800c1d2:	4937      	ldr	r1, [pc, #220]	; (800c2b0 <mem_free+0xfc>)
 800c1d4:	4837      	ldr	r0, [pc, #220]	; (800c2b4 <mem_free+0x100>)
 800c1d6:	f00c fea3 	bl	8018f20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1da:	f00b fe49 	bl	8017e70 <sys_arch_protect>
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f00b fe53 	bl	8017e8c <sys_arch_unprotect>
    return;
 800c1e6:	e05e      	b.n	800c2a6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3b08      	subs	r3, #8
 800c1ec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c1ee:	4b32      	ldr	r3, [pc, #200]	; (800c2b8 <mem_free+0x104>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	69fa      	ldr	r2, [r7, #28]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d306      	bcc.n	800c206 <mem_free+0x52>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f103 020c 	add.w	r2, r3, #12
 800c1fe:	4b2f      	ldr	r3, [pc, #188]	; (800c2bc <mem_free+0x108>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	429a      	cmp	r2, r3
 800c204:	d90d      	bls.n	800c222 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c206:	4b29      	ldr	r3, [pc, #164]	; (800c2ac <mem_free+0xf8>)
 800c208:	f240 227f 	movw	r2, #639	; 0x27f
 800c20c:	492c      	ldr	r1, [pc, #176]	; (800c2c0 <mem_free+0x10c>)
 800c20e:	4829      	ldr	r0, [pc, #164]	; (800c2b4 <mem_free+0x100>)
 800c210:	f00c fe86 	bl	8018f20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c214:	f00b fe2c 	bl	8017e70 <sys_arch_protect>
 800c218:	6138      	str	r0, [r7, #16]
 800c21a:	6938      	ldr	r0, [r7, #16]
 800c21c:	f00b fe36 	bl	8017e8c <sys_arch_unprotect>
    return;
 800c220:	e041      	b.n	800c2a6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c222:	4828      	ldr	r0, [pc, #160]	; (800c2c4 <mem_free+0x110>)
 800c224:	f00b fde8 	bl	8017df8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	791b      	ldrb	r3, [r3, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d110      	bne.n	800c252 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c230:	4b1e      	ldr	r3, [pc, #120]	; (800c2ac <mem_free+0xf8>)
 800c232:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c236:	4924      	ldr	r1, [pc, #144]	; (800c2c8 <mem_free+0x114>)
 800c238:	481e      	ldr	r0, [pc, #120]	; (800c2b4 <mem_free+0x100>)
 800c23a:	f00c fe71 	bl	8018f20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c23e:	4821      	ldr	r0, [pc, #132]	; (800c2c4 <mem_free+0x110>)
 800c240:	f00b fde9 	bl	8017e16 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c244:	f00b fe14 	bl	8017e70 <sys_arch_protect>
 800c248:	6178      	str	r0, [r7, #20]
 800c24a:	6978      	ldr	r0, [r7, #20]
 800c24c:	f00b fe1e 	bl	8017e8c <sys_arch_unprotect>
    return;
 800c250:	e029      	b.n	800c2a6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c252:	69f8      	ldr	r0, [r7, #28]
 800c254:	f7ff ff72 	bl	800c13c <mem_link_valid>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d110      	bne.n	800c280 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c25e:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <mem_free+0xf8>)
 800c260:	f240 2295 	movw	r2, #661	; 0x295
 800c264:	4919      	ldr	r1, [pc, #100]	; (800c2cc <mem_free+0x118>)
 800c266:	4813      	ldr	r0, [pc, #76]	; (800c2b4 <mem_free+0x100>)
 800c268:	f00c fe5a 	bl	8018f20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c26c:	4815      	ldr	r0, [pc, #84]	; (800c2c4 <mem_free+0x110>)
 800c26e:	f00b fdd2 	bl	8017e16 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c272:	f00b fdfd 	bl	8017e70 <sys_arch_protect>
 800c276:	61b8      	str	r0, [r7, #24]
 800c278:	69b8      	ldr	r0, [r7, #24]
 800c27a:	f00b fe07 	bl	8017e8c <sys_arch_unprotect>
    return;
 800c27e:	e012      	b.n	800c2a6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	2200      	movs	r2, #0
 800c284:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c286:	4b12      	ldr	r3, [pc, #72]	; (800c2d0 <mem_free+0x11c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	69fa      	ldr	r2, [r7, #28]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d202      	bcs.n	800c296 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c290:	4a0f      	ldr	r2, [pc, #60]	; (800c2d0 <mem_free+0x11c>)
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c296:	69f8      	ldr	r0, [r7, #28]
 800c298:	f7ff fe60 	bl	800bf5c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c29c:	4809      	ldr	r0, [pc, #36]	; (800c2c4 <mem_free+0x110>)
 800c29e:	f00b fdba 	bl	8017e16 <sys_mutex_unlock>
 800c2a2:	e000      	b.n	800c2a6 <mem_free+0xf2>
    return;
 800c2a4:	bf00      	nop
}
 800c2a6:	3720      	adds	r7, #32
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	08019c00 	.word	0x08019c00
 800c2b0:	08019cf0 	.word	0x08019cf0
 800c2b4:	08019c48 	.word	0x08019c48
 800c2b8:	20009844 	.word	0x20009844
 800c2bc:	20009848 	.word	0x20009848
 800c2c0:	08019d14 	.word	0x08019d14
 800c2c4:	2000984c 	.word	0x2000984c
 800c2c8:	08019d30 	.word	0x08019d30
 800c2cc:	08019d58 	.word	0x08019d58
 800c2d0:	20009850 	.word	0x20009850

0800c2d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c2e0:	887b      	ldrh	r3, [r7, #2]
 800c2e2:	3303      	adds	r3, #3
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	f023 0303 	bic.w	r3, r3, #3
 800c2ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c2ec:	8bfb      	ldrh	r3, [r7, #30]
 800c2ee:	2b0b      	cmp	r3, #11
 800c2f0:	d801      	bhi.n	800c2f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c2f2:	230c      	movs	r3, #12
 800c2f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c2f6:	8bfb      	ldrh	r3, [r7, #30]
 800c2f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2fc:	d803      	bhi.n	800c306 <mem_trim+0x32>
 800c2fe:	8bfa      	ldrh	r2, [r7, #30]
 800c300:	887b      	ldrh	r3, [r7, #2]
 800c302:	429a      	cmp	r2, r3
 800c304:	d201      	bcs.n	800c30a <mem_trim+0x36>
    return NULL;
 800c306:	2300      	movs	r3, #0
 800c308:	e0d8      	b.n	800c4bc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c30a:	4b6e      	ldr	r3, [pc, #440]	; (800c4c4 <mem_trim+0x1f0>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	429a      	cmp	r2, r3
 800c312:	d304      	bcc.n	800c31e <mem_trim+0x4a>
 800c314:	4b6c      	ldr	r3, [pc, #432]	; (800c4c8 <mem_trim+0x1f4>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d306      	bcc.n	800c32c <mem_trim+0x58>
 800c31e:	4b6b      	ldr	r3, [pc, #428]	; (800c4cc <mem_trim+0x1f8>)
 800c320:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c324:	496a      	ldr	r1, [pc, #424]	; (800c4d0 <mem_trim+0x1fc>)
 800c326:	486b      	ldr	r0, [pc, #428]	; (800c4d4 <mem_trim+0x200>)
 800c328:	f00c fdfa 	bl	8018f20 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c32c:	4b65      	ldr	r3, [pc, #404]	; (800c4c4 <mem_trim+0x1f0>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	429a      	cmp	r2, r3
 800c334:	d304      	bcc.n	800c340 <mem_trim+0x6c>
 800c336:	4b64      	ldr	r3, [pc, #400]	; (800c4c8 <mem_trim+0x1f4>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d307      	bcc.n	800c350 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c340:	f00b fd96 	bl	8017e70 <sys_arch_protect>
 800c344:	60b8      	str	r0, [r7, #8]
 800c346:	68b8      	ldr	r0, [r7, #8]
 800c348:	f00b fda0 	bl	8017e8c <sys_arch_unprotect>
    return rmem;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	e0b5      	b.n	800c4bc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3b08      	subs	r3, #8
 800c354:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c356:	69b8      	ldr	r0, [r7, #24]
 800c358:	f7ff fdf0 	bl	800bf3c <mem_to_ptr>
 800c35c:	4603      	mov	r3, r0
 800c35e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	881a      	ldrh	r2, [r3, #0]
 800c364:	8afb      	ldrh	r3, [r7, #22]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	b29b      	uxth	r3, r3
 800c36a:	3b08      	subs	r3, #8
 800c36c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c36e:	8bfa      	ldrh	r2, [r7, #30]
 800c370:	8abb      	ldrh	r3, [r7, #20]
 800c372:	429a      	cmp	r2, r3
 800c374:	d906      	bls.n	800c384 <mem_trim+0xb0>
 800c376:	4b55      	ldr	r3, [pc, #340]	; (800c4cc <mem_trim+0x1f8>)
 800c378:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c37c:	4956      	ldr	r1, [pc, #344]	; (800c4d8 <mem_trim+0x204>)
 800c37e:	4855      	ldr	r0, [pc, #340]	; (800c4d4 <mem_trim+0x200>)
 800c380:	f00c fdce 	bl	8018f20 <iprintf>
  if (newsize > size) {
 800c384:	8bfa      	ldrh	r2, [r7, #30]
 800c386:	8abb      	ldrh	r3, [r7, #20]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d901      	bls.n	800c390 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e095      	b.n	800c4bc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c390:	8bfa      	ldrh	r2, [r7, #30]
 800c392:	8abb      	ldrh	r3, [r7, #20]
 800c394:	429a      	cmp	r2, r3
 800c396:	d101      	bne.n	800c39c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	e08f      	b.n	800c4bc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c39c:	484f      	ldr	r0, [pc, #316]	; (800c4dc <mem_trim+0x208>)
 800c39e:	f00b fd2b 	bl	8017df8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff fdb8 	bl	800bf1c <ptr_to_mem>
 800c3ac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	791b      	ldrb	r3, [r3, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d13f      	bne.n	800c436 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3be:	d106      	bne.n	800c3ce <mem_trim+0xfa>
 800c3c0:	4b42      	ldr	r3, [pc, #264]	; (800c4cc <mem_trim+0x1f8>)
 800c3c2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c3c6:	4946      	ldr	r1, [pc, #280]	; (800c4e0 <mem_trim+0x20c>)
 800c3c8:	4842      	ldr	r0, [pc, #264]	; (800c4d4 <mem_trim+0x200>)
 800c3ca:	f00c fda9 	bl	8018f20 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c3d4:	8afa      	ldrh	r2, [r7, #22]
 800c3d6:	8bfb      	ldrh	r3, [r7, #30]
 800c3d8:	4413      	add	r3, r2
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	3308      	adds	r3, #8
 800c3de:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c3e0:	4b40      	ldr	r3, [pc, #256]	; (800c4e4 <mem_trim+0x210>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d106      	bne.n	800c3f8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c3ea:	89fb      	ldrh	r3, [r7, #14]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff fd95 	bl	800bf1c <ptr_to_mem>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	4a3b      	ldr	r2, [pc, #236]	; (800c4e4 <mem_trim+0x210>)
 800c3f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c3f8:	89fb      	ldrh	r3, [r7, #14]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff fd8e 	bl	800bf1c <ptr_to_mem>
 800c400:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	2200      	movs	r2, #0
 800c406:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	89ba      	ldrh	r2, [r7, #12]
 800c40c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	8afa      	ldrh	r2, [r7, #22]
 800c412:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	89fa      	ldrh	r2, [r7, #14]
 800c418:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c422:	d047      	beq.n	800c4b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	881b      	ldrh	r3, [r3, #0]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff fd77 	bl	800bf1c <ptr_to_mem>
 800c42e:	4602      	mov	r2, r0
 800c430:	89fb      	ldrh	r3, [r7, #14]
 800c432:	8053      	strh	r3, [r2, #2]
 800c434:	e03e      	b.n	800c4b4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c436:	8bfb      	ldrh	r3, [r7, #30]
 800c438:	f103 0214 	add.w	r2, r3, #20
 800c43c:	8abb      	ldrh	r3, [r7, #20]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d838      	bhi.n	800c4b4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c442:	8afa      	ldrh	r2, [r7, #22]
 800c444:	8bfb      	ldrh	r3, [r7, #30]
 800c446:	4413      	add	r3, r2
 800c448:	b29b      	uxth	r3, r3
 800c44a:	3308      	adds	r3, #8
 800c44c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c456:	d106      	bne.n	800c466 <mem_trim+0x192>
 800c458:	4b1c      	ldr	r3, [pc, #112]	; (800c4cc <mem_trim+0x1f8>)
 800c45a:	f240 3216 	movw	r2, #790	; 0x316
 800c45e:	4920      	ldr	r1, [pc, #128]	; (800c4e0 <mem_trim+0x20c>)
 800c460:	481c      	ldr	r0, [pc, #112]	; (800c4d4 <mem_trim+0x200>)
 800c462:	f00c fd5d 	bl	8018f20 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c466:	89fb      	ldrh	r3, [r7, #14]
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff fd57 	bl	800bf1c <ptr_to_mem>
 800c46e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c470:	4b1c      	ldr	r3, [pc, #112]	; (800c4e4 <mem_trim+0x210>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	429a      	cmp	r2, r3
 800c478:	d202      	bcs.n	800c480 <mem_trim+0x1ac>
      lfree = mem2;
 800c47a:	4a1a      	ldr	r2, [pc, #104]	; (800c4e4 <mem_trim+0x210>)
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	2200      	movs	r2, #0
 800c484:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	881a      	ldrh	r2, [r3, #0]
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	8afa      	ldrh	r2, [r7, #22]
 800c492:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	89fa      	ldrh	r2, [r7, #14]
 800c498:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4a2:	d007      	beq.n	800c4b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff fd37 	bl	800bf1c <ptr_to_mem>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	89fb      	ldrh	r3, [r7, #14]
 800c4b2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c4b4:	4809      	ldr	r0, [pc, #36]	; (800c4dc <mem_trim+0x208>)
 800c4b6:	f00b fcae 	bl	8017e16 <sys_mutex_unlock>
  return rmem;
 800c4ba:	687b      	ldr	r3, [r7, #4]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3720      	adds	r7, #32
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	20009844 	.word	0x20009844
 800c4c8:	20009848 	.word	0x20009848
 800c4cc:	08019c00 	.word	0x08019c00
 800c4d0:	08019d8c 	.word	0x08019d8c
 800c4d4:	08019c48 	.word	0x08019c48
 800c4d8:	08019da4 	.word	0x08019da4
 800c4dc:	2000984c 	.word	0x2000984c
 800c4e0:	08019dc4 	.word	0x08019dc4
 800c4e4:	20009850 	.word	0x20009850

0800c4e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b088      	sub	sp, #32
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c4f2:	88fb      	ldrh	r3, [r7, #6]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d101      	bne.n	800c4fc <mem_malloc+0x14>
    return NULL;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	e0e2      	b.n	800c6c2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c4fc:	88fb      	ldrh	r3, [r7, #6]
 800c4fe:	3303      	adds	r3, #3
 800c500:	b29b      	uxth	r3, r3
 800c502:	f023 0303 	bic.w	r3, r3, #3
 800c506:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c508:	8bbb      	ldrh	r3, [r7, #28]
 800c50a:	2b0b      	cmp	r3, #11
 800c50c:	d801      	bhi.n	800c512 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c50e:	230c      	movs	r3, #12
 800c510:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c512:	8bbb      	ldrh	r3, [r7, #28]
 800c514:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c518:	d803      	bhi.n	800c522 <mem_malloc+0x3a>
 800c51a:	8bba      	ldrh	r2, [r7, #28]
 800c51c:	88fb      	ldrh	r3, [r7, #6]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d201      	bcs.n	800c526 <mem_malloc+0x3e>
    return NULL;
 800c522:	2300      	movs	r3, #0
 800c524:	e0cd      	b.n	800c6c2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c526:	4869      	ldr	r0, [pc, #420]	; (800c6cc <mem_malloc+0x1e4>)
 800c528:	f00b fc66 	bl	8017df8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c52c:	4b68      	ldr	r3, [pc, #416]	; (800c6d0 <mem_malloc+0x1e8>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4618      	mov	r0, r3
 800c532:	f7ff fd03 	bl	800bf3c <mem_to_ptr>
 800c536:	4603      	mov	r3, r0
 800c538:	83fb      	strh	r3, [r7, #30]
 800c53a:	e0b7      	b.n	800c6ac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c53c:	8bfb      	ldrh	r3, [r7, #30]
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff fcec 	bl	800bf1c <ptr_to_mem>
 800c544:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	791b      	ldrb	r3, [r3, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f040 80a7 	bne.w	800c69e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	881b      	ldrh	r3, [r3, #0]
 800c554:	461a      	mov	r2, r3
 800c556:	8bfb      	ldrh	r3, [r7, #30]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	f1a3 0208 	sub.w	r2, r3, #8
 800c55e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c560:	429a      	cmp	r2, r3
 800c562:	f0c0 809c 	bcc.w	800c69e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	461a      	mov	r2, r3
 800c56c:	8bfb      	ldrh	r3, [r7, #30]
 800c56e:	1ad3      	subs	r3, r2, r3
 800c570:	f1a3 0208 	sub.w	r2, r3, #8
 800c574:	8bbb      	ldrh	r3, [r7, #28]
 800c576:	3314      	adds	r3, #20
 800c578:	429a      	cmp	r2, r3
 800c57a:	d333      	bcc.n	800c5e4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c57c:	8bfa      	ldrh	r2, [r7, #30]
 800c57e:	8bbb      	ldrh	r3, [r7, #28]
 800c580:	4413      	add	r3, r2
 800c582:	b29b      	uxth	r3, r3
 800c584:	3308      	adds	r3, #8
 800c586:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c588:	8a7b      	ldrh	r3, [r7, #18]
 800c58a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c58e:	d106      	bne.n	800c59e <mem_malloc+0xb6>
 800c590:	4b50      	ldr	r3, [pc, #320]	; (800c6d4 <mem_malloc+0x1ec>)
 800c592:	f240 3287 	movw	r2, #903	; 0x387
 800c596:	4950      	ldr	r1, [pc, #320]	; (800c6d8 <mem_malloc+0x1f0>)
 800c598:	4850      	ldr	r0, [pc, #320]	; (800c6dc <mem_malloc+0x1f4>)
 800c59a:	f00c fcc1 	bl	8018f20 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c59e:	8a7b      	ldrh	r3, [r7, #18]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff fcbb 	bl	800bf1c <ptr_to_mem>
 800c5a6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	881a      	ldrh	r2, [r3, #0]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	8bfa      	ldrh	r2, [r7, #30]
 800c5ba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	8a7a      	ldrh	r2, [r7, #18]
 800c5c0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5d0:	d00b      	beq.n	800c5ea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff fca0 	bl	800bf1c <ptr_to_mem>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	8a7b      	ldrh	r3, [r7, #18]
 800c5e0:	8053      	strh	r3, [r2, #2]
 800c5e2:	e002      	b.n	800c5ea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c5ea:	4b39      	ldr	r3, [pc, #228]	; (800c6d0 <mem_malloc+0x1e8>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d127      	bne.n	800c644 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c5f4:	4b36      	ldr	r3, [pc, #216]	; (800c6d0 <mem_malloc+0x1e8>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c5fa:	e005      	b.n	800c608 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff fc8b 	bl	800bf1c <ptr_to_mem>
 800c606:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	791b      	ldrb	r3, [r3, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d004      	beq.n	800c61a <mem_malloc+0x132>
 800c610:	4b33      	ldr	r3, [pc, #204]	; (800c6e0 <mem_malloc+0x1f8>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	69ba      	ldr	r2, [r7, #24]
 800c616:	429a      	cmp	r2, r3
 800c618:	d1f0      	bne.n	800c5fc <mem_malloc+0x114>
          }
          lfree = cur;
 800c61a:	4a2d      	ldr	r2, [pc, #180]	; (800c6d0 <mem_malloc+0x1e8>)
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c620:	4b2b      	ldr	r3, [pc, #172]	; (800c6d0 <mem_malloc+0x1e8>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	4b2e      	ldr	r3, [pc, #184]	; (800c6e0 <mem_malloc+0x1f8>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d00b      	beq.n	800c644 <mem_malloc+0x15c>
 800c62c:	4b28      	ldr	r3, [pc, #160]	; (800c6d0 <mem_malloc+0x1e8>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	791b      	ldrb	r3, [r3, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d006      	beq.n	800c644 <mem_malloc+0x15c>
 800c636:	4b27      	ldr	r3, [pc, #156]	; (800c6d4 <mem_malloc+0x1ec>)
 800c638:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c63c:	4929      	ldr	r1, [pc, #164]	; (800c6e4 <mem_malloc+0x1fc>)
 800c63e:	4827      	ldr	r0, [pc, #156]	; (800c6dc <mem_malloc+0x1f4>)
 800c640:	f00c fc6e 	bl	8018f20 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c644:	4821      	ldr	r0, [pc, #132]	; (800c6cc <mem_malloc+0x1e4>)
 800c646:	f00b fbe6 	bl	8017e16 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c64a:	8bba      	ldrh	r2, [r7, #28]
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	4413      	add	r3, r2
 800c650:	3308      	adds	r3, #8
 800c652:	4a23      	ldr	r2, [pc, #140]	; (800c6e0 <mem_malloc+0x1f8>)
 800c654:	6812      	ldr	r2, [r2, #0]
 800c656:	4293      	cmp	r3, r2
 800c658:	d906      	bls.n	800c668 <mem_malloc+0x180>
 800c65a:	4b1e      	ldr	r3, [pc, #120]	; (800c6d4 <mem_malloc+0x1ec>)
 800c65c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c660:	4921      	ldr	r1, [pc, #132]	; (800c6e8 <mem_malloc+0x200>)
 800c662:	481e      	ldr	r0, [pc, #120]	; (800c6dc <mem_malloc+0x1f4>)
 800c664:	f00c fc5c 	bl	8018f20 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	f003 0303 	and.w	r3, r3, #3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d006      	beq.n	800c680 <mem_malloc+0x198>
 800c672:	4b18      	ldr	r3, [pc, #96]	; (800c6d4 <mem_malloc+0x1ec>)
 800c674:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c678:	491c      	ldr	r1, [pc, #112]	; (800c6ec <mem_malloc+0x204>)
 800c67a:	4818      	ldr	r0, [pc, #96]	; (800c6dc <mem_malloc+0x1f4>)
 800c67c:	f00c fc50 	bl	8018f20 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f003 0303 	and.w	r3, r3, #3
 800c686:	2b00      	cmp	r3, #0
 800c688:	d006      	beq.n	800c698 <mem_malloc+0x1b0>
 800c68a:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <mem_malloc+0x1ec>)
 800c68c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c690:	4917      	ldr	r1, [pc, #92]	; (800c6f0 <mem_malloc+0x208>)
 800c692:	4812      	ldr	r0, [pc, #72]	; (800c6dc <mem_malloc+0x1f4>)
 800c694:	f00c fc44 	bl	8018f20 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	3308      	adds	r3, #8
 800c69c:	e011      	b.n	800c6c2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c69e:	8bfb      	ldrh	r3, [r7, #30]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7ff fc3b 	bl	800bf1c <ptr_to_mem>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c6ac:	8bfa      	ldrh	r2, [r7, #30]
 800c6ae:	8bbb      	ldrh	r3, [r7, #28]
 800c6b0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	f4ff af41 	bcc.w	800c53c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c6ba:	4804      	ldr	r0, [pc, #16]	; (800c6cc <mem_malloc+0x1e4>)
 800c6bc:	f00b fbab 	bl	8017e16 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3720      	adds	r7, #32
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	2000984c 	.word	0x2000984c
 800c6d0:	20009850 	.word	0x20009850
 800c6d4:	08019c00 	.word	0x08019c00
 800c6d8:	08019dc4 	.word	0x08019dc4
 800c6dc:	08019c48 	.word	0x08019c48
 800c6e0:	20009848 	.word	0x20009848
 800c6e4:	08019dd8 	.word	0x08019dd8
 800c6e8:	08019df4 	.word	0x08019df4
 800c6ec:	08019e24 	.word	0x08019e24
 800c6f0:	08019e54 	.word	0x08019e54

0800c6f4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	2200      	movs	r2, #0
 800c702:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	3303      	adds	r3, #3
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	e011      	b.n	800c73a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	881b      	ldrh	r3, [r3, #0]
 800c72c:	461a      	mov	r2, r3
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	4413      	add	r3, r2
 800c732:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	3301      	adds	r3, #1
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	885b      	ldrh	r3, [r3, #2]
 800c73e:	461a      	mov	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	4293      	cmp	r3, r2
 800c744:	dbe7      	blt.n	800c716 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c746:	bf00      	nop
 800c748:	bf00      	nop
 800c74a:	3714      	adds	r7, #20
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bc80      	pop	{r7}
 800c750:	4770      	bx	lr
	...

0800c754 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c75a:	2300      	movs	r3, #0
 800c75c:	80fb      	strh	r3, [r7, #6]
 800c75e:	e009      	b.n	800c774 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c760:	88fb      	ldrh	r3, [r7, #6]
 800c762:	4a08      	ldr	r2, [pc, #32]	; (800c784 <memp_init+0x30>)
 800c764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff ffc3 	bl	800c6f4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c76e:	88fb      	ldrh	r3, [r7, #6]
 800c770:	3301      	adds	r3, #1
 800c772:	80fb      	strh	r3, [r7, #6]
 800c774:	88fb      	ldrh	r3, [r7, #6]
 800c776:	2b0c      	cmp	r3, #12
 800c778:	d9f2      	bls.n	800c760 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c77a:	bf00      	nop
 800c77c:	bf00      	nop
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	0801ca74 	.word	0x0801ca74

0800c788 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c790:	f00b fb6e 	bl	8017e70 <sys_arch_protect>
 800c794:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d015      	beq.n	800c7d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	6812      	ldr	r2, [r2, #0]
 800c7ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	f003 0303 	and.w	r3, r3, #3
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d006      	beq.n	800c7c6 <do_memp_malloc_pool+0x3e>
 800c7b8:	4b09      	ldr	r3, [pc, #36]	; (800c7e0 <do_memp_malloc_pool+0x58>)
 800c7ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c7be:	4909      	ldr	r1, [pc, #36]	; (800c7e4 <do_memp_malloc_pool+0x5c>)
 800c7c0:	4809      	ldr	r0, [pc, #36]	; (800c7e8 <do_memp_malloc_pool+0x60>)
 800c7c2:	f00c fbad 	bl	8018f20 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f00b fb60 	bl	8017e8c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	e003      	b.n	800c7d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f00b fb5b 	bl	8017e8c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	08019e78 	.word	0x08019e78
 800c7e4:	08019ea8 	.word	0x08019ea8
 800c7e8:	08019ecc 	.word	0x08019ecc

0800c7ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d106      	bne.n	800c808 <memp_malloc_pool+0x1c>
 800c7fa:	4b0a      	ldr	r3, [pc, #40]	; (800c824 <memp_malloc_pool+0x38>)
 800c7fc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c800:	4909      	ldr	r1, [pc, #36]	; (800c828 <memp_malloc_pool+0x3c>)
 800c802:	480a      	ldr	r0, [pc, #40]	; (800c82c <memp_malloc_pool+0x40>)
 800c804:	f00c fb8c 	bl	8018f20 <iprintf>
  if (desc == NULL) {
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <memp_malloc_pool+0x26>
    return NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	e003      	b.n	800c81a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7ff ffb8 	bl	800c788 <do_memp_malloc_pool>
 800c818:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	08019e78 	.word	0x08019e78
 800c828:	08019ef4 	.word	0x08019ef4
 800c82c:	08019ecc 	.word	0x08019ecc

0800c830 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c83a:	79fb      	ldrb	r3, [r7, #7]
 800c83c:	2b0c      	cmp	r3, #12
 800c83e:	d908      	bls.n	800c852 <memp_malloc+0x22>
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <memp_malloc+0x3c>)
 800c842:	f240 1257 	movw	r2, #343	; 0x157
 800c846:	490a      	ldr	r1, [pc, #40]	; (800c870 <memp_malloc+0x40>)
 800c848:	480a      	ldr	r0, [pc, #40]	; (800c874 <memp_malloc+0x44>)
 800c84a:	f00c fb69 	bl	8018f20 <iprintf>
 800c84e:	2300      	movs	r3, #0
 800c850:	e008      	b.n	800c864 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	4a08      	ldr	r2, [pc, #32]	; (800c878 <memp_malloc+0x48>)
 800c856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff ff94 	bl	800c788 <do_memp_malloc_pool>
 800c860:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c862:	68fb      	ldr	r3, [r7, #12]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	08019e78 	.word	0x08019e78
 800c870:	08019f08 	.word	0x08019f08
 800c874:	08019ecc 	.word	0x08019ecc
 800c878:	0801ca74 	.word	0x0801ca74

0800c87c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	f003 0303 	and.w	r3, r3, #3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d006      	beq.n	800c89e <do_memp_free_pool+0x22>
 800c890:	4b0d      	ldr	r3, [pc, #52]	; (800c8c8 <do_memp_free_pool+0x4c>)
 800c892:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c896:	490d      	ldr	r1, [pc, #52]	; (800c8cc <do_memp_free_pool+0x50>)
 800c898:	480d      	ldr	r0, [pc, #52]	; (800c8d0 <do_memp_free_pool+0x54>)
 800c89a:	f00c fb41 	bl	8018f20 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c8a2:	f00b fae5 	bl	8017e70 <sys_arch_protect>
 800c8a6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c8ba:	68b8      	ldr	r0, [r7, #8]
 800c8bc:	f00b fae6 	bl	8017e8c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c8c0:	bf00      	nop
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	08019e78 	.word	0x08019e78
 800c8cc:	08019f28 	.word	0x08019f28
 800c8d0:	08019ecc 	.word	0x08019ecc

0800c8d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d106      	bne.n	800c8f2 <memp_free_pool+0x1e>
 800c8e4:	4b0a      	ldr	r3, [pc, #40]	; (800c910 <memp_free_pool+0x3c>)
 800c8e6:	f240 1295 	movw	r2, #405	; 0x195
 800c8ea:	490a      	ldr	r1, [pc, #40]	; (800c914 <memp_free_pool+0x40>)
 800c8ec:	480a      	ldr	r0, [pc, #40]	; (800c918 <memp_free_pool+0x44>)
 800c8ee:	f00c fb17 	bl	8018f20 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d007      	beq.n	800c908 <memp_free_pool+0x34>
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d004      	beq.n	800c908 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c8fe:	6839      	ldr	r1, [r7, #0]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff ffbb 	bl	800c87c <do_memp_free_pool>
 800c906:	e000      	b.n	800c90a <memp_free_pool+0x36>
    return;
 800c908:	bf00      	nop
}
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	08019e78 	.word	0x08019e78
 800c914:	08019ef4 	.word	0x08019ef4
 800c918:	08019ecc 	.word	0x08019ecc

0800c91c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	4603      	mov	r3, r0
 800c924:	6039      	str	r1, [r7, #0]
 800c926:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c928:	79fb      	ldrb	r3, [r7, #7]
 800c92a:	2b0c      	cmp	r3, #12
 800c92c:	d907      	bls.n	800c93e <memp_free+0x22>
 800c92e:	4b0c      	ldr	r3, [pc, #48]	; (800c960 <memp_free+0x44>)
 800c930:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c934:	490b      	ldr	r1, [pc, #44]	; (800c964 <memp_free+0x48>)
 800c936:	480c      	ldr	r0, [pc, #48]	; (800c968 <memp_free+0x4c>)
 800c938:	f00c faf2 	bl	8018f20 <iprintf>
 800c93c:	e00c      	b.n	800c958 <memp_free+0x3c>

  if (mem == NULL) {
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d008      	beq.n	800c956 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	4a09      	ldr	r2, [pc, #36]	; (800c96c <memp_free+0x50>)
 800c948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff ff94 	bl	800c87c <do_memp_free_pool>
 800c954:	e000      	b.n	800c958 <memp_free+0x3c>
    return;
 800c956:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	08019e78 	.word	0x08019e78
 800c964:	08019f48 	.word	0x08019f48
 800c968:	08019ecc 	.word	0x08019ecc
 800c96c:	0801ca74 	.word	0x0801ca74

0800c970 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c974:	bf00      	nop
 800c976:	46bd      	mov	sp, r7
 800c978:	bc80      	pop	{r7}
 800c97a:	4770      	bx	lr

0800c97c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
 800c988:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d108      	bne.n	800c9a2 <netif_add+0x26>
 800c990:	4b5b      	ldr	r3, [pc, #364]	; (800cb00 <netif_add+0x184>)
 800c992:	f240 1227 	movw	r2, #295	; 0x127
 800c996:	495b      	ldr	r1, [pc, #364]	; (800cb04 <netif_add+0x188>)
 800c998:	485b      	ldr	r0, [pc, #364]	; (800cb08 <netif_add+0x18c>)
 800c99a:	f00c fac1 	bl	8018f20 <iprintf>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e0a9      	b.n	800caf6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d108      	bne.n	800c9ba <netif_add+0x3e>
 800c9a8:	4b55      	ldr	r3, [pc, #340]	; (800cb00 <netif_add+0x184>)
 800c9aa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c9ae:	4957      	ldr	r1, [pc, #348]	; (800cb0c <netif_add+0x190>)
 800c9b0:	4855      	ldr	r0, [pc, #340]	; (800cb08 <netif_add+0x18c>)
 800c9b2:	f00c fab5 	bl	8018f20 <iprintf>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e09d      	b.n	800caf6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d101      	bne.n	800c9c4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c9c0:	4b53      	ldr	r3, [pc, #332]	; (800cb10 <netif_add+0x194>)
 800c9c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c9ca:	4b51      	ldr	r3, [pc, #324]	; (800cb10 <netif_add+0x194>)
 800c9cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c9d4:	4b4e      	ldr	r3, [pc, #312]	; (800cb10 <netif_add+0x194>)
 800c9d6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	4a49      	ldr	r2, [pc, #292]	; (800cb14 <netif_add+0x198>)
 800c9ee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3324      	adds	r3, #36	; 0x24
 800ca02:	2204      	movs	r2, #4
 800ca04:	2100      	movs	r1, #0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f00c f9a4 	bl	8018d54 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6a3a      	ldr	r2, [r7, #32]
 800ca16:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ca18:	4b3f      	ldr	r3, [pc, #252]	; (800cb18 <netif_add+0x19c>)
 800ca1a:	781a      	ldrb	r2, [r3, #0]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca26:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	68b9      	ldr	r1, [r7, #8]
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f000 f912 	bl	800cc58 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	4798      	blx	r3
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <netif_add+0xc8>
    return NULL;
 800ca40:	2300      	movs	r3, #0
 800ca42:	e058      	b.n	800caf6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca4a:	2bff      	cmp	r3, #255	; 0xff
 800ca4c:	d103      	bne.n	800ca56 <netif_add+0xda>
        netif->num = 0;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ca5a:	4b30      	ldr	r3, [pc, #192]	; (800cb1c <netif_add+0x1a0>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	617b      	str	r3, [r7, #20]
 800ca60:	e02b      	b.n	800caba <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ca62:	697a      	ldr	r2, [r7, #20]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d106      	bne.n	800ca78 <netif_add+0xfc>
 800ca6a:	4b25      	ldr	r3, [pc, #148]	; (800cb00 <netif_add+0x184>)
 800ca6c:	f240 128b 	movw	r2, #395	; 0x18b
 800ca70:	492b      	ldr	r1, [pc, #172]	; (800cb20 <netif_add+0x1a4>)
 800ca72:	4825      	ldr	r0, [pc, #148]	; (800cb08 <netif_add+0x18c>)
 800ca74:	f00c fa54 	bl	8018f20 <iprintf>
        num_netifs++;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	2bff      	cmp	r3, #255	; 0xff
 800ca82:	dd06      	ble.n	800ca92 <netif_add+0x116>
 800ca84:	4b1e      	ldr	r3, [pc, #120]	; (800cb00 <netif_add+0x184>)
 800ca86:	f240 128d 	movw	r2, #397	; 0x18d
 800ca8a:	4926      	ldr	r1, [pc, #152]	; (800cb24 <netif_add+0x1a8>)
 800ca8c:	481e      	ldr	r0, [pc, #120]	; (800cb08 <netif_add+0x18c>)
 800ca8e:	f00c fa47 	bl	8018f20 <iprintf>
        if (netif2->num == netif->num) {
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d108      	bne.n	800cab4 <netif_add+0x138>
          netif->num++;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caa8:	3301      	adds	r3, #1
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cab2:	e005      	b.n	800cac0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	617b      	str	r3, [r7, #20]
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1d0      	bne.n	800ca62 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1be      	bne.n	800ca44 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cacc:	2bfe      	cmp	r3, #254	; 0xfe
 800cace:	d103      	bne.n	800cad8 <netif_add+0x15c>
    netif_num = 0;
 800cad0:	4b11      	ldr	r3, [pc, #68]	; (800cb18 <netif_add+0x19c>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	701a      	strb	r2, [r3, #0]
 800cad6:	e006      	b.n	800cae6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cade:	3301      	adds	r3, #1
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	4b0d      	ldr	r3, [pc, #52]	; (800cb18 <netif_add+0x19c>)
 800cae4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cae6:	4b0d      	ldr	r3, [pc, #52]	; (800cb1c <netif_add+0x1a0>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800caee:	4a0b      	ldr	r2, [pc, #44]	; (800cb1c <netif_add+0x1a0>)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800caf4:	68fb      	ldr	r3, [r7, #12]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	08019f64 	.word	0x08019f64
 800cb04:	08019ff8 	.word	0x08019ff8
 800cb08:	08019fb4 	.word	0x08019fb4
 800cb0c:	0801a014 	.word	0x0801a014
 800cb10:	0801caf8 	.word	0x0801caf8
 800cb14:	0800ce65 	.word	0x0800ce65
 800cb18:	2000c948 	.word	0x2000c948
 800cb1c:	2000c940 	.word	0x2000c940
 800cb20:	0801a038 	.word	0x0801a038
 800cb24:	0801a04c 	.word	0x0801a04c

0800cb28 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f002 fb1f 	bl	800f178 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f006 ff35 	bl	80139ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d106      	bne.n	800cb6c <netif_do_set_ipaddr+0x20>
 800cb5e:	4b1d      	ldr	r3, [pc, #116]	; (800cbd4 <netif_do_set_ipaddr+0x88>)
 800cb60:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cb64:	491c      	ldr	r1, [pc, #112]	; (800cbd8 <netif_do_set_ipaddr+0x8c>)
 800cb66:	481d      	ldr	r0, [pc, #116]	; (800cbdc <netif_do_set_ipaddr+0x90>)
 800cb68:	f00c f9da 	bl	8018f20 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <netif_do_set_ipaddr+0x34>
 800cb72:	4b18      	ldr	r3, [pc, #96]	; (800cbd4 <netif_do_set_ipaddr+0x88>)
 800cb74:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cb78:	4917      	ldr	r1, [pc, #92]	; (800cbd8 <netif_do_set_ipaddr+0x8c>)
 800cb7a:	4818      	ldr	r0, [pc, #96]	; (800cbdc <netif_do_set_ipaddr+0x90>)
 800cb7c:	f00c f9d0 	bl	8018f20 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	3304      	adds	r3, #4
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d01c      	beq.n	800cbc8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3304      	adds	r3, #4
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cb9e:	f107 0314 	add.w	r3, r7, #20
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff ffbf 	bl	800cb28 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <netif_do_set_ipaddr+0x6a>
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	e000      	b.n	800cbb8 <netif_do_set_ipaddr+0x6c>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f000 f8ce 	bl	800cd60 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e000      	b.n	800cbca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	08019f64 	.word	0x08019f64
 800cbd8:	0801a07c 	.word	0x0801a07c
 800cbdc:	08019fb4 	.word	0x08019fb4

0800cbe0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d00a      	beq.n	800cc10 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <netif_do_set_netmask+0x26>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	e000      	b.n	800cc08 <netif_do_set_netmask+0x28>
 800cc06:	2300      	movs	r3, #0
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e000      	b.n	800cc12 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bc80      	pop	{r7}
 800cc1a:	4770      	bx	lr

0800cc1c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	330c      	adds	r3, #12
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d00a      	beq.n	800cc4c <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <netif_do_set_gw+0x26>
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	e000      	b.n	800cc44 <netif_do_set_gw+0x28>
 800cc42:	2300      	movs	r3, #0
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e000      	b.n	800cc4e <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bc80      	pop	{r7}
 800cc56:	4770      	bx	lr

0800cc58 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b088      	sub	sp, #32
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cc74:	4b1c      	ldr	r3, [pc, #112]	; (800cce8 <netif_set_addr+0x90>)
 800cc76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d101      	bne.n	800cc82 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cc7e:	4b1a      	ldr	r3, [pc, #104]	; (800cce8 <netif_set_addr+0x90>)
 800cc80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cc88:	4b17      	ldr	r3, [pc, #92]	; (800cce8 <netif_set_addr+0x90>)
 800cc8a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d003      	beq.n	800cc9a <netif_set_addr+0x42>
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <netif_set_addr+0x46>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e000      	b.n	800cca0 <netif_set_addr+0x48>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d006      	beq.n	800ccb6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cca8:	f107 0310 	add.w	r3, r7, #16
 800ccac:	461a      	mov	r2, r3
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f7ff ff4b 	bl	800cb4c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ccb6:	69fa      	ldr	r2, [r7, #28]
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f7ff ff90 	bl	800cbe0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ccc0:	69ba      	ldr	r2, [r7, #24]
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f7ff ffa9 	bl	800cc1c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d106      	bne.n	800ccde <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ccd0:	f107 0310 	add.w	r3, r7, #16
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	68b9      	ldr	r1, [r7, #8]
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f7ff ff37 	bl	800cb4c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ccde:	bf00      	nop
 800cce0:	3720      	adds	r7, #32
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	0801caf8 	.word	0x0801caf8

0800ccec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ccf4:	4a03      	ldr	r2, [pc, #12]	; (800cd04 <netif_set_default+0x18>)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ccfa:	bf00      	nop
 800ccfc:	370c      	adds	r7, #12
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bc80      	pop	{r7}
 800cd02:	4770      	bx	lr
 800cd04:	2000c944 	.word	0x2000c944

0800cd08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d107      	bne.n	800cd26 <netif_set_up+0x1e>
 800cd16:	4b0f      	ldr	r3, [pc, #60]	; (800cd54 <netif_set_up+0x4c>)
 800cd18:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cd1c:	490e      	ldr	r1, [pc, #56]	; (800cd58 <netif_set_up+0x50>)
 800cd1e:	480f      	ldr	r0, [pc, #60]	; (800cd5c <netif_set_up+0x54>)
 800cd20:	f00c f8fe 	bl	8018f20 <iprintf>
 800cd24:	e013      	b.n	800cd4e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10c      	bne.n	800cd4e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd3a:	f043 0301 	orr.w	r3, r3, #1
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cd46:	2103      	movs	r1, #3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f809 	bl	800cd60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	08019f64 	.word	0x08019f64
 800cd58:	0801a0ec 	.word	0x0801a0ec
 800cd5c:	08019fb4 	.word	0x08019fb4

0800cd60 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d106      	bne.n	800cd80 <netif_issue_reports+0x20>
 800cd72:	4b18      	ldr	r3, [pc, #96]	; (800cdd4 <netif_issue_reports+0x74>)
 800cd74:	f240 326d 	movw	r2, #877	; 0x36d
 800cd78:	4917      	ldr	r1, [pc, #92]	; (800cdd8 <netif_issue_reports+0x78>)
 800cd7a:	4818      	ldr	r0, [pc, #96]	; (800cddc <netif_issue_reports+0x7c>)
 800cd7c:	f00c f8d0 	bl	8018f20 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd86:	f003 0304 	and.w	r3, r3, #4
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d01e      	beq.n	800cdcc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd94:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d017      	beq.n	800cdcc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	f003 0301 	and.w	r3, r3, #1
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d013      	beq.n	800cdce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00e      	beq.n	800cdce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cdb6:	f003 0308 	and.w	r3, r3, #8
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d007      	beq.n	800cdce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f009 fbb3 	bl	8016530 <etharp_request>
 800cdca:	e000      	b.n	800cdce <netif_issue_reports+0x6e>
    return;
 800cdcc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	08019f64 	.word	0x08019f64
 800cdd8:	0801a108 	.word	0x0801a108
 800cddc:	08019fb4 	.word	0x08019fb4

0800cde0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d107      	bne.n	800cdfe <netif_set_down+0x1e>
 800cdee:	4b12      	ldr	r3, [pc, #72]	; (800ce38 <netif_set_down+0x58>)
 800cdf0:	f240 329b 	movw	r2, #923	; 0x39b
 800cdf4:	4911      	ldr	r1, [pc, #68]	; (800ce3c <netif_set_down+0x5c>)
 800cdf6:	4812      	ldr	r0, [pc, #72]	; (800ce40 <netif_set_down+0x60>)
 800cdf8:	f00c f892 	bl	8018f20 <iprintf>
 800cdfc:	e019      	b.n	800ce32 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce04:	f003 0301 	and.w	r3, r3, #1
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d012      	beq.n	800ce32 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce12:	f023 0301 	bic.w	r3, r3, #1
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce24:	f003 0308 	and.w	r3, r3, #8
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f008 ff39 	bl	8015ca4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	08019f64 	.word	0x08019f64
 800ce3c:	0801a12c 	.word	0x0801a12c
 800ce40:	08019fb4 	.word	0x08019fb4

0800ce44 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d002      	beq.n	800ce5a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	61da      	str	r2, [r3, #28]
  }
}
 800ce5a:	bf00      	nop
 800ce5c:	370c      	adds	r7, #12
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bc80      	pop	{r7}
 800ce62:	4770      	bx	lr

0800ce64 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ce70:	f06f 030b 	mvn.w	r3, #11
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bc80      	pop	{r7}
 800ce7c:	4770      	bx	lr
	...

0800ce80 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ce8a:	79fb      	ldrb	r3, [r7, #7]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d013      	beq.n	800ceb8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ce90:	4b0c      	ldr	r3, [pc, #48]	; (800cec4 <netif_get_by_index+0x44>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	60fb      	str	r3, [r7, #12]
 800ce96:	e00c      	b.n	800ceb2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce9e:	3301      	adds	r3, #1
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	79fa      	ldrb	r2, [r7, #7]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d101      	bne.n	800ceac <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	e006      	b.n	800ceba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	60fb      	str	r3, [r7, #12]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1ef      	bne.n	800ce98 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3714      	adds	r7, #20
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bc80      	pop	{r7}
 800cec2:	4770      	bx	lr
 800cec4:	2000c940 	.word	0x2000c940

0800cec8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cece:	f00a ffcf 	bl	8017e70 <sys_arch_protect>
 800ced2:	6038      	str	r0, [r7, #0]
 800ced4:	4b0d      	ldr	r3, [pc, #52]	; (800cf0c <pbuf_free_ooseq+0x44>)
 800ced6:	2200      	movs	r2, #0
 800ced8:	701a      	strb	r2, [r3, #0]
 800ceda:	6838      	ldr	r0, [r7, #0]
 800cedc:	f00a ffd6 	bl	8017e8c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cee0:	4b0b      	ldr	r3, [pc, #44]	; (800cf10 <pbuf_free_ooseq+0x48>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	607b      	str	r3, [r7, #4]
 800cee6:	e00a      	b.n	800cefe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f002 f97f 	bl	800f1f4 <tcp_free_ooseq>
      return;
 800cef6:	e005      	b.n	800cf04 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	607b      	str	r3, [r7, #4]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1f1      	bne.n	800cee8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	2000c949 	.word	0x2000c949
 800cf10:	2000c958 	.word	0x2000c958

0800cf14 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cf1c:	f7ff ffd4 	bl	800cec8 <pbuf_free_ooseq>
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cf2e:	f00a ff9f 	bl	8017e70 <sys_arch_protect>
 800cf32:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cf34:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <pbuf_pool_is_empty+0x4c>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cf3a:	4b0e      	ldr	r3, [pc, #56]	; (800cf74 <pbuf_pool_is_empty+0x4c>)
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f00a ffa3 	bl	8017e8c <sys_arch_unprotect>

  if (!queued) {
 800cf46:	78fb      	ldrb	r3, [r7, #3]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10f      	bne.n	800cf6c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	480a      	ldr	r0, [pc, #40]	; (800cf78 <pbuf_pool_is_empty+0x50>)
 800cf50:	f7fe fe5c 	bl	800bc0c <tcpip_try_callback>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d008      	beq.n	800cf6c <pbuf_pool_is_empty+0x44>
 800cf5a:	f00a ff89 	bl	8017e70 <sys_arch_protect>
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	4b04      	ldr	r3, [pc, #16]	; (800cf74 <pbuf_pool_is_empty+0x4c>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	701a      	strb	r2, [r3, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f00a ff90 	bl	8017e8c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	2000c949 	.word	0x2000c949
 800cf78:	0800cf15 	.word	0x0800cf15

0800cf7c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	4611      	mov	r1, r2
 800cf88:	461a      	mov	r2, r3
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	80fb      	strh	r3, [r7, #6]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	88fa      	ldrh	r2, [r7, #6]
 800cfa2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	88ba      	ldrh	r2, [r7, #4]
 800cfa8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cfaa:	8b3b      	ldrh	r3, [r7, #24]
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	7f3a      	ldrb	r2, [r7, #28]
 800cfb6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	73da      	strb	r2, [r3, #15]
}
 800cfc4:	bf00      	nop
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bc80      	pop	{r7}
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08c      	sub	sp, #48	; 0x30
 800cfd4:	af02      	add	r7, sp, #8
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	71fb      	strb	r3, [r7, #7]
 800cfda:	460b      	mov	r3, r1
 800cfdc:	80bb      	strh	r3, [r7, #4]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cfe6:	887b      	ldrh	r3, [r7, #2]
 800cfe8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cfec:	d07f      	beq.n	800d0ee <pbuf_alloc+0x11e>
 800cfee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cff2:	f300 80c8 	bgt.w	800d186 <pbuf_alloc+0x1b6>
 800cff6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cffa:	d010      	beq.n	800d01e <pbuf_alloc+0x4e>
 800cffc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d000:	f300 80c1 	bgt.w	800d186 <pbuf_alloc+0x1b6>
 800d004:	2b01      	cmp	r3, #1
 800d006:	d002      	beq.n	800d00e <pbuf_alloc+0x3e>
 800d008:	2b41      	cmp	r3, #65	; 0x41
 800d00a:	f040 80bc 	bne.w	800d186 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d00e:	887a      	ldrh	r2, [r7, #2]
 800d010:	88bb      	ldrh	r3, [r7, #4]
 800d012:	4619      	mov	r1, r3
 800d014:	2000      	movs	r0, #0
 800d016:	f000 f8d1 	bl	800d1bc <pbuf_alloc_reference>
 800d01a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d01c:	e0bd      	b.n	800d19a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d01e:	2300      	movs	r3, #0
 800d020:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d022:	2300      	movs	r3, #0
 800d024:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d026:	88bb      	ldrh	r3, [r7, #4]
 800d028:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d02a:	200c      	movs	r0, #12
 800d02c:	f7ff fc00 	bl	800c830 <memp_malloc>
 800d030:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d109      	bne.n	800d04c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d038:	f7ff ff76 	bl	800cf28 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d044:	f000 faa8 	bl	800d598 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d048:	2300      	movs	r3, #0
 800d04a:	e0a7      	b.n	800d19c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d04c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d04e:	3303      	adds	r3, #3
 800d050:	b29b      	uxth	r3, r3
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	b29b      	uxth	r3, r3
 800d058:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	8b7a      	ldrh	r2, [r7, #26]
 800d060:	4293      	cmp	r3, r2
 800d062:	bf28      	it	cs
 800d064:	4613      	movcs	r3, r2
 800d066:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d06a:	3310      	adds	r3, #16
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	4413      	add	r3, r2
 800d070:	3303      	adds	r3, #3
 800d072:	f023 0303 	bic.w	r3, r3, #3
 800d076:	4618      	mov	r0, r3
 800d078:	89f9      	ldrh	r1, [r7, #14]
 800d07a:	8b7a      	ldrh	r2, [r7, #26]
 800d07c:	2300      	movs	r3, #0
 800d07e:	9301      	str	r3, [sp, #4]
 800d080:	887b      	ldrh	r3, [r7, #2]
 800d082:	9300      	str	r3, [sp, #0]
 800d084:	460b      	mov	r3, r1
 800d086:	4601      	mov	r1, r0
 800d088:	6938      	ldr	r0, [r7, #16]
 800d08a:	f7ff ff77 	bl	800cf7c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	f003 0303 	and.w	r3, r3, #3
 800d096:	2b00      	cmp	r3, #0
 800d098:	d006      	beq.n	800d0a8 <pbuf_alloc+0xd8>
 800d09a:	4b42      	ldr	r3, [pc, #264]	; (800d1a4 <pbuf_alloc+0x1d4>)
 800d09c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0a0:	4941      	ldr	r1, [pc, #260]	; (800d1a8 <pbuf_alloc+0x1d8>)
 800d0a2:	4842      	ldr	r0, [pc, #264]	; (800d1ac <pbuf_alloc+0x1dc>)
 800d0a4:	f00b ff3c 	bl	8018f20 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d0a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0aa:	3303      	adds	r3, #3
 800d0ac:	f023 0303 	bic.w	r3, r3, #3
 800d0b0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d0b4:	d106      	bne.n	800d0c4 <pbuf_alloc+0xf4>
 800d0b6:	4b3b      	ldr	r3, [pc, #236]	; (800d1a4 <pbuf_alloc+0x1d4>)
 800d0b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d0bc:	493c      	ldr	r1, [pc, #240]	; (800d1b0 <pbuf_alloc+0x1e0>)
 800d0be:	483b      	ldr	r0, [pc, #236]	; (800d1ac <pbuf_alloc+0x1dc>)
 800d0c0:	f00b ff2e 	bl	8018f20 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d102      	bne.n	800d0d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24
 800d0ce:	e002      	b.n	800d0d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	693a      	ldr	r2, [r7, #16]
 800d0d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d0da:	8b7a      	ldrh	r2, [r7, #26]
 800d0dc:	89fb      	ldrh	r3, [r7, #14]
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d0e6:	8b7b      	ldrh	r3, [r7, #26]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d19e      	bne.n	800d02a <pbuf_alloc+0x5a>
      break;
 800d0ec:	e055      	b.n	800d19a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d0ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0f0:	3303      	adds	r3, #3
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	f023 0303 	bic.w	r3, r3, #3
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	88bb      	ldrh	r3, [r7, #4]
 800d0fc:	3303      	adds	r3, #3
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	f023 0303 	bic.w	r3, r3, #3
 800d104:	b29b      	uxth	r3, r3
 800d106:	4413      	add	r3, r2
 800d108:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d10a:	8b3b      	ldrh	r3, [r7, #24]
 800d10c:	3310      	adds	r3, #16
 800d10e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d110:	8b3a      	ldrh	r2, [r7, #24]
 800d112:	88bb      	ldrh	r3, [r7, #4]
 800d114:	3303      	adds	r3, #3
 800d116:	f023 0303 	bic.w	r3, r3, #3
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d306      	bcc.n	800d12c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d11e:	8afa      	ldrh	r2, [r7, #22]
 800d120:	88bb      	ldrh	r3, [r7, #4]
 800d122:	3303      	adds	r3, #3
 800d124:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d128:	429a      	cmp	r2, r3
 800d12a:	d201      	bcs.n	800d130 <pbuf_alloc+0x160>
        return NULL;
 800d12c:	2300      	movs	r3, #0
 800d12e:	e035      	b.n	800d19c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d130:	8afb      	ldrh	r3, [r7, #22]
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff f9d8 	bl	800c4e8 <mem_malloc>
 800d138:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d101      	bne.n	800d144 <pbuf_alloc+0x174>
        return NULL;
 800d140:	2300      	movs	r3, #0
 800d142:	e02b      	b.n	800d19c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d146:	3310      	adds	r3, #16
 800d148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d14a:	4413      	add	r3, r2
 800d14c:	3303      	adds	r3, #3
 800d14e:	f023 0303 	bic.w	r3, r3, #3
 800d152:	4618      	mov	r0, r3
 800d154:	88b9      	ldrh	r1, [r7, #4]
 800d156:	88ba      	ldrh	r2, [r7, #4]
 800d158:	2300      	movs	r3, #0
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	887b      	ldrh	r3, [r7, #2]
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	460b      	mov	r3, r1
 800d162:	4601      	mov	r1, r0
 800d164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d166:	f7ff ff09 	bl	800cf7c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	f003 0303 	and.w	r3, r3, #3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d010      	beq.n	800d198 <pbuf_alloc+0x1c8>
 800d176:	4b0b      	ldr	r3, [pc, #44]	; (800d1a4 <pbuf_alloc+0x1d4>)
 800d178:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d17c:	490d      	ldr	r1, [pc, #52]	; (800d1b4 <pbuf_alloc+0x1e4>)
 800d17e:	480b      	ldr	r0, [pc, #44]	; (800d1ac <pbuf_alloc+0x1dc>)
 800d180:	f00b fece 	bl	8018f20 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d184:	e008      	b.n	800d198 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d186:	4b07      	ldr	r3, [pc, #28]	; (800d1a4 <pbuf_alloc+0x1d4>)
 800d188:	f240 1227 	movw	r2, #295	; 0x127
 800d18c:	490a      	ldr	r1, [pc, #40]	; (800d1b8 <pbuf_alloc+0x1e8>)
 800d18e:	4807      	ldr	r0, [pc, #28]	; (800d1ac <pbuf_alloc+0x1dc>)
 800d190:	f00b fec6 	bl	8018f20 <iprintf>
      return NULL;
 800d194:	2300      	movs	r3, #0
 800d196:	e001      	b.n	800d19c <pbuf_alloc+0x1cc>
      break;
 800d198:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3728      	adds	r7, #40	; 0x28
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	0801a194 	.word	0x0801a194
 800d1a8:	0801a1c4 	.word	0x0801a1c4
 800d1ac:	0801a1f4 	.word	0x0801a1f4
 800d1b0:	0801a21c 	.word	0x0801a21c
 800d1b4:	0801a250 	.word	0x0801a250
 800d1b8:	0801a27c 	.word	0x0801a27c

0800d1bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af02      	add	r7, sp, #8
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	807b      	strh	r3, [r7, #2]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d1cc:	883b      	ldrh	r3, [r7, #0]
 800d1ce:	2b41      	cmp	r3, #65	; 0x41
 800d1d0:	d009      	beq.n	800d1e6 <pbuf_alloc_reference+0x2a>
 800d1d2:	883b      	ldrh	r3, [r7, #0]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d006      	beq.n	800d1e6 <pbuf_alloc_reference+0x2a>
 800d1d8:	4b0f      	ldr	r3, [pc, #60]	; (800d218 <pbuf_alloc_reference+0x5c>)
 800d1da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d1de:	490f      	ldr	r1, [pc, #60]	; (800d21c <pbuf_alloc_reference+0x60>)
 800d1e0:	480f      	ldr	r0, [pc, #60]	; (800d220 <pbuf_alloc_reference+0x64>)
 800d1e2:	f00b fe9d 	bl	8018f20 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d1e6:	200b      	movs	r0, #11
 800d1e8:	f7ff fb22 	bl	800c830 <memp_malloc>
 800d1ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d101      	bne.n	800d1f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	e00b      	b.n	800d210 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d1f8:	8879      	ldrh	r1, [r7, #2]
 800d1fa:	887a      	ldrh	r2, [r7, #2]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	883b      	ldrh	r3, [r7, #0]
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	460b      	mov	r3, r1
 800d206:	6879      	ldr	r1, [r7, #4]
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f7ff feb7 	bl	800cf7c <pbuf_init_alloced_pbuf>
  return p;
 800d20e:	68fb      	ldr	r3, [r7, #12]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	0801a194 	.word	0x0801a194
 800d21c:	0801a298 	.word	0x0801a298
 800d220:	0801a1f4 	.word	0x0801a1f4

0800d224 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af02      	add	r7, sp, #8
 800d22a:	607b      	str	r3, [r7, #4]
 800d22c:	4603      	mov	r3, r0
 800d22e:	73fb      	strb	r3, [r7, #15]
 800d230:	460b      	mov	r3, r1
 800d232:	81bb      	strh	r3, [r7, #12]
 800d234:	4613      	mov	r3, r2
 800d236:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d238:	7bfb      	ldrb	r3, [r7, #15]
 800d23a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d23c:	8a7b      	ldrh	r3, [r7, #18]
 800d23e:	3303      	adds	r3, #3
 800d240:	f023 0203 	bic.w	r2, r3, #3
 800d244:	89bb      	ldrh	r3, [r7, #12]
 800d246:	441a      	add	r2, r3
 800d248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d901      	bls.n	800d252 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	e018      	b.n	800d284 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d007      	beq.n	800d268 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d258:	8a7b      	ldrh	r3, [r7, #18]
 800d25a:	3303      	adds	r3, #3
 800d25c:	f023 0303 	bic.w	r3, r3, #3
 800d260:	6a3a      	ldr	r2, [r7, #32]
 800d262:	4413      	add	r3, r2
 800d264:	617b      	str	r3, [r7, #20]
 800d266:	e001      	b.n	800d26c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d268:	2300      	movs	r3, #0
 800d26a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	89b9      	ldrh	r1, [r7, #12]
 800d270:	89ba      	ldrh	r2, [r7, #12]
 800d272:	2302      	movs	r3, #2
 800d274:	9301      	str	r3, [sp, #4]
 800d276:	897b      	ldrh	r3, [r7, #10]
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	460b      	mov	r3, r1
 800d27c:	6979      	ldr	r1, [r7, #20]
 800d27e:	f7ff fe7d 	bl	800cf7c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d282:	687b      	ldr	r3, [r7, #4]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3718      	adds	r7, #24
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d106      	bne.n	800d2ac <pbuf_realloc+0x20>
 800d29e:	4b3a      	ldr	r3, [pc, #232]	; (800d388 <pbuf_realloc+0xfc>)
 800d2a0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d2a4:	4939      	ldr	r1, [pc, #228]	; (800d38c <pbuf_realloc+0x100>)
 800d2a6:	483a      	ldr	r0, [pc, #232]	; (800d390 <pbuf_realloc+0x104>)
 800d2a8:	f00b fe3a 	bl	8018f20 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	891b      	ldrh	r3, [r3, #8]
 800d2b0:	887a      	ldrh	r2, [r7, #2]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d263      	bcs.n	800d37e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	891a      	ldrh	r2, [r3, #8]
 800d2ba:	887b      	ldrh	r3, [r7, #2]
 800d2bc:	1ad3      	subs	r3, r2, r3
 800d2be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d2c0:	887b      	ldrh	r3, [r7, #2]
 800d2c2:	817b      	strh	r3, [r7, #10]
  q = p;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d2c8:	e018      	b.n	800d2fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	895b      	ldrh	r3, [r3, #10]
 800d2ce:	897a      	ldrh	r2, [r7, #10]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	891a      	ldrh	r2, [r3, #8]
 800d2d8:	893b      	ldrh	r3, [r7, #8]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d106      	bne.n	800d2fc <pbuf_realloc+0x70>
 800d2ee:	4b26      	ldr	r3, [pc, #152]	; (800d388 <pbuf_realloc+0xfc>)
 800d2f0:	f240 12af 	movw	r2, #431	; 0x1af
 800d2f4:	4927      	ldr	r1, [pc, #156]	; (800d394 <pbuf_realloc+0x108>)
 800d2f6:	4826      	ldr	r0, [pc, #152]	; (800d390 <pbuf_realloc+0x104>)
 800d2f8:	f00b fe12 	bl	8018f20 <iprintf>
  while (rem_len > q->len) {
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	895b      	ldrh	r3, [r3, #10]
 800d300:	897a      	ldrh	r2, [r7, #10]
 800d302:	429a      	cmp	r2, r3
 800d304:	d8e1      	bhi.n	800d2ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	7b1b      	ldrb	r3, [r3, #12]
 800d30a:	f003 030f 	and.w	r3, r3, #15
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d121      	bne.n	800d356 <pbuf_realloc+0xca>
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	895b      	ldrh	r3, [r3, #10]
 800d316:	897a      	ldrh	r2, [r7, #10]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d01c      	beq.n	800d356 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	7b5b      	ldrb	r3, [r3, #13]
 800d320:	f003 0302 	and.w	r3, r3, #2
 800d324:	2b00      	cmp	r3, #0
 800d326:	d116      	bne.n	800d356 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	685a      	ldr	r2, [r3, #4]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	b29a      	uxth	r2, r3
 800d332:	897b      	ldrh	r3, [r7, #10]
 800d334:	4413      	add	r3, r2
 800d336:	b29b      	uxth	r3, r3
 800d338:	4619      	mov	r1, r3
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7fe ffca 	bl	800c2d4 <mem_trim>
 800d340:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d106      	bne.n	800d356 <pbuf_realloc+0xca>
 800d348:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <pbuf_realloc+0xfc>)
 800d34a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d34e:	4912      	ldr	r1, [pc, #72]	; (800d398 <pbuf_realloc+0x10c>)
 800d350:	480f      	ldr	r0, [pc, #60]	; (800d390 <pbuf_realloc+0x104>)
 800d352:	f00b fde5 	bl	8018f20 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	897a      	ldrh	r2, [r7, #10]
 800d35a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	895a      	ldrh	r2, [r3, #10]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d004      	beq.n	800d376 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4618      	mov	r0, r3
 800d372:	f000 f911 	bl	800d598 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2200      	movs	r2, #0
 800d37a:	601a      	str	r2, [r3, #0]
 800d37c:	e000      	b.n	800d380 <pbuf_realloc+0xf4>
    return;
 800d37e:	bf00      	nop

}
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	0801a194 	.word	0x0801a194
 800d38c:	0801a2ac 	.word	0x0801a2ac
 800d390:	0801a1f4 	.word	0x0801a1f4
 800d394:	0801a2c4 	.word	0x0801a2c4
 800d398:	0801a2dc 	.word	0x0801a2dc

0800d39c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d106      	bne.n	800d3be <pbuf_add_header_impl+0x22>
 800d3b0:	4b2b      	ldr	r3, [pc, #172]	; (800d460 <pbuf_add_header_impl+0xc4>)
 800d3b2:	f240 12df 	movw	r2, #479	; 0x1df
 800d3b6:	492b      	ldr	r1, [pc, #172]	; (800d464 <pbuf_add_header_impl+0xc8>)
 800d3b8:	482b      	ldr	r0, [pc, #172]	; (800d468 <pbuf_add_header_impl+0xcc>)
 800d3ba:	f00b fdb1 	bl	8018f20 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d003      	beq.n	800d3cc <pbuf_add_header_impl+0x30>
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3ca:	d301      	bcc.n	800d3d0 <pbuf_add_header_impl+0x34>
    return 1;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e043      	b.n	800d458 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <pbuf_add_header_impl+0x3e>
    return 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e03e      	b.n	800d458 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	891a      	ldrh	r2, [r3, #8]
 800d3e2:	8a7b      	ldrh	r3, [r7, #18]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	8a7a      	ldrh	r2, [r7, #18]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d901      	bls.n	800d3f2 <pbuf_add_header_impl+0x56>
    return 1;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e032      	b.n	800d458 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	7b1b      	ldrb	r3, [r3, #12]
 800d3f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d3f8:	8a3b      	ldrh	r3, [r7, #16]
 800d3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00c      	beq.n	800d41c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	425b      	negs	r3, r3
 800d40a:	4413      	add	r3, r2
 800d40c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	3310      	adds	r3, #16
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	429a      	cmp	r2, r3
 800d416:	d20d      	bcs.n	800d434 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d418:	2301      	movs	r3, #1
 800d41a:	e01d      	b.n	800d458 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d41c:	79fb      	ldrb	r3, [r7, #7]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d006      	beq.n	800d430 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	425b      	negs	r3, r3
 800d42a:	4413      	add	r3, r2
 800d42c:	617b      	str	r3, [r7, #20]
 800d42e:	e001      	b.n	800d434 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d430:	2301      	movs	r3, #1
 800d432:	e011      	b.n	800d458 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	895a      	ldrh	r2, [r3, #10]
 800d43e:	8a7b      	ldrh	r3, [r7, #18]
 800d440:	4413      	add	r3, r2
 800d442:	b29a      	uxth	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	891a      	ldrh	r2, [r3, #8]
 800d44c:	8a7b      	ldrh	r3, [r7, #18]
 800d44e:	4413      	add	r3, r2
 800d450:	b29a      	uxth	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	811a      	strh	r2, [r3, #8]


  return 0;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3718      	adds	r7, #24
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	0801a194 	.word	0x0801a194
 800d464:	0801a2f8 	.word	0x0801a2f8
 800d468:	0801a1f4 	.word	0x0801a1f4

0800d46c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d476:	2200      	movs	r2, #0
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff ff8e 	bl	800d39c <pbuf_add_header_impl>
 800d480:	4603      	mov	r3, r0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
	...

0800d48c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d106      	bne.n	800d4aa <pbuf_remove_header+0x1e>
 800d49c:	4b20      	ldr	r3, [pc, #128]	; (800d520 <pbuf_remove_header+0x94>)
 800d49e:	f240 224b 	movw	r2, #587	; 0x24b
 800d4a2:	4920      	ldr	r1, [pc, #128]	; (800d524 <pbuf_remove_header+0x98>)
 800d4a4:	4820      	ldr	r0, [pc, #128]	; (800d528 <pbuf_remove_header+0x9c>)
 800d4a6:	f00b fd3b 	bl	8018f20 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d003      	beq.n	800d4b8 <pbuf_remove_header+0x2c>
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4b6:	d301      	bcc.n	800d4bc <pbuf_remove_header+0x30>
    return 1;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e02c      	b.n	800d516 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d101      	bne.n	800d4c6 <pbuf_remove_header+0x3a>
    return 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e027      	b.n	800d516 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	895b      	ldrh	r3, [r3, #10]
 800d4ce:	89fa      	ldrh	r2, [r7, #14]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d908      	bls.n	800d4e6 <pbuf_remove_header+0x5a>
 800d4d4:	4b12      	ldr	r3, [pc, #72]	; (800d520 <pbuf_remove_header+0x94>)
 800d4d6:	f240 2255 	movw	r2, #597	; 0x255
 800d4da:	4914      	ldr	r1, [pc, #80]	; (800d52c <pbuf_remove_header+0xa0>)
 800d4dc:	4812      	ldr	r0, [pc, #72]	; (800d528 <pbuf_remove_header+0x9c>)
 800d4de:	f00b fd1f 	bl	8018f20 <iprintf>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e017      	b.n	800d516 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	441a      	add	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	895a      	ldrh	r2, [r3, #10]
 800d4fc:	89fb      	ldrh	r3, [r7, #14]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	b29a      	uxth	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	891a      	ldrh	r2, [r3, #8]
 800d50a:	89fb      	ldrh	r3, [r7, #14]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	b29a      	uxth	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	0801a194 	.word	0x0801a194
 800d524:	0801a2f8 	.word	0x0801a2f8
 800d528:	0801a1f4 	.word	0x0801a1f4
 800d52c:	0801a304 	.word	0x0801a304

0800d530 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	460b      	mov	r3, r1
 800d53a:	807b      	strh	r3, [r7, #2]
 800d53c:	4613      	mov	r3, r2
 800d53e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d544:	2b00      	cmp	r3, #0
 800d546:	da08      	bge.n	800d55a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d54c:	425b      	negs	r3, r3
 800d54e:	4619      	mov	r1, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7ff ff9b 	bl	800d48c <pbuf_remove_header>
 800d556:	4603      	mov	r3, r0
 800d558:	e007      	b.n	800d56a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d55a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d55e:	787a      	ldrb	r2, [r7, #1]
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f7ff ff1a 	bl	800d39c <pbuf_add_header_impl>
 800d568:	4603      	mov	r3, r0
  }
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3708      	adds	r7, #8
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b082      	sub	sp, #8
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	460b      	mov	r3, r1
 800d57c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d57e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d582:	2201      	movs	r2, #1
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7ff ffd2 	bl	800d530 <pbuf_header_impl>
 800d58c:	4603      	mov	r3, r0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
	...

0800d598 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10b      	bne.n	800d5be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d106      	bne.n	800d5ba <pbuf_free+0x22>
 800d5ac:	4b3b      	ldr	r3, [pc, #236]	; (800d69c <pbuf_free+0x104>)
 800d5ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d5b2:	493b      	ldr	r1, [pc, #236]	; (800d6a0 <pbuf_free+0x108>)
 800d5b4:	483b      	ldr	r0, [pc, #236]	; (800d6a4 <pbuf_free+0x10c>)
 800d5b6:	f00b fcb3 	bl	8018f20 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e069      	b.n	800d692 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d5c2:	e062      	b.n	800d68a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d5c4:	f00a fc54 	bl	8017e70 <sys_arch_protect>
 800d5c8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	7b9b      	ldrb	r3, [r3, #14]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <pbuf_free+0x48>
 800d5d2:	4b32      	ldr	r3, [pc, #200]	; (800d69c <pbuf_free+0x104>)
 800d5d4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d5d8:	4933      	ldr	r1, [pc, #204]	; (800d6a8 <pbuf_free+0x110>)
 800d5da:	4832      	ldr	r0, [pc, #200]	; (800d6a4 <pbuf_free+0x10c>)
 800d5dc:	f00b fca0 	bl	8018f20 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7b9b      	ldrb	r3, [r3, #14]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	739a      	strb	r2, [r3, #14]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	7b9b      	ldrb	r3, [r3, #14]
 800d5f0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d5f2:	69b8      	ldr	r0, [r7, #24]
 800d5f4:	f00a fc4a 	bl	8017e8c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d143      	bne.n	800d686 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	7b1b      	ldrb	r3, [r3, #12]
 800d608:	f003 030f 	and.w	r3, r3, #15
 800d60c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	7b5b      	ldrb	r3, [r3, #13]
 800d612:	f003 0302 	and.w	r3, r3, #2
 800d616:	2b00      	cmp	r3, #0
 800d618:	d011      	beq.n	800d63e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d106      	bne.n	800d634 <pbuf_free+0x9c>
 800d626:	4b1d      	ldr	r3, [pc, #116]	; (800d69c <pbuf_free+0x104>)
 800d628:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d62c:	491f      	ldr	r1, [pc, #124]	; (800d6ac <pbuf_free+0x114>)
 800d62e:	481d      	ldr	r0, [pc, #116]	; (800d6a4 <pbuf_free+0x10c>)
 800d630:	f00b fc76 	bl	8018f20 <iprintf>
        pc->custom_free_function(p);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	4798      	blx	r3
 800d63c:	e01d      	b.n	800d67a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d63e:	7bfb      	ldrb	r3, [r7, #15]
 800d640:	2b02      	cmp	r3, #2
 800d642:	d104      	bne.n	800d64e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d644:	6879      	ldr	r1, [r7, #4]
 800d646:	200c      	movs	r0, #12
 800d648:	f7ff f968 	bl	800c91c <memp_free>
 800d64c:	e015      	b.n	800d67a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
 800d650:	2b01      	cmp	r3, #1
 800d652:	d104      	bne.n	800d65e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d654:	6879      	ldr	r1, [r7, #4]
 800d656:	200b      	movs	r0, #11
 800d658:	f7ff f960 	bl	800c91c <memp_free>
 800d65c:	e00d      	b.n	800d67a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d103      	bne.n	800d66c <pbuf_free+0xd4>
          mem_free(p);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7fe fda5 	bl	800c1b4 <mem_free>
 800d66a:	e006      	b.n	800d67a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d66c:	4b0b      	ldr	r3, [pc, #44]	; (800d69c <pbuf_free+0x104>)
 800d66e:	f240 320f 	movw	r2, #783	; 0x30f
 800d672:	490f      	ldr	r1, [pc, #60]	; (800d6b0 <pbuf_free+0x118>)
 800d674:	480b      	ldr	r0, [pc, #44]	; (800d6a4 <pbuf_free+0x10c>)
 800d676:	f00b fc53 	bl	8018f20 <iprintf>
        }
      }
      count++;
 800d67a:	7ffb      	ldrb	r3, [r7, #31]
 800d67c:	3301      	adds	r3, #1
 800d67e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	607b      	str	r3, [r7, #4]
 800d684:	e001      	b.n	800d68a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d686:	2300      	movs	r3, #0
 800d688:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d199      	bne.n	800d5c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d690:	7ffb      	ldrb	r3, [r7, #31]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3720      	adds	r7, #32
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	0801a194 	.word	0x0801a194
 800d6a0:	0801a2f8 	.word	0x0801a2f8
 800d6a4:	0801a1f4 	.word	0x0801a1f4
 800d6a8:	0801a324 	.word	0x0801a324
 800d6ac:	0801a33c 	.word	0x0801a33c
 800d6b0:	0801a360 	.word	0x0801a360

0800d6b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d6c0:	e005      	b.n	800d6ce <pbuf_clen+0x1a>
    ++len;
 800d6c2:	89fb      	ldrh	r3, [r7, #14]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1f6      	bne.n	800d6c2 <pbuf_clen+0xe>
  }
  return len;
 800d6d4:	89fb      	ldrh	r3, [r7, #14]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3714      	adds	r7, #20
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bc80      	pop	{r7}
 800d6de:	4770      	bx	lr

0800d6e0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d016      	beq.n	800d71c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d6ee:	f00a fbbf 	bl	8017e70 <sys_arch_protect>
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	7b9b      	ldrb	r3, [r3, #14]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	739a      	strb	r2, [r3, #14]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f00a fbc3 	bl	8017e8c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	7b9b      	ldrb	r3, [r3, #14]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d106      	bne.n	800d71c <pbuf_ref+0x3c>
 800d70e:	4b05      	ldr	r3, [pc, #20]	; (800d724 <pbuf_ref+0x44>)
 800d710:	f240 3242 	movw	r2, #834	; 0x342
 800d714:	4904      	ldr	r1, [pc, #16]	; (800d728 <pbuf_ref+0x48>)
 800d716:	4805      	ldr	r0, [pc, #20]	; (800d72c <pbuf_ref+0x4c>)
 800d718:	f00b fc02 	bl	8018f20 <iprintf>
  }
}
 800d71c:	bf00      	nop
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	0801a194 	.word	0x0801a194
 800d728:	0801a374 	.word	0x0801a374
 800d72c:	0801a1f4 	.word	0x0801a1f4

0800d730 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <pbuf_cat+0x16>
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d107      	bne.n	800d756 <pbuf_cat+0x26>
 800d746:	4b20      	ldr	r3, [pc, #128]	; (800d7c8 <pbuf_cat+0x98>)
 800d748:	f240 3259 	movw	r2, #857	; 0x359
 800d74c:	491f      	ldr	r1, [pc, #124]	; (800d7cc <pbuf_cat+0x9c>)
 800d74e:	4820      	ldr	r0, [pc, #128]	; (800d7d0 <pbuf_cat+0xa0>)
 800d750:	f00b fbe6 	bl	8018f20 <iprintf>
 800d754:	e034      	b.n	800d7c0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	60fb      	str	r3, [r7, #12]
 800d75a:	e00a      	b.n	800d772 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	891a      	ldrh	r2, [r3, #8]
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	891b      	ldrh	r3, [r3, #8]
 800d764:	4413      	add	r3, r2
 800d766:	b29a      	uxth	r2, r3
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1f0      	bne.n	800d75c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	891a      	ldrh	r2, [r3, #8]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	895b      	ldrh	r3, [r3, #10]
 800d782:	429a      	cmp	r2, r3
 800d784:	d006      	beq.n	800d794 <pbuf_cat+0x64>
 800d786:	4b10      	ldr	r3, [pc, #64]	; (800d7c8 <pbuf_cat+0x98>)
 800d788:	f240 3262 	movw	r2, #866	; 0x362
 800d78c:	4911      	ldr	r1, [pc, #68]	; (800d7d4 <pbuf_cat+0xa4>)
 800d78e:	4810      	ldr	r0, [pc, #64]	; (800d7d0 <pbuf_cat+0xa0>)
 800d790:	f00b fbc6 	bl	8018f20 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d006      	beq.n	800d7aa <pbuf_cat+0x7a>
 800d79c:	4b0a      	ldr	r3, [pc, #40]	; (800d7c8 <pbuf_cat+0x98>)
 800d79e:	f240 3263 	movw	r2, #867	; 0x363
 800d7a2:	490d      	ldr	r1, [pc, #52]	; (800d7d8 <pbuf_cat+0xa8>)
 800d7a4:	480a      	ldr	r0, [pc, #40]	; (800d7d0 <pbuf_cat+0xa0>)
 800d7a6:	f00b fbbb 	bl	8018f20 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	891a      	ldrh	r2, [r3, #8]
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	891b      	ldrh	r3, [r3, #8]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	0801a194 	.word	0x0801a194
 800d7cc:	0801a388 	.word	0x0801a388
 800d7d0:	0801a1f4 	.word	0x0801a1f4
 800d7d4:	0801a3c0 	.word	0x0801a3c0
 800d7d8:	0801a3f0 	.word	0x0801a3f0

0800d7dc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f7ff ffa1 	bl	800d730 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d7ee:	6838      	ldr	r0, [r7, #0]
 800d7f0:	f7ff ff76 	bl	800d6e0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d7f4:	bf00      	nop
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d806:	2300      	movs	r3, #0
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	2300      	movs	r3, #0
 800d80c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d008      	beq.n	800d826 <pbuf_copy+0x2a>
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d005      	beq.n	800d826 <pbuf_copy+0x2a>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	891a      	ldrh	r2, [r3, #8]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	891b      	ldrh	r3, [r3, #8]
 800d822:	429a      	cmp	r2, r3
 800d824:	d209      	bcs.n	800d83a <pbuf_copy+0x3e>
 800d826:	4b57      	ldr	r3, [pc, #348]	; (800d984 <pbuf_copy+0x188>)
 800d828:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d82c:	4956      	ldr	r1, [pc, #344]	; (800d988 <pbuf_copy+0x18c>)
 800d82e:	4857      	ldr	r0, [pc, #348]	; (800d98c <pbuf_copy+0x190>)
 800d830:	f00b fb76 	bl	8018f20 <iprintf>
 800d834:	f06f 030f 	mvn.w	r3, #15
 800d838:	e09f      	b.n	800d97a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	895b      	ldrh	r3, [r3, #10]
 800d83e:	461a      	mov	r2, r3
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	1ad2      	subs	r2, r2, r3
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	895b      	ldrh	r3, [r3, #10]
 800d848:	4619      	mov	r1, r3
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	1acb      	subs	r3, r1, r3
 800d84e:	429a      	cmp	r2, r3
 800d850:	d306      	bcc.n	800d860 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	895b      	ldrh	r3, [r3, #10]
 800d856:	461a      	mov	r2, r3
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	e005      	b.n	800d86c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	895b      	ldrh	r3, [r3, #10]
 800d864:	461a      	mov	r2, r3
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685a      	ldr	r2, [r3, #4]
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	18d0      	adds	r0, r2, r3
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	685a      	ldr	r2, [r3, #4]
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	4413      	add	r3, r2
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	4619      	mov	r1, r3
 800d880:	f00b fa5a 	bl	8018d38 <memcpy>
    offset_to += len;
 800d884:	697a      	ldr	r2, [r7, #20]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	4413      	add	r3, r2
 800d88a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d88c:	693a      	ldr	r2, [r7, #16]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	4413      	add	r3, r2
 800d892:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	895b      	ldrh	r3, [r3, #10]
 800d898:	461a      	mov	r2, r3
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d906      	bls.n	800d8ae <pbuf_copy+0xb2>
 800d8a0:	4b38      	ldr	r3, [pc, #224]	; (800d984 <pbuf_copy+0x188>)
 800d8a2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d8a6:	493a      	ldr	r1, [pc, #232]	; (800d990 <pbuf_copy+0x194>)
 800d8a8:	4838      	ldr	r0, [pc, #224]	; (800d98c <pbuf_copy+0x190>)
 800d8aa:	f00b fb39 	bl	8018f20 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	895b      	ldrh	r3, [r3, #10]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d906      	bls.n	800d8c8 <pbuf_copy+0xcc>
 800d8ba:	4b32      	ldr	r3, [pc, #200]	; (800d984 <pbuf_copy+0x188>)
 800d8bc:	f240 32da 	movw	r2, #986	; 0x3da
 800d8c0:	4934      	ldr	r1, [pc, #208]	; (800d994 <pbuf_copy+0x198>)
 800d8c2:	4832      	ldr	r0, [pc, #200]	; (800d98c <pbuf_copy+0x190>)
 800d8c4:	f00b fb2c 	bl	8018f20 <iprintf>
    if (offset_from >= p_from->len) {
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	895b      	ldrh	r3, [r3, #10]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d304      	bcc.n	800d8de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	895b      	ldrh	r3, [r3, #10]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d114      	bne.n	800d914 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10c      	bne.n	800d914 <pbuf_copy+0x118>
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d009      	beq.n	800d914 <pbuf_copy+0x118>
 800d900:	4b20      	ldr	r3, [pc, #128]	; (800d984 <pbuf_copy+0x188>)
 800d902:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d906:	4924      	ldr	r1, [pc, #144]	; (800d998 <pbuf_copy+0x19c>)
 800d908:	4820      	ldr	r0, [pc, #128]	; (800d98c <pbuf_copy+0x190>)
 800d90a:	f00b fb09 	bl	8018f20 <iprintf>
 800d90e:	f06f 030f 	mvn.w	r3, #15
 800d912:	e032      	b.n	800d97a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d013      	beq.n	800d942 <pbuf_copy+0x146>
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	895a      	ldrh	r2, [r3, #10]
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	891b      	ldrh	r3, [r3, #8]
 800d922:	429a      	cmp	r2, r3
 800d924:	d10d      	bne.n	800d942 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d009      	beq.n	800d942 <pbuf_copy+0x146>
 800d92e:	4b15      	ldr	r3, [pc, #84]	; (800d984 <pbuf_copy+0x188>)
 800d930:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d934:	4919      	ldr	r1, [pc, #100]	; (800d99c <pbuf_copy+0x1a0>)
 800d936:	4815      	ldr	r0, [pc, #84]	; (800d98c <pbuf_copy+0x190>)
 800d938:	f00b faf2 	bl	8018f20 <iprintf>
 800d93c:	f06f 0305 	mvn.w	r3, #5
 800d940:	e01b      	b.n	800d97a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d013      	beq.n	800d970 <pbuf_copy+0x174>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	895a      	ldrh	r2, [r3, #10]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	891b      	ldrh	r3, [r3, #8]
 800d950:	429a      	cmp	r2, r3
 800d952:	d10d      	bne.n	800d970 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d009      	beq.n	800d970 <pbuf_copy+0x174>
 800d95c:	4b09      	ldr	r3, [pc, #36]	; (800d984 <pbuf_copy+0x188>)
 800d95e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d962:	490e      	ldr	r1, [pc, #56]	; (800d99c <pbuf_copy+0x1a0>)
 800d964:	4809      	ldr	r0, [pc, #36]	; (800d98c <pbuf_copy+0x190>)
 800d966:	f00b fadb 	bl	8018f20 <iprintf>
 800d96a:	f06f 0305 	mvn.w	r3, #5
 800d96e:	e004      	b.n	800d97a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	f47f af61 	bne.w	800d83a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3718      	adds	r7, #24
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	0801a194 	.word	0x0801a194
 800d988:	0801a43c 	.word	0x0801a43c
 800d98c:	0801a1f4 	.word	0x0801a1f4
 800d990:	0801a46c 	.word	0x0801a46c
 800d994:	0801a484 	.word	0x0801a484
 800d998:	0801a4a0 	.word	0x0801a4a0
 800d99c:	0801a4b0 	.word	0x0801a4b0

0800d9a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b088      	sub	sp, #32
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	80fb      	strh	r3, [r7, #6]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d108      	bne.n	800d9d6 <pbuf_copy_partial+0x36>
 800d9c4:	4b2b      	ldr	r3, [pc, #172]	; (800da74 <pbuf_copy_partial+0xd4>)
 800d9c6:	f240 420a 	movw	r2, #1034	; 0x40a
 800d9ca:	492b      	ldr	r1, [pc, #172]	; (800da78 <pbuf_copy_partial+0xd8>)
 800d9cc:	482b      	ldr	r0, [pc, #172]	; (800da7c <pbuf_copy_partial+0xdc>)
 800d9ce:	f00b faa7 	bl	8018f20 <iprintf>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e04a      	b.n	800da6c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d108      	bne.n	800d9ee <pbuf_copy_partial+0x4e>
 800d9dc:	4b25      	ldr	r3, [pc, #148]	; (800da74 <pbuf_copy_partial+0xd4>)
 800d9de:	f240 420b 	movw	r2, #1035	; 0x40b
 800d9e2:	4927      	ldr	r1, [pc, #156]	; (800da80 <pbuf_copy_partial+0xe0>)
 800d9e4:	4825      	ldr	r0, [pc, #148]	; (800da7c <pbuf_copy_partial+0xdc>)
 800d9e6:	f00b fa9b 	bl	8018f20 <iprintf>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e03e      	b.n	800da6c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	61fb      	str	r3, [r7, #28]
 800d9f2:	e034      	b.n	800da5e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d9f4:	88bb      	ldrh	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00a      	beq.n	800da10 <pbuf_copy_partial+0x70>
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	895b      	ldrh	r3, [r3, #10]
 800d9fe:	88ba      	ldrh	r2, [r7, #4]
 800da00:	429a      	cmp	r2, r3
 800da02:	d305      	bcc.n	800da10 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	895b      	ldrh	r3, [r3, #10]
 800da08:	88ba      	ldrh	r2, [r7, #4]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	80bb      	strh	r3, [r7, #4]
 800da0e:	e023      	b.n	800da58 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	895a      	ldrh	r2, [r3, #10]
 800da14:	88bb      	ldrh	r3, [r7, #4]
 800da16:	1ad3      	subs	r3, r2, r3
 800da18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800da1a:	8b3a      	ldrh	r2, [r7, #24]
 800da1c:	88fb      	ldrh	r3, [r7, #6]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d901      	bls.n	800da26 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800da22:	88fb      	ldrh	r3, [r7, #6]
 800da24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800da26:	8b7b      	ldrh	r3, [r7, #26]
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	18d0      	adds	r0, r2, r3
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	685a      	ldr	r2, [r3, #4]
 800da30:	88bb      	ldrh	r3, [r7, #4]
 800da32:	4413      	add	r3, r2
 800da34:	8b3a      	ldrh	r2, [r7, #24]
 800da36:	4619      	mov	r1, r3
 800da38:	f00b f97e 	bl	8018d38 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800da3c:	8afa      	ldrh	r2, [r7, #22]
 800da3e:	8b3b      	ldrh	r3, [r7, #24]
 800da40:	4413      	add	r3, r2
 800da42:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800da44:	8b7a      	ldrh	r2, [r7, #26]
 800da46:	8b3b      	ldrh	r3, [r7, #24]
 800da48:	4413      	add	r3, r2
 800da4a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800da4c:	88fa      	ldrh	r2, [r7, #6]
 800da4e:	8b3b      	ldrh	r3, [r7, #24]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800da54:	2300      	movs	r3, #0
 800da56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	61fb      	str	r3, [r7, #28]
 800da5e:	88fb      	ldrh	r3, [r7, #6]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <pbuf_copy_partial+0xca>
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1c4      	bne.n	800d9f4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800da6a:	8afb      	ldrh	r3, [r7, #22]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3720      	adds	r7, #32
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	0801a194 	.word	0x0801a194
 800da78:	0801a4dc 	.word	0x0801a4dc
 800da7c:	0801a1f4 	.word	0x0801a1f4
 800da80:	0801a4fc 	.word	0x0801a4fc

0800da84 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	603a      	str	r2, [r7, #0]
 800da8e:	71fb      	strb	r3, [r7, #7]
 800da90:	460b      	mov	r3, r1
 800da92:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	8919      	ldrh	r1, [r3, #8]
 800da98:	88ba      	ldrh	r2, [r7, #4]
 800da9a:	79fb      	ldrb	r3, [r7, #7]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7ff fa97 	bl	800cfd0 <pbuf_alloc>
 800daa2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <pbuf_clone+0x2a>
    return NULL;
 800daaa:	2300      	movs	r3, #0
 800daac:	e011      	b.n	800dad2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f7ff fea3 	bl	800d7fc <pbuf_copy>
 800dab6:	4603      	mov	r3, r0
 800dab8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800daba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d006      	beq.n	800dad0 <pbuf_clone+0x4c>
 800dac2:	4b06      	ldr	r3, [pc, #24]	; (800dadc <pbuf_clone+0x58>)
 800dac4:	f240 5224 	movw	r2, #1316	; 0x524
 800dac8:	4905      	ldr	r1, [pc, #20]	; (800dae0 <pbuf_clone+0x5c>)
 800daca:	4806      	ldr	r0, [pc, #24]	; (800dae4 <pbuf_clone+0x60>)
 800dacc:	f00b fa28 	bl	8018f20 <iprintf>
  return q;
 800dad0:	68fb      	ldr	r3, [r7, #12]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	0801a194 	.word	0x0801a194
 800dae0:	0801a608 	.word	0x0801a608
 800dae4:	0801a1f4 	.word	0x0801a1f4

0800dae8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800daec:	f00b fa30 	bl	8018f50 <rand>
 800daf0:	4603      	mov	r3, r0
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dafe:	b29a      	uxth	r2, r3
 800db00:	4b01      	ldr	r3, [pc, #4]	; (800db08 <tcp_init+0x20>)
 800db02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800db04:	bf00      	nop
 800db06:	bd80      	pop	{r7, pc}
 800db08:	2000009c 	.word	0x2000009c

0800db0c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	7d1b      	ldrb	r3, [r3, #20]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d105      	bne.n	800db28 <tcp_free+0x1c>
 800db1c:	4b06      	ldr	r3, [pc, #24]	; (800db38 <tcp_free+0x2c>)
 800db1e:	22d4      	movs	r2, #212	; 0xd4
 800db20:	4906      	ldr	r1, [pc, #24]	; (800db3c <tcp_free+0x30>)
 800db22:	4807      	ldr	r0, [pc, #28]	; (800db40 <tcp_free+0x34>)
 800db24:	f00b f9fc 	bl	8018f20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800db28:	6879      	ldr	r1, [r7, #4]
 800db2a:	2001      	movs	r0, #1
 800db2c:	f7fe fef6 	bl	800c91c <memp_free>
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	0801a694 	.word	0x0801a694
 800db3c:	0801a6c4 	.word	0x0801a6c4
 800db40:	0801a6d8 	.word	0x0801a6d8

0800db44 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	7d1b      	ldrb	r3, [r3, #20]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d105      	bne.n	800db60 <tcp_free_listen+0x1c>
 800db54:	4b06      	ldr	r3, [pc, #24]	; (800db70 <tcp_free_listen+0x2c>)
 800db56:	22df      	movs	r2, #223	; 0xdf
 800db58:	4906      	ldr	r1, [pc, #24]	; (800db74 <tcp_free_listen+0x30>)
 800db5a:	4807      	ldr	r0, [pc, #28]	; (800db78 <tcp_free_listen+0x34>)
 800db5c:	f00b f9e0 	bl	8018f20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800db60:	6879      	ldr	r1, [r7, #4]
 800db62:	2002      	movs	r0, #2
 800db64:	f7fe feda 	bl	800c91c <memp_free>
}
 800db68:	bf00      	nop
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	0801a694 	.word	0x0801a694
 800db74:	0801a700 	.word	0x0801a700
 800db78:	0801a6d8 	.word	0x0801a6d8

0800db7c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800db80:	f000 fea2 	bl	800e8c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800db84:	4b07      	ldr	r3, [pc, #28]	; (800dba4 <tcp_tmr+0x28>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	3301      	adds	r3, #1
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	4b05      	ldr	r3, [pc, #20]	; (800dba4 <tcp_tmr+0x28>)
 800db8e:	701a      	strb	r2, [r3, #0]
 800db90:	4b04      	ldr	r3, [pc, #16]	; (800dba4 <tcp_tmr+0x28>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	f003 0301 	and.w	r3, r3, #1
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800db9c:	f000 fb54 	bl	800e248 <tcp_slowtmr>
  }
}
 800dba0:	bf00      	nop
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	2000c961 	.word	0x2000c961

0800dba8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d105      	bne.n	800dbc4 <tcp_remove_listener+0x1c>
 800dbb8:	4b0d      	ldr	r3, [pc, #52]	; (800dbf0 <tcp_remove_listener+0x48>)
 800dbba:	22ff      	movs	r2, #255	; 0xff
 800dbbc:	490d      	ldr	r1, [pc, #52]	; (800dbf4 <tcp_remove_listener+0x4c>)
 800dbbe:	480e      	ldr	r0, [pc, #56]	; (800dbf8 <tcp_remove_listener+0x50>)
 800dbc0:	f00b f9ae 	bl	8018f20 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	60fb      	str	r3, [r7, #12]
 800dbc8:	e00a      	b.n	800dbe0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbce:	683a      	ldr	r2, [r7, #0]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d102      	bne.n	800dbda <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1f1      	bne.n	800dbca <tcp_remove_listener+0x22>
    }
  }
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	0801a694 	.word	0x0801a694
 800dbf4:	0801a71c 	.word	0x0801a71c
 800dbf8:	0801a6d8 	.word	0x0801a6d8

0800dbfc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d106      	bne.n	800dc18 <tcp_listen_closed+0x1c>
 800dc0a:	4b14      	ldr	r3, [pc, #80]	; (800dc5c <tcp_listen_closed+0x60>)
 800dc0c:	f240 1211 	movw	r2, #273	; 0x111
 800dc10:	4913      	ldr	r1, [pc, #76]	; (800dc60 <tcp_listen_closed+0x64>)
 800dc12:	4814      	ldr	r0, [pc, #80]	; (800dc64 <tcp_listen_closed+0x68>)
 800dc14:	f00b f984 	bl	8018f20 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	7d1b      	ldrb	r3, [r3, #20]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d006      	beq.n	800dc2e <tcp_listen_closed+0x32>
 800dc20:	4b0e      	ldr	r3, [pc, #56]	; (800dc5c <tcp_listen_closed+0x60>)
 800dc22:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dc26:	4910      	ldr	r1, [pc, #64]	; (800dc68 <tcp_listen_closed+0x6c>)
 800dc28:	480e      	ldr	r0, [pc, #56]	; (800dc64 <tcp_listen_closed+0x68>)
 800dc2a:	f00b f979 	bl	8018f20 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc2e:	2301      	movs	r3, #1
 800dc30:	60fb      	str	r3, [r7, #12]
 800dc32:	e00b      	b.n	800dc4c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dc34:	4a0d      	ldr	r2, [pc, #52]	; (800dc6c <tcp_listen_closed+0x70>)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff ffb1 	bl	800dba8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	60fb      	str	r3, [r7, #12]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2b03      	cmp	r3, #3
 800dc50:	d9f0      	bls.n	800dc34 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dc52:	bf00      	nop
 800dc54:	bf00      	nop
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	0801a694 	.word	0x0801a694
 800dc60:	0801a744 	.word	0x0801a744
 800dc64:	0801a6d8 	.word	0x0801a6d8
 800dc68:	0801a750 	.word	0x0801a750
 800dc6c:	0801cac0 	.word	0x0801cac0

0800dc70 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dc70:	b5b0      	push	{r4, r5, r7, lr}
 800dc72:	b088      	sub	sp, #32
 800dc74:	af04      	add	r7, sp, #16
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d106      	bne.n	800dc90 <tcp_close_shutdown+0x20>
 800dc82:	4b63      	ldr	r3, [pc, #396]	; (800de10 <tcp_close_shutdown+0x1a0>)
 800dc84:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dc88:	4962      	ldr	r1, [pc, #392]	; (800de14 <tcp_close_shutdown+0x1a4>)
 800dc8a:	4863      	ldr	r0, [pc, #396]	; (800de18 <tcp_close_shutdown+0x1a8>)
 800dc8c:	f00b f948 	bl	8018f20 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dc90:	78fb      	ldrb	r3, [r7, #3]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d066      	beq.n	800dd64 <tcp_close_shutdown+0xf4>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	7d1b      	ldrb	r3, [r3, #20]
 800dc9a:	2b04      	cmp	r3, #4
 800dc9c:	d003      	beq.n	800dca6 <tcp_close_shutdown+0x36>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	7d1b      	ldrb	r3, [r3, #20]
 800dca2:	2b07      	cmp	r3, #7
 800dca4:	d15e      	bne.n	800dd64 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d104      	bne.n	800dcb8 <tcp_close_shutdown+0x48>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dcb6:	d055      	beq.n	800dd64 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	8b5b      	ldrh	r3, [r3, #26]
 800dcbc:	f003 0310 	and.w	r3, r3, #16
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d106      	bne.n	800dcd2 <tcp_close_shutdown+0x62>
 800dcc4:	4b52      	ldr	r3, [pc, #328]	; (800de10 <tcp_close_shutdown+0x1a0>)
 800dcc6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800dcca:	4954      	ldr	r1, [pc, #336]	; (800de1c <tcp_close_shutdown+0x1ac>)
 800dccc:	4852      	ldr	r0, [pc, #328]	; (800de18 <tcp_close_shutdown+0x1a8>)
 800dcce:	f00b f927 	bl	8018f20 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dcda:	687d      	ldr	r5, [r7, #4]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	3304      	adds	r3, #4
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	8ad2      	ldrh	r2, [r2, #22]
 800dce4:	6879      	ldr	r1, [r7, #4]
 800dce6:	8b09      	ldrh	r1, [r1, #24]
 800dce8:	9102      	str	r1, [sp, #8]
 800dcea:	9201      	str	r2, [sp, #4]
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	462b      	mov	r3, r5
 800dcf0:	4622      	mov	r2, r4
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f004 fe91 	bl	8012a1c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f001 f8c6 	bl	800ee8c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dd00:	4b47      	ldr	r3, [pc, #284]	; (800de20 <tcp_close_shutdown+0x1b0>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d105      	bne.n	800dd16 <tcp_close_shutdown+0xa6>
 800dd0a:	4b45      	ldr	r3, [pc, #276]	; (800de20 <tcp_close_shutdown+0x1b0>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	4a43      	ldr	r2, [pc, #268]	; (800de20 <tcp_close_shutdown+0x1b0>)
 800dd12:	6013      	str	r3, [r2, #0]
 800dd14:	e013      	b.n	800dd3e <tcp_close_shutdown+0xce>
 800dd16:	4b42      	ldr	r3, [pc, #264]	; (800de20 <tcp_close_shutdown+0x1b0>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60fb      	str	r3, [r7, #12]
 800dd1c:	e00c      	b.n	800dd38 <tcp_close_shutdown+0xc8>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d104      	bne.n	800dd32 <tcp_close_shutdown+0xc2>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	68da      	ldr	r2, [r3, #12]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	60da      	str	r2, [r3, #12]
 800dd30:	e005      	b.n	800dd3e <tcp_close_shutdown+0xce>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1ef      	bne.n	800dd1e <tcp_close_shutdown+0xae>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	60da      	str	r2, [r3, #12]
 800dd44:	4b37      	ldr	r3, [pc, #220]	; (800de24 <tcp_close_shutdown+0x1b4>)
 800dd46:	2201      	movs	r2, #1
 800dd48:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dd4a:	4b37      	ldr	r3, [pc, #220]	; (800de28 <tcp_close_shutdown+0x1b8>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d102      	bne.n	800dd5a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dd54:	f003 fd5e 	bl	8011814 <tcp_trigger_input_pcb_close>
 800dd58:	e002      	b.n	800dd60 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f7ff fed6 	bl	800db0c <tcp_free>
      }
      return ERR_OK;
 800dd60:	2300      	movs	r3, #0
 800dd62:	e050      	b.n	800de06 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	7d1b      	ldrb	r3, [r3, #20]
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	d03b      	beq.n	800dde4 <tcp_close_shutdown+0x174>
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	dc44      	bgt.n	800ddfa <tcp_close_shutdown+0x18a>
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <tcp_close_shutdown+0x10a>
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d02a      	beq.n	800ddce <tcp_close_shutdown+0x15e>
 800dd78:	e03f      	b.n	800ddfa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	8adb      	ldrh	r3, [r3, #22]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d021      	beq.n	800ddc6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd82:	4b2a      	ldr	r3, [pc, #168]	; (800de2c <tcp_close_shutdown+0x1bc>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d105      	bne.n	800dd98 <tcp_close_shutdown+0x128>
 800dd8c:	4b27      	ldr	r3, [pc, #156]	; (800de2c <tcp_close_shutdown+0x1bc>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	4a26      	ldr	r2, [pc, #152]	; (800de2c <tcp_close_shutdown+0x1bc>)
 800dd94:	6013      	str	r3, [r2, #0]
 800dd96:	e013      	b.n	800ddc0 <tcp_close_shutdown+0x150>
 800dd98:	4b24      	ldr	r3, [pc, #144]	; (800de2c <tcp_close_shutdown+0x1bc>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	60bb      	str	r3, [r7, #8]
 800dd9e:	e00c      	b.n	800ddba <tcp_close_shutdown+0x14a>
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d104      	bne.n	800ddb4 <tcp_close_shutdown+0x144>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68da      	ldr	r2, [r3, #12]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	60da      	str	r2, [r3, #12]
 800ddb2:	e005      	b.n	800ddc0 <tcp_close_shutdown+0x150>
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	60bb      	str	r3, [r7, #8]
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1ef      	bne.n	800dda0 <tcp_close_shutdown+0x130>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff fea0 	bl	800db0c <tcp_free>
      break;
 800ddcc:	e01a      	b.n	800de04 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7ff ff14 	bl	800dbfc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ddd4:	6879      	ldr	r1, [r7, #4]
 800ddd6:	4816      	ldr	r0, [pc, #88]	; (800de30 <tcp_close_shutdown+0x1c0>)
 800ddd8:	f001 f8a8 	bl	800ef2c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f7ff feb1 	bl	800db44 <tcp_free_listen>
      break;
 800dde2:	e00f      	b.n	800de04 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dde4:	6879      	ldr	r1, [r7, #4]
 800dde6:	480e      	ldr	r0, [pc, #56]	; (800de20 <tcp_close_shutdown+0x1b0>)
 800dde8:	f001 f8a0 	bl	800ef2c <tcp_pcb_remove>
 800ddec:	4b0d      	ldr	r3, [pc, #52]	; (800de24 <tcp_close_shutdown+0x1b4>)
 800ddee:	2201      	movs	r2, #1
 800ddf0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7ff fe8a 	bl	800db0c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ddf8:	e004      	b.n	800de04 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 f81a 	bl	800de34 <tcp_close_shutdown_fin>
 800de00:	4603      	mov	r3, r0
 800de02:	e000      	b.n	800de06 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bdb0      	pop	{r4, r5, r7, pc}
 800de0e:	bf00      	nop
 800de10:	0801a694 	.word	0x0801a694
 800de14:	0801a768 	.word	0x0801a768
 800de18:	0801a6d8 	.word	0x0801a6d8
 800de1c:	0801a788 	.word	0x0801a788
 800de20:	2000c958 	.word	0x2000c958
 800de24:	2000c960 	.word	0x2000c960
 800de28:	2000c998 	.word	0x2000c998
 800de2c:	2000c950 	.word	0x2000c950
 800de30:	2000c954 	.word	0x2000c954

0800de34 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <tcp_close_shutdown_fin+0x1c>
 800de42:	4b2e      	ldr	r3, [pc, #184]	; (800defc <tcp_close_shutdown_fin+0xc8>)
 800de44:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800de48:	492d      	ldr	r1, [pc, #180]	; (800df00 <tcp_close_shutdown_fin+0xcc>)
 800de4a:	482e      	ldr	r0, [pc, #184]	; (800df04 <tcp_close_shutdown_fin+0xd0>)
 800de4c:	f00b f868 	bl	8018f20 <iprintf>

  switch (pcb->state) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	7d1b      	ldrb	r3, [r3, #20]
 800de54:	2b07      	cmp	r3, #7
 800de56:	d020      	beq.n	800de9a <tcp_close_shutdown_fin+0x66>
 800de58:	2b07      	cmp	r3, #7
 800de5a:	dc2b      	bgt.n	800deb4 <tcp_close_shutdown_fin+0x80>
 800de5c:	2b03      	cmp	r3, #3
 800de5e:	d002      	beq.n	800de66 <tcp_close_shutdown_fin+0x32>
 800de60:	2b04      	cmp	r3, #4
 800de62:	d00d      	beq.n	800de80 <tcp_close_shutdown_fin+0x4c>
 800de64:	e026      	b.n	800deb4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f003 fee6 	bl	8011c38 <tcp_send_fin>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d11f      	bne.n	800deb8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2205      	movs	r2, #5
 800de7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de7e:	e01b      	b.n	800deb8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f003 fed9 	bl	8011c38 <tcp_send_fin>
 800de86:	4603      	mov	r3, r0
 800de88:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d114      	bne.n	800debc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2205      	movs	r2, #5
 800de96:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de98:	e010      	b.n	800debc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f003 fecc 	bl	8011c38 <tcp_send_fin>
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d109      	bne.n	800dec0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2209      	movs	r2, #9
 800deb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800deb2:	e005      	b.n	800dec0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800deb4:	2300      	movs	r3, #0
 800deb6:	e01c      	b.n	800def2 <tcp_close_shutdown_fin+0xbe>
      break;
 800deb8:	bf00      	nop
 800deba:	e002      	b.n	800dec2 <tcp_close_shutdown_fin+0x8e>
      break;
 800debc:	bf00      	nop
 800debe:	e000      	b.n	800dec2 <tcp_close_shutdown_fin+0x8e>
      break;
 800dec0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d103      	bne.n	800ded2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f003 fff2 	bl	8011eb4 <tcp_output>
 800ded0:	e00d      	b.n	800deee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ded2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ded6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deda:	d108      	bne.n	800deee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	8b5b      	ldrh	r3, [r3, #26]
 800dee0:	f043 0308 	orr.w	r3, r3, #8
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	e001      	b.n	800def2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800deee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	0801a694 	.word	0x0801a694
 800df00:	0801a744 	.word	0x0801a744
 800df04:	0801a6d8 	.word	0x0801a6d8

0800df08 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d109      	bne.n	800df2a <tcp_close+0x22>
 800df16:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <tcp_close+0x4c>)
 800df18:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800df1c:	490e      	ldr	r1, [pc, #56]	; (800df58 <tcp_close+0x50>)
 800df1e:	480f      	ldr	r0, [pc, #60]	; (800df5c <tcp_close+0x54>)
 800df20:	f00a fffe 	bl	8018f20 <iprintf>
 800df24:	f06f 030f 	mvn.w	r3, #15
 800df28:	e00f      	b.n	800df4a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	7d1b      	ldrb	r3, [r3, #20]
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d006      	beq.n	800df40 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	8b5b      	ldrh	r3, [r3, #26]
 800df36:	f043 0310 	orr.w	r3, r3, #16
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800df40:	2101      	movs	r1, #1
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f7ff fe94 	bl	800dc70 <tcp_close_shutdown>
 800df48:	4603      	mov	r3, r0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	0801a694 	.word	0x0801a694
 800df58:	0801a7a4 	.word	0x0801a7a4
 800df5c:	0801a6d8 	.word	0x0801a6d8

0800df60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08e      	sub	sp, #56	; 0x38
 800df64:	af04      	add	r7, sp, #16
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d107      	bne.n	800df80 <tcp_abandon+0x20>
 800df70:	4b52      	ldr	r3, [pc, #328]	; (800e0bc <tcp_abandon+0x15c>)
 800df72:	f240 223d 	movw	r2, #573	; 0x23d
 800df76:	4952      	ldr	r1, [pc, #328]	; (800e0c0 <tcp_abandon+0x160>)
 800df78:	4852      	ldr	r0, [pc, #328]	; (800e0c4 <tcp_abandon+0x164>)
 800df7a:	f00a ffd1 	bl	8018f20 <iprintf>
 800df7e:	e099      	b.n	800e0b4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	7d1b      	ldrb	r3, [r3, #20]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d106      	bne.n	800df96 <tcp_abandon+0x36>
 800df88:	4b4c      	ldr	r3, [pc, #304]	; (800e0bc <tcp_abandon+0x15c>)
 800df8a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800df8e:	494e      	ldr	r1, [pc, #312]	; (800e0c8 <tcp_abandon+0x168>)
 800df90:	484c      	ldr	r0, [pc, #304]	; (800e0c4 <tcp_abandon+0x164>)
 800df92:	f00a ffc5 	bl	8018f20 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	7d1b      	ldrb	r3, [r3, #20]
 800df9a:	2b0a      	cmp	r3, #10
 800df9c:	d107      	bne.n	800dfae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800df9e:	6879      	ldr	r1, [r7, #4]
 800dfa0:	484a      	ldr	r0, [pc, #296]	; (800e0cc <tcp_abandon+0x16c>)
 800dfa2:	f000 ffc3 	bl	800ef2c <tcp_pcb_remove>
    tcp_free(pcb);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7ff fdb0 	bl	800db0c <tcp_free>
 800dfac:	e082      	b.n	800e0b4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfc8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	7d1b      	ldrb	r3, [r3, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d126      	bne.n	800e026 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	8adb      	ldrh	r3, [r3, #22]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d02e      	beq.n	800e03e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfe0:	4b3b      	ldr	r3, [pc, #236]	; (800e0d0 <tcp_abandon+0x170>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d105      	bne.n	800dff6 <tcp_abandon+0x96>
 800dfea:	4b39      	ldr	r3, [pc, #228]	; (800e0d0 <tcp_abandon+0x170>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	4a37      	ldr	r2, [pc, #220]	; (800e0d0 <tcp_abandon+0x170>)
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	e013      	b.n	800e01e <tcp_abandon+0xbe>
 800dff6:	4b36      	ldr	r3, [pc, #216]	; (800e0d0 <tcp_abandon+0x170>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	61fb      	str	r3, [r7, #28]
 800dffc:	e00c      	b.n	800e018 <tcp_abandon+0xb8>
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	429a      	cmp	r2, r3
 800e006:	d104      	bne.n	800e012 <tcp_abandon+0xb2>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68da      	ldr	r2, [r3, #12]
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	60da      	str	r2, [r3, #12]
 800e010:	e005      	b.n	800e01e <tcp_abandon+0xbe>
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	61fb      	str	r3, [r7, #28]
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1ef      	bne.n	800dffe <tcp_abandon+0x9e>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	60da      	str	r2, [r3, #12]
 800e024:	e00b      	b.n	800e03e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	8adb      	ldrh	r3, [r3, #22]
 800e02e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	4828      	ldr	r0, [pc, #160]	; (800e0d4 <tcp_abandon+0x174>)
 800e034:	f000 ff7a 	bl	800ef2c <tcp_pcb_remove>
 800e038:	4b27      	ldr	r3, [pc, #156]	; (800e0d8 <tcp_abandon+0x178>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e042:	2b00      	cmp	r3, #0
 800e044:	d004      	beq.n	800e050 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 fd1c 	bl	800ea88 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d004      	beq.n	800e062 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 fd13 	bl	800ea88 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e066:	2b00      	cmp	r3, #0
 800e068:	d004      	beq.n	800e074 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 fd0a 	bl	800ea88 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00e      	beq.n	800e098 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e07a:	6879      	ldr	r1, [r7, #4]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	3304      	adds	r3, #4
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	8b12      	ldrh	r2, [r2, #24]
 800e084:	9202      	str	r2, [sp, #8]
 800e086:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e088:	9201      	str	r2, [sp, #4]
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	460b      	mov	r3, r1
 800e08e:	697a      	ldr	r2, [r7, #20]
 800e090:	69b9      	ldr	r1, [r7, #24]
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f004 fcc2 	bl	8012a1c <tcp_rst>
    }
    last_state = pcb->state;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	7d1b      	ldrb	r3, [r3, #20]
 800e09c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff fd34 	bl	800db0c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d004      	beq.n	800e0b4 <tcp_abandon+0x154>
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	f06f 010c 	mvn.w	r1, #12
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	4798      	blx	r3
  }
}
 800e0b4:	3728      	adds	r7, #40	; 0x28
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	0801a694 	.word	0x0801a694
 800e0c0:	0801a7d8 	.word	0x0801a7d8
 800e0c4:	0801a6d8 	.word	0x0801a6d8
 800e0c8:	0801a7f4 	.word	0x0801a7f4
 800e0cc:	2000c95c 	.word	0x2000c95c
 800e0d0:	2000c950 	.word	0x2000c950
 800e0d4:	2000c958 	.word	0x2000c958
 800e0d8:	2000c960 	.word	0x2000c960

0800e0dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e0e4:	2101      	movs	r1, #1
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f7ff ff3a 	bl	800df60 <tcp_abandon>
}
 800e0ec:	bf00      	nop
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d106      	bne.n	800e110 <tcp_update_rcv_ann_wnd+0x1c>
 800e102:	4b25      	ldr	r3, [pc, #148]	; (800e198 <tcp_update_rcv_ann_wnd+0xa4>)
 800e104:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e108:	4924      	ldr	r1, [pc, #144]	; (800e19c <tcp_update_rcv_ann_wnd+0xa8>)
 800e10a:	4825      	ldr	r0, [pc, #148]	; (800e1a0 <tcp_update_rcv_ann_wnd+0xac>)
 800e10c:	f00a ff08 	bl	8018f20 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e118:	4413      	add	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e124:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e128:	bf28      	it	cs
 800e12a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e12e:	b292      	uxth	r2, r2
 800e130:	4413      	add	r3, r2
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	2b00      	cmp	r3, #0
 800e138:	db08      	blt.n	800e14c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	e020      	b.n	800e18e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	2b00      	cmp	r3, #0
 800e158:	dd03      	ble.n	800e162 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e160:	e014      	b.n	800e18c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16a:	1ad3      	subs	r3, r2, r3
 800e16c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e174:	d306      	bcc.n	800e184 <tcp_update_rcv_ann_wnd+0x90>
 800e176:	4b08      	ldr	r3, [pc, #32]	; (800e198 <tcp_update_rcv_ann_wnd+0xa4>)
 800e178:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e17c:	4909      	ldr	r1, [pc, #36]	; (800e1a4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e17e:	4808      	ldr	r0, [pc, #32]	; (800e1a0 <tcp_update_rcv_ann_wnd+0xac>)
 800e180:	f00a fece 	bl	8018f20 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	b29a      	uxth	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e18c:	2300      	movs	r3, #0
  }
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	0801a694 	.word	0x0801a694
 800e19c:	0801a8f0 	.word	0x0801a8f0
 800e1a0:	0801a6d8 	.word	0x0801a6d8
 800e1a4:	0801a914 	.word	0x0801a914

0800e1a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d107      	bne.n	800e1ca <tcp_recved+0x22>
 800e1ba:	4b1f      	ldr	r3, [pc, #124]	; (800e238 <tcp_recved+0x90>)
 800e1bc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e1c0:	491e      	ldr	r1, [pc, #120]	; (800e23c <tcp_recved+0x94>)
 800e1c2:	481f      	ldr	r0, [pc, #124]	; (800e240 <tcp_recved+0x98>)
 800e1c4:	f00a feac 	bl	8018f20 <iprintf>
 800e1c8:	e032      	b.n	800e230 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	7d1b      	ldrb	r3, [r3, #20]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d106      	bne.n	800e1e0 <tcp_recved+0x38>
 800e1d2:	4b19      	ldr	r3, [pc, #100]	; (800e238 <tcp_recved+0x90>)
 800e1d4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e1d8:	491a      	ldr	r1, [pc, #104]	; (800e244 <tcp_recved+0x9c>)
 800e1da:	4819      	ldr	r0, [pc, #100]	; (800e240 <tcp_recved+0x98>)
 800e1dc:	f00a fea0 	bl	8018f20 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1e4:	887b      	ldrh	r3, [r7, #2]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e1ea:	89fb      	ldrh	r3, [r7, #14]
 800e1ec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e1f0:	d804      	bhi.n	800e1fc <tcp_recved+0x54>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1f6:	89fa      	ldrh	r2, [r7, #14]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d204      	bcs.n	800e206 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e202:	851a      	strh	r2, [r3, #40]	; 0x28
 800e204:	e002      	b.n	800e20c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	89fa      	ldrh	r2, [r7, #14]
 800e20a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff ff71 	bl	800e0f4 <tcp_update_rcv_ann_wnd>
 800e212:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e21a:	d309      	bcc.n	800e230 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	8b5b      	ldrh	r3, [r3, #26]
 800e220:	f043 0302 	orr.w	r3, r3, #2
 800e224:	b29a      	uxth	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f003 fe42 	bl	8011eb4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	0801a694 	.word	0x0801a694
 800e23c:	0801a930 	.word	0x0801a930
 800e240:	0801a6d8 	.word	0x0801a6d8
 800e244:	0801a948 	.word	0x0801a948

0800e248 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e248:	b5b0      	push	{r4, r5, r7, lr}
 800e24a:	b090      	sub	sp, #64	; 0x40
 800e24c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e254:	4b94      	ldr	r3, [pc, #592]	; (800e4a8 <tcp_slowtmr+0x260>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3301      	adds	r3, #1
 800e25a:	4a93      	ldr	r2, [pc, #588]	; (800e4a8 <tcp_slowtmr+0x260>)
 800e25c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e25e:	4b93      	ldr	r3, [pc, #588]	; (800e4ac <tcp_slowtmr+0x264>)
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	3301      	adds	r3, #1
 800e264:	b2da      	uxtb	r2, r3
 800e266:	4b91      	ldr	r3, [pc, #580]	; (800e4ac <tcp_slowtmr+0x264>)
 800e268:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e26a:	2300      	movs	r3, #0
 800e26c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e26e:	4b90      	ldr	r3, [pc, #576]	; (800e4b0 <tcp_slowtmr+0x268>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e274:	e29f      	b.n	800e7b6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e278:	7d1b      	ldrb	r3, [r3, #20]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d106      	bne.n	800e28c <tcp_slowtmr+0x44>
 800e27e:	4b8d      	ldr	r3, [pc, #564]	; (800e4b4 <tcp_slowtmr+0x26c>)
 800e280:	f240 42be 	movw	r2, #1214	; 0x4be
 800e284:	498c      	ldr	r1, [pc, #560]	; (800e4b8 <tcp_slowtmr+0x270>)
 800e286:	488d      	ldr	r0, [pc, #564]	; (800e4bc <tcp_slowtmr+0x274>)
 800e288:	f00a fe4a 	bl	8018f20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28e:	7d1b      	ldrb	r3, [r3, #20]
 800e290:	2b01      	cmp	r3, #1
 800e292:	d106      	bne.n	800e2a2 <tcp_slowtmr+0x5a>
 800e294:	4b87      	ldr	r3, [pc, #540]	; (800e4b4 <tcp_slowtmr+0x26c>)
 800e296:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e29a:	4989      	ldr	r1, [pc, #548]	; (800e4c0 <tcp_slowtmr+0x278>)
 800e29c:	4887      	ldr	r0, [pc, #540]	; (800e4bc <tcp_slowtmr+0x274>)
 800e29e:	f00a fe3f 	bl	8018f20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a4:	7d1b      	ldrb	r3, [r3, #20]
 800e2a6:	2b0a      	cmp	r3, #10
 800e2a8:	d106      	bne.n	800e2b8 <tcp_slowtmr+0x70>
 800e2aa:	4b82      	ldr	r3, [pc, #520]	; (800e4b4 <tcp_slowtmr+0x26c>)
 800e2ac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e2b0:	4984      	ldr	r1, [pc, #528]	; (800e4c4 <tcp_slowtmr+0x27c>)
 800e2b2:	4882      	ldr	r0, [pc, #520]	; (800e4bc <tcp_slowtmr+0x274>)
 800e2b4:	f00a fe34 	bl	8018f20 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ba:	7f9a      	ldrb	r2, [r3, #30]
 800e2bc:	4b7b      	ldr	r3, [pc, #492]	; (800e4ac <tcp_slowtmr+0x264>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d105      	bne.n	800e2d0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e2ce:	e272      	b.n	800e7b6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e2d0:	4b76      	ldr	r3, [pc, #472]	; (800e4ac <tcp_slowtmr+0x264>)
 800e2d2:	781a      	ldrb	r2, [r3, #0]
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	7d1b      	ldrb	r3, [r3, #20]
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	d10a      	bne.n	800e302 <tcp_slowtmr+0xba>
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2f2:	2b05      	cmp	r3, #5
 800e2f4:	d905      	bls.n	800e302 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e2f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e300:	e11e      	b.n	800e540 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e308:	2b0b      	cmp	r3, #11
 800e30a:	d905      	bls.n	800e318 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e30c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e310:	3301      	adds	r3, #1
 800e312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e316:	e113      	b.n	800e540 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d075      	beq.n	800e40e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e326:	2b00      	cmp	r3, #0
 800e328:	d006      	beq.n	800e338 <tcp_slowtmr+0xf0>
 800e32a:	4b62      	ldr	r3, [pc, #392]	; (800e4b4 <tcp_slowtmr+0x26c>)
 800e32c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e330:	4965      	ldr	r1, [pc, #404]	; (800e4c8 <tcp_slowtmr+0x280>)
 800e332:	4862      	ldr	r0, [pc, #392]	; (800e4bc <tcp_slowtmr+0x274>)
 800e334:	f00a fdf4 	bl	8018f20 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d106      	bne.n	800e34e <tcp_slowtmr+0x106>
 800e340:	4b5c      	ldr	r3, [pc, #368]	; (800e4b4 <tcp_slowtmr+0x26c>)
 800e342:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e346:	4961      	ldr	r1, [pc, #388]	; (800e4cc <tcp_slowtmr+0x284>)
 800e348:	485c      	ldr	r0, [pc, #368]	; (800e4bc <tcp_slowtmr+0x274>)
 800e34a:	f00a fde9 	bl	8018f20 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e350:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e354:	2b0b      	cmp	r3, #11
 800e356:	d905      	bls.n	800e364 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e35c:	3301      	adds	r3, #1
 800e35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e362:	e0ed      	b.n	800e540 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e366:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e36a:	3b01      	subs	r3, #1
 800e36c:	4a58      	ldr	r2, [pc, #352]	; (800e4d0 <tcp_slowtmr+0x288>)
 800e36e:	5cd3      	ldrb	r3, [r2, r3]
 800e370:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e378:	7c7a      	ldrb	r2, [r7, #17]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d907      	bls.n	800e38e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e384:	3301      	adds	r3, #1
 800e386:	b2da      	uxtb	r2, r3
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e390:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e394:	7c7a      	ldrb	r2, [r7, #17]
 800e396:	429a      	cmp	r2, r3
 800e398:	f200 80d2 	bhi.w	800e540 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e39c:	2301      	movs	r3, #1
 800e39e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d108      	bne.n	800e3bc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e3aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3ac:	f004 fc2a 	bl	8012c04 <tcp_zero_window_probe>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d014      	beq.n	800e3e0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	623b      	str	r3, [r7, #32]
 800e3ba:	e011      	b.n	800e3e0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3c6:	f003 faef 	bl	80119a8 <tcp_split_unsent_seg>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d107      	bne.n	800e3e0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e3d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3d2:	f003 fd6f 	bl	8011eb4 <tcp_output>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d101      	bne.n	800e3e0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 80ac 	beq.w	800e540 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e3f6:	2b06      	cmp	r3, #6
 800e3f8:	f200 80a2 	bhi.w	800e540 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e402:	3301      	adds	r3, #1
 800e404:	b2da      	uxtb	r2, r3
 800e406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e408:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e40c:	e098      	b.n	800e540 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e410:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e414:	2b00      	cmp	r3, #0
 800e416:	db0f      	blt.n	800e438 <tcp_slowtmr+0x1f0>
 800e418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e41e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e422:	4293      	cmp	r3, r2
 800e424:	d008      	beq.n	800e438 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	3301      	adds	r3, #1
 800e430:	b29b      	uxth	r3, r3
 800e432:	b21a      	sxth	r2, r3
 800e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e436:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e440:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e444:	429a      	cmp	r2, r3
 800e446:	db7b      	blt.n	800e540 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e44a:	f004 f825 	bl	8012498 <tcp_rexmit_rto_prepare>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d007      	beq.n	800e464 <tcp_slowtmr+0x21c>
 800e454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d171      	bne.n	800e540 <tcp_slowtmr+0x2f8>
 800e45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e460:	2b00      	cmp	r3, #0
 800e462:	d06d      	beq.n	800e540 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e466:	7d1b      	ldrb	r3, [r3, #20]
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d03a      	beq.n	800e4e2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e472:	2b0c      	cmp	r3, #12
 800e474:	bf28      	it	cs
 800e476:	230c      	movcs	r3, #12
 800e478:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e480:	10db      	asrs	r3, r3, #3
 800e482:	b21b      	sxth	r3, r3
 800e484:	461a      	mov	r2, r3
 800e486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e488:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e48c:	4413      	add	r3, r2
 800e48e:	7efa      	ldrb	r2, [r7, #27]
 800e490:	4910      	ldr	r1, [pc, #64]	; (800e4d4 <tcp_slowtmr+0x28c>)
 800e492:	5c8a      	ldrb	r2, [r1, r2]
 800e494:	4093      	lsls	r3, r2
 800e496:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	dc1a      	bgt.n	800e4d8 <tcp_slowtmr+0x290>
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	b21a      	sxth	r2, r3
 800e4a6:	e019      	b.n	800e4dc <tcp_slowtmr+0x294>
 800e4a8:	2000c94c 	.word	0x2000c94c
 800e4ac:	2000c962 	.word	0x2000c962
 800e4b0:	2000c958 	.word	0x2000c958
 800e4b4:	0801a694 	.word	0x0801a694
 800e4b8:	0801a9d8 	.word	0x0801a9d8
 800e4bc:	0801a6d8 	.word	0x0801a6d8
 800e4c0:	0801aa04 	.word	0x0801aa04
 800e4c4:	0801aa30 	.word	0x0801aa30
 800e4c8:	0801aa60 	.word	0x0801aa60
 800e4cc:	0801aa94 	.word	0x0801aa94
 800e4d0:	0801cab8 	.word	0x0801cab8
 800e4d4:	0801caa8 	.word	0x0801caa8
 800e4d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	bf28      	it	cs
 800e4f8:	4613      	movcs	r3, r2
 800e4fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e4fc:	8a7b      	ldrh	r3, [r7, #18]
 800e4fe:	085b      	lsrs	r3, r3, #1
 800e500:	b29a      	uxth	r2, r3
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	b29b      	uxth	r3, r3
 800e516:	429a      	cmp	r2, r3
 800e518:	d206      	bcs.n	800e528 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e51e:	005b      	lsls	r3, r3, #1
 800e520:	b29a      	uxth	r2, r3
 800e522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e524:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e534:	2200      	movs	r2, #0
 800e536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e53a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e53c:	f004 f81c 	bl	8012578 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	7d1b      	ldrb	r3, [r3, #20]
 800e544:	2b06      	cmp	r3, #6
 800e546:	d111      	bne.n	800e56c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	8b5b      	ldrh	r3, [r3, #26]
 800e54c:	f003 0310 	and.w	r3, r3, #16
 800e550:	2b00      	cmp	r3, #0
 800e552:	d00b      	beq.n	800e56c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e554:	4b9d      	ldr	r3, [pc, #628]	; (800e7cc <tcp_slowtmr+0x584>)
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	6a1b      	ldr	r3, [r3, #32]
 800e55c:	1ad3      	subs	r3, r2, r3
 800e55e:	2b28      	cmp	r3, #40	; 0x28
 800e560:	d904      	bls.n	800e56c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e566:	3301      	adds	r3, #1
 800e568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	7a5b      	ldrb	r3, [r3, #9]
 800e570:	f003 0308 	and.w	r3, r3, #8
 800e574:	2b00      	cmp	r3, #0
 800e576:	d04c      	beq.n	800e612 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e57c:	2b04      	cmp	r3, #4
 800e57e:	d003      	beq.n	800e588 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e582:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e584:	2b07      	cmp	r3, #7
 800e586:	d144      	bne.n	800e612 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e588:	4b90      	ldr	r3, [pc, #576]	; (800e7cc <tcp_slowtmr+0x584>)
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58e:	6a1b      	ldr	r3, [r3, #32]
 800e590:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e598:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e59c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e5a0:	498b      	ldr	r1, [pc, #556]	; (800e7d0 <tcp_slowtmr+0x588>)
 800e5a2:	fba1 1303 	umull	r1, r3, r1, r3
 800e5a6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d90a      	bls.n	800e5c2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e5b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e5c0:	e027      	b.n	800e612 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5c2:	4b82      	ldr	r3, [pc, #520]	; (800e7cc <tcp_slowtmr+0x584>)
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	6a1b      	ldr	r3, [r3, #32]
 800e5ca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e5d8:	4618      	mov	r0, r3
 800e5da:	4b7e      	ldr	r3, [pc, #504]	; (800e7d4 <tcp_slowtmr+0x58c>)
 800e5dc:	fb00 f303 	mul.w	r3, r0, r3
 800e5e0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e5e2:	497b      	ldr	r1, [pc, #492]	; (800e7d0 <tcp_slowtmr+0x588>)
 800e5e4:	fba1 1303 	umull	r1, r3, r1, r3
 800e5e8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d911      	bls.n	800e612 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e5ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5f0:	f004 fac8 	bl	8012b84 <tcp_keepalive>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e5fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d107      	bne.n	800e612 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e604:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e608:	3301      	adds	r3, #1
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e616:	2b00      	cmp	r3, #0
 800e618:	d011      	beq.n	800e63e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e61a:	4b6c      	ldr	r3, [pc, #432]	; (800e7cc <tcp_slowtmr+0x584>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	6a1b      	ldr	r3, [r3, #32]
 800e622:	1ad2      	subs	r2, r2, r3
 800e624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e626:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e62a:	4619      	mov	r1, r3
 800e62c:	460b      	mov	r3, r1
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	440b      	add	r3, r1
 800e632:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e634:	429a      	cmp	r2, r3
 800e636:	d302      	bcc.n	800e63e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e63a:	f000 fddb 	bl	800f1f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e640:	7d1b      	ldrb	r3, [r3, #20]
 800e642:	2b03      	cmp	r3, #3
 800e644:	d10b      	bne.n	800e65e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e646:	4b61      	ldr	r3, [pc, #388]	; (800e7cc <tcp_slowtmr+0x584>)
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	2b28      	cmp	r3, #40	; 0x28
 800e652:	d904      	bls.n	800e65e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e658:	3301      	adds	r3, #1
 800e65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e660:	7d1b      	ldrb	r3, [r3, #20]
 800e662:	2b09      	cmp	r3, #9
 800e664:	d10b      	bne.n	800e67e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e666:	4b59      	ldr	r3, [pc, #356]	; (800e7cc <tcp_slowtmr+0x584>)
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	6a1b      	ldr	r3, [r3, #32]
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	2bf0      	cmp	r3, #240	; 0xf0
 800e672:	d904      	bls.n	800e67e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e678:	3301      	adds	r3, #1
 800e67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e67e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e682:	2b00      	cmp	r3, #0
 800e684:	d060      	beq.n	800e748 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e68c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e68e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e690:	f000 fbfc 	bl	800ee8c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e696:	2b00      	cmp	r3, #0
 800e698:	d010      	beq.n	800e6bc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e69a:	4b4f      	ldr	r3, [pc, #316]	; (800e7d8 <tcp_slowtmr+0x590>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d106      	bne.n	800e6b2 <tcp_slowtmr+0x46a>
 800e6a4:	4b4d      	ldr	r3, [pc, #308]	; (800e7dc <tcp_slowtmr+0x594>)
 800e6a6:	f240 526d 	movw	r2, #1389	; 0x56d
 800e6aa:	494d      	ldr	r1, [pc, #308]	; (800e7e0 <tcp_slowtmr+0x598>)
 800e6ac:	484d      	ldr	r0, [pc, #308]	; (800e7e4 <tcp_slowtmr+0x59c>)
 800e6ae:	f00a fc37 	bl	8018f20 <iprintf>
        prev->next = pcb->next;
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	68da      	ldr	r2, [r3, #12]
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	60da      	str	r2, [r3, #12]
 800e6ba:	e00f      	b.n	800e6dc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e6bc:	4b46      	ldr	r3, [pc, #280]	; (800e7d8 <tcp_slowtmr+0x590>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d006      	beq.n	800e6d4 <tcp_slowtmr+0x48c>
 800e6c6:	4b45      	ldr	r3, [pc, #276]	; (800e7dc <tcp_slowtmr+0x594>)
 800e6c8:	f240 5271 	movw	r2, #1393	; 0x571
 800e6cc:	4946      	ldr	r1, [pc, #280]	; (800e7e8 <tcp_slowtmr+0x5a0>)
 800e6ce:	4845      	ldr	r0, [pc, #276]	; (800e7e4 <tcp_slowtmr+0x59c>)
 800e6d0:	f00a fc26 	bl	8018f20 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	4a3f      	ldr	r2, [pc, #252]	; (800e7d8 <tcp_slowtmr+0x590>)
 800e6da:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e6dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d013      	beq.n	800e70c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e6ec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6f4:	8ad2      	ldrh	r2, [r2, #22]
 800e6f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6f8:	8b09      	ldrh	r1, [r1, #24]
 800e6fa:	9102      	str	r1, [sp, #8]
 800e6fc:	9201      	str	r2, [sp, #4]
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	462b      	mov	r3, r5
 800e702:	4622      	mov	r2, r4
 800e704:	4601      	mov	r1, r0
 800e706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e708:	f004 f988 	bl	8012a1c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	691b      	ldr	r3, [r3, #16]
 800e710:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	7d1b      	ldrb	r3, [r3, #20]
 800e716:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e722:	6838      	ldr	r0, [r7, #0]
 800e724:	f7ff f9f2 	bl	800db0c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e728:	4b30      	ldr	r3, [pc, #192]	; (800e7ec <tcp_slowtmr+0x5a4>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d004      	beq.n	800e73e <tcp_slowtmr+0x4f6>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f06f 010c 	mvn.w	r1, #12
 800e73a:	68b8      	ldr	r0, [r7, #8]
 800e73c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e73e:	4b2b      	ldr	r3, [pc, #172]	; (800e7ec <tcp_slowtmr+0x5a4>)
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d037      	beq.n	800e7b6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e746:	e590      	b.n	800e26a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e754:	7f1b      	ldrb	r3, [r3, #28]
 800e756:	3301      	adds	r3, #1
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e760:	7f1a      	ldrb	r2, [r3, #28]
 800e762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e764:	7f5b      	ldrb	r3, [r3, #29]
 800e766:	429a      	cmp	r2, r3
 800e768:	d325      	bcc.n	800e7b6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76c:	2200      	movs	r2, #0
 800e76e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e770:	4b1e      	ldr	r3, [pc, #120]	; (800e7ec <tcp_slowtmr+0x5a4>)
 800e772:	2200      	movs	r2, #0
 800e774:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00b      	beq.n	800e798 <tcp_slowtmr+0x550>
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e788:	6912      	ldr	r2, [r2, #16]
 800e78a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e78c:	4610      	mov	r0, r2
 800e78e:	4798      	blx	r3
 800e790:	4603      	mov	r3, r0
 800e792:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e796:	e002      	b.n	800e79e <tcp_slowtmr+0x556>
 800e798:	2300      	movs	r3, #0
 800e79a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e79e:	4b13      	ldr	r3, [pc, #76]	; (800e7ec <tcp_slowtmr+0x5a4>)
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d000      	beq.n	800e7a8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e7a6:	e560      	b.n	800e26a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e7a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d102      	bne.n	800e7b6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e7b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7b2:	f003 fb7f 	bl	8011eb4 <tcp_output>
  while (pcb != NULL) {
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f47f ad5c 	bne.w	800e276 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e7c2:	4b0b      	ldr	r3, [pc, #44]	; (800e7f0 <tcp_slowtmr+0x5a8>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e7c8:	e067      	b.n	800e89a <tcp_slowtmr+0x652>
 800e7ca:	bf00      	nop
 800e7cc:	2000c94c 	.word	0x2000c94c
 800e7d0:	10624dd3 	.word	0x10624dd3
 800e7d4:	000124f8 	.word	0x000124f8
 800e7d8:	2000c958 	.word	0x2000c958
 800e7dc:	0801a694 	.word	0x0801a694
 800e7e0:	0801aacc 	.word	0x0801aacc
 800e7e4:	0801a6d8 	.word	0x0801a6d8
 800e7e8:	0801aaf8 	.word	0x0801aaf8
 800e7ec:	2000c960 	.word	0x2000c960
 800e7f0:	2000c95c 	.word	0x2000c95c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f6:	7d1b      	ldrb	r3, [r3, #20]
 800e7f8:	2b0a      	cmp	r3, #10
 800e7fa:	d006      	beq.n	800e80a <tcp_slowtmr+0x5c2>
 800e7fc:	4b2b      	ldr	r3, [pc, #172]	; (800e8ac <tcp_slowtmr+0x664>)
 800e7fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e802:	492b      	ldr	r1, [pc, #172]	; (800e8b0 <tcp_slowtmr+0x668>)
 800e804:	482b      	ldr	r0, [pc, #172]	; (800e8b4 <tcp_slowtmr+0x66c>)
 800e806:	f00a fb8b 	bl	8018f20 <iprintf>
    pcb_remove = 0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e810:	4b29      	ldr	r3, [pc, #164]	; (800e8b8 <tcp_slowtmr+0x670>)
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	6a1b      	ldr	r3, [r3, #32]
 800e818:	1ad3      	subs	r3, r2, r3
 800e81a:	2bf0      	cmp	r3, #240	; 0xf0
 800e81c:	d904      	bls.n	800e828 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e81e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e822:	3301      	adds	r3, #1
 800e824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d02f      	beq.n	800e890 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e832:	f000 fb2b 	bl	800ee8c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d010      	beq.n	800e85e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e83c:	4b1f      	ldr	r3, [pc, #124]	; (800e8bc <tcp_slowtmr+0x674>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e842:	429a      	cmp	r2, r3
 800e844:	d106      	bne.n	800e854 <tcp_slowtmr+0x60c>
 800e846:	4b19      	ldr	r3, [pc, #100]	; (800e8ac <tcp_slowtmr+0x664>)
 800e848:	f240 52af 	movw	r2, #1455	; 0x5af
 800e84c:	491c      	ldr	r1, [pc, #112]	; (800e8c0 <tcp_slowtmr+0x678>)
 800e84e:	4819      	ldr	r0, [pc, #100]	; (800e8b4 <tcp_slowtmr+0x66c>)
 800e850:	f00a fb66 	bl	8018f20 <iprintf>
        prev->next = pcb->next;
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	68da      	ldr	r2, [r3, #12]
 800e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85a:	60da      	str	r2, [r3, #12]
 800e85c:	e00f      	b.n	800e87e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e85e:	4b17      	ldr	r3, [pc, #92]	; (800e8bc <tcp_slowtmr+0x674>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e864:	429a      	cmp	r2, r3
 800e866:	d006      	beq.n	800e876 <tcp_slowtmr+0x62e>
 800e868:	4b10      	ldr	r3, [pc, #64]	; (800e8ac <tcp_slowtmr+0x664>)
 800e86a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e86e:	4915      	ldr	r1, [pc, #84]	; (800e8c4 <tcp_slowtmr+0x67c>)
 800e870:	4810      	ldr	r0, [pc, #64]	; (800e8b4 <tcp_slowtmr+0x66c>)
 800e872:	f00a fb55 	bl	8018f20 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	4a10      	ldr	r2, [pc, #64]	; (800e8bc <tcp_slowtmr+0x674>)
 800e87c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e888:	69f8      	ldr	r0, [r7, #28]
 800e88a:	f7ff f93f 	bl	800db0c <tcp_free>
 800e88e:	e004      	b.n	800e89a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e892:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1a9      	bne.n	800e7f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e8a0:	bf00      	nop
 800e8a2:	bf00      	nop
 800e8a4:	3730      	adds	r7, #48	; 0x30
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bdb0      	pop	{r4, r5, r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	0801a694 	.word	0x0801a694
 800e8b0:	0801ab24 	.word	0x0801ab24
 800e8b4:	0801a6d8 	.word	0x0801a6d8
 800e8b8:	2000c94c 	.word	0x2000c94c
 800e8bc:	2000c95c 	.word	0x2000c95c
 800e8c0:	0801ab54 	.word	0x0801ab54
 800e8c4:	0801ab7c 	.word	0x0801ab7c

0800e8c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e8ce:	4b2d      	ldr	r3, [pc, #180]	; (800e984 <tcp_fasttmr+0xbc>)
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	4b2b      	ldr	r3, [pc, #172]	; (800e984 <tcp_fasttmr+0xbc>)
 800e8d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e8da:	4b2b      	ldr	r3, [pc, #172]	; (800e988 <tcp_fasttmr+0xc0>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8e0:	e048      	b.n	800e974 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	7f9a      	ldrb	r2, [r3, #30]
 800e8e6:	4b27      	ldr	r3, [pc, #156]	; (800e984 <tcp_fasttmr+0xbc>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d03f      	beq.n	800e96e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e8ee:	4b25      	ldr	r3, [pc, #148]	; (800e984 <tcp_fasttmr+0xbc>)
 800e8f0:	781a      	ldrb	r2, [r3, #0]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	8b5b      	ldrh	r3, [r3, #26]
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d010      	beq.n	800e924 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	8b5b      	ldrh	r3, [r3, #26]
 800e906:	f043 0302 	orr.w	r3, r3, #2
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f003 facf 	bl	8011eb4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	8b5b      	ldrh	r3, [r3, #26]
 800e91a:	f023 0303 	bic.w	r3, r3, #3
 800e91e:	b29a      	uxth	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	8b5b      	ldrh	r3, [r3, #26]
 800e928:	f003 0308 	and.w	r3, r3, #8
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d009      	beq.n	800e944 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	8b5b      	ldrh	r3, [r3, #26]
 800e934:	f023 0308 	bic.w	r3, r3, #8
 800e938:	b29a      	uxth	r2, r3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f7ff fa78 	bl	800de34 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00a      	beq.n	800e968 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e952:	4b0e      	ldr	r3, [pc, #56]	; (800e98c <tcp_fasttmr+0xc4>)
 800e954:	2200      	movs	r2, #0
 800e956:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 f819 	bl	800e990 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e95e:	4b0b      	ldr	r3, [pc, #44]	; (800e98c <tcp_fasttmr+0xc4>)
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d000      	beq.n	800e968 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e966:	e7b8      	b.n	800e8da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	607b      	str	r3, [r7, #4]
 800e96c:	e002      	b.n	800e974 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1b3      	bne.n	800e8e2 <tcp_fasttmr+0x1a>
    }
  }
}
 800e97a:	bf00      	nop
 800e97c:	bf00      	nop
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	2000c962 	.word	0x2000c962
 800e988:	2000c958 	.word	0x2000c958
 800e98c:	2000c960 	.word	0x2000c960

0800e990 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e990:	b590      	push	{r4, r7, lr}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d109      	bne.n	800e9b2 <tcp_process_refused_data+0x22>
 800e99e:	4b37      	ldr	r3, [pc, #220]	; (800ea7c <tcp_process_refused_data+0xec>)
 800e9a0:	f240 6209 	movw	r2, #1545	; 0x609
 800e9a4:	4936      	ldr	r1, [pc, #216]	; (800ea80 <tcp_process_refused_data+0xf0>)
 800e9a6:	4837      	ldr	r0, [pc, #220]	; (800ea84 <tcp_process_refused_data+0xf4>)
 800e9a8:	f00a faba 	bl	8018f20 <iprintf>
 800e9ac:	f06f 030f 	mvn.w	r3, #15
 800e9b0:	e060      	b.n	800ea74 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9b6:	7b5b      	ldrb	r3, [r3, #13]
 800e9b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00b      	beq.n	800e9e8 <tcp_process_refused_data+0x58>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6918      	ldr	r0, [r3, #16]
 800e9da:	2300      	movs	r3, #0
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	6879      	ldr	r1, [r7, #4]
 800e9e0:	47a0      	blx	r4
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]
 800e9e6:	e007      	b.n	800e9f8 <tcp_process_refused_data+0x68>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	6879      	ldr	r1, [r7, #4]
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	f000 f8a4 	bl	800eb3c <tcp_recv_null>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d12a      	bne.n	800ea56 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ea00:	7bbb      	ldrb	r3, [r7, #14]
 800ea02:	f003 0320 	and.w	r3, r3, #32
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d033      	beq.n	800ea72 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ea12:	d005      	beq.n	800ea20 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea18:	3301      	adds	r3, #1
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00b      	beq.n	800ea42 <tcp_process_refused_data+0xb2>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6918      	ldr	r0, [r3, #16]
 800ea34:	2300      	movs	r3, #0
 800ea36:	2200      	movs	r2, #0
 800ea38:	6879      	ldr	r1, [r7, #4]
 800ea3a:	47a0      	blx	r4
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73fb      	strb	r3, [r7, #15]
 800ea40:	e001      	b.n	800ea46 <tcp_process_refused_data+0xb6>
 800ea42:	2300      	movs	r3, #0
 800ea44:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea4a:	f113 0f0d 	cmn.w	r3, #13
 800ea4e:	d110      	bne.n	800ea72 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea50:	f06f 030c 	mvn.w	r3, #12
 800ea54:	e00e      	b.n	800ea74 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ea56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea5a:	f113 0f0d 	cmn.w	r3, #13
 800ea5e:	d102      	bne.n	800ea66 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ea60:	f06f 030c 	mvn.w	r3, #12
 800ea64:	e006      	b.n	800ea74 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ea6c:	f06f 0304 	mvn.w	r3, #4
 800ea70:	e000      	b.n	800ea74 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd90      	pop	{r4, r7, pc}
 800ea7c:	0801a694 	.word	0x0801a694
 800ea80:	0801aba4 	.word	0x0801aba4
 800ea84:	0801a6d8 	.word	0x0801a6d8

0800ea88 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ea90:	e007      	b.n	800eaa2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 f80a 	bl	800eab2 <tcp_seg_free>
    seg = next;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1f4      	bne.n	800ea92 <tcp_segs_free+0xa>
  }
}
 800eaa8:	bf00      	nop
 800eaaa:	bf00      	nop
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b082      	sub	sp, #8
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00c      	beq.n	800eada <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d004      	beq.n	800ead2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fe fd63 	bl	800d598 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ead2:	6879      	ldr	r1, [r7, #4]
 800ead4:	2003      	movs	r0, #3
 800ead6:	f7fd ff21 	bl	800c91c <memp_free>
  }
}
 800eada:	bf00      	nop
 800eadc:	3708      	adds	r7, #8
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
	...

0800eae4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d106      	bne.n	800eb00 <tcp_seg_copy+0x1c>
 800eaf2:	4b0f      	ldr	r3, [pc, #60]	; (800eb30 <tcp_seg_copy+0x4c>)
 800eaf4:	f240 6282 	movw	r2, #1666	; 0x682
 800eaf8:	490e      	ldr	r1, [pc, #56]	; (800eb34 <tcp_seg_copy+0x50>)
 800eafa:	480f      	ldr	r0, [pc, #60]	; (800eb38 <tcp_seg_copy+0x54>)
 800eafc:	f00a fa10 	bl	8018f20 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eb00:	2003      	movs	r0, #3
 800eb02:	f7fd fe95 	bl	800c830 <memp_malloc>
 800eb06:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <tcp_seg_copy+0x2e>
    return NULL;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e00a      	b.n	800eb28 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb12:	2210      	movs	r2, #16
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f00a f90e 	bl	8018d38 <memcpy>
  pbuf_ref(cseg->p);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fe fddd 	bl	800d6e0 <pbuf_ref>
  return cseg;
 800eb26:	68fb      	ldr	r3, [r7, #12]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	0801a694 	.word	0x0801a694
 800eb34:	0801abe8 	.word	0x0801abe8
 800eb38:	0801a6d8 	.word	0x0801a6d8

0800eb3c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
 800eb48:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d109      	bne.n	800eb64 <tcp_recv_null+0x28>
 800eb50:	4b12      	ldr	r3, [pc, #72]	; (800eb9c <tcp_recv_null+0x60>)
 800eb52:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eb56:	4912      	ldr	r1, [pc, #72]	; (800eba0 <tcp_recv_null+0x64>)
 800eb58:	4812      	ldr	r0, [pc, #72]	; (800eba4 <tcp_recv_null+0x68>)
 800eb5a:	f00a f9e1 	bl	8018f20 <iprintf>
 800eb5e:	f06f 030f 	mvn.w	r3, #15
 800eb62:	e016      	b.n	800eb92 <tcp_recv_null+0x56>

  if (p != NULL) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d009      	beq.n	800eb7e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	891b      	ldrh	r3, [r3, #8]
 800eb6e:	4619      	mov	r1, r3
 800eb70:	68b8      	ldr	r0, [r7, #8]
 800eb72:	f7ff fb19 	bl	800e1a8 <tcp_recved>
    pbuf_free(p);
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7fe fd0e 	bl	800d598 <pbuf_free>
 800eb7c:	e008      	b.n	800eb90 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eb7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d104      	bne.n	800eb90 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eb86:	68b8      	ldr	r0, [r7, #8]
 800eb88:	f7ff f9be 	bl	800df08 <tcp_close>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	e000      	b.n	800eb92 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	0801a694 	.word	0x0801a694
 800eba0:	0801ac04 	.word	0x0801ac04
 800eba4:	0801a6d8 	.word	0x0801a6d8

0800eba8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	4603      	mov	r3, r0
 800ebb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ebb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	db01      	blt.n	800ebbe <tcp_kill_prio+0x16>
 800ebba:	79fb      	ldrb	r3, [r7, #7]
 800ebbc:	e000      	b.n	800ebc0 <tcp_kill_prio+0x18>
 800ebbe:	237f      	movs	r3, #127	; 0x7f
 800ebc0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ebc2:	7afb      	ldrb	r3, [r7, #11]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d034      	beq.n	800ec32 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ebc8:	7afb      	ldrb	r3, [r7, #11]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebd6:	4b19      	ldr	r3, [pc, #100]	; (800ec3c <tcp_kill_prio+0x94>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	617b      	str	r3, [r7, #20]
 800ebdc:	e01f      	b.n	800ec1e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	7d5b      	ldrb	r3, [r3, #21]
 800ebe2:	7afa      	ldrb	r2, [r7, #11]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d80c      	bhi.n	800ec02 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ebec:	7afa      	ldrb	r2, [r7, #11]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d112      	bne.n	800ec18 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebf2:	4b13      	ldr	r3, [pc, #76]	; (800ec40 <tcp_kill_prio+0x98>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	1ad3      	subs	r3, r2, r3
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d80a      	bhi.n	800ec18 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ec02:	4b0f      	ldr	r3, [pc, #60]	; (800ec40 <tcp_kill_prio+0x98>)
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	6a1b      	ldr	r3, [r3, #32]
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	7d5b      	ldrb	r3, [r3, #21]
 800ec16:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	617b      	str	r3, [r7, #20]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1dc      	bne.n	800ebde <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d004      	beq.n	800ec34 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec2a:	6938      	ldr	r0, [r7, #16]
 800ec2c:	f7ff fa56 	bl	800e0dc <tcp_abort>
 800ec30:	e000      	b.n	800ec34 <tcp_kill_prio+0x8c>
    return;
 800ec32:	bf00      	nop
  }
}
 800ec34:	3718      	adds	r7, #24
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	2000c958 	.word	0x2000c958
 800ec40:	2000c94c 	.word	0x2000c94c

0800ec44 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b086      	sub	sp, #24
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec4e:	79fb      	ldrb	r3, [r7, #7]
 800ec50:	2b08      	cmp	r3, #8
 800ec52:	d009      	beq.n	800ec68 <tcp_kill_state+0x24>
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	2b09      	cmp	r3, #9
 800ec58:	d006      	beq.n	800ec68 <tcp_kill_state+0x24>
 800ec5a:	4b1a      	ldr	r3, [pc, #104]	; (800ecc4 <tcp_kill_state+0x80>)
 800ec5c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ec60:	4919      	ldr	r1, [pc, #100]	; (800ecc8 <tcp_kill_state+0x84>)
 800ec62:	481a      	ldr	r0, [pc, #104]	; (800eccc <tcp_kill_state+0x88>)
 800ec64:	f00a f95c 	bl	8018f20 <iprintf>

  inactivity = 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec70:	4b17      	ldr	r3, [pc, #92]	; (800ecd0 <tcp_kill_state+0x8c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	617b      	str	r3, [r7, #20]
 800ec76:	e017      	b.n	800eca8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	7d1b      	ldrb	r3, [r3, #20]
 800ec7c:	79fa      	ldrb	r2, [r7, #7]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d10f      	bne.n	800eca2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec82:	4b14      	ldr	r3, [pc, #80]	; (800ecd4 <tcp_kill_state+0x90>)
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6a1b      	ldr	r3, [r3, #32]
 800ec8a:	1ad3      	subs	r3, r2, r3
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d807      	bhi.n	800eca2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ec92:	4b10      	ldr	r3, [pc, #64]	; (800ecd4 <tcp_kill_state+0x90>)
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	617b      	str	r3, [r7, #20]
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d1e4      	bne.n	800ec78 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d003      	beq.n	800ecbc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	6938      	ldr	r0, [r7, #16]
 800ecb8:	f7ff f952 	bl	800df60 <tcp_abandon>
  }
}
 800ecbc:	bf00      	nop
 800ecbe:	3718      	adds	r7, #24
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	0801a694 	.word	0x0801a694
 800ecc8:	0801ac20 	.word	0x0801ac20
 800eccc:	0801a6d8 	.word	0x0801a6d8
 800ecd0:	2000c958 	.word	0x2000c958
 800ecd4:	2000c94c 	.word	0x2000c94c

0800ecd8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ece2:	2300      	movs	r3, #0
 800ece4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ece6:	4b12      	ldr	r3, [pc, #72]	; (800ed30 <tcp_kill_timewait+0x58>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	60fb      	str	r3, [r7, #12]
 800ecec:	e012      	b.n	800ed14 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecee:	4b11      	ldr	r3, [pc, #68]	; (800ed34 <tcp_kill_timewait+0x5c>)
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6a1b      	ldr	r3, [r3, #32]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d807      	bhi.n	800ed0e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	; (800ed34 <tcp_kill_timewait+0x5c>)
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6a1b      	ldr	r3, [r3, #32]
 800ed06:	1ad3      	subs	r3, r2, r3
 800ed08:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	60fb      	str	r3, [r7, #12]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1e9      	bne.n	800ecee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d002      	beq.n	800ed26 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed20:	68b8      	ldr	r0, [r7, #8]
 800ed22:	f7ff f9db 	bl	800e0dc <tcp_abort>
  }
}
 800ed26:	bf00      	nop
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	2000c95c 	.word	0x2000c95c
 800ed34:	2000c94c 	.word	0x2000c94c

0800ed38 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed3e:	4b10      	ldr	r3, [pc, #64]	; (800ed80 <tcp_handle_closepend+0x48>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed44:	e014      	b.n	800ed70 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	68db      	ldr	r3, [r3, #12]
 800ed4a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8b5b      	ldrh	r3, [r3, #26]
 800ed50:	f003 0308 	and.w	r3, r3, #8
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d009      	beq.n	800ed6c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	8b5b      	ldrh	r3, [r3, #26]
 800ed5c:	f023 0308 	bic.w	r3, r3, #8
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f7ff f864 	bl	800de34 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1e7      	bne.n	800ed46 <tcp_handle_closepend+0xe>
  }
}
 800ed76:	bf00      	nop
 800ed78:	bf00      	nop
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	2000c958 	.word	0x2000c958

0800ed84 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed8e:	2001      	movs	r0, #1
 800ed90:	f7fd fd4e 	bl	800c830 <memp_malloc>
 800ed94:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d126      	bne.n	800edea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ed9c:	f7ff ffcc 	bl	800ed38 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eda0:	f7ff ff9a 	bl	800ecd8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eda4:	2001      	movs	r0, #1
 800eda6:	f7fd fd43 	bl	800c830 <memp_malloc>
 800edaa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d11b      	bne.n	800edea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800edb2:	2009      	movs	r0, #9
 800edb4:	f7ff ff46 	bl	800ec44 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edb8:	2001      	movs	r0, #1
 800edba:	f7fd fd39 	bl	800c830 <memp_malloc>
 800edbe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d111      	bne.n	800edea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800edc6:	2008      	movs	r0, #8
 800edc8:	f7ff ff3c 	bl	800ec44 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edcc:	2001      	movs	r0, #1
 800edce:	f7fd fd2f 	bl	800c830 <memp_malloc>
 800edd2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d107      	bne.n	800edea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800edda:	79fb      	ldrb	r3, [r7, #7]
 800eddc:	4618      	mov	r0, r3
 800edde:	f7ff fee3 	bl	800eba8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ede2:	2001      	movs	r0, #1
 800ede4:	f7fd fd24 	bl	800c830 <memp_malloc>
 800ede8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d03f      	beq.n	800ee70 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800edf0:	229c      	movs	r2, #156	; 0x9c
 800edf2:	2100      	movs	r1, #0
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f009 ffad 	bl	8018d54 <memset>
    pcb->prio = prio;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	79fa      	ldrb	r2, [r7, #7]
 800edfe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee10:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	22ff      	movs	r2, #255	; 0xff
 800ee1e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee26:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2206      	movs	r2, #6
 800ee2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2206      	movs	r2, #6
 800ee34:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee3c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ee46:	4b0d      	ldr	r3, [pc, #52]	; (800ee7c <tcp_alloc+0xf8>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee4e:	4b0c      	ldr	r3, [pc, #48]	; (800ee80 <tcp_alloc+0xfc>)
 800ee50:	781a      	ldrb	r2, [r3, #0]
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4a08      	ldr	r2, [pc, #32]	; (800ee84 <tcp_alloc+0x100>)
 800ee64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	4a07      	ldr	r2, [pc, #28]	; (800ee88 <tcp_alloc+0x104>)
 800ee6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ee70:	68fb      	ldr	r3, [r7, #12]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	2000c94c 	.word	0x2000c94c
 800ee80:	2000c962 	.word	0x2000c962
 800ee84:	0800eb3d 	.word	0x0800eb3d
 800ee88:	006ddd00 	.word	0x006ddd00

0800ee8c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d107      	bne.n	800eeaa <tcp_pcb_purge+0x1e>
 800ee9a:	4b21      	ldr	r3, [pc, #132]	; (800ef20 <tcp_pcb_purge+0x94>)
 800ee9c:	f640 0251 	movw	r2, #2129	; 0x851
 800eea0:	4920      	ldr	r1, [pc, #128]	; (800ef24 <tcp_pcb_purge+0x98>)
 800eea2:	4821      	ldr	r0, [pc, #132]	; (800ef28 <tcp_pcb_purge+0x9c>)
 800eea4:	f00a f83c 	bl	8018f20 <iprintf>
 800eea8:	e037      	b.n	800ef1a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	7d1b      	ldrb	r3, [r3, #20]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d033      	beq.n	800ef1a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eeb6:	2b0a      	cmp	r3, #10
 800eeb8:	d02f      	beq.n	800ef1a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d02b      	beq.n	800ef1a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d007      	beq.n	800eeda <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fe fb62 	bl	800d598 <pbuf_free>
      pcb->refused_data = NULL;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d002      	beq.n	800eee8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 f986 	bl	800f1f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eeee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7ff fdc7 	bl	800ea88 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7ff fdc2 	bl	800ea88 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	66da      	str	r2, [r3, #108]	; 0x6c
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	0801a694 	.word	0x0801a694
 800ef24:	0801ace0 	.word	0x0801ace0
 800ef28:	0801a6d8 	.word	0x0801a6d8

0800ef2c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d106      	bne.n	800ef4a <tcp_pcb_remove+0x1e>
 800ef3c:	4b3e      	ldr	r3, [pc, #248]	; (800f038 <tcp_pcb_remove+0x10c>)
 800ef3e:	f640 0283 	movw	r2, #2179	; 0x883
 800ef42:	493e      	ldr	r1, [pc, #248]	; (800f03c <tcp_pcb_remove+0x110>)
 800ef44:	483e      	ldr	r0, [pc, #248]	; (800f040 <tcp_pcb_remove+0x114>)
 800ef46:	f009 ffeb 	bl	8018f20 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d106      	bne.n	800ef5e <tcp_pcb_remove+0x32>
 800ef50:	4b39      	ldr	r3, [pc, #228]	; (800f038 <tcp_pcb_remove+0x10c>)
 800ef52:	f640 0284 	movw	r2, #2180	; 0x884
 800ef56:	493b      	ldr	r1, [pc, #236]	; (800f044 <tcp_pcb_remove+0x118>)
 800ef58:	4839      	ldr	r0, [pc, #228]	; (800f040 <tcp_pcb_remove+0x114>)
 800ef5a:	f009 ffe1 	bl	8018f20 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	683a      	ldr	r2, [r7, #0]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d105      	bne.n	800ef74 <tcp_pcb_remove+0x48>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68da      	ldr	r2, [r3, #12]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	e013      	b.n	800ef9c <tcp_pcb_remove+0x70>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e00c      	b.n	800ef96 <tcp_pcb_remove+0x6a>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	683a      	ldr	r2, [r7, #0]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d104      	bne.n	800ef90 <tcp_pcb_remove+0x64>
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	68da      	ldr	r2, [r3, #12]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	60da      	str	r2, [r3, #12]
 800ef8e:	e005      	b.n	800ef9c <tcp_pcb_remove+0x70>
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d1ef      	bne.n	800ef7c <tcp_pcb_remove+0x50>
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800efa2:	6838      	ldr	r0, [r7, #0]
 800efa4:	f7ff ff72 	bl	800ee8c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	7d1b      	ldrb	r3, [r3, #20]
 800efac:	2b0a      	cmp	r3, #10
 800efae:	d013      	beq.n	800efd8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d00f      	beq.n	800efd8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	8b5b      	ldrh	r3, [r3, #26]
 800efbc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d009      	beq.n	800efd8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	8b5b      	ldrh	r3, [r3, #26]
 800efc8:	f043 0302 	orr.w	r3, r3, #2
 800efcc:	b29a      	uxth	r2, r3
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800efd2:	6838      	ldr	r0, [r7, #0]
 800efd4:	f002 ff6e 	bl	8011eb4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	7d1b      	ldrb	r3, [r3, #20]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d020      	beq.n	800f022 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d006      	beq.n	800eff6 <tcp_pcb_remove+0xca>
 800efe8:	4b13      	ldr	r3, [pc, #76]	; (800f038 <tcp_pcb_remove+0x10c>)
 800efea:	f640 0293 	movw	r2, #2195	; 0x893
 800efee:	4916      	ldr	r1, [pc, #88]	; (800f048 <tcp_pcb_remove+0x11c>)
 800eff0:	4813      	ldr	r0, [pc, #76]	; (800f040 <tcp_pcb_remove+0x114>)
 800eff2:	f009 ff95 	bl	8018f20 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800effa:	2b00      	cmp	r3, #0
 800effc:	d006      	beq.n	800f00c <tcp_pcb_remove+0xe0>
 800effe:	4b0e      	ldr	r3, [pc, #56]	; (800f038 <tcp_pcb_remove+0x10c>)
 800f000:	f640 0294 	movw	r2, #2196	; 0x894
 800f004:	4911      	ldr	r1, [pc, #68]	; (800f04c <tcp_pcb_remove+0x120>)
 800f006:	480e      	ldr	r0, [pc, #56]	; (800f040 <tcp_pcb_remove+0x114>)
 800f008:	f009 ff8a 	bl	8018f20 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f010:	2b00      	cmp	r3, #0
 800f012:	d006      	beq.n	800f022 <tcp_pcb_remove+0xf6>
 800f014:	4b08      	ldr	r3, [pc, #32]	; (800f038 <tcp_pcb_remove+0x10c>)
 800f016:	f640 0296 	movw	r2, #2198	; 0x896
 800f01a:	490d      	ldr	r1, [pc, #52]	; (800f050 <tcp_pcb_remove+0x124>)
 800f01c:	4808      	ldr	r0, [pc, #32]	; (800f040 <tcp_pcb_remove+0x114>)
 800f01e:	f009 ff7f 	bl	8018f20 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	2200      	movs	r2, #0
 800f026:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	2200      	movs	r2, #0
 800f02c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f02e:	bf00      	nop
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	0801a694 	.word	0x0801a694
 800f03c:	0801acfc 	.word	0x0801acfc
 800f040:	0801a6d8 	.word	0x0801a6d8
 800f044:	0801ad18 	.word	0x0801ad18
 800f048:	0801ad38 	.word	0x0801ad38
 800f04c:	0801ad50 	.word	0x0801ad50
 800f050:	0801ad6c 	.word	0x0801ad6c

0800f054 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d106      	bne.n	800f070 <tcp_next_iss+0x1c>
 800f062:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <tcp_next_iss+0x38>)
 800f064:	f640 02af 	movw	r2, #2223	; 0x8af
 800f068:	4909      	ldr	r1, [pc, #36]	; (800f090 <tcp_next_iss+0x3c>)
 800f06a:	480a      	ldr	r0, [pc, #40]	; (800f094 <tcp_next_iss+0x40>)
 800f06c:	f009 ff58 	bl	8018f20 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f070:	4b09      	ldr	r3, [pc, #36]	; (800f098 <tcp_next_iss+0x44>)
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	4b09      	ldr	r3, [pc, #36]	; (800f09c <tcp_next_iss+0x48>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4413      	add	r3, r2
 800f07a:	4a07      	ldr	r2, [pc, #28]	; (800f098 <tcp_next_iss+0x44>)
 800f07c:	6013      	str	r3, [r2, #0]
  return iss;
 800f07e:	4b06      	ldr	r3, [pc, #24]	; (800f098 <tcp_next_iss+0x44>)
 800f080:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f082:	4618      	mov	r0, r3
 800f084:	3708      	adds	r7, #8
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	0801a694 	.word	0x0801a694
 800f090:	0801ad84 	.word	0x0801ad84
 800f094:	0801a6d8 	.word	0x0801a6d8
 800f098:	200000a0 	.word	0x200000a0
 800f09c:	2000c94c 	.word	0x2000c94c

0800f0a0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b086      	sub	sp, #24
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
 800f0ac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d106      	bne.n	800f0c2 <tcp_eff_send_mss_netif+0x22>
 800f0b4:	4b14      	ldr	r3, [pc, #80]	; (800f108 <tcp_eff_send_mss_netif+0x68>)
 800f0b6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f0ba:	4914      	ldr	r1, [pc, #80]	; (800f10c <tcp_eff_send_mss_netif+0x6c>)
 800f0bc:	4814      	ldr	r0, [pc, #80]	; (800f110 <tcp_eff_send_mss_netif+0x70>)
 800f0be:	f009 ff2f 	bl	8018f20 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d101      	bne.n	800f0cc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f0c8:	89fb      	ldrh	r3, [r7, #14]
 800f0ca:	e019      	b.n	800f100 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0d0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f0d2:	8afb      	ldrh	r3, [r7, #22]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d012      	beq.n	800f0fe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f0d8:	2328      	movs	r3, #40	; 0x28
 800f0da:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f0dc:	8afa      	ldrh	r2, [r7, #22]
 800f0de:	8abb      	ldrh	r3, [r7, #20]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d904      	bls.n	800f0ee <tcp_eff_send_mss_netif+0x4e>
 800f0e4:	8afa      	ldrh	r2, [r7, #22]
 800f0e6:	8abb      	ldrh	r3, [r7, #20]
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	e000      	b.n	800f0f0 <tcp_eff_send_mss_netif+0x50>
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f0f2:	8a7a      	ldrh	r2, [r7, #18]
 800f0f4:	89fb      	ldrh	r3, [r7, #14]
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	bf28      	it	cs
 800f0fa:	4613      	movcs	r3, r2
 800f0fc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f0fe:	89fb      	ldrh	r3, [r7, #14]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3718      	adds	r7, #24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	0801a694 	.word	0x0801a694
 800f10c:	0801ada0 	.word	0x0801ada0
 800f110:	0801a6d8 	.word	0x0801a6d8

0800f114 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d119      	bne.n	800f15c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f128:	4b10      	ldr	r3, [pc, #64]	; (800f16c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f12a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f12e:	4910      	ldr	r1, [pc, #64]	; (800f170 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f130:	4810      	ldr	r0, [pc, #64]	; (800f174 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f132:	f009 fef5 	bl	8018f20 <iprintf>

  while (pcb != NULL) {
 800f136:	e011      	b.n	800f15c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	429a      	cmp	r2, r3
 800f142:	d108      	bne.n	800f156 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f7fe ffc6 	bl	800e0dc <tcp_abort>
      pcb = next;
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	60fb      	str	r3, [r7, #12]
 800f154:	e002      	b.n	800f15c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1ea      	bne.n	800f138 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f162:	bf00      	nop
 800f164:	bf00      	nop
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	0801a694 	.word	0x0801a694
 800f170:	0801adc8 	.word	0x0801adc8
 800f174:	0801a6d8 	.word	0x0801a6d8

0800f178 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d02a      	beq.n	800f1de <tcp_netif_ip_addr_changed+0x66>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d026      	beq.n	800f1de <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f190:	4b15      	ldr	r3, [pc, #84]	; (800f1e8 <tcp_netif_ip_addr_changed+0x70>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4619      	mov	r1, r3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7ff ffbc 	bl	800f114 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f19c:	4b13      	ldr	r3, [pc, #76]	; (800f1ec <tcp_netif_ip_addr_changed+0x74>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7ff ffb6 	bl	800f114 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d017      	beq.n	800f1de <tcp_netif_ip_addr_changed+0x66>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d013      	beq.n	800f1de <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1b6:	4b0e      	ldr	r3, [pc, #56]	; (800f1f0 <tcp_netif_ip_addr_changed+0x78>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	60fb      	str	r3, [r7, #12]
 800f1bc:	e00c      	b.n	800f1d8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d103      	bne.n	800f1d2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	60fb      	str	r3, [r7, #12]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1ef      	bne.n	800f1be <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f1de:	bf00      	nop
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	2000c958 	.word	0x2000c958
 800f1ec:	2000c950 	.word	0x2000c950
 800f1f0:	2000c954 	.word	0x2000c954

0800f1f4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f200:	2b00      	cmp	r3, #0
 800f202:	d007      	beq.n	800f214 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff fc3d 	bl	800ea88 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2200      	movs	r2, #0
 800f212:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f214:	bf00      	nop
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f21c:	b590      	push	{r4, r7, lr}
 800f21e:	b08d      	sub	sp, #52	; 0x34
 800f220:	af04      	add	r7, sp, #16
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d105      	bne.n	800f238 <tcp_input+0x1c>
 800f22c:	4b9b      	ldr	r3, [pc, #620]	; (800f49c <tcp_input+0x280>)
 800f22e:	2283      	movs	r2, #131	; 0x83
 800f230:	499b      	ldr	r1, [pc, #620]	; (800f4a0 <tcp_input+0x284>)
 800f232:	489c      	ldr	r0, [pc, #624]	; (800f4a4 <tcp_input+0x288>)
 800f234:	f009 fe74 	bl	8018f20 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	4a9a      	ldr	r2, [pc, #616]	; (800f4a8 <tcp_input+0x28c>)
 800f23e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	895b      	ldrh	r3, [r3, #10]
 800f244:	2b13      	cmp	r3, #19
 800f246:	f240 83d1 	bls.w	800f9ec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f24a:	4b98      	ldr	r3, [pc, #608]	; (800f4ac <tcp_input+0x290>)
 800f24c:	695b      	ldr	r3, [r3, #20]
 800f24e:	4a97      	ldr	r2, [pc, #604]	; (800f4ac <tcp_input+0x290>)
 800f250:	6812      	ldr	r2, [r2, #0]
 800f252:	4611      	mov	r1, r2
 800f254:	4618      	mov	r0, r3
 800f256:	f007 fde3 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f040 83c7 	bne.w	800f9f0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f262:	4b92      	ldr	r3, [pc, #584]	; (800f4ac <tcp_input+0x290>)
 800f264:	695b      	ldr	r3, [r3, #20]
 800f266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f26a:	2be0      	cmp	r3, #224	; 0xe0
 800f26c:	f000 83c0 	beq.w	800f9f0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f270:	4b8d      	ldr	r3, [pc, #564]	; (800f4a8 <tcp_input+0x28c>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	899b      	ldrh	r3, [r3, #12]
 800f276:	b29b      	uxth	r3, r3
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fc fd51 	bl	800bd20 <lwip_htons>
 800f27e:	4603      	mov	r3, r0
 800f280:	0b1b      	lsrs	r3, r3, #12
 800f282:	b29b      	uxth	r3, r3
 800f284:	b2db      	uxtb	r3, r3
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f28a:	7cbb      	ldrb	r3, [r7, #18]
 800f28c:	2b13      	cmp	r3, #19
 800f28e:	f240 83b1 	bls.w	800f9f4 <tcp_input+0x7d8>
 800f292:	7cbb      	ldrb	r3, [r7, #18]
 800f294:	b29a      	uxth	r2, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	891b      	ldrh	r3, [r3, #8]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	f200 83aa 	bhi.w	800f9f4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f2a0:	7cbb      	ldrb	r3, [r7, #18]
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	3b14      	subs	r3, #20
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	4b81      	ldr	r3, [pc, #516]	; (800f4b0 <tcp_input+0x294>)
 800f2aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f2ac:	4b81      	ldr	r3, [pc, #516]	; (800f4b4 <tcp_input+0x298>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	895a      	ldrh	r2, [r3, #10]
 800f2b6:	7cbb      	ldrb	r3, [r7, #18]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d309      	bcc.n	800f2d2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f2be:	4b7c      	ldr	r3, [pc, #496]	; (800f4b0 <tcp_input+0x294>)
 800f2c0:	881a      	ldrh	r2, [r3, #0]
 800f2c2:	4b7d      	ldr	r3, [pc, #500]	; (800f4b8 <tcp_input+0x29c>)
 800f2c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f2c6:	7cbb      	ldrb	r3, [r7, #18]
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7fe f8de 	bl	800d48c <pbuf_remove_header>
 800f2d0:	e04e      	b.n	800f370 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d105      	bne.n	800f2e6 <tcp_input+0xca>
 800f2da:	4b70      	ldr	r3, [pc, #448]	; (800f49c <tcp_input+0x280>)
 800f2dc:	22c2      	movs	r2, #194	; 0xc2
 800f2de:	4977      	ldr	r1, [pc, #476]	; (800f4bc <tcp_input+0x2a0>)
 800f2e0:	4870      	ldr	r0, [pc, #448]	; (800f4a4 <tcp_input+0x288>)
 800f2e2:	f009 fe1d 	bl	8018f20 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f2e6:	2114      	movs	r1, #20
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f7fe f8cf 	bl	800d48c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	895a      	ldrh	r2, [r3, #10]
 800f2f2:	4b71      	ldr	r3, [pc, #452]	; (800f4b8 <tcp_input+0x29c>)
 800f2f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f2f6:	4b6e      	ldr	r3, [pc, #440]	; (800f4b0 <tcp_input+0x294>)
 800f2f8:	881a      	ldrh	r2, [r3, #0]
 800f2fa:	4b6f      	ldr	r3, [pc, #444]	; (800f4b8 <tcp_input+0x29c>)
 800f2fc:	881b      	ldrh	r3, [r3, #0]
 800f2fe:	1ad3      	subs	r3, r2, r3
 800f300:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f302:	4b6d      	ldr	r3, [pc, #436]	; (800f4b8 <tcp_input+0x29c>)
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	4619      	mov	r1, r3
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f7fe f8bf 	bl	800d48c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	895b      	ldrh	r3, [r3, #10]
 800f314:	8a3a      	ldrh	r2, [r7, #16]
 800f316:	429a      	cmp	r2, r3
 800f318:	f200 836e 	bhi.w	800f9f8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	4a64      	ldr	r2, [pc, #400]	; (800f4b4 <tcp_input+0x298>)
 800f324:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	8a3a      	ldrh	r2, [r7, #16]
 800f32c:	4611      	mov	r1, r2
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe f8ac 	bl	800d48c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	891a      	ldrh	r2, [r3, #8]
 800f338:	8a3b      	ldrh	r3, [r7, #16]
 800f33a:	1ad3      	subs	r3, r2, r3
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	895b      	ldrh	r3, [r3, #10]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d005      	beq.n	800f356 <tcp_input+0x13a>
 800f34a:	4b54      	ldr	r3, [pc, #336]	; (800f49c <tcp_input+0x280>)
 800f34c:	22df      	movs	r2, #223	; 0xdf
 800f34e:	495c      	ldr	r1, [pc, #368]	; (800f4c0 <tcp_input+0x2a4>)
 800f350:	4854      	ldr	r0, [pc, #336]	; (800f4a4 <tcp_input+0x288>)
 800f352:	f009 fde5 	bl	8018f20 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	891a      	ldrh	r2, [r3, #8]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	891b      	ldrh	r3, [r3, #8]
 800f360:	429a      	cmp	r2, r3
 800f362:	d005      	beq.n	800f370 <tcp_input+0x154>
 800f364:	4b4d      	ldr	r3, [pc, #308]	; (800f49c <tcp_input+0x280>)
 800f366:	22e0      	movs	r2, #224	; 0xe0
 800f368:	4956      	ldr	r1, [pc, #344]	; (800f4c4 <tcp_input+0x2a8>)
 800f36a:	484e      	ldr	r0, [pc, #312]	; (800f4a4 <tcp_input+0x288>)
 800f36c:	f009 fdd8 	bl	8018f20 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f370:	4b4d      	ldr	r3, [pc, #308]	; (800f4a8 <tcp_input+0x28c>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	b29b      	uxth	r3, r3
 800f378:	4a4b      	ldr	r2, [pc, #300]	; (800f4a8 <tcp_input+0x28c>)
 800f37a:	6814      	ldr	r4, [r2, #0]
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fc fccf 	bl	800bd20 <lwip_htons>
 800f382:	4603      	mov	r3, r0
 800f384:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f386:	4b48      	ldr	r3, [pc, #288]	; (800f4a8 <tcp_input+0x28c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	885b      	ldrh	r3, [r3, #2]
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	4a46      	ldr	r2, [pc, #280]	; (800f4a8 <tcp_input+0x28c>)
 800f390:	6814      	ldr	r4, [r2, #0]
 800f392:	4618      	mov	r0, r3
 800f394:	f7fc fcc4 	bl	800bd20 <lwip_htons>
 800f398:	4603      	mov	r3, r0
 800f39a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f39c:	4b42      	ldr	r3, [pc, #264]	; (800f4a8 <tcp_input+0x28c>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	4a41      	ldr	r2, [pc, #260]	; (800f4a8 <tcp_input+0x28c>)
 800f3a4:	6814      	ldr	r4, [r2, #0]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fc fcce 	bl	800bd48 <lwip_htonl>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	6063      	str	r3, [r4, #4]
 800f3b0:	6863      	ldr	r3, [r4, #4]
 800f3b2:	4a45      	ldr	r2, [pc, #276]	; (800f4c8 <tcp_input+0x2ac>)
 800f3b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f3b6:	4b3c      	ldr	r3, [pc, #240]	; (800f4a8 <tcp_input+0x28c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	4a3a      	ldr	r2, [pc, #232]	; (800f4a8 <tcp_input+0x28c>)
 800f3be:	6814      	ldr	r4, [r2, #0]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fc fcc1 	bl	800bd48 <lwip_htonl>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	60a3      	str	r3, [r4, #8]
 800f3ca:	68a3      	ldr	r3, [r4, #8]
 800f3cc:	4a3f      	ldr	r2, [pc, #252]	; (800f4cc <tcp_input+0x2b0>)
 800f3ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f3d0:	4b35      	ldr	r3, [pc, #212]	; (800f4a8 <tcp_input+0x28c>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	89db      	ldrh	r3, [r3, #14]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	4a33      	ldr	r2, [pc, #204]	; (800f4a8 <tcp_input+0x28c>)
 800f3da:	6814      	ldr	r4, [r2, #0]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fc fc9f 	bl	800bd20 <lwip_htons>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f3e6:	4b30      	ldr	r3, [pc, #192]	; (800f4a8 <tcp_input+0x28c>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	899b      	ldrh	r3, [r3, #12]
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fc fc96 	bl	800bd20 <lwip_htons>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3fc:	b2da      	uxtb	r2, r3
 800f3fe:	4b34      	ldr	r3, [pc, #208]	; (800f4d0 <tcp_input+0x2b4>)
 800f400:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	891a      	ldrh	r2, [r3, #8]
 800f406:	4b33      	ldr	r3, [pc, #204]	; (800f4d4 <tcp_input+0x2b8>)
 800f408:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f40a:	4b31      	ldr	r3, [pc, #196]	; (800f4d0 <tcp_input+0x2b4>)
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	f003 0303 	and.w	r3, r3, #3
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00c      	beq.n	800f430 <tcp_input+0x214>
    tcplen++;
 800f416:	4b2f      	ldr	r3, [pc, #188]	; (800f4d4 <tcp_input+0x2b8>)
 800f418:	881b      	ldrh	r3, [r3, #0]
 800f41a:	3301      	adds	r3, #1
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	4b2d      	ldr	r3, [pc, #180]	; (800f4d4 <tcp_input+0x2b8>)
 800f420:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	891a      	ldrh	r2, [r3, #8]
 800f426:	4b2b      	ldr	r3, [pc, #172]	; (800f4d4 <tcp_input+0x2b8>)
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	f200 82e6 	bhi.w	800f9fc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f430:	2300      	movs	r3, #0
 800f432:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f434:	4b28      	ldr	r3, [pc, #160]	; (800f4d8 <tcp_input+0x2bc>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	61fb      	str	r3, [r7, #28]
 800f43a:	e09d      	b.n	800f578 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	7d1b      	ldrb	r3, [r3, #20]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d105      	bne.n	800f450 <tcp_input+0x234>
 800f444:	4b15      	ldr	r3, [pc, #84]	; (800f49c <tcp_input+0x280>)
 800f446:	22fb      	movs	r2, #251	; 0xfb
 800f448:	4924      	ldr	r1, [pc, #144]	; (800f4dc <tcp_input+0x2c0>)
 800f44a:	4816      	ldr	r0, [pc, #88]	; (800f4a4 <tcp_input+0x288>)
 800f44c:	f009 fd68 	bl	8018f20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	7d1b      	ldrb	r3, [r3, #20]
 800f454:	2b0a      	cmp	r3, #10
 800f456:	d105      	bne.n	800f464 <tcp_input+0x248>
 800f458:	4b10      	ldr	r3, [pc, #64]	; (800f49c <tcp_input+0x280>)
 800f45a:	22fc      	movs	r2, #252	; 0xfc
 800f45c:	4920      	ldr	r1, [pc, #128]	; (800f4e0 <tcp_input+0x2c4>)
 800f45e:	4811      	ldr	r0, [pc, #68]	; (800f4a4 <tcp_input+0x288>)
 800f460:	f009 fd5e 	bl	8018f20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	7d1b      	ldrb	r3, [r3, #20]
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d105      	bne.n	800f478 <tcp_input+0x25c>
 800f46c:	4b0b      	ldr	r3, [pc, #44]	; (800f49c <tcp_input+0x280>)
 800f46e:	22fd      	movs	r2, #253	; 0xfd
 800f470:	491c      	ldr	r1, [pc, #112]	; (800f4e4 <tcp_input+0x2c8>)
 800f472:	480c      	ldr	r0, [pc, #48]	; (800f4a4 <tcp_input+0x288>)
 800f474:	f009 fd54 	bl	8018f20 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	7a1b      	ldrb	r3, [r3, #8]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d033      	beq.n	800f4e8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	7a1a      	ldrb	r2, [r3, #8]
 800f484:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <tcp_input+0x290>)
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f48c:	3301      	adds	r3, #1
 800f48e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f490:	429a      	cmp	r2, r3
 800f492:	d029      	beq.n	800f4e8 <tcp_input+0x2cc>
      prev = pcb;
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	61bb      	str	r3, [r7, #24]
      continue;
 800f498:	e06b      	b.n	800f572 <tcp_input+0x356>
 800f49a:	bf00      	nop
 800f49c:	0801adfc 	.word	0x0801adfc
 800f4a0:	0801ae30 	.word	0x0801ae30
 800f4a4:	0801ae48 	.word	0x0801ae48
 800f4a8:	2000c974 	.word	0x2000c974
 800f4ac:	2000982c 	.word	0x2000982c
 800f4b0:	2000c978 	.word	0x2000c978
 800f4b4:	2000c97c 	.word	0x2000c97c
 800f4b8:	2000c97a 	.word	0x2000c97a
 800f4bc:	0801ae70 	.word	0x0801ae70
 800f4c0:	0801ae80 	.word	0x0801ae80
 800f4c4:	0801ae8c 	.word	0x0801ae8c
 800f4c8:	2000c984 	.word	0x2000c984
 800f4cc:	2000c988 	.word	0x2000c988
 800f4d0:	2000c990 	.word	0x2000c990
 800f4d4:	2000c98e 	.word	0x2000c98e
 800f4d8:	2000c958 	.word	0x2000c958
 800f4dc:	0801aeac 	.word	0x0801aeac
 800f4e0:	0801aed4 	.word	0x0801aed4
 800f4e4:	0801af00 	.word	0x0801af00
    }

    if (pcb->remote_port == tcphdr->src &&
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	8b1a      	ldrh	r2, [r3, #24]
 800f4ec:	4b72      	ldr	r3, [pc, #456]	; (800f6b8 <tcp_input+0x49c>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d13a      	bne.n	800f56e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	8ada      	ldrh	r2, [r3, #22]
 800f4fc:	4b6e      	ldr	r3, [pc, #440]	; (800f6b8 <tcp_input+0x49c>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	885b      	ldrh	r3, [r3, #2]
 800f502:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f504:	429a      	cmp	r2, r3
 800f506:	d132      	bne.n	800f56e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	685a      	ldr	r2, [r3, #4]
 800f50c:	4b6b      	ldr	r3, [pc, #428]	; (800f6bc <tcp_input+0x4a0>)
 800f50e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f510:	429a      	cmp	r2, r3
 800f512:	d12c      	bne.n	800f56e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	4b68      	ldr	r3, [pc, #416]	; (800f6bc <tcp_input+0x4a0>)
 800f51a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d126      	bne.n	800f56e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	69fa      	ldr	r2, [r7, #28]
 800f526:	429a      	cmp	r2, r3
 800f528:	d106      	bne.n	800f538 <tcp_input+0x31c>
 800f52a:	4b65      	ldr	r3, [pc, #404]	; (800f6c0 <tcp_input+0x4a4>)
 800f52c:	f240 120d 	movw	r2, #269	; 0x10d
 800f530:	4964      	ldr	r1, [pc, #400]	; (800f6c4 <tcp_input+0x4a8>)
 800f532:	4865      	ldr	r0, [pc, #404]	; (800f6c8 <tcp_input+0x4ac>)
 800f534:	f009 fcf4 	bl	8018f20 <iprintf>
      if (prev != NULL) {
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00a      	beq.n	800f554 <tcp_input+0x338>
        prev->next = pcb->next;
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	68da      	ldr	r2, [r3, #12]
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f546:	4b61      	ldr	r3, [pc, #388]	; (800f6cc <tcp_input+0x4b0>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f54e:	4a5f      	ldr	r2, [pc, #380]	; (800f6cc <tcp_input+0x4b0>)
 800f550:	69fb      	ldr	r3, [r7, #28]
 800f552:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	69fa      	ldr	r2, [r7, #28]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d111      	bne.n	800f582 <tcp_input+0x366>
 800f55e:	4b58      	ldr	r3, [pc, #352]	; (800f6c0 <tcp_input+0x4a4>)
 800f560:	f240 1215 	movw	r2, #277	; 0x115
 800f564:	495a      	ldr	r1, [pc, #360]	; (800f6d0 <tcp_input+0x4b4>)
 800f566:	4858      	ldr	r0, [pc, #352]	; (800f6c8 <tcp_input+0x4ac>)
 800f568:	f009 fcda 	bl	8018f20 <iprintf>
      break;
 800f56c:	e009      	b.n	800f582 <tcp_input+0x366>
    }
    prev = pcb;
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	61fb      	str	r3, [r7, #28]
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f47f af5e 	bne.w	800f43c <tcp_input+0x220>
 800f580:	e000      	b.n	800f584 <tcp_input+0x368>
      break;
 800f582:	bf00      	nop
  }

  if (pcb == NULL) {
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f040 80aa 	bne.w	800f6e0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f58c:	4b51      	ldr	r3, [pc, #324]	; (800f6d4 <tcp_input+0x4b8>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	61fb      	str	r3, [r7, #28]
 800f592:	e03f      	b.n	800f614 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	7d1b      	ldrb	r3, [r3, #20]
 800f598:	2b0a      	cmp	r3, #10
 800f59a:	d006      	beq.n	800f5aa <tcp_input+0x38e>
 800f59c:	4b48      	ldr	r3, [pc, #288]	; (800f6c0 <tcp_input+0x4a4>)
 800f59e:	f240 121f 	movw	r2, #287	; 0x11f
 800f5a2:	494d      	ldr	r1, [pc, #308]	; (800f6d8 <tcp_input+0x4bc>)
 800f5a4:	4848      	ldr	r0, [pc, #288]	; (800f6c8 <tcp_input+0x4ac>)
 800f5a6:	f009 fcbb 	bl	8018f20 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	7a1b      	ldrb	r3, [r3, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d009      	beq.n	800f5c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	7a1a      	ldrb	r2, [r3, #8]
 800f5b6:	4b41      	ldr	r3, [pc, #260]	; (800f6bc <tcp_input+0x4a0>)
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f5be:	3301      	adds	r3, #1
 800f5c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d122      	bne.n	800f60c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	8b1a      	ldrh	r2, [r3, #24]
 800f5ca:	4b3b      	ldr	r3, [pc, #236]	; (800f6b8 <tcp_input+0x49c>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d11b      	bne.n	800f60e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	8ada      	ldrh	r2, [r3, #22]
 800f5da:	4b37      	ldr	r3, [pc, #220]	; (800f6b8 <tcp_input+0x49c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	885b      	ldrh	r3, [r3, #2]
 800f5e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d113      	bne.n	800f60e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	685a      	ldr	r2, [r3, #4]
 800f5ea:	4b34      	ldr	r3, [pc, #208]	; (800f6bc <tcp_input+0x4a0>)
 800f5ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d10d      	bne.n	800f60e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	4b31      	ldr	r3, [pc, #196]	; (800f6bc <tcp_input+0x4a0>)
 800f5f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d107      	bne.n	800f60e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f5fe:	69f8      	ldr	r0, [r7, #28]
 800f600:	f000 fb56 	bl	800fcb0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7fd ffc7 	bl	800d598 <pbuf_free>
        return;
 800f60a:	e1fd      	b.n	800fa08 <tcp_input+0x7ec>
        continue;
 800f60c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	61fb      	str	r3, [r7, #28]
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d1bc      	bne.n	800f594 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f61a:	2300      	movs	r3, #0
 800f61c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f61e:	4b2f      	ldr	r3, [pc, #188]	; (800f6dc <tcp_input+0x4c0>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	617b      	str	r3, [r7, #20]
 800f624:	e02a      	b.n	800f67c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	7a1b      	ldrb	r3, [r3, #8]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00c      	beq.n	800f648 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	7a1a      	ldrb	r2, [r3, #8]
 800f632:	4b22      	ldr	r3, [pc, #136]	; (800f6bc <tcp_input+0x4a0>)
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f63a:	3301      	adds	r3, #1
 800f63c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f63e:	429a      	cmp	r2, r3
 800f640:	d002      	beq.n	800f648 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	61bb      	str	r3, [r7, #24]
        continue;
 800f646:	e016      	b.n	800f676 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	8ada      	ldrh	r2, [r3, #22]
 800f64c:	4b1a      	ldr	r3, [pc, #104]	; (800f6b8 <tcp_input+0x49c>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	885b      	ldrh	r3, [r3, #2]
 800f652:	b29b      	uxth	r3, r3
 800f654:	429a      	cmp	r2, r3
 800f656:	d10c      	bne.n	800f672 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	4b17      	ldr	r3, [pc, #92]	; (800f6bc <tcp_input+0x4a0>)
 800f65e:	695b      	ldr	r3, [r3, #20]
 800f660:	429a      	cmp	r2, r3
 800f662:	d00f      	beq.n	800f684 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00d      	beq.n	800f686 <tcp_input+0x46a>
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d009      	beq.n	800f686 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	617b      	str	r3, [r7, #20]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1d1      	bne.n	800f626 <tcp_input+0x40a>
 800f682:	e000      	b.n	800f686 <tcp_input+0x46a>
            break;
 800f684:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d029      	beq.n	800f6e0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00a      	beq.n	800f6a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	68da      	ldr	r2, [r3, #12]
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f69a:	4b10      	ldr	r3, [pc, #64]	; (800f6dc <tcp_input+0x4c0>)
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f6a2:	4a0e      	ldr	r2, [pc, #56]	; (800f6dc <tcp_input+0x4c0>)
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f6a8:	6978      	ldr	r0, [r7, #20]
 800f6aa:	f000 fa03 	bl	800fab4 <tcp_listen_input>
      }
      pbuf_free(p);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f7fd ff72 	bl	800d598 <pbuf_free>
      return;
 800f6b4:	e1a8      	b.n	800fa08 <tcp_input+0x7ec>
 800f6b6:	bf00      	nop
 800f6b8:	2000c974 	.word	0x2000c974
 800f6bc:	2000982c 	.word	0x2000982c
 800f6c0:	0801adfc 	.word	0x0801adfc
 800f6c4:	0801af28 	.word	0x0801af28
 800f6c8:	0801ae48 	.word	0x0801ae48
 800f6cc:	2000c958 	.word	0x2000c958
 800f6d0:	0801af54 	.word	0x0801af54
 800f6d4:	2000c95c 	.word	0x2000c95c
 800f6d8:	0801af80 	.word	0x0801af80
 800f6dc:	2000c954 	.word	0x2000c954
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f000 8158 	beq.w	800f998 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f6e8:	4b95      	ldr	r3, [pc, #596]	; (800f940 <tcp_input+0x724>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	891a      	ldrh	r2, [r3, #8]
 800f6f2:	4b93      	ldr	r3, [pc, #588]	; (800f940 <tcp_input+0x724>)
 800f6f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f6f6:	4a92      	ldr	r2, [pc, #584]	; (800f940 <tcp_input+0x724>)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f6fc:	4b91      	ldr	r3, [pc, #580]	; (800f944 <tcp_input+0x728>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4a8f      	ldr	r2, [pc, #572]	; (800f940 <tcp_input+0x724>)
 800f702:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f704:	4b90      	ldr	r3, [pc, #576]	; (800f948 <tcp_input+0x72c>)
 800f706:	2200      	movs	r2, #0
 800f708:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f70a:	4b90      	ldr	r3, [pc, #576]	; (800f94c <tcp_input+0x730>)
 800f70c:	2200      	movs	r2, #0
 800f70e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f710:	4b8f      	ldr	r3, [pc, #572]	; (800f950 <tcp_input+0x734>)
 800f712:	2200      	movs	r2, #0
 800f714:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f716:	4b8f      	ldr	r3, [pc, #572]	; (800f954 <tcp_input+0x738>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	f003 0308 	and.w	r3, r3, #8
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d006      	beq.n	800f730 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	7b5b      	ldrb	r3, [r3, #13]
 800f726:	f043 0301 	orr.w	r3, r3, #1
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f734:	2b00      	cmp	r3, #0
 800f736:	d017      	beq.n	800f768 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f738:	69f8      	ldr	r0, [r7, #28]
 800f73a:	f7ff f929 	bl	800e990 <tcp_process_refused_data>
 800f73e:	4603      	mov	r3, r0
 800f740:	f113 0f0d 	cmn.w	r3, #13
 800f744:	d007      	beq.n	800f756 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00c      	beq.n	800f768 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f74e:	4b82      	ldr	r3, [pc, #520]	; (800f958 <tcp_input+0x73c>)
 800f750:	881b      	ldrh	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d008      	beq.n	800f768 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f040 80e3 	bne.w	800f926 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f760:	69f8      	ldr	r0, [r7, #28]
 800f762:	f003 f9ad 	bl	8012ac0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f766:	e0de      	b.n	800f926 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f768:	4a7c      	ldr	r2, [pc, #496]	; (800f95c <tcp_input+0x740>)
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f76e:	69f8      	ldr	r0, [r7, #28]
 800f770:	f000 fb18 	bl	800fda4 <tcp_process>
 800f774:	4603      	mov	r3, r0
 800f776:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f778:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f77c:	f113 0f0d 	cmn.w	r3, #13
 800f780:	f000 80d3 	beq.w	800f92a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f784:	4b71      	ldr	r3, [pc, #452]	; (800f94c <tcp_input+0x730>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	f003 0308 	and.w	r3, r3, #8
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d015      	beq.n	800f7bc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f796:	2b00      	cmp	r3, #0
 800f798:	d008      	beq.n	800f7ac <tcp_input+0x590>
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7a0:	69fa      	ldr	r2, [r7, #28]
 800f7a2:	6912      	ldr	r2, [r2, #16]
 800f7a4:	f06f 010d 	mvn.w	r1, #13
 800f7a8:	4610      	mov	r0, r2
 800f7aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f7ac:	69f9      	ldr	r1, [r7, #28]
 800f7ae:	486c      	ldr	r0, [pc, #432]	; (800f960 <tcp_input+0x744>)
 800f7b0:	f7ff fbbc 	bl	800ef2c <tcp_pcb_remove>
        tcp_free(pcb);
 800f7b4:	69f8      	ldr	r0, [r7, #28]
 800f7b6:	f7fe f9a9 	bl	800db0c <tcp_free>
 800f7ba:	e0da      	b.n	800f972 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f7c0:	4b63      	ldr	r3, [pc, #396]	; (800f950 <tcp_input+0x734>)
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d01d      	beq.n	800f804 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f7c8:	4b61      	ldr	r3, [pc, #388]	; (800f950 <tcp_input+0x734>)
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00a      	beq.n	800f7ee <tcp_input+0x5d2>
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7de:	69fa      	ldr	r2, [r7, #28]
 800f7e0:	6910      	ldr	r0, [r2, #16]
 800f7e2:	89fa      	ldrh	r2, [r7, #14]
 800f7e4:	69f9      	ldr	r1, [r7, #28]
 800f7e6:	4798      	blx	r3
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	74fb      	strb	r3, [r7, #19]
 800f7ec:	e001      	b.n	800f7f2 <tcp_input+0x5d6>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f7f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7f6:	f113 0f0d 	cmn.w	r3, #13
 800f7fa:	f000 8098 	beq.w	800f92e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f7fe:	4b54      	ldr	r3, [pc, #336]	; (800f950 <tcp_input+0x734>)
 800f800:	2200      	movs	r2, #0
 800f802:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f804:	69f8      	ldr	r0, [r7, #28]
 800f806:	f000 f915 	bl	800fa34 <tcp_input_delayed_close>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f040 8090 	bne.w	800f932 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f812:	4b4d      	ldr	r3, [pc, #308]	; (800f948 <tcp_input+0x72c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d041      	beq.n	800f89e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d006      	beq.n	800f830 <tcp_input+0x614>
 800f822:	4b50      	ldr	r3, [pc, #320]	; (800f964 <tcp_input+0x748>)
 800f824:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f828:	494f      	ldr	r1, [pc, #316]	; (800f968 <tcp_input+0x74c>)
 800f82a:	4850      	ldr	r0, [pc, #320]	; (800f96c <tcp_input+0x750>)
 800f82c:	f009 fb78 	bl	8018f20 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	8b5b      	ldrh	r3, [r3, #26]
 800f834:	f003 0310 	and.w	r3, r3, #16
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d008      	beq.n	800f84e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f83c:	4b42      	ldr	r3, [pc, #264]	; (800f948 <tcp_input+0x72c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4618      	mov	r0, r3
 800f842:	f7fd fea9 	bl	800d598 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f846:	69f8      	ldr	r0, [r7, #28]
 800f848:	f7fe fc48 	bl	800e0dc <tcp_abort>
            goto aborted;
 800f84c:	e091      	b.n	800f972 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00c      	beq.n	800f872 <tcp_input+0x656>
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	6918      	ldr	r0, [r3, #16]
 800f862:	4b39      	ldr	r3, [pc, #228]	; (800f948 <tcp_input+0x72c>)
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	2300      	movs	r3, #0
 800f868:	69f9      	ldr	r1, [r7, #28]
 800f86a:	47a0      	blx	r4
 800f86c:	4603      	mov	r3, r0
 800f86e:	74fb      	strb	r3, [r7, #19]
 800f870:	e008      	b.n	800f884 <tcp_input+0x668>
 800f872:	4b35      	ldr	r3, [pc, #212]	; (800f948 <tcp_input+0x72c>)
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	2300      	movs	r3, #0
 800f878:	69f9      	ldr	r1, [r7, #28]
 800f87a:	2000      	movs	r0, #0
 800f87c:	f7ff f95e 	bl	800eb3c <tcp_recv_null>
 800f880:	4603      	mov	r3, r0
 800f882:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f884:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f888:	f113 0f0d 	cmn.w	r3, #13
 800f88c:	d053      	beq.n	800f936 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f88e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d003      	beq.n	800f89e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f896:	4b2c      	ldr	r3, [pc, #176]	; (800f948 <tcp_input+0x72c>)
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f89e:	4b2b      	ldr	r3, [pc, #172]	; (800f94c <tcp_input+0x730>)
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	f003 0320 	and.w	r3, r3, #32
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d030      	beq.n	800f90c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d009      	beq.n	800f8c6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8b6:	7b5a      	ldrb	r2, [r3, #13]
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8bc:	f042 0220 	orr.w	r2, r2, #32
 800f8c0:	b2d2      	uxtb	r2, r2
 800f8c2:	735a      	strb	r2, [r3, #13]
 800f8c4:	e022      	b.n	800f90c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f8c6:	69fb      	ldr	r3, [r7, #28]
 800f8c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f8ce:	d005      	beq.n	800f8dc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d00b      	beq.n	800f8fe <tcp_input+0x6e2>
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	6918      	ldr	r0, [r3, #16]
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	69f9      	ldr	r1, [r7, #28]
 800f8f6:	47a0      	blx	r4
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	74fb      	strb	r3, [r7, #19]
 800f8fc:	e001      	b.n	800f902 <tcp_input+0x6e6>
 800f8fe:	2300      	movs	r3, #0
 800f900:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f906:	f113 0f0d 	cmn.w	r3, #13
 800f90a:	d016      	beq.n	800f93a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f90c:	4b13      	ldr	r3, [pc, #76]	; (800f95c <tcp_input+0x740>)
 800f90e:	2200      	movs	r2, #0
 800f910:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f912:	69f8      	ldr	r0, [r7, #28]
 800f914:	f000 f88e 	bl	800fa34 <tcp_input_delayed_close>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d128      	bne.n	800f970 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f91e:	69f8      	ldr	r0, [r7, #28]
 800f920:	f002 fac8 	bl	8011eb4 <tcp_output>
 800f924:	e025      	b.n	800f972 <tcp_input+0x756>
        goto aborted;
 800f926:	bf00      	nop
 800f928:	e023      	b.n	800f972 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f92a:	bf00      	nop
 800f92c:	e021      	b.n	800f972 <tcp_input+0x756>
              goto aborted;
 800f92e:	bf00      	nop
 800f930:	e01f      	b.n	800f972 <tcp_input+0x756>
          goto aborted;
 800f932:	bf00      	nop
 800f934:	e01d      	b.n	800f972 <tcp_input+0x756>
            goto aborted;
 800f936:	bf00      	nop
 800f938:	e01b      	b.n	800f972 <tcp_input+0x756>
              goto aborted;
 800f93a:	bf00      	nop
 800f93c:	e019      	b.n	800f972 <tcp_input+0x756>
 800f93e:	bf00      	nop
 800f940:	2000c964 	.word	0x2000c964
 800f944:	2000c974 	.word	0x2000c974
 800f948:	2000c994 	.word	0x2000c994
 800f94c:	2000c991 	.word	0x2000c991
 800f950:	2000c98c 	.word	0x2000c98c
 800f954:	2000c990 	.word	0x2000c990
 800f958:	2000c98e 	.word	0x2000c98e
 800f95c:	2000c998 	.word	0x2000c998
 800f960:	2000c958 	.word	0x2000c958
 800f964:	0801adfc 	.word	0x0801adfc
 800f968:	0801afb0 	.word	0x0801afb0
 800f96c:	0801ae48 	.word	0x0801ae48
          goto aborted;
 800f970:	bf00      	nop
    tcp_input_pcb = NULL;
 800f972:	4b27      	ldr	r3, [pc, #156]	; (800fa10 <tcp_input+0x7f4>)
 800f974:	2200      	movs	r2, #0
 800f976:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f978:	4b26      	ldr	r3, [pc, #152]	; (800fa14 <tcp_input+0x7f8>)
 800f97a:	2200      	movs	r2, #0
 800f97c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f97e:	4b26      	ldr	r3, [pc, #152]	; (800fa18 <tcp_input+0x7fc>)
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d03f      	beq.n	800fa06 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f986:	4b24      	ldr	r3, [pc, #144]	; (800fa18 <tcp_input+0x7fc>)
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fd fe04 	bl	800d598 <pbuf_free>
      inseg.p = NULL;
 800f990:	4b21      	ldr	r3, [pc, #132]	; (800fa18 <tcp_input+0x7fc>)
 800f992:	2200      	movs	r2, #0
 800f994:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f996:	e036      	b.n	800fa06 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f998:	4b20      	ldr	r3, [pc, #128]	; (800fa1c <tcp_input+0x800>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	899b      	ldrh	r3, [r3, #12]
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fc f9bd 	bl	800bd20 <lwip_htons>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	f003 0304 	and.w	r3, r3, #4
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d118      	bne.n	800f9e4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9b2:	4b1b      	ldr	r3, [pc, #108]	; (800fa20 <tcp_input+0x804>)
 800f9b4:	6819      	ldr	r1, [r3, #0]
 800f9b6:	4b1b      	ldr	r3, [pc, #108]	; (800fa24 <tcp_input+0x808>)
 800f9b8:	881b      	ldrh	r3, [r3, #0]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	4b1a      	ldr	r3, [pc, #104]	; (800fa28 <tcp_input+0x80c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9c2:	4b16      	ldr	r3, [pc, #88]	; (800fa1c <tcp_input+0x800>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c6:	885b      	ldrh	r3, [r3, #2]
 800f9c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9ca:	4a14      	ldr	r2, [pc, #80]	; (800fa1c <tcp_input+0x800>)
 800f9cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9ce:	8812      	ldrh	r2, [r2, #0]
 800f9d0:	b292      	uxth	r2, r2
 800f9d2:	9202      	str	r2, [sp, #8]
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	4b15      	ldr	r3, [pc, #84]	; (800fa2c <tcp_input+0x810>)
 800f9d8:	9300      	str	r3, [sp, #0]
 800f9da:	4b15      	ldr	r3, [pc, #84]	; (800fa30 <tcp_input+0x814>)
 800f9dc:	4602      	mov	r2, r0
 800f9de:	2000      	movs	r0, #0
 800f9e0:	f003 f81c 	bl	8012a1c <tcp_rst>
    pbuf_free(p);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fd fdd7 	bl	800d598 <pbuf_free>
  return;
 800f9ea:	e00c      	b.n	800fa06 <tcp_input+0x7ea>
    goto dropped;
 800f9ec:	bf00      	nop
 800f9ee:	e006      	b.n	800f9fe <tcp_input+0x7e2>
    goto dropped;
 800f9f0:	bf00      	nop
 800f9f2:	e004      	b.n	800f9fe <tcp_input+0x7e2>
    goto dropped;
 800f9f4:	bf00      	nop
 800f9f6:	e002      	b.n	800f9fe <tcp_input+0x7e2>
      goto dropped;
 800f9f8:	bf00      	nop
 800f9fa:	e000      	b.n	800f9fe <tcp_input+0x7e2>
      goto dropped;
 800f9fc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7fd fdca 	bl	800d598 <pbuf_free>
 800fa04:	e000      	b.n	800fa08 <tcp_input+0x7ec>
  return;
 800fa06:	bf00      	nop
}
 800fa08:	3724      	adds	r7, #36	; 0x24
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd90      	pop	{r4, r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	2000c998 	.word	0x2000c998
 800fa14:	2000c994 	.word	0x2000c994
 800fa18:	2000c964 	.word	0x2000c964
 800fa1c:	2000c974 	.word	0x2000c974
 800fa20:	2000c988 	.word	0x2000c988
 800fa24:	2000c98e 	.word	0x2000c98e
 800fa28:	2000c984 	.word	0x2000c984
 800fa2c:	2000983c 	.word	0x2000983c
 800fa30:	20009840 	.word	0x20009840

0800fa34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d106      	bne.n	800fa50 <tcp_input_delayed_close+0x1c>
 800fa42:	4b17      	ldr	r3, [pc, #92]	; (800faa0 <tcp_input_delayed_close+0x6c>)
 800fa44:	f240 225a 	movw	r2, #602	; 0x25a
 800fa48:	4916      	ldr	r1, [pc, #88]	; (800faa4 <tcp_input_delayed_close+0x70>)
 800fa4a:	4817      	ldr	r0, [pc, #92]	; (800faa8 <tcp_input_delayed_close+0x74>)
 800fa4c:	f009 fa68 	bl	8018f20 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fa50:	4b16      	ldr	r3, [pc, #88]	; (800faac <tcp_input_delayed_close+0x78>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	f003 0310 	and.w	r3, r3, #16
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d01c      	beq.n	800fa96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	8b5b      	ldrh	r3, [r3, #26]
 800fa60:	f003 0310 	and.w	r3, r3, #16
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d10d      	bne.n	800fa84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d008      	beq.n	800fa84 <tcp_input_delayed_close+0x50>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	6912      	ldr	r2, [r2, #16]
 800fa7c:	f06f 010e 	mvn.w	r1, #14
 800fa80:	4610      	mov	r0, r2
 800fa82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa84:	6879      	ldr	r1, [r7, #4]
 800fa86:	480a      	ldr	r0, [pc, #40]	; (800fab0 <tcp_input_delayed_close+0x7c>)
 800fa88:	f7ff fa50 	bl	800ef2c <tcp_pcb_remove>
    tcp_free(pcb);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7fe f83d 	bl	800db0c <tcp_free>
    return 1;
 800fa92:	2301      	movs	r3, #1
 800fa94:	e000      	b.n	800fa98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fa96:	2300      	movs	r3, #0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	0801adfc 	.word	0x0801adfc
 800faa4:	0801afcc 	.word	0x0801afcc
 800faa8:	0801ae48 	.word	0x0801ae48
 800faac:	2000c991 	.word	0x2000c991
 800fab0:	2000c958 	.word	0x2000c958

0800fab4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fab4:	b590      	push	{r4, r7, lr}
 800fab6:	b08b      	sub	sp, #44	; 0x2c
 800fab8:	af04      	add	r7, sp, #16
 800faba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fabc:	4b6f      	ldr	r3, [pc, #444]	; (800fc7c <tcp_listen_input+0x1c8>)
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	f003 0304 	and.w	r3, r3, #4
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f040 80d2 	bne.w	800fc6e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2b00      	cmp	r3, #0
 800face:	d106      	bne.n	800fade <tcp_listen_input+0x2a>
 800fad0:	4b6b      	ldr	r3, [pc, #428]	; (800fc80 <tcp_listen_input+0x1cc>)
 800fad2:	f240 2281 	movw	r2, #641	; 0x281
 800fad6:	496b      	ldr	r1, [pc, #428]	; (800fc84 <tcp_listen_input+0x1d0>)
 800fad8:	486b      	ldr	r0, [pc, #428]	; (800fc88 <tcp_listen_input+0x1d4>)
 800fada:	f009 fa21 	bl	8018f20 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fade:	4b67      	ldr	r3, [pc, #412]	; (800fc7c <tcp_listen_input+0x1c8>)
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	f003 0310 	and.w	r3, r3, #16
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d019      	beq.n	800fb1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faea:	4b68      	ldr	r3, [pc, #416]	; (800fc8c <tcp_listen_input+0x1d8>)
 800faec:	6819      	ldr	r1, [r3, #0]
 800faee:	4b68      	ldr	r3, [pc, #416]	; (800fc90 <tcp_listen_input+0x1dc>)
 800faf0:	881b      	ldrh	r3, [r3, #0]
 800faf2:	461a      	mov	r2, r3
 800faf4:	4b67      	ldr	r3, [pc, #412]	; (800fc94 <tcp_listen_input+0x1e0>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fafa:	4b67      	ldr	r3, [pc, #412]	; (800fc98 <tcp_listen_input+0x1e4>)
 800fafc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fafe:	885b      	ldrh	r3, [r3, #2]
 800fb00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb02:	4a65      	ldr	r2, [pc, #404]	; (800fc98 <tcp_listen_input+0x1e4>)
 800fb04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb06:	8812      	ldrh	r2, [r2, #0]
 800fb08:	b292      	uxth	r2, r2
 800fb0a:	9202      	str	r2, [sp, #8]
 800fb0c:	9301      	str	r3, [sp, #4]
 800fb0e:	4b63      	ldr	r3, [pc, #396]	; (800fc9c <tcp_listen_input+0x1e8>)
 800fb10:	9300      	str	r3, [sp, #0]
 800fb12:	4b63      	ldr	r3, [pc, #396]	; (800fca0 <tcp_listen_input+0x1ec>)
 800fb14:	4602      	mov	r2, r0
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f002 ff80 	bl	8012a1c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fb1c:	e0a9      	b.n	800fc72 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fb1e:	4b57      	ldr	r3, [pc, #348]	; (800fc7c <tcp_listen_input+0x1c8>)
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	f003 0302 	and.w	r3, r3, #2
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	f000 80a3 	beq.w	800fc72 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	7d5b      	ldrb	r3, [r3, #21]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff f927 	bl	800ed84 <tcp_alloc>
 800fb36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d111      	bne.n	800fb62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	699b      	ldr	r3, [r3, #24]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00a      	beq.n	800fb5c <tcp_listen_input+0xa8>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	699b      	ldr	r3, [r3, #24]
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	6910      	ldr	r0, [r2, #16]
 800fb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb52:	2100      	movs	r1, #0
 800fb54:	4798      	blx	r3
 800fb56:	4603      	mov	r3, r0
 800fb58:	73bb      	strb	r3, [r7, #14]
      return;
 800fb5a:	e08b      	b.n	800fc74 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb5c:	23f0      	movs	r3, #240	; 0xf0
 800fb5e:	73bb      	strb	r3, [r7, #14]
      return;
 800fb60:	e088      	b.n	800fc74 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fb62:	4b50      	ldr	r3, [pc, #320]	; (800fca4 <tcp_listen_input+0x1f0>)
 800fb64:	695a      	ldr	r2, [r3, #20]
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fb6a:	4b4e      	ldr	r3, [pc, #312]	; (800fca4 <tcp_listen_input+0x1f0>)
 800fb6c:	691a      	ldr	r2, [r3, #16]
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	8ada      	ldrh	r2, [r3, #22]
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fb7a:	4b47      	ldr	r3, [pc, #284]	; (800fc98 <tcp_listen_input+0x1e4>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	2203      	movs	r2, #3
 800fb8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fb8c:	4b41      	ldr	r3, [pc, #260]	; (800fc94 <tcp_listen_input+0x1e0>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	1c5a      	adds	r2, r3, #1
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fb9e:	6978      	ldr	r0, [r7, #20]
 800fba0:	f7ff fa58 	bl	800f054 <tcp_next_iss>
 800fba4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	693a      	ldr	r2, [r7, #16]
 800fbb0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	693a      	ldr	r2, [r7, #16]
 800fbb6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fbbe:	4b35      	ldr	r3, [pc, #212]	; (800fc94 <tcp_listen_input+0x1e0>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	1e5a      	subs	r2, r3, #1
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	691a      	ldr	r2, [r3, #16]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	7a5b      	ldrb	r3, [r3, #9]
 800fbda:	f003 030c 	and.w	r3, r3, #12
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	7a1a      	ldrb	r2, [r3, #8]
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fbec:	4b2e      	ldr	r3, [pc, #184]	; (800fca8 <tcp_listen_input+0x1f4>)
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	60da      	str	r2, [r3, #12]
 800fbf4:	4a2c      	ldr	r2, [pc, #176]	; (800fca8 <tcp_listen_input+0x1f4>)
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	6013      	str	r3, [r2, #0]
 800fbfa:	f003 f8d1 	bl	8012da0 <tcp_timer_needed>
 800fbfe:	4b2b      	ldr	r3, [pc, #172]	; (800fcac <tcp_listen_input+0x1f8>)
 800fc00:	2201      	movs	r2, #1
 800fc02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fc04:	6978      	ldr	r0, [r7, #20]
 800fc06:	f001 fd8f 	bl	8011728 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fc0a:	4b23      	ldr	r3, [pc, #140]	; (800fc98 <tcp_listen_input+0x1e4>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	89db      	ldrh	r3, [r3, #14]
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	3304      	adds	r3, #4
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f006 fe45 	bl	80168bc <ip4_route>
 800fc32:	4601      	mov	r1, r0
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	3304      	adds	r3, #4
 800fc38:	461a      	mov	r2, r3
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f7ff fa30 	bl	800f0a0 <tcp_eff_send_mss_netif>
 800fc40:	4603      	mov	r3, r0
 800fc42:	461a      	mov	r2, r3
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fc48:	2112      	movs	r1, #18
 800fc4a:	6978      	ldr	r0, [r7, #20]
 800fc4c:	f002 f844 	bl	8011cd8 <tcp_enqueue_flags>
 800fc50:	4603      	mov	r3, r0
 800fc52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fc54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d004      	beq.n	800fc66 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	6978      	ldr	r0, [r7, #20]
 800fc60:	f7fe f97e 	bl	800df60 <tcp_abandon>
      return;
 800fc64:	e006      	b.n	800fc74 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fc66:	6978      	ldr	r0, [r7, #20]
 800fc68:	f002 f924 	bl	8011eb4 <tcp_output>
  return;
 800fc6c:	e001      	b.n	800fc72 <tcp_listen_input+0x1be>
    return;
 800fc6e:	bf00      	nop
 800fc70:	e000      	b.n	800fc74 <tcp_listen_input+0x1c0>
  return;
 800fc72:	bf00      	nop
}
 800fc74:	371c      	adds	r7, #28
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd90      	pop	{r4, r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	2000c990 	.word	0x2000c990
 800fc80:	0801adfc 	.word	0x0801adfc
 800fc84:	0801aff4 	.word	0x0801aff4
 800fc88:	0801ae48 	.word	0x0801ae48
 800fc8c:	2000c988 	.word	0x2000c988
 800fc90:	2000c98e 	.word	0x2000c98e
 800fc94:	2000c984 	.word	0x2000c984
 800fc98:	2000c974 	.word	0x2000c974
 800fc9c:	2000983c 	.word	0x2000983c
 800fca0:	20009840 	.word	0x20009840
 800fca4:	2000982c 	.word	0x2000982c
 800fca8:	2000c958 	.word	0x2000c958
 800fcac:	2000c960 	.word	0x2000c960

0800fcb0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af04      	add	r7, sp, #16
 800fcb6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fcb8:	4b2f      	ldr	r3, [pc, #188]	; (800fd78 <tcp_timewait_input+0xc8>)
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	f003 0304 	and.w	r3, r3, #4
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d153      	bne.n	800fd6c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d106      	bne.n	800fcd8 <tcp_timewait_input+0x28>
 800fcca:	4b2c      	ldr	r3, [pc, #176]	; (800fd7c <tcp_timewait_input+0xcc>)
 800fccc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fcd0:	492b      	ldr	r1, [pc, #172]	; (800fd80 <tcp_timewait_input+0xd0>)
 800fcd2:	482c      	ldr	r0, [pc, #176]	; (800fd84 <tcp_timewait_input+0xd4>)
 800fcd4:	f009 f924 	bl	8018f20 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fcd8:	4b27      	ldr	r3, [pc, #156]	; (800fd78 <tcp_timewait_input+0xc8>)
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	f003 0302 	and.w	r3, r3, #2
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d02a      	beq.n	800fd3a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fce4:	4b28      	ldr	r3, [pc, #160]	; (800fd88 <tcp_timewait_input+0xd8>)
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	db2d      	blt.n	800fd4e <tcp_timewait_input+0x9e>
 800fcf2:	4b25      	ldr	r3, [pc, #148]	; (800fd88 <tcp_timewait_input+0xd8>)
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcfa:	6879      	ldr	r1, [r7, #4]
 800fcfc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcfe:	440b      	add	r3, r1
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	dc23      	bgt.n	800fd4e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd06:	4b21      	ldr	r3, [pc, #132]	; (800fd8c <tcp_timewait_input+0xdc>)
 800fd08:	6819      	ldr	r1, [r3, #0]
 800fd0a:	4b21      	ldr	r3, [pc, #132]	; (800fd90 <tcp_timewait_input+0xe0>)
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	4b1d      	ldr	r3, [pc, #116]	; (800fd88 <tcp_timewait_input+0xd8>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd16:	4b1f      	ldr	r3, [pc, #124]	; (800fd94 <tcp_timewait_input+0xe4>)
 800fd18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd1a:	885b      	ldrh	r3, [r3, #2]
 800fd1c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd1e:	4a1d      	ldr	r2, [pc, #116]	; (800fd94 <tcp_timewait_input+0xe4>)
 800fd20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd22:	8812      	ldrh	r2, [r2, #0]
 800fd24:	b292      	uxth	r2, r2
 800fd26:	9202      	str	r2, [sp, #8]
 800fd28:	9301      	str	r3, [sp, #4]
 800fd2a:	4b1b      	ldr	r3, [pc, #108]	; (800fd98 <tcp_timewait_input+0xe8>)
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	4b1b      	ldr	r3, [pc, #108]	; (800fd9c <tcp_timewait_input+0xec>)
 800fd30:	4602      	mov	r2, r0
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f002 fe72 	bl	8012a1c <tcp_rst>
      return;
 800fd38:	e01b      	b.n	800fd72 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fd3a:	4b0f      	ldr	r3, [pc, #60]	; (800fd78 <tcp_timewait_input+0xc8>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 0301 	and.w	r3, r3, #1
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d003      	beq.n	800fd4e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fd46:	4b16      	ldr	r3, [pc, #88]	; (800fda0 <tcp_timewait_input+0xf0>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fd4e:	4b10      	ldr	r3, [pc, #64]	; (800fd90 <tcp_timewait_input+0xe0>)
 800fd50:	881b      	ldrh	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00c      	beq.n	800fd70 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	8b5b      	ldrh	r3, [r3, #26]
 800fd5a:	f043 0302 	orr.w	r3, r3, #2
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f002 f8a5 	bl	8011eb4 <tcp_output>
  }
  return;
 800fd6a:	e001      	b.n	800fd70 <tcp_timewait_input+0xc0>
    return;
 800fd6c:	bf00      	nop
 800fd6e:	e000      	b.n	800fd72 <tcp_timewait_input+0xc2>
  return;
 800fd70:	bf00      	nop
}
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	2000c990 	.word	0x2000c990
 800fd7c:	0801adfc 	.word	0x0801adfc
 800fd80:	0801b014 	.word	0x0801b014
 800fd84:	0801ae48 	.word	0x0801ae48
 800fd88:	2000c984 	.word	0x2000c984
 800fd8c:	2000c988 	.word	0x2000c988
 800fd90:	2000c98e 	.word	0x2000c98e
 800fd94:	2000c974 	.word	0x2000c974
 800fd98:	2000983c 	.word	0x2000983c
 800fd9c:	20009840 	.word	0x20009840
 800fda0:	2000c94c 	.word	0x2000c94c

0800fda4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fda4:	b590      	push	{r4, r7, lr}
 800fda6:	b08d      	sub	sp, #52	; 0x34
 800fda8:	af04      	add	r7, sp, #16
 800fdaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fdac:	2300      	movs	r3, #0
 800fdae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d106      	bne.n	800fdc8 <tcp_process+0x24>
 800fdba:	4b9d      	ldr	r3, [pc, #628]	; (8010030 <tcp_process+0x28c>)
 800fdbc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fdc0:	499c      	ldr	r1, [pc, #624]	; (8010034 <tcp_process+0x290>)
 800fdc2:	489d      	ldr	r0, [pc, #628]	; (8010038 <tcp_process+0x294>)
 800fdc4:	f009 f8ac 	bl	8018f20 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fdc8:	4b9c      	ldr	r3, [pc, #624]	; (801003c <tcp_process+0x298>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	f003 0304 	and.w	r3, r3, #4
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d04e      	beq.n	800fe72 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	7d1b      	ldrb	r3, [r3, #20]
 800fdd8:	2b02      	cmp	r3, #2
 800fdda:	d108      	bne.n	800fdee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fde0:	4b97      	ldr	r3, [pc, #604]	; (8010040 <tcp_process+0x29c>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d123      	bne.n	800fe30 <tcp_process+0x8c>
        acceptable = 1;
 800fde8:	2301      	movs	r3, #1
 800fdea:	76fb      	strb	r3, [r7, #27]
 800fdec:	e020      	b.n	800fe30 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdf2:	4b94      	ldr	r3, [pc, #592]	; (8010044 <tcp_process+0x2a0>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d102      	bne.n	800fe00 <tcp_process+0x5c>
        acceptable = 1;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	76fb      	strb	r3, [r7, #27]
 800fdfe:	e017      	b.n	800fe30 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe00:	4b90      	ldr	r3, [pc, #576]	; (8010044 <tcp_process+0x2a0>)
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	db10      	blt.n	800fe30 <tcp_process+0x8c>
 800fe0e:	4b8d      	ldr	r3, [pc, #564]	; (8010044 <tcp_process+0x2a0>)
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	6879      	ldr	r1, [r7, #4]
 800fe18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe1a:	440b      	add	r3, r1
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	dc06      	bgt.n	800fe30 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	8b5b      	ldrh	r3, [r3, #26]
 800fe26:	f043 0302 	orr.w	r3, r3, #2
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fe30:	7efb      	ldrb	r3, [r7, #27]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d01b      	beq.n	800fe6e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	7d1b      	ldrb	r3, [r3, #20]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d106      	bne.n	800fe4c <tcp_process+0xa8>
 800fe3e:	4b7c      	ldr	r3, [pc, #496]	; (8010030 <tcp_process+0x28c>)
 800fe40:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fe44:	4980      	ldr	r1, [pc, #512]	; (8010048 <tcp_process+0x2a4>)
 800fe46:	487c      	ldr	r0, [pc, #496]	; (8010038 <tcp_process+0x294>)
 800fe48:	f009 f86a 	bl	8018f20 <iprintf>
      recv_flags |= TF_RESET;
 800fe4c:	4b7f      	ldr	r3, [pc, #508]	; (801004c <tcp_process+0x2a8>)
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	f043 0308 	orr.w	r3, r3, #8
 800fe54:	b2da      	uxtb	r2, r3
 800fe56:	4b7d      	ldr	r3, [pc, #500]	; (801004c <tcp_process+0x2a8>)
 800fe58:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8b5b      	ldrh	r3, [r3, #26]
 800fe5e:	f023 0301 	bic.w	r3, r3, #1
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fe68:	f06f 030d 	mvn.w	r3, #13
 800fe6c:	e37a      	b.n	8010564 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	e378      	b.n	8010564 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fe72:	4b72      	ldr	r3, [pc, #456]	; (801003c <tcp_process+0x298>)
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	f003 0302 	and.w	r3, r3, #2
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d010      	beq.n	800fea0 <tcp_process+0xfc>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	7d1b      	ldrb	r3, [r3, #20]
 800fe82:	2b02      	cmp	r3, #2
 800fe84:	d00c      	beq.n	800fea0 <tcp_process+0xfc>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	7d1b      	ldrb	r3, [r3, #20]
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d008      	beq.n	800fea0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	8b5b      	ldrh	r3, [r3, #26]
 800fe92:	f043 0302 	orr.w	r3, r3, #2
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	e361      	b.n	8010564 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	8b5b      	ldrh	r3, [r3, #26]
 800fea4:	f003 0310 	and.w	r3, r3, #16
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d103      	bne.n	800feb4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800feac:	4b68      	ldr	r3, [pc, #416]	; (8010050 <tcp_process+0x2ac>)
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f001 fc2f 	bl	8011728 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	7d1b      	ldrb	r3, [r3, #20]
 800fece:	3b02      	subs	r3, #2
 800fed0:	2b07      	cmp	r3, #7
 800fed2:	f200 8337 	bhi.w	8010544 <tcp_process+0x7a0>
 800fed6:	a201      	add	r2, pc, #4	; (adr r2, 800fedc <tcp_process+0x138>)
 800fed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fedc:	0800fefd 	.word	0x0800fefd
 800fee0:	0801012d 	.word	0x0801012d
 800fee4:	080102a5 	.word	0x080102a5
 800fee8:	080102cf 	.word	0x080102cf
 800feec:	080103f3 	.word	0x080103f3
 800fef0:	080102a5 	.word	0x080102a5
 800fef4:	0801047f 	.word	0x0801047f
 800fef8:	0801050f 	.word	0x0801050f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fefc:	4b4f      	ldr	r3, [pc, #316]	; (801003c <tcp_process+0x298>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	f003 0310 	and.w	r3, r3, #16
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f000 80e4 	beq.w	80100d2 <tcp_process+0x32e>
 800ff0a:	4b4c      	ldr	r3, [pc, #304]	; (801003c <tcp_process+0x298>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	f003 0302 	and.w	r3, r3, #2
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f000 80dd 	beq.w	80100d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff1c:	1c5a      	adds	r2, r3, #1
 800ff1e:	4b48      	ldr	r3, [pc, #288]	; (8010040 <tcp_process+0x29c>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	f040 80d5 	bne.w	80100d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ff28:	4b46      	ldr	r3, [pc, #280]	; (8010044 <tcp_process+0x2a0>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	1c5a      	adds	r2, r3, #1
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ff3a:	4b41      	ldr	r3, [pc, #260]	; (8010040 <tcp_process+0x29c>)
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ff42:	4b44      	ldr	r3, [pc, #272]	; (8010054 <tcp_process+0x2b0>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	89db      	ldrh	r3, [r3, #14]
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff5c:	4b39      	ldr	r3, [pc, #228]	; (8010044 <tcp_process+0x2a0>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	1e5a      	subs	r2, r3, #1
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2204      	movs	r2, #4
 800ff6a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	3304      	adds	r3, #4
 800ff74:	4618      	mov	r0, r3
 800ff76:	f006 fca1 	bl	80168bc <ip4_route>
 800ff7a:	4601      	mov	r1, r0
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	3304      	adds	r3, #4
 800ff80:	461a      	mov	r2, r3
 800ff82:	4620      	mov	r0, r4
 800ff84:	f7ff f88c 	bl	800f0a0 <tcp_eff_send_mss_netif>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff94:	009a      	lsls	r2, r3, #2
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff9a:	005b      	lsls	r3, r3, #1
 800ff9c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ffa0:	428b      	cmp	r3, r1
 800ffa2:	bf38      	it	cc
 800ffa4:	460b      	movcc	r3, r1
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d204      	bcs.n	800ffb4 <tcp_process+0x210>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	e00d      	b.n	800ffd0 <tcp_process+0x22c>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffb8:	005b      	lsls	r3, r3, #1
 800ffba:	f241 121c 	movw	r2, #4380	; 0x111c
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d904      	bls.n	800ffcc <tcp_process+0x228>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffc6:	005b      	lsls	r3, r3, #1
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	e001      	b.n	800ffd0 <tcp_process+0x22c>
 800ffcc:	f241 131c 	movw	r3, #4380	; 0x111c
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <tcp_process+0x24a>
 800ffe0:	4b13      	ldr	r3, [pc, #76]	; (8010030 <tcp_process+0x28c>)
 800ffe2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ffe6:	491c      	ldr	r1, [pc, #112]	; (8010058 <tcp_process+0x2b4>)
 800ffe8:	4813      	ldr	r0, [pc, #76]	; (8010038 <tcp_process+0x294>)
 800ffea:	f008 ff99 	bl	8018f20 <iprintf>
        --pcb->snd_queuelen;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fff4:	3b01      	subs	r3, #1
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010002:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d12a      	bne.n	8010060 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801000e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d106      	bne.n	8010024 <tcp_process+0x280>
 8010016:	4b06      	ldr	r3, [pc, #24]	; (8010030 <tcp_process+0x28c>)
 8010018:	f44f 725d 	mov.w	r2, #884	; 0x374
 801001c:	490f      	ldr	r1, [pc, #60]	; (801005c <tcp_process+0x2b8>)
 801001e:	4806      	ldr	r0, [pc, #24]	; (8010038 <tcp_process+0x294>)
 8010020:	f008 ff7e 	bl	8018f20 <iprintf>
          pcb->unsent = rseg->next;
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	66da      	str	r2, [r3, #108]	; 0x6c
 801002c:	e01c      	b.n	8010068 <tcp_process+0x2c4>
 801002e:	bf00      	nop
 8010030:	0801adfc 	.word	0x0801adfc
 8010034:	0801b034 	.word	0x0801b034
 8010038:	0801ae48 	.word	0x0801ae48
 801003c:	2000c990 	.word	0x2000c990
 8010040:	2000c988 	.word	0x2000c988
 8010044:	2000c984 	.word	0x2000c984
 8010048:	0801b050 	.word	0x0801b050
 801004c:	2000c991 	.word	0x2000c991
 8010050:	2000c94c 	.word	0x2000c94c
 8010054:	2000c974 	.word	0x2000c974
 8010058:	0801b070 	.word	0x0801b070
 801005c:	0801b088 	.word	0x0801b088
        } else {
          pcb->unacked = rseg->next;
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010068:	69f8      	ldr	r0, [r7, #28]
 801006a:	f7fe fd22 	bl	800eab2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010072:	2b00      	cmp	r3, #0
 8010074:	d104      	bne.n	8010080 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801007c:	861a      	strh	r2, [r3, #48]	; 0x30
 801007e:	e006      	b.n	801008e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00a      	beq.n	80100ae <tcp_process+0x30a>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	6910      	ldr	r0, [r2, #16]
 80100a2:	2200      	movs	r2, #0
 80100a4:	6879      	ldr	r1, [r7, #4]
 80100a6:	4798      	blx	r3
 80100a8:	4603      	mov	r3, r0
 80100aa:	76bb      	strb	r3, [r7, #26]
 80100ac:	e001      	b.n	80100b2 <tcp_process+0x30e>
 80100ae:	2300      	movs	r3, #0
 80100b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80100b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80100b6:	f113 0f0d 	cmn.w	r3, #13
 80100ba:	d102      	bne.n	80100c2 <tcp_process+0x31e>
          return ERR_ABRT;
 80100bc:	f06f 030c 	mvn.w	r3, #12
 80100c0:	e250      	b.n	8010564 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	8b5b      	ldrh	r3, [r3, #26]
 80100c6:	f043 0302 	orr.w	r3, r3, #2
 80100ca:	b29a      	uxth	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80100d0:	e23a      	b.n	8010548 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80100d2:	4b98      	ldr	r3, [pc, #608]	; (8010334 <tcp_process+0x590>)
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	f003 0310 	and.w	r3, r3, #16
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f000 8234 	beq.w	8010548 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100e0:	4b95      	ldr	r3, [pc, #596]	; (8010338 <tcp_process+0x594>)
 80100e2:	6819      	ldr	r1, [r3, #0]
 80100e4:	4b95      	ldr	r3, [pc, #596]	; (801033c <tcp_process+0x598>)
 80100e6:	881b      	ldrh	r3, [r3, #0]
 80100e8:	461a      	mov	r2, r3
 80100ea:	4b95      	ldr	r3, [pc, #596]	; (8010340 <tcp_process+0x59c>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100f0:	4b94      	ldr	r3, [pc, #592]	; (8010344 <tcp_process+0x5a0>)
 80100f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100f4:	885b      	ldrh	r3, [r3, #2]
 80100f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100f8:	4a92      	ldr	r2, [pc, #584]	; (8010344 <tcp_process+0x5a0>)
 80100fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100fc:	8812      	ldrh	r2, [r2, #0]
 80100fe:	b292      	uxth	r2, r2
 8010100:	9202      	str	r2, [sp, #8]
 8010102:	9301      	str	r3, [sp, #4]
 8010104:	4b90      	ldr	r3, [pc, #576]	; (8010348 <tcp_process+0x5a4>)
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	4b90      	ldr	r3, [pc, #576]	; (801034c <tcp_process+0x5a8>)
 801010a:	4602      	mov	r2, r0
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f002 fc85 	bl	8012a1c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010118:	2b05      	cmp	r3, #5
 801011a:	f200 8215 	bhi.w	8010548 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f002 fa4f 	bl	80125c8 <tcp_rexmit_rto>
      break;
 801012a:	e20d      	b.n	8010548 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801012c:	4b81      	ldr	r3, [pc, #516]	; (8010334 <tcp_process+0x590>)
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	f003 0310 	and.w	r3, r3, #16
 8010134:	2b00      	cmp	r3, #0
 8010136:	f000 80a1 	beq.w	801027c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801013a:	4b7f      	ldr	r3, [pc, #508]	; (8010338 <tcp_process+0x594>)
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	3b01      	subs	r3, #1
 8010146:	2b00      	cmp	r3, #0
 8010148:	db7e      	blt.n	8010248 <tcp_process+0x4a4>
 801014a:	4b7b      	ldr	r3, [pc, #492]	; (8010338 <tcp_process+0x594>)
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010152:	1ad3      	subs	r3, r2, r3
 8010154:	2b00      	cmp	r3, #0
 8010156:	dc77      	bgt.n	8010248 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2204      	movs	r2, #4
 801015c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010162:	2b00      	cmp	r3, #0
 8010164:	d102      	bne.n	801016c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010166:	23fa      	movs	r3, #250	; 0xfa
 8010168:	76bb      	strb	r3, [r7, #26]
 801016a:	e01d      	b.n	80101a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010170:	699b      	ldr	r3, [r3, #24]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d106      	bne.n	8010184 <tcp_process+0x3e0>
 8010176:	4b76      	ldr	r3, [pc, #472]	; (8010350 <tcp_process+0x5ac>)
 8010178:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801017c:	4975      	ldr	r1, [pc, #468]	; (8010354 <tcp_process+0x5b0>)
 801017e:	4876      	ldr	r0, [pc, #472]	; (8010358 <tcp_process+0x5b4>)
 8010180:	f008 fece 	bl	8018f20 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010188:	699b      	ldr	r3, [r3, #24]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <tcp_process+0x400>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010192:	699b      	ldr	r3, [r3, #24]
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	6910      	ldr	r0, [r2, #16]
 8010198:	2200      	movs	r2, #0
 801019a:	6879      	ldr	r1, [r7, #4]
 801019c:	4798      	blx	r3
 801019e:	4603      	mov	r3, r0
 80101a0:	76bb      	strb	r3, [r7, #26]
 80101a2:	e001      	b.n	80101a8 <tcp_process+0x404>
 80101a4:	23f0      	movs	r3, #240	; 0xf0
 80101a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80101a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00a      	beq.n	80101c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80101b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80101b4:	f113 0f0d 	cmn.w	r3, #13
 80101b8:	d002      	beq.n	80101c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7fd ff8e 	bl	800e0dc <tcp_abort>
            }
            return ERR_ABRT;
 80101c0:	f06f 030c 	mvn.w	r3, #12
 80101c4:	e1ce      	b.n	8010564 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 fae0 	bl	801078c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80101cc:	4b63      	ldr	r3, [pc, #396]	; (801035c <tcp_process+0x5b8>)
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d005      	beq.n	80101e0 <tcp_process+0x43c>
            recv_acked--;
 80101d4:	4b61      	ldr	r3, [pc, #388]	; (801035c <tcp_process+0x5b8>)
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	3b01      	subs	r3, #1
 80101da:	b29a      	uxth	r2, r3
 80101dc:	4b5f      	ldr	r3, [pc, #380]	; (801035c <tcp_process+0x5b8>)
 80101de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101e4:	009a      	lsls	r2, r3, #2
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80101f0:	428b      	cmp	r3, r1
 80101f2:	bf38      	it	cc
 80101f4:	460b      	movcc	r3, r1
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d204      	bcs.n	8010204 <tcp_process+0x460>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	b29b      	uxth	r3, r3
 8010202:	e00d      	b.n	8010220 <tcp_process+0x47c>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010208:	005b      	lsls	r3, r3, #1
 801020a:	f241 121c 	movw	r2, #4380	; 0x111c
 801020e:	4293      	cmp	r3, r2
 8010210:	d904      	bls.n	801021c <tcp_process+0x478>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010216:	005b      	lsls	r3, r3, #1
 8010218:	b29b      	uxth	r3, r3
 801021a:	e001      	b.n	8010220 <tcp_process+0x47c>
 801021c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010226:	4b4e      	ldr	r3, [pc, #312]	; (8010360 <tcp_process+0x5bc>)
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	f003 0320 	and.w	r3, r3, #32
 801022e:	2b00      	cmp	r3, #0
 8010230:	d037      	beq.n	80102a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	8b5b      	ldrh	r3, [r3, #26]
 8010236:	f043 0302 	orr.w	r3, r3, #2
 801023a:	b29a      	uxth	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2207      	movs	r2, #7
 8010244:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010246:	e02c      	b.n	80102a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010248:	4b3b      	ldr	r3, [pc, #236]	; (8010338 <tcp_process+0x594>)
 801024a:	6819      	ldr	r1, [r3, #0]
 801024c:	4b3b      	ldr	r3, [pc, #236]	; (801033c <tcp_process+0x598>)
 801024e:	881b      	ldrh	r3, [r3, #0]
 8010250:	461a      	mov	r2, r3
 8010252:	4b3b      	ldr	r3, [pc, #236]	; (8010340 <tcp_process+0x59c>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010258:	4b3a      	ldr	r3, [pc, #232]	; (8010344 <tcp_process+0x5a0>)
 801025a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801025c:	885b      	ldrh	r3, [r3, #2]
 801025e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010260:	4a38      	ldr	r2, [pc, #224]	; (8010344 <tcp_process+0x5a0>)
 8010262:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010264:	8812      	ldrh	r2, [r2, #0]
 8010266:	b292      	uxth	r2, r2
 8010268:	9202      	str	r2, [sp, #8]
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	4b36      	ldr	r3, [pc, #216]	; (8010348 <tcp_process+0x5a4>)
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	4b36      	ldr	r3, [pc, #216]	; (801034c <tcp_process+0x5a8>)
 8010272:	4602      	mov	r2, r0
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f002 fbd1 	bl	8012a1c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801027a:	e167      	b.n	801054c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801027c:	4b2d      	ldr	r3, [pc, #180]	; (8010334 <tcp_process+0x590>)
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	f003 0302 	and.w	r3, r3, #2
 8010284:	2b00      	cmp	r3, #0
 8010286:	f000 8161 	beq.w	801054c <tcp_process+0x7a8>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028e:	1e5a      	subs	r2, r3, #1
 8010290:	4b2b      	ldr	r3, [pc, #172]	; (8010340 <tcp_process+0x59c>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	429a      	cmp	r2, r3
 8010296:	f040 8159 	bne.w	801054c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f002 f9b6 	bl	801260c <tcp_rexmit>
      break;
 80102a0:	e154      	b.n	801054c <tcp_process+0x7a8>
 80102a2:	e153      	b.n	801054c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 fa71 	bl	801078c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80102aa:	4b2d      	ldr	r3, [pc, #180]	; (8010360 <tcp_process+0x5bc>)
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	f003 0320 	and.w	r3, r3, #32
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 814c 	beq.w	8010550 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	8b5b      	ldrh	r3, [r3, #26]
 80102bc:	f043 0302 	orr.w	r3, r3, #2
 80102c0:	b29a      	uxth	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2207      	movs	r2, #7
 80102ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80102cc:	e140      	b.n	8010550 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 fa5c 	bl	801078c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80102d4:	4b22      	ldr	r3, [pc, #136]	; (8010360 <tcp_process+0x5bc>)
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	f003 0320 	and.w	r3, r3, #32
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d071      	beq.n	80103c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102e0:	4b14      	ldr	r3, [pc, #80]	; (8010334 <tcp_process+0x590>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f003 0310 	and.w	r3, r3, #16
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d060      	beq.n	80103ae <tcp_process+0x60a>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102f0:	4b11      	ldr	r3, [pc, #68]	; (8010338 <tcp_process+0x594>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d15a      	bne.n	80103ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d156      	bne.n	80103ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	8b5b      	ldrh	r3, [r3, #26]
 8010304:	f043 0302 	orr.w	r3, r3, #2
 8010308:	b29a      	uxth	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f7fe fdbc 	bl	800ee8c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010314:	4b13      	ldr	r3, [pc, #76]	; (8010364 <tcp_process+0x5c0>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	429a      	cmp	r2, r3
 801031c:	d105      	bne.n	801032a <tcp_process+0x586>
 801031e:	4b11      	ldr	r3, [pc, #68]	; (8010364 <tcp_process+0x5c0>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	4a0f      	ldr	r2, [pc, #60]	; (8010364 <tcp_process+0x5c0>)
 8010326:	6013      	str	r3, [r2, #0]
 8010328:	e02e      	b.n	8010388 <tcp_process+0x5e4>
 801032a:	4b0e      	ldr	r3, [pc, #56]	; (8010364 <tcp_process+0x5c0>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	617b      	str	r3, [r7, #20]
 8010330:	e027      	b.n	8010382 <tcp_process+0x5de>
 8010332:	bf00      	nop
 8010334:	2000c990 	.word	0x2000c990
 8010338:	2000c988 	.word	0x2000c988
 801033c:	2000c98e 	.word	0x2000c98e
 8010340:	2000c984 	.word	0x2000c984
 8010344:	2000c974 	.word	0x2000c974
 8010348:	2000983c 	.word	0x2000983c
 801034c:	20009840 	.word	0x20009840
 8010350:	0801adfc 	.word	0x0801adfc
 8010354:	0801b09c 	.word	0x0801b09c
 8010358:	0801ae48 	.word	0x0801ae48
 801035c:	2000c98c 	.word	0x2000c98c
 8010360:	2000c991 	.word	0x2000c991
 8010364:	2000c958 	.word	0x2000c958
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	429a      	cmp	r2, r3
 8010370:	d104      	bne.n	801037c <tcp_process+0x5d8>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	68da      	ldr	r2, [r3, #12]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	60da      	str	r2, [r3, #12]
 801037a:	e005      	b.n	8010388 <tcp_process+0x5e4>
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	617b      	str	r3, [r7, #20]
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1ef      	bne.n	8010368 <tcp_process+0x5c4>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	60da      	str	r2, [r3, #12]
 801038e:	4b77      	ldr	r3, [pc, #476]	; (801056c <tcp_process+0x7c8>)
 8010390:	2201      	movs	r2, #1
 8010392:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	220a      	movs	r2, #10
 8010398:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801039a:	4b75      	ldr	r3, [pc, #468]	; (8010570 <tcp_process+0x7cc>)
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	60da      	str	r2, [r3, #12]
 80103a2:	4a73      	ldr	r2, [pc, #460]	; (8010570 <tcp_process+0x7cc>)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6013      	str	r3, [r2, #0]
 80103a8:	f002 fcfa 	bl	8012da0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80103ac:	e0d2      	b.n	8010554 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	8b5b      	ldrh	r3, [r3, #26]
 80103b2:	f043 0302 	orr.w	r3, r3, #2
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2208      	movs	r2, #8
 80103c0:	751a      	strb	r2, [r3, #20]
      break;
 80103c2:	e0c7      	b.n	8010554 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103c4:	4b6b      	ldr	r3, [pc, #428]	; (8010574 <tcp_process+0x7d0>)
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	f003 0310 	and.w	r3, r3, #16
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f000 80c1 	beq.w	8010554 <tcp_process+0x7b0>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103d6:	4b68      	ldr	r3, [pc, #416]	; (8010578 <tcp_process+0x7d4>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	429a      	cmp	r2, r3
 80103dc:	f040 80ba 	bne.w	8010554 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	f040 80b5 	bne.w	8010554 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2206      	movs	r2, #6
 80103ee:	751a      	strb	r2, [r3, #20]
      break;
 80103f0:	e0b0      	b.n	8010554 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 f9ca 	bl	801078c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80103f8:	4b60      	ldr	r3, [pc, #384]	; (801057c <tcp_process+0x7d8>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	f003 0320 	and.w	r3, r3, #32
 8010400:	2b00      	cmp	r3, #0
 8010402:	f000 80a9 	beq.w	8010558 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	8b5b      	ldrh	r3, [r3, #26]
 801040a:	f043 0302 	orr.w	r3, r3, #2
 801040e:	b29a      	uxth	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7fe fd39 	bl	800ee8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801041a:	4b59      	ldr	r3, [pc, #356]	; (8010580 <tcp_process+0x7dc>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	429a      	cmp	r2, r3
 8010422:	d105      	bne.n	8010430 <tcp_process+0x68c>
 8010424:	4b56      	ldr	r3, [pc, #344]	; (8010580 <tcp_process+0x7dc>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	4a55      	ldr	r2, [pc, #340]	; (8010580 <tcp_process+0x7dc>)
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	e013      	b.n	8010458 <tcp_process+0x6b4>
 8010430:	4b53      	ldr	r3, [pc, #332]	; (8010580 <tcp_process+0x7dc>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	613b      	str	r3, [r7, #16]
 8010436:	e00c      	b.n	8010452 <tcp_process+0x6ae>
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	429a      	cmp	r2, r3
 8010440:	d104      	bne.n	801044c <tcp_process+0x6a8>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	68da      	ldr	r2, [r3, #12]
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	60da      	str	r2, [r3, #12]
 801044a:	e005      	b.n	8010458 <tcp_process+0x6b4>
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	613b      	str	r3, [r7, #16]
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1ef      	bne.n	8010438 <tcp_process+0x694>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	60da      	str	r2, [r3, #12]
 801045e:	4b43      	ldr	r3, [pc, #268]	; (801056c <tcp_process+0x7c8>)
 8010460:	2201      	movs	r2, #1
 8010462:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	220a      	movs	r2, #10
 8010468:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801046a:	4b41      	ldr	r3, [pc, #260]	; (8010570 <tcp_process+0x7cc>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	60da      	str	r2, [r3, #12]
 8010472:	4a3f      	ldr	r2, [pc, #252]	; (8010570 <tcp_process+0x7cc>)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6013      	str	r3, [r2, #0]
 8010478:	f002 fc92 	bl	8012da0 <tcp_timer_needed>
      }
      break;
 801047c:	e06c      	b.n	8010558 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 f984 	bl	801078c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010484:	4b3b      	ldr	r3, [pc, #236]	; (8010574 <tcp_process+0x7d0>)
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	f003 0310 	and.w	r3, r3, #16
 801048c:	2b00      	cmp	r3, #0
 801048e:	d065      	beq.n	801055c <tcp_process+0x7b8>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010494:	4b38      	ldr	r3, [pc, #224]	; (8010578 <tcp_process+0x7d4>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	429a      	cmp	r2, r3
 801049a:	d15f      	bne.n	801055c <tcp_process+0x7b8>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d15b      	bne.n	801055c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f7fe fcf1 	bl	800ee8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80104aa:	4b35      	ldr	r3, [pc, #212]	; (8010580 <tcp_process+0x7dc>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d105      	bne.n	80104c0 <tcp_process+0x71c>
 80104b4:	4b32      	ldr	r3, [pc, #200]	; (8010580 <tcp_process+0x7dc>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	4a31      	ldr	r2, [pc, #196]	; (8010580 <tcp_process+0x7dc>)
 80104bc:	6013      	str	r3, [r2, #0]
 80104be:	e013      	b.n	80104e8 <tcp_process+0x744>
 80104c0:	4b2f      	ldr	r3, [pc, #188]	; (8010580 <tcp_process+0x7dc>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	60fb      	str	r3, [r7, #12]
 80104c6:	e00c      	b.n	80104e2 <tcp_process+0x73e>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d104      	bne.n	80104dc <tcp_process+0x738>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	68da      	ldr	r2, [r3, #12]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	60da      	str	r2, [r3, #12]
 80104da:	e005      	b.n	80104e8 <tcp_process+0x744>
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	60fb      	str	r3, [r7, #12]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d1ef      	bne.n	80104c8 <tcp_process+0x724>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	60da      	str	r2, [r3, #12]
 80104ee:	4b1f      	ldr	r3, [pc, #124]	; (801056c <tcp_process+0x7c8>)
 80104f0:	2201      	movs	r2, #1
 80104f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	220a      	movs	r2, #10
 80104f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104fa:	4b1d      	ldr	r3, [pc, #116]	; (8010570 <tcp_process+0x7cc>)
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	60da      	str	r2, [r3, #12]
 8010502:	4a1b      	ldr	r2, [pc, #108]	; (8010570 <tcp_process+0x7cc>)
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6013      	str	r3, [r2, #0]
 8010508:	f002 fc4a 	bl	8012da0 <tcp_timer_needed>
      }
      break;
 801050c:	e026      	b.n	801055c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 f93c 	bl	801078c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010514:	4b17      	ldr	r3, [pc, #92]	; (8010574 <tcp_process+0x7d0>)
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	f003 0310 	and.w	r3, r3, #16
 801051c:	2b00      	cmp	r3, #0
 801051e:	d01f      	beq.n	8010560 <tcp_process+0x7bc>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010524:	4b14      	ldr	r3, [pc, #80]	; (8010578 <tcp_process+0x7d4>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	429a      	cmp	r2, r3
 801052a:	d119      	bne.n	8010560 <tcp_process+0x7bc>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010530:	2b00      	cmp	r3, #0
 8010532:	d115      	bne.n	8010560 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010534:	4b11      	ldr	r3, [pc, #68]	; (801057c <tcp_process+0x7d8>)
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	f043 0310 	orr.w	r3, r3, #16
 801053c:	b2da      	uxtb	r2, r3
 801053e:	4b0f      	ldr	r3, [pc, #60]	; (801057c <tcp_process+0x7d8>)
 8010540:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010542:	e00d      	b.n	8010560 <tcp_process+0x7bc>
    default:
      break;
 8010544:	bf00      	nop
 8010546:	e00c      	b.n	8010562 <tcp_process+0x7be>
      break;
 8010548:	bf00      	nop
 801054a:	e00a      	b.n	8010562 <tcp_process+0x7be>
      break;
 801054c:	bf00      	nop
 801054e:	e008      	b.n	8010562 <tcp_process+0x7be>
      break;
 8010550:	bf00      	nop
 8010552:	e006      	b.n	8010562 <tcp_process+0x7be>
      break;
 8010554:	bf00      	nop
 8010556:	e004      	b.n	8010562 <tcp_process+0x7be>
      break;
 8010558:	bf00      	nop
 801055a:	e002      	b.n	8010562 <tcp_process+0x7be>
      break;
 801055c:	bf00      	nop
 801055e:	e000      	b.n	8010562 <tcp_process+0x7be>
      break;
 8010560:	bf00      	nop
  }
  return ERR_OK;
 8010562:	2300      	movs	r3, #0
}
 8010564:	4618      	mov	r0, r3
 8010566:	3724      	adds	r7, #36	; 0x24
 8010568:	46bd      	mov	sp, r7
 801056a:	bd90      	pop	{r4, r7, pc}
 801056c:	2000c960 	.word	0x2000c960
 8010570:	2000c95c 	.word	0x2000c95c
 8010574:	2000c990 	.word	0x2000c990
 8010578:	2000c988 	.word	0x2000c988
 801057c:	2000c991 	.word	0x2000c991
 8010580:	2000c958 	.word	0x2000c958

08010584 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010584:	b590      	push	{r4, r7, lr}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d106      	bne.n	80105a2 <tcp_oos_insert_segment+0x1e>
 8010594:	4b3b      	ldr	r3, [pc, #236]	; (8010684 <tcp_oos_insert_segment+0x100>)
 8010596:	f240 421f 	movw	r2, #1055	; 0x41f
 801059a:	493b      	ldr	r1, [pc, #236]	; (8010688 <tcp_oos_insert_segment+0x104>)
 801059c:	483b      	ldr	r0, [pc, #236]	; (801068c <tcp_oos_insert_segment+0x108>)
 801059e:	f008 fcbf 	bl	8018f20 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	899b      	ldrh	r3, [r3, #12]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fb fbb8 	bl	800bd20 <lwip_htons>
 80105b0:	4603      	mov	r3, r0
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	f003 0301 	and.w	r3, r3, #1
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d028      	beq.n	801060e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80105bc:	6838      	ldr	r0, [r7, #0]
 80105be:	f7fe fa63 	bl	800ea88 <tcp_segs_free>
    next = NULL;
 80105c2:	2300      	movs	r3, #0
 80105c4:	603b      	str	r3, [r7, #0]
 80105c6:	e056      	b.n	8010676 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	899b      	ldrh	r3, [r3, #12]
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fb fba5 	bl	800bd20 <lwip_htons>
 80105d6:	4603      	mov	r3, r0
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	f003 0301 	and.w	r3, r3, #1
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d00d      	beq.n	80105fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	68db      	ldr	r3, [r3, #12]
 80105e6:	899b      	ldrh	r3, [r3, #12]
 80105e8:	b29c      	uxth	r4, r3
 80105ea:	2001      	movs	r0, #1
 80105ec:	f7fb fb98 	bl	800bd20 <lwip_htons>
 80105f0:	4603      	mov	r3, r0
 80105f2:	461a      	mov	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	4322      	orrs	r2, r4
 80105fa:	b292      	uxth	r2, r2
 80105fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f7fe fa52 	bl	800eab2 <tcp_seg_free>
    while (next &&
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00e      	beq.n	8010632 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	891b      	ldrh	r3, [r3, #8]
 8010618:	461a      	mov	r2, r3
 801061a:	4b1d      	ldr	r3, [pc, #116]	; (8010690 <tcp_oos_insert_segment+0x10c>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	441a      	add	r2, r3
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	6839      	ldr	r1, [r7, #0]
 8010628:	8909      	ldrh	r1, [r1, #8]
 801062a:	440b      	add	r3, r1
 801062c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801062e:	2b00      	cmp	r3, #0
 8010630:	daca      	bge.n	80105c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d01e      	beq.n	8010676 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	891b      	ldrh	r3, [r3, #8]
 801063c:	461a      	mov	r2, r3
 801063e:	4b14      	ldr	r3, [pc, #80]	; (8010690 <tcp_oos_insert_segment+0x10c>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	441a      	add	r2, r3
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801064c:	2b00      	cmp	r3, #0
 801064e:	dd12      	ble.n	8010676 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	b29a      	uxth	r2, r3
 8010658:	4b0d      	ldr	r3, [pc, #52]	; (8010690 <tcp_oos_insert_segment+0x10c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	b29b      	uxth	r3, r3
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	b29a      	uxth	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	685a      	ldr	r2, [r3, #4]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	891b      	ldrh	r3, [r3, #8]
 801066e:	4619      	mov	r1, r3
 8010670:	4610      	mov	r0, r2
 8010672:	f7fc fe0b 	bl	800d28c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	683a      	ldr	r2, [r7, #0]
 801067a:	601a      	str	r2, [r3, #0]
}
 801067c:	bf00      	nop
 801067e:	3714      	adds	r7, #20
 8010680:	46bd      	mov	sp, r7
 8010682:	bd90      	pop	{r4, r7, pc}
 8010684:	0801adfc 	.word	0x0801adfc
 8010688:	0801b0bc 	.word	0x0801b0bc
 801068c:	0801ae48 	.word	0x0801ae48
 8010690:	2000c984 	.word	0x2000c984

08010694 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010694:	b5b0      	push	{r4, r5, r7, lr}
 8010696:	b086      	sub	sp, #24
 8010698:	af00      	add	r7, sp, #0
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	607a      	str	r2, [r7, #4]
 80106a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80106a2:	e03e      	b.n	8010722 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7fc fffe 	bl	800d6b4 <pbuf_clen>
 80106b8:	4603      	mov	r3, r0
 80106ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106c2:	8a7a      	ldrh	r2, [r7, #18]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d906      	bls.n	80106d6 <tcp_free_acked_segments+0x42>
 80106c8:	4b2a      	ldr	r3, [pc, #168]	; (8010774 <tcp_free_acked_segments+0xe0>)
 80106ca:	f240 4257 	movw	r2, #1111	; 0x457
 80106ce:	492a      	ldr	r1, [pc, #168]	; (8010778 <tcp_free_acked_segments+0xe4>)
 80106d0:	482a      	ldr	r0, [pc, #168]	; (801077c <tcp_free_acked_segments+0xe8>)
 80106d2:	f008 fc25 	bl	8018f20 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80106dc:	8a7b      	ldrh	r3, [r7, #18]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	891a      	ldrh	r2, [r3, #8]
 80106ec:	4b24      	ldr	r3, [pc, #144]	; (8010780 <tcp_free_acked_segments+0xec>)
 80106ee:	881b      	ldrh	r3, [r3, #0]
 80106f0:	4413      	add	r3, r2
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	4b22      	ldr	r3, [pc, #136]	; (8010780 <tcp_free_acked_segments+0xec>)
 80106f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80106f8:	6978      	ldr	r0, [r7, #20]
 80106fa:	f7fe f9da 	bl	800eab2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010704:	2b00      	cmp	r3, #0
 8010706:	d00c      	beq.n	8010722 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d109      	bne.n	8010722 <tcp_free_acked_segments+0x8e>
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d106      	bne.n	8010722 <tcp_free_acked_segments+0x8e>
 8010714:	4b17      	ldr	r3, [pc, #92]	; (8010774 <tcp_free_acked_segments+0xe0>)
 8010716:	f240 4261 	movw	r2, #1121	; 0x461
 801071a:	491a      	ldr	r1, [pc, #104]	; (8010784 <tcp_free_acked_segments+0xf0>)
 801071c:	4817      	ldr	r0, [pc, #92]	; (801077c <tcp_free_acked_segments+0xe8>)
 801071e:	f008 fbff 	bl	8018f20 <iprintf>
  while (seg_list != NULL &&
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d020      	beq.n	801076a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	68db      	ldr	r3, [r3, #12]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	4618      	mov	r0, r3
 8010730:	f7fb fb0a 	bl	800bd48 <lwip_htonl>
 8010734:	4604      	mov	r4, r0
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	891b      	ldrh	r3, [r3, #8]
 801073a:	461d      	mov	r5, r3
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	899b      	ldrh	r3, [r3, #12]
 8010742:	b29b      	uxth	r3, r3
 8010744:	4618      	mov	r0, r3
 8010746:	f7fb faeb 	bl	800bd20 <lwip_htons>
 801074a:	4603      	mov	r3, r0
 801074c:	b2db      	uxtb	r3, r3
 801074e:	f003 0303 	and.w	r3, r3, #3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d001      	beq.n	801075a <tcp_free_acked_segments+0xc6>
 8010756:	2301      	movs	r3, #1
 8010758:	e000      	b.n	801075c <tcp_free_acked_segments+0xc8>
 801075a:	2300      	movs	r3, #0
 801075c:	442b      	add	r3, r5
 801075e:	18e2      	adds	r2, r4, r3
 8010760:	4b09      	ldr	r3, [pc, #36]	; (8010788 <tcp_free_acked_segments+0xf4>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010766:	2b00      	cmp	r3, #0
 8010768:	dd9c      	ble.n	80106a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801076a:	68bb      	ldr	r3, [r7, #8]
}
 801076c:	4618      	mov	r0, r3
 801076e:	3718      	adds	r7, #24
 8010770:	46bd      	mov	sp, r7
 8010772:	bdb0      	pop	{r4, r5, r7, pc}
 8010774:	0801adfc 	.word	0x0801adfc
 8010778:	0801b0e4 	.word	0x0801b0e4
 801077c:	0801ae48 	.word	0x0801ae48
 8010780:	2000c98c 	.word	0x2000c98c
 8010784:	0801b10c 	.word	0x0801b10c
 8010788:	2000c988 	.word	0x2000c988

0801078c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801078c:	b5b0      	push	{r4, r5, r7, lr}
 801078e:	b094      	sub	sp, #80	; 0x50
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010794:	2300      	movs	r3, #0
 8010796:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d106      	bne.n	80107ac <tcp_receive+0x20>
 801079e:	4b91      	ldr	r3, [pc, #580]	; (80109e4 <tcp_receive+0x258>)
 80107a0:	f240 427b 	movw	r2, #1147	; 0x47b
 80107a4:	4990      	ldr	r1, [pc, #576]	; (80109e8 <tcp_receive+0x25c>)
 80107a6:	4891      	ldr	r0, [pc, #580]	; (80109ec <tcp_receive+0x260>)
 80107a8:	f008 fbba 	bl	8018f20 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	7d1b      	ldrb	r3, [r3, #20]
 80107b0:	2b03      	cmp	r3, #3
 80107b2:	d806      	bhi.n	80107c2 <tcp_receive+0x36>
 80107b4:	4b8b      	ldr	r3, [pc, #556]	; (80109e4 <tcp_receive+0x258>)
 80107b6:	f240 427c 	movw	r2, #1148	; 0x47c
 80107ba:	498d      	ldr	r1, [pc, #564]	; (80109f0 <tcp_receive+0x264>)
 80107bc:	488b      	ldr	r0, [pc, #556]	; (80109ec <tcp_receive+0x260>)
 80107be:	f008 fbaf 	bl	8018f20 <iprintf>

  if (flags & TCP_ACK) {
 80107c2:	4b8c      	ldr	r3, [pc, #560]	; (80109f4 <tcp_receive+0x268>)
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	f003 0310 	and.w	r3, r3, #16
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f000 8264 	beq.w	8010c98 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107d6:	461a      	mov	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107dc:	4413      	add	r3, r2
 80107de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107e4:	4b84      	ldr	r3, [pc, #528]	; (80109f8 <tcp_receive+0x26c>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	db1b      	blt.n	8010826 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107f2:	4b81      	ldr	r3, [pc, #516]	; (80109f8 <tcp_receive+0x26c>)
 80107f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d106      	bne.n	8010808 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107fe:	4b7f      	ldr	r3, [pc, #508]	; (80109fc <tcp_receive+0x270>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	1ad3      	subs	r3, r2, r3
 8010804:	2b00      	cmp	r3, #0
 8010806:	db0e      	blt.n	8010826 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801080c:	4b7b      	ldr	r3, [pc, #492]	; (80109fc <tcp_receive+0x270>)
 801080e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010810:	429a      	cmp	r2, r3
 8010812:	d125      	bne.n	8010860 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010814:	4b7a      	ldr	r3, [pc, #488]	; (8010a00 <tcp_receive+0x274>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	89db      	ldrh	r3, [r3, #14]
 801081a:	b29a      	uxth	r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010822:	429a      	cmp	r2, r3
 8010824:	d91c      	bls.n	8010860 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010826:	4b76      	ldr	r3, [pc, #472]	; (8010a00 <tcp_receive+0x274>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	89db      	ldrh	r3, [r3, #14]
 801082c:	b29a      	uxth	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010840:	429a      	cmp	r2, r3
 8010842:	d205      	bcs.n	8010850 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010850:	4b69      	ldr	r3, [pc, #420]	; (80109f8 <tcp_receive+0x26c>)
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010858:	4b68      	ldr	r3, [pc, #416]	; (80109fc <tcp_receive+0x270>)
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010860:	4b66      	ldr	r3, [pc, #408]	; (80109fc <tcp_receive+0x270>)
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010868:	1ad3      	subs	r3, r2, r3
 801086a:	2b00      	cmp	r3, #0
 801086c:	dc58      	bgt.n	8010920 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801086e:	4b65      	ldr	r3, [pc, #404]	; (8010a04 <tcp_receive+0x278>)
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d14b      	bne.n	801090e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010880:	4413      	add	r3, r2
 8010882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010884:	429a      	cmp	r2, r3
 8010886:	d142      	bne.n	801090e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801088e:	2b00      	cmp	r3, #0
 8010890:	db3d      	blt.n	801090e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010896:	4b59      	ldr	r3, [pc, #356]	; (80109fc <tcp_receive+0x270>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	429a      	cmp	r2, r3
 801089c:	d137      	bne.n	801090e <tcp_receive+0x182>
              found_dupack = 1;
 801089e:	2301      	movs	r3, #1
 80108a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108a8:	2bff      	cmp	r3, #255	; 0xff
 80108aa:	d007      	beq.n	80108bc <tcp_receive+0x130>
                ++pcb->dupacks;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108b2:	3301      	adds	r3, #1
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108c2:	2b03      	cmp	r3, #3
 80108c4:	d91b      	bls.n	80108fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108d0:	4413      	add	r3, r2
 80108d2:	b29a      	uxth	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108da:	429a      	cmp	r2, r3
 80108dc:	d30a      	bcc.n	80108f4 <tcp_receive+0x168>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108e8:	4413      	add	r3, r2
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80108f2:	e004      	b.n	80108fe <tcp_receive+0x172>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010904:	2b02      	cmp	r3, #2
 8010906:	d902      	bls.n	801090e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f001 feeb 	bl	80126e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801090e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010910:	2b00      	cmp	r3, #0
 8010912:	f040 8161 	bne.w	8010bd8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2200      	movs	r2, #0
 801091a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801091e:	e15b      	b.n	8010bd8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010920:	4b36      	ldr	r3, [pc, #216]	; (80109fc <tcp_receive+0x270>)
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010928:	1ad3      	subs	r3, r2, r3
 801092a:	3b01      	subs	r3, #1
 801092c:	2b00      	cmp	r3, #0
 801092e:	f2c0 814e 	blt.w	8010bce <tcp_receive+0x442>
 8010932:	4b32      	ldr	r3, [pc, #200]	; (80109fc <tcp_receive+0x270>)
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801093a:	1ad3      	subs	r3, r2, r3
 801093c:	2b00      	cmp	r3, #0
 801093e:	f300 8146 	bgt.w	8010bce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	8b5b      	ldrh	r3, [r3, #26]
 8010946:	f003 0304 	and.w	r3, r3, #4
 801094a:	2b00      	cmp	r3, #0
 801094c:	d010      	beq.n	8010970 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	8b5b      	ldrh	r3, [r3, #26]
 8010952:	f023 0304 	bic.w	r3, r3, #4
 8010956:	b29a      	uxth	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2200      	movs	r2, #0
 801096c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801097e:	10db      	asrs	r3, r3, #3
 8010980:	b21b      	sxth	r3, r3
 8010982:	b29a      	uxth	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801098a:	b29b      	uxth	r3, r3
 801098c:	4413      	add	r3, r2
 801098e:	b29b      	uxth	r3, r3
 8010990:	b21a      	sxth	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010998:	4b18      	ldr	r3, [pc, #96]	; (80109fc <tcp_receive+0x270>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	b29a      	uxth	r2, r3
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	1ad3      	subs	r3, r2, r3
 80109a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80109b0:	4b12      	ldr	r3, [pc, #72]	; (80109fc <tcp_receive+0x270>)
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	7d1b      	ldrb	r3, [r3, #20]
 80109bc:	2b03      	cmp	r3, #3
 80109be:	f240 8097 	bls.w	8010af0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d245      	bcs.n	8010a5e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	8b5b      	ldrh	r3, [r3, #26]
 80109d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d014      	beq.n	8010a08 <tcp_receive+0x27c>
 80109de:	2301      	movs	r3, #1
 80109e0:	e013      	b.n	8010a0a <tcp_receive+0x27e>
 80109e2:	bf00      	nop
 80109e4:	0801adfc 	.word	0x0801adfc
 80109e8:	0801b12c 	.word	0x0801b12c
 80109ec:	0801ae48 	.word	0x0801ae48
 80109f0:	0801b148 	.word	0x0801b148
 80109f4:	2000c990 	.word	0x2000c990
 80109f8:	2000c984 	.word	0x2000c984
 80109fc:	2000c988 	.word	0x2000c988
 8010a00:	2000c974 	.word	0x2000c974
 8010a04:	2000c98e 	.word	0x2000c98e
 8010a08:	2302      	movs	r3, #2
 8010a0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010a0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a18:	fb12 f303 	smulbb	r3, r2, r3
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010a20:	4293      	cmp	r3, r2
 8010a22:	bf28      	it	cs
 8010a24:	4613      	movcs	r3, r2
 8010a26:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a30:	4413      	add	r3, r2
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d309      	bcc.n	8010a52 <tcp_receive+0x2c6>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a46:	4413      	add	r3, r2
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a50:	e04e      	b.n	8010af0 <tcp_receive+0x364>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a5c:	e048      	b.n	8010af0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a66:	4413      	add	r3, r2
 8010a68:	b29a      	uxth	r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d309      	bcc.n	8010a88 <tcp_receive+0x2fc>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a7c:	4413      	add	r3, r2
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010a86:	e004      	b.n	8010a92 <tcp_receive+0x306>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d326      	bcc.n	8010af0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ac2:	4413      	add	r3, r2
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d30a      	bcc.n	8010ae6 <tcp_receive+0x35a>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ada:	4413      	add	r3, r2
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ae4:	e004      	b.n	8010af0 <tcp_receive+0x364>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010aec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010af8:	4a98      	ldr	r2, [pc, #608]	; (8010d5c <tcp_receive+0x5d0>)
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f7ff fdca 	bl	8010694 <tcp_free_acked_segments>
 8010b00:	4602      	mov	r2, r0
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b0e:	4a94      	ldr	r2, [pc, #592]	; (8010d60 <tcp_receive+0x5d4>)
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f7ff fdbf 	bl	8010694 <tcp_free_acked_segments>
 8010b16:	4602      	mov	r2, r0
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d104      	bne.n	8010b2e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b2a:	861a      	strh	r2, [r3, #48]	; 0x30
 8010b2c:	e002      	b.n	8010b34 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d103      	bne.n	8010b4a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2200      	movs	r2, #0
 8010b46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010b50:	4b84      	ldr	r3, [pc, #528]	; (8010d64 <tcp_receive+0x5d8>)
 8010b52:	881b      	ldrh	r3, [r3, #0]
 8010b54:	4413      	add	r3, r2
 8010b56:	b29a      	uxth	r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	8b5b      	ldrh	r3, [r3, #26]
 8010b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d035      	beq.n	8010bd6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d118      	bne.n	8010ba4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00c      	beq.n	8010b94 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7fb f8de 	bl	800bd48 <lwip_htonl>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	dc20      	bgt.n	8010bd6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	8b5b      	ldrh	r3, [r3, #26]
 8010b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ba2:	e018      	b.n	8010bd6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7fb f8c9 	bl	800bd48 <lwip_htonl>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	1ae3      	subs	r3, r4, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dc0b      	bgt.n	8010bd6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	8b5b      	ldrh	r3, [r3, #26]
 8010bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bcc:	e003      	b.n	8010bd6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f001 ff76 	bl	8012ac0 <tcp_send_empty_ack>
 8010bd4:	e000      	b.n	8010bd8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bd6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d05b      	beq.n	8010c98 <tcp_receive+0x50c>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010be4:	4b60      	ldr	r3, [pc, #384]	; (8010d68 <tcp_receive+0x5dc>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	da54      	bge.n	8010c98 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010bee:	4b5f      	ldr	r3, [pc, #380]	; (8010d6c <tcp_receive+0x5e0>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	1ad3      	subs	r3, r2, r3
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010c02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c0c:	10db      	asrs	r3, r3, #3
 8010c0e:	b21b      	sxth	r3, r3
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c20:	b29a      	uxth	r2, r3
 8010c22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c26:	4413      	add	r3, r2
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	b21a      	sxth	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010c30:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	da05      	bge.n	8010c44 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c3c:	425b      	negs	r3, r3
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010c44:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c4e:	109b      	asrs	r3, r3, #2
 8010c50:	b21b      	sxth	r3, r3
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	1ad3      	subs	r3, r2, r3
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c68:	4413      	add	r3, r2
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	b21a      	sxth	r2, r3
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c78:	10db      	asrs	r3, r3, #3
 8010c7a:	b21b      	sxth	r3, r3
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	4413      	add	r3, r2
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	b21a      	sxth	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2200      	movs	r2, #0
 8010c96:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010c98:	4b35      	ldr	r3, [pc, #212]	; (8010d70 <tcp_receive+0x5e4>)
 8010c9a:	881b      	ldrh	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 84e2 	beq.w	8011666 <tcp_receive+0xeda>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	7d1b      	ldrb	r3, [r3, #20]
 8010ca6:	2b06      	cmp	r3, #6
 8010ca8:	f200 84dd 	bhi.w	8011666 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cb0:	4b30      	ldr	r3, [pc, #192]	; (8010d74 <tcp_receive+0x5e8>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	3b01      	subs	r3, #1
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	f2c0 808f 	blt.w	8010ddc <tcp_receive+0x650>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc2:	4b2b      	ldr	r3, [pc, #172]	; (8010d70 <tcp_receive+0x5e4>)
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	4b2a      	ldr	r3, [pc, #168]	; (8010d74 <tcp_receive+0x5e8>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	440b      	add	r3, r1
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	3301      	adds	r3, #1
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f300 8082 	bgt.w	8010ddc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010cd8:	4b27      	ldr	r3, [pc, #156]	; (8010d78 <tcp_receive+0x5ec>)
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ce2:	4b24      	ldr	r3, [pc, #144]	; (8010d74 <tcp_receive+0x5e8>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010cea:	4b23      	ldr	r3, [pc, #140]	; (8010d78 <tcp_receive+0x5ec>)
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d106      	bne.n	8010d00 <tcp_receive+0x574>
 8010cf2:	4b22      	ldr	r3, [pc, #136]	; (8010d7c <tcp_receive+0x5f0>)
 8010cf4:	f240 5294 	movw	r2, #1428	; 0x594
 8010cf8:	4921      	ldr	r1, [pc, #132]	; (8010d80 <tcp_receive+0x5f4>)
 8010cfa:	4822      	ldr	r0, [pc, #136]	; (8010d84 <tcp_receive+0x5f8>)
 8010cfc:	f008 f910 	bl	8018f20 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d906      	bls.n	8010d18 <tcp_receive+0x58c>
 8010d0a:	4b1c      	ldr	r3, [pc, #112]	; (8010d7c <tcp_receive+0x5f0>)
 8010d0c:	f240 5295 	movw	r2, #1429	; 0x595
 8010d10:	491d      	ldr	r1, [pc, #116]	; (8010d88 <tcp_receive+0x5fc>)
 8010d12:	481c      	ldr	r0, [pc, #112]	; (8010d84 <tcp_receive+0x5f8>)
 8010d14:	f008 f904 	bl	8018f20 <iprintf>
      off = (u16_t)off32;
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010d1e:	4b16      	ldr	r3, [pc, #88]	; (8010d78 <tcp_receive+0x5ec>)
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	891b      	ldrh	r3, [r3, #8]
 8010d24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d906      	bls.n	8010d3a <tcp_receive+0x5ae>
 8010d2c:	4b13      	ldr	r3, [pc, #76]	; (8010d7c <tcp_receive+0x5f0>)
 8010d2e:	f240 5297 	movw	r2, #1431	; 0x597
 8010d32:	4916      	ldr	r1, [pc, #88]	; (8010d8c <tcp_receive+0x600>)
 8010d34:	4813      	ldr	r0, [pc, #76]	; (8010d84 <tcp_receive+0x5f8>)
 8010d36:	f008 f8f3 	bl	8018f20 <iprintf>
      inseg.len -= off;
 8010d3a:	4b0f      	ldr	r3, [pc, #60]	; (8010d78 <tcp_receive+0x5ec>)
 8010d3c:	891a      	ldrh	r2, [r3, #8]
 8010d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	4b0c      	ldr	r3, [pc, #48]	; (8010d78 <tcp_receive+0x5ec>)
 8010d48:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010d4a:	4b0b      	ldr	r3, [pc, #44]	; (8010d78 <tcp_receive+0x5ec>)
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	891a      	ldrh	r2, [r3, #8]
 8010d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010d58:	e02a      	b.n	8010db0 <tcp_receive+0x624>
 8010d5a:	bf00      	nop
 8010d5c:	0801b164 	.word	0x0801b164
 8010d60:	0801b16c 	.word	0x0801b16c
 8010d64:	2000c98c 	.word	0x2000c98c
 8010d68:	2000c988 	.word	0x2000c988
 8010d6c:	2000c94c 	.word	0x2000c94c
 8010d70:	2000c98e 	.word	0x2000c98e
 8010d74:	2000c984 	.word	0x2000c984
 8010d78:	2000c964 	.word	0x2000c964
 8010d7c:	0801adfc 	.word	0x0801adfc
 8010d80:	0801b174 	.word	0x0801b174
 8010d84:	0801ae48 	.word	0x0801ae48
 8010d88:	0801b184 	.word	0x0801b184
 8010d8c:	0801b194 	.word	0x0801b194
        off -= p->len;
 8010d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d92:	895b      	ldrh	r3, [r3, #10]
 8010d94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010da0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010da2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010da6:	2200      	movs	r2, #0
 8010da8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010db2:	895b      	ldrh	r3, [r3, #10]
 8010db4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d8e9      	bhi.n	8010d90 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010dbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010dc4:	f7fc fb62 	bl	800d48c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dcc:	4a91      	ldr	r2, [pc, #580]	; (8011014 <tcp_receive+0x888>)
 8010dce:	6013      	str	r3, [r2, #0]
 8010dd0:	4b91      	ldr	r3, [pc, #580]	; (8011018 <tcp_receive+0x88c>)
 8010dd2:	68db      	ldr	r3, [r3, #12]
 8010dd4:	4a8f      	ldr	r2, [pc, #572]	; (8011014 <tcp_receive+0x888>)
 8010dd6:	6812      	ldr	r2, [r2, #0]
 8010dd8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010dda:	e00d      	b.n	8010df8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010ddc:	4b8d      	ldr	r3, [pc, #564]	; (8011014 <tcp_receive+0x888>)
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de4:	1ad3      	subs	r3, r2, r3
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	da06      	bge.n	8010df8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	8b5b      	ldrh	r3, [r3, #26]
 8010dee:	f043 0302 	orr.w	r3, r3, #2
 8010df2:	b29a      	uxth	r2, r3
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010df8:	4b86      	ldr	r3, [pc, #536]	; (8011014 <tcp_receive+0x888>)
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f2c0 842a 	blt.w	801165c <tcp_receive+0xed0>
 8010e08:	4b82      	ldr	r3, [pc, #520]	; (8011014 <tcp_receive+0x888>)
 8010e0a:	681a      	ldr	r2, [r3, #0]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e10:	6879      	ldr	r1, [r7, #4]
 8010e12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e14:	440b      	add	r3, r1
 8010e16:	1ad3      	subs	r3, r2, r3
 8010e18:	3301      	adds	r3, #1
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f300 841e 	bgt.w	801165c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e24:	4b7b      	ldr	r3, [pc, #492]	; (8011014 <tcp_receive+0x888>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	f040 829a 	bne.w	8011362 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010e2e:	4b7a      	ldr	r3, [pc, #488]	; (8011018 <tcp_receive+0x88c>)
 8010e30:	891c      	ldrh	r4, [r3, #8]
 8010e32:	4b79      	ldr	r3, [pc, #484]	; (8011018 <tcp_receive+0x88c>)
 8010e34:	68db      	ldr	r3, [r3, #12]
 8010e36:	899b      	ldrh	r3, [r3, #12]
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7fa ff70 	bl	800bd20 <lwip_htons>
 8010e40:	4603      	mov	r3, r0
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	f003 0303 	and.w	r3, r3, #3
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d001      	beq.n	8010e50 <tcp_receive+0x6c4>
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	e000      	b.n	8010e52 <tcp_receive+0x6c6>
 8010e50:	2300      	movs	r3, #0
 8010e52:	4423      	add	r3, r4
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	4b71      	ldr	r3, [pc, #452]	; (801101c <tcp_receive+0x890>)
 8010e58:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e5e:	4b6f      	ldr	r3, [pc, #444]	; (801101c <tcp_receive+0x890>)
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d275      	bcs.n	8010f52 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e66:	4b6c      	ldr	r3, [pc, #432]	; (8011018 <tcp_receive+0x88c>)
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	899b      	ldrh	r3, [r3, #12]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fa ff56 	bl	800bd20 <lwip_htons>
 8010e74:	4603      	mov	r3, r0
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	f003 0301 	and.w	r3, r3, #1
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d01f      	beq.n	8010ec0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010e80:	4b65      	ldr	r3, [pc, #404]	; (8011018 <tcp_receive+0x88c>)
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	899b      	ldrh	r3, [r3, #12]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	b21b      	sxth	r3, r3
 8010e8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e8e:	b21c      	sxth	r4, r3
 8010e90:	4b61      	ldr	r3, [pc, #388]	; (8011018 <tcp_receive+0x88c>)
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	899b      	ldrh	r3, [r3, #12]
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7fa ff41 	bl	800bd20 <lwip_htons>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fa ff38 	bl	800bd20 <lwip_htons>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	b21b      	sxth	r3, r3
 8010eb4:	4323      	orrs	r3, r4
 8010eb6:	b21a      	sxth	r2, r3
 8010eb8:	4b57      	ldr	r3, [pc, #348]	; (8011018 <tcp_receive+0x88c>)
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	b292      	uxth	r2, r2
 8010ebe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ec4:	4b54      	ldr	r3, [pc, #336]	; (8011018 <tcp_receive+0x88c>)
 8010ec6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010ec8:	4b53      	ldr	r3, [pc, #332]	; (8011018 <tcp_receive+0x88c>)
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	899b      	ldrh	r3, [r3, #12]
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fa ff25 	bl	800bd20 <lwip_htons>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	f003 0302 	and.w	r3, r3, #2
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d005      	beq.n	8010eee <tcp_receive+0x762>
            inseg.len -= 1;
 8010ee2:	4b4d      	ldr	r3, [pc, #308]	; (8011018 <tcp_receive+0x88c>)
 8010ee4:	891b      	ldrh	r3, [r3, #8]
 8010ee6:	3b01      	subs	r3, #1
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	4b4b      	ldr	r3, [pc, #300]	; (8011018 <tcp_receive+0x88c>)
 8010eec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010eee:	4b4a      	ldr	r3, [pc, #296]	; (8011018 <tcp_receive+0x88c>)
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	4a49      	ldr	r2, [pc, #292]	; (8011018 <tcp_receive+0x88c>)
 8010ef4:	8912      	ldrh	r2, [r2, #8]
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fc f9c7 	bl	800d28c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010efe:	4b46      	ldr	r3, [pc, #280]	; (8011018 <tcp_receive+0x88c>)
 8010f00:	891c      	ldrh	r4, [r3, #8]
 8010f02:	4b45      	ldr	r3, [pc, #276]	; (8011018 <tcp_receive+0x88c>)
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	899b      	ldrh	r3, [r3, #12]
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fa ff08 	bl	800bd20 <lwip_htons>
 8010f10:	4603      	mov	r3, r0
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	f003 0303 	and.w	r3, r3, #3
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d001      	beq.n	8010f20 <tcp_receive+0x794>
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	e000      	b.n	8010f22 <tcp_receive+0x796>
 8010f20:	2300      	movs	r3, #0
 8010f22:	4423      	add	r3, r4
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	4b3d      	ldr	r3, [pc, #244]	; (801101c <tcp_receive+0x890>)
 8010f28:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f2a:	4b3c      	ldr	r3, [pc, #240]	; (801101c <tcp_receive+0x890>)
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	461a      	mov	r2, r3
 8010f30:	4b38      	ldr	r3, [pc, #224]	; (8011014 <tcp_receive+0x888>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	441a      	add	r2, r3
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3a:	6879      	ldr	r1, [r7, #4]
 8010f3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f3e:	440b      	add	r3, r1
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d006      	beq.n	8010f52 <tcp_receive+0x7c6>
 8010f44:	4b36      	ldr	r3, [pc, #216]	; (8011020 <tcp_receive+0x894>)
 8010f46:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010f4a:	4936      	ldr	r1, [pc, #216]	; (8011024 <tcp_receive+0x898>)
 8010f4c:	4836      	ldr	r0, [pc, #216]	; (8011028 <tcp_receive+0x89c>)
 8010f4e:	f007 ffe7 	bl	8018f20 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f000 80e7 	beq.w	801112a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f5c:	4b2e      	ldr	r3, [pc, #184]	; (8011018 <tcp_receive+0x88c>)
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	899b      	ldrh	r3, [r3, #12]
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7fa fedb 	bl	800bd20 <lwip_htons>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	f003 0301 	and.w	r3, r3, #1
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d010      	beq.n	8010f98 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010f76:	e00a      	b.n	8010f8e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f7c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f7fd fd92 	bl	800eab2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d1f0      	bne.n	8010f78 <tcp_receive+0x7ec>
 8010f96:	e0c8      	b.n	801112a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010f9e:	e052      	b.n	8011046 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	899b      	ldrh	r3, [r3, #12]
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7fa feb9 	bl	800bd20 <lwip_htons>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	f003 0301 	and.w	r3, r3, #1
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d03d      	beq.n	8011036 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010fba:	4b17      	ldr	r3, [pc, #92]	; (8011018 <tcp_receive+0x88c>)
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	899b      	ldrh	r3, [r3, #12]
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fa feac 	bl	800bd20 <lwip_htons>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d130      	bne.n	8011036 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010fd4:	4b10      	ldr	r3, [pc, #64]	; (8011018 <tcp_receive+0x88c>)
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	899b      	ldrh	r3, [r3, #12]
 8010fda:	b29c      	uxth	r4, r3
 8010fdc:	2001      	movs	r0, #1
 8010fde:	f7fa fe9f 	bl	800bd20 <lwip_htons>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	4b0c      	ldr	r3, [pc, #48]	; (8011018 <tcp_receive+0x88c>)
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	4322      	orrs	r2, r4
 8010fec:	b292      	uxth	r2, r2
 8010fee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010ff0:	4b09      	ldr	r3, [pc, #36]	; (8011018 <tcp_receive+0x88c>)
 8010ff2:	891c      	ldrh	r4, [r3, #8]
 8010ff4:	4b08      	ldr	r3, [pc, #32]	; (8011018 <tcp_receive+0x88c>)
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	899b      	ldrh	r3, [r3, #12]
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fa fe8f 	bl	800bd20 <lwip_htons>
 8011002:	4603      	mov	r3, r0
 8011004:	b2db      	uxtb	r3, r3
 8011006:	f003 0303 	and.w	r3, r3, #3
 801100a:	2b00      	cmp	r3, #0
 801100c:	d00e      	beq.n	801102c <tcp_receive+0x8a0>
 801100e:	2301      	movs	r3, #1
 8011010:	e00d      	b.n	801102e <tcp_receive+0x8a2>
 8011012:	bf00      	nop
 8011014:	2000c984 	.word	0x2000c984
 8011018:	2000c964 	.word	0x2000c964
 801101c:	2000c98e 	.word	0x2000c98e
 8011020:	0801adfc 	.word	0x0801adfc
 8011024:	0801b1a4 	.word	0x0801b1a4
 8011028:	0801ae48 	.word	0x0801ae48
 801102c:	2300      	movs	r3, #0
 801102e:	4423      	add	r3, r4
 8011030:	b29a      	uxth	r2, r3
 8011032:	4b98      	ldr	r3, [pc, #608]	; (8011294 <tcp_receive+0xb08>)
 8011034:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011038:	613b      	str	r3, [r7, #16]
              next = next->next;
 801103a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011040:	6938      	ldr	r0, [r7, #16]
 8011042:	f7fd fd36 	bl	800eab2 <tcp_seg_free>
            while (next &&
 8011046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00e      	beq.n	801106a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801104c:	4b91      	ldr	r3, [pc, #580]	; (8011294 <tcp_receive+0xb08>)
 801104e:	881b      	ldrh	r3, [r3, #0]
 8011050:	461a      	mov	r2, r3
 8011052:	4b91      	ldr	r3, [pc, #580]	; (8011298 <tcp_receive+0xb0c>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	441a      	add	r2, r3
 8011058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011060:	8909      	ldrh	r1, [r1, #8]
 8011062:	440b      	add	r3, r1
 8011064:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011066:	2b00      	cmp	r3, #0
 8011068:	da9a      	bge.n	8010fa0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801106c:	2b00      	cmp	r3, #0
 801106e:	d059      	beq.n	8011124 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011070:	4b88      	ldr	r3, [pc, #544]	; (8011294 <tcp_receive+0xb08>)
 8011072:	881b      	ldrh	r3, [r3, #0]
 8011074:	461a      	mov	r2, r3
 8011076:	4b88      	ldr	r3, [pc, #544]	; (8011298 <tcp_receive+0xb0c>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	441a      	add	r2, r3
 801107c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011084:	2b00      	cmp	r3, #0
 8011086:	dd4d      	ble.n	8011124 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	b29a      	uxth	r2, r3
 8011090:	4b81      	ldr	r3, [pc, #516]	; (8011298 <tcp_receive+0xb0c>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	b29b      	uxth	r3, r3
 8011096:	1ad3      	subs	r3, r2, r3
 8011098:	b29a      	uxth	r2, r3
 801109a:	4b80      	ldr	r3, [pc, #512]	; (801129c <tcp_receive+0xb10>)
 801109c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801109e:	4b7f      	ldr	r3, [pc, #508]	; (801129c <tcp_receive+0xb10>)
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	899b      	ldrh	r3, [r3, #12]
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fa fe3a 	bl	800bd20 <lwip_htons>
 80110ac:	4603      	mov	r3, r0
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	f003 0302 	and.w	r3, r3, #2
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d005      	beq.n	80110c4 <tcp_receive+0x938>
                inseg.len -= 1;
 80110b8:	4b78      	ldr	r3, [pc, #480]	; (801129c <tcp_receive+0xb10>)
 80110ba:	891b      	ldrh	r3, [r3, #8]
 80110bc:	3b01      	subs	r3, #1
 80110be:	b29a      	uxth	r2, r3
 80110c0:	4b76      	ldr	r3, [pc, #472]	; (801129c <tcp_receive+0xb10>)
 80110c2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80110c4:	4b75      	ldr	r3, [pc, #468]	; (801129c <tcp_receive+0xb10>)
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	4a74      	ldr	r2, [pc, #464]	; (801129c <tcp_receive+0xb10>)
 80110ca:	8912      	ldrh	r2, [r2, #8]
 80110cc:	4611      	mov	r1, r2
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fc f8dc 	bl	800d28c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80110d4:	4b71      	ldr	r3, [pc, #452]	; (801129c <tcp_receive+0xb10>)
 80110d6:	891c      	ldrh	r4, [r3, #8]
 80110d8:	4b70      	ldr	r3, [pc, #448]	; (801129c <tcp_receive+0xb10>)
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	899b      	ldrh	r3, [r3, #12]
 80110de:	b29b      	uxth	r3, r3
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7fa fe1d 	bl	800bd20 <lwip_htons>
 80110e6:	4603      	mov	r3, r0
 80110e8:	b2db      	uxtb	r3, r3
 80110ea:	f003 0303 	and.w	r3, r3, #3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d001      	beq.n	80110f6 <tcp_receive+0x96a>
 80110f2:	2301      	movs	r3, #1
 80110f4:	e000      	b.n	80110f8 <tcp_receive+0x96c>
 80110f6:	2300      	movs	r3, #0
 80110f8:	4423      	add	r3, r4
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	4b65      	ldr	r3, [pc, #404]	; (8011294 <tcp_receive+0xb08>)
 80110fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011100:	4b64      	ldr	r3, [pc, #400]	; (8011294 <tcp_receive+0xb08>)
 8011102:	881b      	ldrh	r3, [r3, #0]
 8011104:	461a      	mov	r2, r3
 8011106:	4b64      	ldr	r3, [pc, #400]	; (8011298 <tcp_receive+0xb0c>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	441a      	add	r2, r3
 801110c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	429a      	cmp	r2, r3
 8011114:	d006      	beq.n	8011124 <tcp_receive+0x998>
 8011116:	4b62      	ldr	r3, [pc, #392]	; (80112a0 <tcp_receive+0xb14>)
 8011118:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801111c:	4961      	ldr	r1, [pc, #388]	; (80112a4 <tcp_receive+0xb18>)
 801111e:	4862      	ldr	r0, [pc, #392]	; (80112a8 <tcp_receive+0xb1c>)
 8011120:	f007 fefe 	bl	8018f20 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011128:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801112a:	4b5a      	ldr	r3, [pc, #360]	; (8011294 <tcp_receive+0xb08>)
 801112c:	881b      	ldrh	r3, [r3, #0]
 801112e:	461a      	mov	r2, r3
 8011130:	4b59      	ldr	r3, [pc, #356]	; (8011298 <tcp_receive+0xb0c>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	441a      	add	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801113e:	4b55      	ldr	r3, [pc, #340]	; (8011294 <tcp_receive+0xb08>)
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	429a      	cmp	r2, r3
 8011144:	d206      	bcs.n	8011154 <tcp_receive+0x9c8>
 8011146:	4b56      	ldr	r3, [pc, #344]	; (80112a0 <tcp_receive+0xb14>)
 8011148:	f240 6207 	movw	r2, #1543	; 0x607
 801114c:	4957      	ldr	r1, [pc, #348]	; (80112ac <tcp_receive+0xb20>)
 801114e:	4856      	ldr	r0, [pc, #344]	; (80112a8 <tcp_receive+0xb1c>)
 8011150:	f007 fee6 	bl	8018f20 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011158:	4b4e      	ldr	r3, [pc, #312]	; (8011294 <tcp_receive+0xb08>)
 801115a:	881b      	ldrh	r3, [r3, #0]
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	b29a      	uxth	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7fc ffc5 	bl	800e0f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801116a:	4b4c      	ldr	r3, [pc, #304]	; (801129c <tcp_receive+0xb10>)
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	891b      	ldrh	r3, [r3, #8]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d006      	beq.n	8011182 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011174:	4b49      	ldr	r3, [pc, #292]	; (801129c <tcp_receive+0xb10>)
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	4a4d      	ldr	r2, [pc, #308]	; (80112b0 <tcp_receive+0xb24>)
 801117a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801117c:	4b47      	ldr	r3, [pc, #284]	; (801129c <tcp_receive+0xb10>)
 801117e:	2200      	movs	r2, #0
 8011180:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011182:	4b46      	ldr	r3, [pc, #280]	; (801129c <tcp_receive+0xb10>)
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	899b      	ldrh	r3, [r3, #12]
 8011188:	b29b      	uxth	r3, r3
 801118a:	4618      	mov	r0, r3
 801118c:	f7fa fdc8 	bl	800bd20 <lwip_htons>
 8011190:	4603      	mov	r3, r0
 8011192:	b2db      	uxtb	r3, r3
 8011194:	f003 0301 	and.w	r3, r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	f000 80b8 	beq.w	801130e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801119e:	4b45      	ldr	r3, [pc, #276]	; (80112b4 <tcp_receive+0xb28>)
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	f043 0320 	orr.w	r3, r3, #32
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	4b42      	ldr	r3, [pc, #264]	; (80112b4 <tcp_receive+0xb28>)
 80111aa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80111ac:	e0af      	b.n	801130e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111b2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	4a36      	ldr	r2, [pc, #216]	; (8011298 <tcp_receive+0xb0c>)
 80111be:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	891b      	ldrh	r3, [r3, #8]
 80111c4:	461c      	mov	r4, r3
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	899b      	ldrh	r3, [r3, #12]
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fa fda6 	bl	800bd20 <lwip_htons>
 80111d4:	4603      	mov	r3, r0
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	f003 0303 	and.w	r3, r3, #3
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d001      	beq.n	80111e4 <tcp_receive+0xa58>
 80111e0:	2301      	movs	r3, #1
 80111e2:	e000      	b.n	80111e6 <tcp_receive+0xa5a>
 80111e4:	2300      	movs	r3, #0
 80111e6:	191a      	adds	r2, r3, r4
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ec:	441a      	add	r2, r3
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111f6:	461c      	mov	r4, r3
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	891b      	ldrh	r3, [r3, #8]
 80111fc:	461d      	mov	r5, r3
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	899b      	ldrh	r3, [r3, #12]
 8011204:	b29b      	uxth	r3, r3
 8011206:	4618      	mov	r0, r3
 8011208:	f7fa fd8a 	bl	800bd20 <lwip_htons>
 801120c:	4603      	mov	r3, r0
 801120e:	b2db      	uxtb	r3, r3
 8011210:	f003 0303 	and.w	r3, r3, #3
 8011214:	2b00      	cmp	r3, #0
 8011216:	d001      	beq.n	801121c <tcp_receive+0xa90>
 8011218:	2301      	movs	r3, #1
 801121a:	e000      	b.n	801121e <tcp_receive+0xa92>
 801121c:	2300      	movs	r3, #0
 801121e:	442b      	add	r3, r5
 8011220:	429c      	cmp	r4, r3
 8011222:	d206      	bcs.n	8011232 <tcp_receive+0xaa6>
 8011224:	4b1e      	ldr	r3, [pc, #120]	; (80112a0 <tcp_receive+0xb14>)
 8011226:	f240 622b 	movw	r2, #1579	; 0x62b
 801122a:	4923      	ldr	r1, [pc, #140]	; (80112b8 <tcp_receive+0xb2c>)
 801122c:	481e      	ldr	r0, [pc, #120]	; (80112a8 <tcp_receive+0xb1c>)
 801122e:	f007 fe77 	bl	8018f20 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	891b      	ldrh	r3, [r3, #8]
 8011236:	461c      	mov	r4, r3
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	899b      	ldrh	r3, [r3, #12]
 801123e:	b29b      	uxth	r3, r3
 8011240:	4618      	mov	r0, r3
 8011242:	f7fa fd6d 	bl	800bd20 <lwip_htons>
 8011246:	4603      	mov	r3, r0
 8011248:	b2db      	uxtb	r3, r3
 801124a:	f003 0303 	and.w	r3, r3, #3
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <tcp_receive+0xaca>
 8011252:	2301      	movs	r3, #1
 8011254:	e000      	b.n	8011258 <tcp_receive+0xacc>
 8011256:	2300      	movs	r3, #0
 8011258:	1919      	adds	r1, r3, r4
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801125e:	b28b      	uxth	r3, r1
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	b29a      	uxth	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f7fc ff43 	bl	800e0f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	891b      	ldrh	r3, [r3, #8]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d028      	beq.n	80112ca <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011278:	4b0d      	ldr	r3, [pc, #52]	; (80112b0 <tcp_receive+0xb24>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d01d      	beq.n	80112bc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011280:	4b0b      	ldr	r3, [pc, #44]	; (80112b0 <tcp_receive+0xb24>)
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	4619      	mov	r1, r3
 801128a:	4610      	mov	r0, r2
 801128c:	f7fc fa50 	bl	800d730 <pbuf_cat>
 8011290:	e018      	b.n	80112c4 <tcp_receive+0xb38>
 8011292:	bf00      	nop
 8011294:	2000c98e 	.word	0x2000c98e
 8011298:	2000c984 	.word	0x2000c984
 801129c:	2000c964 	.word	0x2000c964
 80112a0:	0801adfc 	.word	0x0801adfc
 80112a4:	0801b1dc 	.word	0x0801b1dc
 80112a8:	0801ae48 	.word	0x0801ae48
 80112ac:	0801b218 	.word	0x0801b218
 80112b0:	2000c994 	.word	0x2000c994
 80112b4:	2000c991 	.word	0x2000c991
 80112b8:	0801b238 	.word	0x0801b238
            } else {
              recv_data = cseg->p;
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	4a70      	ldr	r2, [pc, #448]	; (8011484 <tcp_receive+0xcf8>)
 80112c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	2200      	movs	r2, #0
 80112c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	68db      	ldr	r3, [r3, #12]
 80112ce:	899b      	ldrh	r3, [r3, #12]
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fa fd24 	bl	800bd20 <lwip_htons>
 80112d8:	4603      	mov	r3, r0
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	f003 0301 	and.w	r3, r3, #1
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00d      	beq.n	8011300 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80112e4:	4b68      	ldr	r3, [pc, #416]	; (8011488 <tcp_receive+0xcfc>)
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f043 0320 	orr.w	r3, r3, #32
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	4b66      	ldr	r3, [pc, #408]	; (8011488 <tcp_receive+0xcfc>)
 80112f0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	7d1b      	ldrb	r3, [r3, #20]
 80112f6:	2b04      	cmp	r3, #4
 80112f8:	d102      	bne.n	8011300 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2207      	movs	r2, #7
 80112fe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011308:	68b8      	ldr	r0, [r7, #8]
 801130a:	f7fd fbd2 	bl	800eab2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011312:	2b00      	cmp	r3, #0
 8011314:	d008      	beq.n	8011328 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	685a      	ldr	r2, [r3, #4]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011322:	429a      	cmp	r2, r3
 8011324:	f43f af43 	beq.w	80111ae <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	8b5b      	ldrh	r3, [r3, #26]
 801132c:	f003 0301 	and.w	r3, r3, #1
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00e      	beq.n	8011352 <tcp_receive+0xbc6>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	8b5b      	ldrh	r3, [r3, #26]
 8011338:	f023 0301 	bic.w	r3, r3, #1
 801133c:	b29a      	uxth	r2, r3
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	835a      	strh	r2, [r3, #26]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	8b5b      	ldrh	r3, [r3, #26]
 8011346:	f043 0302 	orr.w	r3, r3, #2
 801134a:	b29a      	uxth	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011350:	e188      	b.n	8011664 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	8b5b      	ldrh	r3, [r3, #26]
 8011356:	f043 0301 	orr.w	r3, r3, #1
 801135a:	b29a      	uxth	r2, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011360:	e180      	b.n	8011664 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011366:	2b00      	cmp	r3, #0
 8011368:	d106      	bne.n	8011378 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801136a:	4848      	ldr	r0, [pc, #288]	; (801148c <tcp_receive+0xd00>)
 801136c:	f7fd fbba 	bl	800eae4 <tcp_seg_copy>
 8011370:	4602      	mov	r2, r0
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	675a      	str	r2, [r3, #116]	; 0x74
 8011376:	e16d      	b.n	8011654 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011378:	2300      	movs	r3, #0
 801137a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011380:	63bb      	str	r3, [r7, #56]	; 0x38
 8011382:	e157      	b.n	8011634 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	685a      	ldr	r2, [r3, #4]
 801138a:	4b41      	ldr	r3, [pc, #260]	; (8011490 <tcp_receive+0xd04>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	429a      	cmp	r2, r3
 8011390:	d11d      	bne.n	80113ce <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011392:	4b3e      	ldr	r3, [pc, #248]	; (801148c <tcp_receive+0xd00>)
 8011394:	891a      	ldrh	r2, [r3, #8]
 8011396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011398:	891b      	ldrh	r3, [r3, #8]
 801139a:	429a      	cmp	r2, r3
 801139c:	f240 814f 	bls.w	801163e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113a0:	483a      	ldr	r0, [pc, #232]	; (801148c <tcp_receive+0xd00>)
 80113a2:	f7fd fb9f 	bl	800eae4 <tcp_seg_copy>
 80113a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	f000 8149 	beq.w	8011642 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80113b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d003      	beq.n	80113be <tcp_receive+0xc32>
                    prev->next = cseg;
 80113b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113b8:	697a      	ldr	r2, [r7, #20]
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	e002      	b.n	80113c4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	697a      	ldr	r2, [r7, #20]
 80113c2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80113c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80113c6:	6978      	ldr	r0, [r7, #20]
 80113c8:	f7ff f8dc 	bl	8010584 <tcp_oos_insert_segment>
                }
                break;
 80113cc:	e139      	b.n	8011642 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80113ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d117      	bne.n	8011404 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80113d4:	4b2e      	ldr	r3, [pc, #184]	; (8011490 <tcp_receive+0xd04>)
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	da57      	bge.n	8011494 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113e4:	4829      	ldr	r0, [pc, #164]	; (801148c <tcp_receive+0xd00>)
 80113e6:	f7fd fb7d 	bl	800eae4 <tcp_seg_copy>
 80113ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	f000 8129 	beq.w	8011646 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	69ba      	ldr	r2, [r7, #24]
 80113f8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80113fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80113fc:	69b8      	ldr	r0, [r7, #24]
 80113fe:	f7ff f8c1 	bl	8010584 <tcp_oos_insert_segment>
                  }
                  break;
 8011402:	e120      	b.n	8011646 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011404:	4b22      	ldr	r3, [pc, #136]	; (8011490 <tcp_receive+0xd04>)
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	3b01      	subs	r3, #1
 8011412:	2b00      	cmp	r3, #0
 8011414:	db3e      	blt.n	8011494 <tcp_receive+0xd08>
 8011416:	4b1e      	ldr	r3, [pc, #120]	; (8011490 <tcp_receive+0xd04>)
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	3301      	adds	r3, #1
 8011424:	2b00      	cmp	r3, #0
 8011426:	dc35      	bgt.n	8011494 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011428:	4818      	ldr	r0, [pc, #96]	; (801148c <tcp_receive+0xd00>)
 801142a:	f7fd fb5b 	bl	800eae4 <tcp_seg_copy>
 801142e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	2b00      	cmp	r3, #0
 8011434:	f000 8109 	beq.w	801164a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011440:	8912      	ldrh	r2, [r2, #8]
 8011442:	441a      	add	r2, r3
 8011444:	4b12      	ldr	r3, [pc, #72]	; (8011490 <tcp_receive+0xd04>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	1ad3      	subs	r3, r2, r3
 801144a:	2b00      	cmp	r3, #0
 801144c:	dd12      	ble.n	8011474 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801144e:	4b10      	ldr	r3, [pc, #64]	; (8011490 <tcp_receive+0xd04>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	b29a      	uxth	r2, r3
 8011454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	b29b      	uxth	r3, r3
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	b29a      	uxth	r2, r3
 8011460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011462:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011466:	685a      	ldr	r2, [r3, #4]
 8011468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146a:	891b      	ldrh	r3, [r3, #8]
 801146c:	4619      	mov	r1, r3
 801146e:	4610      	mov	r0, r2
 8011470:	f7fb ff0c 	bl	800d28c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011476:	69fa      	ldr	r2, [r7, #28]
 8011478:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801147a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801147c:	69f8      	ldr	r0, [r7, #28]
 801147e:	f7ff f881 	bl	8010584 <tcp_oos_insert_segment>
                  }
                  break;
 8011482:	e0e2      	b.n	801164a <tcp_receive+0xebe>
 8011484:	2000c994 	.word	0x2000c994
 8011488:	2000c991 	.word	0x2000c991
 801148c:	2000c964 	.word	0x2000c964
 8011490:	2000c984 	.word	0x2000c984
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011496:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	f040 80c6 	bne.w	801162e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80114a2:	4b80      	ldr	r3, [pc, #512]	; (80116a4 <tcp_receive+0xf18>)
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f340 80bd 	ble.w	801162e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80114b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	899b      	ldrh	r3, [r3, #12]
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fa fc2f 	bl	800bd20 <lwip_htons>
 80114c2:	4603      	mov	r3, r0
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	f003 0301 	and.w	r3, r3, #1
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f040 80bf 	bne.w	801164e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80114d0:	4875      	ldr	r0, [pc, #468]	; (80116a8 <tcp_receive+0xf1c>)
 80114d2:	f7fd fb07 	bl	800eae4 <tcp_seg_copy>
 80114d6:	4602      	mov	r2, r0
 80114d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114da:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80114dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	f000 80b6 	beq.w	8011652 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80114e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e8:	68db      	ldr	r3, [r3, #12]
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114ee:	8912      	ldrh	r2, [r2, #8]
 80114f0:	441a      	add	r2, r3
 80114f2:	4b6c      	ldr	r3, [pc, #432]	; (80116a4 <tcp_receive+0xf18>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	dd12      	ble.n	8011522 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80114fc:	4b69      	ldr	r3, [pc, #420]	; (80116a4 <tcp_receive+0xf18>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	b29a      	uxth	r2, r3
 8011502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	b29b      	uxth	r3, r3
 801150a:	1ad3      	subs	r3, r2, r3
 801150c:	b29a      	uxth	r2, r3
 801150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011510:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011514:	685a      	ldr	r2, [r3, #4]
 8011516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011518:	891b      	ldrh	r3, [r3, #8]
 801151a:	4619      	mov	r1, r3
 801151c:	4610      	mov	r0, r2
 801151e:	f7fb feb5 	bl	800d28c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011522:	4b62      	ldr	r3, [pc, #392]	; (80116ac <tcp_receive+0xf20>)
 8011524:	881b      	ldrh	r3, [r3, #0]
 8011526:	461a      	mov	r2, r3
 8011528:	4b5e      	ldr	r3, [pc, #376]	; (80116a4 <tcp_receive+0xf18>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	441a      	add	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011532:	6879      	ldr	r1, [r7, #4]
 8011534:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011536:	440b      	add	r3, r1
 8011538:	1ad3      	subs	r3, r2, r3
 801153a:	2b00      	cmp	r3, #0
 801153c:	f340 8089 	ble.w	8011652 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	899b      	ldrh	r3, [r3, #12]
 8011548:	b29b      	uxth	r3, r3
 801154a:	4618      	mov	r0, r3
 801154c:	f7fa fbe8 	bl	800bd20 <lwip_htons>
 8011550:	4603      	mov	r3, r0
 8011552:	b2db      	uxtb	r3, r3
 8011554:	f003 0301 	and.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	d022      	beq.n	80115a2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801155c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	899b      	ldrh	r3, [r3, #12]
 8011564:	b29b      	uxth	r3, r3
 8011566:	b21b      	sxth	r3, r3
 8011568:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801156c:	b21c      	sxth	r4, r3
 801156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	899b      	ldrh	r3, [r3, #12]
 8011576:	b29b      	uxth	r3, r3
 8011578:	4618      	mov	r0, r3
 801157a:	f7fa fbd1 	bl	800bd20 <lwip_htons>
 801157e:	4603      	mov	r3, r0
 8011580:	b2db      	uxtb	r3, r3
 8011582:	b29b      	uxth	r3, r3
 8011584:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011588:	b29b      	uxth	r3, r3
 801158a:	4618      	mov	r0, r3
 801158c:	f7fa fbc8 	bl	800bd20 <lwip_htons>
 8011590:	4603      	mov	r3, r0
 8011592:	b21b      	sxth	r3, r3
 8011594:	4323      	orrs	r3, r4
 8011596:	b21a      	sxth	r2, r3
 8011598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	b292      	uxth	r2, r2
 80115a0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115ac:	4413      	add	r3, r2
 80115ae:	b299      	uxth	r1, r3
 80115b0:	4b3c      	ldr	r3, [pc, #240]	; (80116a4 <tcp_receive+0xf18>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	1a8a      	subs	r2, r1, r2
 80115bc:	b292      	uxth	r2, r2
 80115be:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80115c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	685a      	ldr	r2, [r3, #4]
 80115c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	891b      	ldrh	r3, [r3, #8]
 80115cc:	4619      	mov	r1, r3
 80115ce:	4610      	mov	r0, r2
 80115d0:	f7fb fe5c 	bl	800d28c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80115d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	891c      	ldrh	r4, [r3, #8]
 80115da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	899b      	ldrh	r3, [r3, #12]
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fa fb9b 	bl	800bd20 <lwip_htons>
 80115ea:	4603      	mov	r3, r0
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	f003 0303 	and.w	r3, r3, #3
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <tcp_receive+0xe6e>
 80115f6:	2301      	movs	r3, #1
 80115f8:	e000      	b.n	80115fc <tcp_receive+0xe70>
 80115fa:	2300      	movs	r3, #0
 80115fc:	4423      	add	r3, r4
 80115fe:	b29a      	uxth	r2, r3
 8011600:	4b2a      	ldr	r3, [pc, #168]	; (80116ac <tcp_receive+0xf20>)
 8011602:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011604:	4b29      	ldr	r3, [pc, #164]	; (80116ac <tcp_receive+0xf20>)
 8011606:	881b      	ldrh	r3, [r3, #0]
 8011608:	461a      	mov	r2, r3
 801160a:	4b26      	ldr	r3, [pc, #152]	; (80116a4 <tcp_receive+0xf18>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	441a      	add	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011614:	6879      	ldr	r1, [r7, #4]
 8011616:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011618:	440b      	add	r3, r1
 801161a:	429a      	cmp	r2, r3
 801161c:	d019      	beq.n	8011652 <tcp_receive+0xec6>
 801161e:	4b24      	ldr	r3, [pc, #144]	; (80116b0 <tcp_receive+0xf24>)
 8011620:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011624:	4923      	ldr	r1, [pc, #140]	; (80116b4 <tcp_receive+0xf28>)
 8011626:	4824      	ldr	r0, [pc, #144]	; (80116b8 <tcp_receive+0xf2c>)
 8011628:	f007 fc7a 	bl	8018f20 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801162c:	e011      	b.n	8011652 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	63bb      	str	r3, [r7, #56]	; 0x38
 8011634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011636:	2b00      	cmp	r3, #0
 8011638:	f47f aea4 	bne.w	8011384 <tcp_receive+0xbf8>
 801163c:	e00a      	b.n	8011654 <tcp_receive+0xec8>
                break;
 801163e:	bf00      	nop
 8011640:	e008      	b.n	8011654 <tcp_receive+0xec8>
                break;
 8011642:	bf00      	nop
 8011644:	e006      	b.n	8011654 <tcp_receive+0xec8>
                  break;
 8011646:	bf00      	nop
 8011648:	e004      	b.n	8011654 <tcp_receive+0xec8>
                  break;
 801164a:	bf00      	nop
 801164c:	e002      	b.n	8011654 <tcp_receive+0xec8>
                  break;
 801164e:	bf00      	nop
 8011650:	e000      	b.n	8011654 <tcp_receive+0xec8>
                break;
 8011652:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f001 fa33 	bl	8012ac0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801165a:	e003      	b.n	8011664 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f001 fa2f 	bl	8012ac0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011662:	e01a      	b.n	801169a <tcp_receive+0xf0e>
 8011664:	e019      	b.n	801169a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011666:	4b0f      	ldr	r3, [pc, #60]	; (80116a4 <tcp_receive+0xf18>)
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	2b00      	cmp	r3, #0
 8011672:	db0a      	blt.n	801168a <tcp_receive+0xefe>
 8011674:	4b0b      	ldr	r3, [pc, #44]	; (80116a4 <tcp_receive+0xf18>)
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801167c:	6879      	ldr	r1, [r7, #4]
 801167e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011680:	440b      	add	r3, r1
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	3301      	adds	r3, #1
 8011686:	2b00      	cmp	r3, #0
 8011688:	dd07      	ble.n	801169a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	8b5b      	ldrh	r3, [r3, #26]
 801168e:	f043 0302 	orr.w	r3, r3, #2
 8011692:	b29a      	uxth	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011698:	e7ff      	b.n	801169a <tcp_receive+0xf0e>
 801169a:	bf00      	nop
 801169c:	3750      	adds	r7, #80	; 0x50
 801169e:	46bd      	mov	sp, r7
 80116a0:	bdb0      	pop	{r4, r5, r7, pc}
 80116a2:	bf00      	nop
 80116a4:	2000c984 	.word	0x2000c984
 80116a8:	2000c964 	.word	0x2000c964
 80116ac:	2000c98e 	.word	0x2000c98e
 80116b0:	0801adfc 	.word	0x0801adfc
 80116b4:	0801b1a4 	.word	0x0801b1a4
 80116b8:	0801ae48 	.word	0x0801ae48

080116bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80116c2:	4b15      	ldr	r3, [pc, #84]	; (8011718 <tcp_get_next_optbyte+0x5c>)
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	1c5a      	adds	r2, r3, #1
 80116c8:	b291      	uxth	r1, r2
 80116ca:	4a13      	ldr	r2, [pc, #76]	; (8011718 <tcp_get_next_optbyte+0x5c>)
 80116cc:	8011      	strh	r1, [r2, #0]
 80116ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80116d0:	4b12      	ldr	r3, [pc, #72]	; (801171c <tcp_get_next_optbyte+0x60>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d004      	beq.n	80116e2 <tcp_get_next_optbyte+0x26>
 80116d8:	4b11      	ldr	r3, [pc, #68]	; (8011720 <tcp_get_next_optbyte+0x64>)
 80116da:	881b      	ldrh	r3, [r3, #0]
 80116dc:	88fa      	ldrh	r2, [r7, #6]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d208      	bcs.n	80116f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80116e2:	4b10      	ldr	r3, [pc, #64]	; (8011724 <tcp_get_next_optbyte+0x68>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	3314      	adds	r3, #20
 80116e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80116ea:	88fb      	ldrh	r3, [r7, #6]
 80116ec:	683a      	ldr	r2, [r7, #0]
 80116ee:	4413      	add	r3, r2
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	e00b      	b.n	801170c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80116f4:	88fb      	ldrh	r3, [r7, #6]
 80116f6:	b2da      	uxtb	r2, r3
 80116f8:	4b09      	ldr	r3, [pc, #36]	; (8011720 <tcp_get_next_optbyte+0x64>)
 80116fa:	881b      	ldrh	r3, [r3, #0]
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	1ad3      	subs	r3, r2, r3
 8011700:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011702:	4b06      	ldr	r3, [pc, #24]	; (801171c <tcp_get_next_optbyte+0x60>)
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	797b      	ldrb	r3, [r7, #5]
 8011708:	4413      	add	r3, r2
 801170a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801170c:	4618      	mov	r0, r3
 801170e:	370c      	adds	r7, #12
 8011710:	46bd      	mov	sp, r7
 8011712:	bc80      	pop	{r7}
 8011714:	4770      	bx	lr
 8011716:	bf00      	nop
 8011718:	2000c980 	.word	0x2000c980
 801171c:	2000c97c 	.word	0x2000c97c
 8011720:	2000c97a 	.word	0x2000c97a
 8011724:	2000c974 	.word	0x2000c974

08011728 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <tcp_parseopt+0x1c>
 8011736:	4b32      	ldr	r3, [pc, #200]	; (8011800 <tcp_parseopt+0xd8>)
 8011738:	f240 727d 	movw	r2, #1917	; 0x77d
 801173c:	4931      	ldr	r1, [pc, #196]	; (8011804 <tcp_parseopt+0xdc>)
 801173e:	4832      	ldr	r0, [pc, #200]	; (8011808 <tcp_parseopt+0xe0>)
 8011740:	f007 fbee 	bl	8018f20 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011744:	4b31      	ldr	r3, [pc, #196]	; (801180c <tcp_parseopt+0xe4>)
 8011746:	881b      	ldrh	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d055      	beq.n	80117f8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801174c:	4b30      	ldr	r3, [pc, #192]	; (8011810 <tcp_parseopt+0xe8>)
 801174e:	2200      	movs	r2, #0
 8011750:	801a      	strh	r2, [r3, #0]
 8011752:	e045      	b.n	80117e0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011754:	f7ff ffb2 	bl	80116bc <tcp_get_next_optbyte>
 8011758:	4603      	mov	r3, r0
 801175a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801175c:	7bfb      	ldrb	r3, [r7, #15]
 801175e:	2b02      	cmp	r3, #2
 8011760:	d006      	beq.n	8011770 <tcp_parseopt+0x48>
 8011762:	2b02      	cmp	r3, #2
 8011764:	dc2b      	bgt.n	80117be <tcp_parseopt+0x96>
 8011766:	2b00      	cmp	r3, #0
 8011768:	d041      	beq.n	80117ee <tcp_parseopt+0xc6>
 801176a:	2b01      	cmp	r3, #1
 801176c:	d127      	bne.n	80117be <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801176e:	e037      	b.n	80117e0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011770:	f7ff ffa4 	bl	80116bc <tcp_get_next_optbyte>
 8011774:	4603      	mov	r3, r0
 8011776:	2b04      	cmp	r3, #4
 8011778:	d13b      	bne.n	80117f2 <tcp_parseopt+0xca>
 801177a:	4b25      	ldr	r3, [pc, #148]	; (8011810 <tcp_parseopt+0xe8>)
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	3301      	adds	r3, #1
 8011780:	4a22      	ldr	r2, [pc, #136]	; (801180c <tcp_parseopt+0xe4>)
 8011782:	8812      	ldrh	r2, [r2, #0]
 8011784:	4293      	cmp	r3, r2
 8011786:	da34      	bge.n	80117f2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011788:	f7ff ff98 	bl	80116bc <tcp_get_next_optbyte>
 801178c:	4603      	mov	r3, r0
 801178e:	b29b      	uxth	r3, r3
 8011790:	021b      	lsls	r3, r3, #8
 8011792:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011794:	f7ff ff92 	bl	80116bc <tcp_get_next_optbyte>
 8011798:	4603      	mov	r3, r0
 801179a:	b29a      	uxth	r2, r3
 801179c:	89bb      	ldrh	r3, [r7, #12]
 801179e:	4313      	orrs	r3, r2
 80117a0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80117a2:	89bb      	ldrh	r3, [r7, #12]
 80117a4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80117a8:	d804      	bhi.n	80117b4 <tcp_parseopt+0x8c>
 80117aa:	89bb      	ldrh	r3, [r7, #12]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <tcp_parseopt+0x8c>
 80117b0:	89ba      	ldrh	r2, [r7, #12]
 80117b2:	e001      	b.n	80117b8 <tcp_parseopt+0x90>
 80117b4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80117bc:	e010      	b.n	80117e0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80117be:	f7ff ff7d 	bl	80116bc <tcp_get_next_optbyte>
 80117c2:	4603      	mov	r3, r0
 80117c4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80117c6:	7afb      	ldrb	r3, [r7, #11]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d914      	bls.n	80117f6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80117cc:	7afb      	ldrb	r3, [r7, #11]
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	4b0f      	ldr	r3, [pc, #60]	; (8011810 <tcp_parseopt+0xe8>)
 80117d2:	881b      	ldrh	r3, [r3, #0]
 80117d4:	4413      	add	r3, r2
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	3b02      	subs	r3, #2
 80117da:	b29a      	uxth	r2, r3
 80117dc:	4b0c      	ldr	r3, [pc, #48]	; (8011810 <tcp_parseopt+0xe8>)
 80117de:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117e0:	4b0b      	ldr	r3, [pc, #44]	; (8011810 <tcp_parseopt+0xe8>)
 80117e2:	881a      	ldrh	r2, [r3, #0]
 80117e4:	4b09      	ldr	r3, [pc, #36]	; (801180c <tcp_parseopt+0xe4>)
 80117e6:	881b      	ldrh	r3, [r3, #0]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d3b3      	bcc.n	8011754 <tcp_parseopt+0x2c>
 80117ec:	e004      	b.n	80117f8 <tcp_parseopt+0xd0>
          return;
 80117ee:	bf00      	nop
 80117f0:	e002      	b.n	80117f8 <tcp_parseopt+0xd0>
            return;
 80117f2:	bf00      	nop
 80117f4:	e000      	b.n	80117f8 <tcp_parseopt+0xd0>
            return;
 80117f6:	bf00      	nop
      }
    }
  }
}
 80117f8:	3710      	adds	r7, #16
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	0801adfc 	.word	0x0801adfc
 8011804:	0801b260 	.word	0x0801b260
 8011808:	0801ae48 	.word	0x0801ae48
 801180c:	2000c978 	.word	0x2000c978
 8011810:	2000c980 	.word	0x2000c980

08011814 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011814:	b480      	push	{r7}
 8011816:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011818:	4b05      	ldr	r3, [pc, #20]	; (8011830 <tcp_trigger_input_pcb_close+0x1c>)
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	f043 0310 	orr.w	r3, r3, #16
 8011820:	b2da      	uxtb	r2, r3
 8011822:	4b03      	ldr	r3, [pc, #12]	; (8011830 <tcp_trigger_input_pcb_close+0x1c>)
 8011824:	701a      	strb	r2, [r3, #0]
}
 8011826:	bf00      	nop
 8011828:	46bd      	mov	sp, r7
 801182a:	bc80      	pop	{r7}
 801182c:	4770      	bx	lr
 801182e:	bf00      	nop
 8011830:	2000c991 	.word	0x2000c991

08011834 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	af00      	add	r7, sp, #0
 801183a:	60f8      	str	r0, [r7, #12]
 801183c:	60b9      	str	r1, [r7, #8]
 801183e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00a      	beq.n	801185c <tcp_route+0x28>
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	7a1b      	ldrb	r3, [r3, #8]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d006      	beq.n	801185c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	7a1b      	ldrb	r3, [r3, #8]
 8011852:	4618      	mov	r0, r3
 8011854:	f7fb fb14 	bl	800ce80 <netif_get_by_index>
 8011858:	4603      	mov	r3, r0
 801185a:	e003      	b.n	8011864 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f005 f82d 	bl	80168bc <ip4_route>
 8011862:	4603      	mov	r3, r0
  }
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801186c:	b590      	push	{r4, r7, lr}
 801186e:	b087      	sub	sp, #28
 8011870:	af00      	add	r7, sp, #0
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	603b      	str	r3, [r7, #0]
 8011878:	4613      	mov	r3, r2
 801187a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d105      	bne.n	801188e <tcp_create_segment+0x22>
 8011882:	4b44      	ldr	r3, [pc, #272]	; (8011994 <tcp_create_segment+0x128>)
 8011884:	22a3      	movs	r2, #163	; 0xa3
 8011886:	4944      	ldr	r1, [pc, #272]	; (8011998 <tcp_create_segment+0x12c>)
 8011888:	4844      	ldr	r0, [pc, #272]	; (801199c <tcp_create_segment+0x130>)
 801188a:	f007 fb49 	bl	8018f20 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d105      	bne.n	80118a0 <tcp_create_segment+0x34>
 8011894:	4b3f      	ldr	r3, [pc, #252]	; (8011994 <tcp_create_segment+0x128>)
 8011896:	22a4      	movs	r2, #164	; 0xa4
 8011898:	4941      	ldr	r1, [pc, #260]	; (80119a0 <tcp_create_segment+0x134>)
 801189a:	4840      	ldr	r0, [pc, #256]	; (801199c <tcp_create_segment+0x130>)
 801189c:	f007 fb40 	bl	8018f20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80118a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	f003 0304 	and.w	r3, r3, #4
 80118ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80118ae:	2003      	movs	r0, #3
 80118b0:	f7fa ffbe 	bl	800c830 <memp_malloc>
 80118b4:	6138      	str	r0, [r7, #16]
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d104      	bne.n	80118c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80118bc:	68b8      	ldr	r0, [r7, #8]
 80118be:	f7fb fe6b 	bl	800d598 <pbuf_free>
    return NULL;
 80118c2:	2300      	movs	r3, #0
 80118c4:	e061      	b.n	801198a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80118cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	2200      	movs	r2, #0
 80118d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	891a      	ldrh	r2, [r3, #8]
 80118de:	7dfb      	ldrb	r3, [r7, #23]
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d205      	bcs.n	80118f2 <tcp_create_segment+0x86>
 80118e6:	4b2b      	ldr	r3, [pc, #172]	; (8011994 <tcp_create_segment+0x128>)
 80118e8:	22b0      	movs	r2, #176	; 0xb0
 80118ea:	492e      	ldr	r1, [pc, #184]	; (80119a4 <tcp_create_segment+0x138>)
 80118ec:	482b      	ldr	r0, [pc, #172]	; (801199c <tcp_create_segment+0x130>)
 80118ee:	f007 fb17 	bl	8018f20 <iprintf>
  seg->len = p->tot_len - optlen;
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	891a      	ldrh	r2, [r3, #8]
 80118f6:	7dfb      	ldrb	r3, [r7, #23]
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	1ad3      	subs	r3, r2, r3
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011902:	2114      	movs	r1, #20
 8011904:	68b8      	ldr	r0, [r7, #8]
 8011906:	f7fb fdb1 	bl	800d46c <pbuf_add_header>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d004      	beq.n	801191a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011910:	6938      	ldr	r0, [r7, #16]
 8011912:	f7fd f8ce 	bl	800eab2 <tcp_seg_free>
    return NULL;
 8011916:	2300      	movs	r3, #0
 8011918:	e037      	b.n	801198a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	685a      	ldr	r2, [r3, #4]
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	8ada      	ldrh	r2, [r3, #22]
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	68dc      	ldr	r4, [r3, #12]
 801192c:	4610      	mov	r0, r2
 801192e:	f7fa f9f7 	bl	800bd20 <lwip_htons>
 8011932:	4603      	mov	r3, r0
 8011934:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	8b1a      	ldrh	r2, [r3, #24]
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	68dc      	ldr	r4, [r3, #12]
 801193e:	4610      	mov	r0, r2
 8011940:	f7fa f9ee 	bl	800bd20 <lwip_htons>
 8011944:	4603      	mov	r3, r0
 8011946:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	68dc      	ldr	r4, [r3, #12]
 801194c:	6838      	ldr	r0, [r7, #0]
 801194e:	f7fa f9fb 	bl	800bd48 <lwip_htonl>
 8011952:	4603      	mov	r3, r0
 8011954:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011956:	7dfb      	ldrb	r3, [r7, #23]
 8011958:	089b      	lsrs	r3, r3, #2
 801195a:	b2db      	uxtb	r3, r3
 801195c:	b29b      	uxth	r3, r3
 801195e:	3305      	adds	r3, #5
 8011960:	b29b      	uxth	r3, r3
 8011962:	031b      	lsls	r3, r3, #12
 8011964:	b29a      	uxth	r2, r3
 8011966:	79fb      	ldrb	r3, [r7, #7]
 8011968:	b29b      	uxth	r3, r3
 801196a:	4313      	orrs	r3, r2
 801196c:	b29a      	uxth	r2, r3
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	68dc      	ldr	r4, [r3, #12]
 8011972:	4610      	mov	r0, r2
 8011974:	f7fa f9d4 	bl	800bd20 <lwip_htons>
 8011978:	4603      	mov	r3, r0
 801197a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	68db      	ldr	r3, [r3, #12]
 8011980:	2200      	movs	r2, #0
 8011982:	749a      	strb	r2, [r3, #18]
 8011984:	2200      	movs	r2, #0
 8011986:	74da      	strb	r2, [r3, #19]
  return seg;
 8011988:	693b      	ldr	r3, [r7, #16]
}
 801198a:	4618      	mov	r0, r3
 801198c:	371c      	adds	r7, #28
 801198e:	46bd      	mov	sp, r7
 8011990:	bd90      	pop	{r4, r7, pc}
 8011992:	bf00      	nop
 8011994:	0801b27c 	.word	0x0801b27c
 8011998:	0801b2b0 	.word	0x0801b2b0
 801199c:	0801b2d0 	.word	0x0801b2d0
 80119a0:	0801b2f8 	.word	0x0801b2f8
 80119a4:	0801b31c 	.word	0x0801b31c

080119a8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80119a8:	b590      	push	{r4, r7, lr}
 80119aa:	b08b      	sub	sp, #44	; 0x2c
 80119ac:	af02      	add	r7, sp, #8
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	460b      	mov	r3, r1
 80119b2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80119b4:	2300      	movs	r3, #0
 80119b6:	61fb      	str	r3, [r7, #28]
 80119b8:	2300      	movs	r3, #0
 80119ba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80119bc:	2300      	movs	r3, #0
 80119be:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d106      	bne.n	80119d4 <tcp_split_unsent_seg+0x2c>
 80119c6:	4b95      	ldr	r3, [pc, #596]	; (8011c1c <tcp_split_unsent_seg+0x274>)
 80119c8:	f240 324b 	movw	r2, #843	; 0x34b
 80119cc:	4994      	ldr	r1, [pc, #592]	; (8011c20 <tcp_split_unsent_seg+0x278>)
 80119ce:	4895      	ldr	r0, [pc, #596]	; (8011c24 <tcp_split_unsent_seg+0x27c>)
 80119d0:	f007 faa6 	bl	8018f20 <iprintf>

  useg = pcb->unsent;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119d8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d102      	bne.n	80119e6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80119e0:	f04f 33ff 	mov.w	r3, #4294967295
 80119e4:	e116      	b.n	8011c14 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80119e6:	887b      	ldrh	r3, [r7, #2]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d109      	bne.n	8011a00 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80119ec:	4b8b      	ldr	r3, [pc, #556]	; (8011c1c <tcp_split_unsent_seg+0x274>)
 80119ee:	f240 3253 	movw	r2, #851	; 0x353
 80119f2:	498d      	ldr	r1, [pc, #564]	; (8011c28 <tcp_split_unsent_seg+0x280>)
 80119f4:	488b      	ldr	r0, [pc, #556]	; (8011c24 <tcp_split_unsent_seg+0x27c>)
 80119f6:	f007 fa93 	bl	8018f20 <iprintf>
    return ERR_VAL;
 80119fa:	f06f 0305 	mvn.w	r3, #5
 80119fe:	e109      	b.n	8011c14 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	891b      	ldrh	r3, [r3, #8]
 8011a04:	887a      	ldrh	r2, [r7, #2]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d301      	bcc.n	8011a0e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e102      	b.n	8011c14 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a12:	887a      	ldrh	r2, [r7, #2]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d906      	bls.n	8011a26 <tcp_split_unsent_seg+0x7e>
 8011a18:	4b80      	ldr	r3, [pc, #512]	; (8011c1c <tcp_split_unsent_seg+0x274>)
 8011a1a:	f240 325b 	movw	r2, #859	; 0x35b
 8011a1e:	4983      	ldr	r1, [pc, #524]	; (8011c2c <tcp_split_unsent_seg+0x284>)
 8011a20:	4880      	ldr	r0, [pc, #512]	; (8011c24 <tcp_split_unsent_seg+0x27c>)
 8011a22:	f007 fa7d 	bl	8018f20 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	891b      	ldrh	r3, [r3, #8]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d106      	bne.n	8011a3c <tcp_split_unsent_seg+0x94>
 8011a2e:	4b7b      	ldr	r3, [pc, #492]	; (8011c1c <tcp_split_unsent_seg+0x274>)
 8011a30:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011a34:	497e      	ldr	r1, [pc, #504]	; (8011c30 <tcp_split_unsent_seg+0x288>)
 8011a36:	487b      	ldr	r0, [pc, #492]	; (8011c24 <tcp_split_unsent_seg+0x27c>)
 8011a38:	f007 fa72 	bl	8018f20 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	7a9b      	ldrb	r3, [r3, #10]
 8011a40:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011a42:	7bfb      	ldrb	r3, [r7, #15]
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	f003 0304 	and.w	r3, r3, #4
 8011a4c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	891a      	ldrh	r2, [r3, #8]
 8011a52:	887b      	ldrh	r3, [r7, #2]
 8011a54:	1ad3      	subs	r3, r2, r3
 8011a56:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011a58:	7bbb      	ldrb	r3, [r7, #14]
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	89bb      	ldrh	r3, [r7, #12]
 8011a5e:	4413      	add	r3, r2
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a66:	4619      	mov	r1, r3
 8011a68:	2036      	movs	r0, #54	; 0x36
 8011a6a:	f7fb fab1 	bl	800cfd0 <pbuf_alloc>
 8011a6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f000 80b7 	beq.w	8011be6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	891a      	ldrh	r2, [r3, #8]
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	891b      	ldrh	r3, [r3, #8]
 8011a82:	1ad3      	subs	r3, r2, r3
 8011a84:	b29a      	uxth	r2, r3
 8011a86:	887b      	ldrh	r3, [r7, #2]
 8011a88:	4413      	add	r3, r2
 8011a8a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	6858      	ldr	r0, [r3, #4]
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	685a      	ldr	r2, [r3, #4]
 8011a94:	7bbb      	ldrb	r3, [r7, #14]
 8011a96:	18d1      	adds	r1, r2, r3
 8011a98:	897b      	ldrh	r3, [r7, #10]
 8011a9a:	89ba      	ldrh	r2, [r7, #12]
 8011a9c:	f7fb ff80 	bl	800d9a0 <pbuf_copy_partial>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	89bb      	ldrh	r3, [r7, #12]
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	f040 809f 	bne.w	8011bea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	899b      	ldrh	r3, [r3, #12]
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fa f933 	bl	800bd20 <lwip_htons>
 8011aba:	4603      	mov	r3, r0
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ac2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011ac8:	7efb      	ldrb	r3, [r7, #27]
 8011aca:	f003 0308 	and.w	r3, r3, #8
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d007      	beq.n	8011ae2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011ad2:	7efb      	ldrb	r3, [r7, #27]
 8011ad4:	f023 0308 	bic.w	r3, r3, #8
 8011ad8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011ada:	7ebb      	ldrb	r3, [r7, #26]
 8011adc:	f043 0308 	orr.w	r3, r3, #8
 8011ae0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011ae2:	7efb      	ldrb	r3, [r7, #27]
 8011ae4:	f003 0301 	and.w	r3, r3, #1
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d007      	beq.n	8011afc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011aec:	7efb      	ldrb	r3, [r7, #27]
 8011aee:	f023 0301 	bic.w	r3, r3, #1
 8011af2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011af4:	7ebb      	ldrb	r3, [r7, #26]
 8011af6:	f043 0301 	orr.w	r3, r3, #1
 8011afa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fa f920 	bl	800bd48 <lwip_htonl>
 8011b08:	4602      	mov	r2, r0
 8011b0a:	887b      	ldrh	r3, [r7, #2]
 8011b0c:	18d1      	adds	r1, r2, r3
 8011b0e:	7eba      	ldrb	r2, [r7, #26]
 8011b10:	7bfb      	ldrb	r3, [r7, #15]
 8011b12:	9300      	str	r3, [sp, #0]
 8011b14:	460b      	mov	r3, r1
 8011b16:	6939      	ldr	r1, [r7, #16]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f7ff fea7 	bl	801186c <tcp_create_segment>
 8011b1e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011b20:	69fb      	ldr	r3, [r7, #28]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d063      	beq.n	8011bee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fb fdc2 	bl	800d6b4 <pbuf_clen>
 8011b30:	4603      	mov	r3, r0
 8011b32:	461a      	mov	r2, r3
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b3a:	1a9b      	subs	r3, r3, r2
 8011b3c:	b29a      	uxth	r2, r3
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	6858      	ldr	r0, [r3, #4]
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	891a      	ldrh	r2, [r3, #8]
 8011b4e:	89bb      	ldrh	r3, [r7, #12]
 8011b50:	1ad3      	subs	r3, r2, r3
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	4619      	mov	r1, r3
 8011b56:	f7fb fb99 	bl	800d28c <pbuf_realloc>
  useg->len -= remainder;
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	891a      	ldrh	r2, [r3, #8]
 8011b5e:	89bb      	ldrh	r3, [r7, #12]
 8011b60:	1ad3      	subs	r3, r2, r3
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	68db      	ldr	r3, [r3, #12]
 8011b6c:	899b      	ldrh	r3, [r3, #12]
 8011b6e:	b29c      	uxth	r4, r3
 8011b70:	7efb      	ldrb	r3, [r7, #27]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fa f8d3 	bl	800bd20 <lwip_htons>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	4322      	orrs	r2, r4
 8011b84:	b292      	uxth	r2, r2
 8011b86:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7fb fd91 	bl	800d6b4 <pbuf_clen>
 8011b92:	4603      	mov	r3, r0
 8011b94:	461a      	mov	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b9c:	4413      	add	r3, r2
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fb fd82 	bl	800d6b4 <pbuf_clen>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bba:	4413      	add	r3, r2
 8011bbc:	b29a      	uxth	r2, r3
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	69fa      	ldr	r2, [r7, #28]
 8011bd0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d103      	bne.n	8011be2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011be2:	2300      	movs	r3, #0
 8011be4:	e016      	b.n	8011c14 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011be6:	bf00      	nop
 8011be8:	e002      	b.n	8011bf0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011bea:	bf00      	nop
 8011bec:	e000      	b.n	8011bf0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011bee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d006      	beq.n	8011c04 <tcp_split_unsent_seg+0x25c>
 8011bf6:	4b09      	ldr	r3, [pc, #36]	; (8011c1c <tcp_split_unsent_seg+0x274>)
 8011bf8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011bfc:	490d      	ldr	r1, [pc, #52]	; (8011c34 <tcp_split_unsent_seg+0x28c>)
 8011bfe:	4809      	ldr	r0, [pc, #36]	; (8011c24 <tcp_split_unsent_seg+0x27c>)
 8011c00:	f007 f98e 	bl	8018f20 <iprintf>
  if (p != NULL) {
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d002      	beq.n	8011c10 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011c0a:	6938      	ldr	r0, [r7, #16]
 8011c0c:	f7fb fcc4 	bl	800d598 <pbuf_free>
  }

  return ERR_MEM;
 8011c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3724      	adds	r7, #36	; 0x24
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd90      	pop	{r4, r7, pc}
 8011c1c:	0801b27c 	.word	0x0801b27c
 8011c20:	0801b610 	.word	0x0801b610
 8011c24:	0801b2d0 	.word	0x0801b2d0
 8011c28:	0801b634 	.word	0x0801b634
 8011c2c:	0801b658 	.word	0x0801b658
 8011c30:	0801b668 	.word	0x0801b668
 8011c34:	0801b678 	.word	0x0801b678

08011c38 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011c38:	b590      	push	{r4, r7, lr}
 8011c3a:	b085      	sub	sp, #20
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d106      	bne.n	8011c54 <tcp_send_fin+0x1c>
 8011c46:	4b21      	ldr	r3, [pc, #132]	; (8011ccc <tcp_send_fin+0x94>)
 8011c48:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011c4c:	4920      	ldr	r1, [pc, #128]	; (8011cd0 <tcp_send_fin+0x98>)
 8011c4e:	4821      	ldr	r0, [pc, #132]	; (8011cd4 <tcp_send_fin+0x9c>)
 8011c50:	f007 f966 	bl	8018f20 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d02e      	beq.n	8011cba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c60:	60fb      	str	r3, [r7, #12]
 8011c62:	e002      	b.n	8011c6a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d1f8      	bne.n	8011c64 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	899b      	ldrh	r3, [r3, #12]
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fa f850 	bl	800bd20 <lwip_htons>
 8011c80:	4603      	mov	r3, r0
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	f003 0307 	and.w	r3, r3, #7
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d116      	bne.n	8011cba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	899b      	ldrh	r3, [r3, #12]
 8011c92:	b29c      	uxth	r4, r3
 8011c94:	2001      	movs	r0, #1
 8011c96:	f7fa f843 	bl	800bd20 <lwip_htons>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	68db      	ldr	r3, [r3, #12]
 8011ca2:	4322      	orrs	r2, r4
 8011ca4:	b292      	uxth	r2, r2
 8011ca6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	8b5b      	ldrh	r3, [r3, #26]
 8011cac:	f043 0320 	orr.w	r3, r3, #32
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	e004      	b.n	8011cc4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011cba:	2101      	movs	r1, #1
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 f80b 	bl	8011cd8 <tcp_enqueue_flags>
 8011cc2:	4603      	mov	r3, r0
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3714      	adds	r7, #20
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd90      	pop	{r4, r7, pc}
 8011ccc:	0801b27c 	.word	0x0801b27c
 8011cd0:	0801b684 	.word	0x0801b684
 8011cd4:	0801b2d0 	.word	0x0801b2d0

08011cd8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b08a      	sub	sp, #40	; 0x28
 8011cdc:	af02      	add	r7, sp, #8
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011cec:	78fb      	ldrb	r3, [r7, #3]
 8011cee:	f003 0303 	and.w	r3, r3, #3
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d106      	bne.n	8011d04 <tcp_enqueue_flags+0x2c>
 8011cf6:	4b67      	ldr	r3, [pc, #412]	; (8011e94 <tcp_enqueue_flags+0x1bc>)
 8011cf8:	f240 4211 	movw	r2, #1041	; 0x411
 8011cfc:	4966      	ldr	r1, [pc, #408]	; (8011e98 <tcp_enqueue_flags+0x1c0>)
 8011cfe:	4867      	ldr	r0, [pc, #412]	; (8011e9c <tcp_enqueue_flags+0x1c4>)
 8011d00:	f007 f90e 	bl	8018f20 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d106      	bne.n	8011d18 <tcp_enqueue_flags+0x40>
 8011d0a:	4b62      	ldr	r3, [pc, #392]	; (8011e94 <tcp_enqueue_flags+0x1bc>)
 8011d0c:	f240 4213 	movw	r2, #1043	; 0x413
 8011d10:	4963      	ldr	r1, [pc, #396]	; (8011ea0 <tcp_enqueue_flags+0x1c8>)
 8011d12:	4862      	ldr	r0, [pc, #392]	; (8011e9c <tcp_enqueue_flags+0x1c4>)
 8011d14:	f007 f904 	bl	8018f20 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011d18:	78fb      	ldrb	r3, [r7, #3]
 8011d1a:	f003 0302 	and.w	r3, r3, #2
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d001      	beq.n	8011d26 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011d22:	2301      	movs	r3, #1
 8011d24:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d26:	7ffb      	ldrb	r3, [r7, #31]
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	f003 0304 	and.w	r3, r3, #4
 8011d30:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d32:	7dfb      	ldrb	r3, [r7, #23]
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	2036      	movs	r0, #54	; 0x36
 8011d3e:	f7fb f947 	bl	800cfd0 <pbuf_alloc>
 8011d42:	6138      	str	r0, [r7, #16]
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d109      	bne.n	8011d5e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	8b5b      	ldrh	r3, [r3, #26]
 8011d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d58:	f04f 33ff 	mov.w	r3, #4294967295
 8011d5c:	e095      	b.n	8011e8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	895a      	ldrh	r2, [r3, #10]
 8011d62:	7dfb      	ldrb	r3, [r7, #23]
 8011d64:	b29b      	uxth	r3, r3
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d206      	bcs.n	8011d78 <tcp_enqueue_flags+0xa0>
 8011d6a:	4b4a      	ldr	r3, [pc, #296]	; (8011e94 <tcp_enqueue_flags+0x1bc>)
 8011d6c:	f240 4239 	movw	r2, #1081	; 0x439
 8011d70:	494c      	ldr	r1, [pc, #304]	; (8011ea4 <tcp_enqueue_flags+0x1cc>)
 8011d72:	484a      	ldr	r0, [pc, #296]	; (8011e9c <tcp_enqueue_flags+0x1c4>)
 8011d74:	f007 f8d4 	bl	8018f20 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011d7c:	78fa      	ldrb	r2, [r7, #3]
 8011d7e:	7ffb      	ldrb	r3, [r7, #31]
 8011d80:	9300      	str	r3, [sp, #0]
 8011d82:	460b      	mov	r3, r1
 8011d84:	6939      	ldr	r1, [r7, #16]
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7ff fd70 	bl	801186c <tcp_create_segment>
 8011d8c:	60f8      	str	r0, [r7, #12]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d109      	bne.n	8011da8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	8b5b      	ldrh	r3, [r3, #26]
 8011d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011da2:	f04f 33ff 	mov.w	r3, #4294967295
 8011da6:	e070      	b.n	8011e8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	f003 0303 	and.w	r3, r3, #3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d006      	beq.n	8011dc2 <tcp_enqueue_flags+0xea>
 8011db4:	4b37      	ldr	r3, [pc, #220]	; (8011e94 <tcp_enqueue_flags+0x1bc>)
 8011db6:	f240 4242 	movw	r2, #1090	; 0x442
 8011dba:	493b      	ldr	r1, [pc, #236]	; (8011ea8 <tcp_enqueue_flags+0x1d0>)
 8011dbc:	4837      	ldr	r0, [pc, #220]	; (8011e9c <tcp_enqueue_flags+0x1c4>)
 8011dbe:	f007 f8af 	bl	8018f20 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	891b      	ldrh	r3, [r3, #8]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d006      	beq.n	8011dd8 <tcp_enqueue_flags+0x100>
 8011dca:	4b32      	ldr	r3, [pc, #200]	; (8011e94 <tcp_enqueue_flags+0x1bc>)
 8011dcc:	f240 4243 	movw	r2, #1091	; 0x443
 8011dd0:	4936      	ldr	r1, [pc, #216]	; (8011eac <tcp_enqueue_flags+0x1d4>)
 8011dd2:	4832      	ldr	r0, [pc, #200]	; (8011e9c <tcp_enqueue_flags+0x1c4>)
 8011dd4:	f007 f8a4 	bl	8018f20 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d103      	bne.n	8011de8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	68fa      	ldr	r2, [r7, #12]
 8011de4:	66da      	str	r2, [r3, #108]	; 0x6c
 8011de6:	e00d      	b.n	8011e04 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dec:	61bb      	str	r3, [r7, #24]
 8011dee:	e002      	b.n	8011df6 <tcp_enqueue_flags+0x11e>
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	61bb      	str	r3, [r7, #24]
 8011df6:	69bb      	ldr	r3, [r7, #24]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1f8      	bne.n	8011df0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2200      	movs	r2, #0
 8011e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011e0c:	78fb      	ldrb	r3, [r7, #3]
 8011e0e:	f003 0302 	and.w	r3, r3, #2
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d104      	bne.n	8011e20 <tcp_enqueue_flags+0x148>
 8011e16:	78fb      	ldrb	r3, [r7, #3]
 8011e18:	f003 0301 	and.w	r3, r3, #1
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d004      	beq.n	8011e2a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e24:	1c5a      	adds	r2, r3, #1
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011e2a:	78fb      	ldrb	r3, [r7, #3]
 8011e2c:	f003 0301 	and.w	r3, r3, #1
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d006      	beq.n	8011e42 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	8b5b      	ldrh	r3, [r3, #26]
 8011e38:	f043 0320 	orr.w	r3, r3, #32
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fb fc34 	bl	800d6b4 <pbuf_clen>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e56:	4413      	add	r3, r2
 8011e58:	b29a      	uxth	r2, r3
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00e      	beq.n	8011e88 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d10a      	bne.n	8011e88 <tcp_enqueue_flags+0x1b0>
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d106      	bne.n	8011e88 <tcp_enqueue_flags+0x1b0>
 8011e7a:	4b06      	ldr	r3, [pc, #24]	; (8011e94 <tcp_enqueue_flags+0x1bc>)
 8011e7c:	f240 4265 	movw	r2, #1125	; 0x465
 8011e80:	490b      	ldr	r1, [pc, #44]	; (8011eb0 <tcp_enqueue_flags+0x1d8>)
 8011e82:	4806      	ldr	r0, [pc, #24]	; (8011e9c <tcp_enqueue_flags+0x1c4>)
 8011e84:	f007 f84c 	bl	8018f20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011e88:	2300      	movs	r3, #0
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3720      	adds	r7, #32
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	0801b27c 	.word	0x0801b27c
 8011e98:	0801b6a0 	.word	0x0801b6a0
 8011e9c:	0801b2d0 	.word	0x0801b2d0
 8011ea0:	0801b6f8 	.word	0x0801b6f8
 8011ea4:	0801b718 	.word	0x0801b718
 8011ea8:	0801b754 	.word	0x0801b754
 8011eac:	0801b76c 	.word	0x0801b76c
 8011eb0:	0801b798 	.word	0x0801b798

08011eb4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011eb4:	b5b0      	push	{r4, r5, r7, lr}
 8011eb6:	b08a      	sub	sp, #40	; 0x28
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d106      	bne.n	8011ed0 <tcp_output+0x1c>
 8011ec2:	4b8a      	ldr	r3, [pc, #552]	; (80120ec <tcp_output+0x238>)
 8011ec4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011ec8:	4989      	ldr	r1, [pc, #548]	; (80120f0 <tcp_output+0x23c>)
 8011eca:	488a      	ldr	r0, [pc, #552]	; (80120f4 <tcp_output+0x240>)
 8011ecc:	f007 f828 	bl	8018f20 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	7d1b      	ldrb	r3, [r3, #20]
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d106      	bne.n	8011ee6 <tcp_output+0x32>
 8011ed8:	4b84      	ldr	r3, [pc, #528]	; (80120ec <tcp_output+0x238>)
 8011eda:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011ede:	4986      	ldr	r1, [pc, #536]	; (80120f8 <tcp_output+0x244>)
 8011ee0:	4884      	ldr	r0, [pc, #528]	; (80120f4 <tcp_output+0x240>)
 8011ee2:	f007 f81d 	bl	8018f20 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011ee6:	4b85      	ldr	r3, [pc, #532]	; (80120fc <tcp_output+0x248>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d101      	bne.n	8011ef4 <tcp_output+0x40>
    return ERR_OK;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	e1ce      	b.n	8012292 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f00:	4293      	cmp	r3, r2
 8011f02:	bf28      	it	cs
 8011f04:	4613      	movcs	r3, r2
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d10b      	bne.n	8011f2e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	8b5b      	ldrh	r3, [r3, #26]
 8011f1a:	f003 0302 	and.w	r3, r3, #2
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f000 81aa 	beq.w	8012278 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f000 fdcb 	bl	8012ac0 <tcp_send_empty_ack>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	e1b1      	b.n	8012292 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011f2e:	6879      	ldr	r1, [r7, #4]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	3304      	adds	r3, #4
 8011f34:	461a      	mov	r2, r3
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f7ff fc7c 	bl	8011834 <tcp_route>
 8011f3c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d102      	bne.n	8011f4a <tcp_output+0x96>
    return ERR_RTE;
 8011f44:	f06f 0303 	mvn.w	r3, #3
 8011f48:	e1a3      	b.n	8012292 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d003      	beq.n	8011f58 <tcp_output+0xa4>
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d111      	bne.n	8011f7c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d002      	beq.n	8011f64 <tcp_output+0xb0>
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	3304      	adds	r3, #4
 8011f62:	e000      	b.n	8011f66 <tcp_output+0xb2>
 8011f64:	2300      	movs	r3, #0
 8011f66:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d102      	bne.n	8011f74 <tcp_output+0xc0>
      return ERR_RTE;
 8011f6e:	f06f 0303 	mvn.w	r3, #3
 8011f72:	e18e      	b.n	8012292 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f9 fee0 	bl	800bd48 <lwip_htonl>
 8011f88:	4602      	mov	r2, r0
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f8e:	1ad3      	subs	r3, r2, r3
 8011f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f92:	8912      	ldrh	r2, [r2, #8]
 8011f94:	4413      	add	r3, r2
 8011f96:	69ba      	ldr	r2, [r7, #24]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d227      	bcs.n	8011fec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d114      	bne.n	8011fd4 <tcp_output+0x120>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d110      	bne.n	8011fd4 <tcp_output+0x120>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d10b      	bne.n	8011fd4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	8b5b      	ldrh	r3, [r3, #26]
 8011fd8:	f003 0302 	and.w	r3, r3, #2
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	f000 814d 	beq.w	801227c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f000 fd6c 	bl	8012ac0 <tcp_send_empty_ack>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	e152      	b.n	8012292 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011ffa:	6a3b      	ldr	r3, [r7, #32]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	f000 811c 	beq.w	801223a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012002:	e002      	b.n	801200a <tcp_output+0x156>
 8012004:	6a3b      	ldr	r3, [r7, #32]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	623b      	str	r3, [r7, #32]
 801200a:	6a3b      	ldr	r3, [r7, #32]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d1f8      	bne.n	8012004 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012012:	e112      	b.n	801223a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012016:	68db      	ldr	r3, [r3, #12]
 8012018:	899b      	ldrh	r3, [r3, #12]
 801201a:	b29b      	uxth	r3, r3
 801201c:	4618      	mov	r0, r3
 801201e:	f7f9 fe7f 	bl	800bd20 <lwip_htons>
 8012022:	4603      	mov	r3, r0
 8012024:	b2db      	uxtb	r3, r3
 8012026:	f003 0304 	and.w	r3, r3, #4
 801202a:	2b00      	cmp	r3, #0
 801202c:	d006      	beq.n	801203c <tcp_output+0x188>
 801202e:	4b2f      	ldr	r3, [pc, #188]	; (80120ec <tcp_output+0x238>)
 8012030:	f240 5236 	movw	r2, #1334	; 0x536
 8012034:	4932      	ldr	r1, [pc, #200]	; (8012100 <tcp_output+0x24c>)
 8012036:	482f      	ldr	r0, [pc, #188]	; (80120f4 <tcp_output+0x240>)
 8012038:	f006 ff72 	bl	8018f20 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012040:	2b00      	cmp	r3, #0
 8012042:	d01f      	beq.n	8012084 <tcp_output+0x1d0>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	8b5b      	ldrh	r3, [r3, #26]
 8012048:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801204c:	2b00      	cmp	r3, #0
 801204e:	d119      	bne.n	8012084 <tcp_output+0x1d0>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012054:	2b00      	cmp	r3, #0
 8012056:	d00b      	beq.n	8012070 <tcp_output+0x1bc>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d110      	bne.n	8012084 <tcp_output+0x1d0>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012066:	891a      	ldrh	r2, [r3, #8]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801206c:	429a      	cmp	r2, r3
 801206e:	d209      	bcs.n	8012084 <tcp_output+0x1d0>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012076:	2b00      	cmp	r3, #0
 8012078:	d004      	beq.n	8012084 <tcp_output+0x1d0>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012080:	2b08      	cmp	r3, #8
 8012082:	d901      	bls.n	8012088 <tcp_output+0x1d4>
 8012084:	2301      	movs	r3, #1
 8012086:	e000      	b.n	801208a <tcp_output+0x1d6>
 8012088:	2300      	movs	r3, #0
 801208a:	2b00      	cmp	r3, #0
 801208c:	d106      	bne.n	801209c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	8b5b      	ldrh	r3, [r3, #26]
 8012092:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012096:	2b00      	cmp	r3, #0
 8012098:	f000 80e4 	beq.w	8012264 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	7d1b      	ldrb	r3, [r3, #20]
 80120a0:	2b02      	cmp	r3, #2
 80120a2:	d00d      	beq.n	80120c0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80120a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	899b      	ldrh	r3, [r3, #12]
 80120aa:	b29c      	uxth	r4, r3
 80120ac:	2010      	movs	r0, #16
 80120ae:	f7f9 fe37 	bl	800bd20 <lwip_htons>
 80120b2:	4603      	mov	r3, r0
 80120b4:	461a      	mov	r2, r3
 80120b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b8:	68db      	ldr	r3, [r3, #12]
 80120ba:	4322      	orrs	r2, r4
 80120bc:	b292      	uxth	r2, r2
 80120be:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80120c0:	697a      	ldr	r2, [r7, #20]
 80120c2:	6879      	ldr	r1, [r7, #4]
 80120c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120c6:	f000 f909 	bl	80122dc <tcp_output_segment>
 80120ca:	4603      	mov	r3, r0
 80120cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80120ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d016      	beq.n	8012104 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	8b5b      	ldrh	r3, [r3, #26]
 80120da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120de:	b29a      	uxth	r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	835a      	strh	r2, [r3, #26]
      return err;
 80120e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120e8:	e0d3      	b.n	8012292 <tcp_output+0x3de>
 80120ea:	bf00      	nop
 80120ec:	0801b27c 	.word	0x0801b27c
 80120f0:	0801b7c0 	.word	0x0801b7c0
 80120f4:	0801b2d0 	.word	0x0801b2d0
 80120f8:	0801b7d8 	.word	0x0801b7d8
 80120fc:	2000c998 	.word	0x2000c998
 8012100:	0801b800 	.word	0x0801b800
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	7d1b      	ldrb	r3, [r3, #20]
 8012110:	2b02      	cmp	r3, #2
 8012112:	d006      	beq.n	8012122 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	8b5b      	ldrh	r3, [r3, #26]
 8012118:	f023 0303 	bic.w	r3, r3, #3
 801211c:	b29a      	uxth	r2, r3
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	4618      	mov	r0, r3
 801212a:	f7f9 fe0d 	bl	800bd48 <lwip_htonl>
 801212e:	4604      	mov	r4, r0
 8012130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012132:	891b      	ldrh	r3, [r3, #8]
 8012134:	461d      	mov	r5, r3
 8012136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	899b      	ldrh	r3, [r3, #12]
 801213c:	b29b      	uxth	r3, r3
 801213e:	4618      	mov	r0, r3
 8012140:	f7f9 fdee 	bl	800bd20 <lwip_htons>
 8012144:	4603      	mov	r3, r0
 8012146:	b2db      	uxtb	r3, r3
 8012148:	f003 0303 	and.w	r3, r3, #3
 801214c:	2b00      	cmp	r3, #0
 801214e:	d001      	beq.n	8012154 <tcp_output+0x2a0>
 8012150:	2301      	movs	r3, #1
 8012152:	e000      	b.n	8012156 <tcp_output+0x2a2>
 8012154:	2300      	movs	r3, #0
 8012156:	442b      	add	r3, r5
 8012158:	4423      	add	r3, r4
 801215a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	1ad3      	subs	r3, r2, r3
 8012164:	2b00      	cmp	r3, #0
 8012166:	da02      	bge.n	801216e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012170:	891b      	ldrh	r3, [r3, #8]
 8012172:	461c      	mov	r4, r3
 8012174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012176:	68db      	ldr	r3, [r3, #12]
 8012178:	899b      	ldrh	r3, [r3, #12]
 801217a:	b29b      	uxth	r3, r3
 801217c:	4618      	mov	r0, r3
 801217e:	f7f9 fdcf 	bl	800bd20 <lwip_htons>
 8012182:	4603      	mov	r3, r0
 8012184:	b2db      	uxtb	r3, r3
 8012186:	f003 0303 	and.w	r3, r3, #3
 801218a:	2b00      	cmp	r3, #0
 801218c:	d001      	beq.n	8012192 <tcp_output+0x2de>
 801218e:	2301      	movs	r3, #1
 8012190:	e000      	b.n	8012194 <tcp_output+0x2e0>
 8012192:	2300      	movs	r3, #0
 8012194:	4423      	add	r3, r4
 8012196:	2b00      	cmp	r3, #0
 8012198:	d049      	beq.n	801222e <tcp_output+0x37a>
      seg->next = NULL;
 801219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219c:	2200      	movs	r2, #0
 801219e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d105      	bne.n	80121b4 <tcp_output+0x300>
        pcb->unacked = seg;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121ac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b0:	623b      	str	r3, [r7, #32]
 80121b2:	e03f      	b.n	8012234 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80121b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7f9 fdc4 	bl	800bd48 <lwip_htonl>
 80121c0:	4604      	mov	r4, r0
 80121c2:	6a3b      	ldr	r3, [r7, #32]
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7f9 fdbd 	bl	800bd48 <lwip_htonl>
 80121ce:	4603      	mov	r3, r0
 80121d0:	1ae3      	subs	r3, r4, r3
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	da24      	bge.n	8012220 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	3370      	adds	r3, #112	; 0x70
 80121da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121dc:	e002      	b.n	80121e4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80121de:	69fb      	ldr	r3, [r7, #28]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d011      	beq.n	8012210 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121ec:	69fb      	ldr	r3, [r7, #28]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7f9 fda7 	bl	800bd48 <lwip_htonl>
 80121fa:	4604      	mov	r4, r0
 80121fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	4618      	mov	r0, r3
 8012204:	f7f9 fda0 	bl	800bd48 <lwip_htonl>
 8012208:	4603      	mov	r3, r0
 801220a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801220c:	2b00      	cmp	r3, #0
 801220e:	dbe6      	blt.n	80121de <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012210:	69fb      	ldr	r3, [r7, #28]
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012216:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	e009      	b.n	8012234 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012220:	6a3b      	ldr	r3, [r7, #32]
 8012222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012224:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012226:	6a3b      	ldr	r3, [r7, #32]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	623b      	str	r3, [r7, #32]
 801222c:	e002      	b.n	8012234 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801222e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012230:	f7fc fc3f 	bl	800eab2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012238:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223c:	2b00      	cmp	r3, #0
 801223e:	d012      	beq.n	8012266 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	4618      	mov	r0, r3
 8012248:	f7f9 fd7e 	bl	800bd48 <lwip_htonl>
 801224c:	4602      	mov	r2, r0
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012252:	1ad3      	subs	r3, r2, r3
 8012254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012256:	8912      	ldrh	r2, [r2, #8]
 8012258:	4413      	add	r3, r2
  while (seg != NULL &&
 801225a:	69ba      	ldr	r2, [r7, #24]
 801225c:	429a      	cmp	r2, r3
 801225e:	f4bf aed9 	bcs.w	8012014 <tcp_output+0x160>
 8012262:	e000      	b.n	8012266 <tcp_output+0x3b2>
      break;
 8012264:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801226a:	2b00      	cmp	r3, #0
 801226c:	d108      	bne.n	8012280 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2200      	movs	r2, #0
 8012272:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012276:	e004      	b.n	8012282 <tcp_output+0x3ce>
    goto output_done;
 8012278:	bf00      	nop
 801227a:	e002      	b.n	8012282 <tcp_output+0x3ce>
    goto output_done;
 801227c:	bf00      	nop
 801227e:	e000      	b.n	8012282 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012280:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	8b5b      	ldrh	r3, [r3, #26]
 8012286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801228a:	b29a      	uxth	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3728      	adds	r7, #40	; 0x28
 8012296:	46bd      	mov	sp, r7
 8012298:	bdb0      	pop	{r4, r5, r7, pc}
 801229a:	bf00      	nop

0801229c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d106      	bne.n	80122b8 <tcp_output_segment_busy+0x1c>
 80122aa:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <tcp_output_segment_busy+0x34>)
 80122ac:	f240 529a 	movw	r2, #1434	; 0x59a
 80122b0:	4908      	ldr	r1, [pc, #32]	; (80122d4 <tcp_output_segment_busy+0x38>)
 80122b2:	4809      	ldr	r0, [pc, #36]	; (80122d8 <tcp_output_segment_busy+0x3c>)
 80122b4:	f006 fe34 	bl	8018f20 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	7b9b      	ldrb	r3, [r3, #14]
 80122be:	2b01      	cmp	r3, #1
 80122c0:	d001      	beq.n	80122c6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80122c2:	2301      	movs	r3, #1
 80122c4:	e000      	b.n	80122c8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80122c6:	2300      	movs	r3, #0
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3708      	adds	r7, #8
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	0801b27c 	.word	0x0801b27c
 80122d4:	0801b818 	.word	0x0801b818
 80122d8:	0801b2d0 	.word	0x0801b2d0

080122dc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80122dc:	b5b0      	push	{r4, r5, r7, lr}
 80122de:	b08c      	sub	sp, #48	; 0x30
 80122e0:	af04      	add	r7, sp, #16
 80122e2:	60f8      	str	r0, [r7, #12]
 80122e4:	60b9      	str	r1, [r7, #8]
 80122e6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d106      	bne.n	80122fc <tcp_output_segment+0x20>
 80122ee:	4b63      	ldr	r3, [pc, #396]	; (801247c <tcp_output_segment+0x1a0>)
 80122f0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80122f4:	4962      	ldr	r1, [pc, #392]	; (8012480 <tcp_output_segment+0x1a4>)
 80122f6:	4863      	ldr	r0, [pc, #396]	; (8012484 <tcp_output_segment+0x1a8>)
 80122f8:	f006 fe12 	bl	8018f20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d106      	bne.n	8012310 <tcp_output_segment+0x34>
 8012302:	4b5e      	ldr	r3, [pc, #376]	; (801247c <tcp_output_segment+0x1a0>)
 8012304:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012308:	495f      	ldr	r1, [pc, #380]	; (8012488 <tcp_output_segment+0x1ac>)
 801230a:	485e      	ldr	r0, [pc, #376]	; (8012484 <tcp_output_segment+0x1a8>)
 801230c:	f006 fe08 	bl	8018f20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d106      	bne.n	8012324 <tcp_output_segment+0x48>
 8012316:	4b59      	ldr	r3, [pc, #356]	; (801247c <tcp_output_segment+0x1a0>)
 8012318:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801231c:	495b      	ldr	r1, [pc, #364]	; (801248c <tcp_output_segment+0x1b0>)
 801231e:	4859      	ldr	r0, [pc, #356]	; (8012484 <tcp_output_segment+0x1a8>)
 8012320:	f006 fdfe 	bl	8018f20 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012324:	68f8      	ldr	r0, [r7, #12]
 8012326:	f7ff ffb9 	bl	801229c <tcp_output_segment_busy>
 801232a:	4603      	mov	r3, r0
 801232c:	2b00      	cmp	r3, #0
 801232e:	d001      	beq.n	8012334 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	e09f      	b.n	8012474 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	68dc      	ldr	r4, [r3, #12]
 801233c:	4610      	mov	r0, r2
 801233e:	f7f9 fd03 	bl	800bd48 <lwip_htonl>
 8012342:	4603      	mov	r3, r0
 8012344:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	68dc      	ldr	r4, [r3, #12]
 801234e:	4610      	mov	r0, r2
 8012350:	f7f9 fce6 	bl	800bd20 <lwip_htons>
 8012354:	4603      	mov	r3, r0
 8012356:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012360:	441a      	add	r2, r3
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	3314      	adds	r3, #20
 801236c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	7a9b      	ldrb	r3, [r3, #10]
 8012372:	f003 0301 	and.w	r3, r3, #1
 8012376:	2b00      	cmp	r3, #0
 8012378:	d015      	beq.n	80123a6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	3304      	adds	r3, #4
 801237e:	461a      	mov	r2, r3
 8012380:	6879      	ldr	r1, [r7, #4]
 8012382:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012386:	f7fc fe8b 	bl	800f0a0 <tcp_eff_send_mss_netif>
 801238a:	4603      	mov	r3, r0
 801238c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801238e:	8b7b      	ldrh	r3, [r7, #26]
 8012390:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012394:	4618      	mov	r0, r3
 8012396:	f7f9 fcd7 	bl	800bd48 <lwip_htonl>
 801239a:	4602      	mov	r2, r0
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	601a      	str	r2, [r3, #0]
    opts += 1;
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	3304      	adds	r3, #4
 80123a4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	da02      	bge.n	80123b6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	2200      	movs	r2, #0
 80123b4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d10c      	bne.n	80123d8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80123be:	4b34      	ldr	r3, [pc, #208]	; (8012490 <tcp_output_segment+0x1b4>)
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7f9 fcbb 	bl	800bd48 <lwip_htonl>
 80123d2:	4602      	mov	r2, r0
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	68da      	ldr	r2, [r3, #12]
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	685b      	ldr	r3, [r3, #4]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	1ad3      	subs	r3, r2, r3
 80123e4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	8959      	ldrh	r1, [r3, #10]
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	8b3a      	ldrh	r2, [r7, #24]
 80123f2:	1a8a      	subs	r2, r1, r2
 80123f4:	b292      	uxth	r2, r2
 80123f6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	8919      	ldrh	r1, [r3, #8]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	8b3a      	ldrh	r2, [r7, #24]
 8012404:	1a8a      	subs	r2, r1, r2
 8012406:	b292      	uxth	r2, r2
 8012408:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	68fa      	ldr	r2, [r7, #12]
 8012410:	68d2      	ldr	r2, [r2, #12]
 8012412:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	2200      	movs	r2, #0
 801241a:	741a      	strb	r2, [r3, #16]
 801241c:	2200      	movs	r2, #0
 801241e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	f103 0214 	add.w	r2, r3, #20
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	7a9b      	ldrb	r3, [r3, #10]
 801242c:	009b      	lsls	r3, r3, #2
 801242e:	f003 0304 	and.w	r3, r3, #4
 8012432:	4413      	add	r3, r2
 8012434:	69fa      	ldr	r2, [r7, #28]
 8012436:	429a      	cmp	r2, r3
 8012438:	d006      	beq.n	8012448 <tcp_output_segment+0x16c>
 801243a:	4b10      	ldr	r3, [pc, #64]	; (801247c <tcp_output_segment+0x1a0>)
 801243c:	f240 621c 	movw	r2, #1564	; 0x61c
 8012440:	4914      	ldr	r1, [pc, #80]	; (8012494 <tcp_output_segment+0x1b8>)
 8012442:	4810      	ldr	r0, [pc, #64]	; (8012484 <tcp_output_segment+0x1a8>)
 8012444:	f006 fd6c 	bl	8018f20 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6858      	ldr	r0, [r3, #4]
 801244c:	68b9      	ldr	r1, [r7, #8]
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	1d1c      	adds	r4, r3, #4
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	7add      	ldrb	r5, [r3, #11]
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	7a9b      	ldrb	r3, [r3, #10]
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	9202      	str	r2, [sp, #8]
 801245e:	2206      	movs	r2, #6
 8012460:	9201      	str	r2, [sp, #4]
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	462b      	mov	r3, r5
 8012466:	4622      	mov	r2, r4
 8012468:	f004 fc02 	bl	8016c70 <ip4_output_if>
 801246c:	4603      	mov	r3, r0
 801246e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012470:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012474:	4618      	mov	r0, r3
 8012476:	3720      	adds	r7, #32
 8012478:	46bd      	mov	sp, r7
 801247a:	bdb0      	pop	{r4, r5, r7, pc}
 801247c:	0801b27c 	.word	0x0801b27c
 8012480:	0801b840 	.word	0x0801b840
 8012484:	0801b2d0 	.word	0x0801b2d0
 8012488:	0801b860 	.word	0x0801b860
 801248c:	0801b880 	.word	0x0801b880
 8012490:	2000c94c 	.word	0x2000c94c
 8012494:	0801b8a4 	.word	0x0801b8a4

08012498 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012498:	b5b0      	push	{r4, r5, r7, lr}
 801249a:	b084      	sub	sp, #16
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d106      	bne.n	80124b4 <tcp_rexmit_rto_prepare+0x1c>
 80124a6:	4b31      	ldr	r3, [pc, #196]	; (801256c <tcp_rexmit_rto_prepare+0xd4>)
 80124a8:	f240 6263 	movw	r2, #1635	; 0x663
 80124ac:	4930      	ldr	r1, [pc, #192]	; (8012570 <tcp_rexmit_rto_prepare+0xd8>)
 80124ae:	4831      	ldr	r0, [pc, #196]	; (8012574 <tcp_rexmit_rto_prepare+0xdc>)
 80124b0:	f006 fd36 	bl	8018f20 <iprintf>

  if (pcb->unacked == NULL) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d102      	bne.n	80124c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80124bc:	f06f 0305 	mvn.w	r3, #5
 80124c0:	e050      	b.n	8012564 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124c6:	60fb      	str	r3, [r7, #12]
 80124c8:	e00b      	b.n	80124e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80124ca:	68f8      	ldr	r0, [r7, #12]
 80124cc:	f7ff fee6 	bl	801229c <tcp_output_segment_busy>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d002      	beq.n	80124dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80124d6:	f06f 0305 	mvn.w	r3, #5
 80124da:	e043      	b.n	8012564 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	60fb      	str	r3, [r7, #12]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d1ef      	bne.n	80124ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f7ff fed6 	bl	801229c <tcp_output_segment_busy>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d002      	beq.n	80124fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80124f6:	f06f 0305 	mvn.w	r3, #5
 80124fa:	e033      	b.n	8012564 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2200      	movs	r2, #0
 8012510:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	8b5b      	ldrh	r3, [r3, #26]
 8012516:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801251a:	b29a      	uxth	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	4618      	mov	r0, r3
 8012528:	f7f9 fc0e 	bl	800bd48 <lwip_htonl>
 801252c:	4604      	mov	r4, r0
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	891b      	ldrh	r3, [r3, #8]
 8012532:	461d      	mov	r5, r3
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	899b      	ldrh	r3, [r3, #12]
 801253a:	b29b      	uxth	r3, r3
 801253c:	4618      	mov	r0, r3
 801253e:	f7f9 fbef 	bl	800bd20 <lwip_htons>
 8012542:	4603      	mov	r3, r0
 8012544:	b2db      	uxtb	r3, r3
 8012546:	f003 0303 	and.w	r3, r3, #3
 801254a:	2b00      	cmp	r3, #0
 801254c:	d001      	beq.n	8012552 <tcp_rexmit_rto_prepare+0xba>
 801254e:	2301      	movs	r3, #1
 8012550:	e000      	b.n	8012554 <tcp_rexmit_rto_prepare+0xbc>
 8012552:	2300      	movs	r3, #0
 8012554:	442b      	add	r3, r5
 8012556:	18e2      	adds	r2, r4, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012562:	2300      	movs	r3, #0
}
 8012564:	4618      	mov	r0, r3
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bdb0      	pop	{r4, r5, r7, pc}
 801256c:	0801b27c 	.word	0x0801b27c
 8012570:	0801b8b8 	.word	0x0801b8b8
 8012574:	0801b2d0 	.word	0x0801b2d0

08012578 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d106      	bne.n	8012594 <tcp_rexmit_rto_commit+0x1c>
 8012586:	4b0d      	ldr	r3, [pc, #52]	; (80125bc <tcp_rexmit_rto_commit+0x44>)
 8012588:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801258c:	490c      	ldr	r1, [pc, #48]	; (80125c0 <tcp_rexmit_rto_commit+0x48>)
 801258e:	480d      	ldr	r0, [pc, #52]	; (80125c4 <tcp_rexmit_rto_commit+0x4c>)
 8012590:	f006 fcc6 	bl	8018f20 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801259a:	2bff      	cmp	r3, #255	; 0xff
 801259c:	d007      	beq.n	80125ae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125a4:	3301      	adds	r3, #1
 80125a6:	b2da      	uxtb	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7ff fc80 	bl	8011eb4 <tcp_output>
}
 80125b4:	bf00      	nop
 80125b6:	3708      	adds	r7, #8
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	0801b27c 	.word	0x0801b27c
 80125c0:	0801b8dc 	.word	0x0801b8dc
 80125c4:	0801b2d0 	.word	0x0801b2d0

080125c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d106      	bne.n	80125e4 <tcp_rexmit_rto+0x1c>
 80125d6:	4b0a      	ldr	r3, [pc, #40]	; (8012600 <tcp_rexmit_rto+0x38>)
 80125d8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80125dc:	4909      	ldr	r1, [pc, #36]	; (8012604 <tcp_rexmit_rto+0x3c>)
 80125de:	480a      	ldr	r0, [pc, #40]	; (8012608 <tcp_rexmit_rto+0x40>)
 80125e0:	f006 fc9e 	bl	8018f20 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7ff ff57 	bl	8012498 <tcp_rexmit_rto_prepare>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d102      	bne.n	80125f6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f7ff ffc1 	bl	8012578 <tcp_rexmit_rto_commit>
  }
}
 80125f6:	bf00      	nop
 80125f8:	3708      	adds	r7, #8
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	0801b27c 	.word	0x0801b27c
 8012604:	0801b900 	.word	0x0801b900
 8012608:	0801b2d0 	.word	0x0801b2d0

0801260c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801260c:	b590      	push	{r4, r7, lr}
 801260e:	b085      	sub	sp, #20
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d106      	bne.n	8012628 <tcp_rexmit+0x1c>
 801261a:	4b2f      	ldr	r3, [pc, #188]	; (80126d8 <tcp_rexmit+0xcc>)
 801261c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012620:	492e      	ldr	r1, [pc, #184]	; (80126dc <tcp_rexmit+0xd0>)
 8012622:	482f      	ldr	r0, [pc, #188]	; (80126e0 <tcp_rexmit+0xd4>)
 8012624:	f006 fc7c 	bl	8018f20 <iprintf>

  if (pcb->unacked == NULL) {
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801262c:	2b00      	cmp	r3, #0
 801262e:	d102      	bne.n	8012636 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012630:	f06f 0305 	mvn.w	r3, #5
 8012634:	e04c      	b.n	80126d0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801263a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801263c:	68b8      	ldr	r0, [r7, #8]
 801263e:	f7ff fe2d 	bl	801229c <tcp_output_segment_busy>
 8012642:	4603      	mov	r3, r0
 8012644:	2b00      	cmp	r3, #0
 8012646:	d002      	beq.n	801264e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012648:	f06f 0305 	mvn.w	r3, #5
 801264c:	e040      	b.n	80126d0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	681a      	ldr	r2, [r3, #0]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	336c      	adds	r3, #108	; 0x6c
 801265a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801265c:	e002      	b.n	8012664 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d011      	beq.n	8012690 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	4618      	mov	r0, r3
 8012676:	f7f9 fb67 	bl	800bd48 <lwip_htonl>
 801267a:	4604      	mov	r4, r0
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	4618      	mov	r0, r3
 8012684:	f7f9 fb60 	bl	800bd48 <lwip_htonl>
 8012688:	4603      	mov	r3, r0
 801268a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801268c:	2b00      	cmp	r3, #0
 801268e:	dbe6      	blt.n	801265e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	68ba      	ldr	r2, [r7, #8]
 801269c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d103      	bne.n	80126ae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2200      	movs	r2, #0
 80126aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126b4:	2bff      	cmp	r3, #255	; 0xff
 80126b6:	d007      	beq.n	80126c8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126be:	3301      	adds	r3, #1
 80126c0:	b2da      	uxtb	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2200      	movs	r2, #0
 80126cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80126ce:	2300      	movs	r3, #0
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3714      	adds	r7, #20
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd90      	pop	{r4, r7, pc}
 80126d8:	0801b27c 	.word	0x0801b27c
 80126dc:	0801b91c 	.word	0x0801b91c
 80126e0:	0801b2d0 	.word	0x0801b2d0

080126e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d106      	bne.n	8012700 <tcp_rexmit_fast+0x1c>
 80126f2:	4b2a      	ldr	r3, [pc, #168]	; (801279c <tcp_rexmit_fast+0xb8>)
 80126f4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80126f8:	4929      	ldr	r1, [pc, #164]	; (80127a0 <tcp_rexmit_fast+0xbc>)
 80126fa:	482a      	ldr	r0, [pc, #168]	; (80127a4 <tcp_rexmit_fast+0xc0>)
 80126fc:	f006 fc10 	bl	8018f20 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012704:	2b00      	cmp	r3, #0
 8012706:	d044      	beq.n	8012792 <tcp_rexmit_fast+0xae>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	8b5b      	ldrh	r3, [r3, #26]
 801270c:	f003 0304 	and.w	r3, r3, #4
 8012710:	2b00      	cmp	r3, #0
 8012712:	d13e      	bne.n	8012792 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7ff ff79 	bl	801260c <tcp_rexmit>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d138      	bne.n	8012792 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801272c:	4293      	cmp	r3, r2
 801272e:	bf28      	it	cs
 8012730:	4613      	movcs	r3, r2
 8012732:	b29b      	uxth	r3, r3
 8012734:	0fda      	lsrs	r2, r3, #31
 8012736:	4413      	add	r3, r2
 8012738:	105b      	asrs	r3, r3, #1
 801273a:	b29a      	uxth	r2, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012748:	461a      	mov	r2, r3
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801274e:	005b      	lsls	r3, r3, #1
 8012750:	429a      	cmp	r2, r3
 8012752:	d206      	bcs.n	8012762 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012758:	005b      	lsls	r3, r3, #1
 801275a:	b29a      	uxth	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801276c:	4619      	mov	r1, r3
 801276e:	0049      	lsls	r1, r1, #1
 8012770:	440b      	add	r3, r1
 8012772:	b29b      	uxth	r3, r3
 8012774:	4413      	add	r3, r2
 8012776:	b29a      	uxth	r2, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	8b5b      	ldrh	r3, [r3, #26]
 8012782:	f043 0304 	orr.w	r3, r3, #4
 8012786:	b29a      	uxth	r2, r3
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2200      	movs	r2, #0
 8012790:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012792:	bf00      	nop
 8012794:	3708      	adds	r7, #8
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
 801279a:	bf00      	nop
 801279c:	0801b27c 	.word	0x0801b27c
 80127a0:	0801b934 	.word	0x0801b934
 80127a4:	0801b2d0 	.word	0x0801b2d0

080127a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b086      	sub	sp, #24
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	607b      	str	r3, [r7, #4]
 80127b2:	460b      	mov	r3, r1
 80127b4:	817b      	strh	r3, [r7, #10]
 80127b6:	4613      	mov	r3, r2
 80127b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80127ba:	897a      	ldrh	r2, [r7, #10]
 80127bc:	893b      	ldrh	r3, [r7, #8]
 80127be:	4413      	add	r3, r2
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	3314      	adds	r3, #20
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127ca:	4619      	mov	r1, r3
 80127cc:	2022      	movs	r0, #34	; 0x22
 80127ce:	f7fa fbff 	bl	800cfd0 <pbuf_alloc>
 80127d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d04d      	beq.n	8012876 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80127da:	897b      	ldrh	r3, [r7, #10]
 80127dc:	3313      	adds	r3, #19
 80127de:	697a      	ldr	r2, [r7, #20]
 80127e0:	8952      	ldrh	r2, [r2, #10]
 80127e2:	4293      	cmp	r3, r2
 80127e4:	db06      	blt.n	80127f4 <tcp_output_alloc_header_common+0x4c>
 80127e6:	4b26      	ldr	r3, [pc, #152]	; (8012880 <tcp_output_alloc_header_common+0xd8>)
 80127e8:	f240 7223 	movw	r2, #1827	; 0x723
 80127ec:	4925      	ldr	r1, [pc, #148]	; (8012884 <tcp_output_alloc_header_common+0xdc>)
 80127ee:	4826      	ldr	r0, [pc, #152]	; (8012888 <tcp_output_alloc_header_common+0xe0>)
 80127f0:	f006 fb96 	bl	8018f20 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80127fa:	8c3b      	ldrh	r3, [r7, #32]
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7f9 fa8f 	bl	800bd20 <lwip_htons>
 8012802:	4603      	mov	r3, r0
 8012804:	461a      	mov	r2, r3
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801280a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801280c:	4618      	mov	r0, r3
 801280e:	f7f9 fa87 	bl	800bd20 <lwip_htons>
 8012812:	4603      	mov	r3, r0
 8012814:	461a      	mov	r2, r3
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f7f9 fa91 	bl	800bd48 <lwip_htonl>
 8012826:	4602      	mov	r2, r0
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801282c:	897b      	ldrh	r3, [r7, #10]
 801282e:	089b      	lsrs	r3, r3, #2
 8012830:	b29b      	uxth	r3, r3
 8012832:	3305      	adds	r3, #5
 8012834:	b29b      	uxth	r3, r3
 8012836:	031b      	lsls	r3, r3, #12
 8012838:	b29a      	uxth	r2, r3
 801283a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801283e:	b29b      	uxth	r3, r3
 8012840:	4313      	orrs	r3, r2
 8012842:	b29b      	uxth	r3, r3
 8012844:	4618      	mov	r0, r3
 8012846:	f7f9 fa6b 	bl	800bd20 <lwip_htons>
 801284a:	4603      	mov	r3, r0
 801284c:	461a      	mov	r2, r3
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012852:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012854:	4618      	mov	r0, r3
 8012856:	f7f9 fa63 	bl	800bd20 <lwip_htons>
 801285a:	4603      	mov	r3, r0
 801285c:	461a      	mov	r2, r3
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	2200      	movs	r2, #0
 8012866:	741a      	strb	r2, [r3, #16]
 8012868:	2200      	movs	r2, #0
 801286a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	2200      	movs	r2, #0
 8012870:	749a      	strb	r2, [r3, #18]
 8012872:	2200      	movs	r2, #0
 8012874:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012876:	697b      	ldr	r3, [r7, #20]
}
 8012878:	4618      	mov	r0, r3
 801287a:	3718      	adds	r7, #24
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	0801b27c 	.word	0x0801b27c
 8012884:	0801b954 	.word	0x0801b954
 8012888:	0801b2d0 	.word	0x0801b2d0

0801288c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801288c:	b5b0      	push	{r4, r5, r7, lr}
 801288e:	b08a      	sub	sp, #40	; 0x28
 8012890:	af04      	add	r7, sp, #16
 8012892:	60f8      	str	r0, [r7, #12]
 8012894:	607b      	str	r3, [r7, #4]
 8012896:	460b      	mov	r3, r1
 8012898:	817b      	strh	r3, [r7, #10]
 801289a:	4613      	mov	r3, r2
 801289c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d106      	bne.n	80128b2 <tcp_output_alloc_header+0x26>
 80128a4:	4b15      	ldr	r3, [pc, #84]	; (80128fc <tcp_output_alloc_header+0x70>)
 80128a6:	f240 7242 	movw	r2, #1858	; 0x742
 80128aa:	4915      	ldr	r1, [pc, #84]	; (8012900 <tcp_output_alloc_header+0x74>)
 80128ac:	4815      	ldr	r0, [pc, #84]	; (8012904 <tcp_output_alloc_header+0x78>)
 80128ae:	f006 fb37 	bl	8018f20 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	8adb      	ldrh	r3, [r3, #22]
 80128ba:	68fa      	ldr	r2, [r7, #12]
 80128bc:	8b12      	ldrh	r2, [r2, #24]
 80128be:	68f9      	ldr	r1, [r7, #12]
 80128c0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80128c2:	893d      	ldrh	r5, [r7, #8]
 80128c4:	897c      	ldrh	r4, [r7, #10]
 80128c6:	9103      	str	r1, [sp, #12]
 80128c8:	2110      	movs	r1, #16
 80128ca:	9102      	str	r1, [sp, #8]
 80128cc:	9201      	str	r2, [sp, #4]
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	462a      	mov	r2, r5
 80128d4:	4621      	mov	r1, r4
 80128d6:	f7ff ff67 	bl	80127a8 <tcp_output_alloc_header_common>
 80128da:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d006      	beq.n	80128f0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e6:	68fa      	ldr	r2, [r7, #12]
 80128e8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80128ea:	441a      	add	r2, r3
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80128f0:	697b      	ldr	r3, [r7, #20]
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3718      	adds	r7, #24
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bdb0      	pop	{r4, r5, r7, pc}
 80128fa:	bf00      	nop
 80128fc:	0801b27c 	.word	0x0801b27c
 8012900:	0801b984 	.word	0x0801b984
 8012904:	0801b2d0 	.word	0x0801b2d0

08012908 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b088      	sub	sp, #32
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	4611      	mov	r1, r2
 8012914:	461a      	mov	r2, r3
 8012916:	460b      	mov	r3, r1
 8012918:	71fb      	strb	r3, [r7, #7]
 801291a:	4613      	mov	r3, r2
 801291c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d106      	bne.n	8012936 <tcp_output_fill_options+0x2e>
 8012928:	4b13      	ldr	r3, [pc, #76]	; (8012978 <tcp_output_fill_options+0x70>)
 801292a:	f240 7256 	movw	r2, #1878	; 0x756
 801292e:	4913      	ldr	r1, [pc, #76]	; (801297c <tcp_output_fill_options+0x74>)
 8012930:	4813      	ldr	r0, [pc, #76]	; (8012980 <tcp_output_fill_options+0x78>)
 8012932:	f006 faf5 	bl	8018f20 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	3314      	adds	r3, #20
 8012940:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012942:	69bb      	ldr	r3, [r7, #24]
 8012944:	f103 0214 	add.w	r2, r3, #20
 8012948:	8bfb      	ldrh	r3, [r7, #30]
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	4619      	mov	r1, r3
 801294e:	79fb      	ldrb	r3, [r7, #7]
 8012950:	009b      	lsls	r3, r3, #2
 8012952:	f003 0304 	and.w	r3, r3, #4
 8012956:	440b      	add	r3, r1
 8012958:	4413      	add	r3, r2
 801295a:	697a      	ldr	r2, [r7, #20]
 801295c:	429a      	cmp	r2, r3
 801295e:	d006      	beq.n	801296e <tcp_output_fill_options+0x66>
 8012960:	4b05      	ldr	r3, [pc, #20]	; (8012978 <tcp_output_fill_options+0x70>)
 8012962:	f240 7275 	movw	r2, #1909	; 0x775
 8012966:	4907      	ldr	r1, [pc, #28]	; (8012984 <tcp_output_fill_options+0x7c>)
 8012968:	4805      	ldr	r0, [pc, #20]	; (8012980 <tcp_output_fill_options+0x78>)
 801296a:	f006 fad9 	bl	8018f20 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801296e:	bf00      	nop
 8012970:	3720      	adds	r7, #32
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	0801b27c 	.word	0x0801b27c
 801297c:	0801b9ac 	.word	0x0801b9ac
 8012980:	0801b2d0 	.word	0x0801b2d0
 8012984:	0801b8a4 	.word	0x0801b8a4

08012988 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b08a      	sub	sp, #40	; 0x28
 801298c:	af04      	add	r7, sp, #16
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	607a      	str	r2, [r7, #4]
 8012994:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d106      	bne.n	80129aa <tcp_output_control_segment+0x22>
 801299c:	4b1c      	ldr	r3, [pc, #112]	; (8012a10 <tcp_output_control_segment+0x88>)
 801299e:	f240 7287 	movw	r2, #1927	; 0x787
 80129a2:	491c      	ldr	r1, [pc, #112]	; (8012a14 <tcp_output_control_segment+0x8c>)
 80129a4:	481c      	ldr	r0, [pc, #112]	; (8012a18 <tcp_output_control_segment+0x90>)
 80129a6:	f006 fabb 	bl	8018f20 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80129aa:	683a      	ldr	r2, [r7, #0]
 80129ac:	6879      	ldr	r1, [r7, #4]
 80129ae:	68f8      	ldr	r0, [r7, #12]
 80129b0:	f7fe ff40 	bl	8011834 <tcp_route>
 80129b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d102      	bne.n	80129c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80129bc:	23fc      	movs	r3, #252	; 0xfc
 80129be:	75fb      	strb	r3, [r7, #23]
 80129c0:	e01c      	b.n	80129fc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d006      	beq.n	80129d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	7adb      	ldrb	r3, [r3, #11]
 80129cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	7a9b      	ldrb	r3, [r3, #10]
 80129d2:	757b      	strb	r3, [r7, #21]
 80129d4:	e003      	b.n	80129de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80129d6:	23ff      	movs	r3, #255	; 0xff
 80129d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80129da:	2300      	movs	r3, #0
 80129dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80129de:	7dba      	ldrb	r2, [r7, #22]
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	9302      	str	r3, [sp, #8]
 80129e4:	2306      	movs	r3, #6
 80129e6:	9301      	str	r3, [sp, #4]
 80129e8:	7d7b      	ldrb	r3, [r7, #21]
 80129ea:	9300      	str	r3, [sp, #0]
 80129ec:	4613      	mov	r3, r2
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	6879      	ldr	r1, [r7, #4]
 80129f2:	68b8      	ldr	r0, [r7, #8]
 80129f4:	f004 f93c 	bl	8016c70 <ip4_output_if>
 80129f8:	4603      	mov	r3, r0
 80129fa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80129fc:	68b8      	ldr	r0, [r7, #8]
 80129fe:	f7fa fdcb 	bl	800d598 <pbuf_free>
  return err;
 8012a02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3718      	adds	r7, #24
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	0801b27c 	.word	0x0801b27c
 8012a14:	0801b9d4 	.word	0x0801b9d4
 8012a18:	0801b2d0 	.word	0x0801b2d0

08012a1c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012a1c:	b590      	push	{r4, r7, lr}
 8012a1e:	b08b      	sub	sp, #44	; 0x2c
 8012a20:	af04      	add	r7, sp, #16
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	60b9      	str	r1, [r7, #8]
 8012a26:	607a      	str	r2, [r7, #4]
 8012a28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d106      	bne.n	8012a3e <tcp_rst+0x22>
 8012a30:	4b1f      	ldr	r3, [pc, #124]	; (8012ab0 <tcp_rst+0x94>)
 8012a32:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012a36:	491f      	ldr	r1, [pc, #124]	; (8012ab4 <tcp_rst+0x98>)
 8012a38:	481f      	ldr	r0, [pc, #124]	; (8012ab8 <tcp_rst+0x9c>)
 8012a3a:	f006 fa71 	bl	8018f20 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d106      	bne.n	8012a52 <tcp_rst+0x36>
 8012a44:	4b1a      	ldr	r3, [pc, #104]	; (8012ab0 <tcp_rst+0x94>)
 8012a46:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012a4a:	491c      	ldr	r1, [pc, #112]	; (8012abc <tcp_rst+0xa0>)
 8012a4c:	481a      	ldr	r0, [pc, #104]	; (8012ab8 <tcp_rst+0x9c>)
 8012a4e:	f006 fa67 	bl	8018f20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a52:	2300      	movs	r3, #0
 8012a54:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012a56:	f246 0308 	movw	r3, #24584	; 0x6008
 8012a5a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012a5c:	7dfb      	ldrb	r3, [r7, #23]
 8012a5e:	b29c      	uxth	r4, r3
 8012a60:	68b8      	ldr	r0, [r7, #8]
 8012a62:	f7f9 f971 	bl	800bd48 <lwip_htonl>
 8012a66:	4602      	mov	r2, r0
 8012a68:	8abb      	ldrh	r3, [r7, #20]
 8012a6a:	9303      	str	r3, [sp, #12]
 8012a6c:	2314      	movs	r3, #20
 8012a6e:	9302      	str	r3, [sp, #8]
 8012a70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012a72:	9301      	str	r3, [sp, #4]
 8012a74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a76:	9300      	str	r3, [sp, #0]
 8012a78:	4613      	mov	r3, r2
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f7ff fe92 	bl	80127a8 <tcp_output_alloc_header_common>
 8012a84:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00c      	beq.n	8012aa6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012a8c:	7dfb      	ldrb	r3, [r7, #23]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	6939      	ldr	r1, [r7, #16]
 8012a92:	68f8      	ldr	r0, [r7, #12]
 8012a94:	f7ff ff38 	bl	8012908 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9a:	683a      	ldr	r2, [r7, #0]
 8012a9c:	6939      	ldr	r1, [r7, #16]
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f7ff ff72 	bl	8012988 <tcp_output_control_segment>
 8012aa4:	e000      	b.n	8012aa8 <tcp_rst+0x8c>
    return;
 8012aa6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012aa8:	371c      	adds	r7, #28
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd90      	pop	{r4, r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	0801b27c 	.word	0x0801b27c
 8012ab4:	0801ba00 	.word	0x0801ba00
 8012ab8:	0801b2d0 	.word	0x0801b2d0
 8012abc:	0801ba1c 	.word	0x0801ba1c

08012ac0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012ac0:	b590      	push	{r4, r7, lr}
 8012ac2:	b087      	sub	sp, #28
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012acc:	2300      	movs	r3, #0
 8012ace:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d106      	bne.n	8012ae4 <tcp_send_empty_ack+0x24>
 8012ad6:	4b28      	ldr	r3, [pc, #160]	; (8012b78 <tcp_send_empty_ack+0xb8>)
 8012ad8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012adc:	4927      	ldr	r1, [pc, #156]	; (8012b7c <tcp_send_empty_ack+0xbc>)
 8012ade:	4828      	ldr	r0, [pc, #160]	; (8012b80 <tcp_send_empty_ack+0xc0>)
 8012ae0:	f006 fa1e 	bl	8018f20 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ae4:	7dfb      	ldrb	r3, [r7, #23]
 8012ae6:	009b      	lsls	r3, r3, #2
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	f003 0304 	and.w	r3, r3, #4
 8012aee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012af0:	7d7b      	ldrb	r3, [r7, #21]
 8012af2:	b29c      	uxth	r4, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7f9 f925 	bl	800bd48 <lwip_htonl>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2200      	movs	r2, #0
 8012b02:	4621      	mov	r1, r4
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff fec1 	bl	801288c <tcp_output_alloc_header>
 8012b0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d109      	bne.n	8012b26 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	8b5b      	ldrh	r3, [r3, #26]
 8012b16:	f043 0303 	orr.w	r3, r3, #3
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012b20:	f06f 0301 	mvn.w	r3, #1
 8012b24:	e023      	b.n	8012b6e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012b26:	7dbb      	ldrb	r3, [r7, #22]
 8012b28:	7dfa      	ldrb	r2, [r7, #23]
 8012b2a:	6939      	ldr	r1, [r7, #16]
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7ff feeb 	bl	8012908 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	3304      	adds	r3, #4
 8012b38:	6939      	ldr	r1, [r7, #16]
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7ff ff24 	bl	8012988 <tcp_output_control_segment>
 8012b40:	4603      	mov	r3, r0
 8012b42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d007      	beq.n	8012b5c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	8b5b      	ldrh	r3, [r3, #26]
 8012b50:	f043 0303 	orr.w	r3, r3, #3
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	835a      	strh	r2, [r3, #26]
 8012b5a:	e006      	b.n	8012b6a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	8b5b      	ldrh	r3, [r3, #26]
 8012b60:	f023 0303 	bic.w	r3, r3, #3
 8012b64:	b29a      	uxth	r2, r3
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	371c      	adds	r7, #28
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd90      	pop	{r4, r7, pc}
 8012b76:	bf00      	nop
 8012b78:	0801b27c 	.word	0x0801b27c
 8012b7c:	0801ba38 	.word	0x0801ba38
 8012b80:	0801b2d0 	.word	0x0801b2d0

08012b84 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012b84:	b590      	push	{r4, r7, lr}
 8012b86:	b087      	sub	sp, #28
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d106      	bne.n	8012ba4 <tcp_keepalive+0x20>
 8012b96:	4b18      	ldr	r3, [pc, #96]	; (8012bf8 <tcp_keepalive+0x74>)
 8012b98:	f640 0224 	movw	r2, #2084	; 0x824
 8012b9c:	4917      	ldr	r1, [pc, #92]	; (8012bfc <tcp_keepalive+0x78>)
 8012b9e:	4818      	ldr	r0, [pc, #96]	; (8012c00 <tcp_keepalive+0x7c>)
 8012ba0:	f006 f9be 	bl	8018f20 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012ba4:	7dfb      	ldrb	r3, [r7, #23]
 8012ba6:	b29c      	uxth	r4, r3
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bac:	3b01      	subs	r3, #1
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7f9 f8ca 	bl	800bd48 <lwip_htonl>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	4621      	mov	r1, r4
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f7ff fe66 	bl	801288c <tcp_output_alloc_header>
 8012bc0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d102      	bne.n	8012bce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bcc:	e010      	b.n	8012bf0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012bce:	7dfb      	ldrb	r3, [r7, #23]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	6939      	ldr	r1, [r7, #16]
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f7ff fe97 	bl	8012908 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	3304      	adds	r3, #4
 8012be0:	6939      	ldr	r1, [r7, #16]
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f7ff fed0 	bl	8012988 <tcp_output_control_segment>
 8012be8:	4603      	mov	r3, r0
 8012bea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	371c      	adds	r7, #28
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd90      	pop	{r4, r7, pc}
 8012bf8:	0801b27c 	.word	0x0801b27c
 8012bfc:	0801ba58 	.word	0x0801ba58
 8012c00:	0801b2d0 	.word	0x0801b2d0

08012c04 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012c04:	b590      	push	{r4, r7, lr}
 8012c06:	b08b      	sub	sp, #44	; 0x2c
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d106      	bne.n	8012c26 <tcp_zero_window_probe+0x22>
 8012c18:	4b4c      	ldr	r3, [pc, #304]	; (8012d4c <tcp_zero_window_probe+0x148>)
 8012c1a:	f640 024f 	movw	r2, #2127	; 0x84f
 8012c1e:	494c      	ldr	r1, [pc, #304]	; (8012d50 <tcp_zero_window_probe+0x14c>)
 8012c20:	484c      	ldr	r0, [pc, #304]	; (8012d54 <tcp_zero_window_probe+0x150>)
 8012c22:	f006 f97d 	bl	8018f20 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c2a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012c2c:	6a3b      	ldr	r3, [r7, #32]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d101      	bne.n	8012c36 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012c32:	2300      	movs	r3, #0
 8012c34:	e086      	b.n	8012d44 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012c3c:	2bff      	cmp	r3, #255	; 0xff
 8012c3e:	d007      	beq.n	8012c50 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012c46:	3301      	adds	r3, #1
 8012c48:	b2da      	uxtb	r2, r3
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012c50:	6a3b      	ldr	r3, [r7, #32]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	899b      	ldrh	r3, [r3, #12]
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7f9 f861 	bl	800bd20 <lwip_htons>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	b2db      	uxtb	r3, r3
 8012c62:	f003 0301 	and.w	r3, r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d005      	beq.n	8012c76 <tcp_zero_window_probe+0x72>
 8012c6a:	6a3b      	ldr	r3, [r7, #32]
 8012c6c:	891b      	ldrh	r3, [r3, #8]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d101      	bne.n	8012c76 <tcp_zero_window_probe+0x72>
 8012c72:	2301      	movs	r3, #1
 8012c74:	e000      	b.n	8012c78 <tcp_zero_window_probe+0x74>
 8012c76:	2300      	movs	r3, #0
 8012c78:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012c7a:	7ffb      	ldrb	r3, [r7, #31]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	bf0c      	ite	eq
 8012c80:	2301      	moveq	r3, #1
 8012c82:	2300      	movne	r3, #0
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c8c:	b299      	uxth	r1, r3
 8012c8e:	6a3b      	ldr	r3, [r7, #32]
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	8bba      	ldrh	r2, [r7, #28]
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7ff fdf8 	bl	801288c <tcp_output_alloc_header>
 8012c9c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d102      	bne.n	8012caa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca8:	e04c      	b.n	8012d44 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012cb0:	7ffb      	ldrb	r3, [r7, #31]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d011      	beq.n	8012cda <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	899b      	ldrh	r3, [r3, #12]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	b21b      	sxth	r3, r3
 8012cbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012cc2:	b21c      	sxth	r4, r3
 8012cc4:	2011      	movs	r0, #17
 8012cc6:	f7f9 f82b 	bl	800bd20 <lwip_htons>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	b21b      	sxth	r3, r3
 8012cce:	4323      	orrs	r3, r4
 8012cd0:	b21b      	sxth	r3, r3
 8012cd2:	b29a      	uxth	r2, r3
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	819a      	strh	r2, [r3, #12]
 8012cd8:	e010      	b.n	8012cfc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012cda:	69bb      	ldr	r3, [r7, #24]
 8012cdc:	685b      	ldr	r3, [r3, #4]
 8012cde:	3314      	adds	r3, #20
 8012ce0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012ce2:	6a3b      	ldr	r3, [r7, #32]
 8012ce4:	6858      	ldr	r0, [r3, #4]
 8012ce6:	6a3b      	ldr	r3, [r7, #32]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	891a      	ldrh	r2, [r3, #8]
 8012cec:	6a3b      	ldr	r3, [r7, #32]
 8012cee:	891b      	ldrh	r3, [r3, #8]
 8012cf0:	1ad3      	subs	r3, r2, r3
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	6939      	ldr	r1, [r7, #16]
 8012cf8:	f7fa fe52 	bl	800d9a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012cfc:	6a3b      	ldr	r3, [r7, #32]
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7f9 f820 	bl	800bd48 <lwip_htonl>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	1ad3      	subs	r3, r2, r3
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	da02      	bge.n	8012d20 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	68fa      	ldr	r2, [r7, #12]
 8012d1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d24:	2200      	movs	r2, #0
 8012d26:	69b9      	ldr	r1, [r7, #24]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff fded 	bl	8012908 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	3304      	adds	r3, #4
 8012d34:	69b9      	ldr	r1, [r7, #24]
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7ff fe26 	bl	8012988 <tcp_output_control_segment>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	372c      	adds	r7, #44	; 0x2c
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd90      	pop	{r4, r7, pc}
 8012d4c:	0801b27c 	.word	0x0801b27c
 8012d50:	0801ba74 	.word	0x0801ba74
 8012d54:	0801b2d0 	.word	0x0801b2d0

08012d58 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012d60:	f7fa ff0c 	bl	800db7c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012d64:	4b0a      	ldr	r3, [pc, #40]	; (8012d90 <tcpip_tcp_timer+0x38>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d103      	bne.n	8012d74 <tcpip_tcp_timer+0x1c>
 8012d6c:	4b09      	ldr	r3, [pc, #36]	; (8012d94 <tcpip_tcp_timer+0x3c>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d005      	beq.n	8012d80 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012d74:	2200      	movs	r2, #0
 8012d76:	4908      	ldr	r1, [pc, #32]	; (8012d98 <tcpip_tcp_timer+0x40>)
 8012d78:	20fa      	movs	r0, #250	; 0xfa
 8012d7a:	f000 f8f3 	bl	8012f64 <sys_timeout>
 8012d7e:	e003      	b.n	8012d88 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012d80:	4b06      	ldr	r3, [pc, #24]	; (8012d9c <tcpip_tcp_timer+0x44>)
 8012d82:	2200      	movs	r2, #0
 8012d84:	601a      	str	r2, [r3, #0]
  }
}
 8012d86:	bf00      	nop
 8012d88:	bf00      	nop
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	2000c958 	.word	0x2000c958
 8012d94:	2000c95c 	.word	0x2000c95c
 8012d98:	08012d59 	.word	0x08012d59
 8012d9c:	2000c9a4 	.word	0x2000c9a4

08012da0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012da4:	4b0a      	ldr	r3, [pc, #40]	; (8012dd0 <tcp_timer_needed+0x30>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d10f      	bne.n	8012dcc <tcp_timer_needed+0x2c>
 8012dac:	4b09      	ldr	r3, [pc, #36]	; (8012dd4 <tcp_timer_needed+0x34>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d103      	bne.n	8012dbc <tcp_timer_needed+0x1c>
 8012db4:	4b08      	ldr	r3, [pc, #32]	; (8012dd8 <tcp_timer_needed+0x38>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d007      	beq.n	8012dcc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012dbc:	4b04      	ldr	r3, [pc, #16]	; (8012dd0 <tcp_timer_needed+0x30>)
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	4905      	ldr	r1, [pc, #20]	; (8012ddc <tcp_timer_needed+0x3c>)
 8012dc6:	20fa      	movs	r0, #250	; 0xfa
 8012dc8:	f000 f8cc 	bl	8012f64 <sys_timeout>
  }
}
 8012dcc:	bf00      	nop
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	2000c9a4 	.word	0x2000c9a4
 8012dd4:	2000c958 	.word	0x2000c958
 8012dd8:	2000c95c 	.word	0x2000c95c
 8012ddc:	08012d59 	.word	0x08012d59

08012de0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b086      	sub	sp, #24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012dec:	200a      	movs	r0, #10
 8012dee:	f7f9 fd1f 	bl	800c830 <memp_malloc>
 8012df2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d109      	bne.n	8012e0e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d151      	bne.n	8012ea4 <sys_timeout_abs+0xc4>
 8012e00:	4b2a      	ldr	r3, [pc, #168]	; (8012eac <sys_timeout_abs+0xcc>)
 8012e02:	22be      	movs	r2, #190	; 0xbe
 8012e04:	492a      	ldr	r1, [pc, #168]	; (8012eb0 <sys_timeout_abs+0xd0>)
 8012e06:	482b      	ldr	r0, [pc, #172]	; (8012eb4 <sys_timeout_abs+0xd4>)
 8012e08:	f006 f88a 	bl	8018f20 <iprintf>
    return;
 8012e0c:	e04a      	b.n	8012ea4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	2200      	movs	r2, #0
 8012e12:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	68ba      	ldr	r2, [r7, #8]
 8012e18:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	687a      	ldr	r2, [r7, #4]
 8012e1e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	68fa      	ldr	r2, [r7, #12]
 8012e24:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012e26:	4b24      	ldr	r3, [pc, #144]	; (8012eb8 <sys_timeout_abs+0xd8>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d103      	bne.n	8012e36 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012e2e:	4a22      	ldr	r2, [pc, #136]	; (8012eb8 <sys_timeout_abs+0xd8>)
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	6013      	str	r3, [r2, #0]
    return;
 8012e34:	e037      	b.n	8012ea6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	685a      	ldr	r2, [r3, #4]
 8012e3a:	4b1f      	ldr	r3, [pc, #124]	; (8012eb8 <sys_timeout_abs+0xd8>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	0fdb      	lsrs	r3, r3, #31
 8012e44:	f003 0301 	and.w	r3, r3, #1
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d007      	beq.n	8012e5e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012e4e:	4b1a      	ldr	r3, [pc, #104]	; (8012eb8 <sys_timeout_abs+0xd8>)
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012e56:	4a18      	ldr	r2, [pc, #96]	; (8012eb8 <sys_timeout_abs+0xd8>)
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	6013      	str	r3, [r2, #0]
 8012e5c:	e023      	b.n	8012ea6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e5e:	4b16      	ldr	r3, [pc, #88]	; (8012eb8 <sys_timeout_abs+0xd8>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	617b      	str	r3, [r7, #20]
 8012e64:	e01a      	b.n	8012e9c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d00b      	beq.n	8012e86 <sys_timeout_abs+0xa6>
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	685a      	ldr	r2, [r3, #4]
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	1ad3      	subs	r3, r2, r3
 8012e7a:	0fdb      	lsrs	r3, r3, #31
 8012e7c:	f003 0301 	and.w	r3, r3, #1
 8012e80:	b2db      	uxtb	r3, r3
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d007      	beq.n	8012e96 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	693a      	ldr	r2, [r7, #16]
 8012e92:	601a      	str	r2, [r3, #0]
        break;
 8012e94:	e007      	b.n	8012ea6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	617b      	str	r3, [r7, #20]
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d1e1      	bne.n	8012e66 <sys_timeout_abs+0x86>
 8012ea2:	e000      	b.n	8012ea6 <sys_timeout_abs+0xc6>
    return;
 8012ea4:	bf00      	nop
      }
    }
  }
}
 8012ea6:	3718      	adds	r7, #24
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	0801ba98 	.word	0x0801ba98
 8012eb0:	0801bacc 	.word	0x0801bacc
 8012eb4:	0801bb0c 	.word	0x0801bb0c
 8012eb8:	2000c99c 	.word	0x2000c99c

08012ebc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b086      	sub	sp, #24
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	4798      	blx	r3

  now = sys_now();
 8012ece:	f7f2 ffc9 	bl	8005e64 <sys_now>
 8012ed2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	4b0f      	ldr	r3, [pc, #60]	; (8012f18 <lwip_cyclic_timer+0x5c>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	4413      	add	r3, r2
 8012ede:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	1ad3      	subs	r3, r2, r3
 8012ee6:	0fdb      	lsrs	r3, r3, #31
 8012ee8:	f003 0301 	and.w	r3, r3, #1
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d009      	beq.n	8012f06 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	4413      	add	r3, r2
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	4907      	ldr	r1, [pc, #28]	; (8012f1c <lwip_cyclic_timer+0x60>)
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7ff ff6e 	bl	8012de0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012f04:	e004      	b.n	8012f10 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	4904      	ldr	r1, [pc, #16]	; (8012f1c <lwip_cyclic_timer+0x60>)
 8012f0a:	68f8      	ldr	r0, [r7, #12]
 8012f0c:	f7ff ff68 	bl	8012de0 <sys_timeout_abs>
}
 8012f10:	bf00      	nop
 8012f12:	3718      	adds	r7, #24
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	2000c9a0 	.word	0x2000c9a0
 8012f1c:	08012ebd 	.word	0x08012ebd

08012f20 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f26:	2301      	movs	r3, #1
 8012f28:	607b      	str	r3, [r7, #4]
 8012f2a:	e00e      	b.n	8012f4a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012f2c:	4a0b      	ldr	r2, [pc, #44]	; (8012f5c <sys_timeouts_init+0x3c>)
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	00db      	lsls	r3, r3, #3
 8012f38:	4a08      	ldr	r2, [pc, #32]	; (8012f5c <sys_timeouts_init+0x3c>)
 8012f3a:	4413      	add	r3, r2
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	4908      	ldr	r1, [pc, #32]	; (8012f60 <sys_timeouts_init+0x40>)
 8012f40:	f000 f810 	bl	8012f64 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	3301      	adds	r3, #1
 8012f48:	607b      	str	r3, [r7, #4]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b04      	cmp	r3, #4
 8012f4e:	d9ed      	bls.n	8012f2c <sys_timeouts_init+0xc>
  }
}
 8012f50:	bf00      	nop
 8012f52:	bf00      	nop
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	0801cad0 	.word	0x0801cad0
 8012f60:	08012ebd 	.word	0x08012ebd

08012f64 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b086      	sub	sp, #24
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f76:	d306      	bcc.n	8012f86 <sys_timeout+0x22>
 8012f78:	4b0a      	ldr	r3, [pc, #40]	; (8012fa4 <sys_timeout+0x40>)
 8012f7a:	f240 1229 	movw	r2, #297	; 0x129
 8012f7e:	490a      	ldr	r1, [pc, #40]	; (8012fa8 <sys_timeout+0x44>)
 8012f80:	480a      	ldr	r0, [pc, #40]	; (8012fac <sys_timeout+0x48>)
 8012f82:	f005 ffcd 	bl	8018f20 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012f86:	f7f2 ff6d 	bl	8005e64 <sys_now>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	4413      	add	r3, r2
 8012f90:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	68b9      	ldr	r1, [r7, #8]
 8012f96:	6978      	ldr	r0, [r7, #20]
 8012f98:	f7ff ff22 	bl	8012de0 <sys_timeout_abs>
#endif
}
 8012f9c:	bf00      	nop
 8012f9e:	3718      	adds	r7, #24
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	0801ba98 	.word	0x0801ba98
 8012fa8:	0801bb34 	.word	0x0801bb34
 8012fac:	0801bb0c 	.word	0x0801bb0c

08012fb0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012fb6:	f7f2 ff55 	bl	8005e64 <sys_now>
 8012fba:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012fbc:	4b17      	ldr	r3, [pc, #92]	; (801301c <sys_check_timeouts+0x6c>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d022      	beq.n	801300e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	1ad3      	subs	r3, r2, r3
 8012fd0:	0fdb      	lsrs	r3, r3, #31
 8012fd2:	f003 0301 	and.w	r3, r3, #1
 8012fd6:	b2db      	uxtb	r3, r3
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d11a      	bne.n	8013012 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4a0e      	ldr	r2, [pc, #56]	; (801301c <sys_check_timeouts+0x6c>)
 8012fe2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	689b      	ldr	r3, [r3, #8]
 8012fe8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	68db      	ldr	r3, [r3, #12]
 8012fee:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	4a0a      	ldr	r2, [pc, #40]	; (8013020 <sys_check_timeouts+0x70>)
 8012ff6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012ff8:	68b9      	ldr	r1, [r7, #8]
 8012ffa:	200a      	movs	r0, #10
 8012ffc:	f7f9 fc8e 	bl	800c91c <memp_free>
    if (handler != NULL) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d0da      	beq.n	8012fbc <sys_check_timeouts+0xc>
      handler(arg);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6838      	ldr	r0, [r7, #0]
 801300a:	4798      	blx	r3
  do {
 801300c:	e7d6      	b.n	8012fbc <sys_check_timeouts+0xc>
      return;
 801300e:	bf00      	nop
 8013010:	e000      	b.n	8013014 <sys_check_timeouts+0x64>
      return;
 8013012:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013014:	3710      	adds	r7, #16
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	2000c99c 	.word	0x2000c99c
 8013020:	2000c9a0 	.word	0x2000c9a0

08013024 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801302a:	4b16      	ldr	r3, [pc, #88]	; (8013084 <sys_timeouts_sleeptime+0x60>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d102      	bne.n	8013038 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013032:	f04f 33ff 	mov.w	r3, #4294967295
 8013036:	e020      	b.n	801307a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013038:	f7f2 ff14 	bl	8005e64 <sys_now>
 801303c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801303e:	4b11      	ldr	r3, [pc, #68]	; (8013084 <sys_timeouts_sleeptime+0x60>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	685a      	ldr	r2, [r3, #4]
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	1ad3      	subs	r3, r2, r3
 8013048:	0fdb      	lsrs	r3, r3, #31
 801304a:	f003 0301 	and.w	r3, r3, #1
 801304e:	b2db      	uxtb	r3, r3
 8013050:	2b00      	cmp	r3, #0
 8013052:	d001      	beq.n	8013058 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013054:	2300      	movs	r3, #0
 8013056:	e010      	b.n	801307a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013058:	4b0a      	ldr	r3, [pc, #40]	; (8013084 <sys_timeouts_sleeptime+0x60>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	685a      	ldr	r2, [r3, #4]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	1ad3      	subs	r3, r2, r3
 8013062:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	da06      	bge.n	8013078 <sys_timeouts_sleeptime+0x54>
 801306a:	4b07      	ldr	r3, [pc, #28]	; (8013088 <sys_timeouts_sleeptime+0x64>)
 801306c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013070:	4906      	ldr	r1, [pc, #24]	; (801308c <sys_timeouts_sleeptime+0x68>)
 8013072:	4807      	ldr	r0, [pc, #28]	; (8013090 <sys_timeouts_sleeptime+0x6c>)
 8013074:	f005 ff54 	bl	8018f20 <iprintf>
    return ret;
 8013078:	683b      	ldr	r3, [r7, #0]
  }
}
 801307a:	4618      	mov	r0, r3
 801307c:	3708      	adds	r7, #8
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	2000c99c 	.word	0x2000c99c
 8013088:	0801ba98 	.word	0x0801ba98
 801308c:	0801bb6c 	.word	0x0801bb6c
 8013090:	0801bb0c 	.word	0x0801bb0c

08013094 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013098:	f005 ff5a 	bl	8018f50 <rand>
 801309c:	4603      	mov	r3, r0
 801309e:	b29b      	uxth	r3, r3
 80130a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	4b01      	ldr	r3, [pc, #4]	; (80130b4 <udp_init+0x20>)
 80130ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80130b0:	bf00      	nop
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	200000a4 	.word	0x200000a4

080130b8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80130b8:	b480      	push	{r7}
 80130ba:	b083      	sub	sp, #12
 80130bc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80130be:	2300      	movs	r3, #0
 80130c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80130c2:	4b17      	ldr	r3, [pc, #92]	; (8013120 <udp_new_port+0x68>)
 80130c4:	881b      	ldrh	r3, [r3, #0]
 80130c6:	1c5a      	adds	r2, r3, #1
 80130c8:	b291      	uxth	r1, r2
 80130ca:	4a15      	ldr	r2, [pc, #84]	; (8013120 <udp_new_port+0x68>)
 80130cc:	8011      	strh	r1, [r2, #0]
 80130ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d103      	bne.n	80130de <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80130d6:	4b12      	ldr	r3, [pc, #72]	; (8013120 <udp_new_port+0x68>)
 80130d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80130dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130de:	4b11      	ldr	r3, [pc, #68]	; (8013124 <udp_new_port+0x6c>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	603b      	str	r3, [r7, #0]
 80130e4:	e011      	b.n	801310a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	8a5a      	ldrh	r2, [r3, #18]
 80130ea:	4b0d      	ldr	r3, [pc, #52]	; (8013120 <udp_new_port+0x68>)
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d108      	bne.n	8013104 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80130f2:	88fb      	ldrh	r3, [r7, #6]
 80130f4:	3301      	adds	r3, #1
 80130f6:	80fb      	strh	r3, [r7, #6]
 80130f8:	88fb      	ldrh	r3, [r7, #6]
 80130fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80130fe:	d3e0      	bcc.n	80130c2 <udp_new_port+0xa>
        return 0;
 8013100:	2300      	movs	r3, #0
 8013102:	e007      	b.n	8013114 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	68db      	ldr	r3, [r3, #12]
 8013108:	603b      	str	r3, [r7, #0]
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d1ea      	bne.n	80130e6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013110:	4b03      	ldr	r3, [pc, #12]	; (8013120 <udp_new_port+0x68>)
 8013112:	881b      	ldrh	r3, [r3, #0]
}
 8013114:	4618      	mov	r0, r3
 8013116:	370c      	adds	r7, #12
 8013118:	46bd      	mov	sp, r7
 801311a:	bc80      	pop	{r7}
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop
 8013120:	200000a4 	.word	0x200000a4
 8013124:	2000c9a8 	.word	0x2000c9a8

08013128 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	4613      	mov	r3, r2
 8013134:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d105      	bne.n	8013148 <udp_input_local_match+0x20>
 801313c:	4b27      	ldr	r3, [pc, #156]	; (80131dc <udp_input_local_match+0xb4>)
 801313e:	2287      	movs	r2, #135	; 0x87
 8013140:	4927      	ldr	r1, [pc, #156]	; (80131e0 <udp_input_local_match+0xb8>)
 8013142:	4828      	ldr	r0, [pc, #160]	; (80131e4 <udp_input_local_match+0xbc>)
 8013144:	f005 feec 	bl	8018f20 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d105      	bne.n	801315a <udp_input_local_match+0x32>
 801314e:	4b23      	ldr	r3, [pc, #140]	; (80131dc <udp_input_local_match+0xb4>)
 8013150:	2288      	movs	r2, #136	; 0x88
 8013152:	4925      	ldr	r1, [pc, #148]	; (80131e8 <udp_input_local_match+0xc0>)
 8013154:	4823      	ldr	r0, [pc, #140]	; (80131e4 <udp_input_local_match+0xbc>)
 8013156:	f005 fee3 	bl	8018f20 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	7a1b      	ldrb	r3, [r3, #8]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d00b      	beq.n	801317a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	7a1a      	ldrb	r2, [r3, #8]
 8013166:	4b21      	ldr	r3, [pc, #132]	; (80131ec <udp_input_local_match+0xc4>)
 8013168:	685b      	ldr	r3, [r3, #4]
 801316a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801316e:	3301      	adds	r3, #1
 8013170:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013172:	429a      	cmp	r2, r3
 8013174:	d001      	beq.n	801317a <udp_input_local_match+0x52>
    return 0;
 8013176:	2300      	movs	r3, #0
 8013178:	e02b      	b.n	80131d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801317a:	79fb      	ldrb	r3, [r7, #7]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d018      	beq.n	80131b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d013      	beq.n	80131ae <udp_input_local_match+0x86>
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d00f      	beq.n	80131ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801318e:	4b17      	ldr	r3, [pc, #92]	; (80131ec <udp_input_local_match+0xc4>)
 8013190:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013196:	d00a      	beq.n	80131ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	4b13      	ldr	r3, [pc, #76]	; (80131ec <udp_input_local_match+0xc4>)
 801319e:	695b      	ldr	r3, [r3, #20]
 80131a0:	405a      	eors	r2, r3
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	3308      	adds	r3, #8
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d110      	bne.n	80131d0 <udp_input_local_match+0xa8>
          return 1;
 80131ae:	2301      	movs	r3, #1
 80131b0:	e00f      	b.n	80131d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d009      	beq.n	80131cc <udp_input_local_match+0xa4>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d005      	beq.n	80131cc <udp_input_local_match+0xa4>
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681a      	ldr	r2, [r3, #0]
 80131c4:	4b09      	ldr	r3, [pc, #36]	; (80131ec <udp_input_local_match+0xc4>)
 80131c6:	695b      	ldr	r3, [r3, #20]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d101      	bne.n	80131d0 <udp_input_local_match+0xa8>
        return 1;
 80131cc:	2301      	movs	r3, #1
 80131ce:	e000      	b.n	80131d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80131d0:	2300      	movs	r3, #0
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3710      	adds	r7, #16
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
 80131da:	bf00      	nop
 80131dc:	0801bb80 	.word	0x0801bb80
 80131e0:	0801bbb0 	.word	0x0801bbb0
 80131e4:	0801bbd4 	.word	0x0801bbd4
 80131e8:	0801bbfc 	.word	0x0801bbfc
 80131ec:	2000982c 	.word	0x2000982c

080131f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80131f0:	b590      	push	{r4, r7, lr}
 80131f2:	b08d      	sub	sp, #52	; 0x34
 80131f4:	af02      	add	r7, sp, #8
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80131fa:	2300      	movs	r3, #0
 80131fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d105      	bne.n	8013210 <udp_input+0x20>
 8013204:	4b7c      	ldr	r3, [pc, #496]	; (80133f8 <udp_input+0x208>)
 8013206:	22cf      	movs	r2, #207	; 0xcf
 8013208:	497c      	ldr	r1, [pc, #496]	; (80133fc <udp_input+0x20c>)
 801320a:	487d      	ldr	r0, [pc, #500]	; (8013400 <udp_input+0x210>)
 801320c:	f005 fe88 	bl	8018f20 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d105      	bne.n	8013222 <udp_input+0x32>
 8013216:	4b78      	ldr	r3, [pc, #480]	; (80133f8 <udp_input+0x208>)
 8013218:	22d0      	movs	r2, #208	; 0xd0
 801321a:	497a      	ldr	r1, [pc, #488]	; (8013404 <udp_input+0x214>)
 801321c:	4878      	ldr	r0, [pc, #480]	; (8013400 <udp_input+0x210>)
 801321e:	f005 fe7f 	bl	8018f20 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	895b      	ldrh	r3, [r3, #10]
 8013226:	2b07      	cmp	r3, #7
 8013228:	d803      	bhi.n	8013232 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f7fa f9b4 	bl	800d598 <pbuf_free>
    goto end;
 8013230:	e0de      	b.n	80133f0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013238:	4b73      	ldr	r3, [pc, #460]	; (8013408 <udp_input+0x218>)
 801323a:	695b      	ldr	r3, [r3, #20]
 801323c:	4a72      	ldr	r2, [pc, #456]	; (8013408 <udp_input+0x218>)
 801323e:	6812      	ldr	r2, [r2, #0]
 8013240:	4611      	mov	r1, r2
 8013242:	4618      	mov	r0, r3
 8013244:	f003 fdec 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 8013248:	4603      	mov	r3, r0
 801324a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	881b      	ldrh	r3, [r3, #0]
 8013250:	b29b      	uxth	r3, r3
 8013252:	4618      	mov	r0, r3
 8013254:	f7f8 fd64 	bl	800bd20 <lwip_htons>
 8013258:	4603      	mov	r3, r0
 801325a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	885b      	ldrh	r3, [r3, #2]
 8013260:	b29b      	uxth	r3, r3
 8013262:	4618      	mov	r0, r3
 8013264:	f7f8 fd5c 	bl	800bd20 <lwip_htons>
 8013268:	4603      	mov	r3, r0
 801326a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801326c:	2300      	movs	r3, #0
 801326e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013270:	2300      	movs	r3, #0
 8013272:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013274:	2300      	movs	r3, #0
 8013276:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013278:	4b64      	ldr	r3, [pc, #400]	; (801340c <udp_input+0x21c>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	627b      	str	r3, [r7, #36]	; 0x24
 801327e:	e054      	b.n	801332a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013282:	8a5b      	ldrh	r3, [r3, #18]
 8013284:	89fa      	ldrh	r2, [r7, #14]
 8013286:	429a      	cmp	r2, r3
 8013288:	d14a      	bne.n	8013320 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801328a:	7cfb      	ldrb	r3, [r7, #19]
 801328c:	461a      	mov	r2, r3
 801328e:	6839      	ldr	r1, [r7, #0]
 8013290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013292:	f7ff ff49 	bl	8013128 <udp_input_local_match>
 8013296:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013298:	2b00      	cmp	r3, #0
 801329a:	d041      	beq.n	8013320 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329e:	7c1b      	ldrb	r3, [r3, #16]
 80132a0:	f003 0304 	and.w	r3, r3, #4
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d11d      	bne.n	80132e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80132a8:	69fb      	ldr	r3, [r7, #28]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d102      	bne.n	80132b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80132ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b0:	61fb      	str	r3, [r7, #28]
 80132b2:	e017      	b.n	80132e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80132b4:	7cfb      	ldrb	r3, [r7, #19]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d014      	beq.n	80132e4 <udp_input+0xf4>
 80132ba:	4b53      	ldr	r3, [pc, #332]	; (8013408 <udp_input+0x218>)
 80132bc:	695b      	ldr	r3, [r3, #20]
 80132be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c2:	d10f      	bne.n	80132e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	3304      	adds	r3, #4
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d008      	beq.n	80132e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80132d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	3304      	adds	r3, #4
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	429a      	cmp	r2, r3
 80132de:	d101      	bne.n	80132e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80132e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80132e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e6:	8a9b      	ldrh	r3, [r3, #20]
 80132e8:	8a3a      	ldrh	r2, [r7, #16]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d118      	bne.n	8013320 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80132ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d005      	beq.n	8013302 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80132f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f8:	685a      	ldr	r2, [r3, #4]
 80132fa:	4b43      	ldr	r3, [pc, #268]	; (8013408 <udp_input+0x218>)
 80132fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80132fe:	429a      	cmp	r2, r3
 8013300:	d10e      	bne.n	8013320 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013302:	6a3b      	ldr	r3, [r7, #32]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d014      	beq.n	8013332 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330a:	68da      	ldr	r2, [r3, #12]
 801330c:	6a3b      	ldr	r3, [r7, #32]
 801330e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013310:	4b3e      	ldr	r3, [pc, #248]	; (801340c <udp_input+0x21c>)
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013316:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013318:	4a3c      	ldr	r2, [pc, #240]	; (801340c <udp_input+0x21c>)
 801331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801331c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801331e:	e008      	b.n	8013332 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013322:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	627b      	str	r3, [r7, #36]	; 0x24
 801332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1a7      	bne.n	8013280 <udp_input+0x90>
 8013330:	e000      	b.n	8013334 <udp_input+0x144>
        break;
 8013332:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013336:	2b00      	cmp	r3, #0
 8013338:	d101      	bne.n	801333e <udp_input+0x14e>
    pcb = uncon_pcb;
 801333a:	69fb      	ldr	r3, [r7, #28]
 801333c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013340:	2b00      	cmp	r3, #0
 8013342:	d002      	beq.n	801334a <udp_input+0x15a>
    for_us = 1;
 8013344:	2301      	movs	r3, #1
 8013346:	76fb      	strb	r3, [r7, #27]
 8013348:	e00a      	b.n	8013360 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	3304      	adds	r3, #4
 801334e:	681a      	ldr	r2, [r3, #0]
 8013350:	4b2d      	ldr	r3, [pc, #180]	; (8013408 <udp_input+0x218>)
 8013352:	695b      	ldr	r3, [r3, #20]
 8013354:	429a      	cmp	r2, r3
 8013356:	bf0c      	ite	eq
 8013358:	2301      	moveq	r3, #1
 801335a:	2300      	movne	r3, #0
 801335c:	b2db      	uxtb	r3, r3
 801335e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013360:	7efb      	ldrb	r3, [r7, #27]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d041      	beq.n	80133ea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013366:	2108      	movs	r1, #8
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7fa f88f 	bl	800d48c <pbuf_remove_header>
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00a      	beq.n	801338a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013374:	4b20      	ldr	r3, [pc, #128]	; (80133f8 <udp_input+0x208>)
 8013376:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801337a:	4925      	ldr	r1, [pc, #148]	; (8013410 <udp_input+0x220>)
 801337c:	4820      	ldr	r0, [pc, #128]	; (8013400 <udp_input+0x210>)
 801337e:	f005 fdcf 	bl	8018f20 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7fa f908 	bl	800d598 <pbuf_free>
      goto end;
 8013388:	e032      	b.n	80133f0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801338c:	2b00      	cmp	r3, #0
 801338e:	d012      	beq.n	80133b6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013392:	699b      	ldr	r3, [r3, #24]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d00a      	beq.n	80133ae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339a:	699c      	ldr	r4, [r3, #24]
 801339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339e:	69d8      	ldr	r0, [r3, #28]
 80133a0:	8a3b      	ldrh	r3, [r7, #16]
 80133a2:	9300      	str	r3, [sp, #0]
 80133a4:	4b1b      	ldr	r3, [pc, #108]	; (8013414 <udp_input+0x224>)
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80133ac:	e021      	b.n	80133f2 <udp_input+0x202>
        pbuf_free(p);
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7fa f8f2 	bl	800d598 <pbuf_free>
        goto end;
 80133b4:	e01c      	b.n	80133f0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80133b6:	7cfb      	ldrb	r3, [r7, #19]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d112      	bne.n	80133e2 <udp_input+0x1f2>
 80133bc:	4b12      	ldr	r3, [pc, #72]	; (8013408 <udp_input+0x218>)
 80133be:	695b      	ldr	r3, [r3, #20]
 80133c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133c4:	2be0      	cmp	r3, #224	; 0xe0
 80133c6:	d00c      	beq.n	80133e2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80133c8:	4b0f      	ldr	r3, [pc, #60]	; (8013408 <udp_input+0x218>)
 80133ca:	899b      	ldrh	r3, [r3, #12]
 80133cc:	3308      	adds	r3, #8
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	b21b      	sxth	r3, r3
 80133d2:	4619      	mov	r1, r3
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7fa f8cc 	bl	800d572 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80133da:	2103      	movs	r1, #3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f003 f9d9 	bl	8016794 <icmp_dest_unreach>
      pbuf_free(p);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f7fa f8d8 	bl	800d598 <pbuf_free>
  return;
 80133e8:	e003      	b.n	80133f2 <udp_input+0x202>
    pbuf_free(p);
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f7fa f8d4 	bl	800d598 <pbuf_free>
  return;
 80133f0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80133f2:	372c      	adds	r7, #44	; 0x2c
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd90      	pop	{r4, r7, pc}
 80133f8:	0801bb80 	.word	0x0801bb80
 80133fc:	0801bc24 	.word	0x0801bc24
 8013400:	0801bbd4 	.word	0x0801bbd4
 8013404:	0801bc3c 	.word	0x0801bc3c
 8013408:	2000982c 	.word	0x2000982c
 801340c:	2000c9a8 	.word	0x2000c9a8
 8013410:	0801bc58 	.word	0x0801bc58
 8013414:	2000983c 	.word	0x2000983c

08013418 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b088      	sub	sp, #32
 801341c:	af02      	add	r7, sp, #8
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	607a      	str	r2, [r7, #4]
 8013424:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d109      	bne.n	8013440 <udp_sendto_if+0x28>
 801342c:	4b2e      	ldr	r3, [pc, #184]	; (80134e8 <udp_sendto_if+0xd0>)
 801342e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013432:	492e      	ldr	r1, [pc, #184]	; (80134ec <udp_sendto_if+0xd4>)
 8013434:	482e      	ldr	r0, [pc, #184]	; (80134f0 <udp_sendto_if+0xd8>)
 8013436:	f005 fd73 	bl	8018f20 <iprintf>
 801343a:	f06f 030f 	mvn.w	r3, #15
 801343e:	e04f      	b.n	80134e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d109      	bne.n	801345a <udp_sendto_if+0x42>
 8013446:	4b28      	ldr	r3, [pc, #160]	; (80134e8 <udp_sendto_if+0xd0>)
 8013448:	f240 2281 	movw	r2, #641	; 0x281
 801344c:	4929      	ldr	r1, [pc, #164]	; (80134f4 <udp_sendto_if+0xdc>)
 801344e:	4828      	ldr	r0, [pc, #160]	; (80134f0 <udp_sendto_if+0xd8>)
 8013450:	f005 fd66 	bl	8018f20 <iprintf>
 8013454:	f06f 030f 	mvn.w	r3, #15
 8013458:	e042      	b.n	80134e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d109      	bne.n	8013474 <udp_sendto_if+0x5c>
 8013460:	4b21      	ldr	r3, [pc, #132]	; (80134e8 <udp_sendto_if+0xd0>)
 8013462:	f240 2282 	movw	r2, #642	; 0x282
 8013466:	4924      	ldr	r1, [pc, #144]	; (80134f8 <udp_sendto_if+0xe0>)
 8013468:	4821      	ldr	r0, [pc, #132]	; (80134f0 <udp_sendto_if+0xd8>)
 801346a:	f005 fd59 	bl	8018f20 <iprintf>
 801346e:	f06f 030f 	mvn.w	r3, #15
 8013472:	e035      	b.n	80134e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013474:	6a3b      	ldr	r3, [r7, #32]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d109      	bne.n	801348e <udp_sendto_if+0x76>
 801347a:	4b1b      	ldr	r3, [pc, #108]	; (80134e8 <udp_sendto_if+0xd0>)
 801347c:	f240 2283 	movw	r2, #643	; 0x283
 8013480:	491e      	ldr	r1, [pc, #120]	; (80134fc <udp_sendto_if+0xe4>)
 8013482:	481b      	ldr	r0, [pc, #108]	; (80134f0 <udp_sendto_if+0xd8>)
 8013484:	f005 fd4c 	bl	8018f20 <iprintf>
 8013488:	f06f 030f 	mvn.w	r3, #15
 801348c:	e028      	b.n	80134e0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d009      	beq.n	80134a8 <udp_sendto_if+0x90>
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d005      	beq.n	80134a8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134a4:	2be0      	cmp	r3, #224	; 0xe0
 80134a6:	d103      	bne.n	80134b0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80134a8:	6a3b      	ldr	r3, [r7, #32]
 80134aa:	3304      	adds	r3, #4
 80134ac:	617b      	str	r3, [r7, #20]
 80134ae:	e00b      	b.n	80134c8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	6a3b      	ldr	r3, [r7, #32]
 80134b6:	3304      	adds	r3, #4
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d002      	beq.n	80134c4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80134be:	f06f 0303 	mvn.w	r3, #3
 80134c2:	e00d      	b.n	80134e0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80134c8:	887a      	ldrh	r2, [r7, #2]
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	9301      	str	r3, [sp, #4]
 80134ce:	6a3b      	ldr	r3, [r7, #32]
 80134d0:	9300      	str	r3, [sp, #0]
 80134d2:	4613      	mov	r3, r2
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	68b9      	ldr	r1, [r7, #8]
 80134d8:	68f8      	ldr	r0, [r7, #12]
 80134da:	f000 f811 	bl	8013500 <udp_sendto_if_src>
 80134de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3718      	adds	r7, #24
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	0801bb80 	.word	0x0801bb80
 80134ec:	0801bcf4 	.word	0x0801bcf4
 80134f0:	0801bbd4 	.word	0x0801bbd4
 80134f4:	0801bd10 	.word	0x0801bd10
 80134f8:	0801bd2c 	.word	0x0801bd2c
 80134fc:	0801bd4c 	.word	0x0801bd4c

08013500 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b08c      	sub	sp, #48	; 0x30
 8013504:	af04      	add	r7, sp, #16
 8013506:	60f8      	str	r0, [r7, #12]
 8013508:	60b9      	str	r1, [r7, #8]
 801350a:	607a      	str	r2, [r7, #4]
 801350c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d109      	bne.n	8013528 <udp_sendto_if_src+0x28>
 8013514:	4b65      	ldr	r3, [pc, #404]	; (80136ac <udp_sendto_if_src+0x1ac>)
 8013516:	f240 22d1 	movw	r2, #721	; 0x2d1
 801351a:	4965      	ldr	r1, [pc, #404]	; (80136b0 <udp_sendto_if_src+0x1b0>)
 801351c:	4865      	ldr	r0, [pc, #404]	; (80136b4 <udp_sendto_if_src+0x1b4>)
 801351e:	f005 fcff 	bl	8018f20 <iprintf>
 8013522:	f06f 030f 	mvn.w	r3, #15
 8013526:	e0bc      	b.n	80136a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d109      	bne.n	8013542 <udp_sendto_if_src+0x42>
 801352e:	4b5f      	ldr	r3, [pc, #380]	; (80136ac <udp_sendto_if_src+0x1ac>)
 8013530:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013534:	4960      	ldr	r1, [pc, #384]	; (80136b8 <udp_sendto_if_src+0x1b8>)
 8013536:	485f      	ldr	r0, [pc, #380]	; (80136b4 <udp_sendto_if_src+0x1b4>)
 8013538:	f005 fcf2 	bl	8018f20 <iprintf>
 801353c:	f06f 030f 	mvn.w	r3, #15
 8013540:	e0af      	b.n	80136a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d109      	bne.n	801355c <udp_sendto_if_src+0x5c>
 8013548:	4b58      	ldr	r3, [pc, #352]	; (80136ac <udp_sendto_if_src+0x1ac>)
 801354a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801354e:	495b      	ldr	r1, [pc, #364]	; (80136bc <udp_sendto_if_src+0x1bc>)
 8013550:	4858      	ldr	r0, [pc, #352]	; (80136b4 <udp_sendto_if_src+0x1b4>)
 8013552:	f005 fce5 	bl	8018f20 <iprintf>
 8013556:	f06f 030f 	mvn.w	r3, #15
 801355a:	e0a2      	b.n	80136a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355e:	2b00      	cmp	r3, #0
 8013560:	d109      	bne.n	8013576 <udp_sendto_if_src+0x76>
 8013562:	4b52      	ldr	r3, [pc, #328]	; (80136ac <udp_sendto_if_src+0x1ac>)
 8013564:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013568:	4955      	ldr	r1, [pc, #340]	; (80136c0 <udp_sendto_if_src+0x1c0>)
 801356a:	4852      	ldr	r0, [pc, #328]	; (80136b4 <udp_sendto_if_src+0x1b4>)
 801356c:	f005 fcd8 	bl	8018f20 <iprintf>
 8013570:	f06f 030f 	mvn.w	r3, #15
 8013574:	e095      	b.n	80136a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013578:	2b00      	cmp	r3, #0
 801357a:	d109      	bne.n	8013590 <udp_sendto_if_src+0x90>
 801357c:	4b4b      	ldr	r3, [pc, #300]	; (80136ac <udp_sendto_if_src+0x1ac>)
 801357e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013582:	4950      	ldr	r1, [pc, #320]	; (80136c4 <udp_sendto_if_src+0x1c4>)
 8013584:	484b      	ldr	r0, [pc, #300]	; (80136b4 <udp_sendto_if_src+0x1b4>)
 8013586:	f005 fccb 	bl	8018f20 <iprintf>
 801358a:	f06f 030f 	mvn.w	r3, #15
 801358e:	e088      	b.n	80136a2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	8a5b      	ldrh	r3, [r3, #18]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d10f      	bne.n	80135b8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013598:	68f9      	ldr	r1, [r7, #12]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	8a5b      	ldrh	r3, [r3, #18]
 801359e:	461a      	mov	r2, r3
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f000 f893 	bl	80136cc <udp_bind>
 80135a6:	4603      	mov	r3, r0
 80135a8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80135aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d002      	beq.n	80135b8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80135b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80135b6:	e074      	b.n	80136a2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	891b      	ldrh	r3, [r3, #8]
 80135bc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80135c0:	4293      	cmp	r3, r2
 80135c2:	d902      	bls.n	80135ca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80135c4:	f04f 33ff 	mov.w	r3, #4294967295
 80135c8:	e06b      	b.n	80136a2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80135ca:	2108      	movs	r1, #8
 80135cc:	68b8      	ldr	r0, [r7, #8]
 80135ce:	f7f9 ff4d 	bl	800d46c <pbuf_add_header>
 80135d2:	4603      	mov	r3, r0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d015      	beq.n	8013604 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80135d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80135dc:	2108      	movs	r1, #8
 80135de:	2022      	movs	r0, #34	; 0x22
 80135e0:	f7f9 fcf6 	bl	800cfd0 <pbuf_alloc>
 80135e4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80135e6:	69fb      	ldr	r3, [r7, #28]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d102      	bne.n	80135f2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80135ec:	f04f 33ff 	mov.w	r3, #4294967295
 80135f0:	e057      	b.n	80136a2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	891b      	ldrh	r3, [r3, #8]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d006      	beq.n	8013608 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80135fa:	68b9      	ldr	r1, [r7, #8]
 80135fc:	69f8      	ldr	r0, [r7, #28]
 80135fe:	f7fa f8ed 	bl	800d7dc <pbuf_chain>
 8013602:	e001      	b.n	8013608 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	895b      	ldrh	r3, [r3, #10]
 801360c:	2b07      	cmp	r3, #7
 801360e:	d806      	bhi.n	801361e <udp_sendto_if_src+0x11e>
 8013610:	4b26      	ldr	r3, [pc, #152]	; (80136ac <udp_sendto_if_src+0x1ac>)
 8013612:	f240 320d 	movw	r2, #781	; 0x30d
 8013616:	492c      	ldr	r1, [pc, #176]	; (80136c8 <udp_sendto_if_src+0x1c8>)
 8013618:	4826      	ldr	r0, [pc, #152]	; (80136b4 <udp_sendto_if_src+0x1b4>)
 801361a:	f005 fc81 	bl	8018f20 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	8a5b      	ldrh	r3, [r3, #18]
 8013628:	4618      	mov	r0, r3
 801362a:	f7f8 fb79 	bl	800bd20 <lwip_htons>
 801362e:	4603      	mov	r3, r0
 8013630:	461a      	mov	r2, r3
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013636:	887b      	ldrh	r3, [r7, #2]
 8013638:	4618      	mov	r0, r3
 801363a:	f7f8 fb71 	bl	800bd20 <lwip_htons>
 801363e:	4603      	mov	r3, r0
 8013640:	461a      	mov	r2, r3
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	2200      	movs	r2, #0
 801364a:	719a      	strb	r2, [r3, #6]
 801364c:	2200      	movs	r2, #0
 801364e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	891b      	ldrh	r3, [r3, #8]
 8013654:	4618      	mov	r0, r3
 8013656:	f7f8 fb63 	bl	800bd20 <lwip_htons>
 801365a:	4603      	mov	r3, r0
 801365c:	461a      	mov	r2, r3
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013662:	2311      	movs	r3, #17
 8013664:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	7adb      	ldrb	r3, [r3, #11]
 801366a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	7a9b      	ldrb	r3, [r3, #10]
 8013670:	7cb9      	ldrb	r1, [r7, #18]
 8013672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013674:	9202      	str	r2, [sp, #8]
 8013676:	7cfa      	ldrb	r2, [r7, #19]
 8013678:	9201      	str	r2, [sp, #4]
 801367a:	9300      	str	r3, [sp, #0]
 801367c:	460b      	mov	r3, r1
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013682:	69f8      	ldr	r0, [r7, #28]
 8013684:	f003 fb1e 	bl	8016cc4 <ip4_output_if_src>
 8013688:	4603      	mov	r3, r0
 801368a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801368c:	69fa      	ldr	r2, [r7, #28]
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	429a      	cmp	r2, r3
 8013692:	d004      	beq.n	801369e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013694:	69f8      	ldr	r0, [r7, #28]
 8013696:	f7f9 ff7f 	bl	800d598 <pbuf_free>
    q = NULL;
 801369a:	2300      	movs	r3, #0
 801369c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801369e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3720      	adds	r7, #32
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	0801bb80 	.word	0x0801bb80
 80136b0:	0801bd6c 	.word	0x0801bd6c
 80136b4:	0801bbd4 	.word	0x0801bbd4
 80136b8:	0801bd8c 	.word	0x0801bd8c
 80136bc:	0801bdac 	.word	0x0801bdac
 80136c0:	0801bdd0 	.word	0x0801bdd0
 80136c4:	0801bdf4 	.word	0x0801bdf4
 80136c8:	0801be18 	.word	0x0801be18

080136cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b086      	sub	sp, #24
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	4613      	mov	r3, r2
 80136d8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d101      	bne.n	80136e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80136e0:	4b39      	ldr	r3, [pc, #228]	; (80137c8 <udp_bind+0xfc>)
 80136e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d109      	bne.n	80136fe <udp_bind+0x32>
 80136ea:	4b38      	ldr	r3, [pc, #224]	; (80137cc <udp_bind+0x100>)
 80136ec:	f240 32b7 	movw	r2, #951	; 0x3b7
 80136f0:	4937      	ldr	r1, [pc, #220]	; (80137d0 <udp_bind+0x104>)
 80136f2:	4838      	ldr	r0, [pc, #224]	; (80137d4 <udp_bind+0x108>)
 80136f4:	f005 fc14 	bl	8018f20 <iprintf>
 80136f8:	f06f 030f 	mvn.w	r3, #15
 80136fc:	e060      	b.n	80137c0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013702:	4b35      	ldr	r3, [pc, #212]	; (80137d8 <udp_bind+0x10c>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	617b      	str	r3, [r7, #20]
 8013708:	e009      	b.n	801371e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801370a:	68fa      	ldr	r2, [r7, #12]
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	429a      	cmp	r2, r3
 8013710:	d102      	bne.n	8013718 <udp_bind+0x4c>
      rebind = 1;
 8013712:	2301      	movs	r3, #1
 8013714:	74fb      	strb	r3, [r7, #19]
      break;
 8013716:	e005      	b.n	8013724 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	617b      	str	r3, [r7, #20]
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d1f2      	bne.n	801370a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013724:	88fb      	ldrh	r3, [r7, #6]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d109      	bne.n	801373e <udp_bind+0x72>
    port = udp_new_port();
 801372a:	f7ff fcc5 	bl	80130b8 <udp_new_port>
 801372e:	4603      	mov	r3, r0
 8013730:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013732:	88fb      	ldrh	r3, [r7, #6]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d12c      	bne.n	8013792 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013738:	f06f 0307 	mvn.w	r3, #7
 801373c:	e040      	b.n	80137c0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801373e:	4b26      	ldr	r3, [pc, #152]	; (80137d8 <udp_bind+0x10c>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	617b      	str	r3, [r7, #20]
 8013744:	e022      	b.n	801378c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013746:	68fa      	ldr	r2, [r7, #12]
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	429a      	cmp	r2, r3
 801374c:	d01b      	beq.n	8013786 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	8a5b      	ldrh	r3, [r3, #18]
 8013752:	88fa      	ldrh	r2, [r7, #6]
 8013754:	429a      	cmp	r2, r3
 8013756:	d116      	bne.n	8013786 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	681a      	ldr	r2, [r3, #0]
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013760:	429a      	cmp	r2, r3
 8013762:	d00d      	beq.n	8013780 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d00a      	beq.n	8013780 <udp_bind+0xb4>
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d006      	beq.n	8013780 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013772:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013774:	2b00      	cmp	r3, #0
 8013776:	d003      	beq.n	8013780 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d102      	bne.n	8013786 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013780:	f06f 0307 	mvn.w	r3, #7
 8013784:	e01c      	b.n	80137c0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	617b      	str	r3, [r7, #20]
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d1d9      	bne.n	8013746 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d002      	beq.n	801379e <udp_bind+0xd2>
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	e000      	b.n	80137a0 <udp_bind+0xd4>
 801379e:	2300      	movs	r3, #0
 80137a0:	68fa      	ldr	r2, [r7, #12]
 80137a2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	88fa      	ldrh	r2, [r7, #6]
 80137a8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80137aa:	7cfb      	ldrb	r3, [r7, #19]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d106      	bne.n	80137be <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80137b0:	4b09      	ldr	r3, [pc, #36]	; (80137d8 <udp_bind+0x10c>)
 80137b2:	681a      	ldr	r2, [r3, #0]
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80137b8:	4a07      	ldr	r2, [pc, #28]	; (80137d8 <udp_bind+0x10c>)
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80137be:	2300      	movs	r3, #0
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3718      	adds	r7, #24
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	0801caf8 	.word	0x0801caf8
 80137cc:	0801bb80 	.word	0x0801bb80
 80137d0:	0801be48 	.word	0x0801be48
 80137d4:	0801bbd4 	.word	0x0801bbd4
 80137d8:	2000c9a8 	.word	0x2000c9a8

080137dc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b086      	sub	sp, #24
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	4613      	mov	r3, r2
 80137e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d109      	bne.n	8013804 <udp_connect+0x28>
 80137f0:	4b2c      	ldr	r3, [pc, #176]	; (80138a4 <udp_connect+0xc8>)
 80137f2:	f240 4235 	movw	r2, #1077	; 0x435
 80137f6:	492c      	ldr	r1, [pc, #176]	; (80138a8 <udp_connect+0xcc>)
 80137f8:	482c      	ldr	r0, [pc, #176]	; (80138ac <udp_connect+0xd0>)
 80137fa:	f005 fb91 	bl	8018f20 <iprintf>
 80137fe:	f06f 030f 	mvn.w	r3, #15
 8013802:	e04b      	b.n	801389c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d109      	bne.n	801381e <udp_connect+0x42>
 801380a:	4b26      	ldr	r3, [pc, #152]	; (80138a4 <udp_connect+0xc8>)
 801380c:	f240 4236 	movw	r2, #1078	; 0x436
 8013810:	4927      	ldr	r1, [pc, #156]	; (80138b0 <udp_connect+0xd4>)
 8013812:	4826      	ldr	r0, [pc, #152]	; (80138ac <udp_connect+0xd0>)
 8013814:	f005 fb84 	bl	8018f20 <iprintf>
 8013818:	f06f 030f 	mvn.w	r3, #15
 801381c:	e03e      	b.n	801389c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	8a5b      	ldrh	r3, [r3, #18]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d10f      	bne.n	8013846 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013826:	68f9      	ldr	r1, [r7, #12]
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	8a5b      	ldrh	r3, [r3, #18]
 801382c:	461a      	mov	r2, r3
 801382e:	68f8      	ldr	r0, [r7, #12]
 8013830:	f7ff ff4c 	bl	80136cc <udp_bind>
 8013834:	4603      	mov	r3, r0
 8013836:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013838:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d002      	beq.n	8013846 <udp_connect+0x6a>
      return err;
 8013840:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013844:	e02a      	b.n	801389c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d002      	beq.n	8013852 <udp_connect+0x76>
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	e000      	b.n	8013854 <udp_connect+0x78>
 8013852:	2300      	movs	r3, #0
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	88fa      	ldrh	r2, [r7, #6]
 801385c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	7c1b      	ldrb	r3, [r3, #16]
 8013862:	f043 0304 	orr.w	r3, r3, #4
 8013866:	b2da      	uxtb	r2, r3
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801386c:	4b11      	ldr	r3, [pc, #68]	; (80138b4 <udp_connect+0xd8>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	617b      	str	r3, [r7, #20]
 8013872:	e008      	b.n	8013886 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013874:	68fa      	ldr	r2, [r7, #12]
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	429a      	cmp	r2, r3
 801387a:	d101      	bne.n	8013880 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801387c:	2300      	movs	r3, #0
 801387e:	e00d      	b.n	801389c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	68db      	ldr	r3, [r3, #12]
 8013884:	617b      	str	r3, [r7, #20]
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d1f3      	bne.n	8013874 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801388c:	4b09      	ldr	r3, [pc, #36]	; (80138b4 <udp_connect+0xd8>)
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013894:	4a07      	ldr	r2, [pc, #28]	; (80138b4 <udp_connect+0xd8>)
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801389a:	2300      	movs	r3, #0
}
 801389c:	4618      	mov	r0, r3
 801389e:	3718      	adds	r7, #24
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	0801bb80 	.word	0x0801bb80
 80138a8:	0801be60 	.word	0x0801be60
 80138ac:	0801bbd4 	.word	0x0801bbd4
 80138b0:	0801be7c 	.word	0x0801be7c
 80138b4:	2000c9a8 	.word	0x2000c9a8

080138b8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	60f8      	str	r0, [r7, #12]
 80138c0:	60b9      	str	r1, [r7, #8]
 80138c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d107      	bne.n	80138da <udp_recv+0x22>
 80138ca:	4b08      	ldr	r3, [pc, #32]	; (80138ec <udp_recv+0x34>)
 80138cc:	f240 428a 	movw	r2, #1162	; 0x48a
 80138d0:	4907      	ldr	r1, [pc, #28]	; (80138f0 <udp_recv+0x38>)
 80138d2:	4808      	ldr	r0, [pc, #32]	; (80138f4 <udp_recv+0x3c>)
 80138d4:	f005 fb24 	bl	8018f20 <iprintf>
 80138d8:	e005      	b.n	80138e6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	68ba      	ldr	r2, [r7, #8]
 80138de:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	61da      	str	r2, [r3, #28]
}
 80138e6:	3710      	adds	r7, #16
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	0801bb80 	.word	0x0801bb80
 80138f0:	0801beb4 	.word	0x0801beb4
 80138f4:	0801bbd4 	.word	0x0801bbd4

080138f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b084      	sub	sp, #16
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d107      	bne.n	8013916 <udp_remove+0x1e>
 8013906:	4b19      	ldr	r3, [pc, #100]	; (801396c <udp_remove+0x74>)
 8013908:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801390c:	4918      	ldr	r1, [pc, #96]	; (8013970 <udp_remove+0x78>)
 801390e:	4819      	ldr	r0, [pc, #100]	; (8013974 <udp_remove+0x7c>)
 8013910:	f005 fb06 	bl	8018f20 <iprintf>
 8013914:	e026      	b.n	8013964 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013916:	4b18      	ldr	r3, [pc, #96]	; (8013978 <udp_remove+0x80>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	429a      	cmp	r2, r3
 801391e:	d105      	bne.n	801392c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013920:	4b15      	ldr	r3, [pc, #84]	; (8013978 <udp_remove+0x80>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	4a14      	ldr	r2, [pc, #80]	; (8013978 <udp_remove+0x80>)
 8013928:	6013      	str	r3, [r2, #0]
 801392a:	e017      	b.n	801395c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801392c:	4b12      	ldr	r3, [pc, #72]	; (8013978 <udp_remove+0x80>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	60fb      	str	r3, [r7, #12]
 8013932:	e010      	b.n	8013956 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d009      	beq.n	8013950 <udp_remove+0x58>
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	687a      	ldr	r2, [r7, #4]
 8013942:	429a      	cmp	r2, r3
 8013944:	d104      	bne.n	8013950 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	68da      	ldr	r2, [r3, #12]
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	60da      	str	r2, [r3, #12]
        break;
 801394e:	e005      	b.n	801395c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	68db      	ldr	r3, [r3, #12]
 8013954:	60fb      	str	r3, [r7, #12]
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d1eb      	bne.n	8013934 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801395c:	6879      	ldr	r1, [r7, #4]
 801395e:	2000      	movs	r0, #0
 8013960:	f7f8 ffdc 	bl	800c91c <memp_free>
}
 8013964:	3710      	adds	r7, #16
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
 801396a:	bf00      	nop
 801396c:	0801bb80 	.word	0x0801bb80
 8013970:	0801becc 	.word	0x0801becc
 8013974:	0801bbd4 	.word	0x0801bbd4
 8013978:	2000c9a8 	.word	0x2000c9a8

0801397c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013982:	2000      	movs	r0, #0
 8013984:	f7f8 ff54 	bl	800c830 <memp_malloc>
 8013988:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d007      	beq.n	80139a0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013990:	2220      	movs	r2, #32
 8013992:	2100      	movs	r1, #0
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f005 f9dd 	bl	8018d54 <memset>
    pcb->ttl = UDP_TTL;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	22ff      	movs	r2, #255	; 0xff
 801399e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80139a0:	687b      	ldr	r3, [r7, #4]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3708      	adds	r7, #8
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
	...

080139ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b085      	sub	sp, #20
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d01e      	beq.n	80139fa <udp_netif_ip_addr_changed+0x4e>
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d01a      	beq.n	80139fa <udp_netif_ip_addr_changed+0x4e>
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d017      	beq.n	80139fa <udp_netif_ip_addr_changed+0x4e>
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d013      	beq.n	80139fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80139d2:	4b0c      	ldr	r3, [pc, #48]	; (8013a04 <udp_netif_ip_addr_changed+0x58>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	60fb      	str	r3, [r7, #12]
 80139d8:	e00c      	b.n	80139f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681a      	ldr	r2, [r3, #0]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d103      	bne.n	80139ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	68db      	ldr	r3, [r3, #12]
 80139f2:	60fb      	str	r3, [r7, #12]
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d1ef      	bne.n	80139da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80139fa:	bf00      	nop
 80139fc:	3714      	adds	r7, #20
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bc80      	pop	{r7}
 8013a02:	4770      	bx	lr
 8013a04:	2000c9a8 	.word	0x2000c9a8

08013a08 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013a0c:	4b20      	ldr	r3, [pc, #128]	; (8013a90 <dhcp_inc_pcb_refcount+0x88>)
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d133      	bne.n	8013a7c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013a14:	4b1f      	ldr	r3, [pc, #124]	; (8013a94 <dhcp_inc_pcb_refcount+0x8c>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d005      	beq.n	8013a28 <dhcp_inc_pcb_refcount+0x20>
 8013a1c:	4b1e      	ldr	r3, [pc, #120]	; (8013a98 <dhcp_inc_pcb_refcount+0x90>)
 8013a1e:	22e5      	movs	r2, #229	; 0xe5
 8013a20:	491e      	ldr	r1, [pc, #120]	; (8013a9c <dhcp_inc_pcb_refcount+0x94>)
 8013a22:	481f      	ldr	r0, [pc, #124]	; (8013aa0 <dhcp_inc_pcb_refcount+0x98>)
 8013a24:	f005 fa7c 	bl	8018f20 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013a28:	f7ff ffa8 	bl	801397c <udp_new>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	4a19      	ldr	r2, [pc, #100]	; (8013a94 <dhcp_inc_pcb_refcount+0x8c>)
 8013a30:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013a32:	4b18      	ldr	r3, [pc, #96]	; (8013a94 <dhcp_inc_pcb_refcount+0x8c>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d102      	bne.n	8013a40 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a3e:	e024      	b.n	8013a8a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013a40:	4b14      	ldr	r3, [pc, #80]	; (8013a94 <dhcp_inc_pcb_refcount+0x8c>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	7a5a      	ldrb	r2, [r3, #9]
 8013a46:	4b13      	ldr	r3, [pc, #76]	; (8013a94 <dhcp_inc_pcb_refcount+0x8c>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	f042 0220 	orr.w	r2, r2, #32
 8013a4e:	b2d2      	uxtb	r2, r2
 8013a50:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013a52:	4b10      	ldr	r3, [pc, #64]	; (8013a94 <dhcp_inc_pcb_refcount+0x8c>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2244      	movs	r2, #68	; 0x44
 8013a58:	4912      	ldr	r1, [pc, #72]	; (8013aa4 <dhcp_inc_pcb_refcount+0x9c>)
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7ff fe36 	bl	80136cc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013a60:	4b0c      	ldr	r3, [pc, #48]	; (8013a94 <dhcp_inc_pcb_refcount+0x8c>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	2243      	movs	r2, #67	; 0x43
 8013a66:	490f      	ldr	r1, [pc, #60]	; (8013aa4 <dhcp_inc_pcb_refcount+0x9c>)
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7ff feb7 	bl	80137dc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013a6e:	4b09      	ldr	r3, [pc, #36]	; (8013a94 <dhcp_inc_pcb_refcount+0x8c>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	2200      	movs	r2, #0
 8013a74:	490c      	ldr	r1, [pc, #48]	; (8013aa8 <dhcp_inc_pcb_refcount+0xa0>)
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7ff ff1e 	bl	80138b8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013a7c:	4b04      	ldr	r3, [pc, #16]	; (8013a90 <dhcp_inc_pcb_refcount+0x88>)
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	3301      	adds	r3, #1
 8013a82:	b2da      	uxtb	r2, r3
 8013a84:	4b02      	ldr	r3, [pc, #8]	; (8013a90 <dhcp_inc_pcb_refcount+0x88>)
 8013a86:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013a88:	2300      	movs	r3, #0
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	2000c9d8 	.word	0x2000c9d8
 8013a94:	2000c9d4 	.word	0x2000c9d4
 8013a98:	0801bee4 	.word	0x0801bee4
 8013a9c:	0801bf1c 	.word	0x0801bf1c
 8013aa0:	0801bf44 	.word	0x0801bf44
 8013aa4:	0801caf8 	.word	0x0801caf8
 8013aa8:	080152c5 	.word	0x080152c5

08013aac <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013ab0:	4b0e      	ldr	r3, [pc, #56]	; (8013aec <dhcp_dec_pcb_refcount+0x40>)
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d105      	bne.n	8013ac4 <dhcp_dec_pcb_refcount+0x18>
 8013ab8:	4b0d      	ldr	r3, [pc, #52]	; (8013af0 <dhcp_dec_pcb_refcount+0x44>)
 8013aba:	22ff      	movs	r2, #255	; 0xff
 8013abc:	490d      	ldr	r1, [pc, #52]	; (8013af4 <dhcp_dec_pcb_refcount+0x48>)
 8013abe:	480e      	ldr	r0, [pc, #56]	; (8013af8 <dhcp_dec_pcb_refcount+0x4c>)
 8013ac0:	f005 fa2e 	bl	8018f20 <iprintf>
  dhcp_pcb_refcount--;
 8013ac4:	4b09      	ldr	r3, [pc, #36]	; (8013aec <dhcp_dec_pcb_refcount+0x40>)
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	3b01      	subs	r3, #1
 8013aca:	b2da      	uxtb	r2, r3
 8013acc:	4b07      	ldr	r3, [pc, #28]	; (8013aec <dhcp_dec_pcb_refcount+0x40>)
 8013ace:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013ad0:	4b06      	ldr	r3, [pc, #24]	; (8013aec <dhcp_dec_pcb_refcount+0x40>)
 8013ad2:	781b      	ldrb	r3, [r3, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d107      	bne.n	8013ae8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013ad8:	4b08      	ldr	r3, [pc, #32]	; (8013afc <dhcp_dec_pcb_refcount+0x50>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7ff ff0b 	bl	80138f8 <udp_remove>
    dhcp_pcb = NULL;
 8013ae2:	4b06      	ldr	r3, [pc, #24]	; (8013afc <dhcp_dec_pcb_refcount+0x50>)
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	601a      	str	r2, [r3, #0]
  }
}
 8013ae8:	bf00      	nop
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	2000c9d8 	.word	0x2000c9d8
 8013af0:	0801bee4 	.word	0x0801bee4
 8013af4:	0801bf6c 	.word	0x0801bf6c
 8013af8:	0801bf44 	.word	0x0801bf44
 8013afc:	2000c9d4 	.word	0x2000c9d4

08013b00 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b084      	sub	sp, #16
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b0c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013b0e:	210c      	movs	r1, #12
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	f001 f819 	bl	8014b48 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013b16:	4b06      	ldr	r3, [pc, #24]	; (8013b30 <dhcp_handle_nak+0x30>)
 8013b18:	4a05      	ldr	r2, [pc, #20]	; (8013b30 <dhcp_handle_nak+0x30>)
 8013b1a:	4905      	ldr	r1, [pc, #20]	; (8013b30 <dhcp_handle_nak+0x30>)
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f7f9 f89b 	bl	800cc58 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f000 fc0c 	bl	8014340 <dhcp_discover>
}
 8013b28:	bf00      	nop
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	0801caf8 	.word	0x0801caf8

08013b34 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b084      	sub	sp, #16
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b40:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013b42:	2108      	movs	r1, #8
 8013b44:	68f8      	ldr	r0, [r7, #12]
 8013b46:	f000 ffff 	bl	8014b48 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	331c      	adds	r3, #28
 8013b4e:	2200      	movs	r2, #0
 8013b50:	4619      	mov	r1, r3
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f002 fb00 	bl	8016158 <etharp_query>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	799b      	ldrb	r3, [r3, #6]
 8013b60:	2bff      	cmp	r3, #255	; 0xff
 8013b62:	d005      	beq.n	8013b70 <dhcp_check+0x3c>
    dhcp->tries++;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	799b      	ldrb	r3, [r3, #6]
 8013b68:	3301      	adds	r3, #1
 8013b6a:	b2da      	uxtb	r2, r3
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013b70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013b74:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013b76:	893b      	ldrh	r3, [r7, #8]
 8013b78:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013b7c:	4a06      	ldr	r2, [pc, #24]	; (8013b98 <dhcp_check+0x64>)
 8013b7e:	fb82 1203 	smull	r1, r2, r2, r3
 8013b82:	1152      	asrs	r2, r2, #5
 8013b84:	17db      	asrs	r3, r3, #31
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013b8e:	bf00      	nop
 8013b90:	3710      	adds	r7, #16
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	10624dd3 	.word	0x10624dd3

08013b9c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013baa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013bac:	4b0c      	ldr	r3, [pc, #48]	; (8013be0 <dhcp_handle_offer+0x44>)
 8013bae:	789b      	ldrb	r3, [r3, #2]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d011      	beq.n	8013bd8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013bba:	4b0a      	ldr	r3, [pc, #40]	; (8013be4 <dhcp_handle_offer+0x48>)
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7f8 f8c2 	bl	800bd48 <lwip_htonl>
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	691a      	ldr	r2, [r3, #16]
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 f808 	bl	8013be8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013bd8:	bf00      	nop
 8013bda:	3710      	adds	r7, #16
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	2000c9cc 	.word	0x2000c9cc
 8013be4:	2000c9ac 	.word	0x2000c9ac

08013be8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013be8:	b5b0      	push	{r4, r5, r7, lr}
 8013bea:	b08a      	sub	sp, #40	; 0x28
 8013bec:	af02      	add	r7, sp, #8
 8013bee:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d109      	bne.n	8013c0a <dhcp_select+0x22>
 8013bf6:	4b71      	ldr	r3, [pc, #452]	; (8013dbc <dhcp_select+0x1d4>)
 8013bf8:	f240 1277 	movw	r2, #375	; 0x177
 8013bfc:	4970      	ldr	r1, [pc, #448]	; (8013dc0 <dhcp_select+0x1d8>)
 8013bfe:	4871      	ldr	r0, [pc, #452]	; (8013dc4 <dhcp_select+0x1dc>)
 8013c00:	f005 f98e 	bl	8018f20 <iprintf>
 8013c04:	f06f 030f 	mvn.w	r3, #15
 8013c08:	e0d3      	b.n	8013db2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c0e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013c10:	69bb      	ldr	r3, [r7, #24]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d109      	bne.n	8013c2a <dhcp_select+0x42>
 8013c16:	4b69      	ldr	r3, [pc, #420]	; (8013dbc <dhcp_select+0x1d4>)
 8013c18:	f240 1279 	movw	r2, #377	; 0x179
 8013c1c:	496a      	ldr	r1, [pc, #424]	; (8013dc8 <dhcp_select+0x1e0>)
 8013c1e:	4869      	ldr	r0, [pc, #420]	; (8013dc4 <dhcp_select+0x1dc>)
 8013c20:	f005 f97e 	bl	8018f20 <iprintf>
 8013c24:	f06f 0305 	mvn.w	r3, #5
 8013c28:	e0c3      	b.n	8013db2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013c2a:	2101      	movs	r1, #1
 8013c2c:	69b8      	ldr	r0, [r7, #24]
 8013c2e:	f000 ff8b 	bl	8014b48 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013c32:	f107 030c 	add.w	r3, r7, #12
 8013c36:	2203      	movs	r2, #3
 8013c38:	69b9      	ldr	r1, [r7, #24]
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f001 fc10 	bl	8015460 <dhcp_create_msg>
 8013c40:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f000 8085 	beq.w	8013d54 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013c50:	89b8      	ldrh	r0, [r7, #12]
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c58:	2302      	movs	r3, #2
 8013c5a:	2239      	movs	r2, #57	; 0x39
 8013c5c:	f000 ff8e 	bl	8014b7c <dhcp_option>
 8013c60:	4603      	mov	r3, r0
 8013c62:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013c64:	89b8      	ldrh	r0, [r7, #12]
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c70:	461a      	mov	r2, r3
 8013c72:	f000 ffdd 	bl	8014c30 <dhcp_option_short>
 8013c76:	4603      	mov	r3, r0
 8013c78:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013c7a:	89b8      	ldrh	r0, [r7, #12]
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c82:	2304      	movs	r3, #4
 8013c84:	2232      	movs	r2, #50	; 0x32
 8013c86:	f000 ff79 	bl	8014b7c <dhcp_option>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013c8e:	89bc      	ldrh	r4, [r7, #12]
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	69db      	ldr	r3, [r3, #28]
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7f8 f854 	bl	800bd48 <lwip_htonl>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	4629      	mov	r1, r5
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	f000 fff4 	bl	8014c94 <dhcp_option_long>
 8013cac:	4603      	mov	r3, r0
 8013cae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013cb0:	89b8      	ldrh	r0, [r7, #12]
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013cb8:	2304      	movs	r3, #4
 8013cba:	2236      	movs	r2, #54	; 0x36
 8013cbc:	f000 ff5e 	bl	8014b7c <dhcp_option>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013cc4:	89bc      	ldrh	r4, [r7, #12]
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013ccc:	69bb      	ldr	r3, [r7, #24]
 8013cce:	699b      	ldr	r3, [r3, #24]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7f8 f839 	bl	800bd48 <lwip_htonl>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	461a      	mov	r2, r3
 8013cda:	4629      	mov	r1, r5
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f000 ffd9 	bl	8014c94 <dhcp_option_long>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013ce6:	89b8      	ldrh	r0, [r7, #12]
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013cee:	2303      	movs	r3, #3
 8013cf0:	2237      	movs	r2, #55	; 0x37
 8013cf2:	f000 ff43 	bl	8014b7c <dhcp_option>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	77bb      	strb	r3, [r7, #30]
 8013cfe:	e00e      	b.n	8013d1e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013d00:	89b8      	ldrh	r0, [r7, #12]
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d08:	7fbb      	ldrb	r3, [r7, #30]
 8013d0a:	4a30      	ldr	r2, [pc, #192]	; (8013dcc <dhcp_select+0x1e4>)
 8013d0c:	5cd3      	ldrb	r3, [r2, r3]
 8013d0e:	461a      	mov	r2, r3
 8013d10:	f000 ff68 	bl	8014be4 <dhcp_option_byte>
 8013d14:	4603      	mov	r3, r0
 8013d16:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013d18:	7fbb      	ldrb	r3, [r7, #30]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	77bb      	strb	r3, [r7, #30]
 8013d1e:	7fbb      	ldrb	r3, [r7, #30]
 8013d20:	2b02      	cmp	r3, #2
 8013d22:	d9ed      	bls.n	8013d00 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013d24:	89b8      	ldrh	r0, [r7, #12]
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	33f0      	adds	r3, #240	; 0xf0
 8013d2a:	697a      	ldr	r2, [r7, #20]
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	f001 fc6d 	bl	801560c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013d32:	4b27      	ldr	r3, [pc, #156]	; (8013dd0 <dhcp_select+0x1e8>)
 8013d34:	6818      	ldr	r0, [r3, #0]
 8013d36:	4b27      	ldr	r3, [pc, #156]	; (8013dd4 <dhcp_select+0x1ec>)
 8013d38:	9301      	str	r3, [sp, #4]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	9300      	str	r3, [sp, #0]
 8013d3e:	2343      	movs	r3, #67	; 0x43
 8013d40:	4a25      	ldr	r2, [pc, #148]	; (8013dd8 <dhcp_select+0x1f0>)
 8013d42:	6979      	ldr	r1, [r7, #20]
 8013d44:	f7ff fbdc 	bl	8013500 <udp_sendto_if_src>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013d4c:	6978      	ldr	r0, [r7, #20]
 8013d4e:	f7f9 fc23 	bl	800d598 <pbuf_free>
 8013d52:	e001      	b.n	8013d58 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013d54:	23ff      	movs	r3, #255	; 0xff
 8013d56:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013d58:	69bb      	ldr	r3, [r7, #24]
 8013d5a:	799b      	ldrb	r3, [r3, #6]
 8013d5c:	2bff      	cmp	r3, #255	; 0xff
 8013d5e:	d005      	beq.n	8013d6c <dhcp_select+0x184>
    dhcp->tries++;
 8013d60:	69bb      	ldr	r3, [r7, #24]
 8013d62:	799b      	ldrb	r3, [r3, #6]
 8013d64:	3301      	adds	r3, #1
 8013d66:	b2da      	uxtb	r2, r3
 8013d68:	69bb      	ldr	r3, [r7, #24]
 8013d6a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013d6c:	69bb      	ldr	r3, [r7, #24]
 8013d6e:	799b      	ldrb	r3, [r3, #6]
 8013d70:	2b05      	cmp	r3, #5
 8013d72:	d80d      	bhi.n	8013d90 <dhcp_select+0x1a8>
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	799b      	ldrb	r3, [r3, #6]
 8013d78:	461a      	mov	r2, r3
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	4093      	lsls	r3, r2
 8013d7e:	b29b      	uxth	r3, r3
 8013d80:	461a      	mov	r2, r3
 8013d82:	0152      	lsls	r2, r2, #5
 8013d84:	1ad2      	subs	r2, r2, r3
 8013d86:	0092      	lsls	r2, r2, #2
 8013d88:	4413      	add	r3, r2
 8013d8a:	00db      	lsls	r3, r3, #3
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	e001      	b.n	8013d94 <dhcp_select+0x1ac>
 8013d90:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013d94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013d96:	89fb      	ldrh	r3, [r7, #14]
 8013d98:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013d9c:	4a0f      	ldr	r2, [pc, #60]	; (8013ddc <dhcp_select+0x1f4>)
 8013d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8013da2:	1152      	asrs	r2, r2, #5
 8013da4:	17db      	asrs	r3, r3, #31
 8013da6:	1ad3      	subs	r3, r2, r3
 8013da8:	b29a      	uxth	r2, r3
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3720      	adds	r7, #32
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bdb0      	pop	{r4, r5, r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	0801bee4 	.word	0x0801bee4
 8013dc0:	0801bf90 	.word	0x0801bf90
 8013dc4:	0801bf44 	.word	0x0801bf44
 8013dc8:	0801bfac 	.word	0x0801bfac
 8013dcc:	200000a8 	.word	0x200000a8
 8013dd0:	2000c9d4 	.word	0x2000c9d4
 8013dd4:	0801caf8 	.word	0x0801caf8
 8013dd8:	0801cafc 	.word	0x0801cafc
 8013ddc:	10624dd3 	.word	0x10624dd3

08013de0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013de6:	4b27      	ldr	r3, [pc, #156]	; (8013e84 <dhcp_coarse_tmr+0xa4>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	607b      	str	r3, [r7, #4]
 8013dec:	e042      	b.n	8013e74 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013df2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d039      	beq.n	8013e6e <dhcp_coarse_tmr+0x8e>
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	795b      	ldrb	r3, [r3, #5]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d035      	beq.n	8013e6e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	8a9b      	ldrh	r3, [r3, #20]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d012      	beq.n	8013e30 <dhcp_coarse_tmr+0x50>
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	8a5b      	ldrh	r3, [r3, #18]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	825a      	strh	r2, [r3, #18]
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	8a5a      	ldrh	r2, [r3, #18]
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	8a9b      	ldrh	r3, [r3, #20]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d106      	bne.n	8013e30 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f000 fdf6 	bl	8014a14 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f000 f969 	bl	8014100 <dhcp_start>
 8013e2e:	e01e      	b.n	8013e6e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	8a1b      	ldrh	r3, [r3, #16]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d00b      	beq.n	8013e50 <dhcp_coarse_tmr+0x70>
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	8a1b      	ldrh	r3, [r3, #16]
 8013e3c:	1e5a      	subs	r2, r3, #1
 8013e3e:	b291      	uxth	r1, r2
 8013e40:	683a      	ldr	r2, [r7, #0]
 8013e42:	8211      	strh	r1, [r2, #16]
 8013e44:	2b01      	cmp	r3, #1
 8013e46:	d103      	bne.n	8013e50 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 f8c6 	bl	8013fda <dhcp_t2_timeout>
 8013e4e:	e00e      	b.n	8013e6e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	89db      	ldrh	r3, [r3, #14]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00a      	beq.n	8013e6e <dhcp_coarse_tmr+0x8e>
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	89db      	ldrh	r3, [r3, #14]
 8013e5c:	1e5a      	subs	r2, r3, #1
 8013e5e:	b291      	uxth	r1, r2
 8013e60:	683a      	ldr	r2, [r7, #0]
 8013e62:	81d1      	strh	r1, [r2, #14]
 8013e64:	2b01      	cmp	r3, #1
 8013e66:	d102      	bne.n	8013e6e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f000 f888 	bl	8013f7e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	607b      	str	r3, [r7, #4]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d1b9      	bne.n	8013dee <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013e7a:	bf00      	nop
 8013e7c:	bf00      	nop
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}
 8013e84:	2000c940 	.word	0x2000c940

08013e88 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013e8e:	4b16      	ldr	r3, [pc, #88]	; (8013ee8 <dhcp_fine_tmr+0x60>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	607b      	str	r3, [r7, #4]
 8013e94:	e020      	b.n	8013ed8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e9a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d017      	beq.n	8013ed2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	891b      	ldrh	r3, [r3, #8]
 8013ea6:	2b01      	cmp	r3, #1
 8013ea8:	d906      	bls.n	8013eb8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	891b      	ldrh	r3, [r3, #8]
 8013eae:	3b01      	subs	r3, #1
 8013eb0:	b29a      	uxth	r2, r3
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	811a      	strh	r2, [r3, #8]
 8013eb6:	e00c      	b.n	8013ed2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	891b      	ldrh	r3, [r3, #8]
 8013ebc:	2b01      	cmp	r3, #1
 8013ebe:	d108      	bne.n	8013ed2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	891b      	ldrh	r3, [r3, #8]
 8013ec4:	3b01      	subs	r3, #1
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f000 f80d 	bl	8013eec <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	607b      	str	r3, [r7, #4]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d1db      	bne.n	8013e96 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013ede:	bf00      	nop
 8013ee0:	bf00      	nop
 8013ee2:	3708      	adds	r7, #8
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	2000c940 	.word	0x2000c940

08013eec <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	795b      	ldrb	r3, [r3, #5]
 8013efe:	2b0c      	cmp	r3, #12
 8013f00:	d003      	beq.n	8013f0a <dhcp_timeout+0x1e>
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	795b      	ldrb	r3, [r3, #5]
 8013f06:	2b06      	cmp	r3, #6
 8013f08:	d103      	bne.n	8013f12 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f000 fa18 	bl	8014340 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013f10:	e031      	b.n	8013f76 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	795b      	ldrb	r3, [r3, #5]
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d10e      	bne.n	8013f38 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	799b      	ldrb	r3, [r3, #6]
 8013f1e:	2b05      	cmp	r3, #5
 8013f20:	d803      	bhi.n	8013f2a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013f22:	6878      	ldr	r0, [r7, #4]
 8013f24:	f7ff fe60 	bl	8013be8 <dhcp_select>
}
 8013f28:	e025      	b.n	8013f76 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f000 fd72 	bl	8014a14 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f000 f8e5 	bl	8014100 <dhcp_start>
}
 8013f36:	e01e      	b.n	8013f76 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	795b      	ldrb	r3, [r3, #5]
 8013f3c:	2b08      	cmp	r3, #8
 8013f3e:	d10b      	bne.n	8013f58 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	799b      	ldrb	r3, [r3, #6]
 8013f44:	2b01      	cmp	r3, #1
 8013f46:	d803      	bhi.n	8013f50 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f7ff fdf3 	bl	8013b34 <dhcp_check>
}
 8013f4e:	e012      	b.n	8013f76 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f000 fa97 	bl	8014484 <dhcp_bind>
}
 8013f56:	e00e      	b.n	8013f76 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	795b      	ldrb	r3, [r3, #5]
 8013f5c:	2b03      	cmp	r3, #3
 8013f5e:	d10a      	bne.n	8013f76 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	799b      	ldrb	r3, [r3, #6]
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d803      	bhi.n	8013f70 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f000 fc9d 	bl	80148a8 <dhcp_reboot>
}
 8013f6e:	e002      	b.n	8013f76 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f000 f9e5 	bl	8014340 <dhcp_discover>
}
 8013f76:	bf00      	nop
 8013f78:	3710      	adds	r7, #16
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}

08013f7e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013f7e:	b580      	push	{r7, lr}
 8013f80:	b084      	sub	sp, #16
 8013f82:	af00      	add	r7, sp, #0
 8013f84:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f8a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	795b      	ldrb	r3, [r3, #5]
 8013f90:	2b01      	cmp	r3, #1
 8013f92:	d007      	beq.n	8013fa4 <dhcp_t1_timeout+0x26>
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	795b      	ldrb	r3, [r3, #5]
 8013f98:	2b0a      	cmp	r3, #10
 8013f9a:	d003      	beq.n	8013fa4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013fa0:	2b05      	cmp	r3, #5
 8013fa2:	d116      	bne.n	8013fd2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f000 fb47 	bl	8014638 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	899b      	ldrh	r3, [r3, #12]
 8013fae:	461a      	mov	r2, r3
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	8a5b      	ldrh	r3, [r3, #18]
 8013fb4:	1ad3      	subs	r3, r2, r3
 8013fb6:	2b01      	cmp	r3, #1
 8013fb8:	dd0b      	ble.n	8013fd2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	899b      	ldrh	r3, [r3, #12]
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	8a5b      	ldrh	r3, [r3, #18]
 8013fc4:	1ad3      	subs	r3, r2, r3
 8013fc6:	0fda      	lsrs	r2, r3, #31
 8013fc8:	4413      	add	r3, r2
 8013fca:	105b      	asrs	r3, r3, #1
 8013fcc:	b29a      	uxth	r2, r3
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013fd2:	bf00      	nop
 8013fd4:	3710      	adds	r7, #16
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b084      	sub	sp, #16
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	795b      	ldrb	r3, [r3, #5]
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d00b      	beq.n	8014008 <dhcp_t2_timeout+0x2e>
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	795b      	ldrb	r3, [r3, #5]
 8013ff4:	2b0a      	cmp	r3, #10
 8013ff6:	d007      	beq.n	8014008 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ffc:	2b05      	cmp	r3, #5
 8013ffe:	d003      	beq.n	8014008 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	795b      	ldrb	r3, [r3, #5]
 8014004:	2b04      	cmp	r3, #4
 8014006:	d116      	bne.n	8014036 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 fbb1 	bl	8014770 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	8a9b      	ldrh	r3, [r3, #20]
 8014012:	461a      	mov	r2, r3
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	8a5b      	ldrh	r3, [r3, #18]
 8014018:	1ad3      	subs	r3, r2, r3
 801401a:	2b01      	cmp	r3, #1
 801401c:	dd0b      	ble.n	8014036 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	8a9b      	ldrh	r3, [r3, #20]
 8014022:	461a      	mov	r2, r3
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	8a5b      	ldrh	r3, [r3, #18]
 8014028:	1ad3      	subs	r3, r2, r3
 801402a:	0fda      	lsrs	r2, r3, #31
 801402c:	4413      	add	r3, r2
 801402e:	105b      	asrs	r3, r3, #1
 8014030:	b29a      	uxth	r2, r3
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014036:	bf00      	nop
 8014038:	3710      	adds	r7, #16
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
	...

08014040 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b084      	sub	sp, #16
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801404e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	2200      	movs	r2, #0
 8014054:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	2200      	movs	r2, #0
 801405a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801405c:	4b26      	ldr	r3, [pc, #152]	; (80140f8 <dhcp_handle_ack+0xb8>)
 801405e:	78db      	ldrb	r3, [r3, #3]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d003      	beq.n	801406c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014064:	4b25      	ldr	r3, [pc, #148]	; (80140fc <dhcp_handle_ack+0xbc>)
 8014066:	68da      	ldr	r2, [r3, #12]
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801406c:	4b22      	ldr	r3, [pc, #136]	; (80140f8 <dhcp_handle_ack+0xb8>)
 801406e:	791b      	ldrb	r3, [r3, #4]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d004      	beq.n	801407e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014074:	4b21      	ldr	r3, [pc, #132]	; (80140fc <dhcp_handle_ack+0xbc>)
 8014076:	691a      	ldr	r2, [r3, #16]
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	62da      	str	r2, [r3, #44]	; 0x2c
 801407c:	e004      	b.n	8014088 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014082:	085a      	lsrs	r2, r3, #1
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014088:	4b1b      	ldr	r3, [pc, #108]	; (80140f8 <dhcp_handle_ack+0xb8>)
 801408a:	795b      	ldrb	r3, [r3, #5]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d004      	beq.n	801409a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014090:	4b1a      	ldr	r3, [pc, #104]	; (80140fc <dhcp_handle_ack+0xbc>)
 8014092:	695a      	ldr	r2, [r3, #20]
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	631a      	str	r2, [r3, #48]	; 0x30
 8014098:	e007      	b.n	80140aa <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801409e:	4613      	mov	r3, r2
 80140a0:	00db      	lsls	r3, r3, #3
 80140a2:	1a9b      	subs	r3, r3, r2
 80140a4:	08da      	lsrs	r2, r3, #3
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	691a      	ldr	r2, [r3, #16]
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80140b2:	4b11      	ldr	r3, [pc, #68]	; (80140f8 <dhcp_handle_ack+0xb8>)
 80140b4:	799b      	ldrb	r3, [r3, #6]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d00b      	beq.n	80140d2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80140ba:	4b10      	ldr	r3, [pc, #64]	; (80140fc <dhcp_handle_ack+0xbc>)
 80140bc:	699b      	ldr	r3, [r3, #24]
 80140be:	4618      	mov	r0, r3
 80140c0:	f7f7 fe42 	bl	800bd48 <lwip_htonl>
 80140c4:	4602      	mov	r2, r0
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	2201      	movs	r2, #1
 80140ce:	71da      	strb	r2, [r3, #7]
 80140d0:	e002      	b.n	80140d8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	2200      	movs	r2, #0
 80140d6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80140d8:	4b07      	ldr	r3, [pc, #28]	; (80140f8 <dhcp_handle_ack+0xb8>)
 80140da:	79db      	ldrb	r3, [r3, #7]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d007      	beq.n	80140f0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80140e0:	4b06      	ldr	r3, [pc, #24]	; (80140fc <dhcp_handle_ack+0xbc>)
 80140e2:	69db      	ldr	r3, [r3, #28]
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7f7 fe2f 	bl	800bd48 <lwip_htonl>
 80140ea:	4602      	mov	r2, r0
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80140f0:	bf00      	nop
 80140f2:	3710      	adds	r7, #16
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}
 80140f8:	2000c9cc 	.word	0x2000c9cc
 80140fc:	2000c9ac 	.word	0x2000c9ac

08014100 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b084      	sub	sp, #16
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d109      	bne.n	8014122 <dhcp_start+0x22>
 801410e:	4b37      	ldr	r3, [pc, #220]	; (80141ec <dhcp_start+0xec>)
 8014110:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014114:	4936      	ldr	r1, [pc, #216]	; (80141f0 <dhcp_start+0xf0>)
 8014116:	4837      	ldr	r0, [pc, #220]	; (80141f4 <dhcp_start+0xf4>)
 8014118:	f004 ff02 	bl	8018f20 <iprintf>
 801411c:	f06f 030f 	mvn.w	r3, #15
 8014120:	e060      	b.n	80141e4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014128:	f003 0301 	and.w	r3, r3, #1
 801412c:	2b00      	cmp	r3, #0
 801412e:	d109      	bne.n	8014144 <dhcp_start+0x44>
 8014130:	4b2e      	ldr	r3, [pc, #184]	; (80141ec <dhcp_start+0xec>)
 8014132:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014136:	4930      	ldr	r1, [pc, #192]	; (80141f8 <dhcp_start+0xf8>)
 8014138:	482e      	ldr	r0, [pc, #184]	; (80141f4 <dhcp_start+0xf4>)
 801413a:	f004 fef1 	bl	8018f20 <iprintf>
 801413e:	f06f 030f 	mvn.w	r3, #15
 8014142:	e04f      	b.n	80141e4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014148:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801414e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014152:	d202      	bcs.n	801415a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014154:	f04f 33ff 	mov.w	r3, #4294967295
 8014158:	e044      	b.n	80141e4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d10d      	bne.n	801417c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014160:	2034      	movs	r0, #52	; 0x34
 8014162:	f7f8 f9c1 	bl	800c4e8 <mem_malloc>
 8014166:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d102      	bne.n	8014174 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801416e:	f04f 33ff 	mov.w	r3, #4294967295
 8014172:	e037      	b.n	80141e4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	68fa      	ldr	r2, [r7, #12]
 8014178:	625a      	str	r2, [r3, #36]	; 0x24
 801417a:	e005      	b.n	8014188 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	791b      	ldrb	r3, [r3, #4]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d001      	beq.n	8014188 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014184:	f7ff fc92 	bl	8013aac <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014188:	2234      	movs	r2, #52	; 0x34
 801418a:	2100      	movs	r1, #0
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f004 fde1 	bl	8018d54 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014192:	f7ff fc39 	bl	8013a08 <dhcp_inc_pcb_refcount>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d002      	beq.n	80141a2 <dhcp_start+0xa2>
    return ERR_MEM;
 801419c:	f04f 33ff 	mov.w	r3, #4294967295
 80141a0:	e020      	b.n	80141e4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	2201      	movs	r2, #1
 80141a6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141ae:	f003 0304 	and.w	r3, r3, #4
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d105      	bne.n	80141c2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80141b6:	2102      	movs	r1, #2
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f000 fcc5 	bl	8014b48 <dhcp_set_state>
    return ERR_OK;
 80141be:	2300      	movs	r3, #0
 80141c0:	e010      	b.n	80141e4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f000 f8bc 	bl	8014340 <dhcp_discover>
 80141c8:	4603      	mov	r3, r0
 80141ca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80141cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d005      	beq.n	80141e0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f000 fc1d 	bl	8014a14 <dhcp_release_and_stop>
    return ERR_MEM;
 80141da:	f04f 33ff 	mov.w	r3, #4294967295
 80141de:	e001      	b.n	80141e4 <dhcp_start+0xe4>
  }
  return result;
 80141e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3710      	adds	r7, #16
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	0801bee4 	.word	0x0801bee4
 80141f0:	0801bfc8 	.word	0x0801bfc8
 80141f4:	0801bf44 	.word	0x0801bf44
 80141f8:	0801c00c 	.word	0x0801c00c

080141fc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d107      	bne.n	801421c <dhcp_arp_reply+0x20>
 801420c:	4b0e      	ldr	r3, [pc, #56]	; (8014248 <dhcp_arp_reply+0x4c>)
 801420e:	f240 328b 	movw	r2, #907	; 0x38b
 8014212:	490e      	ldr	r1, [pc, #56]	; (801424c <dhcp_arp_reply+0x50>)
 8014214:	480e      	ldr	r0, [pc, #56]	; (8014250 <dhcp_arp_reply+0x54>)
 8014216:	f004 fe83 	bl	8018f20 <iprintf>
 801421a:	e012      	b.n	8014242 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014220:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d00c      	beq.n	8014242 <dhcp_arp_reply+0x46>
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	795b      	ldrb	r3, [r3, #5]
 801422c:	2b08      	cmp	r3, #8
 801422e:	d108      	bne.n	8014242 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	681a      	ldr	r2, [r3, #0]
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	69db      	ldr	r3, [r3, #28]
 8014238:	429a      	cmp	r2, r3
 801423a:	d102      	bne.n	8014242 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 f809 	bl	8014254 <dhcp_decline>
    }
  }
}
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	0801bee4 	.word	0x0801bee4
 801424c:	0801bfc8 	.word	0x0801bfc8
 8014250:	0801bf44 	.word	0x0801bf44

08014254 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014254:	b5b0      	push	{r4, r5, r7, lr}
 8014256:	b08a      	sub	sp, #40	; 0x28
 8014258:	af02      	add	r7, sp, #8
 801425a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014260:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014262:	210c      	movs	r1, #12
 8014264:	69b8      	ldr	r0, [r7, #24]
 8014266:	f000 fc6f 	bl	8014b48 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801426a:	f107 030c 	add.w	r3, r7, #12
 801426e:	2204      	movs	r2, #4
 8014270:	69b9      	ldr	r1, [r7, #24]
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f001 f8f4 	bl	8015460 <dhcp_create_msg>
 8014278:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d035      	beq.n	80142ec <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014286:	89b8      	ldrh	r0, [r7, #12]
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801428e:	2304      	movs	r3, #4
 8014290:	2232      	movs	r2, #50	; 0x32
 8014292:	f000 fc73 	bl	8014b7c <dhcp_option>
 8014296:	4603      	mov	r3, r0
 8014298:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801429a:	89bc      	ldrh	r4, [r7, #12]
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80142a2:	69bb      	ldr	r3, [r7, #24]
 80142a4:	69db      	ldr	r3, [r3, #28]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7f7 fd4e 	bl	800bd48 <lwip_htonl>
 80142ac:	4603      	mov	r3, r0
 80142ae:	461a      	mov	r2, r3
 80142b0:	4629      	mov	r1, r5
 80142b2:	4620      	mov	r0, r4
 80142b4:	f000 fcee 	bl	8014c94 <dhcp_option_long>
 80142b8:	4603      	mov	r3, r0
 80142ba:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80142bc:	89b8      	ldrh	r0, [r7, #12]
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	33f0      	adds	r3, #240	; 0xf0
 80142c2:	697a      	ldr	r2, [r7, #20]
 80142c4:	4619      	mov	r1, r3
 80142c6:	f001 f9a1 	bl	801560c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80142ca:	4b19      	ldr	r3, [pc, #100]	; (8014330 <dhcp_decline+0xdc>)
 80142cc:	6818      	ldr	r0, [r3, #0]
 80142ce:	4b19      	ldr	r3, [pc, #100]	; (8014334 <dhcp_decline+0xe0>)
 80142d0:	9301      	str	r3, [sp, #4]
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	9300      	str	r3, [sp, #0]
 80142d6:	2343      	movs	r3, #67	; 0x43
 80142d8:	4a17      	ldr	r2, [pc, #92]	; (8014338 <dhcp_decline+0xe4>)
 80142da:	6979      	ldr	r1, [r7, #20]
 80142dc:	f7ff f910 	bl	8013500 <udp_sendto_if_src>
 80142e0:	4603      	mov	r3, r0
 80142e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80142e4:	6978      	ldr	r0, [r7, #20]
 80142e6:	f7f9 f957 	bl	800d598 <pbuf_free>
 80142ea:	e001      	b.n	80142f0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80142ec:	23ff      	movs	r3, #255	; 0xff
 80142ee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80142f0:	69bb      	ldr	r3, [r7, #24]
 80142f2:	799b      	ldrb	r3, [r3, #6]
 80142f4:	2bff      	cmp	r3, #255	; 0xff
 80142f6:	d005      	beq.n	8014304 <dhcp_decline+0xb0>
    dhcp->tries++;
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	799b      	ldrb	r3, [r3, #6]
 80142fc:	3301      	adds	r3, #1
 80142fe:	b2da      	uxtb	r2, r3
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014304:	f242 7310 	movw	r3, #10000	; 0x2710
 8014308:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801430a:	89fb      	ldrh	r3, [r7, #14]
 801430c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014310:	4a0a      	ldr	r2, [pc, #40]	; (801433c <dhcp_decline+0xe8>)
 8014312:	fb82 1203 	smull	r1, r2, r2, r3
 8014316:	1152      	asrs	r2, r2, #5
 8014318:	17db      	asrs	r3, r3, #31
 801431a:	1ad3      	subs	r3, r2, r3
 801431c:	b29a      	uxth	r2, r3
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014322:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014326:	4618      	mov	r0, r3
 8014328:	3720      	adds	r7, #32
 801432a:	46bd      	mov	sp, r7
 801432c:	bdb0      	pop	{r4, r5, r7, pc}
 801432e:	bf00      	nop
 8014330:	2000c9d4 	.word	0x2000c9d4
 8014334:	0801caf8 	.word	0x0801caf8
 8014338:	0801cafc 	.word	0x0801cafc
 801433c:	10624dd3 	.word	0x10624dd3

08014340 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b08a      	sub	sp, #40	; 0x28
 8014344:	af02      	add	r7, sp, #8
 8014346:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801434c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801434e:	2300      	movs	r3, #0
 8014350:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	2200      	movs	r2, #0
 8014356:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014358:	2106      	movs	r1, #6
 801435a:	69b8      	ldr	r0, [r7, #24]
 801435c:	f000 fbf4 	bl	8014b48 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014360:	f107 0308 	add.w	r3, r7, #8
 8014364:	2201      	movs	r2, #1
 8014366:	69b9      	ldr	r1, [r7, #24]
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f001 f879 	bl	8015460 <dhcp_create_msg>
 801436e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d04b      	beq.n	801440e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014376:	693b      	ldr	r3, [r7, #16]
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801437c:	8938      	ldrh	r0, [r7, #8]
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014384:	2302      	movs	r3, #2
 8014386:	2239      	movs	r2, #57	; 0x39
 8014388:	f000 fbf8 	bl	8014b7c <dhcp_option>
 801438c:	4603      	mov	r3, r0
 801438e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014390:	8938      	ldrh	r0, [r7, #8]
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801439c:	461a      	mov	r2, r3
 801439e:	f000 fc47 	bl	8014c30 <dhcp_option_short>
 80143a2:	4603      	mov	r3, r0
 80143a4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80143a6:	8938      	ldrh	r0, [r7, #8]
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143ae:	2303      	movs	r3, #3
 80143b0:	2237      	movs	r2, #55	; 0x37
 80143b2:	f000 fbe3 	bl	8014b7c <dhcp_option>
 80143b6:	4603      	mov	r3, r0
 80143b8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143ba:	2300      	movs	r3, #0
 80143bc:	77fb      	strb	r3, [r7, #31]
 80143be:	e00e      	b.n	80143de <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80143c0:	8938      	ldrh	r0, [r7, #8]
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143c8:	7ffb      	ldrb	r3, [r7, #31]
 80143ca:	4a29      	ldr	r2, [pc, #164]	; (8014470 <dhcp_discover+0x130>)
 80143cc:	5cd3      	ldrb	r3, [r2, r3]
 80143ce:	461a      	mov	r2, r3
 80143d0:	f000 fc08 	bl	8014be4 <dhcp_option_byte>
 80143d4:	4603      	mov	r3, r0
 80143d6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143d8:	7ffb      	ldrb	r3, [r7, #31]
 80143da:	3301      	adds	r3, #1
 80143dc:	77fb      	strb	r3, [r7, #31]
 80143de:	7ffb      	ldrb	r3, [r7, #31]
 80143e0:	2b02      	cmp	r3, #2
 80143e2:	d9ed      	bls.n	80143c0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80143e4:	8938      	ldrh	r0, [r7, #8]
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	33f0      	adds	r3, #240	; 0xf0
 80143ea:	693a      	ldr	r2, [r7, #16]
 80143ec:	4619      	mov	r1, r3
 80143ee:	f001 f90d 	bl	801560c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80143f2:	4b20      	ldr	r3, [pc, #128]	; (8014474 <dhcp_discover+0x134>)
 80143f4:	6818      	ldr	r0, [r3, #0]
 80143f6:	4b20      	ldr	r3, [pc, #128]	; (8014478 <dhcp_discover+0x138>)
 80143f8:	9301      	str	r3, [sp, #4]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	9300      	str	r3, [sp, #0]
 80143fe:	2343      	movs	r3, #67	; 0x43
 8014400:	4a1e      	ldr	r2, [pc, #120]	; (801447c <dhcp_discover+0x13c>)
 8014402:	6939      	ldr	r1, [r7, #16]
 8014404:	f7ff f87c 	bl	8013500 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014408:	6938      	ldr	r0, [r7, #16]
 801440a:	f7f9 f8c5 	bl	800d598 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	799b      	ldrb	r3, [r3, #6]
 8014412:	2bff      	cmp	r3, #255	; 0xff
 8014414:	d005      	beq.n	8014422 <dhcp_discover+0xe2>
    dhcp->tries++;
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	799b      	ldrb	r3, [r3, #6]
 801441a:	3301      	adds	r3, #1
 801441c:	b2da      	uxtb	r2, r3
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014422:	69bb      	ldr	r3, [r7, #24]
 8014424:	799b      	ldrb	r3, [r3, #6]
 8014426:	2b05      	cmp	r3, #5
 8014428:	d80d      	bhi.n	8014446 <dhcp_discover+0x106>
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	799b      	ldrb	r3, [r3, #6]
 801442e:	461a      	mov	r2, r3
 8014430:	2301      	movs	r3, #1
 8014432:	4093      	lsls	r3, r2
 8014434:	b29b      	uxth	r3, r3
 8014436:	461a      	mov	r2, r3
 8014438:	0152      	lsls	r2, r2, #5
 801443a:	1ad2      	subs	r2, r2, r3
 801443c:	0092      	lsls	r2, r2, #2
 801443e:	4413      	add	r3, r2
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	b29b      	uxth	r3, r3
 8014444:	e001      	b.n	801444a <dhcp_discover+0x10a>
 8014446:	f64e 2360 	movw	r3, #60000	; 0xea60
 801444a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801444c:	897b      	ldrh	r3, [r7, #10]
 801444e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014452:	4a0b      	ldr	r2, [pc, #44]	; (8014480 <dhcp_discover+0x140>)
 8014454:	fb82 1203 	smull	r1, r2, r2, r3
 8014458:	1152      	asrs	r2, r2, #5
 801445a:	17db      	asrs	r3, r3, #31
 801445c:	1ad3      	subs	r3, r2, r3
 801445e:	b29a      	uxth	r2, r3
 8014460:	69bb      	ldr	r3, [r7, #24]
 8014462:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014464:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014468:	4618      	mov	r0, r3
 801446a:	3720      	adds	r7, #32
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	200000a8 	.word	0x200000a8
 8014474:	2000c9d4 	.word	0x2000c9d4
 8014478:	0801caf8 	.word	0x0801caf8
 801447c:	0801cafc 	.word	0x0801cafc
 8014480:	10624dd3 	.word	0x10624dd3

08014484 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b088      	sub	sp, #32
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d107      	bne.n	80144a2 <dhcp_bind+0x1e>
 8014492:	4b64      	ldr	r3, [pc, #400]	; (8014624 <dhcp_bind+0x1a0>)
 8014494:	f240 4215 	movw	r2, #1045	; 0x415
 8014498:	4963      	ldr	r1, [pc, #396]	; (8014628 <dhcp_bind+0x1a4>)
 801449a:	4864      	ldr	r0, [pc, #400]	; (801462c <dhcp_bind+0x1a8>)
 801449c:	f004 fd40 	bl	8018f20 <iprintf>
 80144a0:	e0bc      	b.n	801461c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80144a8:	69bb      	ldr	r3, [r7, #24]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d107      	bne.n	80144be <dhcp_bind+0x3a>
 80144ae:	4b5d      	ldr	r3, [pc, #372]	; (8014624 <dhcp_bind+0x1a0>)
 80144b0:	f240 4217 	movw	r2, #1047	; 0x417
 80144b4:	495e      	ldr	r1, [pc, #376]	; (8014630 <dhcp_bind+0x1ac>)
 80144b6:	485d      	ldr	r0, [pc, #372]	; (801462c <dhcp_bind+0x1a8>)
 80144b8:	f004 fd32 	bl	8018f20 <iprintf>
 80144bc:	e0ae      	b.n	801461c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	2200      	movs	r2, #0
 80144c2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144cc:	d019      	beq.n	8014502 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80144ce:	69bb      	ldr	r3, [r7, #24]
 80144d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144d2:	331e      	adds	r3, #30
 80144d4:	4a57      	ldr	r2, [pc, #348]	; (8014634 <dhcp_bind+0x1b0>)
 80144d6:	fba2 2303 	umull	r2, r3, r2, r3
 80144da:	095b      	lsrs	r3, r3, #5
 80144dc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80144de:	69fb      	ldr	r3, [r7, #28]
 80144e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144e4:	d302      	bcc.n	80144ec <dhcp_bind+0x68>
      timeout = 0xffff;
 80144e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144ea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80144ec:	69fb      	ldr	r3, [r7, #28]
 80144ee:	b29a      	uxth	r2, r3
 80144f0:	69bb      	ldr	r3, [r7, #24]
 80144f2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80144f4:	69bb      	ldr	r3, [r7, #24]
 80144f6:	8a9b      	ldrh	r3, [r3, #20]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d102      	bne.n	8014502 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	2201      	movs	r2, #1
 8014500:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801450a:	d01d      	beq.n	8014548 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801450c:	69bb      	ldr	r3, [r7, #24]
 801450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014510:	331e      	adds	r3, #30
 8014512:	4a48      	ldr	r2, [pc, #288]	; (8014634 <dhcp_bind+0x1b0>)
 8014514:	fba2 2303 	umull	r2, r3, r2, r3
 8014518:	095b      	lsrs	r3, r3, #5
 801451a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801451c:	69fb      	ldr	r3, [r7, #28]
 801451e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014522:	d302      	bcc.n	801452a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014528:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801452a:	69fb      	ldr	r3, [r7, #28]
 801452c:	b29a      	uxth	r2, r3
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	895b      	ldrh	r3, [r3, #10]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d102      	bne.n	8014540 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	2201      	movs	r2, #1
 801453e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	895a      	ldrh	r2, [r3, #10]
 8014544:	69bb      	ldr	r3, [r7, #24]
 8014546:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014548:	69bb      	ldr	r3, [r7, #24]
 801454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014550:	d01d      	beq.n	801458e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014552:	69bb      	ldr	r3, [r7, #24]
 8014554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014556:	331e      	adds	r3, #30
 8014558:	4a36      	ldr	r2, [pc, #216]	; (8014634 <dhcp_bind+0x1b0>)
 801455a:	fba2 2303 	umull	r2, r3, r2, r3
 801455e:	095b      	lsrs	r3, r3, #5
 8014560:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014568:	d302      	bcc.n	8014570 <dhcp_bind+0xec>
      timeout = 0xffff;
 801456a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801456e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	b29a      	uxth	r2, r3
 8014574:	69bb      	ldr	r3, [r7, #24]
 8014576:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014578:	69bb      	ldr	r3, [r7, #24]
 801457a:	899b      	ldrh	r3, [r3, #12]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d102      	bne.n	8014586 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014580:	69bb      	ldr	r3, [r7, #24]
 8014582:	2201      	movs	r2, #1
 8014584:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	899a      	ldrh	r2, [r3, #12]
 801458a:	69bb      	ldr	r3, [r7, #24]
 801458c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801458e:	69bb      	ldr	r3, [r7, #24]
 8014590:	895a      	ldrh	r2, [r3, #10]
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	899b      	ldrh	r3, [r3, #12]
 8014596:	429a      	cmp	r2, r3
 8014598:	d306      	bcc.n	80145a8 <dhcp_bind+0x124>
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	899b      	ldrh	r3, [r3, #12]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d002      	beq.n	80145a8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80145a2:	69bb      	ldr	r3, [r7, #24]
 80145a4:	2200      	movs	r2, #0
 80145a6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	79db      	ldrb	r3, [r3, #7]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d003      	beq.n	80145b8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80145b0:	69bb      	ldr	r3, [r7, #24]
 80145b2:	6a1b      	ldr	r3, [r3, #32]
 80145b4:	613b      	str	r3, [r7, #16]
 80145b6:	e014      	b.n	80145e2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80145b8:	69bb      	ldr	r3, [r7, #24]
 80145ba:	331c      	adds	r3, #28
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80145c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	db02      	blt.n	80145ce <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80145c8:	23ff      	movs	r3, #255	; 0xff
 80145ca:	613b      	str	r3, [r7, #16]
 80145cc:	e009      	b.n	80145e2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80145ce:	7dfb      	ldrb	r3, [r7, #23]
 80145d0:	2bbf      	cmp	r3, #191	; 0xbf
 80145d2:	d903      	bls.n	80145dc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80145d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80145d8:	613b      	str	r3, [r7, #16]
 80145da:	e002      	b.n	80145e2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80145dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145e0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d108      	bne.n	8014600 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	69da      	ldr	r2, [r3, #28]
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	4013      	ands	r3, r2
 80145f6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80145fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014600:	210a      	movs	r1, #10
 8014602:	69b8      	ldr	r0, [r7, #24]
 8014604:	f000 faa0 	bl	8014b48 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	f103 011c 	add.w	r1, r3, #28
 801460e:	f107 030c 	add.w	r3, r7, #12
 8014612:	f107 0210 	add.w	r2, r7, #16
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f7f8 fb1e 	bl	800cc58 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801461c:	3720      	adds	r7, #32
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	0801bee4 	.word	0x0801bee4
 8014628:	0801c044 	.word	0x0801c044
 801462c:	0801bf44 	.word	0x0801bf44
 8014630:	0801c060 	.word	0x0801c060
 8014634:	88888889 	.word	0x88888889

08014638 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b08a      	sub	sp, #40	; 0x28
 801463c:	af02      	add	r7, sp, #8
 801463e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014644:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014646:	2105      	movs	r1, #5
 8014648:	69b8      	ldr	r0, [r7, #24]
 801464a:	f000 fa7d 	bl	8014b48 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801464e:	f107 030c 	add.w	r3, r7, #12
 8014652:	2203      	movs	r2, #3
 8014654:	69b9      	ldr	r1, [r7, #24]
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f000 ff02 	bl	8015460 <dhcp_create_msg>
 801465c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d04e      	beq.n	8014702 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801466a:	89b8      	ldrh	r0, [r7, #12]
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014672:	2302      	movs	r3, #2
 8014674:	2239      	movs	r2, #57	; 0x39
 8014676:	f000 fa81 	bl	8014b7c <dhcp_option>
 801467a:	4603      	mov	r3, r0
 801467c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801467e:	89b8      	ldrh	r0, [r7, #12]
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801468a:	461a      	mov	r2, r3
 801468c:	f000 fad0 	bl	8014c30 <dhcp_option_short>
 8014690:	4603      	mov	r3, r0
 8014692:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014694:	89b8      	ldrh	r0, [r7, #12]
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801469c:	2303      	movs	r3, #3
 801469e:	2237      	movs	r2, #55	; 0x37
 80146a0:	f000 fa6c 	bl	8014b7c <dhcp_option>
 80146a4:	4603      	mov	r3, r0
 80146a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146a8:	2300      	movs	r3, #0
 80146aa:	77bb      	strb	r3, [r7, #30]
 80146ac:	e00e      	b.n	80146cc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80146ae:	89b8      	ldrh	r0, [r7, #12]
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146b6:	7fbb      	ldrb	r3, [r7, #30]
 80146b8:	4a2a      	ldr	r2, [pc, #168]	; (8014764 <dhcp_renew+0x12c>)
 80146ba:	5cd3      	ldrb	r3, [r2, r3]
 80146bc:	461a      	mov	r2, r3
 80146be:	f000 fa91 	bl	8014be4 <dhcp_option_byte>
 80146c2:	4603      	mov	r3, r0
 80146c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146c6:	7fbb      	ldrb	r3, [r7, #30]
 80146c8:	3301      	adds	r3, #1
 80146ca:	77bb      	strb	r3, [r7, #30]
 80146cc:	7fbb      	ldrb	r3, [r7, #30]
 80146ce:	2b02      	cmp	r3, #2
 80146d0:	d9ed      	bls.n	80146ae <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80146d2:	89b8      	ldrh	r0, [r7, #12]
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	33f0      	adds	r3, #240	; 0xf0
 80146d8:	697a      	ldr	r2, [r7, #20]
 80146da:	4619      	mov	r1, r3
 80146dc:	f000 ff96 	bl	801560c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80146e0:	4b21      	ldr	r3, [pc, #132]	; (8014768 <dhcp_renew+0x130>)
 80146e2:	6818      	ldr	r0, [r3, #0]
 80146e4:	69bb      	ldr	r3, [r7, #24]
 80146e6:	f103 0218 	add.w	r2, r3, #24
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	9300      	str	r3, [sp, #0]
 80146ee:	2343      	movs	r3, #67	; 0x43
 80146f0:	6979      	ldr	r1, [r7, #20]
 80146f2:	f7fe fe91 	bl	8013418 <udp_sendto_if>
 80146f6:	4603      	mov	r3, r0
 80146f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80146fa:	6978      	ldr	r0, [r7, #20]
 80146fc:	f7f8 ff4c 	bl	800d598 <pbuf_free>
 8014700:	e001      	b.n	8014706 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014702:	23ff      	movs	r3, #255	; 0xff
 8014704:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	799b      	ldrb	r3, [r3, #6]
 801470a:	2bff      	cmp	r3, #255	; 0xff
 801470c:	d005      	beq.n	801471a <dhcp_renew+0xe2>
    dhcp->tries++;
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	799b      	ldrb	r3, [r3, #6]
 8014712:	3301      	adds	r3, #1
 8014714:	b2da      	uxtb	r2, r3
 8014716:	69bb      	ldr	r3, [r7, #24]
 8014718:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	799b      	ldrb	r3, [r3, #6]
 801471e:	2b09      	cmp	r3, #9
 8014720:	d80a      	bhi.n	8014738 <dhcp_renew+0x100>
 8014722:	69bb      	ldr	r3, [r7, #24]
 8014724:	799b      	ldrb	r3, [r3, #6]
 8014726:	b29b      	uxth	r3, r3
 8014728:	461a      	mov	r2, r3
 801472a:	0152      	lsls	r2, r2, #5
 801472c:	1ad2      	subs	r2, r2, r3
 801472e:	0092      	lsls	r2, r2, #2
 8014730:	4413      	add	r3, r2
 8014732:	011b      	lsls	r3, r3, #4
 8014734:	b29b      	uxth	r3, r3
 8014736:	e001      	b.n	801473c <dhcp_renew+0x104>
 8014738:	f644 6320 	movw	r3, #20000	; 0x4e20
 801473c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801473e:	89fb      	ldrh	r3, [r7, #14]
 8014740:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014744:	4a09      	ldr	r2, [pc, #36]	; (801476c <dhcp_renew+0x134>)
 8014746:	fb82 1203 	smull	r1, r2, r2, r3
 801474a:	1152      	asrs	r2, r2, #5
 801474c:	17db      	asrs	r3, r3, #31
 801474e:	1ad3      	subs	r3, r2, r3
 8014750:	b29a      	uxth	r2, r3
 8014752:	69bb      	ldr	r3, [r7, #24]
 8014754:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014756:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801475a:	4618      	mov	r0, r3
 801475c:	3720      	adds	r7, #32
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}
 8014762:	bf00      	nop
 8014764:	200000a8 	.word	0x200000a8
 8014768:	2000c9d4 	.word	0x2000c9d4
 801476c:	10624dd3 	.word	0x10624dd3

08014770 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b08a      	sub	sp, #40	; 0x28
 8014774:	af02      	add	r7, sp, #8
 8014776:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801477c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801477e:	2104      	movs	r1, #4
 8014780:	69b8      	ldr	r0, [r7, #24]
 8014782:	f000 f9e1 	bl	8014b48 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014786:	f107 030c 	add.w	r3, r7, #12
 801478a:	2203      	movs	r2, #3
 801478c:	69b9      	ldr	r1, [r7, #24]
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 fe66 	bl	8015460 <dhcp_create_msg>
 8014794:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d04c      	beq.n	8014836 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	685b      	ldr	r3, [r3, #4]
 80147a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80147a2:	89b8      	ldrh	r0, [r7, #12]
 80147a4:	693b      	ldr	r3, [r7, #16]
 80147a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147aa:	2302      	movs	r3, #2
 80147ac:	2239      	movs	r2, #57	; 0x39
 80147ae:	f000 f9e5 	bl	8014b7c <dhcp_option>
 80147b2:	4603      	mov	r3, r0
 80147b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80147b6:	89b8      	ldrh	r0, [r7, #12]
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80147c2:	461a      	mov	r2, r3
 80147c4:	f000 fa34 	bl	8014c30 <dhcp_option_short>
 80147c8:	4603      	mov	r3, r0
 80147ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80147cc:	89b8      	ldrh	r0, [r7, #12]
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147d4:	2303      	movs	r3, #3
 80147d6:	2237      	movs	r2, #55	; 0x37
 80147d8:	f000 f9d0 	bl	8014b7c <dhcp_option>
 80147dc:	4603      	mov	r3, r0
 80147de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147e0:	2300      	movs	r3, #0
 80147e2:	77bb      	strb	r3, [r7, #30]
 80147e4:	e00e      	b.n	8014804 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80147e6:	89b8      	ldrh	r0, [r7, #12]
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147ee:	7fbb      	ldrb	r3, [r7, #30]
 80147f0:	4a29      	ldr	r2, [pc, #164]	; (8014898 <dhcp_rebind+0x128>)
 80147f2:	5cd3      	ldrb	r3, [r2, r3]
 80147f4:	461a      	mov	r2, r3
 80147f6:	f000 f9f5 	bl	8014be4 <dhcp_option_byte>
 80147fa:	4603      	mov	r3, r0
 80147fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147fe:	7fbb      	ldrb	r3, [r7, #30]
 8014800:	3301      	adds	r3, #1
 8014802:	77bb      	strb	r3, [r7, #30]
 8014804:	7fbb      	ldrb	r3, [r7, #30]
 8014806:	2b02      	cmp	r3, #2
 8014808:	d9ed      	bls.n	80147e6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801480a:	89b8      	ldrh	r0, [r7, #12]
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	33f0      	adds	r3, #240	; 0xf0
 8014810:	697a      	ldr	r2, [r7, #20]
 8014812:	4619      	mov	r1, r3
 8014814:	f000 fefa 	bl	801560c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014818:	4b20      	ldr	r3, [pc, #128]	; (801489c <dhcp_rebind+0x12c>)
 801481a:	6818      	ldr	r0, [r3, #0]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	9300      	str	r3, [sp, #0]
 8014820:	2343      	movs	r3, #67	; 0x43
 8014822:	4a1f      	ldr	r2, [pc, #124]	; (80148a0 <dhcp_rebind+0x130>)
 8014824:	6979      	ldr	r1, [r7, #20]
 8014826:	f7fe fdf7 	bl	8013418 <udp_sendto_if>
 801482a:	4603      	mov	r3, r0
 801482c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801482e:	6978      	ldr	r0, [r7, #20]
 8014830:	f7f8 feb2 	bl	800d598 <pbuf_free>
 8014834:	e001      	b.n	801483a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014836:	23ff      	movs	r3, #255	; 0xff
 8014838:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801483a:	69bb      	ldr	r3, [r7, #24]
 801483c:	799b      	ldrb	r3, [r3, #6]
 801483e:	2bff      	cmp	r3, #255	; 0xff
 8014840:	d005      	beq.n	801484e <dhcp_rebind+0xde>
    dhcp->tries++;
 8014842:	69bb      	ldr	r3, [r7, #24]
 8014844:	799b      	ldrb	r3, [r3, #6]
 8014846:	3301      	adds	r3, #1
 8014848:	b2da      	uxtb	r2, r3
 801484a:	69bb      	ldr	r3, [r7, #24]
 801484c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	799b      	ldrb	r3, [r3, #6]
 8014852:	2b09      	cmp	r3, #9
 8014854:	d80a      	bhi.n	801486c <dhcp_rebind+0xfc>
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	799b      	ldrb	r3, [r3, #6]
 801485a:	b29b      	uxth	r3, r3
 801485c:	461a      	mov	r2, r3
 801485e:	0152      	lsls	r2, r2, #5
 8014860:	1ad2      	subs	r2, r2, r3
 8014862:	0092      	lsls	r2, r2, #2
 8014864:	4413      	add	r3, r2
 8014866:	00db      	lsls	r3, r3, #3
 8014868:	b29b      	uxth	r3, r3
 801486a:	e001      	b.n	8014870 <dhcp_rebind+0x100>
 801486c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014870:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014872:	89fb      	ldrh	r3, [r7, #14]
 8014874:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014878:	4a0a      	ldr	r2, [pc, #40]	; (80148a4 <dhcp_rebind+0x134>)
 801487a:	fb82 1203 	smull	r1, r2, r2, r3
 801487e:	1152      	asrs	r2, r2, #5
 8014880:	17db      	asrs	r3, r3, #31
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	b29a      	uxth	r2, r3
 8014886:	69bb      	ldr	r3, [r7, #24]
 8014888:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801488a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801488e:	4618      	mov	r0, r3
 8014890:	3720      	adds	r7, #32
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	200000a8 	.word	0x200000a8
 801489c:	2000c9d4 	.word	0x2000c9d4
 80148a0:	0801cafc 	.word	0x0801cafc
 80148a4:	10624dd3 	.word	0x10624dd3

080148a8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80148a8:	b5b0      	push	{r4, r5, r7, lr}
 80148aa:	b08a      	sub	sp, #40	; 0x28
 80148ac:	af02      	add	r7, sp, #8
 80148ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80148b6:	2103      	movs	r1, #3
 80148b8:	69b8      	ldr	r0, [r7, #24]
 80148ba:	f000 f945 	bl	8014b48 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80148be:	f107 030c 	add.w	r3, r7, #12
 80148c2:	2203      	movs	r2, #3
 80148c4:	69b9      	ldr	r1, [r7, #24]
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 fdca 	bl	8015460 <dhcp_create_msg>
 80148cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d066      	beq.n	80149a2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	685b      	ldr	r3, [r3, #4]
 80148d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80148da:	89b8      	ldrh	r0, [r7, #12]
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148e2:	2302      	movs	r3, #2
 80148e4:	2239      	movs	r2, #57	; 0x39
 80148e6:	f000 f949 	bl	8014b7c <dhcp_option>
 80148ea:	4603      	mov	r3, r0
 80148ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80148ee:	89b8      	ldrh	r0, [r7, #12]
 80148f0:	693b      	ldr	r3, [r7, #16]
 80148f2:	33f0      	adds	r3, #240	; 0xf0
 80148f4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80148f8:	4619      	mov	r1, r3
 80148fa:	f000 f999 	bl	8014c30 <dhcp_option_short>
 80148fe:	4603      	mov	r3, r0
 8014900:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014902:	89b8      	ldrh	r0, [r7, #12]
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801490a:	2304      	movs	r3, #4
 801490c:	2232      	movs	r2, #50	; 0x32
 801490e:	f000 f935 	bl	8014b7c <dhcp_option>
 8014912:	4603      	mov	r3, r0
 8014914:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014916:	89bc      	ldrh	r4, [r7, #12]
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801491e:	69bb      	ldr	r3, [r7, #24]
 8014920:	69db      	ldr	r3, [r3, #28]
 8014922:	4618      	mov	r0, r3
 8014924:	f7f7 fa10 	bl	800bd48 <lwip_htonl>
 8014928:	4603      	mov	r3, r0
 801492a:	461a      	mov	r2, r3
 801492c:	4629      	mov	r1, r5
 801492e:	4620      	mov	r0, r4
 8014930:	f000 f9b0 	bl	8014c94 <dhcp_option_long>
 8014934:	4603      	mov	r3, r0
 8014936:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014938:	89b8      	ldrh	r0, [r7, #12]
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014940:	2303      	movs	r3, #3
 8014942:	2237      	movs	r2, #55	; 0x37
 8014944:	f000 f91a 	bl	8014b7c <dhcp_option>
 8014948:	4603      	mov	r3, r0
 801494a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801494c:	2300      	movs	r3, #0
 801494e:	77bb      	strb	r3, [r7, #30]
 8014950:	e00e      	b.n	8014970 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014952:	89b8      	ldrh	r0, [r7, #12]
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801495a:	7fbb      	ldrb	r3, [r7, #30]
 801495c:	4a29      	ldr	r2, [pc, #164]	; (8014a04 <dhcp_reboot+0x15c>)
 801495e:	5cd3      	ldrb	r3, [r2, r3]
 8014960:	461a      	mov	r2, r3
 8014962:	f000 f93f 	bl	8014be4 <dhcp_option_byte>
 8014966:	4603      	mov	r3, r0
 8014968:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801496a:	7fbb      	ldrb	r3, [r7, #30]
 801496c:	3301      	adds	r3, #1
 801496e:	77bb      	strb	r3, [r7, #30]
 8014970:	7fbb      	ldrb	r3, [r7, #30]
 8014972:	2b02      	cmp	r3, #2
 8014974:	d9ed      	bls.n	8014952 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014976:	89b8      	ldrh	r0, [r7, #12]
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	33f0      	adds	r3, #240	; 0xf0
 801497c:	697a      	ldr	r2, [r7, #20]
 801497e:	4619      	mov	r1, r3
 8014980:	f000 fe44 	bl	801560c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014984:	4b20      	ldr	r3, [pc, #128]	; (8014a08 <dhcp_reboot+0x160>)
 8014986:	6818      	ldr	r0, [r3, #0]
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	9300      	str	r3, [sp, #0]
 801498c:	2343      	movs	r3, #67	; 0x43
 801498e:	4a1f      	ldr	r2, [pc, #124]	; (8014a0c <dhcp_reboot+0x164>)
 8014990:	6979      	ldr	r1, [r7, #20]
 8014992:	f7fe fd41 	bl	8013418 <udp_sendto_if>
 8014996:	4603      	mov	r3, r0
 8014998:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801499a:	6978      	ldr	r0, [r7, #20]
 801499c:	f7f8 fdfc 	bl	800d598 <pbuf_free>
 80149a0:	e001      	b.n	80149a6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80149a2:	23ff      	movs	r3, #255	; 0xff
 80149a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80149a6:	69bb      	ldr	r3, [r7, #24]
 80149a8:	799b      	ldrb	r3, [r3, #6]
 80149aa:	2bff      	cmp	r3, #255	; 0xff
 80149ac:	d005      	beq.n	80149ba <dhcp_reboot+0x112>
    dhcp->tries++;
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	799b      	ldrb	r3, [r3, #6]
 80149b2:	3301      	adds	r3, #1
 80149b4:	b2da      	uxtb	r2, r3
 80149b6:	69bb      	ldr	r3, [r7, #24]
 80149b8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80149ba:	69bb      	ldr	r3, [r7, #24]
 80149bc:	799b      	ldrb	r3, [r3, #6]
 80149be:	2b09      	cmp	r3, #9
 80149c0:	d80a      	bhi.n	80149d8 <dhcp_reboot+0x130>
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	799b      	ldrb	r3, [r3, #6]
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	461a      	mov	r2, r3
 80149ca:	0152      	lsls	r2, r2, #5
 80149cc:	1ad2      	subs	r2, r2, r3
 80149ce:	0092      	lsls	r2, r2, #2
 80149d0:	4413      	add	r3, r2
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	e001      	b.n	80149dc <dhcp_reboot+0x134>
 80149d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80149dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80149de:	89fb      	ldrh	r3, [r7, #14]
 80149e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80149e4:	4a0a      	ldr	r2, [pc, #40]	; (8014a10 <dhcp_reboot+0x168>)
 80149e6:	fb82 1203 	smull	r1, r2, r2, r3
 80149ea:	1152      	asrs	r2, r2, #5
 80149ec:	17db      	asrs	r3, r3, #31
 80149ee:	1ad3      	subs	r3, r2, r3
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	69bb      	ldr	r3, [r7, #24]
 80149f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80149f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3720      	adds	r7, #32
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bdb0      	pop	{r4, r5, r7, pc}
 8014a02:	bf00      	nop
 8014a04:	200000a8 	.word	0x200000a8
 8014a08:	2000c9d4 	.word	0x2000c9d4
 8014a0c:	0801cafc 	.word	0x0801cafc
 8014a10:	10624dd3 	.word	0x10624dd3

08014a14 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014a14:	b5b0      	push	{r4, r5, r7, lr}
 8014a16:	b08a      	sub	sp, #40	; 0x28
 8014a18:	af02      	add	r7, sp, #8
 8014a1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a20:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014a22:	69fb      	ldr	r3, [r7, #28]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	f000 8084 	beq.w	8014b32 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014a2a:	69fb      	ldr	r3, [r7, #28]
 8014a2c:	795b      	ldrb	r3, [r3, #5]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	f000 8081 	beq.w	8014b36 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014a34:	69fb      	ldr	r3, [r7, #28]
 8014a36:	699b      	ldr	r3, [r3, #24]
 8014a38:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014a3a:	69fb      	ldr	r3, [r7, #28]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014a40:	69fb      	ldr	r3, [r7, #28]
 8014a42:	2200      	movs	r2, #0
 8014a44:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014a46:	69fb      	ldr	r3, [r7, #28]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014a4c:	69fb      	ldr	r3, [r7, #28]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014a52:	69fb      	ldr	r3, [r7, #28]
 8014a54:	2200      	movs	r2, #0
 8014a56:	631a      	str	r2, [r3, #48]	; 0x30
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a64:	69fb      	ldr	r3, [r7, #28]
 8014a66:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	829a      	strh	r2, [r3, #20]
 8014a6e:	69fb      	ldr	r3, [r7, #28]
 8014a70:	8a9a      	ldrh	r2, [r3, #20]
 8014a72:	69fb      	ldr	r3, [r7, #28]
 8014a74:	825a      	strh	r2, [r3, #18]
 8014a76:	69fb      	ldr	r3, [r7, #28]
 8014a78:	8a5a      	ldrh	r2, [r3, #18]
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	821a      	strh	r2, [r3, #16]
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	8a1a      	ldrh	r2, [r3, #16]
 8014a82:	69fb      	ldr	r3, [r7, #28]
 8014a84:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 fdee 	bl	8015668 <dhcp_supplied_address>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d03b      	beq.n	8014b0a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014a92:	f107 030e 	add.w	r3, r7, #14
 8014a96:	2207      	movs	r2, #7
 8014a98:	69f9      	ldr	r1, [r7, #28]
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f000 fce0 	bl	8015460 <dhcp_create_msg>
 8014aa0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d030      	beq.n	8014b0a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014aa8:	69bb      	ldr	r3, [r7, #24]
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014aae:	89f8      	ldrh	r0, [r7, #14]
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ab6:	2304      	movs	r3, #4
 8014ab8:	2236      	movs	r2, #54	; 0x36
 8014aba:	f000 f85f 	bl	8014b7c <dhcp_option>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014ac2:	89fc      	ldrh	r4, [r7, #14]
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7f7 f93b 	bl	800bd48 <lwip_htonl>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	4629      	mov	r1, r5
 8014ad8:	4620      	mov	r0, r4
 8014ada:	f000 f8db 	bl	8014c94 <dhcp_option_long>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014ae2:	89f8      	ldrh	r0, [r7, #14]
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	33f0      	adds	r3, #240	; 0xf0
 8014ae8:	69ba      	ldr	r2, [r7, #24]
 8014aea:	4619      	mov	r1, r3
 8014aec:	f000 fd8e 	bl	801560c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014af0:	4b13      	ldr	r3, [pc, #76]	; (8014b40 <dhcp_release_and_stop+0x12c>)
 8014af2:	6818      	ldr	r0, [r3, #0]
 8014af4:	f107 0210 	add.w	r2, r7, #16
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	9300      	str	r3, [sp, #0]
 8014afc:	2343      	movs	r3, #67	; 0x43
 8014afe:	69b9      	ldr	r1, [r7, #24]
 8014b00:	f7fe fc8a 	bl	8013418 <udp_sendto_if>
      pbuf_free(p_out);
 8014b04:	69b8      	ldr	r0, [r7, #24]
 8014b06:	f7f8 fd47 	bl	800d598 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014b0a:	4b0e      	ldr	r3, [pc, #56]	; (8014b44 <dhcp_release_and_stop+0x130>)
 8014b0c:	4a0d      	ldr	r2, [pc, #52]	; (8014b44 <dhcp_release_and_stop+0x130>)
 8014b0e:	490d      	ldr	r1, [pc, #52]	; (8014b44 <dhcp_release_and_stop+0x130>)
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f7f8 f8a1 	bl	800cc58 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014b16:	2100      	movs	r1, #0
 8014b18:	69f8      	ldr	r0, [r7, #28]
 8014b1a:	f000 f815 	bl	8014b48 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	791b      	ldrb	r3, [r3, #4]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d008      	beq.n	8014b38 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014b26:	f7fe ffc1 	bl	8013aac <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	711a      	strb	r2, [r3, #4]
 8014b30:	e002      	b.n	8014b38 <dhcp_release_and_stop+0x124>
    return;
 8014b32:	bf00      	nop
 8014b34:	e000      	b.n	8014b38 <dhcp_release_and_stop+0x124>
    return;
 8014b36:	bf00      	nop
  }
}
 8014b38:	3720      	adds	r7, #32
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	2000c9d4 	.word	0x2000c9d4
 8014b44:	0801caf8 	.word	0x0801caf8

08014b48 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b083      	sub	sp, #12
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	460b      	mov	r3, r1
 8014b52:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	795b      	ldrb	r3, [r3, #5]
 8014b58:	78fa      	ldrb	r2, [r7, #3]
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d008      	beq.n	8014b70 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	78fa      	ldrb	r2, [r7, #3]
 8014b62:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2200      	movs	r2, #0
 8014b68:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	811a      	strh	r2, [r3, #8]
  }
}
 8014b70:	bf00      	nop
 8014b72:	370c      	adds	r7, #12
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bc80      	pop	{r7}
 8014b78:	4770      	bx	lr
	...

08014b7c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6039      	str	r1, [r7, #0]
 8014b84:	4611      	mov	r1, r2
 8014b86:	461a      	mov	r2, r3
 8014b88:	4603      	mov	r3, r0
 8014b8a:	80fb      	strh	r3, [r7, #6]
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	717b      	strb	r3, [r7, #5]
 8014b90:	4613      	mov	r3, r2
 8014b92:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014b94:	88fa      	ldrh	r2, [r7, #6]
 8014b96:	793b      	ldrb	r3, [r7, #4]
 8014b98:	4413      	add	r3, r2
 8014b9a:	3302      	adds	r3, #2
 8014b9c:	2b44      	cmp	r3, #68	; 0x44
 8014b9e:	d906      	bls.n	8014bae <dhcp_option+0x32>
 8014ba0:	4b0d      	ldr	r3, [pc, #52]	; (8014bd8 <dhcp_option+0x5c>)
 8014ba2:	f240 529a 	movw	r2, #1434	; 0x59a
 8014ba6:	490d      	ldr	r1, [pc, #52]	; (8014bdc <dhcp_option+0x60>)
 8014ba8:	480d      	ldr	r0, [pc, #52]	; (8014be0 <dhcp_option+0x64>)
 8014baa:	f004 f9b9 	bl	8018f20 <iprintf>
  options[options_out_len++] = option_type;
 8014bae:	88fb      	ldrh	r3, [r7, #6]
 8014bb0:	1c5a      	adds	r2, r3, #1
 8014bb2:	80fa      	strh	r2, [r7, #6]
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	4413      	add	r3, r2
 8014bba:	797a      	ldrb	r2, [r7, #5]
 8014bbc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014bbe:	88fb      	ldrh	r3, [r7, #6]
 8014bc0:	1c5a      	adds	r2, r3, #1
 8014bc2:	80fa      	strh	r2, [r7, #6]
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	4413      	add	r3, r2
 8014bca:	793a      	ldrb	r2, [r7, #4]
 8014bcc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014bce:	88fb      	ldrh	r3, [r7, #6]
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3708      	adds	r7, #8
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	0801bee4 	.word	0x0801bee4
 8014bdc:	0801c078 	.word	0x0801c078
 8014be0:	0801bf44 	.word	0x0801bf44

08014be4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	4603      	mov	r3, r0
 8014bec:	6039      	str	r1, [r7, #0]
 8014bee:	80fb      	strh	r3, [r7, #6]
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014bf4:	88fb      	ldrh	r3, [r7, #6]
 8014bf6:	2b43      	cmp	r3, #67	; 0x43
 8014bf8:	d906      	bls.n	8014c08 <dhcp_option_byte+0x24>
 8014bfa:	4b0a      	ldr	r3, [pc, #40]	; (8014c24 <dhcp_option_byte+0x40>)
 8014bfc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014c00:	4909      	ldr	r1, [pc, #36]	; (8014c28 <dhcp_option_byte+0x44>)
 8014c02:	480a      	ldr	r0, [pc, #40]	; (8014c2c <dhcp_option_byte+0x48>)
 8014c04:	f004 f98c 	bl	8018f20 <iprintf>
  options[options_out_len++] = value;
 8014c08:	88fb      	ldrh	r3, [r7, #6]
 8014c0a:	1c5a      	adds	r2, r3, #1
 8014c0c:	80fa      	strh	r2, [r7, #6]
 8014c0e:	461a      	mov	r2, r3
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	4413      	add	r3, r2
 8014c14:	797a      	ldrb	r2, [r7, #5]
 8014c16:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c18:	88fb      	ldrh	r3, [r7, #6]
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3708      	adds	r7, #8
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop
 8014c24:	0801bee4 	.word	0x0801bee4
 8014c28:	0801c0bc 	.word	0x0801c0bc
 8014c2c:	0801bf44 	.word	0x0801bf44

08014c30 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	4603      	mov	r3, r0
 8014c38:	6039      	str	r1, [r7, #0]
 8014c3a:	80fb      	strh	r3, [r7, #6]
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014c40:	88fb      	ldrh	r3, [r7, #6]
 8014c42:	3302      	adds	r3, #2
 8014c44:	2b44      	cmp	r3, #68	; 0x44
 8014c46:	d906      	bls.n	8014c56 <dhcp_option_short+0x26>
 8014c48:	4b0f      	ldr	r3, [pc, #60]	; (8014c88 <dhcp_option_short+0x58>)
 8014c4a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014c4e:	490f      	ldr	r1, [pc, #60]	; (8014c8c <dhcp_option_short+0x5c>)
 8014c50:	480f      	ldr	r0, [pc, #60]	; (8014c90 <dhcp_option_short+0x60>)
 8014c52:	f004 f965 	bl	8018f20 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014c56:	88bb      	ldrh	r3, [r7, #4]
 8014c58:	0a1b      	lsrs	r3, r3, #8
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	88fb      	ldrh	r3, [r7, #6]
 8014c5e:	1c59      	adds	r1, r3, #1
 8014c60:	80f9      	strh	r1, [r7, #6]
 8014c62:	4619      	mov	r1, r3
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	440b      	add	r3, r1
 8014c68:	b2d2      	uxtb	r2, r2
 8014c6a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014c6c:	88fb      	ldrh	r3, [r7, #6]
 8014c6e:	1c5a      	adds	r2, r3, #1
 8014c70:	80fa      	strh	r2, [r7, #6]
 8014c72:	461a      	mov	r2, r3
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	4413      	add	r3, r2
 8014c78:	88ba      	ldrh	r2, [r7, #4]
 8014c7a:	b2d2      	uxtb	r2, r2
 8014c7c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c7e:	88fb      	ldrh	r3, [r7, #6]
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	0801bee4 	.word	0x0801bee4
 8014c8c:	0801c0f4 	.word	0x0801c0f4
 8014c90:	0801bf44 	.word	0x0801bf44

08014c94 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b084      	sub	sp, #16
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	60b9      	str	r1, [r7, #8]
 8014c9e:	607a      	str	r2, [r7, #4]
 8014ca0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014ca2:	89fb      	ldrh	r3, [r7, #14]
 8014ca4:	3304      	adds	r3, #4
 8014ca6:	2b44      	cmp	r3, #68	; 0x44
 8014ca8:	d906      	bls.n	8014cb8 <dhcp_option_long+0x24>
 8014caa:	4b19      	ldr	r3, [pc, #100]	; (8014d10 <dhcp_option_long+0x7c>)
 8014cac:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014cb0:	4918      	ldr	r1, [pc, #96]	; (8014d14 <dhcp_option_long+0x80>)
 8014cb2:	4819      	ldr	r0, [pc, #100]	; (8014d18 <dhcp_option_long+0x84>)
 8014cb4:	f004 f934 	bl	8018f20 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	0e1a      	lsrs	r2, r3, #24
 8014cbc:	89fb      	ldrh	r3, [r7, #14]
 8014cbe:	1c59      	adds	r1, r3, #1
 8014cc0:	81f9      	strh	r1, [r7, #14]
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	440b      	add	r3, r1
 8014cc8:	b2d2      	uxtb	r2, r2
 8014cca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	0c1a      	lsrs	r2, r3, #16
 8014cd0:	89fb      	ldrh	r3, [r7, #14]
 8014cd2:	1c59      	adds	r1, r3, #1
 8014cd4:	81f9      	strh	r1, [r7, #14]
 8014cd6:	4619      	mov	r1, r3
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	440b      	add	r3, r1
 8014cdc:	b2d2      	uxtb	r2, r2
 8014cde:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	0a1a      	lsrs	r2, r3, #8
 8014ce4:	89fb      	ldrh	r3, [r7, #14]
 8014ce6:	1c59      	adds	r1, r3, #1
 8014ce8:	81f9      	strh	r1, [r7, #14]
 8014cea:	4619      	mov	r1, r3
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	440b      	add	r3, r1
 8014cf0:	b2d2      	uxtb	r2, r2
 8014cf2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014cf4:	89fb      	ldrh	r3, [r7, #14]
 8014cf6:	1c5a      	adds	r2, r3, #1
 8014cf8:	81fa      	strh	r2, [r7, #14]
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	4413      	add	r3, r2
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	b2d2      	uxtb	r2, r2
 8014d04:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d06:	89fb      	ldrh	r3, [r7, #14]
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}
 8014d10:	0801bee4 	.word	0x0801bee4
 8014d14:	0801c130 	.word	0x0801c130
 8014d18:	0801bf44 	.word	0x0801bf44

08014d1c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b090      	sub	sp, #64	; 0x40
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
 8014d24:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014d26:	2300      	movs	r3, #0
 8014d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014d2e:	2208      	movs	r2, #8
 8014d30:	2100      	movs	r1, #0
 8014d32:	48b5      	ldr	r0, [pc, #724]	; (8015008 <dhcp_parse_reply+0x2ec>)
 8014d34:	f004 f80e 	bl	8018d54 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	895b      	ldrh	r3, [r3, #10]
 8014d3c:	2b2b      	cmp	r3, #43	; 0x2b
 8014d3e:	d802      	bhi.n	8014d46 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014d40:	f06f 0301 	mvn.w	r3, #1
 8014d44:	e2a7      	b.n	8015296 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	685b      	ldr	r3, [r3, #4]
 8014d4a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014d4c:	23f0      	movs	r3, #240	; 0xf0
 8014d4e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	891b      	ldrh	r3, [r3, #8]
 8014d54:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014d5a:	e00c      	b.n	8014d76 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5e:	895b      	ldrh	r3, [r3, #10]
 8014d60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014d62:	1ad3      	subs	r3, r2, r3
 8014d64:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d68:	895b      	ldrh	r3, [r3, #10]
 8014d6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014d6c:	1ad3      	subs	r3, r2, r3
 8014d6e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d004      	beq.n	8014d86 <dhcp_parse_reply+0x6a>
 8014d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d7e:	895b      	ldrh	r3, [r3, #10]
 8014d80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d2ea      	bcs.n	8014d5c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d102      	bne.n	8014d92 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014d8c:	f06f 0301 	mvn.w	r3, #1
 8014d90:	e281      	b.n	8015296 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8014d92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d94:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014d96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014d98:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014da0:	e239      	b.n	8015216 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8014da2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014da6:	4413      	add	r3, r2
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014dac:	2300      	movs	r3, #0
 8014dae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014db2:	f04f 33ff 	mov.w	r3, #4294967295
 8014db6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014db8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014dba:	3302      	adds	r3, #2
 8014dbc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014dbe:	8bfa      	ldrh	r2, [r7, #30]
 8014dc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d202      	bcs.n	8014dcc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014dc6:	f06f 0301 	mvn.w	r3, #1
 8014dca:	e264      	b.n	8015296 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014dcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014dce:	3301      	adds	r3, #1
 8014dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dd2:	8952      	ldrh	r2, [r2, #10]
 8014dd4:	4293      	cmp	r3, r2
 8014dd6:	da07      	bge.n	8014de8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014dd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014dda:	3301      	adds	r3, #1
 8014ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014dde:	4413      	add	r3, r2
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014de6:	e00b      	b.n	8014e00 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d004      	beq.n	8014dfa <dhcp_parse_reply+0xde>
 8014df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	e000      	b.n	8014dfc <dhcp_parse_reply+0xe0>
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014e08:	7dfb      	ldrb	r3, [r7, #23]
 8014e0a:	2b3b      	cmp	r3, #59	; 0x3b
 8014e0c:	f200 812c 	bhi.w	8015068 <dhcp_parse_reply+0x34c>
 8014e10:	a201      	add	r2, pc, #4	; (adr r2, 8014e18 <dhcp_parse_reply+0xfc>)
 8014e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e16:	bf00      	nop
 8014e18:	08014f09 	.word	0x08014f09
 8014e1c:	08014f19 	.word	0x08014f19
 8014e20:	08015069 	.word	0x08015069
 8014e24:	08014f3b 	.word	0x08014f3b
 8014e28:	08015069 	.word	0x08015069
 8014e2c:	08015069 	.word	0x08015069
 8014e30:	08015069 	.word	0x08015069
 8014e34:	08015069 	.word	0x08015069
 8014e38:	08015069 	.word	0x08015069
 8014e3c:	08015069 	.word	0x08015069
 8014e40:	08015069 	.word	0x08015069
 8014e44:	08015069 	.word	0x08015069
 8014e48:	08015069 	.word	0x08015069
 8014e4c:	08015069 	.word	0x08015069
 8014e50:	08015069 	.word	0x08015069
 8014e54:	08015069 	.word	0x08015069
 8014e58:	08015069 	.word	0x08015069
 8014e5c:	08015069 	.word	0x08015069
 8014e60:	08015069 	.word	0x08015069
 8014e64:	08015069 	.word	0x08015069
 8014e68:	08015069 	.word	0x08015069
 8014e6c:	08015069 	.word	0x08015069
 8014e70:	08015069 	.word	0x08015069
 8014e74:	08015069 	.word	0x08015069
 8014e78:	08015069 	.word	0x08015069
 8014e7c:	08015069 	.word	0x08015069
 8014e80:	08015069 	.word	0x08015069
 8014e84:	08015069 	.word	0x08015069
 8014e88:	08015069 	.word	0x08015069
 8014e8c:	08015069 	.word	0x08015069
 8014e90:	08015069 	.word	0x08015069
 8014e94:	08015069 	.word	0x08015069
 8014e98:	08015069 	.word	0x08015069
 8014e9c:	08015069 	.word	0x08015069
 8014ea0:	08015069 	.word	0x08015069
 8014ea4:	08015069 	.word	0x08015069
 8014ea8:	08015069 	.word	0x08015069
 8014eac:	08015069 	.word	0x08015069
 8014eb0:	08015069 	.word	0x08015069
 8014eb4:	08015069 	.word	0x08015069
 8014eb8:	08015069 	.word	0x08015069
 8014ebc:	08015069 	.word	0x08015069
 8014ec0:	08015069 	.word	0x08015069
 8014ec4:	08015069 	.word	0x08015069
 8014ec8:	08015069 	.word	0x08015069
 8014ecc:	08015069 	.word	0x08015069
 8014ed0:	08015069 	.word	0x08015069
 8014ed4:	08015069 	.word	0x08015069
 8014ed8:	08015069 	.word	0x08015069
 8014edc:	08015069 	.word	0x08015069
 8014ee0:	08015069 	.word	0x08015069
 8014ee4:	08014f67 	.word	0x08014f67
 8014ee8:	08014f89 	.word	0x08014f89
 8014eec:	08014fc5 	.word	0x08014fc5
 8014ef0:	08014fe7 	.word	0x08014fe7
 8014ef4:	08015069 	.word	0x08015069
 8014ef8:	08015069 	.word	0x08015069
 8014efc:	08015069 	.word	0x08015069
 8014f00:	08015025 	.word	0x08015025
 8014f04:	08015047 	.word	0x08015047
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014f16:	e0ab      	b.n	8015070 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f1c:	2b04      	cmp	r3, #4
 8014f1e:	d009      	beq.n	8014f34 <dhcp_parse_reply+0x218>
 8014f20:	4b3a      	ldr	r3, [pc, #232]	; (801500c <dhcp_parse_reply+0x2f0>)
 8014f22:	f240 622e 	movw	r2, #1582	; 0x62e
 8014f26:	493a      	ldr	r1, [pc, #232]	; (8015010 <dhcp_parse_reply+0x2f4>)
 8014f28:	483a      	ldr	r0, [pc, #232]	; (8015014 <dhcp_parse_reply+0x2f8>)
 8014f2a:	f003 fff9 	bl	8018f20 <iprintf>
 8014f2e:	f06f 0305 	mvn.w	r3, #5
 8014f32:	e1b0      	b.n	8015296 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014f34:	2306      	movs	r3, #6
 8014f36:	623b      	str	r3, [r7, #32]
        break;
 8014f38:	e09a      	b.n	8015070 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014f3a:	2304      	movs	r3, #4
 8014f3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014f40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014f44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d209      	bcs.n	8014f60 <dhcp_parse_reply+0x244>
 8014f4c:	4b2f      	ldr	r3, [pc, #188]	; (801500c <dhcp_parse_reply+0x2f0>)
 8014f4e:	f240 6233 	movw	r2, #1587	; 0x633
 8014f52:	4931      	ldr	r1, [pc, #196]	; (8015018 <dhcp_parse_reply+0x2fc>)
 8014f54:	482f      	ldr	r0, [pc, #188]	; (8015014 <dhcp_parse_reply+0x2f8>)
 8014f56:	f003 ffe3 	bl	8018f20 <iprintf>
 8014f5a:	f06f 0305 	mvn.w	r3, #5
 8014f5e:	e19a      	b.n	8015296 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014f60:	2307      	movs	r3, #7
 8014f62:	623b      	str	r3, [r7, #32]
        break;
 8014f64:	e084      	b.n	8015070 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f6a:	2b04      	cmp	r3, #4
 8014f6c:	d009      	beq.n	8014f82 <dhcp_parse_reply+0x266>
 8014f6e:	4b27      	ldr	r3, [pc, #156]	; (801500c <dhcp_parse_reply+0x2f0>)
 8014f70:	f240 6241 	movw	r2, #1601	; 0x641
 8014f74:	4926      	ldr	r1, [pc, #152]	; (8015010 <dhcp_parse_reply+0x2f4>)
 8014f76:	4827      	ldr	r0, [pc, #156]	; (8015014 <dhcp_parse_reply+0x2f8>)
 8014f78:	f003 ffd2 	bl	8018f20 <iprintf>
 8014f7c:	f06f 0305 	mvn.w	r3, #5
 8014f80:	e189      	b.n	8015296 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014f82:	2303      	movs	r3, #3
 8014f84:	623b      	str	r3, [r7, #32]
        break;
 8014f86:	e073      	b.n	8015070 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d009      	beq.n	8014fa4 <dhcp_parse_reply+0x288>
 8014f90:	4b1e      	ldr	r3, [pc, #120]	; (801500c <dhcp_parse_reply+0x2f0>)
 8014f92:	f240 624f 	movw	r2, #1615	; 0x64f
 8014f96:	4921      	ldr	r1, [pc, #132]	; (801501c <dhcp_parse_reply+0x300>)
 8014f98:	481e      	ldr	r0, [pc, #120]	; (8015014 <dhcp_parse_reply+0x2f8>)
 8014f9a:	f003 ffc1 	bl	8018f20 <iprintf>
 8014f9e:	f06f 0305 	mvn.w	r3, #5
 8014fa2:	e178      	b.n	8015296 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014fa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014fa6:	2bf0      	cmp	r3, #240	; 0xf0
 8014fa8:	d009      	beq.n	8014fbe <dhcp_parse_reply+0x2a2>
 8014faa:	4b18      	ldr	r3, [pc, #96]	; (801500c <dhcp_parse_reply+0x2f0>)
 8014fac:	f240 6251 	movw	r2, #1617	; 0x651
 8014fb0:	491b      	ldr	r1, [pc, #108]	; (8015020 <dhcp_parse_reply+0x304>)
 8014fb2:	4818      	ldr	r0, [pc, #96]	; (8015014 <dhcp_parse_reply+0x2f8>)
 8014fb4:	f003 ffb4 	bl	8018f20 <iprintf>
 8014fb8:	f06f 0305 	mvn.w	r3, #5
 8014fbc:	e16b      	b.n	8015296 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	623b      	str	r3, [r7, #32]
        break;
 8014fc2:	e055      	b.n	8015070 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fc8:	2b01      	cmp	r3, #1
 8014fca:	d009      	beq.n	8014fe0 <dhcp_parse_reply+0x2c4>
 8014fcc:	4b0f      	ldr	r3, [pc, #60]	; (801500c <dhcp_parse_reply+0x2f0>)
 8014fce:	f240 6255 	movw	r2, #1621	; 0x655
 8014fd2:	4912      	ldr	r1, [pc, #72]	; (801501c <dhcp_parse_reply+0x300>)
 8014fd4:	480f      	ldr	r0, [pc, #60]	; (8015014 <dhcp_parse_reply+0x2f8>)
 8014fd6:	f003 ffa3 	bl	8018f20 <iprintf>
 8014fda:	f06f 0305 	mvn.w	r3, #5
 8014fde:	e15a      	b.n	8015296 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	623b      	str	r3, [r7, #32]
        break;
 8014fe4:	e044      	b.n	8015070 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fea:	2b04      	cmp	r3, #4
 8014fec:	d009      	beq.n	8015002 <dhcp_parse_reply+0x2e6>
 8014fee:	4b07      	ldr	r3, [pc, #28]	; (801500c <dhcp_parse_reply+0x2f0>)
 8014ff0:	f240 6259 	movw	r2, #1625	; 0x659
 8014ff4:	4906      	ldr	r1, [pc, #24]	; (8015010 <dhcp_parse_reply+0x2f4>)
 8014ff6:	4807      	ldr	r0, [pc, #28]	; (8015014 <dhcp_parse_reply+0x2f8>)
 8014ff8:	f003 ff92 	bl	8018f20 <iprintf>
 8014ffc:	f06f 0305 	mvn.w	r3, #5
 8015000:	e149      	b.n	8015296 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015002:	2302      	movs	r3, #2
 8015004:	623b      	str	r3, [r7, #32]
        break;
 8015006:	e033      	b.n	8015070 <dhcp_parse_reply+0x354>
 8015008:	2000c9cc 	.word	0x2000c9cc
 801500c:	0801bee4 	.word	0x0801bee4
 8015010:	0801c16c 	.word	0x0801c16c
 8015014:	0801bf44 	.word	0x0801bf44
 8015018:	0801c178 	.word	0x0801c178
 801501c:	0801c18c 	.word	0x0801c18c
 8015020:	0801c198 	.word	0x0801c198
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015028:	2b04      	cmp	r3, #4
 801502a:	d009      	beq.n	8015040 <dhcp_parse_reply+0x324>
 801502c:	4b9c      	ldr	r3, [pc, #624]	; (80152a0 <dhcp_parse_reply+0x584>)
 801502e:	f240 625d 	movw	r2, #1629	; 0x65d
 8015032:	499c      	ldr	r1, [pc, #624]	; (80152a4 <dhcp_parse_reply+0x588>)
 8015034:	489c      	ldr	r0, [pc, #624]	; (80152a8 <dhcp_parse_reply+0x58c>)
 8015036:	f003 ff73 	bl	8018f20 <iprintf>
 801503a:	f06f 0305 	mvn.w	r3, #5
 801503e:	e12a      	b.n	8015296 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015040:	2304      	movs	r3, #4
 8015042:	623b      	str	r3, [r7, #32]
        break;
 8015044:	e014      	b.n	8015070 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801504a:	2b04      	cmp	r3, #4
 801504c:	d009      	beq.n	8015062 <dhcp_parse_reply+0x346>
 801504e:	4b94      	ldr	r3, [pc, #592]	; (80152a0 <dhcp_parse_reply+0x584>)
 8015050:	f240 6261 	movw	r2, #1633	; 0x661
 8015054:	4993      	ldr	r1, [pc, #588]	; (80152a4 <dhcp_parse_reply+0x588>)
 8015056:	4894      	ldr	r0, [pc, #592]	; (80152a8 <dhcp_parse_reply+0x58c>)
 8015058:	f003 ff62 	bl	8018f20 <iprintf>
 801505c:	f06f 0305 	mvn.w	r3, #5
 8015060:	e119      	b.n	8015296 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015062:	2305      	movs	r3, #5
 8015064:	623b      	str	r3, [r7, #32]
        break;
 8015066:	e003      	b.n	8015070 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015068:	2300      	movs	r3, #0
 801506a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801506e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015070:	7dfb      	ldrb	r3, [r7, #23]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d103      	bne.n	801507e <dhcp_parse_reply+0x362>
      offset++;
 8015076:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015078:	3301      	adds	r3, #1
 801507a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801507c:	e0a1      	b.n	80151c2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801507e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015084:	4413      	add	r3, r2
 8015086:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801508a:	4293      	cmp	r3, r2
 801508c:	dd02      	ble.n	8015094 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801508e:	f06f 0301 	mvn.w	r3, #1
 8015092:	e100      	b.n	8015296 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015098:	b29a      	uxth	r2, r3
 801509a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801509c:	4413      	add	r3, r2
 801509e:	b29b      	uxth	r3, r3
 80150a0:	3302      	adds	r3, #2
 80150a2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80150a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	f000 808a 	beq.w	80151c2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80150ae:	2300      	movs	r3, #0
 80150b0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80150b2:	6a3b      	ldr	r3, [r7, #32]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	db02      	blt.n	80150be <dhcp_parse_reply+0x3a2>
 80150b8:	6a3b      	ldr	r3, [r7, #32]
 80150ba:	2b07      	cmp	r3, #7
 80150bc:	dd06      	ble.n	80150cc <dhcp_parse_reply+0x3b0>
 80150be:	4b78      	ldr	r3, [pc, #480]	; (80152a0 <dhcp_parse_reply+0x584>)
 80150c0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80150c4:	4979      	ldr	r1, [pc, #484]	; (80152ac <dhcp_parse_reply+0x590>)
 80150c6:	4878      	ldr	r0, [pc, #480]	; (80152a8 <dhcp_parse_reply+0x58c>)
 80150c8:	f003 ff2a 	bl	8018f20 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80150cc:	4a78      	ldr	r2, [pc, #480]	; (80152b0 <dhcp_parse_reply+0x594>)
 80150ce:	6a3b      	ldr	r3, [r7, #32]
 80150d0:	4413      	add	r3, r2
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d174      	bne.n	80151c2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80150d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150dc:	2b04      	cmp	r3, #4
 80150de:	bf28      	it	cs
 80150e0:	2304      	movcs	r3, #4
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80150e6:	8bfb      	ldrh	r3, [r7, #30]
 80150e8:	8aba      	ldrh	r2, [r7, #20]
 80150ea:	f107 0108 	add.w	r1, r7, #8
 80150ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150f0:	f7f8 fc56 	bl	800d9a0 <pbuf_copy_partial>
 80150f4:	4603      	mov	r3, r0
 80150f6:	461a      	mov	r2, r3
 80150f8:	8abb      	ldrh	r3, [r7, #20]
 80150fa:	4293      	cmp	r3, r2
 80150fc:	d002      	beq.n	8015104 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80150fe:	f06f 0301 	mvn.w	r3, #1
 8015102:	e0c8      	b.n	8015296 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015104:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015108:	2b04      	cmp	r3, #4
 801510a:	d933      	bls.n	8015174 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801510c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015110:	f003 0303 	and.w	r3, r3, #3
 8015114:	b2db      	uxtb	r3, r3
 8015116:	2b00      	cmp	r3, #0
 8015118:	d009      	beq.n	801512e <dhcp_parse_reply+0x412>
 801511a:	4b61      	ldr	r3, [pc, #388]	; (80152a0 <dhcp_parse_reply+0x584>)
 801511c:	f240 6281 	movw	r2, #1665	; 0x681
 8015120:	4964      	ldr	r1, [pc, #400]	; (80152b4 <dhcp_parse_reply+0x598>)
 8015122:	4861      	ldr	r0, [pc, #388]	; (80152a8 <dhcp_parse_reply+0x58c>)
 8015124:	f003 fefc 	bl	8018f20 <iprintf>
 8015128:	f06f 0305 	mvn.w	r3, #5
 801512c:	e0b3      	b.n	8015296 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801512e:	4a60      	ldr	r2, [pc, #384]	; (80152b0 <dhcp_parse_reply+0x594>)
 8015130:	6a3b      	ldr	r3, [r7, #32]
 8015132:	4413      	add	r3, r2
 8015134:	2201      	movs	r2, #1
 8015136:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	4618      	mov	r0, r3
 801513c:	f7f6 fe04 	bl	800bd48 <lwip_htonl>
 8015140:	4602      	mov	r2, r0
 8015142:	495d      	ldr	r1, [pc, #372]	; (80152b8 <dhcp_parse_reply+0x59c>)
 8015144:	6a3b      	ldr	r3, [r7, #32]
 8015146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801514a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801514e:	3b04      	subs	r3, #4
 8015150:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015154:	8bfb      	ldrh	r3, [r7, #30]
 8015156:	3304      	adds	r3, #4
 8015158:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801515a:	8a7a      	ldrh	r2, [r7, #18]
 801515c:	8bfb      	ldrh	r3, [r7, #30]
 801515e:	429a      	cmp	r2, r3
 8015160:	d202      	bcs.n	8015168 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015162:	f06f 0301 	mvn.w	r3, #1
 8015166:	e096      	b.n	8015296 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015168:	8a7b      	ldrh	r3, [r7, #18]
 801516a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801516c:	6a3b      	ldr	r3, [r7, #32]
 801516e:	3301      	adds	r3, #1
 8015170:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015172:	e79e      	b.n	80150b2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015178:	2b04      	cmp	r3, #4
 801517a:	d106      	bne.n	801518a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	4618      	mov	r0, r3
 8015180:	f7f6 fde2 	bl	800bd48 <lwip_htonl>
 8015184:	4603      	mov	r3, r0
 8015186:	60bb      	str	r3, [r7, #8]
 8015188:	e011      	b.n	80151ae <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801518a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801518e:	2b01      	cmp	r3, #1
 8015190:	d009      	beq.n	80151a6 <dhcp_parse_reply+0x48a>
 8015192:	4b43      	ldr	r3, [pc, #268]	; (80152a0 <dhcp_parse_reply+0x584>)
 8015194:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015198:	4948      	ldr	r1, [pc, #288]	; (80152bc <dhcp_parse_reply+0x5a0>)
 801519a:	4843      	ldr	r0, [pc, #268]	; (80152a8 <dhcp_parse_reply+0x58c>)
 801519c:	f003 fec0 	bl	8018f20 <iprintf>
 80151a0:	f06f 0305 	mvn.w	r3, #5
 80151a4:	e077      	b.n	8015296 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80151a6:	f107 0308 	add.w	r3, r7, #8
 80151aa:	781b      	ldrb	r3, [r3, #0]
 80151ac:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80151ae:	4a40      	ldr	r2, [pc, #256]	; (80152b0 <dhcp_parse_reply+0x594>)
 80151b0:	6a3b      	ldr	r3, [r7, #32]
 80151b2:	4413      	add	r3, r2
 80151b4:	2201      	movs	r2, #1
 80151b6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80151b8:	68ba      	ldr	r2, [r7, #8]
 80151ba:	493f      	ldr	r1, [pc, #252]	; (80152b8 <dhcp_parse_reply+0x59c>)
 80151bc:	6a3b      	ldr	r3, [r7, #32]
 80151be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80151c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c4:	895b      	ldrh	r3, [r3, #10]
 80151c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d324      	bcc.n	8015216 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80151cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ce:	895b      	ldrh	r3, [r3, #10]
 80151d0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151d2:	1ad3      	subs	r3, r2, r3
 80151d4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80151d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d8:	895b      	ldrh	r3, [r3, #10]
 80151da:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80151dc:	1ad3      	subs	r3, r2, r3
 80151de:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80151e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d213      	bcs.n	8015210 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80151e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80151ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d109      	bne.n	8015208 <dhcp_parse_reply+0x4ec>
 80151f4:	4b2a      	ldr	r3, [pc, #168]	; (80152a0 <dhcp_parse_reply+0x584>)
 80151f6:	f240 629d 	movw	r2, #1693	; 0x69d
 80151fa:	4931      	ldr	r1, [pc, #196]	; (80152c0 <dhcp_parse_reply+0x5a4>)
 80151fc:	482a      	ldr	r0, [pc, #168]	; (80152a8 <dhcp_parse_reply+0x58c>)
 80151fe:	f003 fe8f 	bl	8018f20 <iprintf>
 8015202:	f06f 0305 	mvn.w	r3, #5
 8015206:	e046      	b.n	8015296 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801520e:	e002      	b.n	8015216 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015210:	f06f 0301 	mvn.w	r3, #1
 8015214:	e03f      	b.n	8015296 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015218:	2b00      	cmp	r3, #0
 801521a:	d00a      	beq.n	8015232 <dhcp_parse_reply+0x516>
 801521c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801521e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015220:	429a      	cmp	r2, r3
 8015222:	d206      	bcs.n	8015232 <dhcp_parse_reply+0x516>
 8015224:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015228:	4413      	add	r3, r2
 801522a:	781b      	ldrb	r3, [r3, #0]
 801522c:	2bff      	cmp	r3, #255	; 0xff
 801522e:	f47f adb8 	bne.w	8014da2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015232:	4b1f      	ldr	r3, [pc, #124]	; (80152b0 <dhcp_parse_reply+0x594>)
 8015234:	781b      	ldrb	r3, [r3, #0]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d018      	beq.n	801526c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801523a:	4b1f      	ldr	r3, [pc, #124]	; (80152b8 <dhcp_parse_reply+0x59c>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015240:	4b1b      	ldr	r3, [pc, #108]	; (80152b0 <dhcp_parse_reply+0x594>)
 8015242:	2200      	movs	r2, #0
 8015244:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2b01      	cmp	r3, #1
 801524a:	d102      	bne.n	8015252 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801524c:	2301      	movs	r3, #1
 801524e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015250:	e00c      	b.n	801526c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	2b02      	cmp	r3, #2
 8015256:	d102      	bne.n	801525e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015258:	2301      	movs	r3, #1
 801525a:	62bb      	str	r3, [r7, #40]	; 0x28
 801525c:	e006      	b.n	801526c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	2b03      	cmp	r3, #3
 8015262:	d103      	bne.n	801526c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015264:	2301      	movs	r3, #1
 8015266:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015268:	2301      	movs	r3, #1
 801526a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801526e:	2b00      	cmp	r3, #0
 8015270:	d006      	beq.n	8015280 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015272:	2300      	movs	r3, #0
 8015274:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015276:	236c      	movs	r3, #108	; 0x6c
 8015278:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801527a:	23ec      	movs	r3, #236	; 0xec
 801527c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801527e:	e56a      	b.n	8014d56 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015282:	2b00      	cmp	r3, #0
 8015284:	d006      	beq.n	8015294 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015286:	2300      	movs	r3, #0
 8015288:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801528a:	232c      	movs	r3, #44	; 0x2c
 801528c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801528e:	236c      	movs	r3, #108	; 0x6c
 8015290:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015292:	e560      	b.n	8014d56 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015294:	2300      	movs	r3, #0
}
 8015296:	4618      	mov	r0, r3
 8015298:	3740      	adds	r7, #64	; 0x40
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	0801bee4 	.word	0x0801bee4
 80152a4:	0801c16c 	.word	0x0801c16c
 80152a8:	0801bf44 	.word	0x0801bf44
 80152ac:	0801c1b0 	.word	0x0801c1b0
 80152b0:	2000c9cc 	.word	0x2000c9cc
 80152b4:	0801c1c4 	.word	0x0801c1c4
 80152b8:	2000c9ac 	.word	0x2000c9ac
 80152bc:	0801c1dc 	.word	0x0801c1dc
 80152c0:	0801c1f0 	.word	0x0801c1f0

080152c4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b08a      	sub	sp, #40	; 0x28
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	60b9      	str	r1, [r7, #8]
 80152ce:	607a      	str	r2, [r7, #4]
 80152d0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80152d2:	4b60      	ldr	r3, [pc, #384]	; (8015454 <dhcp_recv+0x190>)
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152d8:	6a3b      	ldr	r3, [r7, #32]
 80152da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152dc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	f000 809d 	beq.w	8015426 <dhcp_recv+0x162>
 80152ec:	69fb      	ldr	r3, [r7, #28]
 80152ee:	791b      	ldrb	r3, [r3, #4]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	f000 8098 	beq.w	8015426 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	895b      	ldrh	r3, [r3, #10]
 80152fa:	2b2b      	cmp	r3, #43	; 0x2b
 80152fc:	f240 8095 	bls.w	801542a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015300:	69bb      	ldr	r3, [r7, #24]
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	2b02      	cmp	r3, #2
 8015306:	f040 8092 	bne.w	801542e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801530a:	2300      	movs	r3, #0
 801530c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015310:	e012      	b.n	8015338 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015316:	6a3a      	ldr	r2, [r7, #32]
 8015318:	4413      	add	r3, r2
 801531a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801531e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015322:	69b9      	ldr	r1, [r7, #24]
 8015324:	440b      	add	r3, r1
 8015326:	7f1b      	ldrb	r3, [r3, #28]
 8015328:	429a      	cmp	r2, r3
 801532a:	f040 8082 	bne.w	8015432 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801532e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015332:	3301      	adds	r3, #1
 8015334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015338:	6a3b      	ldr	r3, [r7, #32]
 801533a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801533e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015342:	429a      	cmp	r2, r3
 8015344:	d203      	bcs.n	801534e <dhcp_recv+0x8a>
 8015346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801534a:	2b05      	cmp	r3, #5
 801534c:	d9e1      	bls.n	8015312 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	4618      	mov	r0, r3
 8015354:	f7f6 fcf8 	bl	800bd48 <lwip_htonl>
 8015358:	4602      	mov	r2, r0
 801535a:	69fb      	ldr	r3, [r7, #28]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	429a      	cmp	r2, r3
 8015360:	d169      	bne.n	8015436 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015362:	69f9      	ldr	r1, [r7, #28]
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7ff fcd9 	bl	8014d1c <dhcp_parse_reply>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	d164      	bne.n	801543a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015370:	4b39      	ldr	r3, [pc, #228]	; (8015458 <dhcp_recv+0x194>)
 8015372:	785b      	ldrb	r3, [r3, #1]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d062      	beq.n	801543e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	685b      	ldr	r3, [r3, #4]
 801537c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801537e:	4b37      	ldr	r3, [pc, #220]	; (801545c <dhcp_recv+0x198>)
 8015380:	685b      	ldr	r3, [r3, #4]
 8015382:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015384:	7cfb      	ldrb	r3, [r7, #19]
 8015386:	2b05      	cmp	r3, #5
 8015388:	d12a      	bne.n	80153e0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	795b      	ldrb	r3, [r3, #5]
 801538e:	2b01      	cmp	r3, #1
 8015390:	d112      	bne.n	80153b8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015392:	6979      	ldr	r1, [r7, #20]
 8015394:	6a38      	ldr	r0, [r7, #32]
 8015396:	f7fe fe53 	bl	8014040 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801539a:	6a3b      	ldr	r3, [r7, #32]
 801539c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80153a0:	f003 0308 	and.w	r3, r3, #8
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d003      	beq.n	80153b0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80153a8:	6a38      	ldr	r0, [r7, #32]
 80153aa:	f7fe fbc3 	bl	8013b34 <dhcp_check>
 80153ae:	e049      	b.n	8015444 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80153b0:	6a38      	ldr	r0, [r7, #32]
 80153b2:	f7ff f867 	bl	8014484 <dhcp_bind>
 80153b6:	e045      	b.n	8015444 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80153b8:	69fb      	ldr	r3, [r7, #28]
 80153ba:	795b      	ldrb	r3, [r3, #5]
 80153bc:	2b03      	cmp	r3, #3
 80153be:	d007      	beq.n	80153d0 <dhcp_recv+0x10c>
 80153c0:	69fb      	ldr	r3, [r7, #28]
 80153c2:	795b      	ldrb	r3, [r3, #5]
 80153c4:	2b04      	cmp	r3, #4
 80153c6:	d003      	beq.n	80153d0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80153cc:	2b05      	cmp	r3, #5
 80153ce:	d139      	bne.n	8015444 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80153d0:	6979      	ldr	r1, [r7, #20]
 80153d2:	6a38      	ldr	r0, [r7, #32]
 80153d4:	f7fe fe34 	bl	8014040 <dhcp_handle_ack>
      dhcp_bind(netif);
 80153d8:	6a38      	ldr	r0, [r7, #32]
 80153da:	f7ff f853 	bl	8014484 <dhcp_bind>
 80153de:	e031      	b.n	8015444 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80153e0:	7cfb      	ldrb	r3, [r7, #19]
 80153e2:	2b06      	cmp	r3, #6
 80153e4:	d113      	bne.n	801540e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80153e6:	69fb      	ldr	r3, [r7, #28]
 80153e8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80153ea:	2b03      	cmp	r3, #3
 80153ec:	d00b      	beq.n	8015406 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80153ee:	69fb      	ldr	r3, [r7, #28]
 80153f0:	795b      	ldrb	r3, [r3, #5]
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	d007      	beq.n	8015406 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80153f6:	69fb      	ldr	r3, [r7, #28]
 80153f8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80153fa:	2b04      	cmp	r3, #4
 80153fc:	d003      	beq.n	8015406 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80153fe:	69fb      	ldr	r3, [r7, #28]
 8015400:	795b      	ldrb	r3, [r3, #5]
 8015402:	2b05      	cmp	r3, #5
 8015404:	d103      	bne.n	801540e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015406:	6a38      	ldr	r0, [r7, #32]
 8015408:	f7fe fb7a 	bl	8013b00 <dhcp_handle_nak>
 801540c:	e01a      	b.n	8015444 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801540e:	7cfb      	ldrb	r3, [r7, #19]
 8015410:	2b02      	cmp	r3, #2
 8015412:	d116      	bne.n	8015442 <dhcp_recv+0x17e>
 8015414:	69fb      	ldr	r3, [r7, #28]
 8015416:	795b      	ldrb	r3, [r3, #5]
 8015418:	2b06      	cmp	r3, #6
 801541a:	d112      	bne.n	8015442 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801541c:	6979      	ldr	r1, [r7, #20]
 801541e:	6a38      	ldr	r0, [r7, #32]
 8015420:	f7fe fbbc 	bl	8013b9c <dhcp_handle_offer>
 8015424:	e00e      	b.n	8015444 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015426:	bf00      	nop
 8015428:	e00c      	b.n	8015444 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801542a:	bf00      	nop
 801542c:	e00a      	b.n	8015444 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801542e:	bf00      	nop
 8015430:	e008      	b.n	8015444 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015432:	bf00      	nop
 8015434:	e006      	b.n	8015444 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015436:	bf00      	nop
 8015438:	e004      	b.n	8015444 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801543a:	bf00      	nop
 801543c:	e002      	b.n	8015444 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801543e:	bf00      	nop
 8015440:	e000      	b.n	8015444 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015442:	bf00      	nop
  pbuf_free(p);
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7f8 f8a7 	bl	800d598 <pbuf_free>
}
 801544a:	bf00      	nop
 801544c:	3728      	adds	r7, #40	; 0x28
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}
 8015452:	bf00      	nop
 8015454:	2000982c 	.word	0x2000982c
 8015458:	2000c9cc 	.word	0x2000c9cc
 801545c:	2000c9ac 	.word	0x2000c9ac

08015460 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b088      	sub	sp, #32
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	603b      	str	r3, [r7, #0]
 801546c:	4613      	mov	r3, r2
 801546e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d108      	bne.n	8015488 <dhcp_create_msg+0x28>
 8015476:	4b5f      	ldr	r3, [pc, #380]	; (80155f4 <dhcp_create_msg+0x194>)
 8015478:	f240 7269 	movw	r2, #1897	; 0x769
 801547c:	495e      	ldr	r1, [pc, #376]	; (80155f8 <dhcp_create_msg+0x198>)
 801547e:	485f      	ldr	r0, [pc, #380]	; (80155fc <dhcp_create_msg+0x19c>)
 8015480:	f003 fd4e 	bl	8018f20 <iprintf>
 8015484:	2300      	movs	r3, #0
 8015486:	e0b1      	b.n	80155ec <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d108      	bne.n	80154a0 <dhcp_create_msg+0x40>
 801548e:	4b59      	ldr	r3, [pc, #356]	; (80155f4 <dhcp_create_msg+0x194>)
 8015490:	f240 726a 	movw	r2, #1898	; 0x76a
 8015494:	495a      	ldr	r1, [pc, #360]	; (8015600 <dhcp_create_msg+0x1a0>)
 8015496:	4859      	ldr	r0, [pc, #356]	; (80155fc <dhcp_create_msg+0x19c>)
 8015498:	f003 fd42 	bl	8018f20 <iprintf>
 801549c:	2300      	movs	r3, #0
 801549e:	e0a5      	b.n	80155ec <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80154a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80154a8:	2036      	movs	r0, #54	; 0x36
 80154aa:	f7f7 fd91 	bl	800cfd0 <pbuf_alloc>
 80154ae:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80154b0:	69bb      	ldr	r3, [r7, #24]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d101      	bne.n	80154ba <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80154b6:	2300      	movs	r3, #0
 80154b8:	e098      	b.n	80155ec <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80154ba:	69bb      	ldr	r3, [r7, #24]
 80154bc:	895b      	ldrh	r3, [r3, #10]
 80154be:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80154c2:	d206      	bcs.n	80154d2 <dhcp_create_msg+0x72>
 80154c4:	4b4b      	ldr	r3, [pc, #300]	; (80155f4 <dhcp_create_msg+0x194>)
 80154c6:	f240 7271 	movw	r2, #1905	; 0x771
 80154ca:	494e      	ldr	r1, [pc, #312]	; (8015604 <dhcp_create_msg+0x1a4>)
 80154cc:	484b      	ldr	r0, [pc, #300]	; (80155fc <dhcp_create_msg+0x19c>)
 80154ce:	f003 fd27 	bl	8018f20 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80154d2:	79fb      	ldrb	r3, [r7, #7]
 80154d4:	2b03      	cmp	r3, #3
 80154d6:	d103      	bne.n	80154e0 <dhcp_create_msg+0x80>
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	795b      	ldrb	r3, [r3, #5]
 80154dc:	2b03      	cmp	r3, #3
 80154de:	d10d      	bne.n	80154fc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	799b      	ldrb	r3, [r3, #6]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d105      	bne.n	80154f4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80154e8:	f003 fd32 	bl	8018f50 <rand>
 80154ec:	4603      	mov	r3, r0
 80154ee:	461a      	mov	r2, r3
 80154f0:	4b45      	ldr	r3, [pc, #276]	; (8015608 <dhcp_create_msg+0x1a8>)
 80154f2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80154f4:	4b44      	ldr	r3, [pc, #272]	; (8015608 <dhcp_create_msg+0x1a8>)
 80154f6:	681a      	ldr	r2, [r3, #0]
 80154f8:	68bb      	ldr	r3, [r7, #8]
 80154fa:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80154fc:	69bb      	ldr	r3, [r7, #24]
 80154fe:	685b      	ldr	r3, [r3, #4]
 8015500:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015502:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015506:	2100      	movs	r1, #0
 8015508:	6978      	ldr	r0, [r7, #20]
 801550a:	f003 fc23 	bl	8018d54 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	2201      	movs	r2, #1
 8015512:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	2201      	movs	r2, #1
 8015518:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	4618      	mov	r0, r3
 801552a:	f7f6 fc0d 	bl	800bd48 <lwip_htonl>
 801552e:	4602      	mov	r2, r0
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015534:	79fb      	ldrb	r3, [r7, #7]
 8015536:	2b08      	cmp	r3, #8
 8015538:	d010      	beq.n	801555c <dhcp_create_msg+0xfc>
 801553a:	79fb      	ldrb	r3, [r7, #7]
 801553c:	2b04      	cmp	r3, #4
 801553e:	d00d      	beq.n	801555c <dhcp_create_msg+0xfc>
 8015540:	79fb      	ldrb	r3, [r7, #7]
 8015542:	2b07      	cmp	r3, #7
 8015544:	d00a      	beq.n	801555c <dhcp_create_msg+0xfc>
 8015546:	79fb      	ldrb	r3, [r7, #7]
 8015548:	2b03      	cmp	r3, #3
 801554a:	d10c      	bne.n	8015566 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015550:	2b05      	cmp	r3, #5
 8015552:	d003      	beq.n	801555c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	795b      	ldrb	r3, [r3, #5]
 8015558:	2b04      	cmp	r3, #4
 801555a:	d104      	bne.n	8015566 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	3304      	adds	r3, #4
 8015560:	681a      	ldr	r2, [r3, #0]
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015566:	2300      	movs	r3, #0
 8015568:	83fb      	strh	r3, [r7, #30]
 801556a:	e00c      	b.n	8015586 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801556c:	8bfa      	ldrh	r2, [r7, #30]
 801556e:	8bfb      	ldrh	r3, [r7, #30]
 8015570:	68f9      	ldr	r1, [r7, #12]
 8015572:	440a      	add	r2, r1
 8015574:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015578:	697a      	ldr	r2, [r7, #20]
 801557a:	4413      	add	r3, r2
 801557c:	460a      	mov	r2, r1
 801557e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015580:	8bfb      	ldrh	r3, [r7, #30]
 8015582:	3301      	adds	r3, #1
 8015584:	83fb      	strh	r3, [r7, #30]
 8015586:	8bfb      	ldrh	r3, [r7, #30]
 8015588:	2b05      	cmp	r3, #5
 801558a:	d9ef      	bls.n	801556c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	2200      	movs	r2, #0
 8015590:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015594:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015598:	2200      	movs	r2, #0
 801559a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801559e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80155a2:	2200      	movs	r2, #0
 80155a4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80155a8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80155ac:	2200      	movs	r2, #0
 80155ae:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80155b2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155bc:	2301      	movs	r3, #1
 80155be:	2235      	movs	r2, #53	; 0x35
 80155c0:	2000      	movs	r0, #0
 80155c2:	f7ff fadb 	bl	8014b7c <dhcp_option>
 80155c6:	4603      	mov	r3, r0
 80155c8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155d0:	79fa      	ldrb	r2, [r7, #7]
 80155d2:	8a7b      	ldrh	r3, [r7, #18]
 80155d4:	4618      	mov	r0, r3
 80155d6:	f7ff fb05 	bl	8014be4 <dhcp_option_byte>
 80155da:	4603      	mov	r3, r0
 80155dc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d002      	beq.n	80155ea <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	8a7a      	ldrh	r2, [r7, #18]
 80155e8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80155ea:	69bb      	ldr	r3, [r7, #24]
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3720      	adds	r7, #32
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}
 80155f4:	0801bee4 	.word	0x0801bee4
 80155f8:	0801c204 	.word	0x0801c204
 80155fc:	0801bf44 	.word	0x0801bf44
 8015600:	0801c224 	.word	0x0801c224
 8015604:	0801c244 	.word	0x0801c244
 8015608:	2000c9dc 	.word	0x2000c9dc

0801560c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	4603      	mov	r3, r0
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	607a      	str	r2, [r7, #4]
 8015618:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801561a:	89fb      	ldrh	r3, [r7, #14]
 801561c:	1c5a      	adds	r2, r3, #1
 801561e:	81fa      	strh	r2, [r7, #14]
 8015620:	461a      	mov	r2, r3
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	4413      	add	r3, r2
 8015626:	22ff      	movs	r2, #255	; 0xff
 8015628:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801562a:	e007      	b.n	801563c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801562c:	89fb      	ldrh	r3, [r7, #14]
 801562e:	1c5a      	adds	r2, r3, #1
 8015630:	81fa      	strh	r2, [r7, #14]
 8015632:	461a      	mov	r2, r3
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	4413      	add	r3, r2
 8015638:	2200      	movs	r2, #0
 801563a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801563c:	89fb      	ldrh	r3, [r7, #14]
 801563e:	2b43      	cmp	r3, #67	; 0x43
 8015640:	d904      	bls.n	801564c <dhcp_option_trailer+0x40>
 8015642:	89fb      	ldrh	r3, [r7, #14]
 8015644:	f003 0303 	and.w	r3, r3, #3
 8015648:	2b00      	cmp	r3, #0
 801564a:	d002      	beq.n	8015652 <dhcp_option_trailer+0x46>
 801564c:	89fb      	ldrh	r3, [r7, #14]
 801564e:	2b43      	cmp	r3, #67	; 0x43
 8015650:	d9ec      	bls.n	801562c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015652:	89fb      	ldrh	r3, [r7, #14]
 8015654:	33f0      	adds	r3, #240	; 0xf0
 8015656:	b29b      	uxth	r3, r3
 8015658:	4619      	mov	r1, r3
 801565a:	6878      	ldr	r0, [r7, #4]
 801565c:	f7f7 fe16 	bl	800d28c <pbuf_realloc>
}
 8015660:	bf00      	nop
 8015662:	3710      	adds	r7, #16
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}

08015668 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015668:	b480      	push	{r7}
 801566a:	b085      	sub	sp, #20
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d017      	beq.n	80156a6 <dhcp_supplied_address+0x3e>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801567a:	2b00      	cmp	r3, #0
 801567c:	d013      	beq.n	80156a6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015682:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	795b      	ldrb	r3, [r3, #5]
 8015688:	2b0a      	cmp	r3, #10
 801568a:	d007      	beq.n	801569c <dhcp_supplied_address+0x34>
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	795b      	ldrb	r3, [r3, #5]
 8015690:	2b05      	cmp	r3, #5
 8015692:	d003      	beq.n	801569c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015698:	2b04      	cmp	r3, #4
 801569a:	d101      	bne.n	80156a0 <dhcp_supplied_address+0x38>
 801569c:	2301      	movs	r3, #1
 801569e:	e000      	b.n	80156a2 <dhcp_supplied_address+0x3a>
 80156a0:	2300      	movs	r3, #0
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	e000      	b.n	80156a8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80156a6:	2300      	movs	r3, #0
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3714      	adds	r7, #20
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bc80      	pop	{r7}
 80156b0:	4770      	bx	lr
	...

080156b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80156bc:	4915      	ldr	r1, [pc, #84]	; (8015714 <etharp_free_entry+0x60>)
 80156be:	687a      	ldr	r2, [r7, #4]
 80156c0:	4613      	mov	r3, r2
 80156c2:	005b      	lsls	r3, r3, #1
 80156c4:	4413      	add	r3, r2
 80156c6:	00db      	lsls	r3, r3, #3
 80156c8:	440b      	add	r3, r1
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d013      	beq.n	80156f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80156d0:	4910      	ldr	r1, [pc, #64]	; (8015714 <etharp_free_entry+0x60>)
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	4613      	mov	r3, r2
 80156d6:	005b      	lsls	r3, r3, #1
 80156d8:	4413      	add	r3, r2
 80156da:	00db      	lsls	r3, r3, #3
 80156dc:	440b      	add	r3, r1
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7f7 ff59 	bl	800d598 <pbuf_free>
    arp_table[i].q = NULL;
 80156e6:	490b      	ldr	r1, [pc, #44]	; (8015714 <etharp_free_entry+0x60>)
 80156e8:	687a      	ldr	r2, [r7, #4]
 80156ea:	4613      	mov	r3, r2
 80156ec:	005b      	lsls	r3, r3, #1
 80156ee:	4413      	add	r3, r2
 80156f0:	00db      	lsls	r3, r3, #3
 80156f2:	440b      	add	r3, r1
 80156f4:	2200      	movs	r2, #0
 80156f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80156f8:	4906      	ldr	r1, [pc, #24]	; (8015714 <etharp_free_entry+0x60>)
 80156fa:	687a      	ldr	r2, [r7, #4]
 80156fc:	4613      	mov	r3, r2
 80156fe:	005b      	lsls	r3, r3, #1
 8015700:	4413      	add	r3, r2
 8015702:	00db      	lsls	r3, r3, #3
 8015704:	440b      	add	r3, r1
 8015706:	3314      	adds	r3, #20
 8015708:	2200      	movs	r2, #0
 801570a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801570c:	bf00      	nop
 801570e:	3708      	adds	r7, #8
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}
 8015714:	2000c9e0 	.word	0x2000c9e0

08015718 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b082      	sub	sp, #8
 801571c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801571e:	2300      	movs	r3, #0
 8015720:	607b      	str	r3, [r7, #4]
 8015722:	e096      	b.n	8015852 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015724:	494f      	ldr	r1, [pc, #316]	; (8015864 <etharp_tmr+0x14c>)
 8015726:	687a      	ldr	r2, [r7, #4]
 8015728:	4613      	mov	r3, r2
 801572a:	005b      	lsls	r3, r3, #1
 801572c:	4413      	add	r3, r2
 801572e:	00db      	lsls	r3, r3, #3
 8015730:	440b      	add	r3, r1
 8015732:	3314      	adds	r3, #20
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015738:	78fb      	ldrb	r3, [r7, #3]
 801573a:	2b00      	cmp	r3, #0
 801573c:	f000 8086 	beq.w	801584c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015740:	4948      	ldr	r1, [pc, #288]	; (8015864 <etharp_tmr+0x14c>)
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	4613      	mov	r3, r2
 8015746:	005b      	lsls	r3, r3, #1
 8015748:	4413      	add	r3, r2
 801574a:	00db      	lsls	r3, r3, #3
 801574c:	440b      	add	r3, r1
 801574e:	3312      	adds	r3, #18
 8015750:	881b      	ldrh	r3, [r3, #0]
 8015752:	3301      	adds	r3, #1
 8015754:	b298      	uxth	r0, r3
 8015756:	4943      	ldr	r1, [pc, #268]	; (8015864 <etharp_tmr+0x14c>)
 8015758:	687a      	ldr	r2, [r7, #4]
 801575a:	4613      	mov	r3, r2
 801575c:	005b      	lsls	r3, r3, #1
 801575e:	4413      	add	r3, r2
 8015760:	00db      	lsls	r3, r3, #3
 8015762:	440b      	add	r3, r1
 8015764:	3312      	adds	r3, #18
 8015766:	4602      	mov	r2, r0
 8015768:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801576a:	493e      	ldr	r1, [pc, #248]	; (8015864 <etharp_tmr+0x14c>)
 801576c:	687a      	ldr	r2, [r7, #4]
 801576e:	4613      	mov	r3, r2
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	4413      	add	r3, r2
 8015774:	00db      	lsls	r3, r3, #3
 8015776:	440b      	add	r3, r1
 8015778:	3312      	adds	r3, #18
 801577a:	881b      	ldrh	r3, [r3, #0]
 801577c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015780:	d215      	bcs.n	80157ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015782:	4938      	ldr	r1, [pc, #224]	; (8015864 <etharp_tmr+0x14c>)
 8015784:	687a      	ldr	r2, [r7, #4]
 8015786:	4613      	mov	r3, r2
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	4413      	add	r3, r2
 801578c:	00db      	lsls	r3, r3, #3
 801578e:	440b      	add	r3, r1
 8015790:	3314      	adds	r3, #20
 8015792:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015794:	2b01      	cmp	r3, #1
 8015796:	d10e      	bne.n	80157b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015798:	4932      	ldr	r1, [pc, #200]	; (8015864 <etharp_tmr+0x14c>)
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	4613      	mov	r3, r2
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	4413      	add	r3, r2
 80157a2:	00db      	lsls	r3, r3, #3
 80157a4:	440b      	add	r3, r1
 80157a6:	3312      	adds	r3, #18
 80157a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80157aa:	2b04      	cmp	r3, #4
 80157ac:	d903      	bls.n	80157b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	f7ff ff80 	bl	80156b4 <etharp_free_entry>
 80157b4:	e04a      	b.n	801584c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80157b6:	492b      	ldr	r1, [pc, #172]	; (8015864 <etharp_tmr+0x14c>)
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	4613      	mov	r3, r2
 80157bc:	005b      	lsls	r3, r3, #1
 80157be:	4413      	add	r3, r2
 80157c0:	00db      	lsls	r3, r3, #3
 80157c2:	440b      	add	r3, r1
 80157c4:	3314      	adds	r3, #20
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	2b03      	cmp	r3, #3
 80157ca:	d10a      	bne.n	80157e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80157cc:	4925      	ldr	r1, [pc, #148]	; (8015864 <etharp_tmr+0x14c>)
 80157ce:	687a      	ldr	r2, [r7, #4]
 80157d0:	4613      	mov	r3, r2
 80157d2:	005b      	lsls	r3, r3, #1
 80157d4:	4413      	add	r3, r2
 80157d6:	00db      	lsls	r3, r3, #3
 80157d8:	440b      	add	r3, r1
 80157da:	3314      	adds	r3, #20
 80157dc:	2204      	movs	r2, #4
 80157de:	701a      	strb	r2, [r3, #0]
 80157e0:	e034      	b.n	801584c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80157e2:	4920      	ldr	r1, [pc, #128]	; (8015864 <etharp_tmr+0x14c>)
 80157e4:	687a      	ldr	r2, [r7, #4]
 80157e6:	4613      	mov	r3, r2
 80157e8:	005b      	lsls	r3, r3, #1
 80157ea:	4413      	add	r3, r2
 80157ec:	00db      	lsls	r3, r3, #3
 80157ee:	440b      	add	r3, r1
 80157f0:	3314      	adds	r3, #20
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	2b04      	cmp	r3, #4
 80157f6:	d10a      	bne.n	801580e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80157f8:	491a      	ldr	r1, [pc, #104]	; (8015864 <etharp_tmr+0x14c>)
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	4613      	mov	r3, r2
 80157fe:	005b      	lsls	r3, r3, #1
 8015800:	4413      	add	r3, r2
 8015802:	00db      	lsls	r3, r3, #3
 8015804:	440b      	add	r3, r1
 8015806:	3314      	adds	r3, #20
 8015808:	2202      	movs	r2, #2
 801580a:	701a      	strb	r2, [r3, #0]
 801580c:	e01e      	b.n	801584c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801580e:	4915      	ldr	r1, [pc, #84]	; (8015864 <etharp_tmr+0x14c>)
 8015810:	687a      	ldr	r2, [r7, #4]
 8015812:	4613      	mov	r3, r2
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	4413      	add	r3, r2
 8015818:	00db      	lsls	r3, r3, #3
 801581a:	440b      	add	r3, r1
 801581c:	3314      	adds	r3, #20
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	2b01      	cmp	r3, #1
 8015822:	d113      	bne.n	801584c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015824:	490f      	ldr	r1, [pc, #60]	; (8015864 <etharp_tmr+0x14c>)
 8015826:	687a      	ldr	r2, [r7, #4]
 8015828:	4613      	mov	r3, r2
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	4413      	add	r3, r2
 801582e:	00db      	lsls	r3, r3, #3
 8015830:	440b      	add	r3, r1
 8015832:	3308      	adds	r3, #8
 8015834:	6818      	ldr	r0, [r3, #0]
 8015836:	687a      	ldr	r2, [r7, #4]
 8015838:	4613      	mov	r3, r2
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	4413      	add	r3, r2
 801583e:	00db      	lsls	r3, r3, #3
 8015840:	4a08      	ldr	r2, [pc, #32]	; (8015864 <etharp_tmr+0x14c>)
 8015842:	4413      	add	r3, r2
 8015844:	3304      	adds	r3, #4
 8015846:	4619      	mov	r1, r3
 8015848:	f000 fe72 	bl	8016530 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	3301      	adds	r3, #1
 8015850:	607b      	str	r3, [r7, #4]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2b09      	cmp	r3, #9
 8015856:	f77f af65 	ble.w	8015724 <etharp_tmr+0xc>
      }
    }
  }
}
 801585a:	bf00      	nop
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	2000c9e0 	.word	0x2000c9e0

08015868 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b08a      	sub	sp, #40	; 0x28
 801586c:	af00      	add	r7, sp, #0
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	460b      	mov	r3, r1
 8015872:	607a      	str	r2, [r7, #4]
 8015874:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015876:	230a      	movs	r3, #10
 8015878:	84fb      	strh	r3, [r7, #38]	; 0x26
 801587a:	230a      	movs	r3, #10
 801587c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801587e:	230a      	movs	r3, #10
 8015880:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015882:	2300      	movs	r3, #0
 8015884:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015886:	230a      	movs	r3, #10
 8015888:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801588a:	2300      	movs	r3, #0
 801588c:	83bb      	strh	r3, [r7, #28]
 801588e:	2300      	movs	r3, #0
 8015890:	837b      	strh	r3, [r7, #26]
 8015892:	2300      	movs	r3, #0
 8015894:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015896:	2300      	movs	r3, #0
 8015898:	843b      	strh	r3, [r7, #32]
 801589a:	e0ae      	b.n	80159fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801589c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158a0:	49a6      	ldr	r1, [pc, #664]	; (8015b3c <etharp_find_entry+0x2d4>)
 80158a2:	4613      	mov	r3, r2
 80158a4:	005b      	lsls	r3, r3, #1
 80158a6:	4413      	add	r3, r2
 80158a8:	00db      	lsls	r3, r3, #3
 80158aa:	440b      	add	r3, r1
 80158ac:	3314      	adds	r3, #20
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80158b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80158b6:	2b0a      	cmp	r3, #10
 80158b8:	d105      	bne.n	80158c6 <etharp_find_entry+0x5e>
 80158ba:	7dfb      	ldrb	r3, [r7, #23]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d102      	bne.n	80158c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80158c0:	8c3b      	ldrh	r3, [r7, #32]
 80158c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80158c4:	e095      	b.n	80159f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80158c6:	7dfb      	ldrb	r3, [r7, #23]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	f000 8092 	beq.w	80159f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80158ce:	7dfb      	ldrb	r3, [r7, #23]
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d009      	beq.n	80158e8 <etharp_find_entry+0x80>
 80158d4:	7dfb      	ldrb	r3, [r7, #23]
 80158d6:	2b01      	cmp	r3, #1
 80158d8:	d806      	bhi.n	80158e8 <etharp_find_entry+0x80>
 80158da:	4b99      	ldr	r3, [pc, #612]	; (8015b40 <etharp_find_entry+0x2d8>)
 80158dc:	f240 1223 	movw	r2, #291	; 0x123
 80158e0:	4998      	ldr	r1, [pc, #608]	; (8015b44 <etharp_find_entry+0x2dc>)
 80158e2:	4899      	ldr	r0, [pc, #612]	; (8015b48 <etharp_find_entry+0x2e0>)
 80158e4:	f003 fb1c 	bl	8018f20 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d020      	beq.n	8015930 <etharp_find_entry+0xc8>
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	6819      	ldr	r1, [r3, #0]
 80158f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158f6:	4891      	ldr	r0, [pc, #580]	; (8015b3c <etharp_find_entry+0x2d4>)
 80158f8:	4613      	mov	r3, r2
 80158fa:	005b      	lsls	r3, r3, #1
 80158fc:	4413      	add	r3, r2
 80158fe:	00db      	lsls	r3, r3, #3
 8015900:	4403      	add	r3, r0
 8015902:	3304      	adds	r3, #4
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	4299      	cmp	r1, r3
 8015908:	d112      	bne.n	8015930 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d00c      	beq.n	801592a <etharp_find_entry+0xc2>
 8015910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015914:	4989      	ldr	r1, [pc, #548]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015916:	4613      	mov	r3, r2
 8015918:	005b      	lsls	r3, r3, #1
 801591a:	4413      	add	r3, r2
 801591c:	00db      	lsls	r3, r3, #3
 801591e:	440b      	add	r3, r1
 8015920:	3308      	adds	r3, #8
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	687a      	ldr	r2, [r7, #4]
 8015926:	429a      	cmp	r2, r3
 8015928:	d102      	bne.n	8015930 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801592a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801592e:	e100      	b.n	8015b32 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015930:	7dfb      	ldrb	r3, [r7, #23]
 8015932:	2b01      	cmp	r3, #1
 8015934:	d140      	bne.n	80159b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015936:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801593a:	4980      	ldr	r1, [pc, #512]	; (8015b3c <etharp_find_entry+0x2d4>)
 801593c:	4613      	mov	r3, r2
 801593e:	005b      	lsls	r3, r3, #1
 8015940:	4413      	add	r3, r2
 8015942:	00db      	lsls	r3, r3, #3
 8015944:	440b      	add	r3, r1
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d01a      	beq.n	8015982 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801594c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015950:	497a      	ldr	r1, [pc, #488]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015952:	4613      	mov	r3, r2
 8015954:	005b      	lsls	r3, r3, #1
 8015956:	4413      	add	r3, r2
 8015958:	00db      	lsls	r3, r3, #3
 801595a:	440b      	add	r3, r1
 801595c:	3312      	adds	r3, #18
 801595e:	881b      	ldrh	r3, [r3, #0]
 8015960:	8bba      	ldrh	r2, [r7, #28]
 8015962:	429a      	cmp	r2, r3
 8015964:	d845      	bhi.n	80159f2 <etharp_find_entry+0x18a>
            old_queue = i;
 8015966:	8c3b      	ldrh	r3, [r7, #32]
 8015968:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801596a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801596e:	4973      	ldr	r1, [pc, #460]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015970:	4613      	mov	r3, r2
 8015972:	005b      	lsls	r3, r3, #1
 8015974:	4413      	add	r3, r2
 8015976:	00db      	lsls	r3, r3, #3
 8015978:	440b      	add	r3, r1
 801597a:	3312      	adds	r3, #18
 801597c:	881b      	ldrh	r3, [r3, #0]
 801597e:	83bb      	strh	r3, [r7, #28]
 8015980:	e037      	b.n	80159f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015982:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015986:	496d      	ldr	r1, [pc, #436]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015988:	4613      	mov	r3, r2
 801598a:	005b      	lsls	r3, r3, #1
 801598c:	4413      	add	r3, r2
 801598e:	00db      	lsls	r3, r3, #3
 8015990:	440b      	add	r3, r1
 8015992:	3312      	adds	r3, #18
 8015994:	881b      	ldrh	r3, [r3, #0]
 8015996:	8b7a      	ldrh	r2, [r7, #26]
 8015998:	429a      	cmp	r2, r3
 801599a:	d82a      	bhi.n	80159f2 <etharp_find_entry+0x18a>
            old_pending = i;
 801599c:	8c3b      	ldrh	r3, [r7, #32]
 801599e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80159a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159a4:	4965      	ldr	r1, [pc, #404]	; (8015b3c <etharp_find_entry+0x2d4>)
 80159a6:	4613      	mov	r3, r2
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	4413      	add	r3, r2
 80159ac:	00db      	lsls	r3, r3, #3
 80159ae:	440b      	add	r3, r1
 80159b0:	3312      	adds	r3, #18
 80159b2:	881b      	ldrh	r3, [r3, #0]
 80159b4:	837b      	strh	r3, [r7, #26]
 80159b6:	e01c      	b.n	80159f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80159b8:	7dfb      	ldrb	r3, [r7, #23]
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d919      	bls.n	80159f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80159be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159c2:	495e      	ldr	r1, [pc, #376]	; (8015b3c <etharp_find_entry+0x2d4>)
 80159c4:	4613      	mov	r3, r2
 80159c6:	005b      	lsls	r3, r3, #1
 80159c8:	4413      	add	r3, r2
 80159ca:	00db      	lsls	r3, r3, #3
 80159cc:	440b      	add	r3, r1
 80159ce:	3312      	adds	r3, #18
 80159d0:	881b      	ldrh	r3, [r3, #0]
 80159d2:	8b3a      	ldrh	r2, [r7, #24]
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d80c      	bhi.n	80159f2 <etharp_find_entry+0x18a>
            old_stable = i;
 80159d8:	8c3b      	ldrh	r3, [r7, #32]
 80159da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80159dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159e0:	4956      	ldr	r1, [pc, #344]	; (8015b3c <etharp_find_entry+0x2d4>)
 80159e2:	4613      	mov	r3, r2
 80159e4:	005b      	lsls	r3, r3, #1
 80159e6:	4413      	add	r3, r2
 80159e8:	00db      	lsls	r3, r3, #3
 80159ea:	440b      	add	r3, r1
 80159ec:	3312      	adds	r3, #18
 80159ee:	881b      	ldrh	r3, [r3, #0]
 80159f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159f2:	8c3b      	ldrh	r3, [r7, #32]
 80159f4:	3301      	adds	r3, #1
 80159f6:	b29b      	uxth	r3, r3
 80159f8:	843b      	strh	r3, [r7, #32]
 80159fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159fe:	2b09      	cmp	r3, #9
 8015a00:	f77f af4c 	ble.w	801589c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015a04:	7afb      	ldrb	r3, [r7, #11]
 8015a06:	f003 0302 	and.w	r3, r3, #2
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d108      	bne.n	8015a20 <etharp_find_entry+0x1b8>
 8015a0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a12:	2b0a      	cmp	r3, #10
 8015a14:	d107      	bne.n	8015a26 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015a16:	7afb      	ldrb	r3, [r7, #11]
 8015a18:	f003 0301 	and.w	r3, r3, #1
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d102      	bne.n	8015a26 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015a20:	f04f 33ff 	mov.w	r3, #4294967295
 8015a24:	e085      	b.n	8015b32 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015a26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a2a:	2b09      	cmp	r3, #9
 8015a2c:	dc02      	bgt.n	8015a34 <etharp_find_entry+0x1cc>
    i = empty;
 8015a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a30:	843b      	strh	r3, [r7, #32]
 8015a32:	e039      	b.n	8015aa8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015a34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015a38:	2b09      	cmp	r3, #9
 8015a3a:	dc14      	bgt.n	8015a66 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a3e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015a40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a44:	493d      	ldr	r1, [pc, #244]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015a46:	4613      	mov	r3, r2
 8015a48:	005b      	lsls	r3, r3, #1
 8015a4a:	4413      	add	r3, r2
 8015a4c:	00db      	lsls	r3, r3, #3
 8015a4e:	440b      	add	r3, r1
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d018      	beq.n	8015a88 <etharp_find_entry+0x220>
 8015a56:	4b3a      	ldr	r3, [pc, #232]	; (8015b40 <etharp_find_entry+0x2d8>)
 8015a58:	f240 126d 	movw	r2, #365	; 0x16d
 8015a5c:	493b      	ldr	r1, [pc, #236]	; (8015b4c <etharp_find_entry+0x2e4>)
 8015a5e:	483a      	ldr	r0, [pc, #232]	; (8015b48 <etharp_find_entry+0x2e0>)
 8015a60:	f003 fa5e 	bl	8018f20 <iprintf>
 8015a64:	e010      	b.n	8015a88 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015a66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015a6a:	2b09      	cmp	r3, #9
 8015a6c:	dc02      	bgt.n	8015a74 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015a6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015a70:	843b      	strh	r3, [r7, #32]
 8015a72:	e009      	b.n	8015a88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015a74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015a78:	2b09      	cmp	r3, #9
 8015a7a:	dc02      	bgt.n	8015a82 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015a7c:	8bfb      	ldrh	r3, [r7, #30]
 8015a7e:	843b      	strh	r3, [r7, #32]
 8015a80:	e002      	b.n	8015a88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015a82:	f04f 33ff 	mov.w	r3, #4294967295
 8015a86:	e054      	b.n	8015b32 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015a88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a8c:	2b09      	cmp	r3, #9
 8015a8e:	dd06      	ble.n	8015a9e <etharp_find_entry+0x236>
 8015a90:	4b2b      	ldr	r3, [pc, #172]	; (8015b40 <etharp_find_entry+0x2d8>)
 8015a92:	f240 127f 	movw	r2, #383	; 0x17f
 8015a96:	492e      	ldr	r1, [pc, #184]	; (8015b50 <etharp_find_entry+0x2e8>)
 8015a98:	482b      	ldr	r0, [pc, #172]	; (8015b48 <etharp_find_entry+0x2e0>)
 8015a9a:	f003 fa41 	bl	8018f20 <iprintf>
    etharp_free_entry(i);
 8015a9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f7ff fe06 	bl	80156b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015aa8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015aac:	2b09      	cmp	r3, #9
 8015aae:	dd06      	ble.n	8015abe <etharp_find_entry+0x256>
 8015ab0:	4b23      	ldr	r3, [pc, #140]	; (8015b40 <etharp_find_entry+0x2d8>)
 8015ab2:	f240 1283 	movw	r2, #387	; 0x183
 8015ab6:	4926      	ldr	r1, [pc, #152]	; (8015b50 <etharp_find_entry+0x2e8>)
 8015ab8:	4823      	ldr	r0, [pc, #140]	; (8015b48 <etharp_find_entry+0x2e0>)
 8015aba:	f003 fa31 	bl	8018f20 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015abe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ac2:	491e      	ldr	r1, [pc, #120]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015ac4:	4613      	mov	r3, r2
 8015ac6:	005b      	lsls	r3, r3, #1
 8015ac8:	4413      	add	r3, r2
 8015aca:	00db      	lsls	r3, r3, #3
 8015acc:	440b      	add	r3, r1
 8015ace:	3314      	adds	r3, #20
 8015ad0:	781b      	ldrb	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d006      	beq.n	8015ae4 <etharp_find_entry+0x27c>
 8015ad6:	4b1a      	ldr	r3, [pc, #104]	; (8015b40 <etharp_find_entry+0x2d8>)
 8015ad8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015adc:	491d      	ldr	r1, [pc, #116]	; (8015b54 <etharp_find_entry+0x2ec>)
 8015ade:	481a      	ldr	r0, [pc, #104]	; (8015b48 <etharp_find_entry+0x2e0>)
 8015ae0:	f003 fa1e 	bl	8018f20 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d00b      	beq.n	8015b02 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015aea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	6819      	ldr	r1, [r3, #0]
 8015af2:	4812      	ldr	r0, [pc, #72]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015af4:	4613      	mov	r3, r2
 8015af6:	005b      	lsls	r3, r3, #1
 8015af8:	4413      	add	r3, r2
 8015afa:	00db      	lsls	r3, r3, #3
 8015afc:	4403      	add	r3, r0
 8015afe:	3304      	adds	r3, #4
 8015b00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015b02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b06:	490d      	ldr	r1, [pc, #52]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015b08:	4613      	mov	r3, r2
 8015b0a:	005b      	lsls	r3, r3, #1
 8015b0c:	4413      	add	r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	440b      	add	r3, r1
 8015b12:	3312      	adds	r3, #18
 8015b14:	2200      	movs	r2, #0
 8015b16:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015b18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b1c:	4907      	ldr	r1, [pc, #28]	; (8015b3c <etharp_find_entry+0x2d4>)
 8015b1e:	4613      	mov	r3, r2
 8015b20:	005b      	lsls	r3, r3, #1
 8015b22:	4413      	add	r3, r2
 8015b24:	00db      	lsls	r3, r3, #3
 8015b26:	440b      	add	r3, r1
 8015b28:	3308      	adds	r3, #8
 8015b2a:	687a      	ldr	r2, [r7, #4]
 8015b2c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015b2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3728      	adds	r7, #40	; 0x28
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
 8015b3a:	bf00      	nop
 8015b3c:	2000c9e0 	.word	0x2000c9e0
 8015b40:	0801c284 	.word	0x0801c284
 8015b44:	0801c2bc 	.word	0x0801c2bc
 8015b48:	0801c2fc 	.word	0x0801c2fc
 8015b4c:	0801c324 	.word	0x0801c324
 8015b50:	0801c33c 	.word	0x0801c33c
 8015b54:	0801c350 	.word	0x0801c350

08015b58 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b088      	sub	sp, #32
 8015b5c:	af02      	add	r7, sp, #8
 8015b5e:	60f8      	str	r0, [r7, #12]
 8015b60:	60b9      	str	r1, [r7, #8]
 8015b62:	607a      	str	r2, [r7, #4]
 8015b64:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015b6c:	2b06      	cmp	r3, #6
 8015b6e:	d006      	beq.n	8015b7e <etharp_update_arp_entry+0x26>
 8015b70:	4b48      	ldr	r3, [pc, #288]	; (8015c94 <etharp_update_arp_entry+0x13c>)
 8015b72:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015b76:	4948      	ldr	r1, [pc, #288]	; (8015c98 <etharp_update_arp_entry+0x140>)
 8015b78:	4848      	ldr	r0, [pc, #288]	; (8015c9c <etharp_update_arp_entry+0x144>)
 8015b7a:	f003 f9d1 	bl	8018f20 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015b7e:	68bb      	ldr	r3, [r7, #8]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d012      	beq.n	8015baa <etharp_update_arp_entry+0x52>
 8015b84:	68bb      	ldr	r3, [r7, #8]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d00e      	beq.n	8015baa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	68f9      	ldr	r1, [r7, #12]
 8015b92:	4618      	mov	r0, r3
 8015b94:	f001 f944 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 8015b98:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d105      	bne.n	8015baa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015b9e:	68bb      	ldr	r3, [r7, #8]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ba6:	2be0      	cmp	r3, #224	; 0xe0
 8015ba8:	d102      	bne.n	8015bb0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015baa:	f06f 030f 	mvn.w	r3, #15
 8015bae:	e06c      	b.n	8015c8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015bb0:	78fb      	ldrb	r3, [r7, #3]
 8015bb2:	68fa      	ldr	r2, [r7, #12]
 8015bb4:	4619      	mov	r1, r3
 8015bb6:	68b8      	ldr	r0, [r7, #8]
 8015bb8:	f7ff fe56 	bl	8015868 <etharp_find_entry>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015bc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	da02      	bge.n	8015bce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015bc8:	8afb      	ldrh	r3, [r7, #22]
 8015bca:	b25b      	sxtb	r3, r3
 8015bcc:	e05d      	b.n	8015c8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015bce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015bd2:	4933      	ldr	r1, [pc, #204]	; (8015ca0 <etharp_update_arp_entry+0x148>)
 8015bd4:	4613      	mov	r3, r2
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	4413      	add	r3, r2
 8015bda:	00db      	lsls	r3, r3, #3
 8015bdc:	440b      	add	r3, r1
 8015bde:	3314      	adds	r3, #20
 8015be0:	2202      	movs	r2, #2
 8015be2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015be4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015be8:	492d      	ldr	r1, [pc, #180]	; (8015ca0 <etharp_update_arp_entry+0x148>)
 8015bea:	4613      	mov	r3, r2
 8015bec:	005b      	lsls	r3, r3, #1
 8015bee:	4413      	add	r3, r2
 8015bf0:	00db      	lsls	r3, r3, #3
 8015bf2:	440b      	add	r3, r1
 8015bf4:	3308      	adds	r3, #8
 8015bf6:	68fa      	ldr	r2, [r7, #12]
 8015bf8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015bfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015bfe:	4613      	mov	r3, r2
 8015c00:	005b      	lsls	r3, r3, #1
 8015c02:	4413      	add	r3, r2
 8015c04:	00db      	lsls	r3, r3, #3
 8015c06:	3308      	adds	r3, #8
 8015c08:	4a25      	ldr	r2, [pc, #148]	; (8015ca0 <etharp_update_arp_entry+0x148>)
 8015c0a:	4413      	add	r3, r2
 8015c0c:	3304      	adds	r3, #4
 8015c0e:	2206      	movs	r2, #6
 8015c10:	6879      	ldr	r1, [r7, #4]
 8015c12:	4618      	mov	r0, r3
 8015c14:	f003 f890 	bl	8018d38 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015c18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c1c:	4920      	ldr	r1, [pc, #128]	; (8015ca0 <etharp_update_arp_entry+0x148>)
 8015c1e:	4613      	mov	r3, r2
 8015c20:	005b      	lsls	r3, r3, #1
 8015c22:	4413      	add	r3, r2
 8015c24:	00db      	lsls	r3, r3, #3
 8015c26:	440b      	add	r3, r1
 8015c28:	3312      	adds	r3, #18
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015c2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c32:	491b      	ldr	r1, [pc, #108]	; (8015ca0 <etharp_update_arp_entry+0x148>)
 8015c34:	4613      	mov	r3, r2
 8015c36:	005b      	lsls	r3, r3, #1
 8015c38:	4413      	add	r3, r2
 8015c3a:	00db      	lsls	r3, r3, #3
 8015c3c:	440b      	add	r3, r1
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d021      	beq.n	8015c88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015c44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c48:	4915      	ldr	r1, [pc, #84]	; (8015ca0 <etharp_update_arp_entry+0x148>)
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	005b      	lsls	r3, r3, #1
 8015c4e:	4413      	add	r3, r2
 8015c50:	00db      	lsls	r3, r3, #3
 8015c52:	440b      	add	r3, r1
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015c58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c5c:	4910      	ldr	r1, [pc, #64]	; (8015ca0 <etharp_update_arp_entry+0x148>)
 8015c5e:	4613      	mov	r3, r2
 8015c60:	005b      	lsls	r3, r3, #1
 8015c62:	4413      	add	r3, r2
 8015c64:	00db      	lsls	r3, r3, #3
 8015c66:	440b      	add	r3, r1
 8015c68:	2200      	movs	r2, #0
 8015c6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015c72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c76:	9300      	str	r3, [sp, #0]
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	6939      	ldr	r1, [r7, #16]
 8015c7c:	68f8      	ldr	r0, [r7, #12]
 8015c7e:	f001 ffdb 	bl	8017c38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015c82:	6938      	ldr	r0, [r7, #16]
 8015c84:	f7f7 fc88 	bl	800d598 <pbuf_free>
  }
  return ERR_OK;
 8015c88:	2300      	movs	r3, #0
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3718      	adds	r7, #24
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}
 8015c92:	bf00      	nop
 8015c94:	0801c284 	.word	0x0801c284
 8015c98:	0801c37c 	.word	0x0801c37c
 8015c9c:	0801c2fc 	.word	0x0801c2fc
 8015ca0:	2000c9e0 	.word	0x2000c9e0

08015ca4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015cac:	2300      	movs	r3, #0
 8015cae:	60fb      	str	r3, [r7, #12]
 8015cb0:	e01e      	b.n	8015cf0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015cb2:	4913      	ldr	r1, [pc, #76]	; (8015d00 <etharp_cleanup_netif+0x5c>)
 8015cb4:	68fa      	ldr	r2, [r7, #12]
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	005b      	lsls	r3, r3, #1
 8015cba:	4413      	add	r3, r2
 8015cbc:	00db      	lsls	r3, r3, #3
 8015cbe:	440b      	add	r3, r1
 8015cc0:	3314      	adds	r3, #20
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015cc6:	7afb      	ldrb	r3, [r7, #11]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d00e      	beq.n	8015cea <etharp_cleanup_netif+0x46>
 8015ccc:	490c      	ldr	r1, [pc, #48]	; (8015d00 <etharp_cleanup_netif+0x5c>)
 8015cce:	68fa      	ldr	r2, [r7, #12]
 8015cd0:	4613      	mov	r3, r2
 8015cd2:	005b      	lsls	r3, r3, #1
 8015cd4:	4413      	add	r3, r2
 8015cd6:	00db      	lsls	r3, r3, #3
 8015cd8:	440b      	add	r3, r1
 8015cda:	3308      	adds	r3, #8
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d102      	bne.n	8015cea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015ce4:	68f8      	ldr	r0, [r7, #12]
 8015ce6:	f7ff fce5 	bl	80156b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	3301      	adds	r3, #1
 8015cee:	60fb      	str	r3, [r7, #12]
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	2b09      	cmp	r3, #9
 8015cf4:	dddd      	ble.n	8015cb2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015cf6:	bf00      	nop
 8015cf8:	bf00      	nop
 8015cfa:	3710      	adds	r7, #16
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	2000c9e0 	.word	0x2000c9e0

08015d04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015d04:	b5b0      	push	{r4, r5, r7, lr}
 8015d06:	b08a      	sub	sp, #40	; 0x28
 8015d08:	af04      	add	r7, sp, #16
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d107      	bne.n	8015d24 <etharp_input+0x20>
 8015d14:	4b3f      	ldr	r3, [pc, #252]	; (8015e14 <etharp_input+0x110>)
 8015d16:	f240 228a 	movw	r2, #650	; 0x28a
 8015d1a:	493f      	ldr	r1, [pc, #252]	; (8015e18 <etharp_input+0x114>)
 8015d1c:	483f      	ldr	r0, [pc, #252]	; (8015e1c <etharp_input+0x118>)
 8015d1e:	f003 f8ff 	bl	8018f20 <iprintf>
 8015d22:	e074      	b.n	8015e0e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	881b      	ldrh	r3, [r3, #0]
 8015d2e:	b29b      	uxth	r3, r3
 8015d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d34:	d10c      	bne.n	8015d50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015d3a:	2b06      	cmp	r3, #6
 8015d3c:	d108      	bne.n	8015d50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015d42:	2b04      	cmp	r3, #4
 8015d44:	d104      	bne.n	8015d50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	885b      	ldrh	r3, [r3, #2]
 8015d4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015d4c:	2b08      	cmp	r3, #8
 8015d4e:	d003      	beq.n	8015d58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7f7 fc21 	bl	800d598 <pbuf_free>
    return;
 8015d56:	e05a      	b.n	8015e0e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	330e      	adds	r3, #14
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015d60:	693b      	ldr	r3, [r7, #16]
 8015d62:	3318      	adds	r3, #24
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	3304      	adds	r3, #4
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d102      	bne.n	8015d78 <etharp_input+0x74>
    for_us = 0;
 8015d72:	2300      	movs	r3, #0
 8015d74:	75fb      	strb	r3, [r7, #23]
 8015d76:	e009      	b.n	8015d8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015d78:	68ba      	ldr	r2, [r7, #8]
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	3304      	adds	r3, #4
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	bf0c      	ite	eq
 8015d84:	2301      	moveq	r3, #1
 8015d86:	2300      	movne	r3, #0
 8015d88:	b2db      	uxtb	r3, r3
 8015d8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	f103 0208 	add.w	r2, r3, #8
 8015d92:	7dfb      	ldrb	r3, [r7, #23]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d001      	beq.n	8015d9c <etharp_input+0x98>
 8015d98:	2301      	movs	r3, #1
 8015d9a:	e000      	b.n	8015d9e <etharp_input+0x9a>
 8015d9c:	2302      	movs	r3, #2
 8015d9e:	f107 010c 	add.w	r1, r7, #12
 8015da2:	6838      	ldr	r0, [r7, #0]
 8015da4:	f7ff fed8 	bl	8015b58 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	88db      	ldrh	r3, [r3, #6]
 8015dac:	b29b      	uxth	r3, r3
 8015dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015db2:	d003      	beq.n	8015dbc <etharp_input+0xb8>
 8015db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015db8:	d01e      	beq.n	8015df8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015dba:	e025      	b.n	8015e08 <etharp_input+0x104>
      if (for_us) {
 8015dbc:	7dfb      	ldrb	r3, [r7, #23]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d021      	beq.n	8015e06 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015dd8:	693a      	ldr	r2, [r7, #16]
 8015dda:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015ddc:	2102      	movs	r1, #2
 8015dde:	9103      	str	r1, [sp, #12]
 8015de0:	f107 010c 	add.w	r1, r7, #12
 8015de4:	9102      	str	r1, [sp, #8]
 8015de6:	9201      	str	r2, [sp, #4]
 8015de8:	9300      	str	r3, [sp, #0]
 8015dea:	462b      	mov	r3, r5
 8015dec:	4622      	mov	r2, r4
 8015dee:	4601      	mov	r1, r0
 8015df0:	6838      	ldr	r0, [r7, #0]
 8015df2:	f000 faef 	bl	80163d4 <etharp_raw>
      break;
 8015df6:	e006      	b.n	8015e06 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015df8:	f107 030c 	add.w	r3, r7, #12
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	6838      	ldr	r0, [r7, #0]
 8015e00:	f7fe f9fc 	bl	80141fc <dhcp_arp_reply>
      break;
 8015e04:	e000      	b.n	8015e08 <etharp_input+0x104>
      break;
 8015e06:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f7f7 fbc5 	bl	800d598 <pbuf_free>
}
 8015e0e:	3718      	adds	r7, #24
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bdb0      	pop	{r4, r5, r7, pc}
 8015e14:	0801c284 	.word	0x0801c284
 8015e18:	0801c3d4 	.word	0x0801c3d4
 8015e1c:	0801c2fc 	.word	0x0801c2fc

08015e20 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015e2e:	79fa      	ldrb	r2, [r7, #7]
 8015e30:	4944      	ldr	r1, [pc, #272]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015e32:	4613      	mov	r3, r2
 8015e34:	005b      	lsls	r3, r3, #1
 8015e36:	4413      	add	r3, r2
 8015e38:	00db      	lsls	r3, r3, #3
 8015e3a:	440b      	add	r3, r1
 8015e3c:	3314      	adds	r3, #20
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	2b01      	cmp	r3, #1
 8015e42:	d806      	bhi.n	8015e52 <etharp_output_to_arp_index+0x32>
 8015e44:	4b40      	ldr	r3, [pc, #256]	; (8015f48 <etharp_output_to_arp_index+0x128>)
 8015e46:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015e4a:	4940      	ldr	r1, [pc, #256]	; (8015f4c <etharp_output_to_arp_index+0x12c>)
 8015e4c:	4840      	ldr	r0, [pc, #256]	; (8015f50 <etharp_output_to_arp_index+0x130>)
 8015e4e:	f003 f867 	bl	8018f20 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015e52:	79fa      	ldrb	r2, [r7, #7]
 8015e54:	493b      	ldr	r1, [pc, #236]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015e56:	4613      	mov	r3, r2
 8015e58:	005b      	lsls	r3, r3, #1
 8015e5a:	4413      	add	r3, r2
 8015e5c:	00db      	lsls	r3, r3, #3
 8015e5e:	440b      	add	r3, r1
 8015e60:	3314      	adds	r3, #20
 8015e62:	781b      	ldrb	r3, [r3, #0]
 8015e64:	2b02      	cmp	r3, #2
 8015e66:	d153      	bne.n	8015f10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015e68:	79fa      	ldrb	r2, [r7, #7]
 8015e6a:	4936      	ldr	r1, [pc, #216]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015e6c:	4613      	mov	r3, r2
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	4413      	add	r3, r2
 8015e72:	00db      	lsls	r3, r3, #3
 8015e74:	440b      	add	r3, r1
 8015e76:	3312      	adds	r3, #18
 8015e78:	881b      	ldrh	r3, [r3, #0]
 8015e7a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015e7e:	d919      	bls.n	8015eb4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015e80:	79fa      	ldrb	r2, [r7, #7]
 8015e82:	4613      	mov	r3, r2
 8015e84:	005b      	lsls	r3, r3, #1
 8015e86:	4413      	add	r3, r2
 8015e88:	00db      	lsls	r3, r3, #3
 8015e8a:	4a2e      	ldr	r2, [pc, #184]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015e8c:	4413      	add	r3, r2
 8015e8e:	3304      	adds	r3, #4
 8015e90:	4619      	mov	r1, r3
 8015e92:	68f8      	ldr	r0, [r7, #12]
 8015e94:	f000 fb4c 	bl	8016530 <etharp_request>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d138      	bne.n	8015f10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015e9e:	79fa      	ldrb	r2, [r7, #7]
 8015ea0:	4928      	ldr	r1, [pc, #160]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015ea2:	4613      	mov	r3, r2
 8015ea4:	005b      	lsls	r3, r3, #1
 8015ea6:	4413      	add	r3, r2
 8015ea8:	00db      	lsls	r3, r3, #3
 8015eaa:	440b      	add	r3, r1
 8015eac:	3314      	adds	r3, #20
 8015eae:	2203      	movs	r2, #3
 8015eb0:	701a      	strb	r2, [r3, #0]
 8015eb2:	e02d      	b.n	8015f10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015eb4:	79fa      	ldrb	r2, [r7, #7]
 8015eb6:	4923      	ldr	r1, [pc, #140]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015eb8:	4613      	mov	r3, r2
 8015eba:	005b      	lsls	r3, r3, #1
 8015ebc:	4413      	add	r3, r2
 8015ebe:	00db      	lsls	r3, r3, #3
 8015ec0:	440b      	add	r3, r1
 8015ec2:	3312      	adds	r3, #18
 8015ec4:	881b      	ldrh	r3, [r3, #0]
 8015ec6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015eca:	d321      	bcc.n	8015f10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015ecc:	79fa      	ldrb	r2, [r7, #7]
 8015ece:	4613      	mov	r3, r2
 8015ed0:	005b      	lsls	r3, r3, #1
 8015ed2:	4413      	add	r3, r2
 8015ed4:	00db      	lsls	r3, r3, #3
 8015ed6:	4a1b      	ldr	r2, [pc, #108]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015ed8:	4413      	add	r3, r2
 8015eda:	1d19      	adds	r1, r3, #4
 8015edc:	79fa      	ldrb	r2, [r7, #7]
 8015ede:	4613      	mov	r3, r2
 8015ee0:	005b      	lsls	r3, r3, #1
 8015ee2:	4413      	add	r3, r2
 8015ee4:	00db      	lsls	r3, r3, #3
 8015ee6:	3308      	adds	r3, #8
 8015ee8:	4a16      	ldr	r2, [pc, #88]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015eea:	4413      	add	r3, r2
 8015eec:	3304      	adds	r3, #4
 8015eee:	461a      	mov	r2, r3
 8015ef0:	68f8      	ldr	r0, [r7, #12]
 8015ef2:	f000 fafb 	bl	80164ec <etharp_request_dst>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d109      	bne.n	8015f10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015efc:	79fa      	ldrb	r2, [r7, #7]
 8015efe:	4911      	ldr	r1, [pc, #68]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015f00:	4613      	mov	r3, r2
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	4413      	add	r3, r2
 8015f06:	00db      	lsls	r3, r3, #3
 8015f08:	440b      	add	r3, r1
 8015f0a:	3314      	adds	r3, #20
 8015f0c:	2203      	movs	r2, #3
 8015f0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015f16:	79fa      	ldrb	r2, [r7, #7]
 8015f18:	4613      	mov	r3, r2
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4413      	add	r3, r2
 8015f1e:	00db      	lsls	r3, r3, #3
 8015f20:	3308      	adds	r3, #8
 8015f22:	4a08      	ldr	r2, [pc, #32]	; (8015f44 <etharp_output_to_arp_index+0x124>)
 8015f24:	4413      	add	r3, r2
 8015f26:	3304      	adds	r3, #4
 8015f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015f2c:	9200      	str	r2, [sp, #0]
 8015f2e:	460a      	mov	r2, r1
 8015f30:	68b9      	ldr	r1, [r7, #8]
 8015f32:	68f8      	ldr	r0, [r7, #12]
 8015f34:	f001 fe80 	bl	8017c38 <ethernet_output>
 8015f38:	4603      	mov	r3, r0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	2000c9e0 	.word	0x2000c9e0
 8015f48:	0801c284 	.word	0x0801c284
 8015f4c:	0801c3f4 	.word	0x0801c3f4
 8015f50:	0801c2fc 	.word	0x0801c2fc

08015f54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b08a      	sub	sp, #40	; 0x28
 8015f58:	af02      	add	r7, sp, #8
 8015f5a:	60f8      	str	r0, [r7, #12]
 8015f5c:	60b9      	str	r1, [r7, #8]
 8015f5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d106      	bne.n	8015f78 <etharp_output+0x24>
 8015f6a:	4b73      	ldr	r3, [pc, #460]	; (8016138 <etharp_output+0x1e4>)
 8015f6c:	f240 321e 	movw	r2, #798	; 0x31e
 8015f70:	4972      	ldr	r1, [pc, #456]	; (801613c <etharp_output+0x1e8>)
 8015f72:	4873      	ldr	r0, [pc, #460]	; (8016140 <etharp_output+0x1ec>)
 8015f74:	f002 ffd4 	bl	8018f20 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d106      	bne.n	8015f8c <etharp_output+0x38>
 8015f7e:	4b6e      	ldr	r3, [pc, #440]	; (8016138 <etharp_output+0x1e4>)
 8015f80:	f240 321f 	movw	r2, #799	; 0x31f
 8015f84:	496f      	ldr	r1, [pc, #444]	; (8016144 <etharp_output+0x1f0>)
 8015f86:	486e      	ldr	r0, [pc, #440]	; (8016140 <etharp_output+0x1ec>)
 8015f88:	f002 ffca 	bl	8018f20 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d106      	bne.n	8015fa0 <etharp_output+0x4c>
 8015f92:	4b69      	ldr	r3, [pc, #420]	; (8016138 <etharp_output+0x1e4>)
 8015f94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015f98:	496b      	ldr	r1, [pc, #428]	; (8016148 <etharp_output+0x1f4>)
 8015f9a:	4869      	ldr	r0, [pc, #420]	; (8016140 <etharp_output+0x1ec>)
 8015f9c:	f002 ffc0 	bl	8018f20 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	68f9      	ldr	r1, [r7, #12]
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f000 ff3a 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 8015fac:	4603      	mov	r3, r0
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d002      	beq.n	8015fb8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015fb2:	4b66      	ldr	r3, [pc, #408]	; (801614c <etharp_output+0x1f8>)
 8015fb4:	61fb      	str	r3, [r7, #28]
 8015fb6:	e0af      	b.n	8016118 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015fc0:	2be0      	cmp	r3, #224	; 0xe0
 8015fc2:	d118      	bne.n	8015ff6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015fc4:	2301      	movs	r3, #1
 8015fc6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015fcc:	235e      	movs	r3, #94	; 0x5e
 8015fce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015fda:	b2db      	uxtb	r3, r3
 8015fdc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	3302      	adds	r3, #2
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	3303      	adds	r3, #3
 8015fea:	781b      	ldrb	r3, [r3, #0]
 8015fec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015fee:	f107 0310 	add.w	r3, r7, #16
 8015ff2:	61fb      	str	r3, [r7, #28]
 8015ff4:	e090      	b.n	8016118 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681a      	ldr	r2, [r3, #0]
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	405a      	eors	r2, r3
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	3308      	adds	r3, #8
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	4013      	ands	r3, r2
 801600a:	2b00      	cmp	r3, #0
 801600c:	d012      	beq.n	8016034 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016014:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016018:	4293      	cmp	r3, r2
 801601a:	d00b      	beq.n	8016034 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	330c      	adds	r3, #12
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d003      	beq.n	801602e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	330c      	adds	r3, #12
 801602a:	61bb      	str	r3, [r7, #24]
 801602c:	e002      	b.n	8016034 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801602e:	f06f 0303 	mvn.w	r3, #3
 8016032:	e07d      	b.n	8016130 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016034:	4b46      	ldr	r3, [pc, #280]	; (8016150 <etharp_output+0x1fc>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	4619      	mov	r1, r3
 801603a:	4a46      	ldr	r2, [pc, #280]	; (8016154 <etharp_output+0x200>)
 801603c:	460b      	mov	r3, r1
 801603e:	005b      	lsls	r3, r3, #1
 8016040:	440b      	add	r3, r1
 8016042:	00db      	lsls	r3, r3, #3
 8016044:	4413      	add	r3, r2
 8016046:	3314      	adds	r3, #20
 8016048:	781b      	ldrb	r3, [r3, #0]
 801604a:	2b01      	cmp	r3, #1
 801604c:	d925      	bls.n	801609a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801604e:	4b40      	ldr	r3, [pc, #256]	; (8016150 <etharp_output+0x1fc>)
 8016050:	781b      	ldrb	r3, [r3, #0]
 8016052:	4619      	mov	r1, r3
 8016054:	4a3f      	ldr	r2, [pc, #252]	; (8016154 <etharp_output+0x200>)
 8016056:	460b      	mov	r3, r1
 8016058:	005b      	lsls	r3, r3, #1
 801605a:	440b      	add	r3, r1
 801605c:	00db      	lsls	r3, r3, #3
 801605e:	4413      	add	r3, r2
 8016060:	3308      	adds	r3, #8
 8016062:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016064:	68fa      	ldr	r2, [r7, #12]
 8016066:	429a      	cmp	r2, r3
 8016068:	d117      	bne.n	801609a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801606a:	69bb      	ldr	r3, [r7, #24]
 801606c:	681a      	ldr	r2, [r3, #0]
 801606e:	4b38      	ldr	r3, [pc, #224]	; (8016150 <etharp_output+0x1fc>)
 8016070:	781b      	ldrb	r3, [r3, #0]
 8016072:	4618      	mov	r0, r3
 8016074:	4937      	ldr	r1, [pc, #220]	; (8016154 <etharp_output+0x200>)
 8016076:	4603      	mov	r3, r0
 8016078:	005b      	lsls	r3, r3, #1
 801607a:	4403      	add	r3, r0
 801607c:	00db      	lsls	r3, r3, #3
 801607e:	440b      	add	r3, r1
 8016080:	3304      	adds	r3, #4
 8016082:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016084:	429a      	cmp	r2, r3
 8016086:	d108      	bne.n	801609a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016088:	4b31      	ldr	r3, [pc, #196]	; (8016150 <etharp_output+0x1fc>)
 801608a:	781b      	ldrb	r3, [r3, #0]
 801608c:	461a      	mov	r2, r3
 801608e:	68b9      	ldr	r1, [r7, #8]
 8016090:	68f8      	ldr	r0, [r7, #12]
 8016092:	f7ff fec5 	bl	8015e20 <etharp_output_to_arp_index>
 8016096:	4603      	mov	r3, r0
 8016098:	e04a      	b.n	8016130 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801609a:	2300      	movs	r3, #0
 801609c:	75fb      	strb	r3, [r7, #23]
 801609e:	e031      	b.n	8016104 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80160a0:	7dfa      	ldrb	r2, [r7, #23]
 80160a2:	492c      	ldr	r1, [pc, #176]	; (8016154 <etharp_output+0x200>)
 80160a4:	4613      	mov	r3, r2
 80160a6:	005b      	lsls	r3, r3, #1
 80160a8:	4413      	add	r3, r2
 80160aa:	00db      	lsls	r3, r3, #3
 80160ac:	440b      	add	r3, r1
 80160ae:	3314      	adds	r3, #20
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	2b01      	cmp	r3, #1
 80160b4:	d923      	bls.n	80160fe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80160b6:	7dfa      	ldrb	r2, [r7, #23]
 80160b8:	4926      	ldr	r1, [pc, #152]	; (8016154 <etharp_output+0x200>)
 80160ba:	4613      	mov	r3, r2
 80160bc:	005b      	lsls	r3, r3, #1
 80160be:	4413      	add	r3, r2
 80160c0:	00db      	lsls	r3, r3, #3
 80160c2:	440b      	add	r3, r1
 80160c4:	3308      	adds	r3, #8
 80160c6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80160c8:	68fa      	ldr	r2, [r7, #12]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d117      	bne.n	80160fe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80160ce:	69bb      	ldr	r3, [r7, #24]
 80160d0:	6819      	ldr	r1, [r3, #0]
 80160d2:	7dfa      	ldrb	r2, [r7, #23]
 80160d4:	481f      	ldr	r0, [pc, #124]	; (8016154 <etharp_output+0x200>)
 80160d6:	4613      	mov	r3, r2
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	4413      	add	r3, r2
 80160dc:	00db      	lsls	r3, r3, #3
 80160de:	4403      	add	r3, r0
 80160e0:	3304      	adds	r3, #4
 80160e2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80160e4:	4299      	cmp	r1, r3
 80160e6:	d10a      	bne.n	80160fe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80160e8:	4a19      	ldr	r2, [pc, #100]	; (8016150 <etharp_output+0x1fc>)
 80160ea:	7dfb      	ldrb	r3, [r7, #23]
 80160ec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80160ee:	7dfb      	ldrb	r3, [r7, #23]
 80160f0:	461a      	mov	r2, r3
 80160f2:	68b9      	ldr	r1, [r7, #8]
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f7ff fe93 	bl	8015e20 <etharp_output_to_arp_index>
 80160fa:	4603      	mov	r3, r0
 80160fc:	e018      	b.n	8016130 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80160fe:	7dfb      	ldrb	r3, [r7, #23]
 8016100:	3301      	adds	r3, #1
 8016102:	75fb      	strb	r3, [r7, #23]
 8016104:	7dfb      	ldrb	r3, [r7, #23]
 8016106:	2b09      	cmp	r3, #9
 8016108:	d9ca      	bls.n	80160a0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801610a:	68ba      	ldr	r2, [r7, #8]
 801610c:	69b9      	ldr	r1, [r7, #24]
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f000 f822 	bl	8016158 <etharp_query>
 8016114:	4603      	mov	r3, r0
 8016116:	e00b      	b.n	8016130 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801611e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016122:	9300      	str	r3, [sp, #0]
 8016124:	69fb      	ldr	r3, [r7, #28]
 8016126:	68b9      	ldr	r1, [r7, #8]
 8016128:	68f8      	ldr	r0, [r7, #12]
 801612a:	f001 fd85 	bl	8017c38 <ethernet_output>
 801612e:	4603      	mov	r3, r0
}
 8016130:	4618      	mov	r0, r3
 8016132:	3720      	adds	r7, #32
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}
 8016138:	0801c284 	.word	0x0801c284
 801613c:	0801c3d4 	.word	0x0801c3d4
 8016140:	0801c2fc 	.word	0x0801c2fc
 8016144:	0801c424 	.word	0x0801c424
 8016148:	0801c3c4 	.word	0x0801c3c4
 801614c:	0801cb00 	.word	0x0801cb00
 8016150:	2000cad0 	.word	0x2000cad0
 8016154:	2000c9e0 	.word	0x2000c9e0

08016158 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b08c      	sub	sp, #48	; 0x30
 801615c:	af02      	add	r7, sp, #8
 801615e:	60f8      	str	r0, [r7, #12]
 8016160:	60b9      	str	r1, [r7, #8]
 8016162:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	332a      	adds	r3, #42	; 0x2a
 8016168:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801616a:	23ff      	movs	r3, #255	; 0xff
 801616c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016170:	2300      	movs	r3, #0
 8016172:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	68f9      	ldr	r1, [r7, #12]
 801617a:	4618      	mov	r0, r3
 801617c:	f000 fe50 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 8016180:	4603      	mov	r3, r0
 8016182:	2b00      	cmp	r3, #0
 8016184:	d10c      	bne.n	80161a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801618e:	2be0      	cmp	r3, #224	; 0xe0
 8016190:	d006      	beq.n	80161a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d003      	beq.n	80161a0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d102      	bne.n	80161a6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80161a0:	f06f 030f 	mvn.w	r3, #15
 80161a4:	e101      	b.n	80163aa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80161a6:	68fa      	ldr	r2, [r7, #12]
 80161a8:	2101      	movs	r1, #1
 80161aa:	68b8      	ldr	r0, [r7, #8]
 80161ac:	f7ff fb5c 	bl	8015868 <etharp_find_entry>
 80161b0:	4603      	mov	r3, r0
 80161b2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80161b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	da02      	bge.n	80161c2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80161bc:	8a7b      	ldrh	r3, [r7, #18]
 80161be:	b25b      	sxtb	r3, r3
 80161c0:	e0f3      	b.n	80163aa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80161c2:	8a7b      	ldrh	r3, [r7, #18]
 80161c4:	2b7e      	cmp	r3, #126	; 0x7e
 80161c6:	d906      	bls.n	80161d6 <etharp_query+0x7e>
 80161c8:	4b7a      	ldr	r3, [pc, #488]	; (80163b4 <etharp_query+0x25c>)
 80161ca:	f240 32c1 	movw	r2, #961	; 0x3c1
 80161ce:	497a      	ldr	r1, [pc, #488]	; (80163b8 <etharp_query+0x260>)
 80161d0:	487a      	ldr	r0, [pc, #488]	; (80163bc <etharp_query+0x264>)
 80161d2:	f002 fea5 	bl	8018f20 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80161d6:	8a7b      	ldrh	r3, [r7, #18]
 80161d8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80161da:	7c7a      	ldrb	r2, [r7, #17]
 80161dc:	4978      	ldr	r1, [pc, #480]	; (80163c0 <etharp_query+0x268>)
 80161de:	4613      	mov	r3, r2
 80161e0:	005b      	lsls	r3, r3, #1
 80161e2:	4413      	add	r3, r2
 80161e4:	00db      	lsls	r3, r3, #3
 80161e6:	440b      	add	r3, r1
 80161e8:	3314      	adds	r3, #20
 80161ea:	781b      	ldrb	r3, [r3, #0]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d115      	bne.n	801621c <etharp_query+0xc4>
    is_new_entry = 1;
 80161f0:	2301      	movs	r3, #1
 80161f2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80161f4:	7c7a      	ldrb	r2, [r7, #17]
 80161f6:	4972      	ldr	r1, [pc, #456]	; (80163c0 <etharp_query+0x268>)
 80161f8:	4613      	mov	r3, r2
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	4413      	add	r3, r2
 80161fe:	00db      	lsls	r3, r3, #3
 8016200:	440b      	add	r3, r1
 8016202:	3314      	adds	r3, #20
 8016204:	2201      	movs	r2, #1
 8016206:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016208:	7c7a      	ldrb	r2, [r7, #17]
 801620a:	496d      	ldr	r1, [pc, #436]	; (80163c0 <etharp_query+0x268>)
 801620c:	4613      	mov	r3, r2
 801620e:	005b      	lsls	r3, r3, #1
 8016210:	4413      	add	r3, r2
 8016212:	00db      	lsls	r3, r3, #3
 8016214:	440b      	add	r3, r1
 8016216:	3308      	adds	r3, #8
 8016218:	68fa      	ldr	r2, [r7, #12]
 801621a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801621c:	7c7a      	ldrb	r2, [r7, #17]
 801621e:	4968      	ldr	r1, [pc, #416]	; (80163c0 <etharp_query+0x268>)
 8016220:	4613      	mov	r3, r2
 8016222:	005b      	lsls	r3, r3, #1
 8016224:	4413      	add	r3, r2
 8016226:	00db      	lsls	r3, r3, #3
 8016228:	440b      	add	r3, r1
 801622a:	3314      	adds	r3, #20
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	2b01      	cmp	r3, #1
 8016230:	d011      	beq.n	8016256 <etharp_query+0xfe>
 8016232:	7c7a      	ldrb	r2, [r7, #17]
 8016234:	4962      	ldr	r1, [pc, #392]	; (80163c0 <etharp_query+0x268>)
 8016236:	4613      	mov	r3, r2
 8016238:	005b      	lsls	r3, r3, #1
 801623a:	4413      	add	r3, r2
 801623c:	00db      	lsls	r3, r3, #3
 801623e:	440b      	add	r3, r1
 8016240:	3314      	adds	r3, #20
 8016242:	781b      	ldrb	r3, [r3, #0]
 8016244:	2b01      	cmp	r3, #1
 8016246:	d806      	bhi.n	8016256 <etharp_query+0xfe>
 8016248:	4b5a      	ldr	r3, [pc, #360]	; (80163b4 <etharp_query+0x25c>)
 801624a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801624e:	495d      	ldr	r1, [pc, #372]	; (80163c4 <etharp_query+0x26c>)
 8016250:	485a      	ldr	r0, [pc, #360]	; (80163bc <etharp_query+0x264>)
 8016252:	f002 fe65 	bl	8018f20 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016256:	6a3b      	ldr	r3, [r7, #32]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d102      	bne.n	8016262 <etharp_query+0x10a>
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d10c      	bne.n	801627c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016262:	68b9      	ldr	r1, [r7, #8]
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f000 f963 	bl	8016530 <etharp_request>
 801626a:	4603      	mov	r3, r0
 801626c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d102      	bne.n	801627c <etharp_query+0x124>
      return result;
 8016276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801627a:	e096      	b.n	80163aa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d106      	bne.n	8016290 <etharp_query+0x138>
 8016282:	4b4c      	ldr	r3, [pc, #304]	; (80163b4 <etharp_query+0x25c>)
 8016284:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016288:	494f      	ldr	r1, [pc, #316]	; (80163c8 <etharp_query+0x270>)
 801628a:	484c      	ldr	r0, [pc, #304]	; (80163bc <etharp_query+0x264>)
 801628c:	f002 fe48 	bl	8018f20 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016290:	7c7a      	ldrb	r2, [r7, #17]
 8016292:	494b      	ldr	r1, [pc, #300]	; (80163c0 <etharp_query+0x268>)
 8016294:	4613      	mov	r3, r2
 8016296:	005b      	lsls	r3, r3, #1
 8016298:	4413      	add	r3, r2
 801629a:	00db      	lsls	r3, r3, #3
 801629c:	440b      	add	r3, r1
 801629e:	3314      	adds	r3, #20
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d917      	bls.n	80162d6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80162a6:	4a49      	ldr	r2, [pc, #292]	; (80163cc <etharp_query+0x274>)
 80162a8:	7c7b      	ldrb	r3, [r7, #17]
 80162aa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80162ac:	7c7a      	ldrb	r2, [r7, #17]
 80162ae:	4613      	mov	r3, r2
 80162b0:	005b      	lsls	r3, r3, #1
 80162b2:	4413      	add	r3, r2
 80162b4:	00db      	lsls	r3, r3, #3
 80162b6:	3308      	adds	r3, #8
 80162b8:	4a41      	ldr	r2, [pc, #260]	; (80163c0 <etharp_query+0x268>)
 80162ba:	4413      	add	r3, r2
 80162bc:	3304      	adds	r3, #4
 80162be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80162c2:	9200      	str	r2, [sp, #0]
 80162c4:	697a      	ldr	r2, [r7, #20]
 80162c6:	6879      	ldr	r1, [r7, #4]
 80162c8:	68f8      	ldr	r0, [r7, #12]
 80162ca:	f001 fcb5 	bl	8017c38 <ethernet_output>
 80162ce:	4603      	mov	r3, r0
 80162d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162d4:	e067      	b.n	80163a6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80162d6:	7c7a      	ldrb	r2, [r7, #17]
 80162d8:	4939      	ldr	r1, [pc, #228]	; (80163c0 <etharp_query+0x268>)
 80162da:	4613      	mov	r3, r2
 80162dc:	005b      	lsls	r3, r3, #1
 80162de:	4413      	add	r3, r2
 80162e0:	00db      	lsls	r3, r3, #3
 80162e2:	440b      	add	r3, r1
 80162e4:	3314      	adds	r3, #20
 80162e6:	781b      	ldrb	r3, [r3, #0]
 80162e8:	2b01      	cmp	r3, #1
 80162ea:	d15c      	bne.n	80163a6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80162ec:	2300      	movs	r3, #0
 80162ee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80162f4:	e01c      	b.n	8016330 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80162f6:	69fb      	ldr	r3, [r7, #28]
 80162f8:	895a      	ldrh	r2, [r3, #10]
 80162fa:	69fb      	ldr	r3, [r7, #28]
 80162fc:	891b      	ldrh	r3, [r3, #8]
 80162fe:	429a      	cmp	r2, r3
 8016300:	d10a      	bne.n	8016318 <etharp_query+0x1c0>
 8016302:	69fb      	ldr	r3, [r7, #28]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d006      	beq.n	8016318 <etharp_query+0x1c0>
 801630a:	4b2a      	ldr	r3, [pc, #168]	; (80163b4 <etharp_query+0x25c>)
 801630c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016310:	492f      	ldr	r1, [pc, #188]	; (80163d0 <etharp_query+0x278>)
 8016312:	482a      	ldr	r0, [pc, #168]	; (80163bc <etharp_query+0x264>)
 8016314:	f002 fe04 	bl	8018f20 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016318:	69fb      	ldr	r3, [r7, #28]
 801631a:	7b1b      	ldrb	r3, [r3, #12]
 801631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016320:	2b00      	cmp	r3, #0
 8016322:	d002      	beq.n	801632a <etharp_query+0x1d2>
        copy_needed = 1;
 8016324:	2301      	movs	r3, #1
 8016326:	61bb      	str	r3, [r7, #24]
        break;
 8016328:	e005      	b.n	8016336 <etharp_query+0x1de>
      }
      p = p->next;
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d1df      	bne.n	80162f6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d007      	beq.n	801634c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801633c:	687a      	ldr	r2, [r7, #4]
 801633e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016342:	200e      	movs	r0, #14
 8016344:	f7f7 fb9e 	bl	800da84 <pbuf_clone>
 8016348:	61f8      	str	r0, [r7, #28]
 801634a:	e004      	b.n	8016356 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016350:	69f8      	ldr	r0, [r7, #28]
 8016352:	f7f7 f9c5 	bl	800d6e0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d021      	beq.n	80163a0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801635c:	7c7a      	ldrb	r2, [r7, #17]
 801635e:	4918      	ldr	r1, [pc, #96]	; (80163c0 <etharp_query+0x268>)
 8016360:	4613      	mov	r3, r2
 8016362:	005b      	lsls	r3, r3, #1
 8016364:	4413      	add	r3, r2
 8016366:	00db      	lsls	r3, r3, #3
 8016368:	440b      	add	r3, r1
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d00a      	beq.n	8016386 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016370:	7c7a      	ldrb	r2, [r7, #17]
 8016372:	4913      	ldr	r1, [pc, #76]	; (80163c0 <etharp_query+0x268>)
 8016374:	4613      	mov	r3, r2
 8016376:	005b      	lsls	r3, r3, #1
 8016378:	4413      	add	r3, r2
 801637a:	00db      	lsls	r3, r3, #3
 801637c:	440b      	add	r3, r1
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	4618      	mov	r0, r3
 8016382:	f7f7 f909 	bl	800d598 <pbuf_free>
      }
      arp_table[i].q = p;
 8016386:	7c7a      	ldrb	r2, [r7, #17]
 8016388:	490d      	ldr	r1, [pc, #52]	; (80163c0 <etharp_query+0x268>)
 801638a:	4613      	mov	r3, r2
 801638c:	005b      	lsls	r3, r3, #1
 801638e:	4413      	add	r3, r2
 8016390:	00db      	lsls	r3, r3, #3
 8016392:	440b      	add	r3, r1
 8016394:	69fa      	ldr	r2, [r7, #28]
 8016396:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016398:	2300      	movs	r3, #0
 801639a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801639e:	e002      	b.n	80163a6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80163a0:	23ff      	movs	r3, #255	; 0xff
 80163a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80163a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3728      	adds	r7, #40	; 0x28
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	0801c284 	.word	0x0801c284
 80163b8:	0801c430 	.word	0x0801c430
 80163bc:	0801c2fc 	.word	0x0801c2fc
 80163c0:	2000c9e0 	.word	0x2000c9e0
 80163c4:	0801c440 	.word	0x0801c440
 80163c8:	0801c424 	.word	0x0801c424
 80163cc:	2000cad0 	.word	0x2000cad0
 80163d0:	0801c468 	.word	0x0801c468

080163d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b08a      	sub	sp, #40	; 0x28
 80163d8:	af02      	add	r7, sp, #8
 80163da:	60f8      	str	r0, [r7, #12]
 80163dc:	60b9      	str	r1, [r7, #8]
 80163de:	607a      	str	r2, [r7, #4]
 80163e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80163e2:	2300      	movs	r3, #0
 80163e4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d106      	bne.n	80163fa <etharp_raw+0x26>
 80163ec:	4b3a      	ldr	r3, [pc, #232]	; (80164d8 <etharp_raw+0x104>)
 80163ee:	f240 4257 	movw	r2, #1111	; 0x457
 80163f2:	493a      	ldr	r1, [pc, #232]	; (80164dc <etharp_raw+0x108>)
 80163f4:	483a      	ldr	r0, [pc, #232]	; (80164e0 <etharp_raw+0x10c>)
 80163f6:	f002 fd93 	bl	8018f20 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80163fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163fe:	211c      	movs	r1, #28
 8016400:	200e      	movs	r0, #14
 8016402:	f7f6 fde5 	bl	800cfd0 <pbuf_alloc>
 8016406:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016408:	69bb      	ldr	r3, [r7, #24]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d102      	bne.n	8016414 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801640e:	f04f 33ff 	mov.w	r3, #4294967295
 8016412:	e05d      	b.n	80164d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016414:	69bb      	ldr	r3, [r7, #24]
 8016416:	895b      	ldrh	r3, [r3, #10]
 8016418:	2b1b      	cmp	r3, #27
 801641a:	d806      	bhi.n	801642a <etharp_raw+0x56>
 801641c:	4b2e      	ldr	r3, [pc, #184]	; (80164d8 <etharp_raw+0x104>)
 801641e:	f240 4262 	movw	r2, #1122	; 0x462
 8016422:	4930      	ldr	r1, [pc, #192]	; (80164e4 <etharp_raw+0x110>)
 8016424:	482e      	ldr	r0, [pc, #184]	; (80164e0 <etharp_raw+0x10c>)
 8016426:	f002 fd7b 	bl	8018f20 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801642a:	69bb      	ldr	r3, [r7, #24]
 801642c:	685b      	ldr	r3, [r3, #4]
 801642e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016430:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016432:	4618      	mov	r0, r3
 8016434:	f7f5 fc74 	bl	800bd20 <lwip_htons>
 8016438:	4603      	mov	r3, r0
 801643a:	461a      	mov	r2, r3
 801643c:	697b      	ldr	r3, [r7, #20]
 801643e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016446:	2b06      	cmp	r3, #6
 8016448:	d006      	beq.n	8016458 <etharp_raw+0x84>
 801644a:	4b23      	ldr	r3, [pc, #140]	; (80164d8 <etharp_raw+0x104>)
 801644c:	f240 4269 	movw	r2, #1129	; 0x469
 8016450:	4925      	ldr	r1, [pc, #148]	; (80164e8 <etharp_raw+0x114>)
 8016452:	4823      	ldr	r0, [pc, #140]	; (80164e0 <etharp_raw+0x10c>)
 8016454:	f002 fd64 	bl	8018f20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	3308      	adds	r3, #8
 801645c:	2206      	movs	r2, #6
 801645e:	6839      	ldr	r1, [r7, #0]
 8016460:	4618      	mov	r0, r3
 8016462:	f002 fc69 	bl	8018d38 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016466:	697b      	ldr	r3, [r7, #20]
 8016468:	3312      	adds	r3, #18
 801646a:	2206      	movs	r2, #6
 801646c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801646e:	4618      	mov	r0, r3
 8016470:	f002 fc62 	bl	8018d38 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016474:	697b      	ldr	r3, [r7, #20]
 8016476:	330e      	adds	r3, #14
 8016478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801647a:	6812      	ldr	r2, [r2, #0]
 801647c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801647e:	697b      	ldr	r3, [r7, #20]
 8016480:	3318      	adds	r3, #24
 8016482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016484:	6812      	ldr	r2, [r2, #0]
 8016486:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	2200      	movs	r2, #0
 801648c:	701a      	strb	r2, [r3, #0]
 801648e:	2200      	movs	r2, #0
 8016490:	f042 0201 	orr.w	r2, r2, #1
 8016494:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	2200      	movs	r2, #0
 801649a:	f042 0208 	orr.w	r2, r2, #8
 801649e:	709a      	strb	r2, [r3, #2]
 80164a0:	2200      	movs	r2, #0
 80164a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80164a4:	697b      	ldr	r3, [r7, #20]
 80164a6:	2206      	movs	r2, #6
 80164a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80164aa:	697b      	ldr	r3, [r7, #20]
 80164ac:	2204      	movs	r2, #4
 80164ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80164b0:	f640 0306 	movw	r3, #2054	; 0x806
 80164b4:	9300      	str	r3, [sp, #0]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	68ba      	ldr	r2, [r7, #8]
 80164ba:	69b9      	ldr	r1, [r7, #24]
 80164bc:	68f8      	ldr	r0, [r7, #12]
 80164be:	f001 fbbb 	bl	8017c38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80164c2:	69b8      	ldr	r0, [r7, #24]
 80164c4:	f7f7 f868 	bl	800d598 <pbuf_free>
  p = NULL;
 80164c8:	2300      	movs	r3, #0
 80164ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80164cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3720      	adds	r7, #32
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	0801c284 	.word	0x0801c284
 80164dc:	0801c3d4 	.word	0x0801c3d4
 80164e0:	0801c2fc 	.word	0x0801c2fc
 80164e4:	0801c484 	.word	0x0801c484
 80164e8:	0801c4b8 	.word	0x0801c4b8

080164ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b088      	sub	sp, #32
 80164f0:	af04      	add	r7, sp, #16
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016508:	2201      	movs	r2, #1
 801650a:	9203      	str	r2, [sp, #12]
 801650c:	68ba      	ldr	r2, [r7, #8]
 801650e:	9202      	str	r2, [sp, #8]
 8016510:	4a06      	ldr	r2, [pc, #24]	; (801652c <etharp_request_dst+0x40>)
 8016512:	9201      	str	r2, [sp, #4]
 8016514:	9300      	str	r3, [sp, #0]
 8016516:	4603      	mov	r3, r0
 8016518:	687a      	ldr	r2, [r7, #4]
 801651a:	68f8      	ldr	r0, [r7, #12]
 801651c:	f7ff ff5a 	bl	80163d4 <etharp_raw>
 8016520:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016522:	4618      	mov	r0, r3
 8016524:	3710      	adds	r7, #16
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
 801652a:	bf00      	nop
 801652c:	0801cb08 	.word	0x0801cb08

08016530 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b082      	sub	sp, #8
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801653a:	4a05      	ldr	r2, [pc, #20]	; (8016550 <etharp_request+0x20>)
 801653c:	6839      	ldr	r1, [r7, #0]
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7ff ffd4 	bl	80164ec <etharp_request_dst>
 8016544:	4603      	mov	r3, r0
}
 8016546:	4618      	mov	r0, r3
 8016548:	3708      	adds	r7, #8
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}
 801654e:	bf00      	nop
 8016550:	0801cb00 	.word	0x0801cb00

08016554 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b08e      	sub	sp, #56	; 0x38
 8016558:	af04      	add	r7, sp, #16
 801655a:	6078      	str	r0, [r7, #4]
 801655c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801655e:	4b87      	ldr	r3, [pc, #540]	; (801677c <icmp_input+0x228>)
 8016560:	689b      	ldr	r3, [r3, #8]
 8016562:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016566:	781b      	ldrb	r3, [r3, #0]
 8016568:	f003 030f 	and.w	r3, r3, #15
 801656c:	b2db      	uxtb	r3, r3
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	b2db      	uxtb	r3, r3
 8016572:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016576:	2b13      	cmp	r3, #19
 8016578:	f240 80e8 	bls.w	801674c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	895b      	ldrh	r3, [r3, #10]
 8016580:	2b03      	cmp	r3, #3
 8016582:	f240 80e5 	bls.w	8016750 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	781b      	ldrb	r3, [r3, #0]
 801658c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016590:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016594:	2b00      	cmp	r3, #0
 8016596:	f000 80d2 	beq.w	801673e <icmp_input+0x1ea>
 801659a:	2b08      	cmp	r3, #8
 801659c:	f040 80d2 	bne.w	8016744 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80165a0:	4b77      	ldr	r3, [pc, #476]	; (8016780 <icmp_input+0x22c>)
 80165a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80165a4:	4b75      	ldr	r3, [pc, #468]	; (801677c <icmp_input+0x228>)
 80165a6:	695b      	ldr	r3, [r3, #20]
 80165a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80165ac:	2be0      	cmp	r3, #224	; 0xe0
 80165ae:	f000 80d6 	beq.w	801675e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80165b2:	4b72      	ldr	r3, [pc, #456]	; (801677c <icmp_input+0x228>)
 80165b4:	695b      	ldr	r3, [r3, #20]
 80165b6:	4a71      	ldr	r2, [pc, #452]	; (801677c <icmp_input+0x228>)
 80165b8:	6812      	ldr	r2, [r2, #0]
 80165ba:	4611      	mov	r1, r2
 80165bc:	4618      	mov	r0, r3
 80165be:	f000 fc2f 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 80165c2:	4603      	mov	r3, r0
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	f040 80cc 	bne.w	8016762 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	891b      	ldrh	r3, [r3, #8]
 80165ce:	2b07      	cmp	r3, #7
 80165d0:	f240 80c0 	bls.w	8016754 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	f7f5 fc3d 	bl	800be54 <inet_chksum_pbuf>
 80165da:	4603      	mov	r3, r0
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d003      	beq.n	80165e8 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f7f6 ffd9 	bl	800d598 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80165e6:	e0c5      	b.n	8016774 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80165e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165ea:	330e      	adds	r3, #14
 80165ec:	4619      	mov	r1, r3
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f7f6 ff3c 	bl	800d46c <pbuf_add_header>
 80165f4:	4603      	mov	r3, r0
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d04b      	beq.n	8016692 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	891a      	ldrh	r2, [r3, #8]
 80165fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016600:	4413      	add	r3, r2
 8016602:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	891b      	ldrh	r3, [r3, #8]
 8016608:	8b7a      	ldrh	r2, [r7, #26]
 801660a:	429a      	cmp	r2, r3
 801660c:	f0c0 80ab 	bcc.w	8016766 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016610:	8b7b      	ldrh	r3, [r7, #26]
 8016612:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016616:	4619      	mov	r1, r3
 8016618:	200e      	movs	r0, #14
 801661a:	f7f6 fcd9 	bl	800cfd0 <pbuf_alloc>
 801661e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016620:	697b      	ldr	r3, [r7, #20]
 8016622:	2b00      	cmp	r3, #0
 8016624:	f000 80a1 	beq.w	801676a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	895b      	ldrh	r3, [r3, #10]
 801662c:	461a      	mov	r2, r3
 801662e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016630:	3308      	adds	r3, #8
 8016632:	429a      	cmp	r2, r3
 8016634:	d203      	bcs.n	801663e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016636:	6978      	ldr	r0, [r7, #20]
 8016638:	f7f6 ffae 	bl	800d598 <pbuf_free>
          goto icmperr;
 801663c:	e096      	b.n	801676c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801663e:	697b      	ldr	r3, [r7, #20]
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016646:	4618      	mov	r0, r3
 8016648:	f002 fb76 	bl	8018d38 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801664c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801664e:	4619      	mov	r1, r3
 8016650:	6978      	ldr	r0, [r7, #20]
 8016652:	f7f6 ff1b 	bl	800d48c <pbuf_remove_header>
 8016656:	4603      	mov	r3, r0
 8016658:	2b00      	cmp	r3, #0
 801665a:	d009      	beq.n	8016670 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801665c:	4b49      	ldr	r3, [pc, #292]	; (8016784 <icmp_input+0x230>)
 801665e:	22b6      	movs	r2, #182	; 0xb6
 8016660:	4949      	ldr	r1, [pc, #292]	; (8016788 <icmp_input+0x234>)
 8016662:	484a      	ldr	r0, [pc, #296]	; (801678c <icmp_input+0x238>)
 8016664:	f002 fc5c 	bl	8018f20 <iprintf>
          pbuf_free(r);
 8016668:	6978      	ldr	r0, [r7, #20]
 801666a:	f7f6 ff95 	bl	800d598 <pbuf_free>
          goto icmperr;
 801666e:	e07d      	b.n	801676c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016670:	6879      	ldr	r1, [r7, #4]
 8016672:	6978      	ldr	r0, [r7, #20]
 8016674:	f7f7 f8c2 	bl	800d7fc <pbuf_copy>
 8016678:	4603      	mov	r3, r0
 801667a:	2b00      	cmp	r3, #0
 801667c:	d003      	beq.n	8016686 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801667e:	6978      	ldr	r0, [r7, #20]
 8016680:	f7f6 ff8a 	bl	800d598 <pbuf_free>
          goto icmperr;
 8016684:	e072      	b.n	801676c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f7f6 ff86 	bl	800d598 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801668c:	697b      	ldr	r3, [r7, #20]
 801668e:	607b      	str	r3, [r7, #4]
 8016690:	e00f      	b.n	80166b2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016694:	330e      	adds	r3, #14
 8016696:	4619      	mov	r1, r3
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f7f6 fef7 	bl	800d48c <pbuf_remove_header>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d006      	beq.n	80166b2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80166a4:	4b37      	ldr	r3, [pc, #220]	; (8016784 <icmp_input+0x230>)
 80166a6:	22c7      	movs	r2, #199	; 0xc7
 80166a8:	4939      	ldr	r1, [pc, #228]	; (8016790 <icmp_input+0x23c>)
 80166aa:	4838      	ldr	r0, [pc, #224]	; (801678c <icmp_input+0x238>)
 80166ac:	f002 fc38 	bl	8018f20 <iprintf>
          goto icmperr;
 80166b0:	e05c      	b.n	801676c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	685b      	ldr	r3, [r3, #4]
 80166b6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80166b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166ba:	4619      	mov	r1, r3
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	f7f6 fed5 	bl	800d46c <pbuf_add_header>
 80166c2:	4603      	mov	r3, r0
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d13c      	bne.n	8016742 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	685b      	ldr	r3, [r3, #4]
 80166cc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80166ce:	69fb      	ldr	r3, [r7, #28]
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80166d6:	4b29      	ldr	r3, [pc, #164]	; (801677c <icmp_input+0x228>)
 80166d8:	691a      	ldr	r2, [r3, #16]
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	2200      	movs	r2, #0
 80166e2:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	885b      	ldrh	r3, [r3, #2]
 80166e8:	b29b      	uxth	r3, r3
 80166ea:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80166ee:	4293      	cmp	r3, r2
 80166f0:	d907      	bls.n	8016702 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	885b      	ldrh	r3, [r3, #2]
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	3309      	adds	r3, #9
 80166fa:	b29a      	uxth	r2, r3
 80166fc:	693b      	ldr	r3, [r7, #16]
 80166fe:	805a      	strh	r2, [r3, #2]
 8016700:	e006      	b.n	8016710 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8016702:	693b      	ldr	r3, [r7, #16]
 8016704:	885b      	ldrh	r3, [r3, #2]
 8016706:	b29b      	uxth	r3, r3
 8016708:	3308      	adds	r3, #8
 801670a:	b29a      	uxth	r2, r3
 801670c:	693b      	ldr	r3, [r7, #16]
 801670e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	22ff      	movs	r2, #255	; 0xff
 8016714:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2200      	movs	r2, #0
 801671a:	729a      	strb	r2, [r3, #10]
 801671c:	2200      	movs	r2, #0
 801671e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	9302      	str	r3, [sp, #8]
 8016724:	2301      	movs	r3, #1
 8016726:	9301      	str	r3, [sp, #4]
 8016728:	2300      	movs	r3, #0
 801672a:	9300      	str	r3, [sp, #0]
 801672c:	23ff      	movs	r3, #255	; 0xff
 801672e:	2200      	movs	r2, #0
 8016730:	69f9      	ldr	r1, [r7, #28]
 8016732:	6878      	ldr	r0, [r7, #4]
 8016734:	f000 fa9c 	bl	8016c70 <ip4_output_if>
 8016738:	4603      	mov	r3, r0
 801673a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801673c:	e001      	b.n	8016742 <icmp_input+0x1ee>
      break;
 801673e:	bf00      	nop
 8016740:	e000      	b.n	8016744 <icmp_input+0x1f0>
      break;
 8016742:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f7f6 ff27 	bl	800d598 <pbuf_free>
  return;
 801674a:	e013      	b.n	8016774 <icmp_input+0x220>
    goto lenerr;
 801674c:	bf00      	nop
 801674e:	e002      	b.n	8016756 <icmp_input+0x202>
    goto lenerr;
 8016750:	bf00      	nop
 8016752:	e000      	b.n	8016756 <icmp_input+0x202>
        goto lenerr;
 8016754:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016756:	6878      	ldr	r0, [r7, #4]
 8016758:	f7f6 ff1e 	bl	800d598 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801675c:	e00a      	b.n	8016774 <icmp_input+0x220>
        goto icmperr;
 801675e:	bf00      	nop
 8016760:	e004      	b.n	801676c <icmp_input+0x218>
        goto icmperr;
 8016762:	bf00      	nop
 8016764:	e002      	b.n	801676c <icmp_input+0x218>
          goto icmperr;
 8016766:	bf00      	nop
 8016768:	e000      	b.n	801676c <icmp_input+0x218>
          goto icmperr;
 801676a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f7f6 ff13 	bl	800d598 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016772:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016774:	3728      	adds	r7, #40	; 0x28
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
 801677a:	bf00      	nop
 801677c:	2000982c 	.word	0x2000982c
 8016780:	20009840 	.word	0x20009840
 8016784:	0801c4fc 	.word	0x0801c4fc
 8016788:	0801c534 	.word	0x0801c534
 801678c:	0801c56c 	.word	0x0801c56c
 8016790:	0801c594 	.word	0x0801c594

08016794 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	460b      	mov	r3, r1
 801679e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80167a0:	78fb      	ldrb	r3, [r7, #3]
 80167a2:	461a      	mov	r2, r3
 80167a4:	2103      	movs	r1, #3
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f000 f814 	bl	80167d4 <icmp_send_response>
}
 80167ac:	bf00      	nop
 80167ae:	3708      	adds	r7, #8
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}

080167b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b082      	sub	sp, #8
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	460b      	mov	r3, r1
 80167be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80167c0:	78fb      	ldrb	r3, [r7, #3]
 80167c2:	461a      	mov	r2, r3
 80167c4:	210b      	movs	r1, #11
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f000 f804 	bl	80167d4 <icmp_send_response>
}
 80167cc:	bf00      	nop
 80167ce:	3708      	adds	r7, #8
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}

080167d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b08c      	sub	sp, #48	; 0x30
 80167d8:	af04      	add	r7, sp, #16
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	460b      	mov	r3, r1
 80167de:	70fb      	strb	r3, [r7, #3]
 80167e0:	4613      	mov	r3, r2
 80167e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80167e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167e8:	2124      	movs	r1, #36	; 0x24
 80167ea:	2022      	movs	r0, #34	; 0x22
 80167ec:	f7f6 fbf0 	bl	800cfd0 <pbuf_alloc>
 80167f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80167f2:	69fb      	ldr	r3, [r7, #28]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d056      	beq.n	80168a6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	895b      	ldrh	r3, [r3, #10]
 80167fc:	2b23      	cmp	r3, #35	; 0x23
 80167fe:	d806      	bhi.n	801680e <icmp_send_response+0x3a>
 8016800:	4b2b      	ldr	r3, [pc, #172]	; (80168b0 <icmp_send_response+0xdc>)
 8016802:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016806:	492b      	ldr	r1, [pc, #172]	; (80168b4 <icmp_send_response+0xe0>)
 8016808:	482b      	ldr	r0, [pc, #172]	; (80168b8 <icmp_send_response+0xe4>)
 801680a:	f002 fb89 	bl	8018f20 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016814:	69fb      	ldr	r3, [r7, #28]
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801681a:	697b      	ldr	r3, [r7, #20]
 801681c:	78fa      	ldrb	r2, [r7, #3]
 801681e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	78ba      	ldrb	r2, [r7, #2]
 8016824:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	2200      	movs	r2, #0
 801682a:	711a      	strb	r2, [r3, #4]
 801682c:	2200      	movs	r2, #0
 801682e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	2200      	movs	r2, #0
 8016834:	719a      	strb	r2, [r3, #6]
 8016836:	2200      	movs	r2, #0
 8016838:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	685b      	ldr	r3, [r3, #4]
 801683e:	f103 0008 	add.w	r0, r3, #8
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	221c      	movs	r2, #28
 8016848:	4619      	mov	r1, r3
 801684a:	f002 fa75 	bl	8018d38 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801684e:	69bb      	ldr	r3, [r7, #24]
 8016850:	68db      	ldr	r3, [r3, #12]
 8016852:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016854:	f107 030c 	add.w	r3, r7, #12
 8016858:	4618      	mov	r0, r3
 801685a:	f000 f82f 	bl	80168bc <ip4_route>
 801685e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d01b      	beq.n	801689e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016866:	697b      	ldr	r3, [r7, #20]
 8016868:	2200      	movs	r2, #0
 801686a:	709a      	strb	r2, [r3, #2]
 801686c:	2200      	movs	r2, #0
 801686e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	895b      	ldrh	r3, [r3, #10]
 8016874:	4619      	mov	r1, r3
 8016876:	6978      	ldr	r0, [r7, #20]
 8016878:	f7f5 fada 	bl	800be30 <inet_chksum>
 801687c:	4603      	mov	r3, r0
 801687e:	461a      	mov	r2, r3
 8016880:	697b      	ldr	r3, [r7, #20]
 8016882:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016884:	f107 020c 	add.w	r2, r7, #12
 8016888:	693b      	ldr	r3, [r7, #16]
 801688a:	9302      	str	r3, [sp, #8]
 801688c:	2301      	movs	r3, #1
 801688e:	9301      	str	r3, [sp, #4]
 8016890:	2300      	movs	r3, #0
 8016892:	9300      	str	r3, [sp, #0]
 8016894:	23ff      	movs	r3, #255	; 0xff
 8016896:	2100      	movs	r1, #0
 8016898:	69f8      	ldr	r0, [r7, #28]
 801689a:	f000 f9e9 	bl	8016c70 <ip4_output_if>
  }
  pbuf_free(q);
 801689e:	69f8      	ldr	r0, [r7, #28]
 80168a0:	f7f6 fe7a 	bl	800d598 <pbuf_free>
 80168a4:	e000      	b.n	80168a8 <icmp_send_response+0xd4>
    return;
 80168a6:	bf00      	nop
}
 80168a8:	3720      	adds	r7, #32
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop
 80168b0:	0801c4fc 	.word	0x0801c4fc
 80168b4:	0801c5c8 	.word	0x0801c5c8
 80168b8:	0801c56c 	.word	0x0801c56c

080168bc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80168bc:	b480      	push	{r7}
 80168be:	b085      	sub	sp, #20
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80168c4:	4b32      	ldr	r3, [pc, #200]	; (8016990 <ip4_route+0xd4>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	60fb      	str	r3, [r7, #12]
 80168ca:	e036      	b.n	801693a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80168d2:	f003 0301 	and.w	r3, r3, #1
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d02b      	beq.n	8016934 <ip4_route+0x78>
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80168e2:	089b      	lsrs	r3, r3, #2
 80168e4:	f003 0301 	and.w	r3, r3, #1
 80168e8:	b2db      	uxtb	r3, r3
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d022      	beq.n	8016934 <ip4_route+0x78>
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	3304      	adds	r3, #4
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d01d      	beq.n	8016934 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681a      	ldr	r2, [r3, #0]
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	3304      	adds	r3, #4
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	405a      	eors	r2, r3
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	3308      	adds	r3, #8
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	4013      	ands	r3, r2
 801690c:	2b00      	cmp	r3, #0
 801690e:	d101      	bne.n	8016914 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	e038      	b.n	8016986 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801691a:	f003 0302 	and.w	r3, r3, #2
 801691e:	2b00      	cmp	r3, #0
 8016920:	d108      	bne.n	8016934 <ip4_route+0x78>
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	681a      	ldr	r2, [r3, #0]
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	330c      	adds	r3, #12
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	429a      	cmp	r2, r3
 801692e:	d101      	bne.n	8016934 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	e028      	b.n	8016986 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	60fb      	str	r3, [r7, #12]
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d1c5      	bne.n	80168cc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016940:	4b14      	ldr	r3, [pc, #80]	; (8016994 <ip4_route+0xd8>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d01a      	beq.n	801697e <ip4_route+0xc2>
 8016948:	4b12      	ldr	r3, [pc, #72]	; (8016994 <ip4_route+0xd8>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016950:	f003 0301 	and.w	r3, r3, #1
 8016954:	2b00      	cmp	r3, #0
 8016956:	d012      	beq.n	801697e <ip4_route+0xc2>
 8016958:	4b0e      	ldr	r3, [pc, #56]	; (8016994 <ip4_route+0xd8>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016960:	f003 0304 	and.w	r3, r3, #4
 8016964:	2b00      	cmp	r3, #0
 8016966:	d00a      	beq.n	801697e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016968:	4b0a      	ldr	r3, [pc, #40]	; (8016994 <ip4_route+0xd8>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	3304      	adds	r3, #4
 801696e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016970:	2b00      	cmp	r3, #0
 8016972:	d004      	beq.n	801697e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	b2db      	uxtb	r3, r3
 801697a:	2b7f      	cmp	r3, #127	; 0x7f
 801697c:	d101      	bne.n	8016982 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801697e:	2300      	movs	r3, #0
 8016980:	e001      	b.n	8016986 <ip4_route+0xca>
  }

  return netif_default;
 8016982:	4b04      	ldr	r3, [pc, #16]	; (8016994 <ip4_route+0xd8>)
 8016984:	681b      	ldr	r3, [r3, #0]
}
 8016986:	4618      	mov	r0, r3
 8016988:	3714      	adds	r7, #20
 801698a:	46bd      	mov	sp, r7
 801698c:	bc80      	pop	{r7}
 801698e:	4770      	bx	lr
 8016990:	2000c940 	.word	0x2000c940
 8016994:	2000c944 	.word	0x2000c944

08016998 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b082      	sub	sp, #8
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80169a6:	f003 0301 	and.w	r3, r3, #1
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d016      	beq.n	80169de <ip4_input_accept+0x46>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	3304      	adds	r3, #4
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d011      	beq.n	80169de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80169ba:	4b0b      	ldr	r3, [pc, #44]	; (80169e8 <ip4_input_accept+0x50>)
 80169bc:	695a      	ldr	r2, [r3, #20]
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	3304      	adds	r3, #4
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d008      	beq.n	80169da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80169c8:	4b07      	ldr	r3, [pc, #28]	; (80169e8 <ip4_input_accept+0x50>)
 80169ca:	695b      	ldr	r3, [r3, #20]
 80169cc:	6879      	ldr	r1, [r7, #4]
 80169ce:	4618      	mov	r0, r3
 80169d0:	f000 fa26 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 80169d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d001      	beq.n	80169de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80169da:	2301      	movs	r3, #1
 80169dc:	e000      	b.n	80169e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80169de:	2300      	movs	r3, #0
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3708      	adds	r7, #8
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}
 80169e8:	2000982c 	.word	0x2000982c

080169ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b088      	sub	sp, #32
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
 80169f4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80169f6:	2301      	movs	r3, #1
 80169f8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016a00:	69fb      	ldr	r3, [r7, #28]
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	091b      	lsrs	r3, r3, #4
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	2b04      	cmp	r3, #4
 8016a0a:	d004      	beq.n	8016a16 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f7f6 fdc3 	bl	800d598 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016a12:	2300      	movs	r3, #0
 8016a14:	e123      	b.n	8016c5e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016a16:	69fb      	ldr	r3, [r7, #28]
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	f003 030f 	and.w	r3, r3, #15
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	009b      	lsls	r3, r3, #2
 8016a22:	b2db      	uxtb	r3, r3
 8016a24:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	885b      	ldrh	r3, [r3, #2]
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f7f5 f977 	bl	800bd20 <lwip_htons>
 8016a32:	4603      	mov	r3, r0
 8016a34:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	891b      	ldrh	r3, [r3, #8]
 8016a3a:	8a3a      	ldrh	r2, [r7, #16]
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	d204      	bcs.n	8016a4a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016a40:	8a3b      	ldrh	r3, [r7, #16]
 8016a42:	4619      	mov	r1, r3
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f7f6 fc21 	bl	800d28c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	895b      	ldrh	r3, [r3, #10]
 8016a4e:	8a7a      	ldrh	r2, [r7, #18]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d807      	bhi.n	8016a64 <ip4_input+0x78>
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	891b      	ldrh	r3, [r3, #8]
 8016a58:	8a3a      	ldrh	r2, [r7, #16]
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	d802      	bhi.n	8016a64 <ip4_input+0x78>
 8016a5e:	8a7b      	ldrh	r3, [r7, #18]
 8016a60:	2b13      	cmp	r3, #19
 8016a62:	d804      	bhi.n	8016a6e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f7f6 fd97 	bl	800d598 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	e0f7      	b.n	8016c5e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016a6e:	69fb      	ldr	r3, [r7, #28]
 8016a70:	691b      	ldr	r3, [r3, #16]
 8016a72:	4a7d      	ldr	r2, [pc, #500]	; (8016c68 <ip4_input+0x27c>)
 8016a74:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016a76:	69fb      	ldr	r3, [r7, #28]
 8016a78:	68db      	ldr	r3, [r3, #12]
 8016a7a:	4a7b      	ldr	r2, [pc, #492]	; (8016c68 <ip4_input+0x27c>)
 8016a7c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016a7e:	4b7a      	ldr	r3, [pc, #488]	; (8016c68 <ip4_input+0x27c>)
 8016a80:	695b      	ldr	r3, [r3, #20]
 8016a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a86:	2be0      	cmp	r3, #224	; 0xe0
 8016a88:	d112      	bne.n	8016ab0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016a8a:	683b      	ldr	r3, [r7, #0]
 8016a8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a90:	f003 0301 	and.w	r3, r3, #1
 8016a94:	b2db      	uxtb	r3, r3
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d007      	beq.n	8016aaa <ip4_input+0xbe>
 8016a9a:	683b      	ldr	r3, [r7, #0]
 8016a9c:	3304      	adds	r3, #4
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d002      	beq.n	8016aaa <ip4_input+0xbe>
      netif = inp;
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	61bb      	str	r3, [r7, #24]
 8016aa8:	e02a      	b.n	8016b00 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	61bb      	str	r3, [r7, #24]
 8016aae:	e027      	b.n	8016b00 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016ab0:	6838      	ldr	r0, [r7, #0]
 8016ab2:	f7ff ff71 	bl	8016998 <ip4_input_accept>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d002      	beq.n	8016ac2 <ip4_input+0xd6>
      netif = inp;
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	61bb      	str	r3, [r7, #24]
 8016ac0:	e01e      	b.n	8016b00 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016ac6:	4b68      	ldr	r3, [pc, #416]	; (8016c68 <ip4_input+0x27c>)
 8016ac8:	695b      	ldr	r3, [r3, #20]
 8016aca:	b2db      	uxtb	r3, r3
 8016acc:	2b7f      	cmp	r3, #127	; 0x7f
 8016ace:	d017      	beq.n	8016b00 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016ad0:	4b66      	ldr	r3, [pc, #408]	; (8016c6c <ip4_input+0x280>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	61bb      	str	r3, [r7, #24]
 8016ad6:	e00e      	b.n	8016af6 <ip4_input+0x10a>
          if (netif == inp) {
 8016ad8:	69ba      	ldr	r2, [r7, #24]
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d006      	beq.n	8016aee <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016ae0:	69b8      	ldr	r0, [r7, #24]
 8016ae2:	f7ff ff59 	bl	8016998 <ip4_input_accept>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d108      	bne.n	8016afe <ip4_input+0x112>
 8016aec:	e000      	b.n	8016af0 <ip4_input+0x104>
            continue;
 8016aee:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016af0:	69bb      	ldr	r3, [r7, #24]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	61bb      	str	r3, [r7, #24]
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d1ed      	bne.n	8016ad8 <ip4_input+0xec>
 8016afc:	e000      	b.n	8016b00 <ip4_input+0x114>
            break;
 8016afe:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016b00:	69bb      	ldr	r3, [r7, #24]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d111      	bne.n	8016b2a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016b06:	69fb      	ldr	r3, [r7, #28]
 8016b08:	7a5b      	ldrb	r3, [r3, #9]
 8016b0a:	2b11      	cmp	r3, #17
 8016b0c:	d10d      	bne.n	8016b2a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016b0e:	8a7b      	ldrh	r3, [r7, #18]
 8016b10:	69fa      	ldr	r2, [r7, #28]
 8016b12:	4413      	add	r3, r2
 8016b14:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	885b      	ldrh	r3, [r3, #2]
 8016b1a:	b29b      	uxth	r3, r3
 8016b1c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016b20:	d103      	bne.n	8016b2a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016b26:	2300      	movs	r3, #0
 8016b28:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d017      	beq.n	8016b60 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016b30:	4b4d      	ldr	r3, [pc, #308]	; (8016c68 <ip4_input+0x27c>)
 8016b32:	691b      	ldr	r3, [r3, #16]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d013      	beq.n	8016b60 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016b38:	4b4b      	ldr	r3, [pc, #300]	; (8016c68 <ip4_input+0x27c>)
 8016b3a:	691b      	ldr	r3, [r3, #16]
 8016b3c:	6839      	ldr	r1, [r7, #0]
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f000 f96e 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 8016b44:	4603      	mov	r3, r0
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d105      	bne.n	8016b56 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016b4a:	4b47      	ldr	r3, [pc, #284]	; (8016c68 <ip4_input+0x27c>)
 8016b4c:	691b      	ldr	r3, [r3, #16]
 8016b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016b52:	2be0      	cmp	r3, #224	; 0xe0
 8016b54:	d104      	bne.n	8016b60 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f7f6 fd1e 	bl	800d598 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	e07e      	b.n	8016c5e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016b60:	69bb      	ldr	r3, [r7, #24]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d104      	bne.n	8016b70 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f7f6 fd16 	bl	800d598 <pbuf_free>
    return ERR_OK;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	e076      	b.n	8016c5e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016b70:	69fb      	ldr	r3, [r7, #28]
 8016b72:	88db      	ldrh	r3, [r3, #6]
 8016b74:	b29b      	uxth	r3, r3
 8016b76:	461a      	mov	r2, r3
 8016b78:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016b7c:	4013      	ands	r3, r2
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d00b      	beq.n	8016b9a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f000 fc90 	bl	80174a8 <ip4_reass>
 8016b88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d101      	bne.n	8016b94 <ip4_input+0x1a8>
      return ERR_OK;
 8016b90:	2300      	movs	r3, #0
 8016b92:	e064      	b.n	8016c5e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	685b      	ldr	r3, [r3, #4]
 8016b98:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016b9a:	4a33      	ldr	r2, [pc, #204]	; (8016c68 <ip4_input+0x27c>)
 8016b9c:	69bb      	ldr	r3, [r7, #24]
 8016b9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016ba0:	4a31      	ldr	r2, [pc, #196]	; (8016c68 <ip4_input+0x27c>)
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016ba6:	4a30      	ldr	r2, [pc, #192]	; (8016c68 <ip4_input+0x27c>)
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016bac:	69fb      	ldr	r3, [r7, #28]
 8016bae:	781b      	ldrb	r3, [r3, #0]
 8016bb0:	f003 030f 	and.w	r3, r3, #15
 8016bb4:	b2db      	uxtb	r3, r3
 8016bb6:	009b      	lsls	r3, r3, #2
 8016bb8:	b2db      	uxtb	r3, r3
 8016bba:	b29a      	uxth	r2, r3
 8016bbc:	4b2a      	ldr	r3, [pc, #168]	; (8016c68 <ip4_input+0x27c>)
 8016bbe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016bc0:	8a7b      	ldrh	r3, [r7, #18]
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f7f6 fc61 	bl	800d48c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016bca:	69fb      	ldr	r3, [r7, #28]
 8016bcc:	7a5b      	ldrb	r3, [r3, #9]
 8016bce:	2b11      	cmp	r3, #17
 8016bd0:	d006      	beq.n	8016be0 <ip4_input+0x1f4>
 8016bd2:	2b11      	cmp	r3, #17
 8016bd4:	dc13      	bgt.n	8016bfe <ip4_input+0x212>
 8016bd6:	2b01      	cmp	r3, #1
 8016bd8:	d00c      	beq.n	8016bf4 <ip4_input+0x208>
 8016bda:	2b06      	cmp	r3, #6
 8016bdc:	d005      	beq.n	8016bea <ip4_input+0x1fe>
 8016bde:	e00e      	b.n	8016bfe <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016be0:	6839      	ldr	r1, [r7, #0]
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f7fc fb04 	bl	80131f0 <udp_input>
        break;
 8016be8:	e026      	b.n	8016c38 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016bea:	6839      	ldr	r1, [r7, #0]
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f7f8 fb15 	bl	800f21c <tcp_input>
        break;
 8016bf2:	e021      	b.n	8016c38 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016bf4:	6839      	ldr	r1, [r7, #0]
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7ff fcac 	bl	8016554 <icmp_input>
        break;
 8016bfc:	e01c      	b.n	8016c38 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016bfe:	4b1a      	ldr	r3, [pc, #104]	; (8016c68 <ip4_input+0x27c>)
 8016c00:	695b      	ldr	r3, [r3, #20]
 8016c02:	69b9      	ldr	r1, [r7, #24]
 8016c04:	4618      	mov	r0, r3
 8016c06:	f000 f90b 	bl	8016e20 <ip4_addr_isbroadcast_u32>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d10f      	bne.n	8016c30 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c10:	4b15      	ldr	r3, [pc, #84]	; (8016c68 <ip4_input+0x27c>)
 8016c12:	695b      	ldr	r3, [r3, #20]
 8016c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016c18:	2be0      	cmp	r3, #224	; 0xe0
 8016c1a:	d009      	beq.n	8016c30 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016c1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c20:	4619      	mov	r1, r3
 8016c22:	6878      	ldr	r0, [r7, #4]
 8016c24:	f7f6 fca5 	bl	800d572 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016c28:	2102      	movs	r1, #2
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f7ff fdb2 	bl	8016794 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f7f6 fcb1 	bl	800d598 <pbuf_free>
        break;
 8016c36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016c38:	4b0b      	ldr	r3, [pc, #44]	; (8016c68 <ip4_input+0x27c>)
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016c3e:	4b0a      	ldr	r3, [pc, #40]	; (8016c68 <ip4_input+0x27c>)
 8016c40:	2200      	movs	r2, #0
 8016c42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016c44:	4b08      	ldr	r3, [pc, #32]	; (8016c68 <ip4_input+0x27c>)
 8016c46:	2200      	movs	r2, #0
 8016c48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016c4a:	4b07      	ldr	r3, [pc, #28]	; (8016c68 <ip4_input+0x27c>)
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016c50:	4b05      	ldr	r3, [pc, #20]	; (8016c68 <ip4_input+0x27c>)
 8016c52:	2200      	movs	r2, #0
 8016c54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016c56:	4b04      	ldr	r3, [pc, #16]	; (8016c68 <ip4_input+0x27c>)
 8016c58:	2200      	movs	r2, #0
 8016c5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016c5c:	2300      	movs	r3, #0
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3720      	adds	r7, #32
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}
 8016c66:	bf00      	nop
 8016c68:	2000982c 	.word	0x2000982c
 8016c6c:	2000c940 	.word	0x2000c940

08016c70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b08a      	sub	sp, #40	; 0x28
 8016c74:	af04      	add	r7, sp, #16
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	60b9      	str	r1, [r7, #8]
 8016c7a:	607a      	str	r2, [r7, #4]
 8016c7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d009      	beq.n	8016c9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d003      	beq.n	8016c96 <ip4_output_if+0x26>
 8016c8e:	68bb      	ldr	r3, [r7, #8]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d102      	bne.n	8016c9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c98:	3304      	adds	r3, #4
 8016c9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016c9c:	78fa      	ldrb	r2, [r7, #3]
 8016c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca0:	9302      	str	r3, [sp, #8]
 8016ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ca6:	9301      	str	r3, [sp, #4]
 8016ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016cac:	9300      	str	r3, [sp, #0]
 8016cae:	4613      	mov	r3, r2
 8016cb0:	687a      	ldr	r2, [r7, #4]
 8016cb2:	6979      	ldr	r1, [r7, #20]
 8016cb4:	68f8      	ldr	r0, [r7, #12]
 8016cb6:	f000 f805 	bl	8016cc4 <ip4_output_if_src>
 8016cba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	3718      	adds	r7, #24
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bd80      	pop	{r7, pc}

08016cc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b088      	sub	sp, #32
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	60f8      	str	r0, [r7, #12]
 8016ccc:	60b9      	str	r1, [r7, #8]
 8016cce:	607a      	str	r2, [r7, #4]
 8016cd0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	7b9b      	ldrb	r3, [r3, #14]
 8016cd6:	2b01      	cmp	r3, #1
 8016cd8:	d006      	beq.n	8016ce8 <ip4_output_if_src+0x24>
 8016cda:	4b4b      	ldr	r3, [pc, #300]	; (8016e08 <ip4_output_if_src+0x144>)
 8016cdc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016ce0:	494a      	ldr	r1, [pc, #296]	; (8016e0c <ip4_output_if_src+0x148>)
 8016ce2:	484b      	ldr	r0, [pc, #300]	; (8016e10 <ip4_output_if_src+0x14c>)
 8016ce4:	f002 f91c 	bl	8018f20 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d060      	beq.n	8016db0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016cee:	2314      	movs	r3, #20
 8016cf0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016cf2:	2114      	movs	r1, #20
 8016cf4:	68f8      	ldr	r0, [r7, #12]
 8016cf6:	f7f6 fbb9 	bl	800d46c <pbuf_add_header>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d002      	beq.n	8016d06 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016d00:	f06f 0301 	mvn.w	r3, #1
 8016d04:	e07c      	b.n	8016e00 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	685b      	ldr	r3, [r3, #4]
 8016d0a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	895b      	ldrh	r3, [r3, #10]
 8016d10:	2b13      	cmp	r3, #19
 8016d12:	d806      	bhi.n	8016d22 <ip4_output_if_src+0x5e>
 8016d14:	4b3c      	ldr	r3, [pc, #240]	; (8016e08 <ip4_output_if_src+0x144>)
 8016d16:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016d1a:	493e      	ldr	r1, [pc, #248]	; (8016e14 <ip4_output_if_src+0x150>)
 8016d1c:	483c      	ldr	r0, [pc, #240]	; (8016e10 <ip4_output_if_src+0x14c>)
 8016d1e:	f002 f8ff 	bl	8018f20 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	78fa      	ldrb	r2, [r7, #3]
 8016d26:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016d2e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681a      	ldr	r2, [r3, #0]
 8016d34:	69fb      	ldr	r3, [r7, #28]
 8016d36:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016d38:	8b7b      	ldrh	r3, [r7, #26]
 8016d3a:	089b      	lsrs	r3, r3, #2
 8016d3c:	b29b      	uxth	r3, r3
 8016d3e:	b2db      	uxtb	r3, r3
 8016d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d44:	b2da      	uxtb	r2, r3
 8016d46:	69fb      	ldr	r3, [r7, #28]
 8016d48:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016d4a:	69fb      	ldr	r3, [r7, #28]
 8016d4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016d50:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	891b      	ldrh	r3, [r3, #8]
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7f4 ffe2 	bl	800bd20 <lwip_htons>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	461a      	mov	r2, r3
 8016d60:	69fb      	ldr	r3, [r7, #28]
 8016d62:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	2200      	movs	r2, #0
 8016d68:	719a      	strb	r2, [r3, #6]
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016d6e:	4b2a      	ldr	r3, [pc, #168]	; (8016e18 <ip4_output_if_src+0x154>)
 8016d70:	881b      	ldrh	r3, [r3, #0]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7f4 ffd4 	bl	800bd20 <lwip_htons>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	461a      	mov	r2, r3
 8016d7c:	69fb      	ldr	r3, [r7, #28]
 8016d7e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016d80:	4b25      	ldr	r3, [pc, #148]	; (8016e18 <ip4_output_if_src+0x154>)
 8016d82:	881b      	ldrh	r3, [r3, #0]
 8016d84:	3301      	adds	r3, #1
 8016d86:	b29a      	uxth	r2, r3
 8016d88:	4b23      	ldr	r3, [pc, #140]	; (8016e18 <ip4_output_if_src+0x154>)
 8016d8a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d104      	bne.n	8016d9c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016d92:	4b22      	ldr	r3, [pc, #136]	; (8016e1c <ip4_output_if_src+0x158>)
 8016d94:	681a      	ldr	r2, [r3, #0]
 8016d96:	69fb      	ldr	r3, [r7, #28]
 8016d98:	60da      	str	r2, [r3, #12]
 8016d9a:	e003      	b.n	8016da4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016d9c:	68bb      	ldr	r3, [r7, #8]
 8016d9e:	681a      	ldr	r2, [r3, #0]
 8016da0:	69fb      	ldr	r3, [r7, #28]
 8016da2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016da4:	69fb      	ldr	r3, [r7, #28]
 8016da6:	2200      	movs	r2, #0
 8016da8:	729a      	strb	r2, [r3, #10]
 8016daa:	2200      	movs	r2, #0
 8016dac:	72da      	strb	r2, [r3, #11]
 8016dae:	e00f      	b.n	8016dd0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	895b      	ldrh	r3, [r3, #10]
 8016db4:	2b13      	cmp	r3, #19
 8016db6:	d802      	bhi.n	8016dbe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016db8:	f06f 0301 	mvn.w	r3, #1
 8016dbc:	e020      	b.n	8016e00 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016dc4:	69fb      	ldr	r3, [r7, #28]
 8016dc6:	691b      	ldr	r3, [r3, #16]
 8016dc8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016dca:	f107 0314 	add.w	r3, r7, #20
 8016dce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d00c      	beq.n	8016df2 <ip4_output_if_src+0x12e>
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	891a      	ldrh	r2, [r3, #8]
 8016ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d906      	bls.n	8016df2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016de4:	687a      	ldr	r2, [r7, #4]
 8016de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f000 fd51 	bl	8017890 <ip4_frag>
 8016dee:	4603      	mov	r3, r0
 8016df0:	e006      	b.n	8016e00 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df4:	695b      	ldr	r3, [r3, #20]
 8016df6:	687a      	ldr	r2, [r7, #4]
 8016df8:	68f9      	ldr	r1, [r7, #12]
 8016dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016dfc:	4798      	blx	r3
 8016dfe:	4603      	mov	r3, r0
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3720      	adds	r7, #32
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}
 8016e08:	0801c5f4 	.word	0x0801c5f4
 8016e0c:	0801c628 	.word	0x0801c628
 8016e10:	0801c634 	.word	0x0801c634
 8016e14:	0801c65c 	.word	0x0801c65c
 8016e18:	2000cad2 	.word	0x2000cad2
 8016e1c:	0801caf8 	.word	0x0801caf8

08016e20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016e20:	b480      	push	{r7}
 8016e22:	b085      	sub	sp, #20
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e34:	d002      	beq.n	8016e3c <ip4_addr_isbroadcast_u32+0x1c>
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d101      	bne.n	8016e40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016e3c:	2301      	movs	r3, #1
 8016e3e:	e02a      	b.n	8016e96 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016e40:	683b      	ldr	r3, [r7, #0]
 8016e42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016e46:	f003 0302 	and.w	r3, r3, #2
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d101      	bne.n	8016e52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	e021      	b.n	8016e96 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	3304      	adds	r3, #4
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	687a      	ldr	r2, [r7, #4]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d101      	bne.n	8016e62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	e019      	b.n	8016e96 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016e62:	68fa      	ldr	r2, [r7, #12]
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	3304      	adds	r3, #4
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	405a      	eors	r2, r3
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	3308      	adds	r3, #8
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	4013      	ands	r3, r2
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d10d      	bne.n	8016e94 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	3308      	adds	r3, #8
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	43da      	mvns	r2, r3
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	3308      	adds	r3, #8
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	d101      	bne.n	8016e94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016e90:	2301      	movs	r3, #1
 8016e92:	e000      	b.n	8016e96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016e94:	2300      	movs	r3, #0
  }
}
 8016e96:	4618      	mov	r0, r3
 8016e98:	3714      	adds	r7, #20
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bc80      	pop	{r7}
 8016e9e:	4770      	bx	lr

08016ea0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016eaa:	4b12      	ldr	r3, [pc, #72]	; (8016ef4 <ip_reass_tmr+0x54>)
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016eb0:	e018      	b.n	8016ee4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	7fdb      	ldrb	r3, [r3, #31]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d00b      	beq.n	8016ed2 <ip_reass_tmr+0x32>
      r->timer--;
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	7fdb      	ldrb	r3, [r3, #31]
 8016ebe:	3b01      	subs	r3, #1
 8016ec0:	b2da      	uxtb	r2, r3
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	60fb      	str	r3, [r7, #12]
 8016ed0:	e008      	b.n	8016ee4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016edc:	68b9      	ldr	r1, [r7, #8]
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f000 f80a 	bl	8016ef8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d1e3      	bne.n	8016eb2 <ip_reass_tmr+0x12>
    }
  }
}
 8016eea:	bf00      	nop
 8016eec:	bf00      	nop
 8016eee:	3710      	adds	r7, #16
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}
 8016ef4:	2000cad4 	.word	0x2000cad4

08016ef8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b088      	sub	sp, #32
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016f02:	2300      	movs	r3, #0
 8016f04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016f06:	683a      	ldr	r2, [r7, #0]
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d105      	bne.n	8016f1a <ip_reass_free_complete_datagram+0x22>
 8016f0e:	4b45      	ldr	r3, [pc, #276]	; (8017024 <ip_reass_free_complete_datagram+0x12c>)
 8016f10:	22ab      	movs	r2, #171	; 0xab
 8016f12:	4945      	ldr	r1, [pc, #276]	; (8017028 <ip_reass_free_complete_datagram+0x130>)
 8016f14:	4845      	ldr	r0, [pc, #276]	; (801702c <ip_reass_free_complete_datagram+0x134>)
 8016f16:	f002 f803 	bl	8018f20 <iprintf>
  if (prev != NULL) {
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d00a      	beq.n	8016f36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	687a      	ldr	r2, [r7, #4]
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d005      	beq.n	8016f36 <ip_reass_free_complete_datagram+0x3e>
 8016f2a:	4b3e      	ldr	r3, [pc, #248]	; (8017024 <ip_reass_free_complete_datagram+0x12c>)
 8016f2c:	22ad      	movs	r2, #173	; 0xad
 8016f2e:	4940      	ldr	r1, [pc, #256]	; (8017030 <ip_reass_free_complete_datagram+0x138>)
 8016f30:	483e      	ldr	r0, [pc, #248]	; (801702c <ip_reass_free_complete_datagram+0x134>)
 8016f32:	f001 fff5 	bl	8018f20 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	685b      	ldr	r3, [r3, #4]
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	889b      	ldrh	r3, [r3, #4]
 8016f42:	b29b      	uxth	r3, r3
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d12a      	bne.n	8016f9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	685b      	ldr	r3, [r3, #4]
 8016f4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	681a      	ldr	r2, [r3, #0]
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016f56:	69bb      	ldr	r3, [r7, #24]
 8016f58:	6858      	ldr	r0, [r3, #4]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	3308      	adds	r3, #8
 8016f5e:	2214      	movs	r2, #20
 8016f60:	4619      	mov	r1, r3
 8016f62:	f001 fee9 	bl	8018d38 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016f66:	2101      	movs	r1, #1
 8016f68:	69b8      	ldr	r0, [r7, #24]
 8016f6a:	f7ff fc23 	bl	80167b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016f6e:	69b8      	ldr	r0, [r7, #24]
 8016f70:	f7f6 fba0 	bl	800d6b4 <pbuf_clen>
 8016f74:	4603      	mov	r3, r0
 8016f76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016f78:	8bfa      	ldrh	r2, [r7, #30]
 8016f7a:	8a7b      	ldrh	r3, [r7, #18]
 8016f7c:	4413      	add	r3, r2
 8016f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f82:	db05      	blt.n	8016f90 <ip_reass_free_complete_datagram+0x98>
 8016f84:	4b27      	ldr	r3, [pc, #156]	; (8017024 <ip_reass_free_complete_datagram+0x12c>)
 8016f86:	22bc      	movs	r2, #188	; 0xbc
 8016f88:	492a      	ldr	r1, [pc, #168]	; (8017034 <ip_reass_free_complete_datagram+0x13c>)
 8016f8a:	4828      	ldr	r0, [pc, #160]	; (801702c <ip_reass_free_complete_datagram+0x134>)
 8016f8c:	f001 ffc8 	bl	8018f20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016f90:	8bfa      	ldrh	r2, [r7, #30]
 8016f92:	8a7b      	ldrh	r3, [r7, #18]
 8016f94:	4413      	add	r3, r2
 8016f96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016f98:	69b8      	ldr	r0, [r7, #24]
 8016f9a:	f7f6 fafd 	bl	800d598 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016fa4:	e01f      	b.n	8016fe6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016fa6:	69bb      	ldr	r3, [r7, #24]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016fac:	69bb      	ldr	r3, [r7, #24]
 8016fae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016fb6:	68f8      	ldr	r0, [r7, #12]
 8016fb8:	f7f6 fb7c 	bl	800d6b4 <pbuf_clen>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016fc0:	8bfa      	ldrh	r2, [r7, #30]
 8016fc2:	8a7b      	ldrh	r3, [r7, #18]
 8016fc4:	4413      	add	r3, r2
 8016fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016fca:	db05      	blt.n	8016fd8 <ip_reass_free_complete_datagram+0xe0>
 8016fcc:	4b15      	ldr	r3, [pc, #84]	; (8017024 <ip_reass_free_complete_datagram+0x12c>)
 8016fce:	22cc      	movs	r2, #204	; 0xcc
 8016fd0:	4918      	ldr	r1, [pc, #96]	; (8017034 <ip_reass_free_complete_datagram+0x13c>)
 8016fd2:	4816      	ldr	r0, [pc, #88]	; (801702c <ip_reass_free_complete_datagram+0x134>)
 8016fd4:	f001 ffa4 	bl	8018f20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016fd8:	8bfa      	ldrh	r2, [r7, #30]
 8016fda:	8a7b      	ldrh	r3, [r7, #18]
 8016fdc:	4413      	add	r3, r2
 8016fde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016fe0:	68f8      	ldr	r0, [r7, #12]
 8016fe2:	f7f6 fad9 	bl	800d598 <pbuf_free>
  while (p != NULL) {
 8016fe6:	69bb      	ldr	r3, [r7, #24]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d1dc      	bne.n	8016fa6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016fec:	6839      	ldr	r1, [r7, #0]
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 f8c2 	bl	8017178 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016ff4:	4b10      	ldr	r3, [pc, #64]	; (8017038 <ip_reass_free_complete_datagram+0x140>)
 8016ff6:	881b      	ldrh	r3, [r3, #0]
 8016ff8:	8bfa      	ldrh	r2, [r7, #30]
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	d905      	bls.n	801700a <ip_reass_free_complete_datagram+0x112>
 8016ffe:	4b09      	ldr	r3, [pc, #36]	; (8017024 <ip_reass_free_complete_datagram+0x12c>)
 8017000:	22d2      	movs	r2, #210	; 0xd2
 8017002:	490e      	ldr	r1, [pc, #56]	; (801703c <ip_reass_free_complete_datagram+0x144>)
 8017004:	4809      	ldr	r0, [pc, #36]	; (801702c <ip_reass_free_complete_datagram+0x134>)
 8017006:	f001 ff8b 	bl	8018f20 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801700a:	4b0b      	ldr	r3, [pc, #44]	; (8017038 <ip_reass_free_complete_datagram+0x140>)
 801700c:	881a      	ldrh	r2, [r3, #0]
 801700e:	8bfb      	ldrh	r3, [r7, #30]
 8017010:	1ad3      	subs	r3, r2, r3
 8017012:	b29a      	uxth	r2, r3
 8017014:	4b08      	ldr	r3, [pc, #32]	; (8017038 <ip_reass_free_complete_datagram+0x140>)
 8017016:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017018:	8bfb      	ldrh	r3, [r7, #30]
}
 801701a:	4618      	mov	r0, r3
 801701c:	3720      	adds	r7, #32
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
 8017022:	bf00      	nop
 8017024:	0801c68c 	.word	0x0801c68c
 8017028:	0801c6c8 	.word	0x0801c6c8
 801702c:	0801c6d4 	.word	0x0801c6d4
 8017030:	0801c6fc 	.word	0x0801c6fc
 8017034:	0801c710 	.word	0x0801c710
 8017038:	2000cad8 	.word	0x2000cad8
 801703c:	0801c730 	.word	0x0801c730

08017040 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b08a      	sub	sp, #40	; 0x28
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801704a:	2300      	movs	r3, #0
 801704c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801704e:	2300      	movs	r3, #0
 8017050:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017052:	2300      	movs	r3, #0
 8017054:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017056:	2300      	movs	r3, #0
 8017058:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801705a:	2300      	movs	r3, #0
 801705c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801705e:	4b28      	ldr	r3, [pc, #160]	; (8017100 <ip_reass_remove_oldest_datagram+0xc0>)
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017064:	e030      	b.n	80170c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017068:	695a      	ldr	r2, [r3, #20]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	68db      	ldr	r3, [r3, #12]
 801706e:	429a      	cmp	r2, r3
 8017070:	d10c      	bne.n	801708c <ip_reass_remove_oldest_datagram+0x4c>
 8017072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017074:	699a      	ldr	r2, [r3, #24]
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	691b      	ldr	r3, [r3, #16]
 801707a:	429a      	cmp	r2, r3
 801707c:	d106      	bne.n	801708c <ip_reass_remove_oldest_datagram+0x4c>
 801707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017080:	899a      	ldrh	r2, [r3, #12]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	889b      	ldrh	r3, [r3, #4]
 8017086:	b29b      	uxth	r3, r3
 8017088:	429a      	cmp	r2, r3
 801708a:	d014      	beq.n	80170b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801708c:	693b      	ldr	r3, [r7, #16]
 801708e:	3301      	adds	r3, #1
 8017090:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017092:	6a3b      	ldr	r3, [r7, #32]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d104      	bne.n	80170a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801709c:	69fb      	ldr	r3, [r7, #28]
 801709e:	61bb      	str	r3, [r7, #24]
 80170a0:	e009      	b.n	80170b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80170a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a4:	7fda      	ldrb	r2, [r3, #31]
 80170a6:	6a3b      	ldr	r3, [r7, #32]
 80170a8:	7fdb      	ldrb	r3, [r3, #31]
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d803      	bhi.n	80170b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80170ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80170b2:	69fb      	ldr	r3, [r7, #28]
 80170b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80170b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d001      	beq.n	80170c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80170be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80170c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80170c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d1cb      	bne.n	8017066 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80170ce:	6a3b      	ldr	r3, [r7, #32]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d008      	beq.n	80170e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80170d4:	69b9      	ldr	r1, [r7, #24]
 80170d6:	6a38      	ldr	r0, [r7, #32]
 80170d8:	f7ff ff0e 	bl	8016ef8 <ip_reass_free_complete_datagram>
 80170dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80170de:	697a      	ldr	r2, [r7, #20]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	4413      	add	r3, r2
 80170e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80170e6:	697a      	ldr	r2, [r7, #20]
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	429a      	cmp	r2, r3
 80170ec:	da02      	bge.n	80170f4 <ip_reass_remove_oldest_datagram+0xb4>
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	2b01      	cmp	r3, #1
 80170f2:	dcac      	bgt.n	801704e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80170f4:	697b      	ldr	r3, [r7, #20]
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3728      	adds	r7, #40	; 0x28
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}
 80170fe:	bf00      	nop
 8017100:	2000cad4 	.word	0x2000cad4

08017104 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b084      	sub	sp, #16
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
 801710c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801710e:	2004      	movs	r0, #4
 8017110:	f7f5 fb8e 	bl	800c830 <memp_malloc>
 8017114:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d110      	bne.n	801713e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801711c:	6839      	ldr	r1, [r7, #0]
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f7ff ff8e 	bl	8017040 <ip_reass_remove_oldest_datagram>
 8017124:	4602      	mov	r2, r0
 8017126:	683b      	ldr	r3, [r7, #0]
 8017128:	4293      	cmp	r3, r2
 801712a:	dc03      	bgt.n	8017134 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801712c:	2004      	movs	r0, #4
 801712e:	f7f5 fb7f 	bl	800c830 <memp_malloc>
 8017132:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d101      	bne.n	801713e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801713a:	2300      	movs	r3, #0
 801713c:	e016      	b.n	801716c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801713e:	2220      	movs	r2, #32
 8017140:	2100      	movs	r1, #0
 8017142:	68f8      	ldr	r0, [r7, #12]
 8017144:	f001 fe06 	bl	8018d54 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	220f      	movs	r2, #15
 801714c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801714e:	4b09      	ldr	r3, [pc, #36]	; (8017174 <ip_reass_enqueue_new_datagram+0x70>)
 8017150:	681a      	ldr	r2, [r3, #0]
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017156:	4a07      	ldr	r2, [pc, #28]	; (8017174 <ip_reass_enqueue_new_datagram+0x70>)
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	3308      	adds	r3, #8
 8017160:	2214      	movs	r2, #20
 8017162:	6879      	ldr	r1, [r7, #4]
 8017164:	4618      	mov	r0, r3
 8017166:	f001 fde7 	bl	8018d38 <memcpy>
  return ipr;
 801716a:	68fb      	ldr	r3, [r7, #12]
}
 801716c:	4618      	mov	r0, r3
 801716e:	3710      	adds	r7, #16
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}
 8017174:	2000cad4 	.word	0x2000cad4

08017178 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b082      	sub	sp, #8
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017182:	4b10      	ldr	r3, [pc, #64]	; (80171c4 <ip_reass_dequeue_datagram+0x4c>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	687a      	ldr	r2, [r7, #4]
 8017188:	429a      	cmp	r2, r3
 801718a:	d104      	bne.n	8017196 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	4a0c      	ldr	r2, [pc, #48]	; (80171c4 <ip_reass_dequeue_datagram+0x4c>)
 8017192:	6013      	str	r3, [r2, #0]
 8017194:	e00d      	b.n	80171b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d106      	bne.n	80171aa <ip_reass_dequeue_datagram+0x32>
 801719c:	4b0a      	ldr	r3, [pc, #40]	; (80171c8 <ip_reass_dequeue_datagram+0x50>)
 801719e:	f240 1245 	movw	r2, #325	; 0x145
 80171a2:	490a      	ldr	r1, [pc, #40]	; (80171cc <ip_reass_dequeue_datagram+0x54>)
 80171a4:	480a      	ldr	r0, [pc, #40]	; (80171d0 <ip_reass_dequeue_datagram+0x58>)
 80171a6:	f001 febb 	bl	8018f20 <iprintf>
    prev->next = ipr->next;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	681a      	ldr	r2, [r3, #0]
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80171b2:	6879      	ldr	r1, [r7, #4]
 80171b4:	2004      	movs	r0, #4
 80171b6:	f7f5 fbb1 	bl	800c91c <memp_free>
}
 80171ba:	bf00      	nop
 80171bc:	3708      	adds	r7, #8
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}
 80171c2:	bf00      	nop
 80171c4:	2000cad4 	.word	0x2000cad4
 80171c8:	0801c68c 	.word	0x0801c68c
 80171cc:	0801c754 	.word	0x0801c754
 80171d0:	0801c6d4 	.word	0x0801c6d4

080171d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b08c      	sub	sp, #48	; 0x30
 80171d8:	af00      	add	r7, sp, #0
 80171da:	60f8      	str	r0, [r7, #12]
 80171dc:	60b9      	str	r1, [r7, #8]
 80171de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80171e0:	2300      	movs	r3, #0
 80171e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80171e4:	2301      	movs	r3, #1
 80171e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	685b      	ldr	r3, [r3, #4]
 80171ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80171ee:	69fb      	ldr	r3, [r7, #28]
 80171f0:	885b      	ldrh	r3, [r3, #2]
 80171f2:	b29b      	uxth	r3, r3
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7f4 fd93 	bl	800bd20 <lwip_htons>
 80171fa:	4603      	mov	r3, r0
 80171fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80171fe:	69fb      	ldr	r3, [r7, #28]
 8017200:	781b      	ldrb	r3, [r3, #0]
 8017202:	f003 030f 	and.w	r3, r3, #15
 8017206:	b2db      	uxtb	r3, r3
 8017208:	009b      	lsls	r3, r3, #2
 801720a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801720c:	7e7b      	ldrb	r3, [r7, #25]
 801720e:	b29b      	uxth	r3, r3
 8017210:	8b7a      	ldrh	r2, [r7, #26]
 8017212:	429a      	cmp	r2, r3
 8017214:	d202      	bcs.n	801721c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017216:	f04f 33ff 	mov.w	r3, #4294967295
 801721a:	e135      	b.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801721c:	7e7b      	ldrb	r3, [r7, #25]
 801721e:	b29b      	uxth	r3, r3
 8017220:	8b7a      	ldrh	r2, [r7, #26]
 8017222:	1ad3      	subs	r3, r2, r3
 8017224:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	88db      	ldrh	r3, [r3, #6]
 801722a:	b29b      	uxth	r3, r3
 801722c:	4618      	mov	r0, r3
 801722e:	f7f4 fd77 	bl	800bd20 <lwip_htons>
 8017232:	4603      	mov	r3, r0
 8017234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017238:	b29b      	uxth	r3, r3
 801723a:	00db      	lsls	r3, r3, #3
 801723c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	685b      	ldr	r3, [r3, #4]
 8017242:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017246:	2200      	movs	r2, #0
 8017248:	701a      	strb	r2, [r3, #0]
 801724a:	2200      	movs	r2, #0
 801724c:	705a      	strb	r2, [r3, #1]
 801724e:	2200      	movs	r2, #0
 8017250:	709a      	strb	r2, [r3, #2]
 8017252:	2200      	movs	r2, #0
 8017254:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017258:	8afa      	ldrh	r2, [r7, #22]
 801725a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801725c:	8afa      	ldrh	r2, [r7, #22]
 801725e:	8b7b      	ldrh	r3, [r7, #26]
 8017260:	4413      	add	r3, r2
 8017262:	b29a      	uxth	r2, r3
 8017264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017266:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726a:	88db      	ldrh	r3, [r3, #6]
 801726c:	b29b      	uxth	r3, r3
 801726e:	8afa      	ldrh	r2, [r7, #22]
 8017270:	429a      	cmp	r2, r3
 8017272:	d902      	bls.n	801727a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017274:	f04f 33ff 	mov.w	r3, #4294967295
 8017278:	e106      	b.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	685b      	ldr	r3, [r3, #4]
 801727e:	627b      	str	r3, [r7, #36]	; 0x24
 8017280:	e068      	b.n	8017354 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017284:	685b      	ldr	r3, [r3, #4]
 8017286:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801728a:	889b      	ldrh	r3, [r3, #4]
 801728c:	b29a      	uxth	r2, r3
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	889b      	ldrh	r3, [r3, #4]
 8017292:	b29b      	uxth	r3, r3
 8017294:	429a      	cmp	r2, r3
 8017296:	d235      	bcs.n	8017304 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801729a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801729c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d020      	beq.n	80172e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80172a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a6:	889b      	ldrh	r3, [r3, #4]
 80172a8:	b29a      	uxth	r2, r3
 80172aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ac:	88db      	ldrh	r3, [r3, #6]
 80172ae:	b29b      	uxth	r3, r3
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d307      	bcc.n	80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80172b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b6:	88db      	ldrh	r3, [r3, #6]
 80172b8:	b29a      	uxth	r2, r3
 80172ba:	693b      	ldr	r3, [r7, #16]
 80172bc:	889b      	ldrh	r3, [r3, #4]
 80172be:	b29b      	uxth	r3, r3
 80172c0:	429a      	cmp	r2, r3
 80172c2:	d902      	bls.n	80172ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172c4:	f04f 33ff 	mov.w	r3, #4294967295
 80172c8:	e0de      	b.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80172ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172cc:	68ba      	ldr	r2, [r7, #8]
 80172ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80172d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d2:	88db      	ldrh	r3, [r3, #6]
 80172d4:	b29a      	uxth	r2, r3
 80172d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d8:	889b      	ldrh	r3, [r3, #4]
 80172da:	b29b      	uxth	r3, r3
 80172dc:	429a      	cmp	r2, r3
 80172de:	d03d      	beq.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80172e4:	e03a      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80172e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e8:	88db      	ldrh	r3, [r3, #6]
 80172ea:	b29a      	uxth	r2, r3
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	889b      	ldrh	r3, [r3, #4]
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d902      	bls.n	80172fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172f6:	f04f 33ff 	mov.w	r3, #4294967295
 80172fa:	e0c5      	b.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	68ba      	ldr	r2, [r7, #8]
 8017300:	605a      	str	r2, [r3, #4]
      break;
 8017302:	e02b      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017306:	889b      	ldrh	r3, [r3, #4]
 8017308:	b29a      	uxth	r2, r3
 801730a:	693b      	ldr	r3, [r7, #16]
 801730c:	889b      	ldrh	r3, [r3, #4]
 801730e:	b29b      	uxth	r3, r3
 8017310:	429a      	cmp	r2, r3
 8017312:	d102      	bne.n	801731a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017314:	f04f 33ff 	mov.w	r3, #4294967295
 8017318:	e0b6      	b.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731c:	889b      	ldrh	r3, [r3, #4]
 801731e:	b29a      	uxth	r2, r3
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	88db      	ldrh	r3, [r3, #6]
 8017324:	b29b      	uxth	r3, r3
 8017326:	429a      	cmp	r2, r3
 8017328:	d202      	bcs.n	8017330 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801732a:	f04f 33ff 	mov.w	r3, #4294967295
 801732e:	e0ab      	b.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017332:	2b00      	cmp	r3, #0
 8017334:	d009      	beq.n	801734a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017338:	88db      	ldrh	r3, [r3, #6]
 801733a:	b29a      	uxth	r2, r3
 801733c:	693b      	ldr	r3, [r7, #16]
 801733e:	889b      	ldrh	r3, [r3, #4]
 8017340:	b29b      	uxth	r3, r3
 8017342:	429a      	cmp	r2, r3
 8017344:	d001      	beq.n	801734a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017346:	2300      	movs	r3, #0
 8017348:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801734a:	693b      	ldr	r3, [r7, #16]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017350:	693b      	ldr	r3, [r7, #16]
 8017352:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017356:	2b00      	cmp	r3, #0
 8017358:	d193      	bne.n	8017282 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801735a:	e000      	b.n	801735e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801735c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017360:	2b00      	cmp	r3, #0
 8017362:	d12d      	bne.n	80173c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017366:	2b00      	cmp	r3, #0
 8017368:	d01c      	beq.n	80173a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801736c:	88db      	ldrh	r3, [r3, #6]
 801736e:	b29a      	uxth	r2, r3
 8017370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017372:	889b      	ldrh	r3, [r3, #4]
 8017374:	b29b      	uxth	r3, r3
 8017376:	429a      	cmp	r2, r3
 8017378:	d906      	bls.n	8017388 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801737a:	4b45      	ldr	r3, [pc, #276]	; (8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801737c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017380:	4944      	ldr	r1, [pc, #272]	; (8017494 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017382:	4845      	ldr	r0, [pc, #276]	; (8017498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017384:	f001 fdcc 	bl	8018f20 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801738a:	68ba      	ldr	r2, [r7, #8]
 801738c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017390:	88db      	ldrh	r3, [r3, #6]
 8017392:	b29a      	uxth	r2, r3
 8017394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017396:	889b      	ldrh	r3, [r3, #4]
 8017398:	b29b      	uxth	r3, r3
 801739a:	429a      	cmp	r2, r3
 801739c:	d010      	beq.n	80173c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801739e:	2300      	movs	r3, #0
 80173a0:	623b      	str	r3, [r7, #32]
 80173a2:	e00d      	b.n	80173c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d006      	beq.n	80173ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80173ac:	4b38      	ldr	r3, [pc, #224]	; (8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80173ae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80173b2:	493a      	ldr	r1, [pc, #232]	; (801749c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80173b4:	4838      	ldr	r0, [pc, #224]	; (8017498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80173b6:	f001 fdb3 	bl	8018f20 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	68ba      	ldr	r2, [r7, #8]
 80173be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d105      	bne.n	80173d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	7f9b      	ldrb	r3, [r3, #30]
 80173ca:	f003 0301 	and.w	r3, r3, #1
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d059      	beq.n	8017486 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80173d2:	6a3b      	ldr	r3, [r7, #32]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d04f      	beq.n	8017478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d006      	beq.n	80173ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	685b      	ldr	r3, [r3, #4]
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	889b      	ldrh	r3, [r3, #4]
 80173e8:	b29b      	uxth	r3, r3
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d002      	beq.n	80173f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80173ee:	2300      	movs	r3, #0
 80173f0:	623b      	str	r3, [r7, #32]
 80173f2:	e041      	b.n	8017478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80173f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80173f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80173fe:	e012      	b.n	8017426 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017402:	685b      	ldr	r3, [r3, #4]
 8017404:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017408:	88db      	ldrh	r3, [r3, #6]
 801740a:	b29a      	uxth	r2, r3
 801740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740e:	889b      	ldrh	r3, [r3, #4]
 8017410:	b29b      	uxth	r3, r3
 8017412:	429a      	cmp	r2, r3
 8017414:	d002      	beq.n	801741c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017416:	2300      	movs	r3, #0
 8017418:	623b      	str	r3, [r7, #32]
            break;
 801741a:	e007      	b.n	801742c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801741e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017428:	2b00      	cmp	r3, #0
 801742a:	d1e9      	bne.n	8017400 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801742c:	6a3b      	ldr	r3, [r7, #32]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d022      	beq.n	8017478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d106      	bne.n	8017448 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801743a:	4b15      	ldr	r3, [pc, #84]	; (8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801743c:	f240 12df 	movw	r2, #479	; 0x1df
 8017440:	4917      	ldr	r1, [pc, #92]	; (80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017442:	4815      	ldr	r0, [pc, #84]	; (8017498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017444:	f001 fd6c 	bl	8018f20 <iprintf>
          LWIP_ASSERT("sanity check",
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	685b      	ldr	r3, [r3, #4]
 801744c:	685b      	ldr	r3, [r3, #4]
 801744e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017450:	429a      	cmp	r2, r3
 8017452:	d106      	bne.n	8017462 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017454:	4b0e      	ldr	r3, [pc, #56]	; (8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017456:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801745a:	4911      	ldr	r1, [pc, #68]	; (80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801745c:	480e      	ldr	r0, [pc, #56]	; (8017498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801745e:	f001 fd5f 	bl	8018f20 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d006      	beq.n	8017478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801746a:	4b09      	ldr	r3, [pc, #36]	; (8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801746c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017470:	490c      	ldr	r1, [pc, #48]	; (80174a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017472:	4809      	ldr	r0, [pc, #36]	; (8017498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017474:	f001 fd54 	bl	8018f20 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017478:	6a3b      	ldr	r3, [r7, #32]
 801747a:	2b00      	cmp	r3, #0
 801747c:	bf14      	ite	ne
 801747e:	2301      	movne	r3, #1
 8017480:	2300      	moveq	r3, #0
 8017482:	b2db      	uxtb	r3, r3
 8017484:	e000      	b.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017486:	2300      	movs	r3, #0
}
 8017488:	4618      	mov	r0, r3
 801748a:	3730      	adds	r7, #48	; 0x30
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}
 8017490:	0801c68c 	.word	0x0801c68c
 8017494:	0801c770 	.word	0x0801c770
 8017498:	0801c6d4 	.word	0x0801c6d4
 801749c:	0801c790 	.word	0x0801c790
 80174a0:	0801c7c8 	.word	0x0801c7c8
 80174a4:	0801c7d8 	.word	0x0801c7d8

080174a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b08e      	sub	sp, #56	; 0x38
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	685b      	ldr	r3, [r3, #4]
 80174b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80174b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	f003 030f 	and.w	r3, r3, #15
 80174be:	b2db      	uxtb	r3, r3
 80174c0:	009b      	lsls	r3, r3, #2
 80174c2:	b2db      	uxtb	r3, r3
 80174c4:	2b14      	cmp	r3, #20
 80174c6:	f040 8171 	bne.w	80177ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80174ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174cc:	88db      	ldrh	r3, [r3, #6]
 80174ce:	b29b      	uxth	r3, r3
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7f4 fc25 	bl	800bd20 <lwip_htons>
 80174d6:	4603      	mov	r3, r0
 80174d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174dc:	b29b      	uxth	r3, r3
 80174de:	00db      	lsls	r3, r3, #3
 80174e0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80174e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e4:	885b      	ldrh	r3, [r3, #2]
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7f4 fc19 	bl	800bd20 <lwip_htons>
 80174ee:	4603      	mov	r3, r0
 80174f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80174f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f4:	781b      	ldrb	r3, [r3, #0]
 80174f6:	f003 030f 	and.w	r3, r3, #15
 80174fa:	b2db      	uxtb	r3, r3
 80174fc:	009b      	lsls	r3, r3, #2
 80174fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017506:	b29b      	uxth	r3, r3
 8017508:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801750a:	429a      	cmp	r2, r3
 801750c:	f0c0 8150 	bcc.w	80177b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017514:	b29b      	uxth	r3, r3
 8017516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017518:	1ad3      	subs	r3, r2, r3
 801751a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	f7f6 f8c9 	bl	800d6b4 <pbuf_clen>
 8017522:	4603      	mov	r3, r0
 8017524:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017526:	4b8c      	ldr	r3, [pc, #560]	; (8017758 <ip4_reass+0x2b0>)
 8017528:	881b      	ldrh	r3, [r3, #0]
 801752a:	461a      	mov	r2, r3
 801752c:	8c3b      	ldrh	r3, [r7, #32]
 801752e:	4413      	add	r3, r2
 8017530:	2b0a      	cmp	r3, #10
 8017532:	dd10      	ble.n	8017556 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017534:	8c3b      	ldrh	r3, [r7, #32]
 8017536:	4619      	mov	r1, r3
 8017538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801753a:	f7ff fd81 	bl	8017040 <ip_reass_remove_oldest_datagram>
 801753e:	4603      	mov	r3, r0
 8017540:	2b00      	cmp	r3, #0
 8017542:	f000 8137 	beq.w	80177b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017546:	4b84      	ldr	r3, [pc, #528]	; (8017758 <ip4_reass+0x2b0>)
 8017548:	881b      	ldrh	r3, [r3, #0]
 801754a:	461a      	mov	r2, r3
 801754c:	8c3b      	ldrh	r3, [r7, #32]
 801754e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017550:	2b0a      	cmp	r3, #10
 8017552:	f300 812f 	bgt.w	80177b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017556:	4b81      	ldr	r3, [pc, #516]	; (801775c <ip4_reass+0x2b4>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	633b      	str	r3, [r7, #48]	; 0x30
 801755c:	e015      	b.n	801758a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017560:	695a      	ldr	r2, [r3, #20]
 8017562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017564:	68db      	ldr	r3, [r3, #12]
 8017566:	429a      	cmp	r2, r3
 8017568:	d10c      	bne.n	8017584 <ip4_reass+0xdc>
 801756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801756c:	699a      	ldr	r2, [r3, #24]
 801756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017570:	691b      	ldr	r3, [r3, #16]
 8017572:	429a      	cmp	r2, r3
 8017574:	d106      	bne.n	8017584 <ip4_reass+0xdc>
 8017576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017578:	899a      	ldrh	r2, [r3, #12]
 801757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757c:	889b      	ldrh	r3, [r3, #4]
 801757e:	b29b      	uxth	r3, r3
 8017580:	429a      	cmp	r2, r3
 8017582:	d006      	beq.n	8017592 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	633b      	str	r3, [r7, #48]	; 0x30
 801758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758c:	2b00      	cmp	r3, #0
 801758e:	d1e6      	bne.n	801755e <ip4_reass+0xb6>
 8017590:	e000      	b.n	8017594 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017592:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017596:	2b00      	cmp	r3, #0
 8017598:	d109      	bne.n	80175ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801759a:	8c3b      	ldrh	r3, [r7, #32]
 801759c:	4619      	mov	r1, r3
 801759e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175a0:	f7ff fdb0 	bl	8017104 <ip_reass_enqueue_new_datagram>
 80175a4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80175a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d11c      	bne.n	80175e6 <ip4_reass+0x13e>
      goto nullreturn;
 80175ac:	e105      	b.n	80177ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80175ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b0:	88db      	ldrh	r3, [r3, #6]
 80175b2:	b29b      	uxth	r3, r3
 80175b4:	4618      	mov	r0, r3
 80175b6:	f7f4 fbb3 	bl	800bd20 <lwip_htons>
 80175ba:	4603      	mov	r3, r0
 80175bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d110      	bne.n	80175e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80175c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c6:	89db      	ldrh	r3, [r3, #14]
 80175c8:	4618      	mov	r0, r3
 80175ca:	f7f4 fba9 	bl	800bd20 <lwip_htons>
 80175ce:	4603      	mov	r3, r0
 80175d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d006      	beq.n	80175e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80175d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175da:	3308      	adds	r3, #8
 80175dc:	2214      	movs	r2, #20
 80175de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80175e0:	4618      	mov	r0, r3
 80175e2:	f001 fba9 	bl	8018d38 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80175e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e8:	88db      	ldrh	r3, [r3, #6]
 80175ea:	b29b      	uxth	r3, r3
 80175ec:	f003 0320 	and.w	r3, r3, #32
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	bf0c      	ite	eq
 80175f4:	2301      	moveq	r3, #1
 80175f6:	2300      	movne	r3, #0
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80175fc:	69fb      	ldr	r3, [r7, #28]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d00e      	beq.n	8017620 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017606:	4413      	add	r3, r2
 8017608:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801760a:	8b7a      	ldrh	r2, [r7, #26]
 801760c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801760e:	429a      	cmp	r2, r3
 8017610:	f0c0 80a0 	bcc.w	8017754 <ip4_reass+0x2ac>
 8017614:	8b7b      	ldrh	r3, [r7, #26]
 8017616:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801761a:	4293      	cmp	r3, r2
 801761c:	f200 809a 	bhi.w	8017754 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017620:	69fa      	ldr	r2, [r7, #28]
 8017622:	6879      	ldr	r1, [r7, #4]
 8017624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017626:	f7ff fdd5 	bl	80171d4 <ip_reass_chain_frag_into_datagram_and_validate>
 801762a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801762c:	697b      	ldr	r3, [r7, #20]
 801762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017632:	f000 809b 	beq.w	801776c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017636:	4b48      	ldr	r3, [pc, #288]	; (8017758 <ip4_reass+0x2b0>)
 8017638:	881a      	ldrh	r2, [r3, #0]
 801763a:	8c3b      	ldrh	r3, [r7, #32]
 801763c:	4413      	add	r3, r2
 801763e:	b29a      	uxth	r2, r3
 8017640:	4b45      	ldr	r3, [pc, #276]	; (8017758 <ip4_reass+0x2b0>)
 8017642:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017644:	69fb      	ldr	r3, [r7, #28]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d00d      	beq.n	8017666 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801764a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801764c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801764e:	4413      	add	r3, r2
 8017650:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017654:	8a7a      	ldrh	r2, [r7, #18]
 8017656:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801765a:	7f9b      	ldrb	r3, [r3, #30]
 801765c:	f043 0301 	orr.w	r3, r3, #1
 8017660:	b2da      	uxtb	r2, r3
 8017662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017664:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017666:	697b      	ldr	r3, [r7, #20]
 8017668:	2b01      	cmp	r3, #1
 801766a:	d171      	bne.n	8017750 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801766e:	8b9b      	ldrh	r3, [r3, #28]
 8017670:	3314      	adds	r3, #20
 8017672:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017676:	685b      	ldr	r3, [r3, #4]
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	685b      	ldr	r3, [r3, #4]
 8017684:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017688:	3308      	adds	r3, #8
 801768a:	2214      	movs	r2, #20
 801768c:	4619      	mov	r1, r3
 801768e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017690:	f001 fb52 	bl	8018d38 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017694:	8a3b      	ldrh	r3, [r7, #16]
 8017696:	4618      	mov	r0, r3
 8017698:	f7f4 fb42 	bl	800bd20 <lwip_htons>
 801769c:	4603      	mov	r3, r0
 801769e:	461a      	mov	r2, r3
 80176a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80176a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a6:	2200      	movs	r2, #0
 80176a8:	719a      	strb	r2, [r3, #6]
 80176aa:	2200      	movs	r2, #0
 80176ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80176ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176b0:	2200      	movs	r2, #0
 80176b2:	729a      	strb	r2, [r3, #10]
 80176b4:	2200      	movs	r2, #0
 80176b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80176b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ba:	685b      	ldr	r3, [r3, #4]
 80176bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80176be:	e00d      	b.n	80176dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80176c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176c2:	685b      	ldr	r3, [r3, #4]
 80176c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80176c6:	2114      	movs	r1, #20
 80176c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80176ca:	f7f5 fedf 	bl	800d48c <pbuf_remove_header>
      pbuf_cat(p, r);
 80176ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f7f6 f82d 	bl	800d730 <pbuf_cat>
      r = iprh->next_pbuf;
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80176dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d1ee      	bne.n	80176c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80176e2:	4b1e      	ldr	r3, [pc, #120]	; (801775c <ip4_reass+0x2b4>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80176e8:	429a      	cmp	r2, r3
 80176ea:	d102      	bne.n	80176f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80176ec:	2300      	movs	r3, #0
 80176ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176f0:	e010      	b.n	8017714 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80176f2:	4b1a      	ldr	r3, [pc, #104]	; (801775c <ip4_reass+0x2b4>)
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176f8:	e007      	b.n	801770a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80176fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017700:	429a      	cmp	r2, r3
 8017702:	d006      	beq.n	8017712 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	62fb      	str	r3, [r7, #44]	; 0x2c
 801770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801770c:	2b00      	cmp	r3, #0
 801770e:	d1f4      	bne.n	80176fa <ip4_reass+0x252>
 8017710:	e000      	b.n	8017714 <ip4_reass+0x26c>
          break;
 8017712:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017718:	f7ff fd2e 	bl	8017178 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801771c:	6878      	ldr	r0, [r7, #4]
 801771e:	f7f5 ffc9 	bl	800d6b4 <pbuf_clen>
 8017722:	4603      	mov	r3, r0
 8017724:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017726:	4b0c      	ldr	r3, [pc, #48]	; (8017758 <ip4_reass+0x2b0>)
 8017728:	881b      	ldrh	r3, [r3, #0]
 801772a:	8c3a      	ldrh	r2, [r7, #32]
 801772c:	429a      	cmp	r2, r3
 801772e:	d906      	bls.n	801773e <ip4_reass+0x296>
 8017730:	4b0b      	ldr	r3, [pc, #44]	; (8017760 <ip4_reass+0x2b8>)
 8017732:	f240 229b 	movw	r2, #667	; 0x29b
 8017736:	490b      	ldr	r1, [pc, #44]	; (8017764 <ip4_reass+0x2bc>)
 8017738:	480b      	ldr	r0, [pc, #44]	; (8017768 <ip4_reass+0x2c0>)
 801773a:	f001 fbf1 	bl	8018f20 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801773e:	4b06      	ldr	r3, [pc, #24]	; (8017758 <ip4_reass+0x2b0>)
 8017740:	881a      	ldrh	r2, [r3, #0]
 8017742:	8c3b      	ldrh	r3, [r7, #32]
 8017744:	1ad3      	subs	r3, r2, r3
 8017746:	b29a      	uxth	r2, r3
 8017748:	4b03      	ldr	r3, [pc, #12]	; (8017758 <ip4_reass+0x2b0>)
 801774a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	e038      	b.n	80177c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017750:	2300      	movs	r3, #0
 8017752:	e036      	b.n	80177c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017754:	bf00      	nop
 8017756:	e00a      	b.n	801776e <ip4_reass+0x2c6>
 8017758:	2000cad8 	.word	0x2000cad8
 801775c:	2000cad4 	.word	0x2000cad4
 8017760:	0801c68c 	.word	0x0801c68c
 8017764:	0801c7fc 	.word	0x0801c7fc
 8017768:	0801c6d4 	.word	0x0801c6d4
    goto nullreturn_ipr;
 801776c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017770:	2b00      	cmp	r3, #0
 8017772:	d106      	bne.n	8017782 <ip4_reass+0x2da>
 8017774:	4b15      	ldr	r3, [pc, #84]	; (80177cc <ip4_reass+0x324>)
 8017776:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801777a:	4915      	ldr	r1, [pc, #84]	; (80177d0 <ip4_reass+0x328>)
 801777c:	4815      	ldr	r0, [pc, #84]	; (80177d4 <ip4_reass+0x32c>)
 801777e:	f001 fbcf 	bl	8018f20 <iprintf>
  if (ipr->p == NULL) {
 8017782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d116      	bne.n	80177b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801778a:	4b13      	ldr	r3, [pc, #76]	; (80177d8 <ip4_reass+0x330>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017790:	429a      	cmp	r2, r3
 8017792:	d006      	beq.n	80177a2 <ip4_reass+0x2fa>
 8017794:	4b0d      	ldr	r3, [pc, #52]	; (80177cc <ip4_reass+0x324>)
 8017796:	f240 22ab 	movw	r2, #683	; 0x2ab
 801779a:	4910      	ldr	r1, [pc, #64]	; (80177dc <ip4_reass+0x334>)
 801779c:	480d      	ldr	r0, [pc, #52]	; (80177d4 <ip4_reass+0x32c>)
 801779e:	f001 fbbf 	bl	8018f20 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80177a2:	2100      	movs	r1, #0
 80177a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177a6:	f7ff fce7 	bl	8017178 <ip_reass_dequeue_datagram>
 80177aa:	e006      	b.n	80177ba <ip4_reass+0x312>
    goto nullreturn;
 80177ac:	bf00      	nop
 80177ae:	e004      	b.n	80177ba <ip4_reass+0x312>
    goto nullreturn;
 80177b0:	bf00      	nop
 80177b2:	e002      	b.n	80177ba <ip4_reass+0x312>
      goto nullreturn;
 80177b4:	bf00      	nop
 80177b6:	e000      	b.n	80177ba <ip4_reass+0x312>
  }

nullreturn:
 80177b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80177ba:	6878      	ldr	r0, [r7, #4]
 80177bc:	f7f5 feec 	bl	800d598 <pbuf_free>
  return NULL;
 80177c0:	2300      	movs	r3, #0
}
 80177c2:	4618      	mov	r0, r3
 80177c4:	3738      	adds	r7, #56	; 0x38
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}
 80177ca:	bf00      	nop
 80177cc:	0801c68c 	.word	0x0801c68c
 80177d0:	0801c818 	.word	0x0801c818
 80177d4:	0801c6d4 	.word	0x0801c6d4
 80177d8:	2000cad4 	.word	0x2000cad4
 80177dc:	0801c824 	.word	0x0801c824

080177e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80177e4:	2005      	movs	r0, #5
 80177e6:	f7f5 f823 	bl	800c830 <memp_malloc>
 80177ea:	4603      	mov	r3, r0
}
 80177ec:	4618      	mov	r0, r3
 80177ee:	bd80      	pop	{r7, pc}

080177f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b082      	sub	sp, #8
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d106      	bne.n	801780c <ip_frag_free_pbuf_custom_ref+0x1c>
 80177fe:	4b07      	ldr	r3, [pc, #28]	; (801781c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017800:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017804:	4906      	ldr	r1, [pc, #24]	; (8017820 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017806:	4807      	ldr	r0, [pc, #28]	; (8017824 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017808:	f001 fb8a 	bl	8018f20 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801780c:	6879      	ldr	r1, [r7, #4]
 801780e:	2005      	movs	r0, #5
 8017810:	f7f5 f884 	bl	800c91c <memp_free>
}
 8017814:	bf00      	nop
 8017816:	3708      	adds	r7, #8
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}
 801781c:	0801c68c 	.word	0x0801c68c
 8017820:	0801c844 	.word	0x0801c844
 8017824:	0801c6d4 	.word	0x0801c6d4

08017828 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b084      	sub	sp, #16
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d106      	bne.n	8017848 <ipfrag_free_pbuf_custom+0x20>
 801783a:	4b11      	ldr	r3, [pc, #68]	; (8017880 <ipfrag_free_pbuf_custom+0x58>)
 801783c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017840:	4910      	ldr	r1, [pc, #64]	; (8017884 <ipfrag_free_pbuf_custom+0x5c>)
 8017842:	4811      	ldr	r0, [pc, #68]	; (8017888 <ipfrag_free_pbuf_custom+0x60>)
 8017844:	f001 fb6c 	bl	8018f20 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017848:	68fa      	ldr	r2, [r7, #12]
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	429a      	cmp	r2, r3
 801784e:	d006      	beq.n	801785e <ipfrag_free_pbuf_custom+0x36>
 8017850:	4b0b      	ldr	r3, [pc, #44]	; (8017880 <ipfrag_free_pbuf_custom+0x58>)
 8017852:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017856:	490d      	ldr	r1, [pc, #52]	; (801788c <ipfrag_free_pbuf_custom+0x64>)
 8017858:	480b      	ldr	r0, [pc, #44]	; (8017888 <ipfrag_free_pbuf_custom+0x60>)
 801785a:	f001 fb61 	bl	8018f20 <iprintf>
  if (pcr->original != NULL) {
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	695b      	ldr	r3, [r3, #20]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d004      	beq.n	8017870 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	695b      	ldr	r3, [r3, #20]
 801786a:	4618      	mov	r0, r3
 801786c:	f7f5 fe94 	bl	800d598 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017870:	68f8      	ldr	r0, [r7, #12]
 8017872:	f7ff ffbd 	bl	80177f0 <ip_frag_free_pbuf_custom_ref>
}
 8017876:	bf00      	nop
 8017878:	3710      	adds	r7, #16
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}
 801787e:	bf00      	nop
 8017880:	0801c68c 	.word	0x0801c68c
 8017884:	0801c850 	.word	0x0801c850
 8017888:	0801c6d4 	.word	0x0801c6d4
 801788c:	0801c85c 	.word	0x0801c85c

08017890 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b094      	sub	sp, #80	; 0x50
 8017894:	af02      	add	r7, sp, #8
 8017896:	60f8      	str	r0, [r7, #12]
 8017898:	60b9      	str	r1, [r7, #8]
 801789a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801789c:	2300      	movs	r3, #0
 801789e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178a6:	3b14      	subs	r3, #20
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	da00      	bge.n	80178ae <ip4_frag+0x1e>
 80178ac:	3307      	adds	r3, #7
 80178ae:	10db      	asrs	r3, r3, #3
 80178b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80178b2:	2314      	movs	r3, #20
 80178b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	685b      	ldr	r3, [r3, #4]
 80178ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80178bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80178c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178c2:	781b      	ldrb	r3, [r3, #0]
 80178c4:	f003 030f 	and.w	r3, r3, #15
 80178c8:	b2db      	uxtb	r3, r3
 80178ca:	009b      	lsls	r3, r3, #2
 80178cc:	b2db      	uxtb	r3, r3
 80178ce:	2b14      	cmp	r3, #20
 80178d0:	d002      	beq.n	80178d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80178d2:	f06f 0305 	mvn.w	r3, #5
 80178d6:	e110      	b.n	8017afa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	895b      	ldrh	r3, [r3, #10]
 80178dc:	2b13      	cmp	r3, #19
 80178de:	d809      	bhi.n	80178f4 <ip4_frag+0x64>
 80178e0:	4b88      	ldr	r3, [pc, #544]	; (8017b04 <ip4_frag+0x274>)
 80178e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80178e6:	4988      	ldr	r1, [pc, #544]	; (8017b08 <ip4_frag+0x278>)
 80178e8:	4888      	ldr	r0, [pc, #544]	; (8017b0c <ip4_frag+0x27c>)
 80178ea:	f001 fb19 	bl	8018f20 <iprintf>
 80178ee:	f06f 0305 	mvn.w	r3, #5
 80178f2:	e102      	b.n	8017afa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80178f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f6:	88db      	ldrh	r3, [r3, #6]
 80178f8:	b29b      	uxth	r3, r3
 80178fa:	4618      	mov	r0, r3
 80178fc:	f7f4 fa10 	bl	800bd20 <lwip_htons>
 8017900:	4603      	mov	r3, r0
 8017902:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801790a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801790e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017914:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	891b      	ldrh	r3, [r3, #8]
 801791a:	3b14      	subs	r3, #20
 801791c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017920:	e0e1      	b.n	8017ae6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017922:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017924:	00db      	lsls	r3, r3, #3
 8017926:	b29b      	uxth	r3, r3
 8017928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801792c:	4293      	cmp	r3, r2
 801792e:	bf28      	it	cs
 8017930:	4613      	movcs	r3, r2
 8017932:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017934:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017938:	2114      	movs	r1, #20
 801793a:	200e      	movs	r0, #14
 801793c:	f7f5 fb48 	bl	800cfd0 <pbuf_alloc>
 8017940:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017944:	2b00      	cmp	r3, #0
 8017946:	f000 80d5 	beq.w	8017af4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794c:	895b      	ldrh	r3, [r3, #10]
 801794e:	2b13      	cmp	r3, #19
 8017950:	d806      	bhi.n	8017960 <ip4_frag+0xd0>
 8017952:	4b6c      	ldr	r3, [pc, #432]	; (8017b04 <ip4_frag+0x274>)
 8017954:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017958:	496d      	ldr	r1, [pc, #436]	; (8017b10 <ip4_frag+0x280>)
 801795a:	486c      	ldr	r0, [pc, #432]	; (8017b0c <ip4_frag+0x27c>)
 801795c:	f001 fae0 	bl	8018f20 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017962:	685b      	ldr	r3, [r3, #4]
 8017964:	2214      	movs	r2, #20
 8017966:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017968:	4618      	mov	r0, r3
 801796a:	f001 f9e5 	bl	8018d38 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017970:	685b      	ldr	r3, [r3, #4]
 8017972:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017976:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801797a:	e064      	b.n	8017a46 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	895a      	ldrh	r2, [r3, #10]
 8017980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017982:	1ad3      	subs	r3, r2, r3
 8017984:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	895b      	ldrh	r3, [r3, #10]
 801798a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801798c:	429a      	cmp	r2, r3
 801798e:	d906      	bls.n	801799e <ip4_frag+0x10e>
 8017990:	4b5c      	ldr	r3, [pc, #368]	; (8017b04 <ip4_frag+0x274>)
 8017992:	f240 322d 	movw	r2, #813	; 0x32d
 8017996:	495f      	ldr	r1, [pc, #380]	; (8017b14 <ip4_frag+0x284>)
 8017998:	485c      	ldr	r0, [pc, #368]	; (8017b0c <ip4_frag+0x27c>)
 801799a:	f001 fac1 	bl	8018f20 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801799e:	8bfa      	ldrh	r2, [r7, #30]
 80179a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80179a4:	4293      	cmp	r3, r2
 80179a6:	bf28      	it	cs
 80179a8:	4613      	movcs	r3, r2
 80179aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80179ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d105      	bne.n	80179c2 <ip4_frag+0x132>
        poff = 0;
 80179b6:	2300      	movs	r3, #0
 80179b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	60fb      	str	r3, [r7, #12]
        continue;
 80179c0:	e041      	b.n	8017a46 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80179c2:	f7ff ff0d 	bl	80177e0 <ip_frag_alloc_pbuf_custom_ref>
 80179c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80179c8:	69bb      	ldr	r3, [r7, #24]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d103      	bne.n	80179d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80179ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179d0:	f7f5 fde2 	bl	800d598 <pbuf_free>
        goto memerr;
 80179d4:	e08f      	b.n	8017af6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80179d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80179dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80179de:	4413      	add	r3, r2
 80179e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80179e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80179e8:	9201      	str	r2, [sp, #4]
 80179ea:	9300      	str	r3, [sp, #0]
 80179ec:	4603      	mov	r3, r0
 80179ee:	2241      	movs	r2, #65	; 0x41
 80179f0:	2000      	movs	r0, #0
 80179f2:	f7f5 fc17 	bl	800d224 <pbuf_alloced_custom>
 80179f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d106      	bne.n	8017a0c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80179fe:	69b8      	ldr	r0, [r7, #24]
 8017a00:	f7ff fef6 	bl	80177f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a06:	f7f5 fdc7 	bl	800d598 <pbuf_free>
        goto memerr;
 8017a0a:	e074      	b.n	8017af6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017a0c:	68f8      	ldr	r0, [r7, #12]
 8017a0e:	f7f5 fe67 	bl	800d6e0 <pbuf_ref>
      pcr->original = p;
 8017a12:	69bb      	ldr	r3, [r7, #24]
 8017a14:	68fa      	ldr	r2, [r7, #12]
 8017a16:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017a18:	69bb      	ldr	r3, [r7, #24]
 8017a1a:	4a3f      	ldr	r2, [pc, #252]	; (8017b18 <ip4_frag+0x288>)
 8017a1c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017a1e:	6979      	ldr	r1, [r7, #20]
 8017a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a22:	f7f5 fe85 	bl	800d730 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017a26:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017a2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017a2e:	1ad3      	subs	r3, r2, r3
 8017a30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017a34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d004      	beq.n	8017a46 <ip4_frag+0x1b6>
        poff = 0;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017a46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d196      	bne.n	801797c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017a4e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017a54:	4413      	add	r3, r2
 8017a56:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a5c:	f1a3 0213 	sub.w	r2, r3, #19
 8017a60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a64:	429a      	cmp	r2, r3
 8017a66:	bfcc      	ite	gt
 8017a68:	2301      	movgt	r3, #1
 8017a6a:	2300      	movle	r3, #0
 8017a6c:	b2db      	uxtb	r3, r3
 8017a6e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017a70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017a7a:	6a3b      	ldr	r3, [r7, #32]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d002      	beq.n	8017a86 <ip4_frag+0x1f6>
 8017a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d003      	beq.n	8017a8e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017a8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a90:	4618      	mov	r0, r3
 8017a92:	f7f4 f945 	bl	800bd20 <lwip_htons>
 8017a96:	4603      	mov	r3, r0
 8017a98:	461a      	mov	r2, r3
 8017a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a9c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017aa0:	3314      	adds	r3, #20
 8017aa2:	b29b      	uxth	r3, r3
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7f4 f93b 	bl	800bd20 <lwip_htons>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	461a      	mov	r2, r3
 8017aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	729a      	strb	r2, [r3, #10]
 8017ab8:	2200      	movs	r2, #0
 8017aba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017abc:	68bb      	ldr	r3, [r7, #8]
 8017abe:	695b      	ldr	r3, [r3, #20]
 8017ac0:	687a      	ldr	r2, [r7, #4]
 8017ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ac4:	68b8      	ldr	r0, [r7, #8]
 8017ac6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017aca:	f7f5 fd65 	bl	800d598 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017ace:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ad2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ad4:	1ad3      	subs	r3, r2, r3
 8017ad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017ada:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017ade:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ae0:	4413      	add	r3, r2
 8017ae2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017ae6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	f47f af19 	bne.w	8017922 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017af0:	2300      	movs	r3, #0
 8017af2:	e002      	b.n	8017afa <ip4_frag+0x26a>
      goto memerr;
 8017af4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017afa:	4618      	mov	r0, r3
 8017afc:	3748      	adds	r7, #72	; 0x48
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	0801c68c 	.word	0x0801c68c
 8017b08:	0801c868 	.word	0x0801c868
 8017b0c:	0801c6d4 	.word	0x0801c6d4
 8017b10:	0801c884 	.word	0x0801c884
 8017b14:	0801c8a4 	.word	0x0801c8a4
 8017b18:	08017829 	.word	0x08017829

08017b1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b086      	sub	sp, #24
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
 8017b24:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017b26:	230e      	movs	r3, #14
 8017b28:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	895b      	ldrh	r3, [r3, #10]
 8017b2e:	2b0e      	cmp	r3, #14
 8017b30:	d96e      	bls.n	8017c10 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	7bdb      	ldrb	r3, [r3, #15]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d106      	bne.n	8017b48 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017b40:	3301      	adds	r3, #1
 8017b42:	b2da      	uxtb	r2, r3
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017b4e:	693b      	ldr	r3, [r7, #16]
 8017b50:	7b1a      	ldrb	r2, [r3, #12]
 8017b52:	7b5b      	ldrb	r3, [r3, #13]
 8017b54:	021b      	lsls	r3, r3, #8
 8017b56:	4313      	orrs	r3, r2
 8017b58:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017b5a:	693b      	ldr	r3, [r7, #16]
 8017b5c:	781b      	ldrb	r3, [r3, #0]
 8017b5e:	f003 0301 	and.w	r3, r3, #1
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d023      	beq.n	8017bae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017b66:	693b      	ldr	r3, [r7, #16]
 8017b68:	781b      	ldrb	r3, [r3, #0]
 8017b6a:	2b01      	cmp	r3, #1
 8017b6c:	d10f      	bne.n	8017b8e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017b6e:	693b      	ldr	r3, [r7, #16]
 8017b70:	785b      	ldrb	r3, [r3, #1]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d11b      	bne.n	8017bae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017b7a:	2b5e      	cmp	r3, #94	; 0x5e
 8017b7c:	d117      	bne.n	8017bae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	7b5b      	ldrb	r3, [r3, #13]
 8017b82:	f043 0310 	orr.w	r3, r3, #16
 8017b86:	b2da      	uxtb	r2, r3
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	735a      	strb	r2, [r3, #13]
 8017b8c:	e00f      	b.n	8017bae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	2206      	movs	r2, #6
 8017b92:	4928      	ldr	r1, [pc, #160]	; (8017c34 <ethernet_input+0x118>)
 8017b94:	4618      	mov	r0, r3
 8017b96:	f001 f8bf 	bl	8018d18 <memcmp>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d106      	bne.n	8017bae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	7b5b      	ldrb	r3, [r3, #13]
 8017ba4:	f043 0308 	orr.w	r3, r3, #8
 8017ba8:	b2da      	uxtb	r2, r3
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017bae:	89fb      	ldrh	r3, [r7, #14]
 8017bb0:	2b08      	cmp	r3, #8
 8017bb2:	d003      	beq.n	8017bbc <ethernet_input+0xa0>
 8017bb4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017bb8:	d014      	beq.n	8017be4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017bba:	e032      	b.n	8017c22 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017bc2:	f003 0308 	and.w	r3, r3, #8
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d024      	beq.n	8017c14 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017bca:	8afb      	ldrh	r3, [r7, #22]
 8017bcc:	4619      	mov	r1, r3
 8017bce:	6878      	ldr	r0, [r7, #4]
 8017bd0:	f7f5 fc5c 	bl	800d48c <pbuf_remove_header>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d11e      	bne.n	8017c18 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017bda:	6839      	ldr	r1, [r7, #0]
 8017bdc:	6878      	ldr	r0, [r7, #4]
 8017bde:	f7fe ff05 	bl	80169ec <ip4_input>
      break;
 8017be2:	e013      	b.n	8017c0c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017bea:	f003 0308 	and.w	r3, r3, #8
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d014      	beq.n	8017c1c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017bf2:	8afb      	ldrh	r3, [r7, #22]
 8017bf4:	4619      	mov	r1, r3
 8017bf6:	6878      	ldr	r0, [r7, #4]
 8017bf8:	f7f5 fc48 	bl	800d48c <pbuf_remove_header>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d10e      	bne.n	8017c20 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017c02:	6839      	ldr	r1, [r7, #0]
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f7fe f87d 	bl	8015d04 <etharp_input>
      break;
 8017c0a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	e00c      	b.n	8017c2a <ethernet_input+0x10e>
    goto free_and_return;
 8017c10:	bf00      	nop
 8017c12:	e006      	b.n	8017c22 <ethernet_input+0x106>
        goto free_and_return;
 8017c14:	bf00      	nop
 8017c16:	e004      	b.n	8017c22 <ethernet_input+0x106>
        goto free_and_return;
 8017c18:	bf00      	nop
 8017c1a:	e002      	b.n	8017c22 <ethernet_input+0x106>
        goto free_and_return;
 8017c1c:	bf00      	nop
 8017c1e:	e000      	b.n	8017c22 <ethernet_input+0x106>
        goto free_and_return;
 8017c20:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017c22:	6878      	ldr	r0, [r7, #4]
 8017c24:	f7f5 fcb8 	bl	800d598 <pbuf_free>
  return ERR_OK;
 8017c28:	2300      	movs	r3, #0
}
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	3718      	adds	r7, #24
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	bd80      	pop	{r7, pc}
 8017c32:	bf00      	nop
 8017c34:	0801cb00 	.word	0x0801cb00

08017c38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b086      	sub	sp, #24
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	60f8      	str	r0, [r7, #12]
 8017c40:	60b9      	str	r1, [r7, #8]
 8017c42:	607a      	str	r2, [r7, #4]
 8017c44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017c46:	8c3b      	ldrh	r3, [r7, #32]
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7f4 f869 	bl	800bd20 <lwip_htons>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017c52:	210e      	movs	r1, #14
 8017c54:	68b8      	ldr	r0, [r7, #8]
 8017c56:	f7f5 fc09 	bl	800d46c <pbuf_add_header>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d125      	bne.n	8017cac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017c60:	68bb      	ldr	r3, [r7, #8]
 8017c62:	685b      	ldr	r3, [r3, #4]
 8017c64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017c66:	693b      	ldr	r3, [r7, #16]
 8017c68:	8afa      	ldrh	r2, [r7, #22]
 8017c6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017c6c:	693b      	ldr	r3, [r7, #16]
 8017c6e:	2206      	movs	r2, #6
 8017c70:	6839      	ldr	r1, [r7, #0]
 8017c72:	4618      	mov	r0, r3
 8017c74:	f001 f860 	bl	8018d38 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	3306      	adds	r3, #6
 8017c7c:	2206      	movs	r2, #6
 8017c7e:	6879      	ldr	r1, [r7, #4]
 8017c80:	4618      	mov	r0, r3
 8017c82:	f001 f859 	bl	8018d38 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c8c:	2b06      	cmp	r3, #6
 8017c8e:	d006      	beq.n	8017c9e <ethernet_output+0x66>
 8017c90:	4b0a      	ldr	r3, [pc, #40]	; (8017cbc <ethernet_output+0x84>)
 8017c92:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017c96:	490a      	ldr	r1, [pc, #40]	; (8017cc0 <ethernet_output+0x88>)
 8017c98:	480a      	ldr	r0, [pc, #40]	; (8017cc4 <ethernet_output+0x8c>)
 8017c9a:	f001 f941 	bl	8018f20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	699b      	ldr	r3, [r3, #24]
 8017ca2:	68b9      	ldr	r1, [r7, #8]
 8017ca4:	68f8      	ldr	r0, [r7, #12]
 8017ca6:	4798      	blx	r3
 8017ca8:	4603      	mov	r3, r0
 8017caa:	e002      	b.n	8017cb2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017cac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017cae:	f06f 0301 	mvn.w	r3, #1
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3718      	adds	r7, #24
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}
 8017cba:	bf00      	nop
 8017cbc:	0801c8b4 	.word	0x0801c8b4
 8017cc0:	0801c8ec 	.word	0x0801c8ec
 8017cc4:	0801c920 	.word	0x0801c920

08017cc8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b082      	sub	sp, #8
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
 8017cd0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	2104      	movs	r1, #4
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f7f0 fc3f 	bl	800855c <osMessageQueueNew>
 8017cde:	4602      	mov	r2, r0
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d102      	bne.n	8017cf2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8017cec:	f04f 33ff 	mov.w	r3, #4294967295
 8017cf0:	e000      	b.n	8017cf4 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017cf2:	2300      	movs	r3, #0
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	3708      	adds	r7, #8
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}

08017cfc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b084      	sub	sp, #16
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
 8017d04:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	6818      	ldr	r0, [r3, #0]
 8017d0a:	4639      	mov	r1, r7
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	2200      	movs	r2, #0
 8017d10:	f7f0 fc98 	bl	8008644 <osMessageQueuePut>
 8017d14:	4603      	mov	r3, r0
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d102      	bne.n	8017d20 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	73fb      	strb	r3, [r7, #15]
 8017d1e:	e001      	b.n	8017d24 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017d20:	23ff      	movs	r3, #255	; 0xff
 8017d22:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017d28:	4618      	mov	r0, r3
 8017d2a:	3710      	adds	r7, #16
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b086      	sub	sp, #24
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	60f8      	str	r0, [r7, #12]
 8017d38:	60b9      	str	r1, [r7, #8]
 8017d3a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017d3c:	f7f0 f91e 	bl	8007f7c <osKernelGetTickCount>
 8017d40:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d013      	beq.n	8017d70 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	6818      	ldr	r0, [r3, #0]
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	2200      	movs	r2, #0
 8017d50:	68b9      	ldr	r1, [r7, #8]
 8017d52:	f7f0 fcd7 	bl	8008704 <osMessageQueueGet>
 8017d56:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017d58:	693b      	ldr	r3, [r7, #16]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d105      	bne.n	8017d6a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017d5e:	f7f0 f90d 	bl	8007f7c <osKernelGetTickCount>
 8017d62:	4602      	mov	r2, r0
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	1ad3      	subs	r3, r2, r3
 8017d68:	e00f      	b.n	8017d8a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d6e:	e00c      	b.n	8017d8a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	6818      	ldr	r0, [r3, #0]
 8017d74:	f04f 33ff 	mov.w	r3, #4294967295
 8017d78:	2200      	movs	r2, #0
 8017d7a:	68b9      	ldr	r1, [r7, #8]
 8017d7c:	f7f0 fcc2 	bl	8008704 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017d80:	f7f0 f8fc 	bl	8007f7c <osKernelGetTickCount>
 8017d84:	4602      	mov	r2, r0
 8017d86:	697b      	ldr	r3, [r7, #20]
 8017d88:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3718      	adds	r7, #24
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}

08017d92 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017d92:	b480      	push	{r7}
 8017d94:	b083      	sub	sp, #12
 8017d96:	af00      	add	r7, sp, #0
 8017d98:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d101      	bne.n	8017da6 <sys_mbox_valid+0x14>
    return 0;
 8017da2:	2300      	movs	r3, #0
 8017da4:	e000      	b.n	8017da8 <sys_mbox_valid+0x16>
  else
    return 1;
 8017da6:	2301      	movs	r3, #1
}
 8017da8:	4618      	mov	r0, r3
 8017daa:	370c      	adds	r7, #12
 8017dac:	46bd      	mov	sp, r7
 8017dae:	bc80      	pop	{r7}
 8017db0:	4770      	bx	lr
	...

08017db4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017db8:	2000      	movs	r0, #0
 8017dba:	f7f0 f9a1 	bl	8008100 <osMutexNew>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	4a01      	ldr	r2, [pc, #4]	; (8017dc8 <sys_init+0x14>)
 8017dc2:	6013      	str	r3, [r2, #0]
#endif
}
 8017dc4:	bf00      	nop
 8017dc6:	bd80      	pop	{r7, pc}
 8017dc8:	2000cadc 	.word	0x2000cadc

08017dcc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b082      	sub	sp, #8
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017dd4:	2000      	movs	r0, #0
 8017dd6:	f7f0 f993 	bl	8008100 <osMutexNew>
 8017dda:	4602      	mov	r2, r0
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d102      	bne.n	8017dee <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017de8:	f04f 33ff 	mov.w	r3, #4294967295
 8017dec:	e000      	b.n	8017df0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017dee:	2300      	movs	r3, #0
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3708      	adds	r7, #8
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}

08017df8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b082      	sub	sp, #8
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	f04f 31ff 	mov.w	r1, #4294967295
 8017e08:	4618      	mov	r0, r3
 8017e0a:	f7f0 f9ff 	bl	800820c <osMutexAcquire>
#endif
}
 8017e0e:	bf00      	nop
 8017e10:	3708      	adds	r7, #8
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bd80      	pop	{r7, pc}

08017e16 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017e16:	b580      	push	{r7, lr}
 8017e18:	b082      	sub	sp, #8
 8017e1a:	af00      	add	r7, sp, #0
 8017e1c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7f0 fa3d 	bl	80082a2 <osMutexRelease>
}
 8017e28:	bf00      	nop
 8017e2a:	3708      	adds	r7, #8
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}

08017e30 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b08e      	sub	sp, #56	; 0x38
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	607a      	str	r2, [r7, #4]
 8017e3c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017e3e:	f107 0314 	add.w	r3, r7, #20
 8017e42:	2224      	movs	r2, #36	; 0x24
 8017e44:	2100      	movs	r1, #0
 8017e46:	4618      	mov	r0, r3
 8017e48:	f000 ff84 	bl	8018d54 <memset>
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	617b      	str	r3, [r7, #20]
 8017e50:	683b      	ldr	r3, [r7, #0]
 8017e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e56:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017e58:	f107 0314 	add.w	r3, r7, #20
 8017e5c:	461a      	mov	r2, r3
 8017e5e:	6879      	ldr	r1, [r7, #4]
 8017e60:	68b8      	ldr	r0, [r7, #8]
 8017e62:	f7f0 f8a0 	bl	8007fa6 <osThreadNew>
 8017e66:	4603      	mov	r3, r0
#endif
}
 8017e68:	4618      	mov	r0, r3
 8017e6a:	3738      	adds	r7, #56	; 0x38
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	bd80      	pop	{r7, pc}

08017e70 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017e74:	4b04      	ldr	r3, [pc, #16]	; (8017e88 <sys_arch_protect+0x18>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	f04f 31ff 	mov.w	r1, #4294967295
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7f0 f9c5 	bl	800820c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017e82:	2301      	movs	r3, #1
}
 8017e84:	4618      	mov	r0, r3
 8017e86:	bd80      	pop	{r7, pc}
 8017e88:	2000cadc 	.word	0x2000cadc

08017e8c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b082      	sub	sp, #8
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017e94:	4b04      	ldr	r3, [pc, #16]	; (8017ea8 <sys_arch_unprotect+0x1c>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f7f0 fa02 	bl	80082a2 <osMutexRelease>
}
 8017e9e:	bf00      	nop
 8017ea0:	3708      	adds	r7, #8
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
 8017ea6:	bf00      	nop
 8017ea8:	2000cadc 	.word	0x2000cadc

08017eac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	4912      	ldr	r1, [pc, #72]	; (8017efc <MX_USB_DEVICE_Init+0x50>)
 8017eb4:	4812      	ldr	r0, [pc, #72]	; (8017f00 <MX_USB_DEVICE_Init+0x54>)
 8017eb6:	f7ee fceb 	bl	8006890 <USBD_Init>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d001      	beq.n	8017ec4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017ec0:	f7e8 fc82 	bl	80007c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017ec4:	490f      	ldr	r1, [pc, #60]	; (8017f04 <MX_USB_DEVICE_Init+0x58>)
 8017ec6:	480e      	ldr	r0, [pc, #56]	; (8017f00 <MX_USB_DEVICE_Init+0x54>)
 8017ec8:	f7ee fd12 	bl	80068f0 <USBD_RegisterClass>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d001      	beq.n	8017ed6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017ed2:	f7e8 fc79 	bl	80007c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017ed6:	490c      	ldr	r1, [pc, #48]	; (8017f08 <MX_USB_DEVICE_Init+0x5c>)
 8017ed8:	4809      	ldr	r0, [pc, #36]	; (8017f00 <MX_USB_DEVICE_Init+0x54>)
 8017eda:	f7ee fc4d 	bl	8006778 <USBD_CDC_RegisterInterface>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d001      	beq.n	8017ee8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017ee4:	f7e8 fc70 	bl	80007c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017ee8:	4805      	ldr	r0, [pc, #20]	; (8017f00 <MX_USB_DEVICE_Init+0x54>)
 8017eea:	f7ee fd37 	bl	800695c <USBD_Start>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d001      	beq.n	8017ef8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017ef4:	f7e8 fc68 	bl	80007c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017ef8:	bf00      	nop
 8017efa:	bd80      	pop	{r7, pc}
 8017efc:	200000c0 	.word	0x200000c0
 8017f00:	2000cae0 	.word	0x2000cae0
 8017f04:	20000018 	.word	0x20000018
 8017f08:	200000ac 	.word	0x200000ac

08017f0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017f10:	2200      	movs	r2, #0
 8017f12:	4905      	ldr	r1, [pc, #20]	; (8017f28 <CDC_Init_FS+0x1c>)
 8017f14:	4805      	ldr	r0, [pc, #20]	; (8017f2c <CDC_Init_FS+0x20>)
 8017f16:	f7ee fc48 	bl	80067aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017f1a:	4905      	ldr	r1, [pc, #20]	; (8017f30 <CDC_Init_FS+0x24>)
 8017f1c:	4803      	ldr	r0, [pc, #12]	; (8017f2c <CDC_Init_FS+0x20>)
 8017f1e:	f7ee fc65 	bl	80067ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017f22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017f24:	4618      	mov	r0, r3
 8017f26:	bd80      	pop	{r7, pc}
 8017f28:	2000d5bc 	.word	0x2000d5bc
 8017f2c:	2000cae0 	.word	0x2000cae0
 8017f30:	2000cdbc 	.word	0x2000cdbc

08017f34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017f34:	b480      	push	{r7}
 8017f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017f38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bc80      	pop	{r7}
 8017f40:	4770      	bx	lr
	...

08017f44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017f44:	b480      	push	{r7}
 8017f46:	b083      	sub	sp, #12
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	6039      	str	r1, [r7, #0]
 8017f4e:	71fb      	strb	r3, [r7, #7]
 8017f50:	4613      	mov	r3, r2
 8017f52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017f54:	79fb      	ldrb	r3, [r7, #7]
 8017f56:	2b23      	cmp	r3, #35	; 0x23
 8017f58:	d84a      	bhi.n	8017ff0 <CDC_Control_FS+0xac>
 8017f5a:	a201      	add	r2, pc, #4	; (adr r2, 8017f60 <CDC_Control_FS+0x1c>)
 8017f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f60:	08017ff1 	.word	0x08017ff1
 8017f64:	08017ff1 	.word	0x08017ff1
 8017f68:	08017ff1 	.word	0x08017ff1
 8017f6c:	08017ff1 	.word	0x08017ff1
 8017f70:	08017ff1 	.word	0x08017ff1
 8017f74:	08017ff1 	.word	0x08017ff1
 8017f78:	08017ff1 	.word	0x08017ff1
 8017f7c:	08017ff1 	.word	0x08017ff1
 8017f80:	08017ff1 	.word	0x08017ff1
 8017f84:	08017ff1 	.word	0x08017ff1
 8017f88:	08017ff1 	.word	0x08017ff1
 8017f8c:	08017ff1 	.word	0x08017ff1
 8017f90:	08017ff1 	.word	0x08017ff1
 8017f94:	08017ff1 	.word	0x08017ff1
 8017f98:	08017ff1 	.word	0x08017ff1
 8017f9c:	08017ff1 	.word	0x08017ff1
 8017fa0:	08017ff1 	.word	0x08017ff1
 8017fa4:	08017ff1 	.word	0x08017ff1
 8017fa8:	08017ff1 	.word	0x08017ff1
 8017fac:	08017ff1 	.word	0x08017ff1
 8017fb0:	08017ff1 	.word	0x08017ff1
 8017fb4:	08017ff1 	.word	0x08017ff1
 8017fb8:	08017ff1 	.word	0x08017ff1
 8017fbc:	08017ff1 	.word	0x08017ff1
 8017fc0:	08017ff1 	.word	0x08017ff1
 8017fc4:	08017ff1 	.word	0x08017ff1
 8017fc8:	08017ff1 	.word	0x08017ff1
 8017fcc:	08017ff1 	.word	0x08017ff1
 8017fd0:	08017ff1 	.word	0x08017ff1
 8017fd4:	08017ff1 	.word	0x08017ff1
 8017fd8:	08017ff1 	.word	0x08017ff1
 8017fdc:	08017ff1 	.word	0x08017ff1
 8017fe0:	08017ff1 	.word	0x08017ff1
 8017fe4:	08017ff1 	.word	0x08017ff1
 8017fe8:	08017ff1 	.word	0x08017ff1
 8017fec:	08017ff1 	.word	0x08017ff1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017ff0:	bf00      	nop
  }

  return (USBD_OK);
 8017ff2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	370c      	adds	r7, #12
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bc80      	pop	{r7}
 8017ffc:	4770      	bx	lr
 8017ffe:	bf00      	nop

08018000 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
 8018008:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801800a:	6879      	ldr	r1, [r7, #4]
 801800c:	4805      	ldr	r0, [pc, #20]	; (8018024 <CDC_Receive_FS+0x24>)
 801800e:	f7ee fbed 	bl	80067ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018012:	4804      	ldr	r0, [pc, #16]	; (8018024 <CDC_Receive_FS+0x24>)
 8018014:	f7ee fc06 	bl	8006824 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018018:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801801a:	4618      	mov	r0, r3
 801801c:	3708      	adds	r7, #8
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	2000cae0 	.word	0x2000cae0

08018028 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018028:	b480      	push	{r7}
 801802a:	b087      	sub	sp, #28
 801802c:	af00      	add	r7, sp, #0
 801802e:	60f8      	str	r0, [r7, #12]
 8018030:	60b9      	str	r1, [r7, #8]
 8018032:	4613      	mov	r3, r2
 8018034:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018036:	2300      	movs	r3, #0
 8018038:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801803a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801803e:	4618      	mov	r0, r3
 8018040:	371c      	adds	r7, #28
 8018042:	46bd      	mov	sp, r7
 8018044:	bc80      	pop	{r7}
 8018046:	4770      	bx	lr

08018048 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018048:	b480      	push	{r7}
 801804a:	b083      	sub	sp, #12
 801804c:	af00      	add	r7, sp, #0
 801804e:	4603      	mov	r3, r0
 8018050:	6039      	str	r1, [r7, #0]
 8018052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	2212      	movs	r2, #18
 8018058:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801805a:	4b03      	ldr	r3, [pc, #12]	; (8018068 <USBD_FS_DeviceDescriptor+0x20>)
}
 801805c:	4618      	mov	r0, r3
 801805e:	370c      	adds	r7, #12
 8018060:	46bd      	mov	sp, r7
 8018062:	bc80      	pop	{r7}
 8018064:	4770      	bx	lr
 8018066:	bf00      	nop
 8018068:	200000dc 	.word	0x200000dc

0801806c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801806c:	b480      	push	{r7}
 801806e:	b083      	sub	sp, #12
 8018070:	af00      	add	r7, sp, #0
 8018072:	4603      	mov	r3, r0
 8018074:	6039      	str	r1, [r7, #0]
 8018076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018078:	683b      	ldr	r3, [r7, #0]
 801807a:	2204      	movs	r2, #4
 801807c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801807e:	4b03      	ldr	r3, [pc, #12]	; (801808c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018080:	4618      	mov	r0, r3
 8018082:	370c      	adds	r7, #12
 8018084:	46bd      	mov	sp, r7
 8018086:	bc80      	pop	{r7}
 8018088:	4770      	bx	lr
 801808a:	bf00      	nop
 801808c:	200000f0 	.word	0x200000f0

08018090 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b082      	sub	sp, #8
 8018094:	af00      	add	r7, sp, #0
 8018096:	4603      	mov	r3, r0
 8018098:	6039      	str	r1, [r7, #0]
 801809a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801809c:	79fb      	ldrb	r3, [r7, #7]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d105      	bne.n	80180ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80180a2:	683a      	ldr	r2, [r7, #0]
 80180a4:	4907      	ldr	r1, [pc, #28]	; (80180c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80180a6:	4808      	ldr	r0, [pc, #32]	; (80180c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80180a8:	f7ef fdfc 	bl	8007ca4 <USBD_GetString>
 80180ac:	e004      	b.n	80180b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80180ae:	683a      	ldr	r2, [r7, #0]
 80180b0:	4904      	ldr	r1, [pc, #16]	; (80180c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80180b2:	4805      	ldr	r0, [pc, #20]	; (80180c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80180b4:	f7ef fdf6 	bl	8007ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80180b8:	4b02      	ldr	r3, [pc, #8]	; (80180c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3708      	adds	r7, #8
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}
 80180c2:	bf00      	nop
 80180c4:	2000ddbc 	.word	0x2000ddbc
 80180c8:	0801c948 	.word	0x0801c948

080180cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b082      	sub	sp, #8
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	4603      	mov	r3, r0
 80180d4:	6039      	str	r1, [r7, #0]
 80180d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80180d8:	683a      	ldr	r2, [r7, #0]
 80180da:	4904      	ldr	r1, [pc, #16]	; (80180ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80180dc:	4804      	ldr	r0, [pc, #16]	; (80180f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80180de:	f7ef fde1 	bl	8007ca4 <USBD_GetString>
  return USBD_StrDesc;
 80180e2:	4b02      	ldr	r3, [pc, #8]	; (80180ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80180e4:	4618      	mov	r0, r3
 80180e6:	3708      	adds	r7, #8
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}
 80180ec:	2000ddbc 	.word	0x2000ddbc
 80180f0:	0801c960 	.word	0x0801c960

080180f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	4603      	mov	r3, r0
 80180fc:	6039      	str	r1, [r7, #0]
 80180fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	221a      	movs	r2, #26
 8018104:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018106:	f000 f843 	bl	8018190 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801810a:	4b02      	ldr	r3, [pc, #8]	; (8018114 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801810c:	4618      	mov	r0, r3
 801810e:	3708      	adds	r7, #8
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}
 8018114:	200000f4 	.word	0x200000f4

08018118 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
 801811e:	4603      	mov	r3, r0
 8018120:	6039      	str	r1, [r7, #0]
 8018122:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018124:	79fb      	ldrb	r3, [r7, #7]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d105      	bne.n	8018136 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801812a:	683a      	ldr	r2, [r7, #0]
 801812c:	4907      	ldr	r1, [pc, #28]	; (801814c <USBD_FS_ConfigStrDescriptor+0x34>)
 801812e:	4808      	ldr	r0, [pc, #32]	; (8018150 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018130:	f7ef fdb8 	bl	8007ca4 <USBD_GetString>
 8018134:	e004      	b.n	8018140 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018136:	683a      	ldr	r2, [r7, #0]
 8018138:	4904      	ldr	r1, [pc, #16]	; (801814c <USBD_FS_ConfigStrDescriptor+0x34>)
 801813a:	4805      	ldr	r0, [pc, #20]	; (8018150 <USBD_FS_ConfigStrDescriptor+0x38>)
 801813c:	f7ef fdb2 	bl	8007ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018140:	4b02      	ldr	r3, [pc, #8]	; (801814c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018142:	4618      	mov	r0, r3
 8018144:	3708      	adds	r7, #8
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}
 801814a:	bf00      	nop
 801814c:	2000ddbc 	.word	0x2000ddbc
 8018150:	0801c974 	.word	0x0801c974

08018154 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b082      	sub	sp, #8
 8018158:	af00      	add	r7, sp, #0
 801815a:	4603      	mov	r3, r0
 801815c:	6039      	str	r1, [r7, #0]
 801815e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018160:	79fb      	ldrb	r3, [r7, #7]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d105      	bne.n	8018172 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018166:	683a      	ldr	r2, [r7, #0]
 8018168:	4907      	ldr	r1, [pc, #28]	; (8018188 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801816a:	4808      	ldr	r0, [pc, #32]	; (801818c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801816c:	f7ef fd9a 	bl	8007ca4 <USBD_GetString>
 8018170:	e004      	b.n	801817c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018172:	683a      	ldr	r2, [r7, #0]
 8018174:	4904      	ldr	r1, [pc, #16]	; (8018188 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018176:	4805      	ldr	r0, [pc, #20]	; (801818c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018178:	f7ef fd94 	bl	8007ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801817c:	4b02      	ldr	r3, [pc, #8]	; (8018188 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801817e:	4618      	mov	r0, r3
 8018180:	3708      	adds	r7, #8
 8018182:	46bd      	mov	sp, r7
 8018184:	bd80      	pop	{r7, pc}
 8018186:	bf00      	nop
 8018188:	2000ddbc 	.word	0x2000ddbc
 801818c:	0801c980 	.word	0x0801c980

08018190 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b084      	sub	sp, #16
 8018194:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018196:	4b0f      	ldr	r3, [pc, #60]	; (80181d4 <Get_SerialNum+0x44>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801819c:	4b0e      	ldr	r3, [pc, #56]	; (80181d8 <Get_SerialNum+0x48>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80181a2:	4b0e      	ldr	r3, [pc, #56]	; (80181dc <Get_SerialNum+0x4c>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80181a8:	68fa      	ldr	r2, [r7, #12]
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	4413      	add	r3, r2
 80181ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d009      	beq.n	80181ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80181b6:	2208      	movs	r2, #8
 80181b8:	4909      	ldr	r1, [pc, #36]	; (80181e0 <Get_SerialNum+0x50>)
 80181ba:	68f8      	ldr	r0, [r7, #12]
 80181bc:	f000 f814 	bl	80181e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80181c0:	2204      	movs	r2, #4
 80181c2:	4908      	ldr	r1, [pc, #32]	; (80181e4 <Get_SerialNum+0x54>)
 80181c4:	68b8      	ldr	r0, [r7, #8]
 80181c6:	f000 f80f 	bl	80181e8 <IntToUnicode>
  }
}
 80181ca:	bf00      	nop
 80181cc:	3710      	adds	r7, #16
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	bf00      	nop
 80181d4:	1fff7a10 	.word	0x1fff7a10
 80181d8:	1fff7a14 	.word	0x1fff7a14
 80181dc:	1fff7a18 	.word	0x1fff7a18
 80181e0:	200000f6 	.word	0x200000f6
 80181e4:	20000106 	.word	0x20000106

080181e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80181e8:	b480      	push	{r7}
 80181ea:	b087      	sub	sp, #28
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	60b9      	str	r1, [r7, #8]
 80181f2:	4613      	mov	r3, r2
 80181f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80181f6:	2300      	movs	r3, #0
 80181f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80181fa:	2300      	movs	r3, #0
 80181fc:	75fb      	strb	r3, [r7, #23]
 80181fe:	e027      	b.n	8018250 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	0f1b      	lsrs	r3, r3, #28
 8018204:	2b09      	cmp	r3, #9
 8018206:	d80b      	bhi.n	8018220 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	0f1b      	lsrs	r3, r3, #28
 801820c:	b2da      	uxtb	r2, r3
 801820e:	7dfb      	ldrb	r3, [r7, #23]
 8018210:	005b      	lsls	r3, r3, #1
 8018212:	4619      	mov	r1, r3
 8018214:	68bb      	ldr	r3, [r7, #8]
 8018216:	440b      	add	r3, r1
 8018218:	3230      	adds	r2, #48	; 0x30
 801821a:	b2d2      	uxtb	r2, r2
 801821c:	701a      	strb	r2, [r3, #0]
 801821e:	e00a      	b.n	8018236 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	0f1b      	lsrs	r3, r3, #28
 8018224:	b2da      	uxtb	r2, r3
 8018226:	7dfb      	ldrb	r3, [r7, #23]
 8018228:	005b      	lsls	r3, r3, #1
 801822a:	4619      	mov	r1, r3
 801822c:	68bb      	ldr	r3, [r7, #8]
 801822e:	440b      	add	r3, r1
 8018230:	3237      	adds	r2, #55	; 0x37
 8018232:	b2d2      	uxtb	r2, r2
 8018234:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	011b      	lsls	r3, r3, #4
 801823a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801823c:	7dfb      	ldrb	r3, [r7, #23]
 801823e:	005b      	lsls	r3, r3, #1
 8018240:	3301      	adds	r3, #1
 8018242:	68ba      	ldr	r2, [r7, #8]
 8018244:	4413      	add	r3, r2
 8018246:	2200      	movs	r2, #0
 8018248:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801824a:	7dfb      	ldrb	r3, [r7, #23]
 801824c:	3301      	adds	r3, #1
 801824e:	75fb      	strb	r3, [r7, #23]
 8018250:	7dfa      	ldrb	r2, [r7, #23]
 8018252:	79fb      	ldrb	r3, [r7, #7]
 8018254:	429a      	cmp	r2, r3
 8018256:	d3d3      	bcc.n	8018200 <IntToUnicode+0x18>
  }
}
 8018258:	bf00      	nop
 801825a:	bf00      	nop
 801825c:	371c      	adds	r7, #28
 801825e:	46bd      	mov	sp, r7
 8018260:	bc80      	pop	{r7}
 8018262:	4770      	bx	lr

08018264 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b08a      	sub	sp, #40	; 0x28
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801826c:	f107 0314 	add.w	r3, r7, #20
 8018270:	2200      	movs	r2, #0
 8018272:	601a      	str	r2, [r3, #0]
 8018274:	605a      	str	r2, [r3, #4]
 8018276:	609a      	str	r2, [r3, #8]
 8018278:	60da      	str	r2, [r3, #12]
 801827a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018284:	d13a      	bne.n	80182fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018286:	2300      	movs	r3, #0
 8018288:	613b      	str	r3, [r7, #16]
 801828a:	4b1e      	ldr	r3, [pc, #120]	; (8018304 <HAL_PCD_MspInit+0xa0>)
 801828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801828e:	4a1d      	ldr	r2, [pc, #116]	; (8018304 <HAL_PCD_MspInit+0xa0>)
 8018290:	f043 0301 	orr.w	r3, r3, #1
 8018294:	6313      	str	r3, [r2, #48]	; 0x30
 8018296:	4b1b      	ldr	r3, [pc, #108]	; (8018304 <HAL_PCD_MspInit+0xa0>)
 8018298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801829a:	f003 0301 	and.w	r3, r3, #1
 801829e:	613b      	str	r3, [r7, #16]
 80182a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80182a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80182a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80182a8:	2302      	movs	r3, #2
 80182aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182ac:	2300      	movs	r3, #0
 80182ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80182b0:	2303      	movs	r3, #3
 80182b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80182b4:	230a      	movs	r3, #10
 80182b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80182b8:	f107 0314 	add.w	r3, r7, #20
 80182bc:	4619      	mov	r1, r3
 80182be:	4812      	ldr	r0, [pc, #72]	; (8018308 <HAL_PCD_MspInit+0xa4>)
 80182c0:	f7e9 fbb2 	bl	8001a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80182c4:	4b0f      	ldr	r3, [pc, #60]	; (8018304 <HAL_PCD_MspInit+0xa0>)
 80182c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182c8:	4a0e      	ldr	r2, [pc, #56]	; (8018304 <HAL_PCD_MspInit+0xa0>)
 80182ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182ce:	6353      	str	r3, [r2, #52]	; 0x34
 80182d0:	2300      	movs	r3, #0
 80182d2:	60fb      	str	r3, [r7, #12]
 80182d4:	4b0b      	ldr	r3, [pc, #44]	; (8018304 <HAL_PCD_MspInit+0xa0>)
 80182d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182d8:	4a0a      	ldr	r2, [pc, #40]	; (8018304 <HAL_PCD_MspInit+0xa0>)
 80182da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80182de:	6453      	str	r3, [r2, #68]	; 0x44
 80182e0:	4b08      	ldr	r3, [pc, #32]	; (8018304 <HAL_PCD_MspInit+0xa0>)
 80182e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80182e8:	60fb      	str	r3, [r7, #12]
 80182ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80182ec:	2200      	movs	r2, #0
 80182ee:	2105      	movs	r1, #5
 80182f0:	2043      	movs	r0, #67	; 0x43
 80182f2:	f7e8 fd32 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80182f6:	2043      	movs	r0, #67	; 0x43
 80182f8:	f7e8 fd4b 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80182fc:	bf00      	nop
 80182fe:	3728      	adds	r7, #40	; 0x28
 8018300:	46bd      	mov	sp, r7
 8018302:	bd80      	pop	{r7, pc}
 8018304:	40023800 	.word	0x40023800
 8018308:	40020000 	.word	0x40020000

0801830c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b082      	sub	sp, #8
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018320:	4619      	mov	r1, r3
 8018322:	4610      	mov	r0, r2
 8018324:	f7ee fb66 	bl	80069f4 <USBD_LL_SetupStage>
}
 8018328:	bf00      	nop
 801832a:	3708      	adds	r7, #8
 801832c:	46bd      	mov	sp, r7
 801832e:	bd80      	pop	{r7, pc}

08018330 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b082      	sub	sp, #8
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	460b      	mov	r3, r1
 801833a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018342:	78fa      	ldrb	r2, [r7, #3]
 8018344:	6879      	ldr	r1, [r7, #4]
 8018346:	4613      	mov	r3, r2
 8018348:	00db      	lsls	r3, r3, #3
 801834a:	4413      	add	r3, r2
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	440b      	add	r3, r1
 8018350:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018354:	681a      	ldr	r2, [r3, #0]
 8018356:	78fb      	ldrb	r3, [r7, #3]
 8018358:	4619      	mov	r1, r3
 801835a:	f7ee fba0 	bl	8006a9e <USBD_LL_DataOutStage>
}
 801835e:	bf00      	nop
 8018360:	3708      	adds	r7, #8
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}

08018366 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018366:	b580      	push	{r7, lr}
 8018368:	b082      	sub	sp, #8
 801836a:	af00      	add	r7, sp, #0
 801836c:	6078      	str	r0, [r7, #4]
 801836e:	460b      	mov	r3, r1
 8018370:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018378:	78fa      	ldrb	r2, [r7, #3]
 801837a:	6879      	ldr	r1, [r7, #4]
 801837c:	4613      	mov	r3, r2
 801837e:	00db      	lsls	r3, r3, #3
 8018380:	4413      	add	r3, r2
 8018382:	009b      	lsls	r3, r3, #2
 8018384:	440b      	add	r3, r1
 8018386:	334c      	adds	r3, #76	; 0x4c
 8018388:	681a      	ldr	r2, [r3, #0]
 801838a:	78fb      	ldrb	r3, [r7, #3]
 801838c:	4619      	mov	r1, r3
 801838e:	f7ee fc39 	bl	8006c04 <USBD_LL_DataInStage>
}
 8018392:	bf00      	nop
 8018394:	3708      	adds	r7, #8
 8018396:	46bd      	mov	sp, r7
 8018398:	bd80      	pop	{r7, pc}

0801839a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801839a:	b580      	push	{r7, lr}
 801839c:	b082      	sub	sp, #8
 801839e:	af00      	add	r7, sp, #0
 80183a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80183a8:	4618      	mov	r0, r3
 80183aa:	f7ee fd6a 	bl	8006e82 <USBD_LL_SOF>
}
 80183ae:	bf00      	nop
 80183b0:	3708      	adds	r7, #8
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}

080183b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183b6:	b580      	push	{r7, lr}
 80183b8:	b084      	sub	sp, #16
 80183ba:	af00      	add	r7, sp, #0
 80183bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80183be:	2301      	movs	r3, #1
 80183c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	68db      	ldr	r3, [r3, #12]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d102      	bne.n	80183d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80183ca:	2300      	movs	r3, #0
 80183cc:	73fb      	strb	r3, [r7, #15]
 80183ce:	e008      	b.n	80183e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	68db      	ldr	r3, [r3, #12]
 80183d4:	2b02      	cmp	r3, #2
 80183d6:	d102      	bne.n	80183de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80183d8:	2301      	movs	r3, #1
 80183da:	73fb      	strb	r3, [r7, #15]
 80183dc:	e001      	b.n	80183e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80183de:	f7e8 f9f3 	bl	80007c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80183e8:	7bfa      	ldrb	r2, [r7, #15]
 80183ea:	4611      	mov	r1, r2
 80183ec:	4618      	mov	r0, r3
 80183ee:	f7ee fd0d 	bl	8006e0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7ee fcb5 	bl	8006d68 <USBD_LL_Reset>
}
 80183fe:	bf00      	nop
 8018400:	3710      	adds	r7, #16
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}
	...

08018408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018408:	b580      	push	{r7, lr}
 801840a:	b082      	sub	sp, #8
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018416:	4618      	mov	r0, r3
 8018418:	f7ee fd07 	bl	8006e2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	687a      	ldr	r2, [r7, #4]
 8018428:	6812      	ldr	r2, [r2, #0]
 801842a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801842e:	f043 0301 	orr.w	r3, r3, #1
 8018432:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6a1b      	ldr	r3, [r3, #32]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d005      	beq.n	8018448 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801843c:	4b04      	ldr	r3, [pc, #16]	; (8018450 <HAL_PCD_SuspendCallback+0x48>)
 801843e:	691b      	ldr	r3, [r3, #16]
 8018440:	4a03      	ldr	r2, [pc, #12]	; (8018450 <HAL_PCD_SuspendCallback+0x48>)
 8018442:	f043 0306 	orr.w	r3, r3, #6
 8018446:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018448:	bf00      	nop
 801844a:	3708      	adds	r7, #8
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}
 8018450:	e000ed00 	.word	0xe000ed00

08018454 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b082      	sub	sp, #8
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018462:	4618      	mov	r0, r3
 8018464:	f7ee fcf6 	bl	8006e54 <USBD_LL_Resume>
}
 8018468:	bf00      	nop
 801846a:	3708      	adds	r7, #8
 801846c:	46bd      	mov	sp, r7
 801846e:	bd80      	pop	{r7, pc}

08018470 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b082      	sub	sp, #8
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
 8018478:	460b      	mov	r3, r1
 801847a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018482:	78fa      	ldrb	r2, [r7, #3]
 8018484:	4611      	mov	r1, r2
 8018486:	4618      	mov	r0, r3
 8018488:	f7ee fd4d 	bl	8006f26 <USBD_LL_IsoOUTIncomplete>
}
 801848c:	bf00      	nop
 801848e:	3708      	adds	r7, #8
 8018490:	46bd      	mov	sp, r7
 8018492:	bd80      	pop	{r7, pc}

08018494 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b082      	sub	sp, #8
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
 801849c:	460b      	mov	r3, r1
 801849e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80184a6:	78fa      	ldrb	r2, [r7, #3]
 80184a8:	4611      	mov	r1, r2
 80184aa:	4618      	mov	r0, r3
 80184ac:	f7ee fd09 	bl	8006ec2 <USBD_LL_IsoINIncomplete>
}
 80184b0:	bf00      	nop
 80184b2:	3708      	adds	r7, #8
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}

080184b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b082      	sub	sp, #8
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7ee fd5f 	bl	8006f8a <USBD_LL_DevConnected>
}
 80184cc:	bf00      	nop
 80184ce:	3708      	adds	r7, #8
 80184d0:	46bd      	mov	sp, r7
 80184d2:	bd80      	pop	{r7, pc}

080184d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b082      	sub	sp, #8
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80184e2:	4618      	mov	r0, r3
 80184e4:	f7ee fd5b 	bl	8006f9e <USBD_LL_DevDisconnected>
}
 80184e8:	bf00      	nop
 80184ea:	3708      	adds	r7, #8
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}

080184f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b082      	sub	sp, #8
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	781b      	ldrb	r3, [r3, #0]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d13c      	bne.n	801857a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018500:	4a20      	ldr	r2, [pc, #128]	; (8018584 <USBD_LL_Init+0x94>)
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	4a1e      	ldr	r2, [pc, #120]	; (8018584 <USBD_LL_Init+0x94>)
 801850c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018510:	4b1c      	ldr	r3, [pc, #112]	; (8018584 <USBD_LL_Init+0x94>)
 8018512:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018516:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018518:	4b1a      	ldr	r3, [pc, #104]	; (8018584 <USBD_LL_Init+0x94>)
 801851a:	2204      	movs	r2, #4
 801851c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801851e:	4b19      	ldr	r3, [pc, #100]	; (8018584 <USBD_LL_Init+0x94>)
 8018520:	2202      	movs	r2, #2
 8018522:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018524:	4b17      	ldr	r3, [pc, #92]	; (8018584 <USBD_LL_Init+0x94>)
 8018526:	2200      	movs	r2, #0
 8018528:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801852a:	4b16      	ldr	r3, [pc, #88]	; (8018584 <USBD_LL_Init+0x94>)
 801852c:	2202      	movs	r2, #2
 801852e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018530:	4b14      	ldr	r3, [pc, #80]	; (8018584 <USBD_LL_Init+0x94>)
 8018532:	2200      	movs	r2, #0
 8018534:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018536:	4b13      	ldr	r3, [pc, #76]	; (8018584 <USBD_LL_Init+0x94>)
 8018538:	2200      	movs	r2, #0
 801853a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801853c:	4b11      	ldr	r3, [pc, #68]	; (8018584 <USBD_LL_Init+0x94>)
 801853e:	2200      	movs	r2, #0
 8018540:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018542:	4b10      	ldr	r3, [pc, #64]	; (8018584 <USBD_LL_Init+0x94>)
 8018544:	2200      	movs	r2, #0
 8018546:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018548:	4b0e      	ldr	r3, [pc, #56]	; (8018584 <USBD_LL_Init+0x94>)
 801854a:	2200      	movs	r2, #0
 801854c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801854e:	480d      	ldr	r0, [pc, #52]	; (8018584 <USBD_LL_Init+0x94>)
 8018550:	f7e9 fc3e 	bl	8001dd0 <HAL_PCD_Init>
 8018554:	4603      	mov	r3, r0
 8018556:	2b00      	cmp	r3, #0
 8018558:	d001      	beq.n	801855e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801855a:	f7e8 f935 	bl	80007c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801855e:	2180      	movs	r1, #128	; 0x80
 8018560:	4808      	ldr	r0, [pc, #32]	; (8018584 <USBD_LL_Init+0x94>)
 8018562:	f7ea fe93 	bl	800328c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018566:	2240      	movs	r2, #64	; 0x40
 8018568:	2100      	movs	r1, #0
 801856a:	4806      	ldr	r0, [pc, #24]	; (8018584 <USBD_LL_Init+0x94>)
 801856c:	f7ea fe48 	bl	8003200 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018570:	2280      	movs	r2, #128	; 0x80
 8018572:	2101      	movs	r1, #1
 8018574:	4803      	ldr	r0, [pc, #12]	; (8018584 <USBD_LL_Init+0x94>)
 8018576:	f7ea fe43 	bl	8003200 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801857a:	2300      	movs	r3, #0
}
 801857c:	4618      	mov	r0, r3
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}
 8018584:	2000dfbc 	.word	0x2000dfbc

08018588 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018590:	2300      	movs	r3, #0
 8018592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018594:	2300      	movs	r3, #0
 8018596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801859e:	4618      	mov	r0, r3
 80185a0:	f7e9 fd33 	bl	800200a <HAL_PCD_Start>
 80185a4:	4603      	mov	r3, r0
 80185a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185a8:	7bfb      	ldrb	r3, [r7, #15]
 80185aa:	4618      	mov	r0, r3
 80185ac:	f000 f940 	bl	8018830 <USBD_Get_USB_Status>
 80185b0:	4603      	mov	r3, r0
 80185b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80185b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	3710      	adds	r7, #16
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bd80      	pop	{r7, pc}

080185be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80185be:	b580      	push	{r7, lr}
 80185c0:	b084      	sub	sp, #16
 80185c2:	af00      	add	r7, sp, #0
 80185c4:	6078      	str	r0, [r7, #4]
 80185c6:	4608      	mov	r0, r1
 80185c8:	4611      	mov	r1, r2
 80185ca:	461a      	mov	r2, r3
 80185cc:	4603      	mov	r3, r0
 80185ce:	70fb      	strb	r3, [r7, #3]
 80185d0:	460b      	mov	r3, r1
 80185d2:	70bb      	strb	r3, [r7, #2]
 80185d4:	4613      	mov	r3, r2
 80185d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185d8:	2300      	movs	r3, #0
 80185da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185dc:	2300      	movs	r3, #0
 80185de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80185e6:	78bb      	ldrb	r3, [r7, #2]
 80185e8:	883a      	ldrh	r2, [r7, #0]
 80185ea:	78f9      	ldrb	r1, [r7, #3]
 80185ec:	f7ea fa04 	bl	80029f8 <HAL_PCD_EP_Open>
 80185f0:	4603      	mov	r3, r0
 80185f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185f4:	7bfb      	ldrb	r3, [r7, #15]
 80185f6:	4618      	mov	r0, r3
 80185f8:	f000 f91a 	bl	8018830 <USBD_Get_USB_Status>
 80185fc:	4603      	mov	r3, r0
 80185fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018600:	7bbb      	ldrb	r3, [r7, #14]
}
 8018602:	4618      	mov	r0, r3
 8018604:	3710      	adds	r7, #16
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}

0801860a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801860a:	b580      	push	{r7, lr}
 801860c:	b084      	sub	sp, #16
 801860e:	af00      	add	r7, sp, #0
 8018610:	6078      	str	r0, [r7, #4]
 8018612:	460b      	mov	r3, r1
 8018614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018616:	2300      	movs	r3, #0
 8018618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801861a:	2300      	movs	r3, #0
 801861c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018624:	78fa      	ldrb	r2, [r7, #3]
 8018626:	4611      	mov	r1, r2
 8018628:	4618      	mov	r0, r3
 801862a:	f7ea fa4d 	bl	8002ac8 <HAL_PCD_EP_Close>
 801862e:	4603      	mov	r3, r0
 8018630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018632:	7bfb      	ldrb	r3, [r7, #15]
 8018634:	4618      	mov	r0, r3
 8018636:	f000 f8fb 	bl	8018830 <USBD_Get_USB_Status>
 801863a:	4603      	mov	r3, r0
 801863c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801863e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018640:	4618      	mov	r0, r3
 8018642:	3710      	adds	r7, #16
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}

08018648 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b084      	sub	sp, #16
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
 8018650:	460b      	mov	r3, r1
 8018652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018654:	2300      	movs	r3, #0
 8018656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018658:	2300      	movs	r3, #0
 801865a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018662:	78fa      	ldrb	r2, [r7, #3]
 8018664:	4611      	mov	r1, r2
 8018666:	4618      	mov	r0, r3
 8018668:	f7ea fb24 	bl	8002cb4 <HAL_PCD_EP_SetStall>
 801866c:	4603      	mov	r3, r0
 801866e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018670:	7bfb      	ldrb	r3, [r7, #15]
 8018672:	4618      	mov	r0, r3
 8018674:	f000 f8dc 	bl	8018830 <USBD_Get_USB_Status>
 8018678:	4603      	mov	r3, r0
 801867a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801867c:	7bbb      	ldrb	r3, [r7, #14]
}
 801867e:	4618      	mov	r0, r3
 8018680:	3710      	adds	r7, #16
 8018682:	46bd      	mov	sp, r7
 8018684:	bd80      	pop	{r7, pc}

08018686 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018686:	b580      	push	{r7, lr}
 8018688:	b084      	sub	sp, #16
 801868a:	af00      	add	r7, sp, #0
 801868c:	6078      	str	r0, [r7, #4]
 801868e:	460b      	mov	r3, r1
 8018690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018692:	2300      	movs	r3, #0
 8018694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018696:	2300      	movs	r3, #0
 8018698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80186a0:	78fa      	ldrb	r2, [r7, #3]
 80186a2:	4611      	mov	r1, r2
 80186a4:	4618      	mov	r0, r3
 80186a6:	f7ea fb69 	bl	8002d7c <HAL_PCD_EP_ClrStall>
 80186aa:	4603      	mov	r3, r0
 80186ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186ae:	7bfb      	ldrb	r3, [r7, #15]
 80186b0:	4618      	mov	r0, r3
 80186b2:	f000 f8bd 	bl	8018830 <USBD_Get_USB_Status>
 80186b6:	4603      	mov	r3, r0
 80186b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80186bc:	4618      	mov	r0, r3
 80186be:	3710      	adds	r7, #16
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bd80      	pop	{r7, pc}

080186c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186c4:	b480      	push	{r7}
 80186c6:	b085      	sub	sp, #20
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
 80186cc:	460b      	mov	r3, r1
 80186ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80186d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80186d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	da0b      	bge.n	80186f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80186e0:	78fb      	ldrb	r3, [r7, #3]
 80186e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80186e6:	68f9      	ldr	r1, [r7, #12]
 80186e8:	4613      	mov	r3, r2
 80186ea:	00db      	lsls	r3, r3, #3
 80186ec:	4413      	add	r3, r2
 80186ee:	009b      	lsls	r3, r3, #2
 80186f0:	440b      	add	r3, r1
 80186f2:	333e      	adds	r3, #62	; 0x3e
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	e00b      	b.n	8018710 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80186f8:	78fb      	ldrb	r3, [r7, #3]
 80186fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80186fe:	68f9      	ldr	r1, [r7, #12]
 8018700:	4613      	mov	r3, r2
 8018702:	00db      	lsls	r3, r3, #3
 8018704:	4413      	add	r3, r2
 8018706:	009b      	lsls	r3, r3, #2
 8018708:	440b      	add	r3, r1
 801870a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801870e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018710:	4618      	mov	r0, r3
 8018712:	3714      	adds	r7, #20
 8018714:	46bd      	mov	sp, r7
 8018716:	bc80      	pop	{r7}
 8018718:	4770      	bx	lr

0801871a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801871a:	b580      	push	{r7, lr}
 801871c:	b084      	sub	sp, #16
 801871e:	af00      	add	r7, sp, #0
 8018720:	6078      	str	r0, [r7, #4]
 8018722:	460b      	mov	r3, r1
 8018724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018726:	2300      	movs	r3, #0
 8018728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801872a:	2300      	movs	r3, #0
 801872c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018734:	78fa      	ldrb	r2, [r7, #3]
 8018736:	4611      	mov	r1, r2
 8018738:	4618      	mov	r0, r3
 801873a:	f7ea f938 	bl	80029ae <HAL_PCD_SetAddress>
 801873e:	4603      	mov	r3, r0
 8018740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018742:	7bfb      	ldrb	r3, [r7, #15]
 8018744:	4618      	mov	r0, r3
 8018746:	f000 f873 	bl	8018830 <USBD_Get_USB_Status>
 801874a:	4603      	mov	r3, r0
 801874c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801874e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018750:	4618      	mov	r0, r3
 8018752:	3710      	adds	r7, #16
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}

08018758 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b086      	sub	sp, #24
 801875c:	af00      	add	r7, sp, #0
 801875e:	60f8      	str	r0, [r7, #12]
 8018760:	607a      	str	r2, [r7, #4]
 8018762:	603b      	str	r3, [r7, #0]
 8018764:	460b      	mov	r3, r1
 8018766:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018768:	2300      	movs	r3, #0
 801876a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801876c:	2300      	movs	r3, #0
 801876e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018776:	7af9      	ldrb	r1, [r7, #11]
 8018778:	683b      	ldr	r3, [r7, #0]
 801877a:	687a      	ldr	r2, [r7, #4]
 801877c:	f7ea fa50 	bl	8002c20 <HAL_PCD_EP_Transmit>
 8018780:	4603      	mov	r3, r0
 8018782:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018784:	7dfb      	ldrb	r3, [r7, #23]
 8018786:	4618      	mov	r0, r3
 8018788:	f000 f852 	bl	8018830 <USBD_Get_USB_Status>
 801878c:	4603      	mov	r3, r0
 801878e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018790:	7dbb      	ldrb	r3, [r7, #22]
}
 8018792:	4618      	mov	r0, r3
 8018794:	3718      	adds	r7, #24
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}

0801879a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801879a:	b580      	push	{r7, lr}
 801879c:	b086      	sub	sp, #24
 801879e:	af00      	add	r7, sp, #0
 80187a0:	60f8      	str	r0, [r7, #12]
 80187a2:	607a      	str	r2, [r7, #4]
 80187a4:	603b      	str	r3, [r7, #0]
 80187a6:	460b      	mov	r3, r1
 80187a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187aa:	2300      	movs	r3, #0
 80187ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187ae:	2300      	movs	r3, #0
 80187b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80187b8:	7af9      	ldrb	r1, [r7, #11]
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	687a      	ldr	r2, [r7, #4]
 80187be:	f7ea f9cd 	bl	8002b5c <HAL_PCD_EP_Receive>
 80187c2:	4603      	mov	r3, r0
 80187c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187c6:	7dfb      	ldrb	r3, [r7, #23]
 80187c8:	4618      	mov	r0, r3
 80187ca:	f000 f831 	bl	8018830 <USBD_Get_USB_Status>
 80187ce:	4603      	mov	r3, r0
 80187d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80187d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	3718      	adds	r7, #24
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}

080187dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b082      	sub	sp, #8
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
 80187e4:	460b      	mov	r3, r1
 80187e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80187ee:	78fa      	ldrb	r2, [r7, #3]
 80187f0:	4611      	mov	r1, r2
 80187f2:	4618      	mov	r0, r3
 80187f4:	f7ea f9fd 	bl	8002bf2 <HAL_PCD_EP_GetRxCount>
 80187f8:	4603      	mov	r3, r0
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3708      	adds	r7, #8
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
	...

08018804 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018804:	b480      	push	{r7}
 8018806:	b083      	sub	sp, #12
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801880c:	4b02      	ldr	r3, [pc, #8]	; (8018818 <USBD_static_malloc+0x14>)
}
 801880e:	4618      	mov	r0, r3
 8018810:	370c      	adds	r7, #12
 8018812:	46bd      	mov	sp, r7
 8018814:	bc80      	pop	{r7}
 8018816:	4770      	bx	lr
 8018818:	2000e4c8 	.word	0x2000e4c8

0801881c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801881c:	b480      	push	{r7}
 801881e:	b083      	sub	sp, #12
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]

}
 8018824:	bf00      	nop
 8018826:	370c      	adds	r7, #12
 8018828:	46bd      	mov	sp, r7
 801882a:	bc80      	pop	{r7}
 801882c:	4770      	bx	lr
	...

08018830 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018830:	b480      	push	{r7}
 8018832:	b085      	sub	sp, #20
 8018834:	af00      	add	r7, sp, #0
 8018836:	4603      	mov	r3, r0
 8018838:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801883a:	2300      	movs	r3, #0
 801883c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801883e:	79fb      	ldrb	r3, [r7, #7]
 8018840:	2b03      	cmp	r3, #3
 8018842:	d817      	bhi.n	8018874 <USBD_Get_USB_Status+0x44>
 8018844:	a201      	add	r2, pc, #4	; (adr r2, 801884c <USBD_Get_USB_Status+0x1c>)
 8018846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801884a:	bf00      	nop
 801884c:	0801885d 	.word	0x0801885d
 8018850:	08018863 	.word	0x08018863
 8018854:	08018869 	.word	0x08018869
 8018858:	0801886f 	.word	0x0801886f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801885c:	2300      	movs	r3, #0
 801885e:	73fb      	strb	r3, [r7, #15]
    break;
 8018860:	e00b      	b.n	801887a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018862:	2303      	movs	r3, #3
 8018864:	73fb      	strb	r3, [r7, #15]
    break;
 8018866:	e008      	b.n	801887a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018868:	2301      	movs	r3, #1
 801886a:	73fb      	strb	r3, [r7, #15]
    break;
 801886c:	e005      	b.n	801887a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801886e:	2303      	movs	r3, #3
 8018870:	73fb      	strb	r3, [r7, #15]
    break;
 8018872:	e002      	b.n	801887a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018874:	2303      	movs	r3, #3
 8018876:	73fb      	strb	r3, [r7, #15]
    break;
 8018878:	bf00      	nop
  }
  return usb_status;
 801887a:	7bfb      	ldrb	r3, [r7, #15]
}
 801887c:	4618      	mov	r0, r3
 801887e:	3714      	adds	r7, #20
 8018880:	46bd      	mov	sp, r7
 8018882:	bc80      	pop	{r7}
 8018884:	4770      	bx	lr
 8018886:	bf00      	nop

08018888 <__sflush_r>:
 8018888:	898a      	ldrh	r2, [r1, #12]
 801888a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801888c:	4605      	mov	r5, r0
 801888e:	0710      	lsls	r0, r2, #28
 8018890:	460c      	mov	r4, r1
 8018892:	d457      	bmi.n	8018944 <__sflush_r+0xbc>
 8018894:	684b      	ldr	r3, [r1, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	dc04      	bgt.n	80188a4 <__sflush_r+0x1c>
 801889a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801889c:	2b00      	cmp	r3, #0
 801889e:	dc01      	bgt.n	80188a4 <__sflush_r+0x1c>
 80188a0:	2000      	movs	r0, #0
 80188a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80188a6:	2e00      	cmp	r6, #0
 80188a8:	d0fa      	beq.n	80188a0 <__sflush_r+0x18>
 80188aa:	2300      	movs	r3, #0
 80188ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80188b0:	682f      	ldr	r7, [r5, #0]
 80188b2:	602b      	str	r3, [r5, #0]
 80188b4:	d032      	beq.n	801891c <__sflush_r+0x94>
 80188b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80188b8:	89a3      	ldrh	r3, [r4, #12]
 80188ba:	075a      	lsls	r2, r3, #29
 80188bc:	d505      	bpl.n	80188ca <__sflush_r+0x42>
 80188be:	6863      	ldr	r3, [r4, #4]
 80188c0:	1ac0      	subs	r0, r0, r3
 80188c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80188c4:	b10b      	cbz	r3, 80188ca <__sflush_r+0x42>
 80188c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80188c8:	1ac0      	subs	r0, r0, r3
 80188ca:	2300      	movs	r3, #0
 80188cc:	4602      	mov	r2, r0
 80188ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80188d0:	6a21      	ldr	r1, [r4, #32]
 80188d2:	4628      	mov	r0, r5
 80188d4:	47b0      	blx	r6
 80188d6:	1c43      	adds	r3, r0, #1
 80188d8:	89a3      	ldrh	r3, [r4, #12]
 80188da:	d106      	bne.n	80188ea <__sflush_r+0x62>
 80188dc:	6829      	ldr	r1, [r5, #0]
 80188de:	291d      	cmp	r1, #29
 80188e0:	d82c      	bhi.n	801893c <__sflush_r+0xb4>
 80188e2:	4a29      	ldr	r2, [pc, #164]	; (8018988 <__sflush_r+0x100>)
 80188e4:	40ca      	lsrs	r2, r1
 80188e6:	07d6      	lsls	r6, r2, #31
 80188e8:	d528      	bpl.n	801893c <__sflush_r+0xb4>
 80188ea:	2200      	movs	r2, #0
 80188ec:	6062      	str	r2, [r4, #4]
 80188ee:	04d9      	lsls	r1, r3, #19
 80188f0:	6922      	ldr	r2, [r4, #16]
 80188f2:	6022      	str	r2, [r4, #0]
 80188f4:	d504      	bpl.n	8018900 <__sflush_r+0x78>
 80188f6:	1c42      	adds	r2, r0, #1
 80188f8:	d101      	bne.n	80188fe <__sflush_r+0x76>
 80188fa:	682b      	ldr	r3, [r5, #0]
 80188fc:	b903      	cbnz	r3, 8018900 <__sflush_r+0x78>
 80188fe:	6560      	str	r0, [r4, #84]	; 0x54
 8018900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018902:	602f      	str	r7, [r5, #0]
 8018904:	2900      	cmp	r1, #0
 8018906:	d0cb      	beq.n	80188a0 <__sflush_r+0x18>
 8018908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801890c:	4299      	cmp	r1, r3
 801890e:	d002      	beq.n	8018916 <__sflush_r+0x8e>
 8018910:	4628      	mov	r0, r5
 8018912:	f000 fa27 	bl	8018d64 <_free_r>
 8018916:	2000      	movs	r0, #0
 8018918:	6360      	str	r0, [r4, #52]	; 0x34
 801891a:	e7c2      	b.n	80188a2 <__sflush_r+0x1a>
 801891c:	6a21      	ldr	r1, [r4, #32]
 801891e:	2301      	movs	r3, #1
 8018920:	4628      	mov	r0, r5
 8018922:	47b0      	blx	r6
 8018924:	1c41      	adds	r1, r0, #1
 8018926:	d1c7      	bne.n	80188b8 <__sflush_r+0x30>
 8018928:	682b      	ldr	r3, [r5, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d0c4      	beq.n	80188b8 <__sflush_r+0x30>
 801892e:	2b1d      	cmp	r3, #29
 8018930:	d001      	beq.n	8018936 <__sflush_r+0xae>
 8018932:	2b16      	cmp	r3, #22
 8018934:	d101      	bne.n	801893a <__sflush_r+0xb2>
 8018936:	602f      	str	r7, [r5, #0]
 8018938:	e7b2      	b.n	80188a0 <__sflush_r+0x18>
 801893a:	89a3      	ldrh	r3, [r4, #12]
 801893c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018940:	81a3      	strh	r3, [r4, #12]
 8018942:	e7ae      	b.n	80188a2 <__sflush_r+0x1a>
 8018944:	690f      	ldr	r7, [r1, #16]
 8018946:	2f00      	cmp	r7, #0
 8018948:	d0aa      	beq.n	80188a0 <__sflush_r+0x18>
 801894a:	0793      	lsls	r3, r2, #30
 801894c:	680e      	ldr	r6, [r1, #0]
 801894e:	bf08      	it	eq
 8018950:	694b      	ldreq	r3, [r1, #20]
 8018952:	600f      	str	r7, [r1, #0]
 8018954:	bf18      	it	ne
 8018956:	2300      	movne	r3, #0
 8018958:	1bf6      	subs	r6, r6, r7
 801895a:	608b      	str	r3, [r1, #8]
 801895c:	2e00      	cmp	r6, #0
 801895e:	dd9f      	ble.n	80188a0 <__sflush_r+0x18>
 8018960:	6a21      	ldr	r1, [r4, #32]
 8018962:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8018966:	4633      	mov	r3, r6
 8018968:	463a      	mov	r2, r7
 801896a:	4628      	mov	r0, r5
 801896c:	47e0      	blx	ip
 801896e:	2800      	cmp	r0, #0
 8018970:	dc06      	bgt.n	8018980 <__sflush_r+0xf8>
 8018972:	89a3      	ldrh	r3, [r4, #12]
 8018974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018978:	81a3      	strh	r3, [r4, #12]
 801897a:	f04f 30ff 	mov.w	r0, #4294967295
 801897e:	e790      	b.n	80188a2 <__sflush_r+0x1a>
 8018980:	4407      	add	r7, r0
 8018982:	1a36      	subs	r6, r6, r0
 8018984:	e7ea      	b.n	801895c <__sflush_r+0xd4>
 8018986:	bf00      	nop
 8018988:	20400001 	.word	0x20400001

0801898c <_fflush_r>:
 801898c:	b538      	push	{r3, r4, r5, lr}
 801898e:	690b      	ldr	r3, [r1, #16]
 8018990:	4605      	mov	r5, r0
 8018992:	460c      	mov	r4, r1
 8018994:	b913      	cbnz	r3, 801899c <_fflush_r+0x10>
 8018996:	2500      	movs	r5, #0
 8018998:	4628      	mov	r0, r5
 801899a:	bd38      	pop	{r3, r4, r5, pc}
 801899c:	b118      	cbz	r0, 80189a6 <_fflush_r+0x1a>
 801899e:	6983      	ldr	r3, [r0, #24]
 80189a0:	b90b      	cbnz	r3, 80189a6 <_fflush_r+0x1a>
 80189a2:	f000 f887 	bl	8018ab4 <__sinit>
 80189a6:	4b14      	ldr	r3, [pc, #80]	; (80189f8 <_fflush_r+0x6c>)
 80189a8:	429c      	cmp	r4, r3
 80189aa:	d11b      	bne.n	80189e4 <_fflush_r+0x58>
 80189ac:	686c      	ldr	r4, [r5, #4]
 80189ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d0ef      	beq.n	8018996 <_fflush_r+0xa>
 80189b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80189b8:	07d0      	lsls	r0, r2, #31
 80189ba:	d404      	bmi.n	80189c6 <_fflush_r+0x3a>
 80189bc:	0599      	lsls	r1, r3, #22
 80189be:	d402      	bmi.n	80189c6 <_fflush_r+0x3a>
 80189c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80189c2:	f000 f93a 	bl	8018c3a <__retarget_lock_acquire_recursive>
 80189c6:	4628      	mov	r0, r5
 80189c8:	4621      	mov	r1, r4
 80189ca:	f7ff ff5d 	bl	8018888 <__sflush_r>
 80189ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80189d0:	07da      	lsls	r2, r3, #31
 80189d2:	4605      	mov	r5, r0
 80189d4:	d4e0      	bmi.n	8018998 <_fflush_r+0xc>
 80189d6:	89a3      	ldrh	r3, [r4, #12]
 80189d8:	059b      	lsls	r3, r3, #22
 80189da:	d4dd      	bmi.n	8018998 <_fflush_r+0xc>
 80189dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80189de:	f000 f92d 	bl	8018c3c <__retarget_lock_release_recursive>
 80189e2:	e7d9      	b.n	8018998 <_fflush_r+0xc>
 80189e4:	4b05      	ldr	r3, [pc, #20]	; (80189fc <_fflush_r+0x70>)
 80189e6:	429c      	cmp	r4, r3
 80189e8:	d101      	bne.n	80189ee <_fflush_r+0x62>
 80189ea:	68ac      	ldr	r4, [r5, #8]
 80189ec:	e7df      	b.n	80189ae <_fflush_r+0x22>
 80189ee:	4b04      	ldr	r3, [pc, #16]	; (8018a00 <_fflush_r+0x74>)
 80189f0:	429c      	cmp	r4, r3
 80189f2:	bf08      	it	eq
 80189f4:	68ec      	ldreq	r4, [r5, #12]
 80189f6:	e7da      	b.n	80189ae <_fflush_r+0x22>
 80189f8:	0801cb30 	.word	0x0801cb30
 80189fc:	0801cb50 	.word	0x0801cb50
 8018a00:	0801cb10 	.word	0x0801cb10

08018a04 <std>:
 8018a04:	2300      	movs	r3, #0
 8018a06:	b510      	push	{r4, lr}
 8018a08:	4604      	mov	r4, r0
 8018a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8018a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a12:	6083      	str	r3, [r0, #8]
 8018a14:	8181      	strh	r1, [r0, #12]
 8018a16:	6643      	str	r3, [r0, #100]	; 0x64
 8018a18:	81c2      	strh	r2, [r0, #14]
 8018a1a:	6183      	str	r3, [r0, #24]
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	2208      	movs	r2, #8
 8018a20:	305c      	adds	r0, #92	; 0x5c
 8018a22:	f000 f997 	bl	8018d54 <memset>
 8018a26:	4b05      	ldr	r3, [pc, #20]	; (8018a3c <std+0x38>)
 8018a28:	6263      	str	r3, [r4, #36]	; 0x24
 8018a2a:	4b05      	ldr	r3, [pc, #20]	; (8018a40 <std+0x3c>)
 8018a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a2e:	4b05      	ldr	r3, [pc, #20]	; (8018a44 <std+0x40>)
 8018a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a32:	4b05      	ldr	r3, [pc, #20]	; (8018a48 <std+0x44>)
 8018a34:	6224      	str	r4, [r4, #32]
 8018a36:	6323      	str	r3, [r4, #48]	; 0x30
 8018a38:	bd10      	pop	{r4, pc}
 8018a3a:	bf00      	nop
 8018a3c:	080190c1 	.word	0x080190c1
 8018a40:	080190e3 	.word	0x080190e3
 8018a44:	0801911b 	.word	0x0801911b
 8018a48:	0801913f 	.word	0x0801913f

08018a4c <_cleanup_r>:
 8018a4c:	4901      	ldr	r1, [pc, #4]	; (8018a54 <_cleanup_r+0x8>)
 8018a4e:	f000 b8af 	b.w	8018bb0 <_fwalk_reent>
 8018a52:	bf00      	nop
 8018a54:	0801898d 	.word	0x0801898d

08018a58 <__sfmoreglue>:
 8018a58:	b570      	push	{r4, r5, r6, lr}
 8018a5a:	2268      	movs	r2, #104	; 0x68
 8018a5c:	1e4d      	subs	r5, r1, #1
 8018a5e:	4355      	muls	r5, r2
 8018a60:	460e      	mov	r6, r1
 8018a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018a66:	f000 f9e7 	bl	8018e38 <_malloc_r>
 8018a6a:	4604      	mov	r4, r0
 8018a6c:	b140      	cbz	r0, 8018a80 <__sfmoreglue+0x28>
 8018a6e:	2100      	movs	r1, #0
 8018a70:	e9c0 1600 	strd	r1, r6, [r0]
 8018a74:	300c      	adds	r0, #12
 8018a76:	60a0      	str	r0, [r4, #8]
 8018a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018a7c:	f000 f96a 	bl	8018d54 <memset>
 8018a80:	4620      	mov	r0, r4
 8018a82:	bd70      	pop	{r4, r5, r6, pc}

08018a84 <__sfp_lock_acquire>:
 8018a84:	4801      	ldr	r0, [pc, #4]	; (8018a8c <__sfp_lock_acquire+0x8>)
 8018a86:	f000 b8d8 	b.w	8018c3a <__retarget_lock_acquire_recursive>
 8018a8a:	bf00      	nop
 8018a8c:	2000e6e9 	.word	0x2000e6e9

08018a90 <__sfp_lock_release>:
 8018a90:	4801      	ldr	r0, [pc, #4]	; (8018a98 <__sfp_lock_release+0x8>)
 8018a92:	f000 b8d3 	b.w	8018c3c <__retarget_lock_release_recursive>
 8018a96:	bf00      	nop
 8018a98:	2000e6e9 	.word	0x2000e6e9

08018a9c <__sinit_lock_acquire>:
 8018a9c:	4801      	ldr	r0, [pc, #4]	; (8018aa4 <__sinit_lock_acquire+0x8>)
 8018a9e:	f000 b8cc 	b.w	8018c3a <__retarget_lock_acquire_recursive>
 8018aa2:	bf00      	nop
 8018aa4:	2000e6ea 	.word	0x2000e6ea

08018aa8 <__sinit_lock_release>:
 8018aa8:	4801      	ldr	r0, [pc, #4]	; (8018ab0 <__sinit_lock_release+0x8>)
 8018aaa:	f000 b8c7 	b.w	8018c3c <__retarget_lock_release_recursive>
 8018aae:	bf00      	nop
 8018ab0:	2000e6ea 	.word	0x2000e6ea

08018ab4 <__sinit>:
 8018ab4:	b510      	push	{r4, lr}
 8018ab6:	4604      	mov	r4, r0
 8018ab8:	f7ff fff0 	bl	8018a9c <__sinit_lock_acquire>
 8018abc:	69a3      	ldr	r3, [r4, #24]
 8018abe:	b11b      	cbz	r3, 8018ac8 <__sinit+0x14>
 8018ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ac4:	f7ff bff0 	b.w	8018aa8 <__sinit_lock_release>
 8018ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018acc:	6523      	str	r3, [r4, #80]	; 0x50
 8018ace:	4b13      	ldr	r3, [pc, #76]	; (8018b1c <__sinit+0x68>)
 8018ad0:	4a13      	ldr	r2, [pc, #76]	; (8018b20 <__sinit+0x6c>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8018ad6:	42a3      	cmp	r3, r4
 8018ad8:	bf04      	itt	eq
 8018ada:	2301      	moveq	r3, #1
 8018adc:	61a3      	streq	r3, [r4, #24]
 8018ade:	4620      	mov	r0, r4
 8018ae0:	f000 f820 	bl	8018b24 <__sfp>
 8018ae4:	6060      	str	r0, [r4, #4]
 8018ae6:	4620      	mov	r0, r4
 8018ae8:	f000 f81c 	bl	8018b24 <__sfp>
 8018aec:	60a0      	str	r0, [r4, #8]
 8018aee:	4620      	mov	r0, r4
 8018af0:	f000 f818 	bl	8018b24 <__sfp>
 8018af4:	2200      	movs	r2, #0
 8018af6:	60e0      	str	r0, [r4, #12]
 8018af8:	2104      	movs	r1, #4
 8018afa:	6860      	ldr	r0, [r4, #4]
 8018afc:	f7ff ff82 	bl	8018a04 <std>
 8018b00:	68a0      	ldr	r0, [r4, #8]
 8018b02:	2201      	movs	r2, #1
 8018b04:	2109      	movs	r1, #9
 8018b06:	f7ff ff7d 	bl	8018a04 <std>
 8018b0a:	68e0      	ldr	r0, [r4, #12]
 8018b0c:	2202      	movs	r2, #2
 8018b0e:	2112      	movs	r1, #18
 8018b10:	f7ff ff78 	bl	8018a04 <std>
 8018b14:	2301      	movs	r3, #1
 8018b16:	61a3      	str	r3, [r4, #24]
 8018b18:	e7d2      	b.n	8018ac0 <__sinit+0xc>
 8018b1a:	bf00      	nop
 8018b1c:	0801cb70 	.word	0x0801cb70
 8018b20:	08018a4d 	.word	0x08018a4d

08018b24 <__sfp>:
 8018b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b26:	4607      	mov	r7, r0
 8018b28:	f7ff ffac 	bl	8018a84 <__sfp_lock_acquire>
 8018b2c:	4b1e      	ldr	r3, [pc, #120]	; (8018ba8 <__sfp+0x84>)
 8018b2e:	681e      	ldr	r6, [r3, #0]
 8018b30:	69b3      	ldr	r3, [r6, #24]
 8018b32:	b913      	cbnz	r3, 8018b3a <__sfp+0x16>
 8018b34:	4630      	mov	r0, r6
 8018b36:	f7ff ffbd 	bl	8018ab4 <__sinit>
 8018b3a:	3648      	adds	r6, #72	; 0x48
 8018b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018b40:	3b01      	subs	r3, #1
 8018b42:	d503      	bpl.n	8018b4c <__sfp+0x28>
 8018b44:	6833      	ldr	r3, [r6, #0]
 8018b46:	b30b      	cbz	r3, 8018b8c <__sfp+0x68>
 8018b48:	6836      	ldr	r6, [r6, #0]
 8018b4a:	e7f7      	b.n	8018b3c <__sfp+0x18>
 8018b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018b50:	b9d5      	cbnz	r5, 8018b88 <__sfp+0x64>
 8018b52:	4b16      	ldr	r3, [pc, #88]	; (8018bac <__sfp+0x88>)
 8018b54:	60e3      	str	r3, [r4, #12]
 8018b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8018b5c:	f000 f86c 	bl	8018c38 <__retarget_lock_init_recursive>
 8018b60:	f7ff ff96 	bl	8018a90 <__sfp_lock_release>
 8018b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018b6c:	6025      	str	r5, [r4, #0]
 8018b6e:	61a5      	str	r5, [r4, #24]
 8018b70:	2208      	movs	r2, #8
 8018b72:	4629      	mov	r1, r5
 8018b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018b78:	f000 f8ec 	bl	8018d54 <memset>
 8018b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018b84:	4620      	mov	r0, r4
 8018b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b88:	3468      	adds	r4, #104	; 0x68
 8018b8a:	e7d9      	b.n	8018b40 <__sfp+0x1c>
 8018b8c:	2104      	movs	r1, #4
 8018b8e:	4638      	mov	r0, r7
 8018b90:	f7ff ff62 	bl	8018a58 <__sfmoreglue>
 8018b94:	4604      	mov	r4, r0
 8018b96:	6030      	str	r0, [r6, #0]
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	d1d5      	bne.n	8018b48 <__sfp+0x24>
 8018b9c:	f7ff ff78 	bl	8018a90 <__sfp_lock_release>
 8018ba0:	230c      	movs	r3, #12
 8018ba2:	603b      	str	r3, [r7, #0]
 8018ba4:	e7ee      	b.n	8018b84 <__sfp+0x60>
 8018ba6:	bf00      	nop
 8018ba8:	0801cb70 	.word	0x0801cb70
 8018bac:	ffff0001 	.word	0xffff0001

08018bb0 <_fwalk_reent>:
 8018bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bb4:	4606      	mov	r6, r0
 8018bb6:	4688      	mov	r8, r1
 8018bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018bbc:	2700      	movs	r7, #0
 8018bbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018bc2:	f1b9 0901 	subs.w	r9, r9, #1
 8018bc6:	d505      	bpl.n	8018bd4 <_fwalk_reent+0x24>
 8018bc8:	6824      	ldr	r4, [r4, #0]
 8018bca:	2c00      	cmp	r4, #0
 8018bcc:	d1f7      	bne.n	8018bbe <_fwalk_reent+0xe>
 8018bce:	4638      	mov	r0, r7
 8018bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bd4:	89ab      	ldrh	r3, [r5, #12]
 8018bd6:	2b01      	cmp	r3, #1
 8018bd8:	d907      	bls.n	8018bea <_fwalk_reent+0x3a>
 8018bda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018bde:	3301      	adds	r3, #1
 8018be0:	d003      	beq.n	8018bea <_fwalk_reent+0x3a>
 8018be2:	4629      	mov	r1, r5
 8018be4:	4630      	mov	r0, r6
 8018be6:	47c0      	blx	r8
 8018be8:	4307      	orrs	r7, r0
 8018bea:	3568      	adds	r5, #104	; 0x68
 8018bec:	e7e9      	b.n	8018bc2 <_fwalk_reent+0x12>
	...

08018bf0 <__libc_init_array>:
 8018bf0:	b570      	push	{r4, r5, r6, lr}
 8018bf2:	4d0d      	ldr	r5, [pc, #52]	; (8018c28 <__libc_init_array+0x38>)
 8018bf4:	4c0d      	ldr	r4, [pc, #52]	; (8018c2c <__libc_init_array+0x3c>)
 8018bf6:	1b64      	subs	r4, r4, r5
 8018bf8:	10a4      	asrs	r4, r4, #2
 8018bfa:	2600      	movs	r6, #0
 8018bfc:	42a6      	cmp	r6, r4
 8018bfe:	d109      	bne.n	8018c14 <__libc_init_array+0x24>
 8018c00:	4d0b      	ldr	r5, [pc, #44]	; (8018c30 <__libc_init_array+0x40>)
 8018c02:	4c0c      	ldr	r4, [pc, #48]	; (8018c34 <__libc_init_array+0x44>)
 8018c04:	f000 ff3c 	bl	8019a80 <_init>
 8018c08:	1b64      	subs	r4, r4, r5
 8018c0a:	10a4      	asrs	r4, r4, #2
 8018c0c:	2600      	movs	r6, #0
 8018c0e:	42a6      	cmp	r6, r4
 8018c10:	d105      	bne.n	8018c1e <__libc_init_array+0x2e>
 8018c12:	bd70      	pop	{r4, r5, r6, pc}
 8018c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c18:	4798      	blx	r3
 8018c1a:	3601      	adds	r6, #1
 8018c1c:	e7ee      	b.n	8018bfc <__libc_init_array+0xc>
 8018c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c22:	4798      	blx	r3
 8018c24:	3601      	adds	r6, #1
 8018c26:	e7f2      	b.n	8018c0e <__libc_init_array+0x1e>
 8018c28:	0801cc60 	.word	0x0801cc60
 8018c2c:	0801cc60 	.word	0x0801cc60
 8018c30:	0801cc60 	.word	0x0801cc60
 8018c34:	0801cc64 	.word	0x0801cc64

08018c38 <__retarget_lock_init_recursive>:
 8018c38:	4770      	bx	lr

08018c3a <__retarget_lock_acquire_recursive>:
 8018c3a:	4770      	bx	lr

08018c3c <__retarget_lock_release_recursive>:
 8018c3c:	4770      	bx	lr

08018c3e <__swhatbuf_r>:
 8018c3e:	b570      	push	{r4, r5, r6, lr}
 8018c40:	460e      	mov	r6, r1
 8018c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c46:	2900      	cmp	r1, #0
 8018c48:	b096      	sub	sp, #88	; 0x58
 8018c4a:	4614      	mov	r4, r2
 8018c4c:	461d      	mov	r5, r3
 8018c4e:	da08      	bge.n	8018c62 <__swhatbuf_r+0x24>
 8018c50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018c54:	2200      	movs	r2, #0
 8018c56:	602a      	str	r2, [r5, #0]
 8018c58:	061a      	lsls	r2, r3, #24
 8018c5a:	d410      	bmi.n	8018c7e <__swhatbuf_r+0x40>
 8018c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c60:	e00e      	b.n	8018c80 <__swhatbuf_r+0x42>
 8018c62:	466a      	mov	r2, sp
 8018c64:	f000 fb82 	bl	801936c <_fstat_r>
 8018c68:	2800      	cmp	r0, #0
 8018c6a:	dbf1      	blt.n	8018c50 <__swhatbuf_r+0x12>
 8018c6c:	9a01      	ldr	r2, [sp, #4]
 8018c6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018c72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018c76:	425a      	negs	r2, r3
 8018c78:	415a      	adcs	r2, r3
 8018c7a:	602a      	str	r2, [r5, #0]
 8018c7c:	e7ee      	b.n	8018c5c <__swhatbuf_r+0x1e>
 8018c7e:	2340      	movs	r3, #64	; 0x40
 8018c80:	2000      	movs	r0, #0
 8018c82:	6023      	str	r3, [r4, #0]
 8018c84:	b016      	add	sp, #88	; 0x58
 8018c86:	bd70      	pop	{r4, r5, r6, pc}

08018c88 <__smakebuf_r>:
 8018c88:	898b      	ldrh	r3, [r1, #12]
 8018c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c8c:	079d      	lsls	r5, r3, #30
 8018c8e:	4606      	mov	r6, r0
 8018c90:	460c      	mov	r4, r1
 8018c92:	d507      	bpl.n	8018ca4 <__smakebuf_r+0x1c>
 8018c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c98:	6023      	str	r3, [r4, #0]
 8018c9a:	6123      	str	r3, [r4, #16]
 8018c9c:	2301      	movs	r3, #1
 8018c9e:	6163      	str	r3, [r4, #20]
 8018ca0:	b002      	add	sp, #8
 8018ca2:	bd70      	pop	{r4, r5, r6, pc}
 8018ca4:	ab01      	add	r3, sp, #4
 8018ca6:	466a      	mov	r2, sp
 8018ca8:	f7ff ffc9 	bl	8018c3e <__swhatbuf_r>
 8018cac:	9900      	ldr	r1, [sp, #0]
 8018cae:	4605      	mov	r5, r0
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	f000 f8c1 	bl	8018e38 <_malloc_r>
 8018cb6:	b948      	cbnz	r0, 8018ccc <__smakebuf_r+0x44>
 8018cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cbc:	059a      	lsls	r2, r3, #22
 8018cbe:	d4ef      	bmi.n	8018ca0 <__smakebuf_r+0x18>
 8018cc0:	f023 0303 	bic.w	r3, r3, #3
 8018cc4:	f043 0302 	orr.w	r3, r3, #2
 8018cc8:	81a3      	strh	r3, [r4, #12]
 8018cca:	e7e3      	b.n	8018c94 <__smakebuf_r+0xc>
 8018ccc:	4b0d      	ldr	r3, [pc, #52]	; (8018d04 <__smakebuf_r+0x7c>)
 8018cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8018cd0:	89a3      	ldrh	r3, [r4, #12]
 8018cd2:	6020      	str	r0, [r4, #0]
 8018cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018cd8:	81a3      	strh	r3, [r4, #12]
 8018cda:	9b00      	ldr	r3, [sp, #0]
 8018cdc:	6163      	str	r3, [r4, #20]
 8018cde:	9b01      	ldr	r3, [sp, #4]
 8018ce0:	6120      	str	r0, [r4, #16]
 8018ce2:	b15b      	cbz	r3, 8018cfc <__smakebuf_r+0x74>
 8018ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ce8:	4630      	mov	r0, r6
 8018cea:	f000 fb51 	bl	8019390 <_isatty_r>
 8018cee:	b128      	cbz	r0, 8018cfc <__smakebuf_r+0x74>
 8018cf0:	89a3      	ldrh	r3, [r4, #12]
 8018cf2:	f023 0303 	bic.w	r3, r3, #3
 8018cf6:	f043 0301 	orr.w	r3, r3, #1
 8018cfa:	81a3      	strh	r3, [r4, #12]
 8018cfc:	89a0      	ldrh	r0, [r4, #12]
 8018cfe:	4305      	orrs	r5, r0
 8018d00:	81a5      	strh	r5, [r4, #12]
 8018d02:	e7cd      	b.n	8018ca0 <__smakebuf_r+0x18>
 8018d04:	08018a4d 	.word	0x08018a4d

08018d08 <malloc>:
 8018d08:	4b02      	ldr	r3, [pc, #8]	; (8018d14 <malloc+0xc>)
 8018d0a:	4601      	mov	r1, r0
 8018d0c:	6818      	ldr	r0, [r3, #0]
 8018d0e:	f000 b893 	b.w	8018e38 <_malloc_r>
 8018d12:	bf00      	nop
 8018d14:	20000110 	.word	0x20000110

08018d18 <memcmp>:
 8018d18:	b510      	push	{r4, lr}
 8018d1a:	3901      	subs	r1, #1
 8018d1c:	4402      	add	r2, r0
 8018d1e:	4290      	cmp	r0, r2
 8018d20:	d101      	bne.n	8018d26 <memcmp+0xe>
 8018d22:	2000      	movs	r0, #0
 8018d24:	e005      	b.n	8018d32 <memcmp+0x1a>
 8018d26:	7803      	ldrb	r3, [r0, #0]
 8018d28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018d2c:	42a3      	cmp	r3, r4
 8018d2e:	d001      	beq.n	8018d34 <memcmp+0x1c>
 8018d30:	1b18      	subs	r0, r3, r4
 8018d32:	bd10      	pop	{r4, pc}
 8018d34:	3001      	adds	r0, #1
 8018d36:	e7f2      	b.n	8018d1e <memcmp+0x6>

08018d38 <memcpy>:
 8018d38:	440a      	add	r2, r1
 8018d3a:	4291      	cmp	r1, r2
 8018d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8018d40:	d100      	bne.n	8018d44 <memcpy+0xc>
 8018d42:	4770      	bx	lr
 8018d44:	b510      	push	{r4, lr}
 8018d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018d4e:	4291      	cmp	r1, r2
 8018d50:	d1f9      	bne.n	8018d46 <memcpy+0xe>
 8018d52:	bd10      	pop	{r4, pc}

08018d54 <memset>:
 8018d54:	4402      	add	r2, r0
 8018d56:	4603      	mov	r3, r0
 8018d58:	4293      	cmp	r3, r2
 8018d5a:	d100      	bne.n	8018d5e <memset+0xa>
 8018d5c:	4770      	bx	lr
 8018d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8018d62:	e7f9      	b.n	8018d58 <memset+0x4>

08018d64 <_free_r>:
 8018d64:	b538      	push	{r3, r4, r5, lr}
 8018d66:	4605      	mov	r5, r0
 8018d68:	2900      	cmp	r1, #0
 8018d6a:	d041      	beq.n	8018df0 <_free_r+0x8c>
 8018d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d70:	1f0c      	subs	r4, r1, #4
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	bfb8      	it	lt
 8018d76:	18e4      	addlt	r4, r4, r3
 8018d78:	f000 fb2c 	bl	80193d4 <__malloc_lock>
 8018d7c:	4a1d      	ldr	r2, [pc, #116]	; (8018df4 <_free_r+0x90>)
 8018d7e:	6813      	ldr	r3, [r2, #0]
 8018d80:	b933      	cbnz	r3, 8018d90 <_free_r+0x2c>
 8018d82:	6063      	str	r3, [r4, #4]
 8018d84:	6014      	str	r4, [r2, #0]
 8018d86:	4628      	mov	r0, r5
 8018d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d8c:	f000 bb28 	b.w	80193e0 <__malloc_unlock>
 8018d90:	42a3      	cmp	r3, r4
 8018d92:	d908      	bls.n	8018da6 <_free_r+0x42>
 8018d94:	6820      	ldr	r0, [r4, #0]
 8018d96:	1821      	adds	r1, r4, r0
 8018d98:	428b      	cmp	r3, r1
 8018d9a:	bf01      	itttt	eq
 8018d9c:	6819      	ldreq	r1, [r3, #0]
 8018d9e:	685b      	ldreq	r3, [r3, #4]
 8018da0:	1809      	addeq	r1, r1, r0
 8018da2:	6021      	streq	r1, [r4, #0]
 8018da4:	e7ed      	b.n	8018d82 <_free_r+0x1e>
 8018da6:	461a      	mov	r2, r3
 8018da8:	685b      	ldr	r3, [r3, #4]
 8018daa:	b10b      	cbz	r3, 8018db0 <_free_r+0x4c>
 8018dac:	42a3      	cmp	r3, r4
 8018dae:	d9fa      	bls.n	8018da6 <_free_r+0x42>
 8018db0:	6811      	ldr	r1, [r2, #0]
 8018db2:	1850      	adds	r0, r2, r1
 8018db4:	42a0      	cmp	r0, r4
 8018db6:	d10b      	bne.n	8018dd0 <_free_r+0x6c>
 8018db8:	6820      	ldr	r0, [r4, #0]
 8018dba:	4401      	add	r1, r0
 8018dbc:	1850      	adds	r0, r2, r1
 8018dbe:	4283      	cmp	r3, r0
 8018dc0:	6011      	str	r1, [r2, #0]
 8018dc2:	d1e0      	bne.n	8018d86 <_free_r+0x22>
 8018dc4:	6818      	ldr	r0, [r3, #0]
 8018dc6:	685b      	ldr	r3, [r3, #4]
 8018dc8:	6053      	str	r3, [r2, #4]
 8018dca:	4401      	add	r1, r0
 8018dcc:	6011      	str	r1, [r2, #0]
 8018dce:	e7da      	b.n	8018d86 <_free_r+0x22>
 8018dd0:	d902      	bls.n	8018dd8 <_free_r+0x74>
 8018dd2:	230c      	movs	r3, #12
 8018dd4:	602b      	str	r3, [r5, #0]
 8018dd6:	e7d6      	b.n	8018d86 <_free_r+0x22>
 8018dd8:	6820      	ldr	r0, [r4, #0]
 8018dda:	1821      	adds	r1, r4, r0
 8018ddc:	428b      	cmp	r3, r1
 8018dde:	bf04      	itt	eq
 8018de0:	6819      	ldreq	r1, [r3, #0]
 8018de2:	685b      	ldreq	r3, [r3, #4]
 8018de4:	6063      	str	r3, [r4, #4]
 8018de6:	bf04      	itt	eq
 8018de8:	1809      	addeq	r1, r1, r0
 8018dea:	6021      	streq	r1, [r4, #0]
 8018dec:	6054      	str	r4, [r2, #4]
 8018dee:	e7ca      	b.n	8018d86 <_free_r+0x22>
 8018df0:	bd38      	pop	{r3, r4, r5, pc}
 8018df2:	bf00      	nop
 8018df4:	2000e6ec 	.word	0x2000e6ec

08018df8 <sbrk_aligned>:
 8018df8:	b570      	push	{r4, r5, r6, lr}
 8018dfa:	4e0e      	ldr	r6, [pc, #56]	; (8018e34 <sbrk_aligned+0x3c>)
 8018dfc:	460c      	mov	r4, r1
 8018dfe:	6831      	ldr	r1, [r6, #0]
 8018e00:	4605      	mov	r5, r0
 8018e02:	b911      	cbnz	r1, 8018e0a <sbrk_aligned+0x12>
 8018e04:	f000 f94c 	bl	80190a0 <_sbrk_r>
 8018e08:	6030      	str	r0, [r6, #0]
 8018e0a:	4621      	mov	r1, r4
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	f000 f947 	bl	80190a0 <_sbrk_r>
 8018e12:	1c43      	adds	r3, r0, #1
 8018e14:	d00a      	beq.n	8018e2c <sbrk_aligned+0x34>
 8018e16:	1cc4      	adds	r4, r0, #3
 8018e18:	f024 0403 	bic.w	r4, r4, #3
 8018e1c:	42a0      	cmp	r0, r4
 8018e1e:	d007      	beq.n	8018e30 <sbrk_aligned+0x38>
 8018e20:	1a21      	subs	r1, r4, r0
 8018e22:	4628      	mov	r0, r5
 8018e24:	f000 f93c 	bl	80190a0 <_sbrk_r>
 8018e28:	3001      	adds	r0, #1
 8018e2a:	d101      	bne.n	8018e30 <sbrk_aligned+0x38>
 8018e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8018e30:	4620      	mov	r0, r4
 8018e32:	bd70      	pop	{r4, r5, r6, pc}
 8018e34:	2000e6f0 	.word	0x2000e6f0

08018e38 <_malloc_r>:
 8018e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e3c:	1ccd      	adds	r5, r1, #3
 8018e3e:	f025 0503 	bic.w	r5, r5, #3
 8018e42:	3508      	adds	r5, #8
 8018e44:	2d0c      	cmp	r5, #12
 8018e46:	bf38      	it	cc
 8018e48:	250c      	movcc	r5, #12
 8018e4a:	2d00      	cmp	r5, #0
 8018e4c:	4607      	mov	r7, r0
 8018e4e:	db01      	blt.n	8018e54 <_malloc_r+0x1c>
 8018e50:	42a9      	cmp	r1, r5
 8018e52:	d905      	bls.n	8018e60 <_malloc_r+0x28>
 8018e54:	230c      	movs	r3, #12
 8018e56:	603b      	str	r3, [r7, #0]
 8018e58:	2600      	movs	r6, #0
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e60:	4e2e      	ldr	r6, [pc, #184]	; (8018f1c <_malloc_r+0xe4>)
 8018e62:	f000 fab7 	bl	80193d4 <__malloc_lock>
 8018e66:	6833      	ldr	r3, [r6, #0]
 8018e68:	461c      	mov	r4, r3
 8018e6a:	bb34      	cbnz	r4, 8018eba <_malloc_r+0x82>
 8018e6c:	4629      	mov	r1, r5
 8018e6e:	4638      	mov	r0, r7
 8018e70:	f7ff ffc2 	bl	8018df8 <sbrk_aligned>
 8018e74:	1c43      	adds	r3, r0, #1
 8018e76:	4604      	mov	r4, r0
 8018e78:	d14d      	bne.n	8018f16 <_malloc_r+0xde>
 8018e7a:	6834      	ldr	r4, [r6, #0]
 8018e7c:	4626      	mov	r6, r4
 8018e7e:	2e00      	cmp	r6, #0
 8018e80:	d140      	bne.n	8018f04 <_malloc_r+0xcc>
 8018e82:	6823      	ldr	r3, [r4, #0]
 8018e84:	4631      	mov	r1, r6
 8018e86:	4638      	mov	r0, r7
 8018e88:	eb04 0803 	add.w	r8, r4, r3
 8018e8c:	f000 f908 	bl	80190a0 <_sbrk_r>
 8018e90:	4580      	cmp	r8, r0
 8018e92:	d13a      	bne.n	8018f0a <_malloc_r+0xd2>
 8018e94:	6821      	ldr	r1, [r4, #0]
 8018e96:	3503      	adds	r5, #3
 8018e98:	1a6d      	subs	r5, r5, r1
 8018e9a:	f025 0503 	bic.w	r5, r5, #3
 8018e9e:	3508      	adds	r5, #8
 8018ea0:	2d0c      	cmp	r5, #12
 8018ea2:	bf38      	it	cc
 8018ea4:	250c      	movcc	r5, #12
 8018ea6:	4629      	mov	r1, r5
 8018ea8:	4638      	mov	r0, r7
 8018eaa:	f7ff ffa5 	bl	8018df8 <sbrk_aligned>
 8018eae:	3001      	adds	r0, #1
 8018eb0:	d02b      	beq.n	8018f0a <_malloc_r+0xd2>
 8018eb2:	6823      	ldr	r3, [r4, #0]
 8018eb4:	442b      	add	r3, r5
 8018eb6:	6023      	str	r3, [r4, #0]
 8018eb8:	e00e      	b.n	8018ed8 <_malloc_r+0xa0>
 8018eba:	6822      	ldr	r2, [r4, #0]
 8018ebc:	1b52      	subs	r2, r2, r5
 8018ebe:	d41e      	bmi.n	8018efe <_malloc_r+0xc6>
 8018ec0:	2a0b      	cmp	r2, #11
 8018ec2:	d916      	bls.n	8018ef2 <_malloc_r+0xba>
 8018ec4:	1961      	adds	r1, r4, r5
 8018ec6:	42a3      	cmp	r3, r4
 8018ec8:	6025      	str	r5, [r4, #0]
 8018eca:	bf18      	it	ne
 8018ecc:	6059      	strne	r1, [r3, #4]
 8018ece:	6863      	ldr	r3, [r4, #4]
 8018ed0:	bf08      	it	eq
 8018ed2:	6031      	streq	r1, [r6, #0]
 8018ed4:	5162      	str	r2, [r4, r5]
 8018ed6:	604b      	str	r3, [r1, #4]
 8018ed8:	4638      	mov	r0, r7
 8018eda:	f104 060b 	add.w	r6, r4, #11
 8018ede:	f000 fa7f 	bl	80193e0 <__malloc_unlock>
 8018ee2:	f026 0607 	bic.w	r6, r6, #7
 8018ee6:	1d23      	adds	r3, r4, #4
 8018ee8:	1af2      	subs	r2, r6, r3
 8018eea:	d0b6      	beq.n	8018e5a <_malloc_r+0x22>
 8018eec:	1b9b      	subs	r3, r3, r6
 8018eee:	50a3      	str	r3, [r4, r2]
 8018ef0:	e7b3      	b.n	8018e5a <_malloc_r+0x22>
 8018ef2:	6862      	ldr	r2, [r4, #4]
 8018ef4:	42a3      	cmp	r3, r4
 8018ef6:	bf0c      	ite	eq
 8018ef8:	6032      	streq	r2, [r6, #0]
 8018efa:	605a      	strne	r2, [r3, #4]
 8018efc:	e7ec      	b.n	8018ed8 <_malloc_r+0xa0>
 8018efe:	4623      	mov	r3, r4
 8018f00:	6864      	ldr	r4, [r4, #4]
 8018f02:	e7b2      	b.n	8018e6a <_malloc_r+0x32>
 8018f04:	4634      	mov	r4, r6
 8018f06:	6876      	ldr	r6, [r6, #4]
 8018f08:	e7b9      	b.n	8018e7e <_malloc_r+0x46>
 8018f0a:	230c      	movs	r3, #12
 8018f0c:	603b      	str	r3, [r7, #0]
 8018f0e:	4638      	mov	r0, r7
 8018f10:	f000 fa66 	bl	80193e0 <__malloc_unlock>
 8018f14:	e7a1      	b.n	8018e5a <_malloc_r+0x22>
 8018f16:	6025      	str	r5, [r4, #0]
 8018f18:	e7de      	b.n	8018ed8 <_malloc_r+0xa0>
 8018f1a:	bf00      	nop
 8018f1c:	2000e6ec 	.word	0x2000e6ec

08018f20 <iprintf>:
 8018f20:	b40f      	push	{r0, r1, r2, r3}
 8018f22:	4b0a      	ldr	r3, [pc, #40]	; (8018f4c <iprintf+0x2c>)
 8018f24:	b513      	push	{r0, r1, r4, lr}
 8018f26:	681c      	ldr	r4, [r3, #0]
 8018f28:	b124      	cbz	r4, 8018f34 <iprintf+0x14>
 8018f2a:	69a3      	ldr	r3, [r4, #24]
 8018f2c:	b913      	cbnz	r3, 8018f34 <iprintf+0x14>
 8018f2e:	4620      	mov	r0, r4
 8018f30:	f7ff fdc0 	bl	8018ab4 <__sinit>
 8018f34:	ab05      	add	r3, sp, #20
 8018f36:	9a04      	ldr	r2, [sp, #16]
 8018f38:	68a1      	ldr	r1, [r4, #8]
 8018f3a:	9301      	str	r3, [sp, #4]
 8018f3c:	4620      	mov	r0, r4
 8018f3e:	f000 fa7d 	bl	801943c <_vfiprintf_r>
 8018f42:	b002      	add	sp, #8
 8018f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f48:	b004      	add	sp, #16
 8018f4a:	4770      	bx	lr
 8018f4c:	20000110 	.word	0x20000110

08018f50 <rand>:
 8018f50:	4b16      	ldr	r3, [pc, #88]	; (8018fac <rand+0x5c>)
 8018f52:	b510      	push	{r4, lr}
 8018f54:	681c      	ldr	r4, [r3, #0]
 8018f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018f58:	b9b3      	cbnz	r3, 8018f88 <rand+0x38>
 8018f5a:	2018      	movs	r0, #24
 8018f5c:	f7ff fed4 	bl	8018d08 <malloc>
 8018f60:	4602      	mov	r2, r0
 8018f62:	63a0      	str	r0, [r4, #56]	; 0x38
 8018f64:	b920      	cbnz	r0, 8018f70 <rand+0x20>
 8018f66:	4b12      	ldr	r3, [pc, #72]	; (8018fb0 <rand+0x60>)
 8018f68:	4812      	ldr	r0, [pc, #72]	; (8018fb4 <rand+0x64>)
 8018f6a:	214e      	movs	r1, #78	; 0x4e
 8018f6c:	f000 f9be 	bl	80192ec <__assert_func>
 8018f70:	4911      	ldr	r1, [pc, #68]	; (8018fb8 <rand+0x68>)
 8018f72:	4b12      	ldr	r3, [pc, #72]	; (8018fbc <rand+0x6c>)
 8018f74:	e9c0 1300 	strd	r1, r3, [r0]
 8018f78:	4b11      	ldr	r3, [pc, #68]	; (8018fc0 <rand+0x70>)
 8018f7a:	6083      	str	r3, [r0, #8]
 8018f7c:	230b      	movs	r3, #11
 8018f7e:	8183      	strh	r3, [r0, #12]
 8018f80:	2100      	movs	r1, #0
 8018f82:	2001      	movs	r0, #1
 8018f84:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018f88:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018f8a:	4a0e      	ldr	r2, [pc, #56]	; (8018fc4 <rand+0x74>)
 8018f8c:	6920      	ldr	r0, [r4, #16]
 8018f8e:	6963      	ldr	r3, [r4, #20]
 8018f90:	490d      	ldr	r1, [pc, #52]	; (8018fc8 <rand+0x78>)
 8018f92:	4342      	muls	r2, r0
 8018f94:	fb01 2203 	mla	r2, r1, r3, r2
 8018f98:	fba0 0101 	umull	r0, r1, r0, r1
 8018f9c:	1c43      	adds	r3, r0, #1
 8018f9e:	eb42 0001 	adc.w	r0, r2, r1
 8018fa2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018fa6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018faa:	bd10      	pop	{r4, pc}
 8018fac:	20000110 	.word	0x20000110
 8018fb0:	0801cb74 	.word	0x0801cb74
 8018fb4:	0801cb8b 	.word	0x0801cb8b
 8018fb8:	abcd330e 	.word	0xabcd330e
 8018fbc:	e66d1234 	.word	0xe66d1234
 8018fc0:	0005deec 	.word	0x0005deec
 8018fc4:	5851f42d 	.word	0x5851f42d
 8018fc8:	4c957f2d 	.word	0x4c957f2d

08018fcc <cleanup_glue>:
 8018fcc:	b538      	push	{r3, r4, r5, lr}
 8018fce:	460c      	mov	r4, r1
 8018fd0:	6809      	ldr	r1, [r1, #0]
 8018fd2:	4605      	mov	r5, r0
 8018fd4:	b109      	cbz	r1, 8018fda <cleanup_glue+0xe>
 8018fd6:	f7ff fff9 	bl	8018fcc <cleanup_glue>
 8018fda:	4621      	mov	r1, r4
 8018fdc:	4628      	mov	r0, r5
 8018fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018fe2:	f7ff bebf 	b.w	8018d64 <_free_r>
	...

08018fe8 <_reclaim_reent>:
 8018fe8:	4b2c      	ldr	r3, [pc, #176]	; (801909c <_reclaim_reent+0xb4>)
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	4283      	cmp	r3, r0
 8018fee:	b570      	push	{r4, r5, r6, lr}
 8018ff0:	4604      	mov	r4, r0
 8018ff2:	d051      	beq.n	8019098 <_reclaim_reent+0xb0>
 8018ff4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018ff6:	b143      	cbz	r3, 801900a <_reclaim_reent+0x22>
 8018ff8:	68db      	ldr	r3, [r3, #12]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d14a      	bne.n	8019094 <_reclaim_reent+0xac>
 8018ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019000:	6819      	ldr	r1, [r3, #0]
 8019002:	b111      	cbz	r1, 801900a <_reclaim_reent+0x22>
 8019004:	4620      	mov	r0, r4
 8019006:	f7ff fead 	bl	8018d64 <_free_r>
 801900a:	6961      	ldr	r1, [r4, #20]
 801900c:	b111      	cbz	r1, 8019014 <_reclaim_reent+0x2c>
 801900e:	4620      	mov	r0, r4
 8019010:	f7ff fea8 	bl	8018d64 <_free_r>
 8019014:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019016:	b111      	cbz	r1, 801901e <_reclaim_reent+0x36>
 8019018:	4620      	mov	r0, r4
 801901a:	f7ff fea3 	bl	8018d64 <_free_r>
 801901e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019020:	b111      	cbz	r1, 8019028 <_reclaim_reent+0x40>
 8019022:	4620      	mov	r0, r4
 8019024:	f7ff fe9e 	bl	8018d64 <_free_r>
 8019028:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801902a:	b111      	cbz	r1, 8019032 <_reclaim_reent+0x4a>
 801902c:	4620      	mov	r0, r4
 801902e:	f7ff fe99 	bl	8018d64 <_free_r>
 8019032:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019034:	b111      	cbz	r1, 801903c <_reclaim_reent+0x54>
 8019036:	4620      	mov	r0, r4
 8019038:	f7ff fe94 	bl	8018d64 <_free_r>
 801903c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801903e:	b111      	cbz	r1, 8019046 <_reclaim_reent+0x5e>
 8019040:	4620      	mov	r0, r4
 8019042:	f7ff fe8f 	bl	8018d64 <_free_r>
 8019046:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019048:	b111      	cbz	r1, 8019050 <_reclaim_reent+0x68>
 801904a:	4620      	mov	r0, r4
 801904c:	f7ff fe8a 	bl	8018d64 <_free_r>
 8019050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019052:	b111      	cbz	r1, 801905a <_reclaim_reent+0x72>
 8019054:	4620      	mov	r0, r4
 8019056:	f7ff fe85 	bl	8018d64 <_free_r>
 801905a:	69a3      	ldr	r3, [r4, #24]
 801905c:	b1e3      	cbz	r3, 8019098 <_reclaim_reent+0xb0>
 801905e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019060:	4620      	mov	r0, r4
 8019062:	4798      	blx	r3
 8019064:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019066:	b1b9      	cbz	r1, 8019098 <_reclaim_reent+0xb0>
 8019068:	4620      	mov	r0, r4
 801906a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801906e:	f7ff bfad 	b.w	8018fcc <cleanup_glue>
 8019072:	5949      	ldr	r1, [r1, r5]
 8019074:	b941      	cbnz	r1, 8019088 <_reclaim_reent+0xa0>
 8019076:	3504      	adds	r5, #4
 8019078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801907a:	2d80      	cmp	r5, #128	; 0x80
 801907c:	68d9      	ldr	r1, [r3, #12]
 801907e:	d1f8      	bne.n	8019072 <_reclaim_reent+0x8a>
 8019080:	4620      	mov	r0, r4
 8019082:	f7ff fe6f 	bl	8018d64 <_free_r>
 8019086:	e7ba      	b.n	8018ffe <_reclaim_reent+0x16>
 8019088:	680e      	ldr	r6, [r1, #0]
 801908a:	4620      	mov	r0, r4
 801908c:	f7ff fe6a 	bl	8018d64 <_free_r>
 8019090:	4631      	mov	r1, r6
 8019092:	e7ef      	b.n	8019074 <_reclaim_reent+0x8c>
 8019094:	2500      	movs	r5, #0
 8019096:	e7ef      	b.n	8019078 <_reclaim_reent+0x90>
 8019098:	bd70      	pop	{r4, r5, r6, pc}
 801909a:	bf00      	nop
 801909c:	20000110 	.word	0x20000110

080190a0 <_sbrk_r>:
 80190a0:	b538      	push	{r3, r4, r5, lr}
 80190a2:	4d06      	ldr	r5, [pc, #24]	; (80190bc <_sbrk_r+0x1c>)
 80190a4:	2300      	movs	r3, #0
 80190a6:	4604      	mov	r4, r0
 80190a8:	4608      	mov	r0, r1
 80190aa:	602b      	str	r3, [r5, #0]
 80190ac:	f7e7 fcd6 	bl	8000a5c <_sbrk>
 80190b0:	1c43      	adds	r3, r0, #1
 80190b2:	d102      	bne.n	80190ba <_sbrk_r+0x1a>
 80190b4:	682b      	ldr	r3, [r5, #0]
 80190b6:	b103      	cbz	r3, 80190ba <_sbrk_r+0x1a>
 80190b8:	6023      	str	r3, [r4, #0]
 80190ba:	bd38      	pop	{r3, r4, r5, pc}
 80190bc:	2000e6f4 	.word	0x2000e6f4

080190c0 <__sread>:
 80190c0:	b510      	push	{r4, lr}
 80190c2:	460c      	mov	r4, r1
 80190c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190c8:	f000 fc7c 	bl	80199c4 <_read_r>
 80190cc:	2800      	cmp	r0, #0
 80190ce:	bfab      	itete	ge
 80190d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80190d2:	89a3      	ldrhlt	r3, [r4, #12]
 80190d4:	181b      	addge	r3, r3, r0
 80190d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80190da:	bfac      	ite	ge
 80190dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80190de:	81a3      	strhlt	r3, [r4, #12]
 80190e0:	bd10      	pop	{r4, pc}

080190e2 <__swrite>:
 80190e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e6:	461f      	mov	r7, r3
 80190e8:	898b      	ldrh	r3, [r1, #12]
 80190ea:	05db      	lsls	r3, r3, #23
 80190ec:	4605      	mov	r5, r0
 80190ee:	460c      	mov	r4, r1
 80190f0:	4616      	mov	r6, r2
 80190f2:	d505      	bpl.n	8019100 <__swrite+0x1e>
 80190f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190f8:	2302      	movs	r3, #2
 80190fa:	2200      	movs	r2, #0
 80190fc:	f000 f958 	bl	80193b0 <_lseek_r>
 8019100:	89a3      	ldrh	r3, [r4, #12]
 8019102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801910a:	81a3      	strh	r3, [r4, #12]
 801910c:	4632      	mov	r2, r6
 801910e:	463b      	mov	r3, r7
 8019110:	4628      	mov	r0, r5
 8019112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019116:	f000 b869 	b.w	80191ec <_write_r>

0801911a <__sseek>:
 801911a:	b510      	push	{r4, lr}
 801911c:	460c      	mov	r4, r1
 801911e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019122:	f000 f945 	bl	80193b0 <_lseek_r>
 8019126:	1c43      	adds	r3, r0, #1
 8019128:	89a3      	ldrh	r3, [r4, #12]
 801912a:	bf15      	itete	ne
 801912c:	6560      	strne	r0, [r4, #84]	; 0x54
 801912e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019136:	81a3      	strheq	r3, [r4, #12]
 8019138:	bf18      	it	ne
 801913a:	81a3      	strhne	r3, [r4, #12]
 801913c:	bd10      	pop	{r4, pc}

0801913e <__sclose>:
 801913e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019142:	f000 b8f1 	b.w	8019328 <_close_r>
	...

08019148 <__swbuf_r>:
 8019148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801914a:	460e      	mov	r6, r1
 801914c:	4614      	mov	r4, r2
 801914e:	4605      	mov	r5, r0
 8019150:	b118      	cbz	r0, 801915a <__swbuf_r+0x12>
 8019152:	6983      	ldr	r3, [r0, #24]
 8019154:	b90b      	cbnz	r3, 801915a <__swbuf_r+0x12>
 8019156:	f7ff fcad 	bl	8018ab4 <__sinit>
 801915a:	4b21      	ldr	r3, [pc, #132]	; (80191e0 <__swbuf_r+0x98>)
 801915c:	429c      	cmp	r4, r3
 801915e:	d12b      	bne.n	80191b8 <__swbuf_r+0x70>
 8019160:	686c      	ldr	r4, [r5, #4]
 8019162:	69a3      	ldr	r3, [r4, #24]
 8019164:	60a3      	str	r3, [r4, #8]
 8019166:	89a3      	ldrh	r3, [r4, #12]
 8019168:	071a      	lsls	r2, r3, #28
 801916a:	d52f      	bpl.n	80191cc <__swbuf_r+0x84>
 801916c:	6923      	ldr	r3, [r4, #16]
 801916e:	b36b      	cbz	r3, 80191cc <__swbuf_r+0x84>
 8019170:	6923      	ldr	r3, [r4, #16]
 8019172:	6820      	ldr	r0, [r4, #0]
 8019174:	1ac0      	subs	r0, r0, r3
 8019176:	6963      	ldr	r3, [r4, #20]
 8019178:	b2f6      	uxtb	r6, r6
 801917a:	4283      	cmp	r3, r0
 801917c:	4637      	mov	r7, r6
 801917e:	dc04      	bgt.n	801918a <__swbuf_r+0x42>
 8019180:	4621      	mov	r1, r4
 8019182:	4628      	mov	r0, r5
 8019184:	f7ff fc02 	bl	801898c <_fflush_r>
 8019188:	bb30      	cbnz	r0, 80191d8 <__swbuf_r+0x90>
 801918a:	68a3      	ldr	r3, [r4, #8]
 801918c:	3b01      	subs	r3, #1
 801918e:	60a3      	str	r3, [r4, #8]
 8019190:	6823      	ldr	r3, [r4, #0]
 8019192:	1c5a      	adds	r2, r3, #1
 8019194:	6022      	str	r2, [r4, #0]
 8019196:	701e      	strb	r6, [r3, #0]
 8019198:	6963      	ldr	r3, [r4, #20]
 801919a:	3001      	adds	r0, #1
 801919c:	4283      	cmp	r3, r0
 801919e:	d004      	beq.n	80191aa <__swbuf_r+0x62>
 80191a0:	89a3      	ldrh	r3, [r4, #12]
 80191a2:	07db      	lsls	r3, r3, #31
 80191a4:	d506      	bpl.n	80191b4 <__swbuf_r+0x6c>
 80191a6:	2e0a      	cmp	r6, #10
 80191a8:	d104      	bne.n	80191b4 <__swbuf_r+0x6c>
 80191aa:	4621      	mov	r1, r4
 80191ac:	4628      	mov	r0, r5
 80191ae:	f7ff fbed 	bl	801898c <_fflush_r>
 80191b2:	b988      	cbnz	r0, 80191d8 <__swbuf_r+0x90>
 80191b4:	4638      	mov	r0, r7
 80191b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191b8:	4b0a      	ldr	r3, [pc, #40]	; (80191e4 <__swbuf_r+0x9c>)
 80191ba:	429c      	cmp	r4, r3
 80191bc:	d101      	bne.n	80191c2 <__swbuf_r+0x7a>
 80191be:	68ac      	ldr	r4, [r5, #8]
 80191c0:	e7cf      	b.n	8019162 <__swbuf_r+0x1a>
 80191c2:	4b09      	ldr	r3, [pc, #36]	; (80191e8 <__swbuf_r+0xa0>)
 80191c4:	429c      	cmp	r4, r3
 80191c6:	bf08      	it	eq
 80191c8:	68ec      	ldreq	r4, [r5, #12]
 80191ca:	e7ca      	b.n	8019162 <__swbuf_r+0x1a>
 80191cc:	4621      	mov	r1, r4
 80191ce:	4628      	mov	r0, r5
 80191d0:	f000 f81e 	bl	8019210 <__swsetup_r>
 80191d4:	2800      	cmp	r0, #0
 80191d6:	d0cb      	beq.n	8019170 <__swbuf_r+0x28>
 80191d8:	f04f 37ff 	mov.w	r7, #4294967295
 80191dc:	e7ea      	b.n	80191b4 <__swbuf_r+0x6c>
 80191de:	bf00      	nop
 80191e0:	0801cb30 	.word	0x0801cb30
 80191e4:	0801cb50 	.word	0x0801cb50
 80191e8:	0801cb10 	.word	0x0801cb10

080191ec <_write_r>:
 80191ec:	b538      	push	{r3, r4, r5, lr}
 80191ee:	4d07      	ldr	r5, [pc, #28]	; (801920c <_write_r+0x20>)
 80191f0:	4604      	mov	r4, r0
 80191f2:	4608      	mov	r0, r1
 80191f4:	4611      	mov	r1, r2
 80191f6:	2200      	movs	r2, #0
 80191f8:	602a      	str	r2, [r5, #0]
 80191fa:	461a      	mov	r2, r3
 80191fc:	f7e7 fbe1 	bl	80009c2 <_write>
 8019200:	1c43      	adds	r3, r0, #1
 8019202:	d102      	bne.n	801920a <_write_r+0x1e>
 8019204:	682b      	ldr	r3, [r5, #0]
 8019206:	b103      	cbz	r3, 801920a <_write_r+0x1e>
 8019208:	6023      	str	r3, [r4, #0]
 801920a:	bd38      	pop	{r3, r4, r5, pc}
 801920c:	2000e6f4 	.word	0x2000e6f4

08019210 <__swsetup_r>:
 8019210:	4b32      	ldr	r3, [pc, #200]	; (80192dc <__swsetup_r+0xcc>)
 8019212:	b570      	push	{r4, r5, r6, lr}
 8019214:	681d      	ldr	r5, [r3, #0]
 8019216:	4606      	mov	r6, r0
 8019218:	460c      	mov	r4, r1
 801921a:	b125      	cbz	r5, 8019226 <__swsetup_r+0x16>
 801921c:	69ab      	ldr	r3, [r5, #24]
 801921e:	b913      	cbnz	r3, 8019226 <__swsetup_r+0x16>
 8019220:	4628      	mov	r0, r5
 8019222:	f7ff fc47 	bl	8018ab4 <__sinit>
 8019226:	4b2e      	ldr	r3, [pc, #184]	; (80192e0 <__swsetup_r+0xd0>)
 8019228:	429c      	cmp	r4, r3
 801922a:	d10f      	bne.n	801924c <__swsetup_r+0x3c>
 801922c:	686c      	ldr	r4, [r5, #4]
 801922e:	89a3      	ldrh	r3, [r4, #12]
 8019230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019234:	0719      	lsls	r1, r3, #28
 8019236:	d42c      	bmi.n	8019292 <__swsetup_r+0x82>
 8019238:	06dd      	lsls	r5, r3, #27
 801923a:	d411      	bmi.n	8019260 <__swsetup_r+0x50>
 801923c:	2309      	movs	r3, #9
 801923e:	6033      	str	r3, [r6, #0]
 8019240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019244:	81a3      	strh	r3, [r4, #12]
 8019246:	f04f 30ff 	mov.w	r0, #4294967295
 801924a:	e03e      	b.n	80192ca <__swsetup_r+0xba>
 801924c:	4b25      	ldr	r3, [pc, #148]	; (80192e4 <__swsetup_r+0xd4>)
 801924e:	429c      	cmp	r4, r3
 8019250:	d101      	bne.n	8019256 <__swsetup_r+0x46>
 8019252:	68ac      	ldr	r4, [r5, #8]
 8019254:	e7eb      	b.n	801922e <__swsetup_r+0x1e>
 8019256:	4b24      	ldr	r3, [pc, #144]	; (80192e8 <__swsetup_r+0xd8>)
 8019258:	429c      	cmp	r4, r3
 801925a:	bf08      	it	eq
 801925c:	68ec      	ldreq	r4, [r5, #12]
 801925e:	e7e6      	b.n	801922e <__swsetup_r+0x1e>
 8019260:	0758      	lsls	r0, r3, #29
 8019262:	d512      	bpl.n	801928a <__swsetup_r+0x7a>
 8019264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019266:	b141      	cbz	r1, 801927a <__swsetup_r+0x6a>
 8019268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801926c:	4299      	cmp	r1, r3
 801926e:	d002      	beq.n	8019276 <__swsetup_r+0x66>
 8019270:	4630      	mov	r0, r6
 8019272:	f7ff fd77 	bl	8018d64 <_free_r>
 8019276:	2300      	movs	r3, #0
 8019278:	6363      	str	r3, [r4, #52]	; 0x34
 801927a:	89a3      	ldrh	r3, [r4, #12]
 801927c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019280:	81a3      	strh	r3, [r4, #12]
 8019282:	2300      	movs	r3, #0
 8019284:	6063      	str	r3, [r4, #4]
 8019286:	6923      	ldr	r3, [r4, #16]
 8019288:	6023      	str	r3, [r4, #0]
 801928a:	89a3      	ldrh	r3, [r4, #12]
 801928c:	f043 0308 	orr.w	r3, r3, #8
 8019290:	81a3      	strh	r3, [r4, #12]
 8019292:	6923      	ldr	r3, [r4, #16]
 8019294:	b94b      	cbnz	r3, 80192aa <__swsetup_r+0x9a>
 8019296:	89a3      	ldrh	r3, [r4, #12]
 8019298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801929c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192a0:	d003      	beq.n	80192aa <__swsetup_r+0x9a>
 80192a2:	4621      	mov	r1, r4
 80192a4:	4630      	mov	r0, r6
 80192a6:	f7ff fcef 	bl	8018c88 <__smakebuf_r>
 80192aa:	89a0      	ldrh	r0, [r4, #12]
 80192ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80192b0:	f010 0301 	ands.w	r3, r0, #1
 80192b4:	d00a      	beq.n	80192cc <__swsetup_r+0xbc>
 80192b6:	2300      	movs	r3, #0
 80192b8:	60a3      	str	r3, [r4, #8]
 80192ba:	6963      	ldr	r3, [r4, #20]
 80192bc:	425b      	negs	r3, r3
 80192be:	61a3      	str	r3, [r4, #24]
 80192c0:	6923      	ldr	r3, [r4, #16]
 80192c2:	b943      	cbnz	r3, 80192d6 <__swsetup_r+0xc6>
 80192c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80192c8:	d1ba      	bne.n	8019240 <__swsetup_r+0x30>
 80192ca:	bd70      	pop	{r4, r5, r6, pc}
 80192cc:	0781      	lsls	r1, r0, #30
 80192ce:	bf58      	it	pl
 80192d0:	6963      	ldrpl	r3, [r4, #20]
 80192d2:	60a3      	str	r3, [r4, #8]
 80192d4:	e7f4      	b.n	80192c0 <__swsetup_r+0xb0>
 80192d6:	2000      	movs	r0, #0
 80192d8:	e7f7      	b.n	80192ca <__swsetup_r+0xba>
 80192da:	bf00      	nop
 80192dc:	20000110 	.word	0x20000110
 80192e0:	0801cb30 	.word	0x0801cb30
 80192e4:	0801cb50 	.word	0x0801cb50
 80192e8:	0801cb10 	.word	0x0801cb10

080192ec <__assert_func>:
 80192ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192ee:	4614      	mov	r4, r2
 80192f0:	461a      	mov	r2, r3
 80192f2:	4b09      	ldr	r3, [pc, #36]	; (8019318 <__assert_func+0x2c>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	4605      	mov	r5, r0
 80192f8:	68d8      	ldr	r0, [r3, #12]
 80192fa:	b14c      	cbz	r4, 8019310 <__assert_func+0x24>
 80192fc:	4b07      	ldr	r3, [pc, #28]	; (801931c <__assert_func+0x30>)
 80192fe:	9100      	str	r1, [sp, #0]
 8019300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019304:	4906      	ldr	r1, [pc, #24]	; (8019320 <__assert_func+0x34>)
 8019306:	462b      	mov	r3, r5
 8019308:	f000 f81e 	bl	8019348 <fiprintf>
 801930c:	f000 fb6c 	bl	80199e8 <abort>
 8019310:	4b04      	ldr	r3, [pc, #16]	; (8019324 <__assert_func+0x38>)
 8019312:	461c      	mov	r4, r3
 8019314:	e7f3      	b.n	80192fe <__assert_func+0x12>
 8019316:	bf00      	nop
 8019318:	20000110 	.word	0x20000110
 801931c:	0801cbe6 	.word	0x0801cbe6
 8019320:	0801cbf3 	.word	0x0801cbf3
 8019324:	0801cc21 	.word	0x0801cc21

08019328 <_close_r>:
 8019328:	b538      	push	{r3, r4, r5, lr}
 801932a:	4d06      	ldr	r5, [pc, #24]	; (8019344 <_close_r+0x1c>)
 801932c:	2300      	movs	r3, #0
 801932e:	4604      	mov	r4, r0
 8019330:	4608      	mov	r0, r1
 8019332:	602b      	str	r3, [r5, #0]
 8019334:	f7e7 fb61 	bl	80009fa <_close>
 8019338:	1c43      	adds	r3, r0, #1
 801933a:	d102      	bne.n	8019342 <_close_r+0x1a>
 801933c:	682b      	ldr	r3, [r5, #0]
 801933e:	b103      	cbz	r3, 8019342 <_close_r+0x1a>
 8019340:	6023      	str	r3, [r4, #0]
 8019342:	bd38      	pop	{r3, r4, r5, pc}
 8019344:	2000e6f4 	.word	0x2000e6f4

08019348 <fiprintf>:
 8019348:	b40e      	push	{r1, r2, r3}
 801934a:	b503      	push	{r0, r1, lr}
 801934c:	4601      	mov	r1, r0
 801934e:	ab03      	add	r3, sp, #12
 8019350:	4805      	ldr	r0, [pc, #20]	; (8019368 <fiprintf+0x20>)
 8019352:	f853 2b04 	ldr.w	r2, [r3], #4
 8019356:	6800      	ldr	r0, [r0, #0]
 8019358:	9301      	str	r3, [sp, #4]
 801935a:	f000 f86f 	bl	801943c <_vfiprintf_r>
 801935e:	b002      	add	sp, #8
 8019360:	f85d eb04 	ldr.w	lr, [sp], #4
 8019364:	b003      	add	sp, #12
 8019366:	4770      	bx	lr
 8019368:	20000110 	.word	0x20000110

0801936c <_fstat_r>:
 801936c:	b538      	push	{r3, r4, r5, lr}
 801936e:	4d07      	ldr	r5, [pc, #28]	; (801938c <_fstat_r+0x20>)
 8019370:	2300      	movs	r3, #0
 8019372:	4604      	mov	r4, r0
 8019374:	4608      	mov	r0, r1
 8019376:	4611      	mov	r1, r2
 8019378:	602b      	str	r3, [r5, #0]
 801937a:	f7e7 fb49 	bl	8000a10 <_fstat>
 801937e:	1c43      	adds	r3, r0, #1
 8019380:	d102      	bne.n	8019388 <_fstat_r+0x1c>
 8019382:	682b      	ldr	r3, [r5, #0]
 8019384:	b103      	cbz	r3, 8019388 <_fstat_r+0x1c>
 8019386:	6023      	str	r3, [r4, #0]
 8019388:	bd38      	pop	{r3, r4, r5, pc}
 801938a:	bf00      	nop
 801938c:	2000e6f4 	.word	0x2000e6f4

08019390 <_isatty_r>:
 8019390:	b538      	push	{r3, r4, r5, lr}
 8019392:	4d06      	ldr	r5, [pc, #24]	; (80193ac <_isatty_r+0x1c>)
 8019394:	2300      	movs	r3, #0
 8019396:	4604      	mov	r4, r0
 8019398:	4608      	mov	r0, r1
 801939a:	602b      	str	r3, [r5, #0]
 801939c:	f7e7 fb47 	bl	8000a2e <_isatty>
 80193a0:	1c43      	adds	r3, r0, #1
 80193a2:	d102      	bne.n	80193aa <_isatty_r+0x1a>
 80193a4:	682b      	ldr	r3, [r5, #0]
 80193a6:	b103      	cbz	r3, 80193aa <_isatty_r+0x1a>
 80193a8:	6023      	str	r3, [r4, #0]
 80193aa:	bd38      	pop	{r3, r4, r5, pc}
 80193ac:	2000e6f4 	.word	0x2000e6f4

080193b0 <_lseek_r>:
 80193b0:	b538      	push	{r3, r4, r5, lr}
 80193b2:	4d07      	ldr	r5, [pc, #28]	; (80193d0 <_lseek_r+0x20>)
 80193b4:	4604      	mov	r4, r0
 80193b6:	4608      	mov	r0, r1
 80193b8:	4611      	mov	r1, r2
 80193ba:	2200      	movs	r2, #0
 80193bc:	602a      	str	r2, [r5, #0]
 80193be:	461a      	mov	r2, r3
 80193c0:	f7e7 fb3f 	bl	8000a42 <_lseek>
 80193c4:	1c43      	adds	r3, r0, #1
 80193c6:	d102      	bne.n	80193ce <_lseek_r+0x1e>
 80193c8:	682b      	ldr	r3, [r5, #0]
 80193ca:	b103      	cbz	r3, 80193ce <_lseek_r+0x1e>
 80193cc:	6023      	str	r3, [r4, #0]
 80193ce:	bd38      	pop	{r3, r4, r5, pc}
 80193d0:	2000e6f4 	.word	0x2000e6f4

080193d4 <__malloc_lock>:
 80193d4:	4801      	ldr	r0, [pc, #4]	; (80193dc <__malloc_lock+0x8>)
 80193d6:	f7ff bc30 	b.w	8018c3a <__retarget_lock_acquire_recursive>
 80193da:	bf00      	nop
 80193dc:	2000e6e8 	.word	0x2000e6e8

080193e0 <__malloc_unlock>:
 80193e0:	4801      	ldr	r0, [pc, #4]	; (80193e8 <__malloc_unlock+0x8>)
 80193e2:	f7ff bc2b 	b.w	8018c3c <__retarget_lock_release_recursive>
 80193e6:	bf00      	nop
 80193e8:	2000e6e8 	.word	0x2000e6e8

080193ec <__sfputc_r>:
 80193ec:	6893      	ldr	r3, [r2, #8]
 80193ee:	3b01      	subs	r3, #1
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	b410      	push	{r4}
 80193f4:	6093      	str	r3, [r2, #8]
 80193f6:	da07      	bge.n	8019408 <__sfputc_r+0x1c>
 80193f8:	6994      	ldr	r4, [r2, #24]
 80193fa:	42a3      	cmp	r3, r4
 80193fc:	db01      	blt.n	8019402 <__sfputc_r+0x16>
 80193fe:	290a      	cmp	r1, #10
 8019400:	d102      	bne.n	8019408 <__sfputc_r+0x1c>
 8019402:	bc10      	pop	{r4}
 8019404:	f7ff bea0 	b.w	8019148 <__swbuf_r>
 8019408:	6813      	ldr	r3, [r2, #0]
 801940a:	1c58      	adds	r0, r3, #1
 801940c:	6010      	str	r0, [r2, #0]
 801940e:	7019      	strb	r1, [r3, #0]
 8019410:	4608      	mov	r0, r1
 8019412:	bc10      	pop	{r4}
 8019414:	4770      	bx	lr

08019416 <__sfputs_r>:
 8019416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019418:	4606      	mov	r6, r0
 801941a:	460f      	mov	r7, r1
 801941c:	4614      	mov	r4, r2
 801941e:	18d5      	adds	r5, r2, r3
 8019420:	42ac      	cmp	r4, r5
 8019422:	d101      	bne.n	8019428 <__sfputs_r+0x12>
 8019424:	2000      	movs	r0, #0
 8019426:	e007      	b.n	8019438 <__sfputs_r+0x22>
 8019428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801942c:	463a      	mov	r2, r7
 801942e:	4630      	mov	r0, r6
 8019430:	f7ff ffdc 	bl	80193ec <__sfputc_r>
 8019434:	1c43      	adds	r3, r0, #1
 8019436:	d1f3      	bne.n	8019420 <__sfputs_r+0xa>
 8019438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801943c <_vfiprintf_r>:
 801943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019440:	460d      	mov	r5, r1
 8019442:	b09d      	sub	sp, #116	; 0x74
 8019444:	4614      	mov	r4, r2
 8019446:	4698      	mov	r8, r3
 8019448:	4606      	mov	r6, r0
 801944a:	b118      	cbz	r0, 8019454 <_vfiprintf_r+0x18>
 801944c:	6983      	ldr	r3, [r0, #24]
 801944e:	b90b      	cbnz	r3, 8019454 <_vfiprintf_r+0x18>
 8019450:	f7ff fb30 	bl	8018ab4 <__sinit>
 8019454:	4b89      	ldr	r3, [pc, #548]	; (801967c <_vfiprintf_r+0x240>)
 8019456:	429d      	cmp	r5, r3
 8019458:	d11b      	bne.n	8019492 <_vfiprintf_r+0x56>
 801945a:	6875      	ldr	r5, [r6, #4]
 801945c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801945e:	07d9      	lsls	r1, r3, #31
 8019460:	d405      	bmi.n	801946e <_vfiprintf_r+0x32>
 8019462:	89ab      	ldrh	r3, [r5, #12]
 8019464:	059a      	lsls	r2, r3, #22
 8019466:	d402      	bmi.n	801946e <_vfiprintf_r+0x32>
 8019468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801946a:	f7ff fbe6 	bl	8018c3a <__retarget_lock_acquire_recursive>
 801946e:	89ab      	ldrh	r3, [r5, #12]
 8019470:	071b      	lsls	r3, r3, #28
 8019472:	d501      	bpl.n	8019478 <_vfiprintf_r+0x3c>
 8019474:	692b      	ldr	r3, [r5, #16]
 8019476:	b9eb      	cbnz	r3, 80194b4 <_vfiprintf_r+0x78>
 8019478:	4629      	mov	r1, r5
 801947a:	4630      	mov	r0, r6
 801947c:	f7ff fec8 	bl	8019210 <__swsetup_r>
 8019480:	b1c0      	cbz	r0, 80194b4 <_vfiprintf_r+0x78>
 8019482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019484:	07dc      	lsls	r4, r3, #31
 8019486:	d50e      	bpl.n	80194a6 <_vfiprintf_r+0x6a>
 8019488:	f04f 30ff 	mov.w	r0, #4294967295
 801948c:	b01d      	add	sp, #116	; 0x74
 801948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019492:	4b7b      	ldr	r3, [pc, #492]	; (8019680 <_vfiprintf_r+0x244>)
 8019494:	429d      	cmp	r5, r3
 8019496:	d101      	bne.n	801949c <_vfiprintf_r+0x60>
 8019498:	68b5      	ldr	r5, [r6, #8]
 801949a:	e7df      	b.n	801945c <_vfiprintf_r+0x20>
 801949c:	4b79      	ldr	r3, [pc, #484]	; (8019684 <_vfiprintf_r+0x248>)
 801949e:	429d      	cmp	r5, r3
 80194a0:	bf08      	it	eq
 80194a2:	68f5      	ldreq	r5, [r6, #12]
 80194a4:	e7da      	b.n	801945c <_vfiprintf_r+0x20>
 80194a6:	89ab      	ldrh	r3, [r5, #12]
 80194a8:	0598      	lsls	r0, r3, #22
 80194aa:	d4ed      	bmi.n	8019488 <_vfiprintf_r+0x4c>
 80194ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194ae:	f7ff fbc5 	bl	8018c3c <__retarget_lock_release_recursive>
 80194b2:	e7e9      	b.n	8019488 <_vfiprintf_r+0x4c>
 80194b4:	2300      	movs	r3, #0
 80194b6:	9309      	str	r3, [sp, #36]	; 0x24
 80194b8:	2320      	movs	r3, #32
 80194ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194be:	f8cd 800c 	str.w	r8, [sp, #12]
 80194c2:	2330      	movs	r3, #48	; 0x30
 80194c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019688 <_vfiprintf_r+0x24c>
 80194c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80194cc:	f04f 0901 	mov.w	r9, #1
 80194d0:	4623      	mov	r3, r4
 80194d2:	469a      	mov	sl, r3
 80194d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194d8:	b10a      	cbz	r2, 80194de <_vfiprintf_r+0xa2>
 80194da:	2a25      	cmp	r2, #37	; 0x25
 80194dc:	d1f9      	bne.n	80194d2 <_vfiprintf_r+0x96>
 80194de:	ebba 0b04 	subs.w	fp, sl, r4
 80194e2:	d00b      	beq.n	80194fc <_vfiprintf_r+0xc0>
 80194e4:	465b      	mov	r3, fp
 80194e6:	4622      	mov	r2, r4
 80194e8:	4629      	mov	r1, r5
 80194ea:	4630      	mov	r0, r6
 80194ec:	f7ff ff93 	bl	8019416 <__sfputs_r>
 80194f0:	3001      	adds	r0, #1
 80194f2:	f000 80aa 	beq.w	801964a <_vfiprintf_r+0x20e>
 80194f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80194f8:	445a      	add	r2, fp
 80194fa:	9209      	str	r2, [sp, #36]	; 0x24
 80194fc:	f89a 3000 	ldrb.w	r3, [sl]
 8019500:	2b00      	cmp	r3, #0
 8019502:	f000 80a2 	beq.w	801964a <_vfiprintf_r+0x20e>
 8019506:	2300      	movs	r3, #0
 8019508:	f04f 32ff 	mov.w	r2, #4294967295
 801950c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019510:	f10a 0a01 	add.w	sl, sl, #1
 8019514:	9304      	str	r3, [sp, #16]
 8019516:	9307      	str	r3, [sp, #28]
 8019518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801951c:	931a      	str	r3, [sp, #104]	; 0x68
 801951e:	4654      	mov	r4, sl
 8019520:	2205      	movs	r2, #5
 8019522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019526:	4858      	ldr	r0, [pc, #352]	; (8019688 <_vfiprintf_r+0x24c>)
 8019528:	f7e6 fe52 	bl	80001d0 <memchr>
 801952c:	9a04      	ldr	r2, [sp, #16]
 801952e:	b9d8      	cbnz	r0, 8019568 <_vfiprintf_r+0x12c>
 8019530:	06d1      	lsls	r1, r2, #27
 8019532:	bf44      	itt	mi
 8019534:	2320      	movmi	r3, #32
 8019536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801953a:	0713      	lsls	r3, r2, #28
 801953c:	bf44      	itt	mi
 801953e:	232b      	movmi	r3, #43	; 0x2b
 8019540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019544:	f89a 3000 	ldrb.w	r3, [sl]
 8019548:	2b2a      	cmp	r3, #42	; 0x2a
 801954a:	d015      	beq.n	8019578 <_vfiprintf_r+0x13c>
 801954c:	9a07      	ldr	r2, [sp, #28]
 801954e:	4654      	mov	r4, sl
 8019550:	2000      	movs	r0, #0
 8019552:	f04f 0c0a 	mov.w	ip, #10
 8019556:	4621      	mov	r1, r4
 8019558:	f811 3b01 	ldrb.w	r3, [r1], #1
 801955c:	3b30      	subs	r3, #48	; 0x30
 801955e:	2b09      	cmp	r3, #9
 8019560:	d94e      	bls.n	8019600 <_vfiprintf_r+0x1c4>
 8019562:	b1b0      	cbz	r0, 8019592 <_vfiprintf_r+0x156>
 8019564:	9207      	str	r2, [sp, #28]
 8019566:	e014      	b.n	8019592 <_vfiprintf_r+0x156>
 8019568:	eba0 0308 	sub.w	r3, r0, r8
 801956c:	fa09 f303 	lsl.w	r3, r9, r3
 8019570:	4313      	orrs	r3, r2
 8019572:	9304      	str	r3, [sp, #16]
 8019574:	46a2      	mov	sl, r4
 8019576:	e7d2      	b.n	801951e <_vfiprintf_r+0xe2>
 8019578:	9b03      	ldr	r3, [sp, #12]
 801957a:	1d19      	adds	r1, r3, #4
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	9103      	str	r1, [sp, #12]
 8019580:	2b00      	cmp	r3, #0
 8019582:	bfbb      	ittet	lt
 8019584:	425b      	neglt	r3, r3
 8019586:	f042 0202 	orrlt.w	r2, r2, #2
 801958a:	9307      	strge	r3, [sp, #28]
 801958c:	9307      	strlt	r3, [sp, #28]
 801958e:	bfb8      	it	lt
 8019590:	9204      	strlt	r2, [sp, #16]
 8019592:	7823      	ldrb	r3, [r4, #0]
 8019594:	2b2e      	cmp	r3, #46	; 0x2e
 8019596:	d10c      	bne.n	80195b2 <_vfiprintf_r+0x176>
 8019598:	7863      	ldrb	r3, [r4, #1]
 801959a:	2b2a      	cmp	r3, #42	; 0x2a
 801959c:	d135      	bne.n	801960a <_vfiprintf_r+0x1ce>
 801959e:	9b03      	ldr	r3, [sp, #12]
 80195a0:	1d1a      	adds	r2, r3, #4
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	9203      	str	r2, [sp, #12]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	bfb8      	it	lt
 80195aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80195ae:	3402      	adds	r4, #2
 80195b0:	9305      	str	r3, [sp, #20]
 80195b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801968c <_vfiprintf_r+0x250>
 80195b6:	7821      	ldrb	r1, [r4, #0]
 80195b8:	2203      	movs	r2, #3
 80195ba:	4650      	mov	r0, sl
 80195bc:	f7e6 fe08 	bl	80001d0 <memchr>
 80195c0:	b140      	cbz	r0, 80195d4 <_vfiprintf_r+0x198>
 80195c2:	2340      	movs	r3, #64	; 0x40
 80195c4:	eba0 000a 	sub.w	r0, r0, sl
 80195c8:	fa03 f000 	lsl.w	r0, r3, r0
 80195cc:	9b04      	ldr	r3, [sp, #16]
 80195ce:	4303      	orrs	r3, r0
 80195d0:	3401      	adds	r4, #1
 80195d2:	9304      	str	r3, [sp, #16]
 80195d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195d8:	482d      	ldr	r0, [pc, #180]	; (8019690 <_vfiprintf_r+0x254>)
 80195da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80195de:	2206      	movs	r2, #6
 80195e0:	f7e6 fdf6 	bl	80001d0 <memchr>
 80195e4:	2800      	cmp	r0, #0
 80195e6:	d03f      	beq.n	8019668 <_vfiprintf_r+0x22c>
 80195e8:	4b2a      	ldr	r3, [pc, #168]	; (8019694 <_vfiprintf_r+0x258>)
 80195ea:	bb1b      	cbnz	r3, 8019634 <_vfiprintf_r+0x1f8>
 80195ec:	9b03      	ldr	r3, [sp, #12]
 80195ee:	3307      	adds	r3, #7
 80195f0:	f023 0307 	bic.w	r3, r3, #7
 80195f4:	3308      	adds	r3, #8
 80195f6:	9303      	str	r3, [sp, #12]
 80195f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195fa:	443b      	add	r3, r7
 80195fc:	9309      	str	r3, [sp, #36]	; 0x24
 80195fe:	e767      	b.n	80194d0 <_vfiprintf_r+0x94>
 8019600:	fb0c 3202 	mla	r2, ip, r2, r3
 8019604:	460c      	mov	r4, r1
 8019606:	2001      	movs	r0, #1
 8019608:	e7a5      	b.n	8019556 <_vfiprintf_r+0x11a>
 801960a:	2300      	movs	r3, #0
 801960c:	3401      	adds	r4, #1
 801960e:	9305      	str	r3, [sp, #20]
 8019610:	4619      	mov	r1, r3
 8019612:	f04f 0c0a 	mov.w	ip, #10
 8019616:	4620      	mov	r0, r4
 8019618:	f810 2b01 	ldrb.w	r2, [r0], #1
 801961c:	3a30      	subs	r2, #48	; 0x30
 801961e:	2a09      	cmp	r2, #9
 8019620:	d903      	bls.n	801962a <_vfiprintf_r+0x1ee>
 8019622:	2b00      	cmp	r3, #0
 8019624:	d0c5      	beq.n	80195b2 <_vfiprintf_r+0x176>
 8019626:	9105      	str	r1, [sp, #20]
 8019628:	e7c3      	b.n	80195b2 <_vfiprintf_r+0x176>
 801962a:	fb0c 2101 	mla	r1, ip, r1, r2
 801962e:	4604      	mov	r4, r0
 8019630:	2301      	movs	r3, #1
 8019632:	e7f0      	b.n	8019616 <_vfiprintf_r+0x1da>
 8019634:	ab03      	add	r3, sp, #12
 8019636:	9300      	str	r3, [sp, #0]
 8019638:	462a      	mov	r2, r5
 801963a:	4b17      	ldr	r3, [pc, #92]	; (8019698 <_vfiprintf_r+0x25c>)
 801963c:	a904      	add	r1, sp, #16
 801963e:	4630      	mov	r0, r6
 8019640:	f3af 8000 	nop.w
 8019644:	4607      	mov	r7, r0
 8019646:	1c78      	adds	r0, r7, #1
 8019648:	d1d6      	bne.n	80195f8 <_vfiprintf_r+0x1bc>
 801964a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801964c:	07d9      	lsls	r1, r3, #31
 801964e:	d405      	bmi.n	801965c <_vfiprintf_r+0x220>
 8019650:	89ab      	ldrh	r3, [r5, #12]
 8019652:	059a      	lsls	r2, r3, #22
 8019654:	d402      	bmi.n	801965c <_vfiprintf_r+0x220>
 8019656:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019658:	f7ff faf0 	bl	8018c3c <__retarget_lock_release_recursive>
 801965c:	89ab      	ldrh	r3, [r5, #12]
 801965e:	065b      	lsls	r3, r3, #25
 8019660:	f53f af12 	bmi.w	8019488 <_vfiprintf_r+0x4c>
 8019664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019666:	e711      	b.n	801948c <_vfiprintf_r+0x50>
 8019668:	ab03      	add	r3, sp, #12
 801966a:	9300      	str	r3, [sp, #0]
 801966c:	462a      	mov	r2, r5
 801966e:	4b0a      	ldr	r3, [pc, #40]	; (8019698 <_vfiprintf_r+0x25c>)
 8019670:	a904      	add	r1, sp, #16
 8019672:	4630      	mov	r0, r6
 8019674:	f000 f880 	bl	8019778 <_printf_i>
 8019678:	e7e4      	b.n	8019644 <_vfiprintf_r+0x208>
 801967a:	bf00      	nop
 801967c:	0801cb30 	.word	0x0801cb30
 8019680:	0801cb50 	.word	0x0801cb50
 8019684:	0801cb10 	.word	0x0801cb10
 8019688:	0801cc22 	.word	0x0801cc22
 801968c:	0801cc28 	.word	0x0801cc28
 8019690:	0801cc2c 	.word	0x0801cc2c
 8019694:	00000000 	.word	0x00000000
 8019698:	08019417 	.word	0x08019417

0801969c <_printf_common>:
 801969c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196a0:	4616      	mov	r6, r2
 80196a2:	4699      	mov	r9, r3
 80196a4:	688a      	ldr	r2, [r1, #8]
 80196a6:	690b      	ldr	r3, [r1, #16]
 80196a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80196ac:	4293      	cmp	r3, r2
 80196ae:	bfb8      	it	lt
 80196b0:	4613      	movlt	r3, r2
 80196b2:	6033      	str	r3, [r6, #0]
 80196b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80196b8:	4607      	mov	r7, r0
 80196ba:	460c      	mov	r4, r1
 80196bc:	b10a      	cbz	r2, 80196c2 <_printf_common+0x26>
 80196be:	3301      	adds	r3, #1
 80196c0:	6033      	str	r3, [r6, #0]
 80196c2:	6823      	ldr	r3, [r4, #0]
 80196c4:	0699      	lsls	r1, r3, #26
 80196c6:	bf42      	ittt	mi
 80196c8:	6833      	ldrmi	r3, [r6, #0]
 80196ca:	3302      	addmi	r3, #2
 80196cc:	6033      	strmi	r3, [r6, #0]
 80196ce:	6825      	ldr	r5, [r4, #0]
 80196d0:	f015 0506 	ands.w	r5, r5, #6
 80196d4:	d106      	bne.n	80196e4 <_printf_common+0x48>
 80196d6:	f104 0a19 	add.w	sl, r4, #25
 80196da:	68e3      	ldr	r3, [r4, #12]
 80196dc:	6832      	ldr	r2, [r6, #0]
 80196de:	1a9b      	subs	r3, r3, r2
 80196e0:	42ab      	cmp	r3, r5
 80196e2:	dc26      	bgt.n	8019732 <_printf_common+0x96>
 80196e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80196e8:	1e13      	subs	r3, r2, #0
 80196ea:	6822      	ldr	r2, [r4, #0]
 80196ec:	bf18      	it	ne
 80196ee:	2301      	movne	r3, #1
 80196f0:	0692      	lsls	r2, r2, #26
 80196f2:	d42b      	bmi.n	801974c <_printf_common+0xb0>
 80196f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80196f8:	4649      	mov	r1, r9
 80196fa:	4638      	mov	r0, r7
 80196fc:	47c0      	blx	r8
 80196fe:	3001      	adds	r0, #1
 8019700:	d01e      	beq.n	8019740 <_printf_common+0xa4>
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	68e5      	ldr	r5, [r4, #12]
 8019706:	6832      	ldr	r2, [r6, #0]
 8019708:	f003 0306 	and.w	r3, r3, #6
 801970c:	2b04      	cmp	r3, #4
 801970e:	bf08      	it	eq
 8019710:	1aad      	subeq	r5, r5, r2
 8019712:	68a3      	ldr	r3, [r4, #8]
 8019714:	6922      	ldr	r2, [r4, #16]
 8019716:	bf0c      	ite	eq
 8019718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801971c:	2500      	movne	r5, #0
 801971e:	4293      	cmp	r3, r2
 8019720:	bfc4      	itt	gt
 8019722:	1a9b      	subgt	r3, r3, r2
 8019724:	18ed      	addgt	r5, r5, r3
 8019726:	2600      	movs	r6, #0
 8019728:	341a      	adds	r4, #26
 801972a:	42b5      	cmp	r5, r6
 801972c:	d11a      	bne.n	8019764 <_printf_common+0xc8>
 801972e:	2000      	movs	r0, #0
 8019730:	e008      	b.n	8019744 <_printf_common+0xa8>
 8019732:	2301      	movs	r3, #1
 8019734:	4652      	mov	r2, sl
 8019736:	4649      	mov	r1, r9
 8019738:	4638      	mov	r0, r7
 801973a:	47c0      	blx	r8
 801973c:	3001      	adds	r0, #1
 801973e:	d103      	bne.n	8019748 <_printf_common+0xac>
 8019740:	f04f 30ff 	mov.w	r0, #4294967295
 8019744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019748:	3501      	adds	r5, #1
 801974a:	e7c6      	b.n	80196da <_printf_common+0x3e>
 801974c:	18e1      	adds	r1, r4, r3
 801974e:	1c5a      	adds	r2, r3, #1
 8019750:	2030      	movs	r0, #48	; 0x30
 8019752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019756:	4422      	add	r2, r4
 8019758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801975c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019760:	3302      	adds	r3, #2
 8019762:	e7c7      	b.n	80196f4 <_printf_common+0x58>
 8019764:	2301      	movs	r3, #1
 8019766:	4622      	mov	r2, r4
 8019768:	4649      	mov	r1, r9
 801976a:	4638      	mov	r0, r7
 801976c:	47c0      	blx	r8
 801976e:	3001      	adds	r0, #1
 8019770:	d0e6      	beq.n	8019740 <_printf_common+0xa4>
 8019772:	3601      	adds	r6, #1
 8019774:	e7d9      	b.n	801972a <_printf_common+0x8e>
	...

08019778 <_printf_i>:
 8019778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801977c:	7e0f      	ldrb	r7, [r1, #24]
 801977e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019780:	2f78      	cmp	r7, #120	; 0x78
 8019782:	4691      	mov	r9, r2
 8019784:	4680      	mov	r8, r0
 8019786:	460c      	mov	r4, r1
 8019788:	469a      	mov	sl, r3
 801978a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801978e:	d807      	bhi.n	80197a0 <_printf_i+0x28>
 8019790:	2f62      	cmp	r7, #98	; 0x62
 8019792:	d80a      	bhi.n	80197aa <_printf_i+0x32>
 8019794:	2f00      	cmp	r7, #0
 8019796:	f000 80d8 	beq.w	801994a <_printf_i+0x1d2>
 801979a:	2f58      	cmp	r7, #88	; 0x58
 801979c:	f000 80a3 	beq.w	80198e6 <_printf_i+0x16e>
 80197a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80197a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80197a8:	e03a      	b.n	8019820 <_printf_i+0xa8>
 80197aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80197ae:	2b15      	cmp	r3, #21
 80197b0:	d8f6      	bhi.n	80197a0 <_printf_i+0x28>
 80197b2:	a101      	add	r1, pc, #4	; (adr r1, 80197b8 <_printf_i+0x40>)
 80197b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80197b8:	08019811 	.word	0x08019811
 80197bc:	08019825 	.word	0x08019825
 80197c0:	080197a1 	.word	0x080197a1
 80197c4:	080197a1 	.word	0x080197a1
 80197c8:	080197a1 	.word	0x080197a1
 80197cc:	080197a1 	.word	0x080197a1
 80197d0:	08019825 	.word	0x08019825
 80197d4:	080197a1 	.word	0x080197a1
 80197d8:	080197a1 	.word	0x080197a1
 80197dc:	080197a1 	.word	0x080197a1
 80197e0:	080197a1 	.word	0x080197a1
 80197e4:	08019931 	.word	0x08019931
 80197e8:	08019855 	.word	0x08019855
 80197ec:	08019913 	.word	0x08019913
 80197f0:	080197a1 	.word	0x080197a1
 80197f4:	080197a1 	.word	0x080197a1
 80197f8:	08019953 	.word	0x08019953
 80197fc:	080197a1 	.word	0x080197a1
 8019800:	08019855 	.word	0x08019855
 8019804:	080197a1 	.word	0x080197a1
 8019808:	080197a1 	.word	0x080197a1
 801980c:	0801991b 	.word	0x0801991b
 8019810:	682b      	ldr	r3, [r5, #0]
 8019812:	1d1a      	adds	r2, r3, #4
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	602a      	str	r2, [r5, #0]
 8019818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801981c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019820:	2301      	movs	r3, #1
 8019822:	e0a3      	b.n	801996c <_printf_i+0x1f4>
 8019824:	6820      	ldr	r0, [r4, #0]
 8019826:	6829      	ldr	r1, [r5, #0]
 8019828:	0606      	lsls	r6, r0, #24
 801982a:	f101 0304 	add.w	r3, r1, #4
 801982e:	d50a      	bpl.n	8019846 <_printf_i+0xce>
 8019830:	680e      	ldr	r6, [r1, #0]
 8019832:	602b      	str	r3, [r5, #0]
 8019834:	2e00      	cmp	r6, #0
 8019836:	da03      	bge.n	8019840 <_printf_i+0xc8>
 8019838:	232d      	movs	r3, #45	; 0x2d
 801983a:	4276      	negs	r6, r6
 801983c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019840:	485e      	ldr	r0, [pc, #376]	; (80199bc <_printf_i+0x244>)
 8019842:	230a      	movs	r3, #10
 8019844:	e019      	b.n	801987a <_printf_i+0x102>
 8019846:	680e      	ldr	r6, [r1, #0]
 8019848:	602b      	str	r3, [r5, #0]
 801984a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801984e:	bf18      	it	ne
 8019850:	b236      	sxthne	r6, r6
 8019852:	e7ef      	b.n	8019834 <_printf_i+0xbc>
 8019854:	682b      	ldr	r3, [r5, #0]
 8019856:	6820      	ldr	r0, [r4, #0]
 8019858:	1d19      	adds	r1, r3, #4
 801985a:	6029      	str	r1, [r5, #0]
 801985c:	0601      	lsls	r1, r0, #24
 801985e:	d501      	bpl.n	8019864 <_printf_i+0xec>
 8019860:	681e      	ldr	r6, [r3, #0]
 8019862:	e002      	b.n	801986a <_printf_i+0xf2>
 8019864:	0646      	lsls	r6, r0, #25
 8019866:	d5fb      	bpl.n	8019860 <_printf_i+0xe8>
 8019868:	881e      	ldrh	r6, [r3, #0]
 801986a:	4854      	ldr	r0, [pc, #336]	; (80199bc <_printf_i+0x244>)
 801986c:	2f6f      	cmp	r7, #111	; 0x6f
 801986e:	bf0c      	ite	eq
 8019870:	2308      	moveq	r3, #8
 8019872:	230a      	movne	r3, #10
 8019874:	2100      	movs	r1, #0
 8019876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801987a:	6865      	ldr	r5, [r4, #4]
 801987c:	60a5      	str	r5, [r4, #8]
 801987e:	2d00      	cmp	r5, #0
 8019880:	bfa2      	ittt	ge
 8019882:	6821      	ldrge	r1, [r4, #0]
 8019884:	f021 0104 	bicge.w	r1, r1, #4
 8019888:	6021      	strge	r1, [r4, #0]
 801988a:	b90e      	cbnz	r6, 8019890 <_printf_i+0x118>
 801988c:	2d00      	cmp	r5, #0
 801988e:	d04d      	beq.n	801992c <_printf_i+0x1b4>
 8019890:	4615      	mov	r5, r2
 8019892:	fbb6 f1f3 	udiv	r1, r6, r3
 8019896:	fb03 6711 	mls	r7, r3, r1, r6
 801989a:	5dc7      	ldrb	r7, [r0, r7]
 801989c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80198a0:	4637      	mov	r7, r6
 80198a2:	42bb      	cmp	r3, r7
 80198a4:	460e      	mov	r6, r1
 80198a6:	d9f4      	bls.n	8019892 <_printf_i+0x11a>
 80198a8:	2b08      	cmp	r3, #8
 80198aa:	d10b      	bne.n	80198c4 <_printf_i+0x14c>
 80198ac:	6823      	ldr	r3, [r4, #0]
 80198ae:	07de      	lsls	r6, r3, #31
 80198b0:	d508      	bpl.n	80198c4 <_printf_i+0x14c>
 80198b2:	6923      	ldr	r3, [r4, #16]
 80198b4:	6861      	ldr	r1, [r4, #4]
 80198b6:	4299      	cmp	r1, r3
 80198b8:	bfde      	ittt	le
 80198ba:	2330      	movle	r3, #48	; 0x30
 80198bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80198c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80198c4:	1b52      	subs	r2, r2, r5
 80198c6:	6122      	str	r2, [r4, #16]
 80198c8:	f8cd a000 	str.w	sl, [sp]
 80198cc:	464b      	mov	r3, r9
 80198ce:	aa03      	add	r2, sp, #12
 80198d0:	4621      	mov	r1, r4
 80198d2:	4640      	mov	r0, r8
 80198d4:	f7ff fee2 	bl	801969c <_printf_common>
 80198d8:	3001      	adds	r0, #1
 80198da:	d14c      	bne.n	8019976 <_printf_i+0x1fe>
 80198dc:	f04f 30ff 	mov.w	r0, #4294967295
 80198e0:	b004      	add	sp, #16
 80198e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198e6:	4835      	ldr	r0, [pc, #212]	; (80199bc <_printf_i+0x244>)
 80198e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80198ec:	6829      	ldr	r1, [r5, #0]
 80198ee:	6823      	ldr	r3, [r4, #0]
 80198f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80198f4:	6029      	str	r1, [r5, #0]
 80198f6:	061d      	lsls	r5, r3, #24
 80198f8:	d514      	bpl.n	8019924 <_printf_i+0x1ac>
 80198fa:	07df      	lsls	r7, r3, #31
 80198fc:	bf44      	itt	mi
 80198fe:	f043 0320 	orrmi.w	r3, r3, #32
 8019902:	6023      	strmi	r3, [r4, #0]
 8019904:	b91e      	cbnz	r6, 801990e <_printf_i+0x196>
 8019906:	6823      	ldr	r3, [r4, #0]
 8019908:	f023 0320 	bic.w	r3, r3, #32
 801990c:	6023      	str	r3, [r4, #0]
 801990e:	2310      	movs	r3, #16
 8019910:	e7b0      	b.n	8019874 <_printf_i+0xfc>
 8019912:	6823      	ldr	r3, [r4, #0]
 8019914:	f043 0320 	orr.w	r3, r3, #32
 8019918:	6023      	str	r3, [r4, #0]
 801991a:	2378      	movs	r3, #120	; 0x78
 801991c:	4828      	ldr	r0, [pc, #160]	; (80199c0 <_printf_i+0x248>)
 801991e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019922:	e7e3      	b.n	80198ec <_printf_i+0x174>
 8019924:	0659      	lsls	r1, r3, #25
 8019926:	bf48      	it	mi
 8019928:	b2b6      	uxthmi	r6, r6
 801992a:	e7e6      	b.n	80198fa <_printf_i+0x182>
 801992c:	4615      	mov	r5, r2
 801992e:	e7bb      	b.n	80198a8 <_printf_i+0x130>
 8019930:	682b      	ldr	r3, [r5, #0]
 8019932:	6826      	ldr	r6, [r4, #0]
 8019934:	6961      	ldr	r1, [r4, #20]
 8019936:	1d18      	adds	r0, r3, #4
 8019938:	6028      	str	r0, [r5, #0]
 801993a:	0635      	lsls	r5, r6, #24
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	d501      	bpl.n	8019944 <_printf_i+0x1cc>
 8019940:	6019      	str	r1, [r3, #0]
 8019942:	e002      	b.n	801994a <_printf_i+0x1d2>
 8019944:	0670      	lsls	r0, r6, #25
 8019946:	d5fb      	bpl.n	8019940 <_printf_i+0x1c8>
 8019948:	8019      	strh	r1, [r3, #0]
 801994a:	2300      	movs	r3, #0
 801994c:	6123      	str	r3, [r4, #16]
 801994e:	4615      	mov	r5, r2
 8019950:	e7ba      	b.n	80198c8 <_printf_i+0x150>
 8019952:	682b      	ldr	r3, [r5, #0]
 8019954:	1d1a      	adds	r2, r3, #4
 8019956:	602a      	str	r2, [r5, #0]
 8019958:	681d      	ldr	r5, [r3, #0]
 801995a:	6862      	ldr	r2, [r4, #4]
 801995c:	2100      	movs	r1, #0
 801995e:	4628      	mov	r0, r5
 8019960:	f7e6 fc36 	bl	80001d0 <memchr>
 8019964:	b108      	cbz	r0, 801996a <_printf_i+0x1f2>
 8019966:	1b40      	subs	r0, r0, r5
 8019968:	6060      	str	r0, [r4, #4]
 801996a:	6863      	ldr	r3, [r4, #4]
 801996c:	6123      	str	r3, [r4, #16]
 801996e:	2300      	movs	r3, #0
 8019970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019974:	e7a8      	b.n	80198c8 <_printf_i+0x150>
 8019976:	6923      	ldr	r3, [r4, #16]
 8019978:	462a      	mov	r2, r5
 801997a:	4649      	mov	r1, r9
 801997c:	4640      	mov	r0, r8
 801997e:	47d0      	blx	sl
 8019980:	3001      	adds	r0, #1
 8019982:	d0ab      	beq.n	80198dc <_printf_i+0x164>
 8019984:	6823      	ldr	r3, [r4, #0]
 8019986:	079b      	lsls	r3, r3, #30
 8019988:	d413      	bmi.n	80199b2 <_printf_i+0x23a>
 801998a:	68e0      	ldr	r0, [r4, #12]
 801998c:	9b03      	ldr	r3, [sp, #12]
 801998e:	4298      	cmp	r0, r3
 8019990:	bfb8      	it	lt
 8019992:	4618      	movlt	r0, r3
 8019994:	e7a4      	b.n	80198e0 <_printf_i+0x168>
 8019996:	2301      	movs	r3, #1
 8019998:	4632      	mov	r2, r6
 801999a:	4649      	mov	r1, r9
 801999c:	4640      	mov	r0, r8
 801999e:	47d0      	blx	sl
 80199a0:	3001      	adds	r0, #1
 80199a2:	d09b      	beq.n	80198dc <_printf_i+0x164>
 80199a4:	3501      	adds	r5, #1
 80199a6:	68e3      	ldr	r3, [r4, #12]
 80199a8:	9903      	ldr	r1, [sp, #12]
 80199aa:	1a5b      	subs	r3, r3, r1
 80199ac:	42ab      	cmp	r3, r5
 80199ae:	dcf2      	bgt.n	8019996 <_printf_i+0x21e>
 80199b0:	e7eb      	b.n	801998a <_printf_i+0x212>
 80199b2:	2500      	movs	r5, #0
 80199b4:	f104 0619 	add.w	r6, r4, #25
 80199b8:	e7f5      	b.n	80199a6 <_printf_i+0x22e>
 80199ba:	bf00      	nop
 80199bc:	0801cc33 	.word	0x0801cc33
 80199c0:	0801cc44 	.word	0x0801cc44

080199c4 <_read_r>:
 80199c4:	b538      	push	{r3, r4, r5, lr}
 80199c6:	4d07      	ldr	r5, [pc, #28]	; (80199e4 <_read_r+0x20>)
 80199c8:	4604      	mov	r4, r0
 80199ca:	4608      	mov	r0, r1
 80199cc:	4611      	mov	r1, r2
 80199ce:	2200      	movs	r2, #0
 80199d0:	602a      	str	r2, [r5, #0]
 80199d2:	461a      	mov	r2, r3
 80199d4:	f7e6 ffd8 	bl	8000988 <_read>
 80199d8:	1c43      	adds	r3, r0, #1
 80199da:	d102      	bne.n	80199e2 <_read_r+0x1e>
 80199dc:	682b      	ldr	r3, [r5, #0]
 80199de:	b103      	cbz	r3, 80199e2 <_read_r+0x1e>
 80199e0:	6023      	str	r3, [r4, #0]
 80199e2:	bd38      	pop	{r3, r4, r5, pc}
 80199e4:	2000e6f4 	.word	0x2000e6f4

080199e8 <abort>:
 80199e8:	b508      	push	{r3, lr}
 80199ea:	2006      	movs	r0, #6
 80199ec:	f000 f82c 	bl	8019a48 <raise>
 80199f0:	2001      	movs	r0, #1
 80199f2:	f7e6 ffbf 	bl	8000974 <_exit>

080199f6 <_raise_r>:
 80199f6:	291f      	cmp	r1, #31
 80199f8:	b538      	push	{r3, r4, r5, lr}
 80199fa:	4604      	mov	r4, r0
 80199fc:	460d      	mov	r5, r1
 80199fe:	d904      	bls.n	8019a0a <_raise_r+0x14>
 8019a00:	2316      	movs	r3, #22
 8019a02:	6003      	str	r3, [r0, #0]
 8019a04:	f04f 30ff 	mov.w	r0, #4294967295
 8019a08:	bd38      	pop	{r3, r4, r5, pc}
 8019a0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019a0c:	b112      	cbz	r2, 8019a14 <_raise_r+0x1e>
 8019a0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019a12:	b94b      	cbnz	r3, 8019a28 <_raise_r+0x32>
 8019a14:	4620      	mov	r0, r4
 8019a16:	f000 f831 	bl	8019a7c <_getpid_r>
 8019a1a:	462a      	mov	r2, r5
 8019a1c:	4601      	mov	r1, r0
 8019a1e:	4620      	mov	r0, r4
 8019a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a24:	f000 b818 	b.w	8019a58 <_kill_r>
 8019a28:	2b01      	cmp	r3, #1
 8019a2a:	d00a      	beq.n	8019a42 <_raise_r+0x4c>
 8019a2c:	1c59      	adds	r1, r3, #1
 8019a2e:	d103      	bne.n	8019a38 <_raise_r+0x42>
 8019a30:	2316      	movs	r3, #22
 8019a32:	6003      	str	r3, [r0, #0]
 8019a34:	2001      	movs	r0, #1
 8019a36:	e7e7      	b.n	8019a08 <_raise_r+0x12>
 8019a38:	2400      	movs	r4, #0
 8019a3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019a3e:	4628      	mov	r0, r5
 8019a40:	4798      	blx	r3
 8019a42:	2000      	movs	r0, #0
 8019a44:	e7e0      	b.n	8019a08 <_raise_r+0x12>
	...

08019a48 <raise>:
 8019a48:	4b02      	ldr	r3, [pc, #8]	; (8019a54 <raise+0xc>)
 8019a4a:	4601      	mov	r1, r0
 8019a4c:	6818      	ldr	r0, [r3, #0]
 8019a4e:	f7ff bfd2 	b.w	80199f6 <_raise_r>
 8019a52:	bf00      	nop
 8019a54:	20000110 	.word	0x20000110

08019a58 <_kill_r>:
 8019a58:	b538      	push	{r3, r4, r5, lr}
 8019a5a:	4d07      	ldr	r5, [pc, #28]	; (8019a78 <_kill_r+0x20>)
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	4604      	mov	r4, r0
 8019a60:	4608      	mov	r0, r1
 8019a62:	4611      	mov	r1, r2
 8019a64:	602b      	str	r3, [r5, #0]
 8019a66:	f7e6 ff73 	bl	8000950 <_kill>
 8019a6a:	1c43      	adds	r3, r0, #1
 8019a6c:	d102      	bne.n	8019a74 <_kill_r+0x1c>
 8019a6e:	682b      	ldr	r3, [r5, #0]
 8019a70:	b103      	cbz	r3, 8019a74 <_kill_r+0x1c>
 8019a72:	6023      	str	r3, [r4, #0]
 8019a74:	bd38      	pop	{r3, r4, r5, pc}
 8019a76:	bf00      	nop
 8019a78:	2000e6f4 	.word	0x2000e6f4

08019a7c <_getpid_r>:
 8019a7c:	f7e6 bf60 	b.w	8000940 <_getpid>

08019a80 <_init>:
 8019a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a82:	bf00      	nop
 8019a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a86:	bc08      	pop	{r3}
 8019a88:	469e      	mov	lr, r3
 8019a8a:	4770      	bx	lr

08019a8c <_fini>:
 8019a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a8e:	bf00      	nop
 8019a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a92:	bc08      	pop	{r3}
 8019a94:	469e      	mov	lr, r3
 8019a96:	4770      	bx	lr
