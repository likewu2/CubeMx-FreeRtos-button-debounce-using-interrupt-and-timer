
stm32f407vgtx_debounce2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017968  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035cc  08017af8  08017af8  00027af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0c4  0801b0c4  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0c4  0801b0c4  0002b0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0cc  0801b0cc  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0cc  0801b0cc  0002b0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b0d0  0801b0d0  0002b0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801b0d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          0000c434  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  2000c4b4  2000c4b4  00030080  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000335c3  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000800d  00000000  00000000  0006366d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002318  00000000  00000000  0006b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021c0  00000000  00000000  0006d998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032d34  00000000  00000000  0006fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003693e  00000000  00000000  000a288c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecfb5  00000000  00000000  000d91ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c617f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000995c  00000000  00000000  001c61d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  001cfb2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017ae0 	.word	0x08017ae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08017ae0 	.word	0x08017ae0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14d      	bne.n	800035c <__udivmoddi4+0xac>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d968      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b152      	cbz	r2, 80002e2 <__udivmoddi4+0x32>
 80002cc:	fa01 f302 	lsl.w	r3, r1, r2
 80002d0:	f1c2 0120 	rsb	r1, r2, #32
 80002d4:	fa20 f101 	lsr.w	r1, r0, r1
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	ea41 0803 	orr.w	r8, r1, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fbb8 fef5 	udiv	lr, r8, r5
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	fb05 831e 	mls	r3, r5, lr, r8
 80002f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f8:	fb0e f107 	mul.w	r1, lr, r7
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d90b      	bls.n	8000318 <__udivmoddi4+0x68>
 8000300:	eb1c 0303 	adds.w	r3, ip, r3
 8000304:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000308:	f080 811e 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030c:	4299      	cmp	r1, r3
 800030e:	f240 811b 	bls.w	8000548 <__udivmoddi4+0x298>
 8000312:	f1ae 0e02 	sub.w	lr, lr, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000320:	fb05 3310 	mls	r3, r5, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x96>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 8108 	bcs.w	800054c <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8105 	bls.w	800054c <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034c:	2100      	movs	r1, #0
 800034e:	b11e      	cbz	r6, 8000358 <__udivmoddi4+0xa8>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c6 4300 	strd	r4, r3, [r6]
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0xc2>
 8000360:	2e00      	cmp	r6, #0
 8000362:	f000 80ee 	beq.w	8000542 <__udivmoddi4+0x292>
 8000366:	2100      	movs	r1, #0
 8000368:	e9c6 0500 	strd	r0, r5, [r6]
 800036c:	4608      	mov	r0, r1
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb65 0303 	sbc.w	r3, r5, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e2      	beq.n	8000358 <__udivmoddi4+0xa8>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7df      	b.n	8000358 <__udivmoddi4+0xa8>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8091 	bne.w	80004c8 <__udivmoddi4+0x218>
 80003a6:	eba1 050c 	sub.w	r5, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003b8:	fb07 5013 	mls	r0, r7, r3, r5
 80003bc:	0c25      	lsrs	r5, r4, #16
 80003be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0505 	adds.w	r5, ip, r5
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a2d      	subs	r5, r5, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003e4:	fb07 5510 	mls	r5, r7, r0, r5
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4628      	mov	r0, r5
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79e      	b.n	800034e <__udivmoddi4+0x9e>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa05 f301 	lsl.w	r3, r5, r1
 8000426:	431c      	orrs	r4, r3
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f301 	lsl.w	r3, r0, r1
 8000432:	fbb5 f8f9 	udiv	r8, r5, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 5518 	mls	r5, r9, r8, r5
 8000440:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	42a8      	cmp	r0, r5
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0505 	adds.w	r5, ip, r5
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	42a8      	cmp	r0, r5
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4465      	add	r5, ip
 8000468:	1a2d      	subs	r5, r5, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000470:	fb09 5510 	mls	r5, r9, r0, r5
 8000474:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	45ae      	cmp	lr, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	45ae      	cmp	lr, r5
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba5 050e 	sub.w	r5, r5, lr
 800049e:	42a5      	cmp	r5, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15e      	cbz	r6, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb65 050e 	sbc.w	r5, r5, lr
 80004b2:	fa05 f707 	lsl.w	r7, r5, r7
 80004b6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c6 7500 	strd	r7, r5, [r6]
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c2 0320 	rsb	r3, r2, #32
 80004cc:	fa20 f103 	lsr.w	r1, r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa25 f303 	lsr.w	r3, r5, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	430d      	orrs	r5, r1
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004e8:	fb07 3011 	mls	r0, r7, r1, r3
 80004ec:	0c2b      	lsrs	r3, r5, #16
 80004ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004f2:	fb01 f00e 	mul.w	r0, r1, lr
 80004f6:	4298      	cmp	r0, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f101 38ff 	add.w	r8, r1, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	4298      	cmp	r0, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3902      	subs	r1, #2
 800050e:	4463      	add	r3, ip
 8000510:	1a1b      	subs	r3, r3, r0
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3310 	mls	r3, r7, r0, r3
 800051c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000520:	fb00 f30e 	mul.w	r3, r0, lr
 8000524:	42ab      	cmp	r3, r5
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0505 	adds.w	r5, ip, r5
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3802      	subs	r0, #2
 8000538:	4465      	add	r5, ip
 800053a:	1aed      	subs	r5, r5, r3
 800053c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e707      	b.n	8000358 <__udivmoddi4+0xa8>
 8000548:	4686      	mov	lr, r0
 800054a:	e6e5      	b.n	8000318 <__udivmoddi4+0x68>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fa      	b.n	8000346 <__udivmoddi4+0x96>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4640      	mov	r0, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4641      	mov	r1, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4465      	add	r5, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4608      	mov	r0, r1
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x28>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	2000009c 	.word	0x2000009c
 80005b0:	20000150 	.word	0x20000150

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fc61 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f81f 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8e5 	bl	8000790 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005c6:	f000 f885 	bl	80006d4 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 f8b7 	bl	800073c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x44>)
 80005d0:	1d3c      	adds	r4, r7, #4
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f006 fde9 	bl	80071bc <osThreadCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <main+0x48>)
 80005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f006 fdcd 	bl	800718e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x40>
 80005f6:	bf00      	nop
 80005f8:	08017b04 	.word	0x08017b04
 80005fc:	200003bc 	.word	0x200003bc

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f016 fbd0 	bl	8016db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067e:	2307      	movs	r3, #7
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fffa 	bl	8003680 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000692:	f000 f93f 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2105      	movs	r1, #5
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fa5b 	bl	8003b70 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c0:	f000 f928 	bl	8000914 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_CAN1_Init+0x60>)
 80006da:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_CAN1_Init+0x64>)
 80006dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_CAN1_Init+0x60>)
 80006e0:	2210      	movs	r2, #16
 80006e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_CAN1_Init+0x60>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_CAN1_Init+0x60>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_CAN1_Init+0x60>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_CAN1_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_CAN1_Init+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_CAN1_Init+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_CAN1_Init+0x60>)
 800070a:	2200      	movs	r2, #0
 800070c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_CAN1_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_CAN1_Init+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_CAN1_Init+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_CAN1_Init+0x60>)
 8000722:	f000 fc3f 	bl	8000fa4 <HAL_CAN_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f8f2 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000350 	.word	0x20000350
 8000738:	40006400 	.word	0x40006400

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f003 fc20 	bl	8003fb8 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f8c9 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000378 	.word	0x20000378
 800078c:	40011000 	.word	0x40011000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b50      	ldr	r3, [pc, #320]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a4f      	ldr	r2, [pc, #316]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b4d      	ldr	r3, [pc, #308]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b49      	ldr	r3, [pc, #292]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a48      	ldr	r2, [pc, #288]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b46      	ldr	r3, [pc, #280]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b42      	ldr	r3, [pc, #264]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a41      	ldr	r2, [pc, #260]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <MX_GPIO_Init+0x15c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a3a      	ldr	r2, [pc, #232]	; (80008ec <MX_GPIO_Init+0x15c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b38      	ldr	r3, [pc, #224]	; (80008ec <MX_GPIO_Init+0x15c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b34      	ldr	r3, [pc, #208]	; (80008ec <MX_GPIO_Init+0x15c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a33      	ldr	r2, [pc, #204]	; (80008ec <MX_GPIO_Init+0x15c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <MX_GPIO_Init+0x15c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0x15c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <MX_GPIO_Init+0x15c>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0x15c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000854:	4826      	ldr	r0, [pc, #152]	; (80008f0 <MX_GPIO_Init+0x160>)
 8000856:	f001 fe65 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000860:	4824      	ldr	r0, [pc, #144]	; (80008f4 <MX_GPIO_Init+0x164>)
 8000862:	f001 fe5f 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY2_Pin KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin|KEY1_Pin|KEY0_Pin;
 8000866:	231c      	movs	r3, #28
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	481d      	ldr	r0, [pc, #116]	; (80008f0 <MX_GPIO_Init+0x160>)
 800087a:	f001 fcb9 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4819      	ldr	r0, [pc, #100]	; (80008f8 <MX_GPIO_Init+0x168>)
 8000894:	f001 fcac 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000898:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	480f      	ldr	r0, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x160>)
 80008b2:	f001 fc9d 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_GPIO_Init+0x164>)
 80008d0:	f001 fc8e 	bl	80021f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2105      	movs	r1, #5
 80008d8:	2006      	movs	r0, #6
 80008da:	f000 fd36 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008de:	2006      	movs	r0, #6
 80008e0:	f000 fd4f 	bl	8001382 <HAL_NVIC_EnableIRQ>

}
 80008e4:	bf00      	nop
 80008e6:	3730      	adds	r7, #48	; 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	40020000 	.word	0x40020000

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();

  /* init code for LWIP */
  MX_LWIP_Init();
 8000904:	f004 fe8e 	bl	8005624 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  START_TEST();
 8000908:	f000 fa24 	bl	8000d54 <START_TEST>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f006 fca1 	bl	8007254 <osDelay>
 8000912:	e7fb      	b.n	800090c <StartDefaultTask+0x10>

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_MspInit+0x54>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a11      	ldr	r2, [pc, #68]	; (8000974 <HAL_MspInit+0x54>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x54>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_MspInit+0x54>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <HAL_MspInit+0x54>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_MspInit+0x54>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	210f      	movs	r1, #15
 8000962:	f06f 0001 	mvn.w	r0, #1
 8000966:	f000 fcf0 	bl	800134a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_CAN_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12b      	bne.n	80009f2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_CAN_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_CAN_MspInit+0x88>)
 80009a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_CAN_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_CAN_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_CAN_MspInit+0x88>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_CAN_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009d2:	2303      	movs	r3, #3
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009e2:	2309      	movs	r3, #9
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_CAN_MspInit+0x8c>)
 80009ee:	f001 fbff 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40006400 	.word	0x40006400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <HAL_UART_MspInit+0x84>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d12c      	bne.n	8000a84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a34:	f043 0310 	orr.w	r3, r3, #16
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f003 0310 	and.w	r3, r3, #16
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_UART_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a74:	2307      	movs	r3, #7
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_UART_MspInit+0x8c>)
 8000a80:	f001 fbb6 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40011000 	.word	0x40011000
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac6:	f000 fa2d 	bl	8000f24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000aca:	f008 fbaf 	bl	800922c <xTaskGetSchedulerState>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d001      	beq.n	8000ad8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ad4:	f008 ff38 	bl	8009948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f001 fd37 	bl	8002554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <ETH_IRQHandler+0x10>)
 8000af2:	f000 fed5 	bl	80018a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20004ee8 	.word	0x20004ee8

08000b00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <OTG_FS_IRQHandler+0x10>)
 8000b06:	f001 fd47 	bl	8002598 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000bf98 	.word	0x2000bf98

08000b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	return 1;
 8000b18:	2301      	movs	r3, #1
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
	...

08000b24 <_kill>:

int _kill(int pid, int sig)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_kill+0x20>)
 8000b30:	2216      	movs	r2, #22
 8000b32:	601a      	str	r2, [r3, #0]
	return -1;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	2000c4b0 	.word	0x2000c4b0

08000b48 <_exit>:

void _exit (int status)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ffe5 	bl	8000b24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b5a:	e7fe      	b.n	8000b5a <_exit+0x12>

08000b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
	}

return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e009      	b.n	8000bbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf1      	blt.n	8000ba8 <_write+0x12>
	}
	return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_close>:

int _close(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf4:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <_isatty>:

int _isatty(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	return 1;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
	return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d205      	bcs.n	8000c6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <_sbrk+0x6c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00004000 	.word	0x00004000
 8000c94:	200003c0 	.word	0x200003c0
 8000c98:	2000c4b8 	.word	0x2000c4b8
 8000c9c:	2000c4b0 	.word	0x2000c4b0

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <test_mqtt_netif_output>:
const ip_addr_t test_mqtt_remote_ip = IPADDR4_INIT_BYTES(192, 168, 220, 1);
const ip_addr_t test_mqtt_netmask = IPADDR4_INIT_BYTES(255, 255, 255, 0);

static err_t test_mqtt_netif_output(struct netif *netif, struct pbuf *p,
       const ip4_addr_t *ipaddr)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(ipaddr);
  LWIP_UNUSED_ARG(p);
  return ERR_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <test_mqtt_init_netif>:

static void
test_mqtt_init_netif(struct netif *netif, const ip_addr_t *ip_addr, const ip_addr_t *netmask)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  struct netif *n;
  memset(netif, 0, sizeof(struct netif));
 8000cd0:	2234      	movs	r2, #52	; 0x34
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f016 f86d 	bl	8016db4 <memset>
  netif->output = test_mqtt_netif_output;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <test_mqtt_init_netif+0x70>)
 8000cde:	615a      	str	r2, [r3, #20]
  netif->flags |= NETIF_FLAG_UP | NETIF_FLAG_LINK_UP;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000ce6:	f043 0305 	orr.w	r3, r3, #5
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ip_addr_copy_from_ip4(netif->netmask, *ip_2_ip4(netmask));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	609a      	str	r2, [r3, #8]
  ip_addr_copy_from_ip4(netif->ip_addr, *ip_2_ip4(ip_addr));
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	605a      	str	r2, [r3, #4]
  for (n = netif_list; n != NULL; n = n->next) {
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <test_mqtt_init_netif+0x74>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	e006      	b.n	8000d18 <test_mqtt_init_netif+0x54>
    if (n == netif) {
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d00c      	beq.n	8000d2c <test_mqtt_init_netif+0x68>
  for (n = netif_list; n != NULL; n = n->next) {
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f5      	bne.n	8000d0a <test_mqtt_init_netif+0x46>
      return;
    }
  }
  netif->next = NULL;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <test_mqtt_init_netif+0x74>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e000      	b.n	8000d2e <test_mqtt_init_netif+0x6a>
      return;
 8000d2c:	bf00      	nop
}
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08000cad 	.word	0x08000cad
 8000d38:	2000be2c 	.word	0x2000be2c

08000d3c <test_mqtt_connection_cb>:
  netif_default = old_netif_default;
  lwip_check_ensure_no_alloc(SKIP_POOL(MEMP_SYS_TIMEOUT));
}

static void test_mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	4613      	mov	r3, r2
 8000d48:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(client);
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(status);
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <START_TEST>:

void START_TEST(void)
{
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b09a      	sub	sp, #104	; 0x68
 8000d58:	af02      	add	r7, sp, #8
  mqtt_client_t* client;
  struct netif netif;
  err_t err;
  struct mqtt_connect_client_info_t client_info = {
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <START_TEST+0xc4>)
 8000d5c:	1d3c      	adds	r4, r7, #4
 8000d5e:	461d      	mov	r5, r3
 8000d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    NULL, NULL,
    10,
    NULL, NULL, 0, 0
  };
  struct pbuf *p;
  unsigned char rxbuf[] = {0x20, 0x02, 0x00, 0x00};
 8000d6c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000d70:	603b      	str	r3, [r7, #0]
  //LWIP_UNUSED_ARG(_i);

  test_mqtt_init_netif(&netif, &test_mqtt_local_ip, &test_mqtt_netmask);
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <START_TEST+0xc8>)
 8000d78:	4929      	ldr	r1, [pc, #164]	; (8000e20 <START_TEST+0xcc>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ffa2 	bl	8000cc4 <test_mqtt_init_netif>

  client = mqtt_client_new();
 8000d80:	f00a f9dc 	bl	800b13c <mqtt_client_new>
 8000d84:	65f8      	str	r0, [r7, #92]	; 0x5c
  //fail_unless(client != NULL);
  err = mqtt_client_connect(client, &test_mqtt_remote_ip, 1234, test_mqtt_connection_cb, NULL, &client_info);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <START_TEST+0xd0>)
 8000d90:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8000d94:	4924      	ldr	r1, [pc, #144]	; (8000e28 <START_TEST+0xd4>)
 8000d96:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d98:	f00a f9da 	bl	800b150 <mqtt_client_connect>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  //fail_unless(err == ERR_OK);

  client->conn->connected(client->conn->callback_arg, client->conn, ERR_OK);
 8000da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000dac:	68d2      	ldr	r2, [r2, #12]
 8000dae:	6910      	ldr	r0, [r2, #16]
 8000db0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000db2:	68d1      	ldr	r1, [r2, #12]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4798      	blx	r3
  p = pbuf_alloc(PBUF_RAW, sizeof(rxbuf), PBUF_REF);
 8000db8:	2241      	movs	r2, #65	; 0x41
 8000dba:	2104      	movs	r1, #4
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f00b fddf 	bl	800c980 <pbuf_alloc>
 8000dc2:	6578      	str	r0, [r7, #84]	; 0x54
  //fail_unless(p != NULL);
  p->payload = rxbuf;
 8000dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dc6:	463a      	mov	r2, r7
 8000dc8:	605a      	str	r2, [r3, #4]
  /* since we hack the rx path, we have to hack the rx window, too: */
  client->conn->rcv_wnd -= p->tot_len;
 8000dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd2:	891a      	ldrh	r2, [r3, #8]
 8000dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	851a      	strh	r2, [r3, #40]	; 0x28
  if (client->conn->recv(client->conn->callback_arg, client->conn, p, ERR_OK) != ERR_OK) {
 8000dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8000de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	6918      	ldr	r0, [r3, #16]
 8000dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dee:	68d9      	ldr	r1, [r3, #12]
 8000df0:	2300      	movs	r3, #0
 8000df2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000df4:	47a0      	blx	r4
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <START_TEST+0xae>
    pbuf_free(p);
 8000dfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000dfe:	f00c f8a3 	bl	800cf48 <pbuf_free>
  }

  mqtt_disconnect(client);
 8000e02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e04:	f00a fc20 	bl	800b648 <mqtt_disconnect>
  /* fixme: mqtt_client_fre() is missing... */
  mem_free(client);
 8000e08:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e0a:	f00a fe8b 	bl	800bb24 <mem_free>
}
 8000e0e:	bf00      	nop
 8000e10:	3760      	adds	r7, #96	; 0x60
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bdb0      	pop	{r4, r5, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08017b28 	.word	0x08017b28
 8000e1c:	0801ae40 	.word	0x0801ae40
 8000e20:	0801ae38 	.word	0x0801ae38
 8000e24:	08000d3d 	.word	0x08000d3d
 8000e28:	0801ae3c 	.word	0x0801ae3c

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ff23 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f015 fef9 	bl	8016c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fba9 	bl	80005b4 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e70:	0801b0d4 	.word	0x0801b0d4
  ldr r2, =_sbss
 8000e74:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e78:	2000c4b4 	.word	0x2000c4b4

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fa43 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fd34 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fa5b 	bl	800139e <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 fa23 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <HAL_IncTick+0x20>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000008 	.word	0x20000008
 8000f44:	200003c4 	.word	0x200003c4

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	200003c4 	.word	0x200003c4

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0ed      	b.n	8001192 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fcd8 	bl	8000978 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd8:	f7ff ffb6 	bl	8000f48 <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fde:	e012      	b.n	8001006 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe0:	f7ff ffb2 	bl	8000f48 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b0a      	cmp	r3, #10
 8000fec:	d90b      	bls.n	8001006 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2205      	movs	r2, #5
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0c5      	b.n	8001192 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0e5      	beq.n	8000fe0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0202 	bic.w	r2, r2, #2
 8001022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001024:	f7ff ff90 	bl	8000f48 <HAL_GetTick>
 8001028:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800102a:	e012      	b.n	8001052 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800102c:	f7ff ff8c 	bl	8000f48 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d90b      	bls.n	8001052 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2205      	movs	r2, #5
 800104a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e09f      	b.n	8001192 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e5      	bne.n	800102c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e1b      	ldrb	r3, [r3, #24]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7e5b      	ldrb	r3, [r3, #25]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e9b      	ldrb	r3, [r3, #26]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0220 	orr.w	r2, r2, #32
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e007      	b.n	80010de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0220 	bic.w	r2, r2, #32
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7edb      	ldrb	r3, [r3, #27]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0210 	bic.w	r2, r2, #16
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0210 	orr.w	r2, r2, #16
 8001106:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7f1b      	ldrb	r3, [r3, #28]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d108      	bne.n	8001122 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0208 	orr.w	r2, r2, #8
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e007      	b.n	8001132 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0208 	bic.w	r2, r2, #8
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7f5b      	ldrb	r3, [r3, #29]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d108      	bne.n	800114c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 0204 	orr.w	r2, r2, #4
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e007      	b.n	800115c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0204 	bic.w	r2, r2, #4
 800115a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	ea42 0103 	orr.w	r1, r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4906      	ldr	r1, [pc, #24]	; (8001234 <__NVIC_EnableIRQ+0x34>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff90 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff2d 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff42 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff90 	bl	800128c <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5f 	bl	8001238 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff35 	bl	8001200 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e06c      	b.n	80014a4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d106      	bne.n	80013e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2223      	movs	r2, #35	; 0x23
 80013d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f869 	bl	80014b4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_ETH_Init+0xf4>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <HAL_ETH_Init+0xf4>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_ETH_Init+0xf4>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_ETH_Init+0xf8>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <HAL_ETH_Init+0xf8>)
 8001404:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001408:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <HAL_ETH_Init+0xf8>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	4927      	ldr	r1, [pc, #156]	; (80014b0 <HAL_ETH_Init+0xf8>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <HAL_ETH_Init+0xf8>)
 800141a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001432:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001434:	f7ff fd88 	bl	8000f48 <HAL_GetTick>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800143a:	e011      	b.n	8001460 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800143c:	f7ff fd84 	bl	8000f48 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800144a:	d909      	bls.n	8001460 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2204      	movs	r2, #4
 8001450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	22e0      	movs	r2, #224	; 0xe0
 8001458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e021      	b.n	80014a4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1e4      	bne.n	800143c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fc1a 	bl	8001cac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fcbf 	bl	8001dfc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fd14 	bl	8001eac <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	461a      	mov	r2, r3
 800148a:	2100      	movs	r1, #0
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fc7f 	bl	8001d90 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2210      	movs	r2, #16
 800149e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40013800 	.word	0x40013800

080014b4 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e045      	b.n	8001576 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f0:	2b23      	cmp	r3, #35	; 0x23
 80014f2:	d13f      	bne.n	8001574 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80014fc:	2201      	movs	r2, #1
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fd3f 	bl	8001f84 <ETH_Prepare_Tx_Descriptors>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	f043 0202 	orr.w	r2, r3, #2
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e02a      	b.n	8001576 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001520:	f3bf 8f4f 	dsb	sy
}
 8001524:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	2b03      	cmp	r3, #3
 8001536:	d904      	bls.n	8001542 <HAL_ETH_Transmit_IT+0x7c>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	1f1a      	subs	r2, r3, #4
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155c:	461a      	mov	r2, r3
 800155e:	2304      	movs	r3, #4
 8001560:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156a:	461a      	mov	r2, r3
 800156c:	2300      	movs	r3, #0
 800156e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e000      	b.n	8001576 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
  }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b088      	sub	sp, #32
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0a8      	b.n	80016fc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015b0:	2b23      	cmp	r3, #35	; 0x23
 80015b2:	d001      	beq.n	80015b8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0a1      	b.n	80016fc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	3212      	adds	r2, #18
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015ce:	f1c3 0304 	rsb	r3, r3, #4
 80015d2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015d4:	e06a      	b.n	80016ac <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d103      	bne.n	8001606 <HAL_ETH_ReadData+0x88>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d040      	beq.n	8001688 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00c      	beq.n	800164a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0c1b      	lsrs	r3, r3, #16
 8001636:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800163a:	3b04      	subs	r3, #4
 800163c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001646:	2301      	movs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001662:	461a      	mov	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f004 fb7a 	bl	8005d60 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	441a      	add	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	3301      	adds	r3, #1
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d902      	bls.n	800169a <HAL_ETH_ReadData+0x11c>
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3b04      	subs	r3, #4
 8001698:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	3212      	adds	r2, #18
 80016a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db06      	blt.n	80016c2 <HAL_ETH_ReadData+0x144>
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d202      	bcs.n	80016c2 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d089      	beq.n	80015d6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	441a      	add	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f814 	bl	8001704 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001710:	2301      	movs	r3, #1
 8001712:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001718:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	3212      	adds	r2, #18
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800172a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800172c:	e03e      	b.n	80017ac <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d112      	bne.n	800175c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fae0 	bl	8005d00 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	74fb      	strb	r3, [r7, #19]
 800174a:	e007      	b.n	800175c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	461a      	mov	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	461a      	mov	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800175c:	7cfb      	ldrb	r3, [r7, #19]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d024      	beq.n	80017ac <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001762:	f3bf 8f5f 	dmb	sy
}
 8001766:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800176e:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <ETH_UpdateDescriptor+0xe0>)
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e003      	b.n	8001788 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8001786:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	3301      	adds	r3, #1
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d902      	bls.n	800179a <ETH_UpdateDescriptor+0x96>
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3b04      	subs	r3, #4
 8001798:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	3212      	adds	r2, #18
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	617b      	str	r3, [r7, #20]
      desccount--;
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <ETH_UpdateDescriptor+0xb4>
 80017b2:	7cfb      	ldrb	r3, [r7, #19]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ba      	bne.n	800172e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d00c      	beq.n	80017dc <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ca:	461a      	mov	r2, r3
 80017cc:	2300      	movs	r3, #0
 80017ce:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	800043e8 	.word	0x800043e8

080017e8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3318      	adds	r3, #24
 80017f4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001806:	e03f      	b.n	8001888 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001808:	2301      	movs	r3, #1
 800180a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3b01      	subs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	3304      	adds	r3, #4
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	3301      	adds	r3, #1
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d028      	beq.n	8001888 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68d9      	ldr	r1, [r3, #12]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db1b      	blt.n	8001884 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	3304      	adds	r3, #4
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	f004 fac0 	bl	8005dde <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	3304      	adds	r3, #4
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	3301      	adds	r3, #1
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
 8001882:	e001      	b.n	8001888 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_ETH_ReleaseTxPacket+0xac>
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1b9      	bne.n	8001808 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b6:	2b40      	cmp	r3, #64	; 0x40
 80018b8:	d112      	bne.n	80018e0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	d109      	bne.n	80018e0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_ETH_IRQHandler+0x178>)
 80018d8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f003 fff2 	bl	80058c4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d113      	bne.n	800191a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10a      	bne.n	800191a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190c:	461a      	mov	r2, r3
 800190e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001912:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f003 ffe5 	bl	80058e4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800192c:	d14c      	bne.n	80019c8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800193c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001940:	d142      	bne.n	80019c8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001948:	f043 0208 	orr.w	r2, r3, #8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001964:	d11a      	bne.n	800199c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_ETH_IRQHandler+0x17c>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800198c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001990:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	22e0      	movs	r2, #224	; 0xe0
 8001996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800199a:	e012      	b.n	80019c2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	f248 6380 	movw	r3, #34432	; 0x8680
 80019aa:	4013      	ands	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ba:	461a      	mov	r2, r3
 80019bc:	f248 6380 	movw	r3, #34432	; 0x8680
 80019c0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f003 ff9e 	bl	8005904 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d10e      	bne.n	80019f4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f81c 	bl	8001a24 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_ETH_IRQHandler+0x180>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_ETH_IRQHandler+0x180>)
 8001a02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a06:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f814 	bl	8001a36 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	00010040 	.word	0x00010040
 8001a1c:	007e2000 	.word	0x007e2000
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <ETH_SetMACConfig+0x134>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	7c1b      	ldrb	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <ETH_SetMACConfig+0x28>
 8001a82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a86:	e000      	b.n	8001a8a <ETH_SetMACConfig+0x2a>
 8001a88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	7c5b      	ldrb	r3, [r3, #17]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <ETH_SetMACConfig+0x38>
 8001a92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a96:	e000      	b.n	8001a9a <ETH_SetMACConfig+0x3a>
 8001a98:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a9a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aa0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	7fdb      	ldrb	r3, [r3, #31]
 8001aa6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001aa8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	7f92      	ldrb	r2, [r2, #30]
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	d102      	bne.n	8001abe <ETH_SetMACConfig+0x5e>
 8001ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001abc:	e000      	b.n	8001ac0 <ETH_SetMACConfig+0x60>
 8001abe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ac0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	7f1b      	ldrb	r3, [r3, #28]
 8001ac6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ac8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ace:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ad6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d102      	bne.n	8001ae8 <ETH_SetMACConfig+0x88>
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	e000      	b.n	8001aea <ETH_SetMACConfig+0x8a>
 8001ae8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001aea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7bdb      	ldrb	r3, [r3, #15]
 8001af0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001af2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001af8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b02:	4313      	orrs	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff fa1e 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b36:	4013      	ands	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b46:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001b4c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001b54:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001b5c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b64:	4313      	orrs	r3, r2
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff f9ed 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	619a      	str	r2, [r3, #24]
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	ff20810f 	.word	0xff20810f

08001b98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <ETH_SetDMAConfig+0x110>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	7b1b      	ldrb	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <ETH_SetDMAConfig+0x2c>
 8001bbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bc2:	e000      	b.n	8001bc6 <ETH_SetDMAConfig+0x2e>
 8001bc4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	7b5b      	ldrb	r3, [r3, #13]
 8001bca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bcc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	7f52      	ldrb	r2, [r2, #29]
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d102      	bne.n	8001bdc <ETH_SetDMAConfig+0x44>
 8001bd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bda:	e000      	b.n	8001bde <ETH_SetDMAConfig+0x46>
 8001bdc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	7b9b      	ldrb	r3, [r3, #14]
 8001be4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001be6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	7f1b      	ldrb	r3, [r3, #28]
 8001bf2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001bf4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	7f9b      	ldrb	r3, [r3, #30]
 8001bfa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bfc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c0a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff f994 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	791b      	ldrb	r3, [r3, #4]
 8001c46:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c4c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c52:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c58:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c60:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c62:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c6a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c70:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c7e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff f965 	bl	8000f5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	f8de3f23 	.word	0xf8de3f23

08001cac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0a6      	sub	sp, #152	; 0x98
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fe9a 	bl	8001a60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d60:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	4619      	mov	r1, r3
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff08 	bl	8001b98 <ETH_SetDMAConfig>
}
 8001d88:	bf00      	nop
 8001d8a:	3798      	adds	r7, #152	; 0x98
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3305      	adds	r3, #5
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	3204      	adds	r2, #4
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <ETH_MACAddressConfig+0x64>)
 8001db2:	4413      	add	r3, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	061a      	lsls	r2, r3, #24
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	7812      	ldrb	r2, [r2, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <ETH_MACAddressConfig+0x68>)
 8001de2:	4413      	add	r3, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	6013      	str	r3, [r2, #0]
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40028040 	.word	0x40028040
 8001df8:	40028044 	.word	0x40028044

08001dfc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e03e      	b.n	8001e88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	3206      	adds	r2, #6
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d80c      	bhi.n	8001e6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68d9      	ldr	r1, [r3, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	e004      	b.n	8001e76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d9bd      	bls.n	8001e0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea0:	611a      	str	r2, [r3, #16]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e046      	b.n	8001f48 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001efe:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	3212      	adds	r2, #18
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d80c      	bhi.n	8001f38 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6919      	ldr	r1, [r3, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	e004      	b.n	8001f42 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d9b5      	bls.n	8001eba <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f78:	60da      	str	r2, [r3, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b08d      	sub	sp, #52	; 0x34
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3318      	adds	r3, #24
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fae:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fc6:	d007      	beq.n	8001fd8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	3304      	adds	r3, #4
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e103      	b.n	80021e4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	3301      	adds	r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001ff4:	f023 031f 	bic.w	r3, r3, #31
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	6852      	ldr	r2, [r2, #4]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	431a      	orrs	r2, r3
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002062:	f3bf 8f5f 	dmb	sy
}
 8002066:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002074:	e084      	b.n	8002180 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e005      	b.n	80020a2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	3301      	adds	r3, #1
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d902      	bls.n	80020b4 <ETH_Prepare_Tx_Descriptors+0x130>
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	3b04      	subs	r3, #4
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020d6:	d007      	beq.n	80020e8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	3304      	adds	r3, #4
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d029      	beq.n	800213c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020fa:	e019      	b.n	8002130 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80020fc:	f3bf 8f5f 	dmb	sy
}
 8002100:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	3301      	adds	r3, #1
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	2b03      	cmp	r3, #3
 8002118:	d902      	bls.n	8002120 <ETH_Prepare_Tx_Descriptors+0x19c>
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	3b04      	subs	r3, #4
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	3301      	adds	r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	429a      	cmp	r2, r3
 8002136:	d3e1      	bcc.n	80020fc <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002138:	2302      	movs	r3, #2
 800213a:	e053      	b.n	80021e4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	3301      	adds	r3, #1
 8002140:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800215a:	f023 031f 	bic.w	r3, r3, #31
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	6852      	ldr	r2, [r2, #4]
 8002162:	431a      	orrs	r2, r3
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	3301      	adds	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800216e:	f3bf 8f5f 	dmb	sy
}
 8002172:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f af76 	bne.w	8002076 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e005      	b.n	80021aa <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	3304      	adds	r3, #4
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80021cc:	b672      	cpsid	i
}
 80021ce:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4413      	add	r3, r2
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80021de:	b662      	cpsie	i
}
 80021e0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3734      	adds	r7, #52	; 0x34
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e16b      	b.n	80024e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 815a 	bne.w	80024de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d005      	beq.n	8002242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	2b02      	cmp	r3, #2
 8002240:	d130      	bne.n	80022a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d017      	beq.n	80022e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80b4 	beq.w	80024de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_GPIO_Init+0x308>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <HAL_GPIO_Init+0x308>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002384:	6453      	str	r3, [r2, #68]	; 0x44
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_GPIO_Init+0x308>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002392:	4a5a      	ldr	r2, [pc, #360]	; (80024fc <HAL_GPIO_Init+0x30c>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a51      	ldr	r2, [pc, #324]	; (8002500 <HAL_GPIO_Init+0x310>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02b      	beq.n	8002416 <HAL_GPIO_Init+0x226>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a50      	ldr	r2, [pc, #320]	; (8002504 <HAL_GPIO_Init+0x314>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d025      	beq.n	8002412 <HAL_GPIO_Init+0x222>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4f      	ldr	r2, [pc, #316]	; (8002508 <HAL_GPIO_Init+0x318>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <HAL_GPIO_Init+0x21e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_GPIO_Init+0x31c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x21a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <HAL_GPIO_Init+0x320>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x216>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_GPIO_Init+0x324>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x212>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4b      	ldr	r2, [pc, #300]	; (8002518 <HAL_GPIO_Init+0x328>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4a      	ldr	r2, [pc, #296]	; (800251c <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x20a>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e00e      	b.n	8002418 <HAL_GPIO_Init+0x228>
 80023fa:	2308      	movs	r3, #8
 80023fc:	e00c      	b.n	8002418 <HAL_GPIO_Init+0x228>
 80023fe:	2306      	movs	r3, #6
 8002400:	e00a      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002402:	2305      	movs	r3, #5
 8002404:	e008      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002406:	2304      	movs	r3, #4
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x228>
 800240a:	2303      	movs	r3, #3
 800240c:	e004      	b.n	8002418 <HAL_GPIO_Init+0x228>
 800240e:	2302      	movs	r3, #2
 8002410:	e002      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002416:	2300      	movs	r3, #0
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f002 0203 	and.w	r2, r2, #3
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4093      	lsls	r3, r2
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002428:	4934      	ldr	r1, [pc, #208]	; (80024fc <HAL_GPIO_Init+0x30c>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_GPIO_Init+0x330>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a31      	ldr	r2, [pc, #196]	; (8002520 <HAL_GPIO_Init+0x330>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <HAL_GPIO_Init+0x330>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a26      	ldr	r2, [pc, #152]	; (8002520 <HAL_GPIO_Init+0x330>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248a:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_GPIO_Init+0x330>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ae:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_GPIO_Init+0x330>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_GPIO_Init+0x330>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d8:	4a11      	ldr	r2, [pc, #68]	; (8002520 <HAL_GPIO_Init+0x330>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	f67f ae90 	bls.w	800220c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002540:	e003      	b.n	800254a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	041a      	lsls	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	619a      	str	r2, [r3, #24]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f806 	bl	8002584 <HAL_GPIO_EXTI_Callback>
  }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40013c00 	.word	0x40013c00

08002584 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b08d      	sub	sp, #52	; 0x34
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 ffad 	bl	800550e <USB_GetMode>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 848a 	bne.w	8002ed0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 ff16 	bl	80053f2 <USB_ReadInterrupts>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8480 	beq.w	8002ece <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 ff03 	bl	80053f2 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d107      	bne.n	8002606 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 0202 	and.w	r2, r2, #2
 8002604:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f002 fef1 	bl	80053f2 <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b10      	cmp	r3, #16
 8002618:	d161      	bne.n	80026de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0210 	bic.w	r2, r2, #16
 8002628:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f003 020f 	and.w	r2, r3, #15
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	3304      	adds	r3, #4
 8002648:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	0c5b      	lsrs	r3, r3, #17
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	2b02      	cmp	r3, #2
 8002654:	d124      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d035      	beq.n	80026ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800266c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002670:	b29b      	uxth	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	6a38      	ldr	r0, [r7, #32]
 8002676:	f002 fd6e 	bl	8005156 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002686:	441a      	add	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	6a1a      	ldr	r2, [r3, #32]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002698:	441a      	add	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	621a      	str	r2, [r3, #32]
 800269e:	e016      	b.n	80026ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	0c5b      	lsrs	r3, r3, #17
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	2b06      	cmp	r3, #6
 80026aa:	d110      	bne.n	80026ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026b2:	2208      	movs	r2, #8
 80026b4:	4619      	mov	r1, r3
 80026b6:	6a38      	ldr	r0, [r7, #32]
 80026b8:	f002 fd4d 	bl	8005156 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c8:	441a      	add	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0210 	orr.w	r2, r2, #16
 80026dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 fe85 	bl	80053f2 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026f2:	f040 80a7 	bne.w	8002844 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fe89 	bl	8005416 <USB_ReadDevAllOutEpInterrupt>
 8002704:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002706:	e099      	b.n	800283c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 808e 	beq.w	8002830 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f002 feab 	bl	800547a <USB_ReadDevOutEPInterrupt>
 8002724:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273c:	461a      	mov	r2, r3
 800273e:	2301      	movs	r3, #1
 8002740:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fe61 	bl	800340c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	2308      	movs	r3, #8
 8002764:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 ff37 	bl	80035dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	2310      	movs	r3, #16
 8002788:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d030      	beq.n	80027f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d109      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	3304      	adds	r3, #4
 80027c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d108      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f013 ff26 	bl	8016630 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f0:	461a      	mov	r2, r3
 80027f2:	2302      	movs	r3, #2
 80027f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	2320      	movs	r3, #32
 8002810:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	4413      	add	r3, r2
 8002824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002828:	461a      	mov	r2, r3
 800282a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	3301      	adds	r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	2b00      	cmp	r3, #0
 8002840:	f47f af62 	bne.w	8002708 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f002 fdd2 	bl	80053f2 <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002854:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002858:	f040 80db 	bne.w	8002a12 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fdf1 	bl	8005448 <USB_ReadDevAllInEpInterrupt>
 8002866:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800286c:	e0cd      	b.n	8002a0a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80c2 	beq.w	80029fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f002 fe15 	bl	80054b4 <USB_ReadDevInEPInterrupt>
 800288a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d057      	beq.n	8002946 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	2201      	movs	r2, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69f9      	ldr	r1, [r7, #28]
 80028b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028b6:	4013      	ands	r3, r2
 80028b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c6:	461a      	mov	r2, r3
 80028c8:	2301      	movs	r3, #1
 80028ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d132      	bne.n	800293a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334c      	adds	r3, #76	; 0x4c
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4403      	add	r3, r0
 80028f4:	3348      	adds	r3, #72	; 0x48
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4419      	add	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4403      	add	r3, r0
 8002908:	334c      	adds	r3, #76	; 0x4c
 800290a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d113      	bne.n	800293a <HAL_PCD_IRQHandler+0x3a2>
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3354      	adds	r3, #84	; 0x54
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d108      	bne.n	800293a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002932:	461a      	mov	r2, r3
 8002934:	2101      	movs	r1, #1
 8002936:	f002 fe19 	bl	800556c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f013 fdf0 	bl	8016526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295c:	461a      	mov	r2, r3
 800295e:	2308      	movs	r3, #8
 8002960:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002978:	461a      	mov	r2, r3
 800297a:	2310      	movs	r3, #16
 800297c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002994:	461a      	mov	r2, r3
 8002996:	2340      	movs	r3, #64	; 0x40
 8002998:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d023      	beq.n	80029ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a6:	6a38      	ldr	r0, [r7, #32]
 80029a8:	f001 fe72 	bl	8004690 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3338      	adds	r3, #56	; 0x38
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	3304      	adds	r3, #4
 80029be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	78db      	ldrb	r3, [r3, #3]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d108      	bne.n	80029da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2200      	movs	r2, #0
 80029cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4619      	mov	r1, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f013 fe3d 	bl	8016654 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e6:	461a      	mov	r2, r3
 80029e8:	2302      	movs	r3, #2
 80029ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fc79 	bl	80032f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	3301      	adds	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f47f af2e 	bne.w	800286e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fceb 	bl	80053f2 <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a26:	d122      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d108      	bne.n	8002a58 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a4e:	2100      	movs	r1, #0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fe09 	bl	8003668 <HAL_PCDEx_LPM_Callback>
 8002a56:	e002      	b.n	8002a5e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f013 fddb 	bl	8016614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fcbd 	bl	80053f2 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a82:	d112      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d102      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f013 fd97 	bl	80165c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002aa8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fc9f 	bl	80053f2 <USB_ReadInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abe:	f040 80b7 	bne.w	8002c30 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2110      	movs	r1, #16
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 fdd7 	bl	8004690 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae6:	e046      	b.n	8002b76 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af4:	461a      	mov	r2, r3
 8002af6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002afa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0c:	0151      	lsls	r1, r2, #5
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	440a      	add	r2, r1
 8002b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b2e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b40:	0151      	lsls	r1, r2, #5
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	440a      	add	r2, r1
 8002b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b60:	0151      	lsls	r1, r2, #5
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	440a      	add	r2, r1
 8002b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b6e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	3301      	adds	r3, #1
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3b3      	bcc.n	8002ae8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d016      	beq.n	8002bca <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bac:	f043 030b 	orr.w	r3, r3, #11
 8002bb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc2:	f043 030b 	orr.w	r3, r3, #11
 8002bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc8:	e015      	b.n	8002bf6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bdc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002be0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf0:	f043 030b 	orr.w	r3, r3, #11
 8002bf4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f002 fca6 	bl	800556c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fbdc 	bl	80053f2 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c44:	d124      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 fc6c 	bl	8005528 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 fd4f 	bl	80046f8 <USB_GetDevSpeed>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681c      	ldr	r4, [r3, #0]
 8002c66:	f001 f975 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8002c6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	4620      	mov	r0, r4
 8002c76:	f001 fc69 	bl	800454c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f013 fc7b 	bl	8016576 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fbac 	bl	80053f2 <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d10a      	bne.n	8002cba <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f013 fc58 	bl	801655a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f002 0208 	and.w	r2, r2, #8
 8002cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 fb97 	bl	80053f2 <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b80      	cmp	r3, #128	; 0x80
 8002ccc:	d122      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cda:	2301      	movs	r3, #1
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	e014      	b.n	8002d0a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d105      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fac5 	bl	800328e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	3301      	adds	r3, #1
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d3e5      	bcc.n	8002ce0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fb6a 	bl	80053f2 <USB_ReadInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d28:	d13b      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	e02b      	b.n	8002d88 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3340      	adds	r3, #64	; 0x40
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d115      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da12      	bge.n	8002d82 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	333f      	adds	r3, #63	; 0x3f
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa86 	bl	800328e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	3301      	adds	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d3ce      	bcc.n	8002d30 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fb23 	bl	80053f2 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002db6:	d155      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db8:	2301      	movs	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbc:	e045      	b.n	8002e4a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d12e      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002de6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	da2b      	bge.n	8002e44 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002df8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d121      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e40:	6053      	str	r3, [r2, #4]
            break;
 8002e42:	e007      	b.n	8002e54 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	3301      	adds	r3, #1
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3b4      	bcc.n	8002dbe <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fac2 	bl	80053f2 <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d10a      	bne.n	8002e90 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f013 fbfc 	bl	8016678 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f002 faac 	bl	80053f2 <USB_ReadInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d115      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f013 fbec 	bl	8016694 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	e000      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x938>
      return;
 8002ece:	bf00      	nop
    }
  }
}
 8002ed0:	3734      	adds	r7, #52	; 0x34
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_SetAddress+0x1a>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e013      	b.n	8002f18 <HAL_PCD_SetAddress+0x42>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fa4d 	bl	80053a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	70fb      	strb	r3, [r7, #3]
 8002f32:	460b      	mov	r3, r1
 8002f34:	803b      	strh	r3, [r7, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da0f      	bge.n	8002f66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	3338      	adds	r3, #56	; 0x38
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	705a      	strb	r2, [r3, #1]
 8002f64:	e00f      	b.n	8002f86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f92:	883a      	ldrh	r2, [r7, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	78ba      	ldrb	r2, [r7, #2]
 8002f9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	785b      	ldrb	r3, [r3, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fb0:	78bb      	ldrb	r3, [r7, #2]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d102      	bne.n	8002fbc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_EP_Open+0xaa>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e00e      	b.n	8002fe8 <HAL_PCD_EP_Open+0xc8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 fbb1 	bl	8004740 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003032:	7afb      	ldrb	r3, [r7, #11]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	b2da      	uxtb	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	6979      	ldr	r1, [r7, #20]
 8003064:	f001 fe3a 	bl	8004cdc <USB_EP0StartXfer>
 8003068:	e008      	b.n	800307c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	6979      	ldr	r1, [r7, #20]
 8003078:	f001 fbe8 	bl	800484c <USB_EPStartXfer>
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	460b      	mov	r3, r1
 8003094:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	3338      	adds	r3, #56	; 0x38
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2201      	movs	r2, #1
 80030c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030e0:	7afb      	ldrb	r3, [r7, #11]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	6979      	ldr	r1, [r7, #20]
 80030f8:	f001 fdf0 	bl	8004cdc <USB_EP0StartXfer>
 80030fc:	e008      	b.n	8003110 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	6979      	ldr	r1, [r7, #20]
 800310c:	f001 fb9e 	bl	800484c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d901      	bls.n	8003138 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e050      	b.n	80031da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800313c:	2b00      	cmp	r3, #0
 800313e:	da0f      	bge.n	8003160 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 020f 	and.w	r2, r3, #15
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	3338      	adds	r3, #56	; 0x38
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	705a      	strb	r2, [r3, #1]
 800315e:	e00d      	b.n	800317c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_PCD_EP_SetStall+0x82>
 8003198:	2302      	movs	r3, #2
 800319a:	e01e      	b.n	80031da <HAL_PCD_EP_SetStall+0xc0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f002 f82a 	bl	8005204 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	b2d9      	uxtb	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031ca:	461a      	mov	r2, r3
 80031cc:	f002 f9ce 	bl	800556c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d901      	bls.n	8003200 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e042      	b.n	8003286 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da0f      	bge.n	8003228 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	3338      	adds	r3, #56	; 0x38
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	3304      	adds	r3, #4
 800321e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	705a      	strb	r2, [r3, #1]
 8003226:	e00f      	b.n	8003248 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_PCD_EP_ClrStall+0x86>
 8003264:	2302      	movs	r3, #2
 8003266:	e00e      	b.n	8003286 <HAL_PCD_EP_ClrStall+0xa4>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	4618      	mov	r0, r3
 8003278:	f002 f831 	bl	80052de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800329a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da0c      	bge.n	80032bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	3338      	adds	r3, #56	; 0x38
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e00c      	b.n	80032d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	f003 020f 	and.w	r2, r3, #15
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 fe54 	bl	8004f8a <USB_EPStopXfer>
 80032e2:	4603      	mov	r3, r0
 80032e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032e6:	7afb      	ldrb	r3, [r7, #11]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3338      	adds	r3, #56	; 0x38
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	429a      	cmp	r2, r3
 8003322:	d901      	bls.n	8003328 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e06c      	b.n	8003402 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	429a      	cmp	r2, r3
 800333c:	d902      	bls.n	8003344 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	3303      	adds	r3, #3
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800334c:	e02b      	b.n	80033a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	429a      	cmp	r2, r3
 8003362:	d902      	bls.n	800336a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3303      	adds	r3, #3
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6919      	ldr	r1, [r3, #16]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003382:	b2db      	uxtb	r3, r3
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4603      	mov	r3, r0
 8003388:	6978      	ldr	r0, [r7, #20]
 800338a:	f001 fea7 	bl	80050dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	441a      	add	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	441a      	add	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d809      	bhi.n	80033d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d203      	bcs.n	80033d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1be      	bne.n	800334e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d811      	bhi.n	8003400 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	2201      	movs	r2, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	6939      	ldr	r1, [r7, #16]
 80033f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033fc:	4013      	ands	r3, r2
 80033fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	333c      	adds	r3, #60	; 0x3c
 8003424:	3304      	adds	r3, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d17b      	bne.n	800353a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d015      	beq.n	8003478 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4a61      	ldr	r2, [pc, #388]	; (80035d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	f240 80b9 	bls.w	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80b3 	beq.w	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	461a      	mov	r2, r3
 8003470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003474:	6093      	str	r3, [r2, #8]
 8003476:	e0a7      	b.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	461a      	mov	r2, r3
 8003490:	2320      	movs	r3, #32
 8003492:	6093      	str	r3, [r2, #8]
 8003494:	e098      	b.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 8093 	bne.w	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	4a4b      	ldr	r2, [pc, #300]	; (80035d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d90f      	bls.n	80034ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c6:	6093      	str	r3, [r2, #8]
 80034c8:	e07e      	b.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	440b      	add	r3, r1
 80034ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d114      	bne.n	800352c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003514:	461a      	mov	r2, r3
 8003516:	2101      	movs	r1, #1
 8003518:	f002 f828 	bl	800556c <USB_EP0_OutStart>
 800351c:	e006      	b.n	800352c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	441a      	add	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f012 ffdc 	bl	80164f0 <HAL_PCD_DataOutStageCallback>
 8003538:	e046      	b.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4a26      	ldr	r2, [pc, #152]	; (80035d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d124      	bne.n	800358c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	461a      	mov	r2, r3
 800355a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355e:	6093      	str	r3, [r2, #8]
 8003560:	e032      	b.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003578:	461a      	mov	r2, r3
 800357a:	2320      	movs	r3, #32
 800357c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f012 ffb3 	bl	80164f0 <HAL_PCD_DataOutStageCallback>
 800358a:	e01d      	b.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d114      	bne.n	80035bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d108      	bne.n	80035bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035b4:	461a      	mov	r2, r3
 80035b6:	2100      	movs	r1, #0
 80035b8:	f001 ffd8 	bl	800556c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f012 ff94 	bl	80164f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	4f54300a 	.word	0x4f54300a
 80035d8:	4f54310a 	.word	0x4f54310a

080035dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	333c      	adds	r3, #60	; 0x3c
 80035f4:	3304      	adds	r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a15      	ldr	r2, [pc, #84]	; (8003664 <PCD_EP_OutSetupPacket_int+0x88>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d90e      	bls.n	8003630 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f012 ff4b 	bl	80164cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <PCD_EP_OutSetupPacket_int+0x88>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d90c      	bls.n	8003658 <PCD_EP_OutSetupPacket_int+0x7c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d108      	bne.n	8003658 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003650:	461a      	mov	r2, r3
 8003652:	2101      	movs	r1, #1
 8003654:	f001 ff8a 	bl	800556c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	4f54300a 	.word	0x4f54300a

08003668 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
	...

08003680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e267      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d075      	beq.n	800378a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369e:	4b88      	ldr	r3, [pc, #544]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d00c      	beq.n	80036c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036aa:	4b85      	ldr	r3, [pc, #532]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d112      	bne.n	80036dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b6:	4b82      	ldr	r3, [pc, #520]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c2:	d10b      	bne.n	80036dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c4:	4b7e      	ldr	r3, [pc, #504]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d05b      	beq.n	8003788 <HAL_RCC_OscConfig+0x108>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d157      	bne.n	8003788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e242      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d106      	bne.n	80036f4 <HAL_RCC_OscConfig+0x74>
 80036e6:	4b76      	ldr	r3, [pc, #472]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a75      	ldr	r2, [pc, #468]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e01d      	b.n	8003730 <HAL_RCC_OscConfig+0xb0>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0x98>
 80036fe:	4b70      	ldr	r3, [pc, #448]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a6f      	ldr	r2, [pc, #444]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b6d      	ldr	r3, [pc, #436]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6c      	ldr	r2, [pc, #432]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e00b      	b.n	8003730 <HAL_RCC_OscConfig+0xb0>
 8003718:	4b69      	ldr	r3, [pc, #420]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a68      	ldr	r2, [pc, #416]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 800371e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a65      	ldr	r2, [pc, #404]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 800372a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fd fc06 	bl	8000f48 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003740:	f7fd fc02 	bl	8000f48 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e207      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0xc0>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd fbf2 	bl	8000f48 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003768:	f7fd fbee 	bl	8000f48 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e1f3      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377a:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0xe8>
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d063      	beq.n	800385e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003796:	4b4a      	ldr	r3, [pc, #296]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d11c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ae:	4b44      	ldr	r3, [pc, #272]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d116      	bne.n	80037e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_RCC_OscConfig+0x152>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e1c7      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4937      	ldr	r1, [pc, #220]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	e03a      	b.n	800385e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f0:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <HAL_RCC_OscConfig+0x244>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fd fba7 	bl	8000f48 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fe:	f7fd fba3 	bl	8000f48 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e1a8      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4925      	ldr	r1, [pc, #148]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003832:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_RCC_OscConfig+0x244>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd fb86 	bl	8000f48 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003840:	f7fd fb82 	bl	8000f48 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e187      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d036      	beq.n	80038d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <HAL_RCC_OscConfig+0x248>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fd fb66 	bl	8000f48 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003880:	f7fd fb62 	bl	8000f48 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e167      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_OscConfig+0x240>)
 8003894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x200>
 800389e:	e01b      	b.n	80038d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_OscConfig+0x248>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a6:	f7fd fb4f 	bl	8000f48 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	e00e      	b.n	80038cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ae:	f7fd fb4b 	bl	8000f48 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d907      	bls.n	80038cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e150      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
 80038c0:	40023800 	.word	0x40023800
 80038c4:	42470000 	.word	0x42470000
 80038c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038cc:	4b88      	ldr	r3, [pc, #544]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 80038ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ea      	bne.n	80038ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8097 	beq.w	8003a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ea:	4b81      	ldr	r3, [pc, #516]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	4b7d      	ldr	r3, [pc, #500]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	4a7c      	ldr	r2, [pc, #496]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003904:	6413      	str	r3, [r2, #64]	; 0x40
 8003906:	4b7a      	ldr	r3, [pc, #488]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003912:	2301      	movs	r3, #1
 8003914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003916:	4b77      	ldr	r3, [pc, #476]	; (8003af4 <HAL_RCC_OscConfig+0x474>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d118      	bne.n	8003954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003922:	4b74      	ldr	r3, [pc, #464]	; (8003af4 <HAL_RCC_OscConfig+0x474>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a73      	ldr	r2, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x474>)
 8003928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392e:	f7fd fb0b 	bl	8000f48 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003936:	f7fd fb07 	bl	8000f48 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e10c      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_OscConfig+0x474>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x2ea>
 800395c:	4b64      	ldr	r3, [pc, #400]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	4a63      	ldr	r2, [pc, #396]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6713      	str	r3, [r2, #112]	; 0x70
 8003968:	e01c      	b.n	80039a4 <HAL_RCC_OscConfig+0x324>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b05      	cmp	r3, #5
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x30c>
 8003972:	4b5f      	ldr	r3, [pc, #380]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a5e      	ldr	r2, [pc, #376]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
 800397e:	4b5c      	ldr	r3, [pc, #368]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a5b      	ldr	r2, [pc, #364]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0x324>
 800398c:	4b58      	ldr	r3, [pc, #352]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a57      	ldr	r2, [pc, #348]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	4a54      	ldr	r2, [pc, #336]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 800399e:	f023 0304 	bic.w	r3, r3, #4
 80039a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd facc 	bl	8000f48 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd fac8 	bl	8000f48 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0cb      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ca:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0ee      	beq.n	80039b4 <HAL_RCC_OscConfig+0x334>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d8:	f7fd fab6 	bl	8000f48 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7fd fab2 	bl	8000f48 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0b5      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f6:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ee      	bne.n	80039e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a08:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	4a38      	ldr	r2, [pc, #224]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a1 	beq.w	8003b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a1e:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d05c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d141      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <HAL_RCC_OscConfig+0x478>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fd fa86 	bl	8000f48 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fa82 	bl	8000f48 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e087      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	3b01      	subs	r3, #1
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	491b      	ldr	r1, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_RCC_OscConfig+0x478>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7fd fa5b 	bl	8000f48 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fd fa57 	bl	8000f48 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e05c      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x416>
 8003ab4:	e054      	b.n	8003b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_RCC_OscConfig+0x478>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fd fa44 	bl	8000f48 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fa40 	bl	8000f48 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e045      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x444>
 8003ae2:	e03d      	b.n	8003b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e038      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40007000 	.word	0x40007000
 8003af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x4ec>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d028      	beq.n	8003b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d121      	bne.n	8003b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d11a      	bne.n	8003b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d111      	bne.n	8003b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	3b01      	subs	r3, #1
 8003b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800

08003b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0cc      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d90c      	bls.n	8003bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b65      	ldr	r3, [pc, #404]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0b8      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc4:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a52      	ldr	r2, [pc, #328]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be8:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	494d      	ldr	r1, [pc, #308]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d044      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d119      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e07f      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d003      	beq.n	8003c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06f      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e067      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 0203 	bic.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4934      	ldr	r1, [pc, #208]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c60:	f7fd f972 	bl	8000f48 <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c68:	f7fd f96e 	bl	8000f48 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e04f      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 020c 	and.w	r2, r3, #12
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1eb      	bne.n	8003c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d20c      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e032      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4916      	ldr	r1, [pc, #88]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	490e      	ldr	r1, [pc, #56]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cf6:	f000 f821 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	490a      	ldr	r1, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x1c0>)
 8003d08:	5ccb      	ldrb	r3, [r1, r3]
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd f8d4 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023c00 	.word	0x40023c00
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	0801ae20 	.word	0x0801ae20
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000004 	.word	0x20000004

08003d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d40:	b094      	sub	sp, #80	; 0x50
 8003d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	647b      	str	r3, [r7, #68]	; 0x44
 8003d48:	2300      	movs	r3, #0
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d54:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d00d      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x40>
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	f200 80e7 	bhi.w	8003f34 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x34>
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6e:	e0e1      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x210>)
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d74:	e0e1      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d76:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x214>)
 8003d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d7a:	e0de      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d7c:	4b72      	ldr	r3, [pc, #456]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d86:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d065      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	2200      	movs	r2, #0
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
 8003da6:	2300      	movs	r3, #0
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
 8003daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dae:	4622      	mov	r2, r4
 8003db0:	462b      	mov	r3, r5
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0159      	lsls	r1, r3, #5
 8003dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc0:	0150      	lsls	r0, r2, #5
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	1a51      	subs	r1, r2, r1
 8003dca:	6139      	str	r1, [r7, #16]
 8003dcc:	4629      	mov	r1, r5
 8003dce:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de0:	4659      	mov	r1, fp
 8003de2:	018b      	lsls	r3, r1, #6
 8003de4:	4651      	mov	r1, sl
 8003de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dea:	4651      	mov	r1, sl
 8003dec:	018a      	lsls	r2, r1, #6
 8003dee:	46d4      	mov	ip, sl
 8003df0:	ebb2 080c 	subs.w	r8, r2, ip
 8003df4:	4659      	mov	r1, fp
 8003df6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0e:	4690      	mov	r8, r2
 8003e10:	4699      	mov	r9, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	eb18 0303 	adds.w	r3, r8, r3
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	eb49 0303 	adc.w	r3, r9, r3
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	024b      	lsls	r3, r1, #9
 8003e32:	4620      	mov	r0, r4
 8003e34:	4629      	mov	r1, r5
 8003e36:	4604      	mov	r4, r0
 8003e38:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003e3c:	4601      	mov	r1, r0
 8003e3e:	024a      	lsls	r2, r1, #9
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e46:	2200      	movs	r2, #0
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e50:	f7fc fa16 	bl	8000280 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4613      	mov	r3, r2
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5c:	e05c      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	099b      	lsrs	r3, r3, #6
 8003e64:	2200      	movs	r2, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	4611      	mov	r1, r2
 8003e6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e6e:	623b      	str	r3, [r7, #32]
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
 8003e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	0159      	lsls	r1, r3, #5
 8003e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8a:	0150      	lsls	r0, r2, #5
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	46c4      	mov	ip, r8
 8003e92:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003e96:	4640      	mov	r0, r8
 8003e98:	4649      	mov	r1, r9
 8003e9a:	468c      	mov	ip, r1
 8003e9c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003eac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003eb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	00eb      	lsls	r3, r5, #3
 8003ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eca:	00e2      	lsls	r2, r4, #3
 8003ecc:	4614      	mov	r4, r2
 8003ece:	461d      	mov	r5, r3
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	eb45 0303 	adc.w	r3, r5, r3
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eea:	4629      	mov	r1, r5
 8003eec:	028b      	lsls	r3, r1, #10
 8003eee:	4620      	mov	r0, r4
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003ef8:	4601      	mov	r1, r0
 8003efa:	028a      	lsls	r2, r1, #10
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f02:	2200      	movs	r2, #0
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	61fa      	str	r2, [r7, #28]
 8003f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f0c:	f7fc f9b8 	bl	8000280 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x210>)
 8003f36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3750      	adds	r7, #80	; 0x50
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	20000000 	.word	0x20000000

08003f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f6c:	f7ff fff2 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	4903      	ldr	r1, [pc, #12]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7e:	5ccb      	ldrb	r3, [r1, r3]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	0801ae30 	.word	0x0801ae30

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f94:	f7ff ffde 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0b5b      	lsrs	r3, r3, #13
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4903      	ldr	r1, [pc, #12]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	0801ae30 	.word	0x0801ae30

08003fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03f      	b.n	800404a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc fd12 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	; 0x24
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f829 	bl	8004054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004058:	b0c0      	sub	sp, #256	; 0x100
 800405a:	af00      	add	r7, sp, #0
 800405c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	68d9      	ldr	r1, [r3, #12]
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	ea40 0301 	orr.w	r3, r0, r1
 800407c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	431a      	orrs	r2, r3
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	431a      	orrs	r2, r3
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040ac:	f021 010c 	bic.w	r1, r1, #12
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040ba:	430b      	orrs	r3, r1
 80040bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	6999      	ldr	r1, [r3, #24]
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	ea40 0301 	orr.w	r3, r0, r1
 80040da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b91      	ldr	r3, [pc, #580]	; (8004328 <UART_SetConfig+0x2d4>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d005      	beq.n	80040f4 <UART_SetConfig+0xa0>
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b8f      	ldr	r3, [pc, #572]	; (800432c <UART_SetConfig+0x2d8>)
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d104      	bne.n	80040fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f4:	f7ff ff4c 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 80040f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040fc:	e003      	b.n	8004106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040fe:	f7ff ff33 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 8004102:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004110:	f040 8110 	bne.w	8004334 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004118:	2200      	movs	r2, #0
 800411a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800411e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004126:	4622      	mov	r2, r4
 8004128:	462b      	mov	r3, r5
 800412a:	1891      	adds	r1, r2, r2
 800412c:	65b9      	str	r1, [r7, #88]	; 0x58
 800412e:	415b      	adcs	r3, r3
 8004130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004136:	4620      	mov	r0, r4
 8004138:	4629      	mov	r1, r5
 800413a:	4604      	mov	r4, r0
 800413c:	eb12 0804 	adds.w	r8, r2, r4
 8004140:	460c      	mov	r4, r1
 8004142:	eb43 0904 	adc.w	r9, r3, r4
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415a:	4690      	mov	r8, r2
 800415c:	4699      	mov	r9, r3
 800415e:	4603      	mov	r3, r0
 8004160:	eb18 0303 	adds.w	r3, r8, r3
 8004164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004168:	460b      	mov	r3, r1
 800416a:	eb49 0303 	adc.w	r3, r9, r3
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800417e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004186:	460b      	mov	r3, r1
 8004188:	18db      	adds	r3, r3, r3
 800418a:	653b      	str	r3, [r7, #80]	; 0x50
 800418c:	4613      	mov	r3, r2
 800418e:	eb42 0303 	adc.w	r3, r2, r3
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
 8004194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800419c:	f7fc f870 	bl	8000280 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4b62      	ldr	r3, [pc, #392]	; (8004330 <UART_SetConfig+0x2dc>)
 80041a6:	fba3 2302 	umull	r2, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	011c      	lsls	r4, r3, #4
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041c8:	415b      	adcs	r3, r3
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041d0:	4645      	mov	r5, r8
 80041d2:	eb12 0a05 	adds.w	sl, r2, r5
 80041d6:	4640      	mov	r0, r8
 80041d8:	4649      	mov	r1, r9
 80041da:	460d      	mov	r5, r1
 80041dc:	eb43 0b05 	adc.w	fp, r3, r5
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f4:	4692      	mov	sl, r2
 80041f6:	469b      	mov	fp, r3
 80041f8:	4603      	mov	r3, r0
 80041fa:	eb1a 0303 	adds.w	r3, sl, r3
 80041fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004202:	460b      	mov	r3, r1
 8004204:	eb4b 0303 	adc.w	r3, fp, r3
 8004208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004218:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800421c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004220:	460b      	mov	r3, r1
 8004222:	18db      	adds	r3, r3, r3
 8004224:	643b      	str	r3, [r7, #64]	; 0x40
 8004226:	4613      	mov	r3, r2
 8004228:	eb42 0303 	adc.w	r3, r2, r3
 800422c:	647b      	str	r3, [r7, #68]	; 0x44
 800422e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004232:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004236:	f7fc f823 	bl	8000280 <__aeabi_uldivmod>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4611      	mov	r1, r2
 8004240:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <UART_SetConfig+0x2dc>)
 8004242:	fba3 2301 	umull	r2, r3, r3, r1
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2264      	movs	r2, #100	; 0x64
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	1acb      	subs	r3, r1, r3
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004256:	4b36      	ldr	r3, [pc, #216]	; (8004330 <UART_SetConfig+0x2dc>)
 8004258:	fba3 2302 	umull	r2, r3, r3, r2
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004264:	441c      	add	r4, r3
 8004266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004270:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004274:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	1891      	adds	r1, r2, r2
 800427e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004280:	415b      	adcs	r3, r3
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004288:	4641      	mov	r1, r8
 800428a:	1851      	adds	r1, r2, r1
 800428c:	6339      	str	r1, [r7, #48]	; 0x30
 800428e:	4649      	mov	r1, r9
 8004290:	414b      	adcs	r3, r1
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042a0:	4659      	mov	r1, fp
 80042a2:	00cb      	lsls	r3, r1, #3
 80042a4:	4655      	mov	r5, sl
 80042a6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80042aa:	4651      	mov	r1, sl
 80042ac:	00ca      	lsls	r2, r1, #3
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	4642      	mov	r2, r8
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042bc:	464b      	mov	r3, r9
 80042be:	460a      	mov	r2, r1
 80042c0:	eb42 0303 	adc.w	r3, r2, r3
 80042c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042dc:	460b      	mov	r3, r1
 80042de:	18db      	adds	r3, r3, r3
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e2:	4613      	mov	r3, r2
 80042e4:	eb42 0303 	adc.w	r3, r2, r3
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042f2:	f7fb ffc5 	bl	8000280 <__aeabi_uldivmod>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <UART_SetConfig+0x2dc>)
 80042fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	2164      	movs	r1, #100	; 0x64
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	3332      	adds	r3, #50	; 0x32
 800430e:	4a08      	ldr	r2, [pc, #32]	; (8004330 <UART_SetConfig+0x2dc>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	f003 0207 	and.w	r2, r3, #7
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4422      	add	r2, r4
 8004322:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004324:	e109      	b.n	800453a <UART_SetConfig+0x4e6>
 8004326:	bf00      	nop
 8004328:	40011000 	.word	0x40011000
 800432c:	40011400 	.word	0x40011400
 8004330:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004338:	2200      	movs	r2, #0
 800433a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800433e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004342:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004346:	4642      	mov	r2, r8
 8004348:	464b      	mov	r3, r9
 800434a:	1891      	adds	r1, r2, r2
 800434c:	6239      	str	r1, [r7, #32]
 800434e:	415b      	adcs	r3, r3
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
 8004352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004356:	4641      	mov	r1, r8
 8004358:	1854      	adds	r4, r2, r1
 800435a:	46cc      	mov	ip, r9
 800435c:	eb43 050c 	adc.w	r5, r3, ip
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	00eb      	lsls	r3, r5, #3
 800436a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436e:	00e2      	lsls	r2, r4, #3
 8004370:	4614      	mov	r4, r2
 8004372:	461d      	mov	r5, r3
 8004374:	4640      	mov	r0, r8
 8004376:	4649      	mov	r1, r9
 8004378:	4603      	mov	r3, r0
 800437a:	18e3      	adds	r3, r4, r3
 800437c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004380:	460b      	mov	r3, r1
 8004382:	eb45 0303 	adc.w	r3, r5, r3
 8004386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043a6:	4629      	mov	r1, r5
 80043a8:	008b      	lsls	r3, r1, #2
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	4604      	mov	r4, r0
 80043b0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80043b4:	4601      	mov	r1, r0
 80043b6:	008a      	lsls	r2, r1, #2
 80043b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043bc:	f7fb ff60 	bl	8000280 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4b60      	ldr	r3, [pc, #384]	; (8004548 <UART_SetConfig+0x4f4>)
 80043c6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	011c      	lsls	r4, r3, #4
 80043ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	61b9      	str	r1, [r7, #24]
 80043e8:	415b      	adcs	r3, r3
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f0:	4641      	mov	r1, r8
 80043f2:	1851      	adds	r1, r2, r1
 80043f4:	6139      	str	r1, [r7, #16]
 80043f6:	4649      	mov	r1, r9
 80043f8:	414b      	adcs	r3, r1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004408:	4659      	mov	r1, fp
 800440a:	00cb      	lsls	r3, r1, #3
 800440c:	4655      	mov	r5, sl
 800440e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004412:	4651      	mov	r1, sl
 8004414:	00ca      	lsls	r2, r1, #3
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	4603      	mov	r3, r0
 800441c:	4642      	mov	r2, r8
 800441e:	189b      	adds	r3, r3, r2
 8004420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004424:	464b      	mov	r3, r9
 8004426:	460a      	mov	r2, r1
 8004428:	eb42 0303 	adc.w	r3, r2, r3
 800442c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	67bb      	str	r3, [r7, #120]	; 0x78
 800443a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004448:	4649      	mov	r1, r9
 800444a:	008b      	lsls	r3, r1, #2
 800444c:	4645      	mov	r5, r8
 800444e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004452:	4641      	mov	r1, r8
 8004454:	008a      	lsls	r2, r1, #2
 8004456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800445a:	f7fb ff11 	bl	8000280 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4b39      	ldr	r3, [pc, #228]	; (8004548 <UART_SetConfig+0x4f4>)
 8004464:	fba3 1302 	umull	r1, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2164      	movs	r1, #100	; 0x64
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	3332      	adds	r3, #50	; 0x32
 8004476:	4a34      	ldr	r2, [pc, #208]	; (8004548 <UART_SetConfig+0x4f4>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004482:	441c      	add	r4, r3
 8004484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004488:	2200      	movs	r2, #0
 800448a:	673b      	str	r3, [r7, #112]	; 0x70
 800448c:	677a      	str	r2, [r7, #116]	; 0x74
 800448e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004492:	4642      	mov	r2, r8
 8004494:	464b      	mov	r3, r9
 8004496:	1891      	adds	r1, r2, r2
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	415b      	adcs	r3, r3
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a2:	4641      	mov	r1, r8
 80044a4:	1851      	adds	r1, r2, r1
 80044a6:	6039      	str	r1, [r7, #0]
 80044a8:	4649      	mov	r1, r9
 80044aa:	414b      	adcs	r3, r1
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ba:	4659      	mov	r1, fp
 80044bc:	00cb      	lsls	r3, r1, #3
 80044be:	4655      	mov	r5, sl
 80044c0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80044c4:	4651      	mov	r1, sl
 80044c6:	00ca      	lsls	r2, r1, #3
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	4603      	mov	r3, r0
 80044ce:	4642      	mov	r2, r8
 80044d0:	189b      	adds	r3, r3, r2
 80044d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044d4:	464b      	mov	r3, r9
 80044d6:	460a      	mov	r2, r1
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	663b      	str	r3, [r7, #96]	; 0x60
 80044e8:	667a      	str	r2, [r7, #100]	; 0x64
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044f6:	4649      	mov	r1, r9
 80044f8:	008b      	lsls	r3, r1, #2
 80044fa:	4645      	mov	r5, r8
 80044fc:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004500:	4641      	mov	r1, r8
 8004502:	008a      	lsls	r2, r1, #2
 8004504:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004508:	f7fb feba 	bl	8000280 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <UART_SetConfig+0x4f4>)
 8004512:	fba3 1302 	umull	r1, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2164      	movs	r1, #100	; 0x64
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	3332      	adds	r3, #50	; 0x32
 8004524:	4a08      	ldr	r2, [pc, #32]	; (8004548 <UART_SetConfig+0x4f4>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	f003 020f 	and.w	r2, r3, #15
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4422      	add	r2, r4
 8004538:	609a      	str	r2, [r3, #8]
}
 800453a:	bf00      	nop
 800453c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004540:	46bd      	mov	sp, r7
 8004542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004546:	bf00      	nop
 8004548:	51eb851f 	.word	0x51eb851f

0800454c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d165      	bne.n	800462c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a41      	ldr	r2, [pc, #260]	; (8004668 <USB_SetTurnaroundTime+0x11c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d906      	bls.n	8004576 <USB_SetTurnaroundTime+0x2a>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a40      	ldr	r2, [pc, #256]	; (800466c <USB_SetTurnaroundTime+0x120>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d202      	bcs.n	8004576 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004570:	230f      	movs	r3, #15
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e062      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4a3c      	ldr	r2, [pc, #240]	; (800466c <USB_SetTurnaroundTime+0x120>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d306      	bcc.n	800458c <USB_SetTurnaroundTime+0x40>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a3b      	ldr	r2, [pc, #236]	; (8004670 <USB_SetTurnaroundTime+0x124>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d202      	bcs.n	800458c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004586:	230e      	movs	r3, #14
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e057      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a38      	ldr	r2, [pc, #224]	; (8004670 <USB_SetTurnaroundTime+0x124>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d306      	bcc.n	80045a2 <USB_SetTurnaroundTime+0x56>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a37      	ldr	r2, [pc, #220]	; (8004674 <USB_SetTurnaroundTime+0x128>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d202      	bcs.n	80045a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800459c:	230d      	movs	r3, #13
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e04c      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a33      	ldr	r2, [pc, #204]	; (8004674 <USB_SetTurnaroundTime+0x128>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d306      	bcc.n	80045b8 <USB_SetTurnaroundTime+0x6c>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a32      	ldr	r2, [pc, #200]	; (8004678 <USB_SetTurnaroundTime+0x12c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d802      	bhi.n	80045b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045b2:	230c      	movs	r3, #12
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e041      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <USB_SetTurnaroundTime+0x12c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d906      	bls.n	80045ce <USB_SetTurnaroundTime+0x82>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a2e      	ldr	r2, [pc, #184]	; (800467c <USB_SetTurnaroundTime+0x130>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d802      	bhi.n	80045ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045c8:	230b      	movs	r3, #11
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e036      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a2a      	ldr	r2, [pc, #168]	; (800467c <USB_SetTurnaroundTime+0x130>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d906      	bls.n	80045e4 <USB_SetTurnaroundTime+0x98>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a29      	ldr	r2, [pc, #164]	; (8004680 <USB_SetTurnaroundTime+0x134>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045de:	230a      	movs	r3, #10
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e02b      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <USB_SetTurnaroundTime+0x134>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d906      	bls.n	80045fa <USB_SetTurnaroundTime+0xae>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a25      	ldr	r2, [pc, #148]	; (8004684 <USB_SetTurnaroundTime+0x138>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d202      	bcs.n	80045fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045f4:	2309      	movs	r3, #9
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e020      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a21      	ldr	r2, [pc, #132]	; (8004684 <USB_SetTurnaroundTime+0x138>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d306      	bcc.n	8004610 <USB_SetTurnaroundTime+0xc4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a20      	ldr	r2, [pc, #128]	; (8004688 <USB_SetTurnaroundTime+0x13c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d802      	bhi.n	8004610 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800460a:	2308      	movs	r3, #8
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e015      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <USB_SetTurnaroundTime+0x13c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d906      	bls.n	8004626 <USB_SetTurnaroundTime+0xda>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <USB_SetTurnaroundTime+0x140>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d202      	bcs.n	8004626 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004620:	2307      	movs	r3, #7
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e00a      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004626:	2306      	movs	r3, #6
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e007      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004632:	2309      	movs	r3, #9
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e001      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004638:	2309      	movs	r3, #9
 800463a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	00d8acbf 	.word	0x00d8acbf
 800466c:	00e4e1c0 	.word	0x00e4e1c0
 8004670:	00f42400 	.word	0x00f42400
 8004674:	01067380 	.word	0x01067380
 8004678:	011a499f 	.word	0x011a499f
 800467c:	01312cff 	.word	0x01312cff
 8004680:	014ca43f 	.word	0x014ca43f
 8004684:	016e3600 	.word	0x016e3600
 8004688:	01a6ab1f 	.word	0x01a6ab1f
 800468c:	01e84800 	.word	0x01e84800

08004690 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <USB_FlushTxFifo+0x64>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e01b      	b.n	80046e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	daf2      	bge.n	800469e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	019b      	lsls	r3, r3, #6
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <USB_FlushTxFifo+0x64>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e006      	b.n	80046e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d0f0      	beq.n	80046c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	00030d40 	.word	0x00030d40

080046f8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0306 	and.w	r3, r3, #6
 8004710:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004718:	2300      	movs	r3, #0
 800471a:	75fb      	strb	r3, [r7, #23]
 800471c:	e00a      	b.n	8004734 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d002      	beq.n	800472a <USB_GetDevSpeed+0x32>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b06      	cmp	r3, #6
 8004728:	d102      	bne.n	8004730 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800472a:	2302      	movs	r3, #2
 800472c:	75fb      	strb	r3, [r7, #23]
 800472e:	e001      	b.n	8004734 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004730:	230f      	movs	r3, #15
 8004732:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
}
 8004736:	4618      	mov	r0, r3
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d13a      	bne.n	80047d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	b29b      	uxth	r3, r3
 8004774:	68f9      	ldr	r1, [r7, #12]
 8004776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800477a:	4313      	orrs	r3, r2
 800477c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d155      	bne.n	8004840 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	791b      	ldrb	r3, [r3, #4]
 80047ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	059b      	lsls	r3, r3, #22
 80047b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047b8:	4313      	orrs	r3, r2
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e036      	b.n	8004840 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	2101      	movs	r1, #1
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d11a      	bne.n	8004840 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	791b      	ldrb	r3, [r3, #4]
 8004824:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004826:	430b      	orrs	r3, r1
 8004828:	4313      	orrs	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 815c 	bne.w	8004b26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d132      	bne.n	80048dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	0cdb      	lsrs	r3, r3, #19
 80048d6:	04db      	lsls	r3, r3, #19
 80048d8:	6113      	str	r3, [r2, #16]
 80048da:	e074      	b.n	80049c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f6:	0cdb      	lsrs	r3, r3, #19
 80048f8:	04db      	lsls	r3, r3, #19
 80048fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800491a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800491e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6999      	ldr	r1, [r3, #24]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	440b      	add	r3, r1
 8004938:	1e59      	subs	r1, r3, #1
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004942:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004944:	4b9d      	ldr	r3, [pc, #628]	; (8004bbc <USB_EPStartXfer+0x370>)
 8004946:	400b      	ands	r3, r1
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	0148      	lsls	r0, r1, #5
 800494c:	69f9      	ldr	r1, [r7, #28]
 800494e:	4401      	add	r1, r0
 8004950:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004954:	4313      	orrs	r3, r2
 8004956:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496e:	69b9      	ldr	r1, [r7, #24]
 8004970:	0148      	lsls	r0, r1, #5
 8004972:	69f9      	ldr	r1, [r7, #28]
 8004974:	4401      	add	r1, r0
 8004976:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800497a:	4313      	orrs	r3, r2
 800497c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	791b      	ldrb	r3, [r3, #4]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d11f      	bne.n	80049c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d14b      	bne.n	8004a64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	791b      	ldrb	r3, [r3, #4]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d128      	bne.n	8004a42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d110      	bne.n	8004a22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	e00f      	b.n	8004a42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	0151      	lsls	r1, r2, #5
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	440a      	add	r2, r1
 8004a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e133      	b.n	8004ccc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	791b      	ldrb	r3, [r3, #4]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d015      	beq.n	8004ab8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 811b 	beq.w	8004ccc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aac:	69f9      	ldr	r1, [r7, #28]
 8004aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	634b      	str	r3, [r1, #52]	; 0x34
 8004ab6:	e109      	b.n	8004ccc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d110      	bne.n	8004aea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	e00f      	b.n	8004b0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	b298      	uxth	r0, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fadc 	bl	80050dc <USB_WritePacket>
 8004b24:	e0d2      	b.n	8004ccc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b40:	0cdb      	lsrs	r3, r3, #19
 8004b42:	04db      	lsls	r3, r3, #19
 8004b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d126      	bne.n	8004bc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b88:	69b9      	ldr	r1, [r7, #24]
 8004b8a:	0148      	lsls	r0, r1, #5
 8004b8c:	69f9      	ldr	r1, [r7, #28]
 8004b8e:	4401      	add	r1, r0
 8004b90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b94:	4313      	orrs	r3, r2
 8004b96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb6:	6113      	str	r3, [r2, #16]
 8004bb8:	e03a      	b.n	8004c30 <USB_EPStartXfer+0x3e4>
 8004bba:	bf00      	nop
 8004bbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	1e5a      	subs	r2, r3, #1
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	8afa      	ldrh	r2, [r7, #22]
 8004bdc:	fb03 f202 	mul.w	r2, r3, r2
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	8afb      	ldrh	r3, [r7, #22]
 8004bf4:	04d9      	lsls	r1, r3, #19
 8004bf6:	4b38      	ldr	r3, [pc, #224]	; (8004cd8 <USB_EPStartXfer+0x48c>)
 8004bf8:	400b      	ands	r3, r1
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	0148      	lsls	r0, r1, #5
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	4401      	add	r1, r0
 8004c02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c20:	69b9      	ldr	r1, [r7, #24]
 8004c22:	0148      	lsls	r0, r1, #5
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	4401      	add	r1, r0
 8004c28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d10d      	bne.n	8004c52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6919      	ldr	r1, [r3, #16]
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	460a      	mov	r2, r1
 8004c50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	791b      	ldrb	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d128      	bne.n	8004cac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d110      	bne.n	8004c8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e00f      	b.n	8004cac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	1ff80000 	.word	0x1ff80000

08004cdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	f040 80ce 	bne.w	8004e9a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d132      	bne.n	8004d6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d64:	0cdb      	lsrs	r3, r3, #19
 8004d66:	04db      	lsls	r3, r3, #19
 8004d68:	6113      	str	r3, [r2, #16]
 8004d6a:	e04e      	b.n	8004e0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d86:	0cdb      	lsrs	r3, r3, #19
 8004d88:	04db      	lsls	r3, r3, #19
 8004d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004daa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	699a      	ldr	r2, [r3, #24]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d903      	bls.n	8004dc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	0148      	lsls	r0, r1, #5
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	4401      	add	r1, r0
 8004e02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e06:	4313      	orrs	r3, r2
 8004e08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d11e      	bne.n	8004e4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	e097      	b.n	8004f7e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8083 	beq.w	8004f7e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	2101      	movs	r1, #1
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	6979      	ldr	r1, [r7, #20]
 8004e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e94:	4313      	orrs	r3, r2
 8004e96:	634b      	str	r3, [r1, #52]	; 0x34
 8004e98:	e071      	b.n	8004f7e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb4:	0cdb      	lsrs	r3, r3, #19
 8004eb6:	04db      	lsls	r3, r3, #19
 8004eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ed8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004edc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2c:	6939      	ldr	r1, [r7, #16]
 8004f2e:	0148      	lsls	r0, r1, #5
 8004f30:	6979      	ldr	r1, [r7, #20]
 8004f32:	4401      	add	r1, r0
 8004f34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d10d      	bne.n	8004f5e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6919      	ldr	r1, [r3, #16]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	460a      	mov	r2, r1
 8004f5c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d14a      	bne.n	800503e <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc0:	f040 8086 	bne.w	80050d0 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fe6:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	440a      	add	r2, r1
 8005002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800500a:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f242 7210 	movw	r2, #10000	; 0x2710
 8005018:	4293      	cmp	r3, r2
 800501a:	d902      	bls.n	8005022 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
          break;
 8005020:	e056      	b.n	80050d0 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800503a:	d0e7      	beq.n	800500c <USB_EPStopXfer+0x82>
 800503c:	e048      	b.n	80050d0 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005056:	d13b      	bne.n	80050d0 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800507a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800509e:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d902      	bls.n	80050b6 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75fb      	strb	r3, [r7, #23]
          break;
 80050b4:	e00c      	b.n	80050d0 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ce:	d0e7      	beq.n	80050a0 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050dc:	b480      	push	{r7}
 80050de:	b089      	sub	sp, #36	; 0x24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4611      	mov	r1, r2
 80050e8:	461a      	mov	r2, r3
 80050ea:	460b      	mov	r3, r1
 80050ec:	71fb      	strb	r3, [r7, #7]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d123      	bne.n	800514a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005102:	88bb      	ldrh	r3, [r7, #4]
 8005104:	3303      	adds	r3, #3
 8005106:	089b      	lsrs	r3, r3, #2
 8005108:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	e018      	b.n	8005142 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	031a      	lsls	r2, r3, #12
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511c:	461a      	mov	r2, r3
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	3301      	adds	r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3301      	adds	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	3301      	adds	r3, #1
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	d3e2      	bcc.n	8005110 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3724      	adds	r7, #36	; 0x24
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005156:	b480      	push	{r7}
 8005158:	b08b      	sub	sp, #44	; 0x2c
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	b29b      	uxth	r3, r3
 8005172:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800517c:	2300      	movs	r3, #0
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	e014      	b.n	80051ac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	601a      	str	r2, [r3, #0]
    pDest++;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	3301      	adds	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	3301      	adds	r3, #1
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	3301      	adds	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	3301      	adds	r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	3301      	adds	r3, #1
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d3e6      	bcc.n	8005182 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051b4:	8bfb      	ldrh	r3, [r7, #30]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01e      	beq.n	80051f8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c4:	461a      	mov	r2, r3
 80051c6:	f107 0310 	add.w	r3, r7, #16
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	fa22 f303 	lsr.w	r3, r2, r3
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	701a      	strb	r2, [r3, #0]
      i++;
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	3301      	adds	r3, #1
 80051e4:	623b      	str	r3, [r7, #32]
      pDest++;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	3301      	adds	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051ec:	8bfb      	ldrh	r3, [r7, #30]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051f2:	8bfb      	ldrh	r3, [r7, #30]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ea      	bne.n	80051ce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	372c      	adds	r7, #44	; 0x2c
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d12c      	bne.n	800527a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	db12      	blt.n	8005258 <USB_EPSetStall+0x54>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00f      	beq.n	8005258 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005252:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005256:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	440a      	add	r2, r1
 800526e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	e02b      	b.n	80052d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	db12      	blt.n	80052b2 <USB_EPSetStall+0xae>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00f      	beq.n	80052b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d128      	bne.n	800534c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005318:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	791b      	ldrb	r3, [r3, #4]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d003      	beq.n	800532a <USB_EPClearStall+0x4c>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	791b      	ldrb	r3, [r3, #4]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d138      	bne.n	800539c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e027      	b.n	800539c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	791b      	ldrb	r3, [r3, #4]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d003      	beq.n	800537c <USB_EPClearStall+0x9e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	791b      	ldrb	r3, [r3, #4]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d10f      	bne.n	800539c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e2:	4313      	orrs	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr

080053f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4013      	ands	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800540a:	68fb      	ldr	r3, [r7, #12]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	0c1b      	lsrs	r3, r3, #16
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	b29b      	uxth	r3, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054a8:	68bb      	ldr	r3, [r7, #8]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	fa22 f303 	lsr.w	r3, r2, r3
 80054e4:	01db      	lsls	r3, r3, #7
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4013      	ands	r3, r2
 8005500:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005502:	68bb      	ldr	r3, [r7, #8]
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr

0800550e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0301 	and.w	r3, r3, #1
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005542:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005546:	f023 0307 	bic.w	r3, r3, #7
 800554a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800555a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	460b      	mov	r3, r1
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	333c      	adds	r3, #60	; 0x3c
 8005582:	3304      	adds	r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4a25      	ldr	r2, [pc, #148]	; (8005620 <USB_EP0_OutStart+0xb4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d90a      	bls.n	80055a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a0:	d101      	bne.n	80055a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e037      	b.n	8005616 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	461a      	mov	r2, r3
 80055ae:	2300      	movs	r3, #0
 80055b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	f043 0318 	orr.w	r3, r3, #24
 80055d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055ee:	7afb      	ldrb	r3, [r7, #11]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d10f      	bne.n	8005614 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	461a      	mov	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	4f54300a 	.word	0x4f54300a

08005624 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005624:	b5b0      	push	{r4, r5, r7, lr}
 8005626:	b08c      	sub	sp, #48	; 0x30
 8005628:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800562a:	4b96      	ldr	r3, [pc, #600]	; (8005884 <MX_LWIP_Init+0x260>)
 800562c:	22c0      	movs	r2, #192	; 0xc0
 800562e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005630:	4b94      	ldr	r3, [pc, #592]	; (8005884 <MX_LWIP_Init+0x260>)
 8005632:	22a8      	movs	r2, #168	; 0xa8
 8005634:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 220;
 8005636:	4b93      	ldr	r3, [pc, #588]	; (8005884 <MX_LWIP_Init+0x260>)
 8005638:	22dc      	movs	r2, #220	; 0xdc
 800563a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800563c:	4b91      	ldr	r3, [pc, #580]	; (8005884 <MX_LWIP_Init+0x260>)
 800563e:	2202      	movs	r2, #2
 8005640:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005642:	4b91      	ldr	r3, [pc, #580]	; (8005888 <MX_LWIP_Init+0x264>)
 8005644:	22ff      	movs	r2, #255	; 0xff
 8005646:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005648:	4b8f      	ldr	r3, [pc, #572]	; (8005888 <MX_LWIP_Init+0x264>)
 800564a:	22ff      	movs	r2, #255	; 0xff
 800564c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800564e:	4b8e      	ldr	r3, [pc, #568]	; (8005888 <MX_LWIP_Init+0x264>)
 8005650:	22ff      	movs	r2, #255	; 0xff
 8005652:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005654:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <MX_LWIP_Init+0x264>)
 8005656:	2200      	movs	r2, #0
 8005658:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800565a:	4b8c      	ldr	r3, [pc, #560]	; (800588c <MX_LWIP_Init+0x268>)
 800565c:	22c0      	movs	r2, #192	; 0xc0
 800565e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005660:	4b8a      	ldr	r3, [pc, #552]	; (800588c <MX_LWIP_Init+0x268>)
 8005662:	22a8      	movs	r2, #168	; 0xa8
 8005664:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 220;
 8005666:	4b89      	ldr	r3, [pc, #548]	; (800588c <MX_LWIP_Init+0x268>)
 8005668:	22dc      	movs	r2, #220	; 0xdc
 800566a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800566c:	4b87      	ldr	r3, [pc, #540]	; (800588c <MX_LWIP_Init+0x268>)
 800566e:	2201      	movs	r2, #1
 8005670:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005672:	2100      	movs	r1, #0
 8005674:	2000      	movs	r0, #0
 8005676:	f004 fd21 	bl	800a0bc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800567a:	4b82      	ldr	r3, [pc, #520]	; (8005884 <MX_LWIP_Init+0x260>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	061a      	lsls	r2, r3, #24
 8005680:	4b80      	ldr	r3, [pc, #512]	; (8005884 <MX_LWIP_Init+0x260>)
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	431a      	orrs	r2, r3
 8005688:	4b7e      	ldr	r3, [pc, #504]	; (8005884 <MX_LWIP_Init+0x260>)
 800568a:	789b      	ldrb	r3, [r3, #2]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	4313      	orrs	r3, r2
 8005690:	4a7c      	ldr	r2, [pc, #496]	; (8005884 <MX_LWIP_Init+0x260>)
 8005692:	78d2      	ldrb	r2, [r2, #3]
 8005694:	4313      	orrs	r3, r2
 8005696:	061a      	lsls	r2, r3, #24
 8005698:	4b7a      	ldr	r3, [pc, #488]	; (8005884 <MX_LWIP_Init+0x260>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	0619      	lsls	r1, r3, #24
 800569e:	4b79      	ldr	r3, [pc, #484]	; (8005884 <MX_LWIP_Init+0x260>)
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	4319      	orrs	r1, r3
 80056a6:	4b77      	ldr	r3, [pc, #476]	; (8005884 <MX_LWIP_Init+0x260>)
 80056a8:	789b      	ldrb	r3, [r3, #2]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	430b      	orrs	r3, r1
 80056ae:	4975      	ldr	r1, [pc, #468]	; (8005884 <MX_LWIP_Init+0x260>)
 80056b0:	78c9      	ldrb	r1, [r1, #3]
 80056b2:	430b      	orrs	r3, r1
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056ba:	431a      	orrs	r2, r3
 80056bc:	4b71      	ldr	r3, [pc, #452]	; (8005884 <MX_LWIP_Init+0x260>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	0619      	lsls	r1, r3, #24
 80056c2:	4b70      	ldr	r3, [pc, #448]	; (8005884 <MX_LWIP_Init+0x260>)
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	4319      	orrs	r1, r3
 80056ca:	4b6e      	ldr	r3, [pc, #440]	; (8005884 <MX_LWIP_Init+0x260>)
 80056cc:	789b      	ldrb	r3, [r3, #2]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	430b      	orrs	r3, r1
 80056d2:	496c      	ldr	r1, [pc, #432]	; (8005884 <MX_LWIP_Init+0x260>)
 80056d4:	78c9      	ldrb	r1, [r1, #3]
 80056d6:	430b      	orrs	r3, r1
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056de:	431a      	orrs	r2, r3
 80056e0:	4b68      	ldr	r3, [pc, #416]	; (8005884 <MX_LWIP_Init+0x260>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	0619      	lsls	r1, r3, #24
 80056e6:	4b67      	ldr	r3, [pc, #412]	; (8005884 <MX_LWIP_Init+0x260>)
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	041b      	lsls	r3, r3, #16
 80056ec:	4319      	orrs	r1, r3
 80056ee:	4b65      	ldr	r3, [pc, #404]	; (8005884 <MX_LWIP_Init+0x260>)
 80056f0:	789b      	ldrb	r3, [r3, #2]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	430b      	orrs	r3, r1
 80056f6:	4963      	ldr	r1, [pc, #396]	; (8005884 <MX_LWIP_Init+0x260>)
 80056f8:	78c9      	ldrb	r1, [r1, #3]
 80056fa:	430b      	orrs	r3, r1
 80056fc:	0e1b      	lsrs	r3, r3, #24
 80056fe:	4313      	orrs	r3, r2
 8005700:	4a63      	ldr	r2, [pc, #396]	; (8005890 <MX_LWIP_Init+0x26c>)
 8005702:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005704:	4b60      	ldr	r3, [pc, #384]	; (8005888 <MX_LWIP_Init+0x264>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	061a      	lsls	r2, r3, #24
 800570a:	4b5f      	ldr	r3, [pc, #380]	; (8005888 <MX_LWIP_Init+0x264>)
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	431a      	orrs	r2, r3
 8005712:	4b5d      	ldr	r3, [pc, #372]	; (8005888 <MX_LWIP_Init+0x264>)
 8005714:	789b      	ldrb	r3, [r3, #2]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	4313      	orrs	r3, r2
 800571a:	4a5b      	ldr	r2, [pc, #364]	; (8005888 <MX_LWIP_Init+0x264>)
 800571c:	78d2      	ldrb	r2, [r2, #3]
 800571e:	4313      	orrs	r3, r2
 8005720:	061a      	lsls	r2, r3, #24
 8005722:	4b59      	ldr	r3, [pc, #356]	; (8005888 <MX_LWIP_Init+0x264>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	0619      	lsls	r1, r3, #24
 8005728:	4b57      	ldr	r3, [pc, #348]	; (8005888 <MX_LWIP_Init+0x264>)
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	4319      	orrs	r1, r3
 8005730:	4b55      	ldr	r3, [pc, #340]	; (8005888 <MX_LWIP_Init+0x264>)
 8005732:	789b      	ldrb	r3, [r3, #2]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	430b      	orrs	r3, r1
 8005738:	4953      	ldr	r1, [pc, #332]	; (8005888 <MX_LWIP_Init+0x264>)
 800573a:	78c9      	ldrb	r1, [r1, #3]
 800573c:	430b      	orrs	r3, r1
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005744:	431a      	orrs	r2, r3
 8005746:	4b50      	ldr	r3, [pc, #320]	; (8005888 <MX_LWIP_Init+0x264>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	0619      	lsls	r1, r3, #24
 800574c:	4b4e      	ldr	r3, [pc, #312]	; (8005888 <MX_LWIP_Init+0x264>)
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	041b      	lsls	r3, r3, #16
 8005752:	4319      	orrs	r1, r3
 8005754:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <MX_LWIP_Init+0x264>)
 8005756:	789b      	ldrb	r3, [r3, #2]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	430b      	orrs	r3, r1
 800575c:	494a      	ldr	r1, [pc, #296]	; (8005888 <MX_LWIP_Init+0x264>)
 800575e:	78c9      	ldrb	r1, [r1, #3]
 8005760:	430b      	orrs	r3, r1
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005768:	431a      	orrs	r2, r3
 800576a:	4b47      	ldr	r3, [pc, #284]	; (8005888 <MX_LWIP_Init+0x264>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	0619      	lsls	r1, r3, #24
 8005770:	4b45      	ldr	r3, [pc, #276]	; (8005888 <MX_LWIP_Init+0x264>)
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	4319      	orrs	r1, r3
 8005778:	4b43      	ldr	r3, [pc, #268]	; (8005888 <MX_LWIP_Init+0x264>)
 800577a:	789b      	ldrb	r3, [r3, #2]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	430b      	orrs	r3, r1
 8005780:	4941      	ldr	r1, [pc, #260]	; (8005888 <MX_LWIP_Init+0x264>)
 8005782:	78c9      	ldrb	r1, [r1, #3]
 8005784:	430b      	orrs	r3, r1
 8005786:	0e1b      	lsrs	r3, r3, #24
 8005788:	4313      	orrs	r3, r2
 800578a:	4a42      	ldr	r2, [pc, #264]	; (8005894 <MX_LWIP_Init+0x270>)
 800578c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800578e:	4b3f      	ldr	r3, [pc, #252]	; (800588c <MX_LWIP_Init+0x268>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	061a      	lsls	r2, r3, #24
 8005794:	4b3d      	ldr	r3, [pc, #244]	; (800588c <MX_LWIP_Init+0x268>)
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	041b      	lsls	r3, r3, #16
 800579a:	431a      	orrs	r2, r3
 800579c:	4b3b      	ldr	r3, [pc, #236]	; (800588c <MX_LWIP_Init+0x268>)
 800579e:	789b      	ldrb	r3, [r3, #2]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	4313      	orrs	r3, r2
 80057a4:	4a39      	ldr	r2, [pc, #228]	; (800588c <MX_LWIP_Init+0x268>)
 80057a6:	78d2      	ldrb	r2, [r2, #3]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	061a      	lsls	r2, r3, #24
 80057ac:	4b37      	ldr	r3, [pc, #220]	; (800588c <MX_LWIP_Init+0x268>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	0619      	lsls	r1, r3, #24
 80057b2:	4b36      	ldr	r3, [pc, #216]	; (800588c <MX_LWIP_Init+0x268>)
 80057b4:	785b      	ldrb	r3, [r3, #1]
 80057b6:	041b      	lsls	r3, r3, #16
 80057b8:	4319      	orrs	r1, r3
 80057ba:	4b34      	ldr	r3, [pc, #208]	; (800588c <MX_LWIP_Init+0x268>)
 80057bc:	789b      	ldrb	r3, [r3, #2]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	430b      	orrs	r3, r1
 80057c2:	4932      	ldr	r1, [pc, #200]	; (800588c <MX_LWIP_Init+0x268>)
 80057c4:	78c9      	ldrb	r1, [r1, #3]
 80057c6:	430b      	orrs	r3, r1
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057ce:	431a      	orrs	r2, r3
 80057d0:	4b2e      	ldr	r3, [pc, #184]	; (800588c <MX_LWIP_Init+0x268>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	0619      	lsls	r1, r3, #24
 80057d6:	4b2d      	ldr	r3, [pc, #180]	; (800588c <MX_LWIP_Init+0x268>)
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	4319      	orrs	r1, r3
 80057de:	4b2b      	ldr	r3, [pc, #172]	; (800588c <MX_LWIP_Init+0x268>)
 80057e0:	789b      	ldrb	r3, [r3, #2]
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	430b      	orrs	r3, r1
 80057e6:	4929      	ldr	r1, [pc, #164]	; (800588c <MX_LWIP_Init+0x268>)
 80057e8:	78c9      	ldrb	r1, [r1, #3]
 80057ea:	430b      	orrs	r3, r1
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057f2:	431a      	orrs	r2, r3
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <MX_LWIP_Init+0x268>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	0619      	lsls	r1, r3, #24
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <MX_LWIP_Init+0x268>)
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	4319      	orrs	r1, r3
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <MX_LWIP_Init+0x268>)
 8005804:	789b      	ldrb	r3, [r3, #2]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	430b      	orrs	r3, r1
 800580a:	4920      	ldr	r1, [pc, #128]	; (800588c <MX_LWIP_Init+0x268>)
 800580c:	78c9      	ldrb	r1, [r1, #3]
 800580e:	430b      	orrs	r3, r1
 8005810:	0e1b      	lsrs	r3, r3, #24
 8005812:	4313      	orrs	r3, r2
 8005814:	4a20      	ldr	r2, [pc, #128]	; (8005898 <MX_LWIP_Init+0x274>)
 8005816:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005818:	4b20      	ldr	r3, [pc, #128]	; (800589c <MX_LWIP_Init+0x278>)
 800581a:	9302      	str	r3, [sp, #8]
 800581c:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <MX_LWIP_Init+0x27c>)
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	2300      	movs	r3, #0
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <MX_LWIP_Init+0x274>)
 8005826:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <MX_LWIP_Init+0x270>)
 8005828:	4919      	ldr	r1, [pc, #100]	; (8005890 <MX_LWIP_Init+0x26c>)
 800582a:	481e      	ldr	r0, [pc, #120]	; (80058a4 <MX_LWIP_Init+0x280>)
 800582c:	f006 fd86 	bl	800c33c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005830:	481c      	ldr	r0, [pc, #112]	; (80058a4 <MX_LWIP_Init+0x280>)
 8005832:	f006 ff33 	bl	800c69c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005836:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <MX_LWIP_Init+0x280>)
 8005838:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800583c:	089b      	lsrs	r3, r3, #2
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005848:	4816      	ldr	r0, [pc, #88]	; (80058a4 <MX_LWIP_Init+0x280>)
 800584a:	f006 ff35 	bl	800c6b8 <netif_set_up>
 800584e:	e002      	b.n	8005856 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005850:	4814      	ldr	r0, [pc, #80]	; (80058a4 <MX_LWIP_Init+0x280>)
 8005852:	f006 ff9d 	bl	800c790 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005856:	4914      	ldr	r1, [pc, #80]	; (80058a8 <MX_LWIP_Init+0x284>)
 8005858:	4812      	ldr	r0, [pc, #72]	; (80058a4 <MX_LWIP_Init+0x280>)
 800585a:	f006 ffcb 	bl	800c7f4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <MX_LWIP_Init+0x288>)
 8005860:	1d3c      	adds	r4, r7, #4
 8005862:	461d      	mov	r5, r3
 8005864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005868:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800586c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005870:	1d3b      	adds	r3, r7, #4
 8005872:	490c      	ldr	r1, [pc, #48]	; (80058a4 <MX_LWIP_Init+0x280>)
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fca1 	bl	80071bc <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800587a:	bf00      	nop
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bdb0      	pop	{r4, r5, r7, pc}
 8005882:	bf00      	nop
 8005884:	20000408 	.word	0x20000408
 8005888:	2000040c 	.word	0x2000040c
 800588c:	20000410 	.word	0x20000410
 8005890:	200003fc 	.word	0x200003fc
 8005894:	20000400 	.word	0x20000400
 8005898:	20000404 	.word	0x20000404
 800589c:	08009ff9 	.word	0x08009ff9
 80058a0:	08005c45 	.word	0x08005c45
 80058a4:	200003c8 	.word	0x200003c8
 80058a8:	080058b1 	.word	0x080058b1
 80058ac:	08017b4c 	.word	0x08017b4c

080058b0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
	...

080058c4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <HAL_ETH_RxCpltCallback+0x1c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fdbd 	bl	8007450 <osSemaphoreRelease>
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20004ee0 	.word	0x20004ee0

080058e4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <HAL_ETH_TxCpltCallback+0x1c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fdad 	bl	8007450 <osSemaphoreRelease>
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20004ee4 	.word	0x20004ee4

08005904 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fc f89b 	bl	8001a48 <HAL_ETH_GetDMAError>
 8005912:	4603      	mov	r3, r0
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b80      	cmp	r3, #128	; 0x80
 800591a:	d104      	bne.n	8005926 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800591c:	4b04      	ldr	r3, [pc, #16]	; (8005930 <HAL_ETH_ErrorCallback+0x2c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f001 fd95 	bl	8007450 <osSemaphoreRelease>
  }
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20004ee0 	.word	0x20004ee0

08005934 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005934:	b5b0      	push	{r4, r5, r7, lr}
 8005936:	b08c      	sub	sp, #48	; 0x30
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005942:	4b4f      	ldr	r3, [pc, #316]	; (8005a80 <low_level_init+0x14c>)
 8005944:	4a4f      	ldr	r2, [pc, #316]	; (8005a84 <low_level_init+0x150>)
 8005946:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[1] = 0x80;
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  MACAddr[2] = 0xE1;
 8005954:	23e1      	movs	r3, #225	; 0xe1
 8005956:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  MACAddr[3] = 0x00;
 800595a:	2300      	movs	r3, #0
 800595c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  MACAddr[4] = 0x00;
 8005960:	2300      	movs	r3, #0
 8005962:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[5] = 0x00;
 8005966:	2300      	movs	r3, #0
 8005968:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  heth.Init.MACAddr = &MACAddr[0];
 800596c:	4a44      	ldr	r2, [pc, #272]	; (8005a80 <low_level_init+0x14c>)
 800596e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005972:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005974:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <low_level_init+0x14c>)
 8005976:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800597a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800597c:	4b40      	ldr	r3, [pc, #256]	; (8005a80 <low_level_init+0x14c>)
 800597e:	4a42      	ldr	r2, [pc, #264]	; (8005a88 <low_level_init+0x154>)
 8005980:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005982:	4b3f      	ldr	r3, [pc, #252]	; (8005a80 <low_level_init+0x14c>)
 8005984:	4a41      	ldr	r2, [pc, #260]	; (8005a8c <low_level_init+0x158>)
 8005986:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005988:	4b3d      	ldr	r3, [pc, #244]	; (8005a80 <low_level_init+0x14c>)
 800598a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800598e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005990:	483b      	ldr	r0, [pc, #236]	; (8005a80 <low_level_init+0x14c>)
 8005992:	f7fb fd11 	bl	80013b8 <HAL_ETH_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800599c:	2238      	movs	r2, #56	; 0x38
 800599e:	2100      	movs	r1, #0
 80059a0:	483b      	ldr	r0, [pc, #236]	; (8005a90 <low_level_init+0x15c>)
 80059a2:	f011 fa07 	bl	8016db4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80059a6:	4b3a      	ldr	r3, [pc, #232]	; (8005a90 <low_level_init+0x15c>)
 80059a8:	2221      	movs	r2, #33	; 0x21
 80059aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80059ac:	4b38      	ldr	r3, [pc, #224]	; (8005a90 <low_level_init+0x15c>)
 80059ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80059b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80059b4:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <low_level_init+0x15c>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80059ba:	4836      	ldr	r0, [pc, #216]	; (8005a94 <low_level_init+0x160>)
 80059bc:	f006 fb7a 	bl	800c0b4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2206      	movs	r2, #6
 80059c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80059c8:	4b2d      	ldr	r3, [pc, #180]	; (8005a80 <low_level_init+0x14c>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	781a      	ldrb	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80059d4:	4b2a      	ldr	r3, [pc, #168]	; (8005a80 <low_level_init+0x14c>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	785a      	ldrb	r2, [r3, #1]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80059e0:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <low_level_init+0x14c>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	789a      	ldrb	r2, [r3, #2]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80059ec:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <low_level_init+0x14c>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	78da      	ldrb	r2, [r3, #3]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80059f8:	4b21      	ldr	r3, [pc, #132]	; (8005a80 <low_level_init+0x14c>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	791a      	ldrb	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005a04:	4b1e      	ldr	r3, [pc, #120]	; (8005a80 <low_level_init+0x14c>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	795a      	ldrb	r2, [r3, #5]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005a16:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a1e:	f043 030a 	orr.w	r3, r3, #10
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f001 ffab 	bl	800798a <xQueueGenericCreate>
 8005a34:	4603      	mov	r3, r0
 8005a36:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <low_level_init+0x164>)
 8005a38:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	2001      	movs	r0, #1
 8005a40:	f001 ffa3 	bl	800798a <xQueueGenericCreate>
 8005a44:	4603      	mov	r3, r0
 8005a46:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <low_level_init+0x168>)
 8005a48:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005a4a:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <low_level_init+0x16c>)
 8005a4c:	f107 040c 	add.w	r4, r7, #12
 8005a50:	461d      	mov	r5, r3
 8005a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005a5e:	f107 030c 	add.w	r3, r7, #12
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 fba9 	bl	80071bc <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8005a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <low_level_init+0x142>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8005a72:	f7fa ff4f 	bl	8000914 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005a76:	bf00      	nop
 8005a78:	3730      	adds	r7, #48	; 0x30
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20004ee8 	.word	0x20004ee8
 8005a84:	40028000 	.word	0x40028000
 8005a88:	20004e40 	.word	0x20004e40
 8005a8c:	20004da0 	.word	0x20004da0
 8005a90:	20004f98 	.word	0x20004f98
 8005a94:	0801ae44 	.word	0x0801ae44
 8005a98:	20004ee0 	.word	0x20004ee0
 8005a9c:	20004ee4 	.word	0x20004ee4
 8005aa0:	08017b70 	.word	0x08017b70

08005aa4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b092      	sub	sp, #72	; 0x48
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005abc:	f107 030c 	add.w	r3, r7, #12
 8005ac0:	2230      	movs	r2, #48	; 0x30
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f011 f975 	bl	8016db4 <memset>

  for(q = p; q != NULL; q = q->next)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ace:	e045      	b.n	8005b5c <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d902      	bls.n	8005adc <low_level_output+0x38>
      return ERR_IF;
 8005ad6:	f06f 030b 	mvn.w	r3, #11
 8005ada:	e065      	b.n	8005ba8 <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8005adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3348      	adds	r3, #72	; 0x48
 8005aec:	443b      	add	r3, r7
 8005aee:	3b3c      	subs	r3, #60	; 0x3c
 8005af0:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af4:	895b      	ldrh	r3, [r3, #10]
 8005af6:	4619      	mov	r1, r3
 8005af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	3348      	adds	r3, #72	; 0x48
 8005b04:	443b      	add	r3, r7
 8005b06:	3b38      	subs	r3, #56	; 0x38
 8005b08:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d011      	beq.n	8005b34 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b12:	1e5a      	subs	r2, r3, #1
 8005b14:	f107 000c 	add.w	r0, r7, #12
 8005b18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	440b      	add	r3, r1
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	18c1      	adds	r1, r0, r3
 8005b24:	4613      	mov	r3, r2
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	3348      	adds	r3, #72	; 0x48
 8005b2e:	443b      	add	r3, r7
 8005b30:	3b34      	subs	r3, #52	; 0x34
 8005b32:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8005b3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	3348      	adds	r3, #72	; 0x48
 8005b48:	443b      	add	r3, r7
 8005b4a:	3b34      	subs	r3, #52	; 0x34
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	3301      	adds	r3, #1
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1b6      	bne.n	8005ad0 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	891b      	ldrh	r3, [r3, #8]
 8005b66:	461a      	mov	r2, r3
 8005b68:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <low_level_output+0x10c>)
 8005b6a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005b6c:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <low_level_output+0x10c>)
 8005b6e:	f107 030c 	add.w	r3, r7, #12
 8005b72:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005b74:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <low_level_output+0x10c>)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f007 fa88 	bl	800d090 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005b80:	490b      	ldr	r1, [pc, #44]	; (8005bb0 <low_level_output+0x10c>)
 8005b82:	480c      	ldr	r0, [pc, #48]	; (8005bb4 <low_level_output+0x110>)
 8005b84:	f7fb fc9f 	bl	80014c6 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005b88:	bf00      	nop
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <low_level_output+0x114>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f04f 31ff 	mov.w	r1, #4294967295
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fc0e 	bl	80073b4 <osSemaphoreWait>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f5      	bne.n	8005b8a <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005b9e:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <low_level_output+0x110>)
 8005ba0:	f7fb fe22 	bl	80017e8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005ba4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3748      	adds	r7, #72	; 0x48
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20004f98 	.word	0x20004f98
 8005bb4:	20004ee8 	.word	0x20004ee8
 8005bb8:	20004ee4 	.word	0x20004ee4

08005bbc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <low_level_input+0x2c>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005bd0:	f107 030c 	add.w	r3, r7, #12
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4805      	ldr	r0, [pc, #20]	; (8005bec <low_level_input+0x30>)
 8005bd8:	f7fb fcd1 	bl	800157e <HAL_ETH_ReadData>
  }

  return p;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20004d9c 	.word	0x20004d9c
 8005bec:	20004ee8 	.word	0x20004ee8

08005bf0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <ethernetif_input+0x50>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f04f 31ff 	mov.w	r1, #4294967295
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fbd3 	bl	80073b4 <osSemaphoreWait>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f5      	bne.n	8005c00 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005c14:	68b8      	ldr	r0, [r7, #8]
 8005c16:	f7ff ffd1 	bl	8005bbc <low_level_input>
 8005c1a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	4798      	blx	r3
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f007 f988 	bl	800cf48 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1ea      	bne.n	8005c14 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c3e:	e7df      	b.n	8005c00 <ethernetif_input+0x10>
 8005c40:	20004ee0 	.word	0x20004ee0

08005c44 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <ethernetif_init+0x1c>
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <ethernetif_init+0x48>)
 8005c54:	f240 12a9 	movw	r2, #425	; 0x1a9
 8005c58:	490d      	ldr	r1, [pc, #52]	; (8005c90 <ethernetif_init+0x4c>)
 8005c5a:	480e      	ldr	r0, [pc, #56]	; (8005c94 <ethernetif_init+0x50>)
 8005c5c:	f011 f990 	bl	8016f80 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2273      	movs	r2, #115	; 0x73
 8005c64:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2274      	movs	r2, #116	; 0x74
 8005c6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <ethernetif_init+0x54>)
 8005c74:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <ethernetif_init+0x58>)
 8005c7a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fe59 	bl	8005934 <low_level_init>

  return ERR_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	08017b8c 	.word	0x08017b8c
 8005c90:	08017ba8 	.word	0x08017ba8
 8005c94:	08017bb8 	.word	0x08017bb8
 8005c98:	08014569 	.word	0x08014569
 8005c9c:	08005aa5 	.word	0x08005aa5

08005ca0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	4809      	ldr	r0, [pc, #36]	; (8005cd4 <pbuf_free_custom+0x34>)
 8005cb0:	f006 faf0 	bl	800c294 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005cb4:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <pbuf_free_custom+0x38>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d107      	bne.n	8005ccc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <pbuf_free_custom+0x38>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <pbuf_free_custom+0x3c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 fbc2 	bl	8007450 <osSemaphoreRelease>
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	0801ae44 	.word	0x0801ae44
 8005cd8:	20004d9c 	.word	0x20004d9c
 8005cdc:	20004ee0 	.word	0x20004ee0

08005ce0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ce4:	f7fb f930 	bl	8000f48 <HAL_GetTick>
 8005ce8:	4603      	mov	r3, r0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	bd80      	pop	{r7, pc}

08005cee <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005cf6:	2064      	movs	r0, #100	; 0x64
 8005cf8:	f001 faac 	bl	8007254 <osDelay>
 8005cfc:	e7fb      	b.n	8005cf6 <ethernet_link_thread+0x8>
	...

08005d00 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005d08:	4812      	ldr	r0, [pc, #72]	; (8005d54 <HAL_ETH_RxAllocateCallback+0x54>)
 8005d0a:	f006 fa4f 	bl	800c1ac <memp_malloc_pool>
 8005d0e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d014      	beq.n	8005d40 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f103 0220 	add.w	r2, r3, #32
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <HAL_ETH_RxAllocateCallback+0x58>)
 8005d24:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005d2e:	9201      	str	r2, [sp, #4]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2241      	movs	r2, #65	; 0x41
 8005d36:	2100      	movs	r1, #0
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f006 ff4b 	bl	800cbd4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005d3e:	e005      	b.n	8005d4c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	0801ae44 	.word	0x0801ae44
 8005d58:	08005ca1 	.word	0x08005ca1
 8005d5c:	20004d9c 	.word	0x20004d9c

08005d60 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b089      	sub	sp, #36	; 0x24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3b20      	subs	r3, #32
 8005d7e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	887a      	ldrh	r2, [r7, #2]
 8005d90:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e003      	b.n	8005daa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	e009      	b.n	8005dcc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	891a      	ldrh	r2, [r3, #8]
 8005dbc:	887b      	ldrh	r3, [r7, #2]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f2      	bne.n	8005db8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	3724      	adds	r7, #36	; 0x24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f007 f8ae 	bl	800cf48 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e66:	2303      	movs	r3, #3
 8005e68:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f8ab 	bl	8006fe2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ea8:	f003 031f 	and.w	r3, r3, #31
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d01a      	beq.n	8005ee6 <USBD_LL_SetupStage+0x72>
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d822      	bhi.n	8005efa <USBD_LL_SetupStage+0x86>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <USBD_LL_SetupStage+0x4a>
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d00a      	beq.n	8005ed2 <USBD_LL_SetupStage+0x5e>
 8005ebc:	e01d      	b.n	8005efa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fb02 	bl	80064d0 <USBD_StdDevReq>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed0:	e020      	b.n	8005f14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fb6a 	bl	80065b4 <USBD_StdItfReq>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee4:	e016      	b.n	8005f14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fbcc 	bl	800668c <USBD_StdEPReq>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef8:	e00c      	b.n	8005f14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f010 fbf7 	bl	80166fc <USBD_LL_StallEP>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]
      break;
 8005f12:	bf00      	nop
  }

  return ret;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	460b      	mov	r3, r1
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d16e      	bne.n	8006014 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	f040 8098 	bne.w	800607a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d913      	bls.n	8005f7e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	bf28      	it	cs
 8005f70:	4613      	movcs	r3, r2
 8005f72:	461a      	mov	r2, r3
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f001 f8aa 	bl	80070d0 <USBD_CtlContinueRx>
 8005f7c:	e07d      	b.n	800607a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d014      	beq.n	8005fb6 <USBD_LL_DataOutStage+0x98>
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d81d      	bhi.n	8005fcc <USBD_LL_DataOutStage+0xae>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <USBD_LL_DataOutStage+0x7c>
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d003      	beq.n	8005fa0 <USBD_LL_DataOutStage+0x82>
 8005f98:	e018      	b.n	8005fcc <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f9e:	e018      	b.n	8005fd2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	4619      	mov	r1, r3
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fa5a 	bl	8006464 <USBD_CoreFindIF>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75bb      	strb	r3, [r7, #22]
            break;
 8005fb4:	e00d      	b.n	8005fd2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fa5b 	bl	800647c <USBD_CoreFindEP>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75bb      	strb	r3, [r7, #22]
            break;
 8005fca:	e002      	b.n	8005fd2 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	75bb      	strb	r3, [r7, #22]
            break;
 8005fd0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005fd2:	7dbb      	ldrb	r3, [r7, #22]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d119      	bne.n	800600c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d113      	bne.n	800600c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005fe4:	7dba      	ldrb	r2, [r7, #22]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	32ae      	adds	r2, #174	; 0xae
 8005fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ff4:	7dba      	ldrb	r2, [r7, #22]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ffc:	7dba      	ldrb	r2, [r7, #22]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	32ae      	adds	r2, #174	; 0xae
 8006002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f001 f870 	bl	80070f2 <USBD_CtlSendStatus>
 8006012:	e032      	b.n	800607a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006014:	7afb      	ldrb	r3, [r7, #11]
 8006016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800601a:	b2db      	uxtb	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fa2c 	bl	800647c <USBD_CoreFindEP>
 8006024:	4603      	mov	r3, r0
 8006026:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006028:	7dbb      	ldrb	r3, [r7, #22]
 800602a:	2bff      	cmp	r3, #255	; 0xff
 800602c:	d025      	beq.n	800607a <USBD_LL_DataOutStage+0x15c>
 800602e:	7dbb      	ldrb	r3, [r7, #22]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d122      	bne.n	800607a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b03      	cmp	r3, #3
 800603e:	d117      	bne.n	8006070 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006040:	7dba      	ldrb	r2, [r7, #22]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	32ae      	adds	r2, #174	; 0xae
 8006046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00f      	beq.n	8006070 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006050:	7dba      	ldrb	r2, [r7, #22]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006058:	7dba      	ldrb	r2, [r7, #22]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	32ae      	adds	r2, #174	; 0xae
 800605e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	7afa      	ldrb	r2, [r7, #11]
 8006066:	4611      	mov	r1, r2
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	4798      	blx	r3
 800606c:	4603      	mov	r3, r0
 800606e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	e000      	b.n	800607c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	460b      	mov	r3, r1
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006092:	7afb      	ldrb	r3, [r7, #11]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d16f      	bne.n	8006178 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3314      	adds	r3, #20
 800609c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d15a      	bne.n	800615e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d914      	bls.n	80060de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	1ad2      	subs	r2, r2, r3
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	461a      	mov	r2, r3
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 ffef 	bl	80070ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060d0:	2300      	movs	r3, #0
 80060d2:	2200      	movs	r2, #0
 80060d4:	2100      	movs	r1, #0
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f010 fbb9 	bl	801684e <USBD_LL_PrepareReceive>
 80060dc:	e03f      	b.n	800615e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d11c      	bne.n	8006124 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d316      	bcc.n	8006124 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006100:	429a      	cmp	r2, r3
 8006102:	d20f      	bcs.n	8006124 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006104:	2200      	movs	r2, #0
 8006106:	2100      	movs	r1, #0
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 ffd0 	bl	80070ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006116:	2300      	movs	r3, #0
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f010 fb96 	bl	801684e <USBD_LL_PrepareReceive>
 8006122:	e01c      	b.n	800615e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b03      	cmp	r3, #3
 800612e:	d10f      	bne.n	8006150 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d009      	beq.n	8006150 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006150:	2180      	movs	r1, #128	; 0x80
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f010 fad2 	bl	80166fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 ffdd 	bl	8007118 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d03a      	beq.n	80061de <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fe43 	bl	8005df4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006176:	e032      	b.n	80061de <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800617e:	b2db      	uxtb	r3, r3
 8006180:	4619      	mov	r1, r3
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f97a 	bl	800647c <USBD_CoreFindEP>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	2bff      	cmp	r3, #255	; 0xff
 8006190:	d025      	beq.n	80061de <USBD_LL_DataInStage+0x15a>
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d122      	bne.n	80061de <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d11c      	bne.n	80061de <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061a4:	7dfa      	ldrb	r2, [r7, #23]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	32ae      	adds	r2, #174	; 0xae
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d014      	beq.n	80061de <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061b4:	7dfa      	ldrb	r2, [r7, #23]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061bc:	7dfa      	ldrb	r2, [r7, #23]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	32ae      	adds	r2, #174	; 0xae
 80061c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	7afa      	ldrb	r2, [r7, #11]
 80061ca:	4611      	mov	r1, r2
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	4798      	blx	r3
 80061d0:	4603      	mov	r3, r0
 80061d2:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80061d4:	7dbb      	ldrb	r3, [r7, #22]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80061da:	7dbb      	ldrb	r3, [r7, #22]
 80061dc:	e000      	b.n	80061e0 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d014      	beq.n	800624e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6852      	ldr	r2, [r2, #4]
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	4611      	mov	r1, r2
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800624a:	2303      	movs	r3, #3
 800624c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800624e:	2340      	movs	r3, #64	; 0x40
 8006250:	2200      	movs	r2, #0
 8006252:	2100      	movs	r1, #0
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f010 fa2b 	bl	80166b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2240      	movs	r2, #64	; 0x40
 8006266:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800626a:	2340      	movs	r3, #64	; 0x40
 800626c:	2200      	movs	r2, #0
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f010 fa1d 	bl	80166b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2240      	movs	r2, #64	; 0x40
 8006280:	621a      	str	r2, [r3, #32]

  return ret;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	78fa      	ldrb	r2, [r7, #3]
 800629c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2204      	movs	r2, #4
 80062c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d106      	bne.n	80062f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b03      	cmp	r3, #3
 8006314:	d110      	bne.n	8006338 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	32ae      	adds	r2, #174	; 0xae
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	e01c      	b.n	800639e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b03      	cmp	r3, #3
 800636e:	d115      	bne.n	800639c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	32ae      	adds	r2, #174	; 0xae
 800637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	32ae      	adds	r2, #174	; 0xae
 800638e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	4611      	mov	r1, r2
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	32ae      	adds	r2, #174	; 0xae
 80063bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e01c      	b.n	8006402 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d115      	bne.n	8006400 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32ae      	adds	r2, #174	; 0xae
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32ae      	adds	r2, #174	; 0xae
 80063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	4611      	mov	r1, r2
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00e      	beq.n	800645a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6852      	ldr	r2, [r2, #4]
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	4611      	mov	r1, r2
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006470:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006488:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr

08006494 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3301      	adds	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064b2:	8a3b      	ldrh	r3, [r7, #16]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	b21a      	sxth	r2, r3
 80064b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064bc:	4313      	orrs	r3, r2
 80064be:	b21b      	sxth	r3, r3
 80064c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064c2:	89fb      	ldrh	r3, [r7, #14]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr
	...

080064d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d005      	beq.n	80064f6 <USBD_StdDevReq+0x26>
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d857      	bhi.n	800659e <USBD_StdDevReq+0xce>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00f      	beq.n	8006512 <USBD_StdDevReq+0x42>
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d153      	bne.n	800659e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	32ae      	adds	r2, #174	; 0xae
 8006500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
      break;
 8006510:	e04a      	b.n	80065a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b09      	cmp	r3, #9
 8006518:	d83b      	bhi.n	8006592 <USBD_StdDevReq+0xc2>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <USBD_StdDevReq+0x50>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006575 	.word	0x08006575
 8006524:	08006589 	.word	0x08006589
 8006528:	08006593 	.word	0x08006593
 800652c:	0800657f 	.word	0x0800657f
 8006530:	08006593 	.word	0x08006593
 8006534:	08006553 	.word	0x08006553
 8006538:	08006549 	.word	0x08006549
 800653c:	08006593 	.word	0x08006593
 8006540:	0800656b 	.word	0x0800656b
 8006544:	0800655d 	.word	0x0800655d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa3c 	bl	80069c8 <USBD_GetDescriptor>
          break;
 8006550:	e024      	b.n	800659c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fba1 	bl	8006c9c <USBD_SetAddress>
          break;
 800655a:	e01f      	b.n	800659c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fbe0 	bl	8006d24 <USBD_SetConfig>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
          break;
 8006568:	e018      	b.n	800659c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fc83 	bl	8006e78 <USBD_GetConfig>
          break;
 8006572:	e013      	b.n	800659c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fcb4 	bl	8006ee4 <USBD_GetStatus>
          break;
 800657c:	e00e      	b.n	800659c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fce3 	bl	8006f4c <USBD_SetFeature>
          break;
 8006586:	e009      	b.n	800659c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fd07 	bl	8006f9e <USBD_ClrFeature>
          break;
 8006590:	e004      	b.n	800659c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fd5e 	bl	8007056 <USBD_CtlError>
          break;
 800659a:	bf00      	nop
      }
      break;
 800659c:	e004      	b.n	80065a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fd58 	bl	8007056 <USBD_CtlError>
      break;
 80065a6:	bf00      	nop
  }

  return ret;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop

080065b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d005      	beq.n	80065da <USBD_StdItfReq+0x26>
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d852      	bhi.n	8006678 <USBD_StdItfReq+0xc4>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <USBD_StdItfReq+0x26>
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d14e      	bne.n	8006678 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d840      	bhi.n	800666a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	889b      	ldrh	r3, [r3, #4]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d836      	bhi.n	8006660 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	889b      	ldrh	r3, [r3, #4]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ff32 	bl	8006464 <USBD_CoreFindIF>
 8006600:	4603      	mov	r3, r0
 8006602:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	2bff      	cmp	r3, #255	; 0xff
 8006608:	d01d      	beq.n	8006646 <USBD_StdItfReq+0x92>
 800660a:	7bbb      	ldrb	r3, [r7, #14]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11a      	bne.n	8006646 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006610:	7bba      	ldrb	r2, [r7, #14]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	32ae      	adds	r2, #174	; 0xae
 8006616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00f      	beq.n	8006640 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006620:	7bba      	ldrb	r2, [r7, #14]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006628:	7bba      	ldrb	r2, [r7, #14]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	32ae      	adds	r2, #174	; 0xae
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800663e:	e004      	b.n	800664a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006640:	2303      	movs	r3, #3
 8006642:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006644:	e001      	b.n	800664a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006646:	2303      	movs	r3, #3
 8006648:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	88db      	ldrh	r3, [r3, #6]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d110      	bne.n	8006674 <USBD_StdItfReq+0xc0>
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10d      	bne.n	8006674 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fd4a 	bl	80070f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800665e:	e009      	b.n	8006674 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fcf7 	bl	8007056 <USBD_CtlError>
          break;
 8006668:	e004      	b.n	8006674 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fcf2 	bl	8007056 <USBD_CtlError>
          break;
 8006672:	e000      	b.n	8006676 <USBD_StdItfReq+0xc2>
          break;
 8006674:	bf00      	nop
      }
      break;
 8006676:	e004      	b.n	8006682 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fceb 	bl	8007056 <USBD_CtlError>
      break;
 8006680:	bf00      	nop
  }

  return ret;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	889b      	ldrh	r3, [r3, #4]
 800669e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d007      	beq.n	80066bc <USBD_StdEPReq+0x30>
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	f200 817f 	bhi.w	80069b0 <USBD_StdEPReq+0x324>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d02a      	beq.n	800670c <USBD_StdEPReq+0x80>
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	f040 817a 	bne.w	80069b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff fedb 	bl	800647c <USBD_CoreFindEP>
 80066c6:	4603      	mov	r3, r0
 80066c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066ca:	7b7b      	ldrb	r3, [r7, #13]
 80066cc:	2bff      	cmp	r3, #255	; 0xff
 80066ce:	f000 8174 	beq.w	80069ba <USBD_StdEPReq+0x32e>
 80066d2:	7b7b      	ldrb	r3, [r7, #13]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f040 8170 	bne.w	80069ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80066da:	7b7a      	ldrb	r2, [r7, #13]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80066e2:	7b7a      	ldrb	r2, [r7, #13]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	32ae      	adds	r2, #174	; 0xae
 80066e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8163 	beq.w	80069ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80066f4:	7b7a      	ldrb	r2, [r7, #13]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	32ae      	adds	r2, #174	; 0xae
 80066fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
 8006706:	4603      	mov	r3, r0
 8006708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800670a:	e156      	b.n	80069ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d008      	beq.n	8006726 <USBD_StdEPReq+0x9a>
 8006714:	2b03      	cmp	r3, #3
 8006716:	f300 8145 	bgt.w	80069a4 <USBD_StdEPReq+0x318>
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 809b 	beq.w	8006856 <USBD_StdEPReq+0x1ca>
 8006720:	2b01      	cmp	r3, #1
 8006722:	d03c      	beq.n	800679e <USBD_StdEPReq+0x112>
 8006724:	e13e      	b.n	80069a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d002      	beq.n	8006738 <USBD_StdEPReq+0xac>
 8006732:	2b03      	cmp	r3, #3
 8006734:	d016      	beq.n	8006764 <USBD_StdEPReq+0xd8>
 8006736:	e02c      	b.n	8006792 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00d      	beq.n	800675a <USBD_StdEPReq+0xce>
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b80      	cmp	r3, #128	; 0x80
 8006742:	d00a      	beq.n	800675a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f00f ffd7 	bl	80166fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800674e:	2180      	movs	r1, #128	; 0x80
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f00f ffd3 	bl	80166fc <USBD_LL_StallEP>
 8006756:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006758:	e020      	b.n	800679c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fc7a 	bl	8007056 <USBD_CtlError>
              break;
 8006762:	e01b      	b.n	800679c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	885b      	ldrh	r3, [r3, #2]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10e      	bne.n	800678a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <USBD_StdEPReq+0xfe>
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b80      	cmp	r3, #128	; 0x80
 8006776:	d008      	beq.n	800678a <USBD_StdEPReq+0xfe>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	88db      	ldrh	r3, [r3, #6]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f00f ffb9 	bl	80166fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fcb1 	bl	80070f2 <USBD_CtlSendStatus>

              break;
 8006790:	e004      	b.n	800679c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fc5e 	bl	8007056 <USBD_CtlError>
              break;
 800679a:	bf00      	nop
          }
          break;
 800679c:	e107      	b.n	80069ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d002      	beq.n	80067b0 <USBD_StdEPReq+0x124>
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d016      	beq.n	80067dc <USBD_StdEPReq+0x150>
 80067ae:	e04b      	b.n	8006848 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00d      	beq.n	80067d2 <USBD_StdEPReq+0x146>
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	2b80      	cmp	r3, #128	; 0x80
 80067ba:	d00a      	beq.n	80067d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f00f ff9b 	bl	80166fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067c6:	2180      	movs	r1, #128	; 0x80
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f00f ff97 	bl	80166fc <USBD_LL_StallEP>
 80067ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067d0:	e040      	b.n	8006854 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fc3e 	bl	8007056 <USBD_CtlError>
              break;
 80067da:	e03b      	b.n	8006854 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	885b      	ldrh	r3, [r3, #2]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d136      	bne.n	8006852 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f00f ffa1 	bl	801673a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fc7a 	bl	80070f2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fe3a 	bl	800647c <USBD_CoreFindEP>
 8006808:	4603      	mov	r3, r0
 800680a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800680c:	7b7b      	ldrb	r3, [r7, #13]
 800680e:	2bff      	cmp	r3, #255	; 0xff
 8006810:	d01f      	beq.n	8006852 <USBD_StdEPReq+0x1c6>
 8006812:	7b7b      	ldrb	r3, [r7, #13]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11c      	bne.n	8006852 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006818:	7b7a      	ldrb	r2, [r7, #13]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006820:	7b7a      	ldrb	r2, [r7, #13]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	32ae      	adds	r2, #174	; 0xae
 8006826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006830:	7b7a      	ldrb	r2, [r7, #13]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	32ae      	adds	r2, #174	; 0xae
 8006836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006846:	e004      	b.n	8006852 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fc03 	bl	8007056 <USBD_CtlError>
              break;
 8006850:	e000      	b.n	8006854 <USBD_StdEPReq+0x1c8>
              break;
 8006852:	bf00      	nop
          }
          break;
 8006854:	e0ab      	b.n	80069ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d002      	beq.n	8006868 <USBD_StdEPReq+0x1dc>
 8006862:	2b03      	cmp	r3, #3
 8006864:	d032      	beq.n	80068cc <USBD_StdEPReq+0x240>
 8006866:	e097      	b.n	8006998 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <USBD_StdEPReq+0x1f2>
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	d004      	beq.n	800687e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fbed 	bl	8007056 <USBD_CtlError>
                break;
 800687c:	e091      	b.n	80069a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800687e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006882:	2b00      	cmp	r3, #0
 8006884:	da0b      	bge.n	800689e <USBD_StdEPReq+0x212>
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	3310      	adds	r3, #16
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	4413      	add	r3, r2
 800689a:	3304      	adds	r3, #4
 800689c:	e00b      	b.n	80068b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	4413      	add	r3, r2
 80068b4:	3304      	adds	r3, #4
 80068b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2202      	movs	r2, #2
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fbd7 	bl	8007078 <USBD_CtlSendData>
              break;
 80068ca:	e06a      	b.n	80069a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	da11      	bge.n	80068f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	f003 020f 	and.w	r2, r3, #15
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	3324      	adds	r3, #36	; 0x24
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d117      	bne.n	800691e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fbb0 	bl	8007056 <USBD_CtlError>
                  break;
 80068f6:	e054      	b.n	80069a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	f003 020f 	and.w	r2, r3, #15
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fb9d 	bl	8007056 <USBD_CtlError>
                  break;
 800691c:	e041      	b.n	80069a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800691e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006922:	2b00      	cmp	r3, #0
 8006924:	da0b      	bge.n	800693e <USBD_StdEPReq+0x2b2>
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	3310      	adds	r3, #16
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4413      	add	r3, r2
 800693a:	3304      	adds	r3, #4
 800693c:	e00b      	b.n	8006956 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	3304      	adds	r3, #4
 8006956:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <USBD_StdEPReq+0x2d8>
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	2b80      	cmp	r3, #128	; 0x80
 8006962:	d103      	bne.n	800696c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e00e      	b.n	800698a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f00f ff01 	bl	8016778 <USBD_LL_IsStallEP>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e002      	b.n	800698a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2202      	movs	r2, #2
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fb71 	bl	8007078 <USBD_CtlSendData>
              break;
 8006996:	e004      	b.n	80069a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fb5b 	bl	8007056 <USBD_CtlError>
              break;
 80069a0:	bf00      	nop
          }
          break;
 80069a2:	e004      	b.n	80069ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fb55 	bl	8007056 <USBD_CtlError>
          break;
 80069ac:	bf00      	nop
      }
      break;
 80069ae:	e005      	b.n	80069bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fb4f 	bl	8007056 <USBD_CtlError>
      break;
 80069b8:	e000      	b.n	80069bc <USBD_StdEPReq+0x330>
      break;
 80069ba:	bf00      	nop
  }

  return ret;
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	885b      	ldrh	r3, [r3, #2]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	2b06      	cmp	r3, #6
 80069ea:	f200 8128 	bhi.w	8006c3e <USBD_GetDescriptor+0x276>
 80069ee:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <USBD_GetDescriptor+0x2c>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a11 	.word	0x08006a11
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006a69 	.word	0x08006a69
 8006a00:	08006c3f 	.word	0x08006c3f
 8006a04:	08006c3f 	.word	0x08006c3f
 8006a08:	08006bdf 	.word	0x08006bdf
 8006a0c:	08006c0b 	.word	0x08006c0b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	7c12      	ldrb	r2, [r2, #16]
 8006a1c:	f107 0108 	add.w	r1, r7, #8
 8006a20:	4610      	mov	r0, r2
 8006a22:	4798      	blx	r3
 8006a24:	60f8      	str	r0, [r7, #12]
      break;
 8006a26:	e112      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7c1b      	ldrb	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10d      	bne.n	8006a4c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	f107 0208 	add.w	r2, r7, #8
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
 8006a40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3301      	adds	r3, #1
 8006a46:	2202      	movs	r2, #2
 8006a48:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a4a:	e100      	b.n	8006c4e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	f107 0208 	add.w	r2, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	2202      	movs	r2, #2
 8006a64:	701a      	strb	r2, [r3, #0]
      break;
 8006a66:	e0f2      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	885b      	ldrh	r3, [r3, #2]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	f200 80ac 	bhi.w	8006bcc <USBD_GetDescriptor+0x204>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <USBD_GetDescriptor+0xb4>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006a95 	.word	0x08006a95
 8006a80:	08006ac9 	.word	0x08006ac9
 8006a84:	08006afd 	.word	0x08006afd
 8006a88:	08006b31 	.word	0x08006b31
 8006a8c:	08006b65 	.word	0x08006b65
 8006a90:	08006b99 	.word	0x08006b99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	7c12      	ldrb	r2, [r2, #16]
 8006aac:	f107 0108 	add.w	r1, r7, #8
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4798      	blx	r3
 8006ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ab6:	e091      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 facb 	bl	8007056 <USBD_CtlError>
            err++;
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ac6:	e089      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00b      	beq.n	8006aec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	7c12      	ldrb	r2, [r2, #16]
 8006ae0:	f107 0108 	add.w	r1, r7, #8
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
 8006ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aea:	e077      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fab1 	bl	8007056 <USBD_CtlError>
            err++;
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	3301      	adds	r3, #1
 8006af8:	72fb      	strb	r3, [r7, #11]
          break;
 8006afa:	e06f      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	7c12      	ldrb	r2, [r2, #16]
 8006b14:	f107 0108 	add.w	r1, r7, #8
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4798      	blx	r3
 8006b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b1e:	e05d      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa97 	bl	8007056 <USBD_CtlError>
            err++;
 8006b28:	7afb      	ldrb	r3, [r7, #11]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b2e:	e055      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00b      	beq.n	8006b54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	7c12      	ldrb	r2, [r2, #16]
 8006b48:	f107 0108 	add.w	r1, r7, #8
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
 8006b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b52:	e043      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa7d 	bl	8007056 <USBD_CtlError>
            err++;
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	72fb      	strb	r3, [r7, #11]
          break;
 8006b62:	e03b      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	7c12      	ldrb	r2, [r2, #16]
 8006b7c:	f107 0108 	add.w	r1, r7, #8
 8006b80:	4610      	mov	r0, r2
 8006b82:	4798      	blx	r3
 8006b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b86:	e029      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa63 	bl	8007056 <USBD_CtlError>
            err++;
 8006b90:	7afb      	ldrb	r3, [r7, #11]
 8006b92:	3301      	adds	r3, #1
 8006b94:	72fb      	strb	r3, [r7, #11]
          break;
 8006b96:	e021      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	7c12      	ldrb	r2, [r2, #16]
 8006bb0:	f107 0108 	add.w	r1, r7, #8
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bba:	e00f      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa49 	bl	8007056 <USBD_CtlError>
            err++;
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bca:	e007      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa41 	bl	8007056 <USBD_CtlError>
          err++;
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006bda:	bf00      	nop
      }
      break;
 8006bdc:	e037      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	7c1b      	ldrb	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bee:	f107 0208 	add.w	r2, r7, #8
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	4798      	blx	r3
 8006bf6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bf8:	e029      	b.n	8006c4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa2a 	bl	8007056 <USBD_CtlError>
        err++;
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	3301      	adds	r3, #1
 8006c06:	72fb      	strb	r3, [r7, #11]
      break;
 8006c08:	e021      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7c1b      	ldrb	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10d      	bne.n	8006c2e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f107 0208 	add.w	r2, r7, #8
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4798      	blx	r3
 8006c22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	2207      	movs	r2, #7
 8006c2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c2c:	e00f      	b.n	8006c4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa10 	bl	8007056 <USBD_CtlError>
        err++;
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c3c:	e007      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fa08 	bl	8007056 <USBD_CtlError>
      err++;
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c4c:	bf00      	nop
  }

  if (err != 0U)
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11e      	bne.n	8006c92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	88db      	ldrh	r3, [r3, #6]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d016      	beq.n	8006c8a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c5c:	893b      	ldrh	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00e      	beq.n	8006c80 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	88da      	ldrh	r2, [r3, #6]
 8006c66:	893b      	ldrh	r3, [r7, #8]
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	bf28      	it	cs
 8006c6c:	4613      	movcs	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c72:	893b      	ldrh	r3, [r7, #8]
 8006c74:	461a      	mov	r2, r3
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f9fd 	bl	8007078 <USBD_CtlSendData>
 8006c7e:	e009      	b.n	8006c94 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9e7 	bl	8007056 <USBD_CtlError>
 8006c88:	e004      	b.n	8006c94 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa31 	bl	80070f2 <USBD_CtlSendStatus>
 8006c90:	e000      	b.n	8006c94 <USBD_GetDescriptor+0x2cc>
    return;
 8006c92:	bf00      	nop
  }
}
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop

08006c9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	889b      	ldrh	r3, [r3, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d131      	bne.n	8006d12 <USBD_SetAddress+0x76>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	88db      	ldrh	r3, [r3, #6]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d12d      	bne.n	8006d12 <USBD_SetAddress+0x76>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	885b      	ldrh	r3, [r3, #2]
 8006cba:	2b7f      	cmp	r3, #127	; 0x7f
 8006cbc:	d829      	bhi.n	8006d12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d104      	bne.n	8006ce0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f9bc 	bl	8007056 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	e01d      	b.n	8006d1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7bfa      	ldrb	r2, [r7, #15]
 8006ce4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f00f fd6e 	bl	80167ce <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f9fd 	bl	80070f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d004      	beq.n	8006d08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d06:	e009      	b.n	8006d1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d10:	e004      	b.n	8006d1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f99e 	bl	8007056 <USBD_CtlError>
  }
}
 8006d1a:	bf00      	nop
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	885b      	ldrh	r3, [r3, #2]
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	4b4e      	ldr	r3, [pc, #312]	; (8006e74 <USBD_SetConfig+0x150>)
 8006d3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d3c:	4b4d      	ldr	r3, [pc, #308]	; (8006e74 <USBD_SetConfig+0x150>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d905      	bls.n	8006d50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f985 	bl	8007056 <USBD_CtlError>
    return USBD_FAIL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e08c      	b.n	8006e6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d002      	beq.n	8006d62 <USBD_SetConfig+0x3e>
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d029      	beq.n	8006db4 <USBD_SetConfig+0x90>
 8006d60:	e075      	b.n	8006e4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d62:	4b44      	ldr	r3, [pc, #272]	; (8006e74 <USBD_SetConfig+0x150>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d020      	beq.n	8006dac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d6a:	4b42      	ldr	r3, [pc, #264]	; (8006e74 <USBD_SetConfig+0x150>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d74:	4b3f      	ldr	r3, [pc, #252]	; (8006e74 <USBD_SetConfig+0x150>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff f844 	bl	8005e08 <USBD_SetClassConfig>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d008      	beq.n	8006d9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f962 	bl	8007056 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2202      	movs	r2, #2
 8006d96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d9a:	e065      	b.n	8006e68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f9a8 	bl	80070f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2203      	movs	r2, #3
 8006da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006daa:	e05d      	b.n	8006e68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f9a0 	bl	80070f2 <USBD_CtlSendStatus>
      break;
 8006db2:	e059      	b.n	8006e68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006db4:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <USBD_SetConfig+0x150>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d112      	bne.n	8006de2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <USBD_SetConfig+0x150>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dce:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <USBD_SetConfig+0x150>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff f833 	bl	8005e40 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f989 	bl	80070f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006de0:	e042      	b.n	8006e68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <USBD_SetConfig+0x150>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d02a      	beq.n	8006e46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff f821 	bl	8005e40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006dfe:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <USBD_SetConfig+0x150>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <USBD_SetConfig+0x150>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7fe fffa 	bl	8005e08 <USBD_SetClassConfig>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00f      	beq.n	8006e3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f918 	bl	8007056 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff f806 	bl	8005e40 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e3c:	e014      	b.n	8006e68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f957 	bl	80070f2 <USBD_CtlSendStatus>
      break;
 8006e44:	e010      	b.n	8006e68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f953 	bl	80070f2 <USBD_CtlSendStatus>
      break;
 8006e4c:	e00c      	b.n	8006e68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f900 	bl	8007056 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <USBD_SetConfig+0x150>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fe ffef 	bl	8005e40 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e62:	2303      	movs	r3, #3
 8006e64:	73fb      	strb	r3, [r7, #15]
      break;
 8006e66:	bf00      	nop
  }

  return ret;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20004fd0 	.word	0x20004fd0

08006e78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d004      	beq.n	8006e94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f8e2 	bl	8007056 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e92:	e023      	b.n	8006edc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	dc02      	bgt.n	8006ea6 <USBD_GetConfig+0x2e>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dc03      	bgt.n	8006eac <USBD_GetConfig+0x34>
 8006ea4:	e015      	b.n	8006ed2 <USBD_GetConfig+0x5a>
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d00b      	beq.n	8006ec2 <USBD_GetConfig+0x4a>
 8006eaa:	e012      	b.n	8006ed2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f8dc 	bl	8007078 <USBD_CtlSendData>
        break;
 8006ec0:	e00c      	b.n	8006edc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8d4 	bl	8007078 <USBD_CtlSendData>
        break;
 8006ed0:	e004      	b.n	8006edc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8be 	bl	8007056 <USBD_CtlError>
        break;
 8006eda:	bf00      	nop
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d81e      	bhi.n	8006f3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	88db      	ldrh	r3, [r3, #6]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d004      	beq.n	8006f0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f8a5 	bl	8007056 <USBD_CtlError>
        break;
 8006f0c:	e01a      	b.n	8006f44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f043 0202 	orr.w	r2, r3, #2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	2202      	movs	r2, #2
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f8a0 	bl	8007078 <USBD_CtlSendData>
      break;
 8006f38:	e004      	b.n	8006f44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f88a 	bl	8007056 <USBD_CtlError>
      break;
 8006f42:	bf00      	nop
  }
}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d107      	bne.n	8006f6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f8c3 	bl	80070f2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f6c:	e013      	b.n	8006f96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	885b      	ldrh	r3, [r3, #2]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d10b      	bne.n	8006f8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	889b      	ldrh	r3, [r3, #4]
 8006f7a:	0a1b      	lsrs	r3, r3, #8
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f8b3 	bl	80070f2 <USBD_CtlSendStatus>
}
 8006f8c:	e003      	b.n	8006f96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f860 	bl	8007056 <USBD_CtlError>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d80b      	bhi.n	8006fce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	885b      	ldrh	r3, [r3, #2]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10c      	bne.n	8006fd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f893 	bl	80070f2 <USBD_CtlSendStatus>
      }
      break;
 8006fcc:	e004      	b.n	8006fd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f840 	bl	8007056 <USBD_CtlError>
      break;
 8006fd6:	e000      	b.n	8006fda <USBD_ClrFeature+0x3c>
      break;
 8006fd8:	bf00      	nop
  }
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	781a      	ldrb	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3301      	adds	r3, #1
 800700a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff fa41 	bl	8006494 <SWAPBYTE>
 8007012:	4603      	mov	r3, r0
 8007014:	461a      	mov	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3301      	adds	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff fa34 	bl	8006494 <SWAPBYTE>
 800702c:	4603      	mov	r3, r0
 800702e:	461a      	mov	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7ff fa27 	bl	8006494 <SWAPBYTE>
 8007046:	4603      	mov	r3, r0
 8007048:	461a      	mov	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	80da      	strh	r2, [r3, #6]
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007060:	2180      	movs	r1, #128	; 0x80
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f00f fb4a 	bl	80166fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007068:	2100      	movs	r1, #0
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f00f fb46 	bl	80166fc <USBD_LL_StallEP>
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2202      	movs	r2, #2
 8007088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	2100      	movs	r1, #0
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f00f fbb4 	bl	801680c <USBD_LL_Transmit>

  return USBD_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	2100      	movs	r1, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f00f fba3 	bl	801680c <USBD_LL_Transmit>

  return USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f00f fbb3 	bl	801684e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2204      	movs	r2, #4
 80070fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007102:	2300      	movs	r3, #0
 8007104:	2200      	movs	r2, #0
 8007106:	2100      	movs	r1, #0
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f00f fb7f 	bl	801680c <USBD_LL_Transmit>

  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2205      	movs	r2, #5
 8007124:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007128:	2300      	movs	r3, #0
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f00f fb8d 	bl	801684e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	4603      	mov	r3, r0
 8007146:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800714c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007150:	2b84      	cmp	r3, #132	; 0x84
 8007152:	d005      	beq.n	8007160 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007154:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	3303      	adds	r3, #3
 800715e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007160:	68fb      	ldr	r3, [r7, #12]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007172:	f3ef 8305 	mrs	r3, IPSR
 8007176:	607b      	str	r3, [r7, #4]
  return(result);
 8007178:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800717a:	2b00      	cmp	r3, #0
 800717c:	bf14      	ite	ne
 800717e:	2301      	movne	r3, #1
 8007180:	2300      	moveq	r3, #0
 8007182:	b2db      	uxtb	r3, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007192:	f001 fc1f 	bl	80089d4 <vTaskStartScheduler>
  
  return osOK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd80      	pop	{r7, pc}

0800719c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80071a0:	f7ff ffe4 	bl	800716c <inHandlerMode>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80071aa:	f001 fd33 	bl	8008c14 <xTaskGetTickCountFromISR>
 80071ae:	4603      	mov	r3, r0
 80071b0:	e002      	b.n	80071b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80071b2:	f001 fd21 	bl	8008bf8 <xTaskGetTickCount>
 80071b6:	4603      	mov	r3, r0
  }
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	bd80      	pop	{r7, pc}

080071bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80071bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071be:	b089      	sub	sp, #36	; 0x24
 80071c0:	af04      	add	r7, sp, #16
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d020      	beq.n	8007210 <osThreadCreate+0x54>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01c      	beq.n	8007210 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685c      	ldr	r4, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681d      	ldr	r5, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691e      	ldr	r6, [r3, #16]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff ffa8 	bl	800713e <makeFreeRtosPriority>
 80071ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071f8:	9202      	str	r2, [sp, #8]
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	9100      	str	r1, [sp, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	4632      	mov	r2, r6
 8007202:	4629      	mov	r1, r5
 8007204:	4620      	mov	r0, r4
 8007206:	f001 fa0a 	bl	800861e <xTaskCreateStatic>
 800720a:	4603      	mov	r3, r0
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	e01c      	b.n	800724a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685c      	ldr	r4, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800721c:	b29e      	uxth	r6, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff ff8a 	bl	800713e <makeFreeRtosPriority>
 800722a:	4602      	mov	r2, r0
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	9200      	str	r2, [sp, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	4632      	mov	r2, r6
 8007238:	4629      	mov	r1, r5
 800723a:	4620      	mov	r0, r4
 800723c:	f001 fa49 	bl	80086d2 <xTaskCreate>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d001      	beq.n	800724a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	e000      	b.n	800724c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800724a:	68fb      	ldr	r3, [r7, #12]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007254 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <osDelay+0x16>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	e000      	b.n	800726c <osDelay+0x18>
 800726a:	2301      	movs	r3, #1
 800726c:	4618      	mov	r0, r3
 800726e:	f001 fb7d 	bl	800896c <vTaskDelay>
  
  return osOK;
 8007272:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	4619      	mov	r1, r3
 8007292:	2001      	movs	r0, #1
 8007294:	f000 fc03 	bl	8007a9e <xQueueCreateMutexStatic>
 8007298:	4603      	mov	r3, r0
 800729a:	e003      	b.n	80072a4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800729c:	2001      	movs	r0, #1
 800729e:	f000 fbe6 	bl	8007a6e <xQueueCreateMutex>
 80072a2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80072b6:	2300      	movs	r3, #0
 80072b8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <osMutexWait+0x18>
    return osErrorParameter;
 80072c0:	2380      	movs	r3, #128	; 0x80
 80072c2:	e03a      	b.n	800733a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ce:	d103      	bne.n	80072d8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e009      	b.n	80072ec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d006      	beq.n	80072ec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <osMutexWait+0x40>
      ticks = 1;
 80072e8:	2301      	movs	r3, #1
 80072ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80072ec:	f7ff ff3e 	bl	800716c <inHandlerMode>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d017      	beq.n	8007326 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	461a      	mov	r2, r3
 80072fc:	2100      	movs	r1, #0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 ffe8 	bl	80082d4 <xQueueReceiveFromISR>
 8007304:	4603      	mov	r3, r0
 8007306:	2b01      	cmp	r3, #1
 8007308:	d001      	beq.n	800730e <osMutexWait+0x62>
      return osErrorOS;
 800730a:	23ff      	movs	r3, #255	; 0xff
 800730c:	e015      	b.n	800733a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d011      	beq.n	8007338 <osMutexWait+0x8c>
 8007314:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <osMutexWait+0x98>)
 8007316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	e008      	b.n	8007338 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fecb 	bl	80080c4 <xQueueSemaphoreTake>
 800732e:	4603      	mov	r3, r0
 8007330:	2b01      	cmp	r3, #1
 8007332:	d001      	beq.n	8007338 <osMutexWait+0x8c>
    return osErrorOS;
 8007334:	23ff      	movs	r3, #255	; 0xff
 8007336:	e000      	b.n	800733a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007354:	2300      	movs	r3, #0
 8007356:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007358:	f7ff ff08 	bl	800716c <inHandlerMode>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fd45 	bl	8007df8 <xQueueGiveFromISR>
 800736e:	4603      	mov	r3, r0
 8007370:	2b01      	cmp	r3, #1
 8007372:	d001      	beq.n	8007378 <osMutexRelease+0x30>
      return osErrorOS;
 8007374:	23ff      	movs	r3, #255	; 0xff
 8007376:	e017      	b.n	80073a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d013      	beq.n	80073a6 <osMutexRelease+0x5e>
 800737e:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <osMutexRelease+0x68>)
 8007380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	e00a      	b.n	80073a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007390:	2300      	movs	r3, #0
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fb9c 	bl	8007ad4 <xQueueGenericSend>
 800739c:	4603      	mov	r3, r0
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d001      	beq.n	80073a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80073a2:	23ff      	movs	r3, #255	; 0xff
 80073a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80073a6:	68fb      	ldr	r3, [r7, #12]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80073be:	2300      	movs	r3, #0
 80073c0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	e03a      	b.n	8007442 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d6:	d103      	bne.n	80073e0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80073d8:	f04f 33ff 	mov.w	r3, #4294967295
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e009      	b.n	80073f4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d006      	beq.n	80073f4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <osSemaphoreWait+0x40>
      ticks = 1;
 80073f0:	2301      	movs	r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80073f4:	f7ff feba 	bl	800716c <inHandlerMode>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d017      	beq.n	800742e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80073fe:	f107 0308 	add.w	r3, r7, #8
 8007402:	461a      	mov	r2, r3
 8007404:	2100      	movs	r1, #0
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 ff64 	bl	80082d4 <xQueueReceiveFromISR>
 800740c:	4603      	mov	r3, r0
 800740e:	2b01      	cmp	r3, #1
 8007410:	d001      	beq.n	8007416 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007412:	23ff      	movs	r3, #255	; 0xff
 8007414:	e015      	b.n	8007442 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d011      	beq.n	8007440 <osSemaphoreWait+0x8c>
 800741c:	4b0b      	ldr	r3, [pc, #44]	; (800744c <osSemaphoreWait+0x98>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	e008      	b.n	8007440 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fe47 	bl	80080c4 <xQueueSemaphoreTake>
 8007436:	4603      	mov	r3, r0
 8007438:	2b01      	cmp	r3, #1
 800743a:	d001      	beq.n	8007440 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800743c:	23ff      	movs	r3, #255	; 0xff
 800743e:	e000      	b.n	8007442 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800745c:	2300      	movs	r3, #0
 800745e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007460:	f7ff fe84 	bl	800716c <inHandlerMode>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d016      	beq.n	8007498 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fcc1 	bl	8007df8 <xQueueGiveFromISR>
 8007476:	4603      	mov	r3, r0
 8007478:	2b01      	cmp	r3, #1
 800747a:	d001      	beq.n	8007480 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800747c:	23ff      	movs	r3, #255	; 0xff
 800747e:	e017      	b.n	80074b0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d013      	beq.n	80074ae <osSemaphoreRelease+0x5e>
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <osSemaphoreRelease+0x68>)
 8007488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	e00a      	b.n	80074ae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007498:	2300      	movs	r3, #0
 800749a:	2200      	movs	r2, #0
 800749c:	2100      	movs	r1, #0
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fb18 	bl	8007ad4 <xQueueGenericSend>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d001      	beq.n	80074ae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80074aa:	23ff      	movs	r3, #255	; 0xff
 80074ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80074ae:	68fb      	ldr	r3, [r7, #12]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80074bc:	b590      	push	{r4, r7, lr}
 80074be:	b085      	sub	sp, #20
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d011      	beq.n	80074f2 <osMessageCreate+0x36>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6859      	ldr	r1, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	2400      	movs	r4, #0
 80074e8:	9400      	str	r4, [sp, #0]
 80074ea:	f000 f9db 	bl	80078a4 <xQueueGenericCreateStatic>
 80074ee:	4603      	mov	r3, r0
 80074f0:	e008      	b.n	8007504 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	4619      	mov	r1, r3
 80074fe:	f000 fa44 	bl	800798a <xQueueGenericCreate>
 8007502:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	bd90      	pop	{r4, r7, pc}

0800750c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <osMessagePut+0x1e>
    ticks = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800752a:	f7ff fe1f 	bl	800716c <inHandlerMode>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d018      	beq.n	8007566 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007534:	f107 0210 	add.w	r2, r7, #16
 8007538:	f107 0108 	add.w	r1, r7, #8
 800753c:	2300      	movs	r3, #0
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fbc2 	bl	8007cc8 <xQueueGenericSendFromISR>
 8007544:	4603      	mov	r3, r0
 8007546:	2b01      	cmp	r3, #1
 8007548:	d001      	beq.n	800754e <osMessagePut+0x42>
      return osErrorOS;
 800754a:	23ff      	movs	r3, #255	; 0xff
 800754c:	e018      	b.n	8007580 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d014      	beq.n	800757e <osMessagePut+0x72>
 8007554:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <osMessagePut+0x7c>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	e00b      	b.n	800757e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007566:	f107 0108 	add.w	r1, r7, #8
 800756a:	2300      	movs	r3, #0
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fab0 	bl	8007ad4 <xQueueGenericSend>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d001      	beq.n	800757e <osMessagePut+0x72>
      return osErrorOS;
 800757a:	23ff      	movs	r3, #255	; 0xff
 800757c:	e000      	b.n	8007580 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800758c:	b590      	push	{r4, r7, lr}
 800758e:	b08b      	sub	sp, #44	; 0x2c
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	617b      	str	r3, [r7, #20]
    return event;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	461c      	mov	r4, r3
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075ba:	e054      	b.n	8007666 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80075bc:	2300      	movs	r3, #0
 80075be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ca:	d103      	bne.n	80075d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80075cc:	f04f 33ff 	mov.w	r3, #4294967295
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
 80075d2:	e009      	b.n	80075e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d006      	beq.n	80075e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <osMessageGet+0x5c>
      ticks = 1;
 80075e4:	2301      	movs	r3, #1
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80075e8:	f7ff fdc0 	bl	800716c <inHandlerMode>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01c      	beq.n	800762c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80075f2:	f107 0220 	add.w	r2, r7, #32
 80075f6:	f107 0314 	add.w	r3, r7, #20
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	68b8      	ldr	r0, [r7, #8]
 8007600:	f000 fe68 	bl	80082d4 <xQueueReceiveFromISR>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d102      	bne.n	8007610 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800760a:	2310      	movs	r3, #16
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	e001      	b.n	8007614 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01d      	beq.n	8007656 <osMessageGet+0xca>
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <osMessageGet+0xe4>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	e014      	b.n	8007656 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800762c:	f107 0314 	add.w	r3, r7, #20
 8007630:	3304      	adds	r3, #4
 8007632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007634:	4619      	mov	r1, r3
 8007636:	68b8      	ldr	r0, [r7, #8]
 8007638:	f000 fc68 	bl	8007f0c <xQueueReceive>
 800763c:	4603      	mov	r3, r0
 800763e:	2b01      	cmp	r3, #1
 8007640:	d102      	bne.n	8007648 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007642:	2310      	movs	r3, #16
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	e006      	b.n	8007656 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <osMessageGet+0xc6>
 800764e:	2300      	movs	r3, #0
 8007650:	e000      	b.n	8007654 <osMessageGet+0xc8>
 8007652:	2340      	movs	r3, #64	; 0x40
 8007654:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	461c      	mov	r4, r3
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	372c      	adds	r7, #44	; 0x2c
 800766a:	46bd      	mov	sp, r7
 800766c:	bd90      	pop	{r4, r7, pc}
 800766e:	bf00      	nop
 8007670:	e000ed04 	.word	0xe000ed04

08007674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f103 0208 	add.w	r2, r3, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f103 0208 	add.w	r2, r3, #8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f103 0208 	add.w	r2, r3, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr

080076ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007726:	d103      	bne.n	8007730 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	e00c      	b.n	800774a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3308      	adds	r3, #8
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e002      	b.n	800773e <vListInsert+0x2e>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	d2f6      	bcs.n	8007738 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr

08007780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6892      	ldr	r2, [r2, #8]
 8007796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6852      	ldr	r2, [r2, #4]
 80077a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d103      	bne.n	80077b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	1e5a      	subs	r2, r3, #1
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr
	...

080077d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077fa:	bf00      	nop

	taskENTER_CRITICAL();
 80077fc:	f002 f824 	bl	8009848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782c:	3b01      	subs	r3, #1
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007832:	fb01 f303 	mul.w	r3, r1, r3
 8007836:	441a      	add	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	22ff      	movs	r2, #255	; 0xff
 8007848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d114      	bne.n	800787c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01a      	beq.n	8007890 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3310      	adds	r3, #16
 800785e:	4618      	mov	r0, r3
 8007860:	f001 fb26 	bl	8008eb0 <xTaskRemoveFromEventList>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d012      	beq.n	8007890 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800786a:	4b0d      	ldr	r3, [pc, #52]	; (80078a0 <xQueueGenericReset+0xcc>)
 800786c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	e009      	b.n	8007890 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3310      	adds	r3, #16
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fef7 	bl	8007674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3324      	adds	r3, #36	; 0x24
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fef2 	bl	8007674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007890:	f002 f808 	bl	80098a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007894:	2301      	movs	r3, #1
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	e000ed04 	.word	0xe000ed04

080078a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08e      	sub	sp, #56	; 0x38
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <xQueueGenericCreateStatic+0x28>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078ca:	bf00      	nop

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <xQueueGenericCreateStatic+0x42>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078e4:	bf00      	nop

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <xQueueGenericCreateStatic+0x4e>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <xQueueGenericCreateStatic+0x52>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <xQueueGenericCreateStatic+0x54>
 80078f6:	2300      	movs	r3, #0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <xQueueGenericCreateStatic+0x6c>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	623b      	str	r3, [r7, #32]
}
 800790e:	bf00      	nop
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <xQueueGenericCreateStatic+0x78>
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <xQueueGenericCreateStatic+0x7c>
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <xQueueGenericCreateStatic+0x7e>
 8007920:	2300      	movs	r3, #0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <xQueueGenericCreateStatic+0x96>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	61fb      	str	r3, [r7, #28]
}
 8007938:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800793a:	2348      	movs	r3, #72	; 0x48
 800793c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b48      	cmp	r3, #72	; 0x48
 8007942:	d009      	beq.n	8007958 <xQueueGenericCreateStatic+0xb4>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	61bb      	str	r3, [r7, #24]
}
 8007956:	bf00      	nop
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007958:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00d      	beq.n	8007980 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800796c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4613      	mov	r3, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f83e 	bl	80079fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007982:	4618      	mov	r0, r3
 8007984:	3730      	adds	r7, #48	; 0x30
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800798a:	b580      	push	{r7, lr}
 800798c:	b08a      	sub	sp, #40	; 0x28
 800798e:	af02      	add	r7, sp, #8
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	4613      	mov	r3, r2
 8007996:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <xQueueGenericCreate+0x28>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	613b      	str	r3, [r7, #16]
}
 80079b0:	bf00      	nop

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	3348      	adds	r3, #72	; 0x48
 80079c0:	4618      	mov	r0, r3
 80079c2:	f002 f841 	bl	8009a48 <pvPortMalloc>
 80079c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d011      	beq.n	80079f2 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	3348      	adds	r3, #72	; 0x48
 80079d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079e0:	79fa      	ldrb	r2, [r7, #7]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	4613      	mov	r3, r2
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 f805 	bl	80079fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079f2:	69bb      	ldr	r3, [r7, #24]
	}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	e002      	b.n	8007a1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	69b8      	ldr	r0, [r7, #24]
 8007a2e:	f7ff fed1 	bl	80077d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00e      	beq.n	8007a66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f837 	bl	8007ad4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b086      	sub	sp, #24
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	4603      	mov	r3, r0
 8007a76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6939      	ldr	r1, [r7, #16]
 8007a86:	6978      	ldr	r0, [r7, #20]
 8007a88:	f7ff ff7f 	bl	800798a <xQueueGenericCreate>
 8007a8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff ffd3 	bl	8007a3a <prvInitialiseMutex>

		return xNewQueue;
 8007a94:	68fb      	ldr	r3, [r7, #12]
	}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b088      	sub	sp, #32
 8007aa2:	af02      	add	r7, sp, #8
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	6039      	str	r1, [r7, #0]
 8007aa8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	6939      	ldr	r1, [r7, #16]
 8007abc:	6978      	ldr	r0, [r7, #20]
 8007abe:	f7ff fef1 	bl	80078a4 <xQueueGenericCreateStatic>
 8007ac2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff ffb8 	bl	8007a3a <prvInitialiseMutex>

		return xNewQueue;
 8007aca:	68fb      	ldr	r3, [r7, #12]
	}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08e      	sub	sp, #56	; 0x38
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d109      	bne.n	8007b04 <xQueueGenericSend+0x30>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b02:	bf00      	nop
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <xQueueGenericSend+0x3e>
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <xQueueGenericSend+0x42>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <xQueueGenericSend+0x44>
 8007b16:	2300      	movs	r3, #0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d109      	bne.n	8007b30 <xQueueGenericSend+0x5c>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b2e:	bf00      	nop
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d103      	bne.n	8007b3e <xQueueGenericSend+0x6a>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <xQueueGenericSend+0x6e>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <xQueueGenericSend+0x70>
 8007b42:	2300      	movs	r3, #0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <xQueueGenericSend+0x88>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	623b      	str	r3, [r7, #32]
}
 8007b5a:	bf00      	nop
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b5c:	f001 fb66 	bl	800922c <xTaskGetSchedulerState>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d102      	bne.n	8007b6c <xQueueGenericSend+0x98>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <xQueueGenericSend+0x9c>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <xQueueGenericSend+0x9e>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <xQueueGenericSend+0xb6>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	61fb      	str	r3, [r7, #28]
}
 8007b88:	bf00      	nop
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b8a:	f001 fe5d 	bl	8009848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <xQueueGenericSend+0xcc>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d129      	bne.n	8007bf4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba6:	f000 fc2a 	bl	80083fe <prvCopyDataToQueue>
 8007baa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d010      	beq.n	8007bd6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f979 	bl	8008eb0 <xTaskRemoveFromEventList>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d013      	beq.n	8007bec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bc4:	4b3f      	ldr	r3, [pc, #252]	; (8007cc4 <xQueueGenericSend+0x1f0>)
 8007bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	e00a      	b.n	8007bec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007bdc:	4b39      	ldr	r3, [pc, #228]	; (8007cc4 <xQueueGenericSend+0x1f0>)
 8007bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bec:	f001 fe5a 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e063      	b.n	8007cbc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bfa:	f001 fe53 	bl	80098a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e05c      	b.n	8007cbc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c08:	f107 0314 	add.w	r3, r7, #20
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 f9b1 	bl	8008f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c16:	f001 fe45 	bl	80098a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c1a:	f000 ff43 	bl	8008aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c1e:	f001 fe13 	bl	8009848 <vPortEnterCritical>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c28:	b25b      	sxtb	r3, r3
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d103      	bne.n	8007c38 <xQueueGenericSend+0x164>
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d103      	bne.n	8007c4e <xQueueGenericSend+0x17a>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c4e:	f001 fe29 	bl	80098a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c52:	1d3a      	adds	r2, r7, #4
 8007c54:	f107 0314 	add.w	r3, r7, #20
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 f9a0 	bl	8008fa0 <xTaskCheckForTimeOut>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d124      	bne.n	8007cb0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c68:	f000 fcc1 	bl	80085ee <prvIsQueueFull>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d018      	beq.n	8007ca4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	3310      	adds	r3, #16
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f8f4 	bl	8008e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c82:	f000 fc4c 	bl	800851e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c86:	f000 ff1b 	bl	8008ac0 <xTaskResumeAll>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f af7c 	bne.w	8007b8a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007c92:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <xQueueGenericSend+0x1f0>)
 8007c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	e772      	b.n	8007b8a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ca6:	f000 fc3a 	bl	800851e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007caa:	f000 ff09 	bl	8008ac0 <xTaskResumeAll>
 8007cae:	e76c      	b.n	8007b8a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb2:	f000 fc34 	bl	800851e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cb6:	f000 ff03 	bl	8008ac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3738      	adds	r7, #56	; 0x38
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	e000ed04 	.word	0xe000ed04

08007cc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b090      	sub	sp, #64	; 0x40
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <xQueueGenericSendFromISR+0x2c>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cf2:	bf00      	nop
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <xQueueGenericSendFromISR+0x3a>
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <xQueueGenericSendFromISR+0x3e>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <xQueueGenericSendFromISR+0x40>
 8007d06:	2300      	movs	r3, #0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d109      	bne.n	8007d20 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d1e:	bf00      	nop
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d103      	bne.n	8007d2e <xQueueGenericSendFromISR+0x66>
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <xQueueGenericSendFromISR+0x6a>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <xQueueGenericSendFromISR+0x6c>
 8007d32:	2300      	movs	r3, #0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d109      	bne.n	8007d4c <xQueueGenericSendFromISR+0x84>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	623b      	str	r3, [r7, #32]
}
 8007d4a:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d4c:	f001 fe40 	bl	80099d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d50:	f3ef 8211 	mrs	r2, BASEPRI
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	61fa      	str	r2, [r7, #28]
 8007d66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d302      	bcc.n	8007d7e <xQueueGenericSendFromISR+0xb6>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d12f      	bne.n	8007dde <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d94:	f000 fb33 	bl	80083fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d98:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da0:	d112      	bne.n	8007dc8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d016      	beq.n	8007dd8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	3324      	adds	r3, #36	; 0x24
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 f87e 	bl	8008eb0 <xTaskRemoveFromEventList>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00e      	beq.n	8007dd8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	e007      	b.n	8007dd8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dcc:	3301      	adds	r3, #1
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	b25a      	sxtb	r2, r3
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ddc:	e001      	b.n	8007de2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3740      	adds	r7, #64	; 0x40
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08e      	sub	sp, #56	; 0x38
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d109      	bne.n	8007e20 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	623b      	str	r3, [r7, #32]
}
 8007e1e:	bf00      	nop

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d009      	beq.n	8007e3c <xQueueGiveFromISR+0x44>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	61fb      	str	r3, [r7, #28]
}
 8007e3a:	bf00      	nop

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <xQueueGiveFromISR+0x54>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <xQueueGiveFromISR+0x58>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <xQueueGiveFromISR+0x5a>
 8007e50:	2300      	movs	r3, #0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <xQueueGiveFromISR+0x72>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	61bb      	str	r3, [r7, #24]
}
 8007e68:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e6a:	f001 fdb1 	bl	80099d0 <vPortValidateInterruptPriority>
	__asm volatile
 8007e6e:	f3ef 8211 	mrs	r2, BASEPRI
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	617a      	str	r2, [r7, #20]
 8007e84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007e86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d22b      	bcs.n	8007ef2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007eac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb4:	d112      	bne.n	8007edc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d016      	beq.n	8007eec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	3324      	adds	r3, #36	; 0x24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fff4 	bl	8008eb0 <xTaskRemoveFromEventList>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00e      	beq.n	8007eec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00b      	beq.n	8007eec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e007      	b.n	8007eec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	b25a      	sxtb	r2, r3
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007eec:	2301      	movs	r3, #1
 8007eee:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef0:	e001      	b.n	8007ef6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f383 8811 	msr	BASEPRI, r3
}
 8007f00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3738      	adds	r7, #56	; 0x38
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08c      	sub	sp, #48	; 0x30
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <xQueueReceive+0x2e>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	623b      	str	r3, [r7, #32]
}
 8007f38:	bf00      	nop

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d103      	bne.n	8007f48 <xQueueReceive+0x3c>
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <xQueueReceive+0x40>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <xQueueReceive+0x42>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d109      	bne.n	8007f66 <xQueueReceive+0x5a>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	61fb      	str	r3, [r7, #28]
}
 8007f64:	bf00      	nop

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f66:	f001 f961 	bl	800922c <xTaskGetSchedulerState>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <xQueueReceive+0x6a>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <xQueueReceive+0x6e>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueReceive+0x70>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d109      	bne.n	8007f94 <xQueueReceive+0x88>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61bb      	str	r3, [r7, #24]
}
 8007f92:	bf00      	nop
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f94:	f001 fc58 	bl	8009848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01f      	beq.n	8007fe4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa8:	f000 fa93 	bl	80084d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	1e5a      	subs	r2, r3, #1
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00f      	beq.n	8007fdc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	3310      	adds	r3, #16
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 ff75 	bl	8008eb0 <xTaskRemoveFromEventList>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fcc:	4b3c      	ldr	r3, [pc, #240]	; (80080c0 <xQueueReceive+0x1b4>)
 8007fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fdc:	f001 fc62 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e069      	b.n	80080b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d103      	bne.n	8007ff2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fea:	f001 fc5b 	bl	80098a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e062      	b.n	80080b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d106      	bne.n	8008006 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ff8:	f107 0310 	add.w	r3, r7, #16
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 ffb9 	bl	8008f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008002:	2301      	movs	r3, #1
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008006:	f001 fc4d 	bl	80098a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800800a:	f000 fd4b 	bl	8008aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800800e:	f001 fc1b 	bl	8009848 <vPortEnterCritical>
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008018:	b25b      	sxtb	r3, r3
 800801a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801e:	d103      	bne.n	8008028 <xQueueReceive+0x11c>
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800802e:	b25b      	sxtb	r3, r3
 8008030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008034:	d103      	bne.n	800803e <xQueueReceive+0x132>
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800803e:	f001 fc31 	bl	80098a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008042:	1d3a      	adds	r2, r7, #4
 8008044:	f107 0310 	add.w	r3, r7, #16
 8008048:	4611      	mov	r1, r2
 800804a:	4618      	mov	r0, r3
 800804c:	f000 ffa8 	bl	8008fa0 <xTaskCheckForTimeOut>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d123      	bne.n	800809e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008058:	f000 fab3 	bl	80085c2 <prvIsQueueEmpty>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d017      	beq.n	8008092 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	3324      	adds	r3, #36	; 0x24
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fefc 	bl	8008e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008072:	f000 fa54 	bl	800851e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008076:	f000 fd23 	bl	8008ac0 <xTaskResumeAll>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d189      	bne.n	8007f94 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008080:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <xQueueReceive+0x1b4>)
 8008082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	e780      	b.n	8007f94 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008094:	f000 fa43 	bl	800851e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008098:	f000 fd12 	bl	8008ac0 <xTaskResumeAll>
 800809c:	e77a      	b.n	8007f94 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800809e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a0:	f000 fa3d 	bl	800851e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a4:	f000 fd0c 	bl	8008ac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080aa:	f000 fa8a 	bl	80085c2 <prvIsQueueEmpty>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f43f af6f 	beq.w	8007f94 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3730      	adds	r7, #48	; 0x30
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08e      	sub	sp, #56	; 0x38
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d109      	bne.n	80080f4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	623b      	str	r3, [r7, #32]
}
 80080f2:	bf00      	nop

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <xQueueSemaphoreTake+0x4c>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	61fb      	str	r3, [r7, #28]
}
 800810e:	bf00      	nop

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008110:	f001 f88c 	bl	800922c <xTaskGetSchedulerState>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <xQueueSemaphoreTake+0x5c>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <xQueueSemaphoreTake+0x60>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <xQueueSemaphoreTake+0x62>
 8008124:	2300      	movs	r3, #0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <xQueueSemaphoreTake+0x7a>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	61bb      	str	r3, [r7, #24]
}
 800813c:	bf00      	nop
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800813e:	f001 fb83 	bl	8009848 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	2b00      	cmp	r3, #0
 800814c:	d024      	beq.n	8008198 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	1e5a      	subs	r2, r3, #1
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800815e:	f001 fa09 	bl	8009574 <pvTaskIncrementMutexHeldCount>
 8008162:	4602      	mov	r2, r0
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00f      	beq.n	8008190 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008172:	3310      	adds	r3, #16
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fe9b 	bl	8008eb0 <xTaskRemoveFromEventList>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008180:	4b53      	ldr	r3, [pc, #332]	; (80082d0 <xQueueSemaphoreTake+0x20c>)
 8008182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008190:	f001 fb88 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8008194:	2301      	movs	r3, #1
 8008196:	e096      	b.n	80082c6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d110      	bne.n	80081c0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <xQueueSemaphoreTake+0xf4>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	617b      	str	r3, [r7, #20]
}
 80081b6:	bf00      	nop
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80081b8:	f001 fb74 	bl	80098a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081bc:	2300      	movs	r3, #0
 80081be:	e082      	b.n	80082c6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d106      	bne.n	80081d4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081c6:	f107 030c 	add.w	r3, r7, #12
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fed2 	bl	8008f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081d4:	f001 fb66 	bl	80098a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081d8:	f000 fc64 	bl	8008aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081dc:	f001 fb34 	bl	8009848 <vPortEnterCritical>
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e6:	b25b      	sxtb	r3, r3
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d103      	bne.n	80081f6 <xQueueSemaphoreTake+0x132>
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081fc:	b25b      	sxtb	r3, r3
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008202:	d103      	bne.n	800820c <xQueueSemaphoreTake+0x148>
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800820c:	f001 fb4a 	bl	80098a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008210:	463a      	mov	r2, r7
 8008212:	f107 030c 	add.w	r3, r7, #12
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fec1 	bl	8008fa0 <xTaskCheckForTimeOut>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d132      	bne.n	800828a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008226:	f000 f9cc 	bl	80085c2 <prvIsQueueEmpty>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d026      	beq.n	800827e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d109      	bne.n	800824c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008238:	f001 fb06 	bl	8009848 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	4618      	mov	r0, r3
 8008242:	f001 f811 	bl	8009268 <xTaskPriorityInherit>
 8008246:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008248:	f001 fb2c 	bl	80098a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fe07 	bl	8008e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800825a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800825c:	f000 f95f 	bl	800851e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008260:	f000 fc2e 	bl	8008ac0 <xTaskResumeAll>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	f47f af69 	bne.w	800813e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800826c:	4b18      	ldr	r3, [pc, #96]	; (80082d0 <xQueueSemaphoreTake+0x20c>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	e75f      	b.n	800813e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800827e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008280:	f000 f94d 	bl	800851e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008284:	f000 fc1c 	bl	8008ac0 <xTaskResumeAll>
 8008288:	e759      	b.n	800813e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800828a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800828c:	f000 f947 	bl	800851e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008290:	f000 fc16 	bl	8008ac0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008296:	f000 f994 	bl	80085c2 <prvIsQueueEmpty>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	f43f af4e 	beq.w	800813e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00d      	beq.n	80082c4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80082a8:	f001 face 	bl	8009848 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082ae:	f000 f88f 	bl	80083d0 <prvGetDisinheritPriorityAfterTimeout>
 80082b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 f8ce 	bl	800945c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80082c0:	f001 faf0 	bl	80098a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3738      	adds	r7, #56	; 0x38
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08e      	sub	sp, #56	; 0x38
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <xQueueReceiveFromISR+0x2a>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	623b      	str	r3, [r7, #32]
}
 80082fc:	bf00      	nop
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <xQueueReceiveFromISR+0x38>
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <xQueueReceiveFromISR+0x3c>
 800830c:	2301      	movs	r3, #1
 800830e:	e000      	b.n	8008312 <xQueueReceiveFromISR+0x3e>
 8008310:	2300      	movs	r3, #0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <xQueueReceiveFromISR+0x56>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	61fb      	str	r3, [r7, #28]
}
 8008328:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800832a:	f001 fb51 	bl	80099d0 <vPortValidateInterruptPriority>
	__asm volatile
 800832e:	f3ef 8211 	mrs	r2, BASEPRI
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	61ba      	str	r2, [r7, #24]
 8008344:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008346:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	d02f      	beq.n	80083b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800835c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008364:	f000 f8b5 	bl	80084d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	1e5a      	subs	r2, r3, #1
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d112      	bne.n	80083a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d016      	beq.n	80083b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	3310      	adds	r3, #16
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fd92 	bl	8008eb0 <xTaskRemoveFromEventList>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00e      	beq.n	80083b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	e007      	b.n	80083b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80083a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a4:	3301      	adds	r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	b25a      	sxtb	r2, r3
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80083b0:	2301      	movs	r3, #1
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
 80083b4:	e001      	b.n	80083ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f383 8811 	msr	BASEPRI, r3
}
 80083c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3738      	adds	r7, #56	; 0x38
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d006      	beq.n	80083ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f1c3 0307 	rsb	r3, r3, #7
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	e001      	b.n	80083f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083f2:	68fb      	ldr	r3, [r7, #12]
	}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr

080083fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b086      	sub	sp, #24
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10d      	bne.n	8008438 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d14d      	bne.n	80084c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 ff93 	bl	8009354 <xTaskPriorityDisinherit>
 800842e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	609a      	str	r2, [r3, #8]
 8008436:	e043      	b.n	80084c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d119      	bne.n	8008472 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6858      	ldr	r0, [r3, #4]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	461a      	mov	r2, r3
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	f00e fca5 	bl	8016d98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	441a      	add	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	429a      	cmp	r2, r3
 8008466:	d32b      	bcc.n	80084c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	605a      	str	r2, [r3, #4]
 8008470:	e026      	b.n	80084c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	68d8      	ldr	r0, [r3, #12]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	461a      	mov	r2, r3
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	f00e fc8b 	bl	8016d98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	425b      	negs	r3, r3
 800848c:	441a      	add	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d207      	bcs.n	80084ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	425b      	negs	r3, r3
 80084a8:	441a      	add	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d105      	bne.n	80084c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3b01      	subs	r3, #1
 80084be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80084c8:	697b      	ldr	r3, [r7, #20]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d018      	beq.n	8008516 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	441a      	add	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d303      	bcc.n	8008506 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68d9      	ldr	r1, [r3, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	461a      	mov	r2, r3
 8008510:	6838      	ldr	r0, [r7, #0]
 8008512:	f00e fc41 	bl	8016d98 <memcpy>
	}
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008526:	f001 f98f 	bl	8009848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008530:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008532:	e011      	b.n	8008558 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2b00      	cmp	r3, #0
 800853a:	d012      	beq.n	8008562 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3324      	adds	r3, #36	; 0x24
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fcb5 	bl	8008eb0 <xTaskRemoveFromEventList>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800854c:	f000 fd88 	bl	8009060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	3b01      	subs	r3, #1
 8008554:	b2db      	uxtb	r3, r3
 8008556:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	dce9      	bgt.n	8008534 <prvUnlockQueue+0x16>
 8008560:	e000      	b.n	8008564 <prvUnlockQueue+0x46>
					break;
 8008562:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	22ff      	movs	r2, #255	; 0xff
 8008568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800856c:	f001 f99a 	bl	80098a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008570:	f001 f96a 	bl	8009848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800857a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800857c:	e011      	b.n	80085a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d012      	beq.n	80085ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3310      	adds	r3, #16
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fc90 	bl	8008eb0 <xTaskRemoveFromEventList>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008596:	f000 fd63 	bl	8009060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	3b01      	subs	r3, #1
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	dce9      	bgt.n	800857e <prvUnlockQueue+0x60>
 80085aa:	e000      	b.n	80085ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	22ff      	movs	r2, #255	; 0xff
 80085b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80085b6:	f001 f975 	bl	80098a4 <vPortExitCritical>
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085ca:	f001 f93d 	bl	8009848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085d6:	2301      	movs	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	e001      	b.n	80085e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085dc:	2300      	movs	r3, #0
 80085de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085e0:	f001 f960 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 80085e4:	68fb      	ldr	r3, [r7, #12]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085f6:	f001 f927 	bl	8009848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008602:	429a      	cmp	r2, r3
 8008604:	d102      	bne.n	800860c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008606:	2301      	movs	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	e001      	b.n	8008610 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008610:	f001 f948 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 8008614:	68fb      	ldr	r3, [r7, #12]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800861e:	b580      	push	{r7, lr}
 8008620:	b08e      	sub	sp, #56	; 0x38
 8008622:	af04      	add	r7, sp, #16
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <xTaskCreateStatic+0x28>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	623b      	str	r3, [r7, #32]
}
 8008644:	bf00      	nop
		configASSERT( pxTaskBuffer != NULL );
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <xTaskCreateStatic+0x42>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	61fb      	str	r3, [r7, #28]
}
 800865e:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008660:	23b4      	movs	r3, #180	; 0xb4
 8008662:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2bb4      	cmp	r3, #180	; 0xb4
 8008668:	d009      	beq.n	800867e <xTaskCreateStatic+0x60>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	61bb      	str	r3, [r7, #24]
}
 800867c:	bf00      	nop
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800867e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01e      	beq.n	80086c4 <xTaskCreateStatic+0xa6>
 8008686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	d01b      	beq.n	80086c4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008694:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	2202      	movs	r2, #2
 800869a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800869e:	2300      	movs	r3, #0
 80086a0:	9303      	str	r3, [sp, #12]
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	9302      	str	r3, [sp, #8]
 80086a6:	f107 0314 	add.w	r3, r7, #20
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 f850 	bl	800875c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086be:	f000 f8eb 	bl	8008898 <prvAddNewTaskToReadyList>
 80086c2:	e001      	b.n	80086c8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086c8:	697b      	ldr	r3, [r7, #20]
	}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3728      	adds	r7, #40	; 0x28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b08c      	sub	sp, #48	; 0x30
 80086d6:	af04      	add	r7, sp, #16
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	603b      	str	r3, [r7, #0]
 80086de:	4613      	mov	r3, r2
 80086e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086e2:	88fb      	ldrh	r3, [r7, #6]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 f9ae 	bl	8009a48 <pvPortMalloc>
 80086ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00e      	beq.n	8008712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086f4:	20b4      	movs	r0, #180	; 0xb4
 80086f6:	f001 f9a7 	bl	8009a48 <pvPortMalloc>
 80086fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	631a      	str	r2, [r3, #48]	; 0x30
 8008708:	e005      	b.n	8008716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800870a:	6978      	ldr	r0, [r7, #20]
 800870c:	f001 fa64 	bl	8009bd8 <vPortFree>
 8008710:	e001      	b.n	8008716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d017      	beq.n	800874c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008724:	88fa      	ldrh	r2, [r7, #6]
 8008726:	2300      	movs	r3, #0
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	9302      	str	r3, [sp, #8]
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f80e 	bl	800875c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008740:	69f8      	ldr	r0, [r7, #28]
 8008742:	f000 f8a9 	bl	8008898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008746:	2301      	movs	r3, #1
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	e002      	b.n	8008752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800874c:	f04f 33ff 	mov.w	r3, #4294967295
 8008750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008752:	69bb      	ldr	r3, [r7, #24]
	}
 8008754:	4618      	mov	r0, r3
 8008756:	3720      	adds	r7, #32
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008774:	3b01      	subs	r3, #1
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	f023 0307 	bic.w	r3, r3, #7
 8008782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	2b00      	cmp	r3, #0
 800878c:	d009      	beq.n	80087a2 <prvInitialiseNewTask+0x46>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	617b      	str	r3, [r7, #20]
}
 80087a0:	bf00      	nop
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d01f      	beq.n	80087e8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087a8:	2300      	movs	r3, #0
 80087aa:	61fb      	str	r3, [r7, #28]
 80087ac:	e012      	b.n	80087d4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	4413      	add	r3, r2
 80087b4:	7819      	ldrb	r1, [r3, #0]
 80087b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	3334      	adds	r3, #52	; 0x34
 80087be:	460a      	mov	r2, r1
 80087c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	4413      	add	r3, r2
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d006      	beq.n	80087dc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	3301      	adds	r3, #1
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	2b0f      	cmp	r3, #15
 80087d8:	d9e9      	bls.n	80087ae <prvInitialiseNewTask+0x52>
 80087da:	e000      	b.n	80087de <prvInitialiseNewTask+0x82>
			{
				break;
 80087dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087e6:	e003      	b.n	80087f0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	2b06      	cmp	r3, #6
 80087f4:	d901      	bls.n	80087fa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087f6:	2306      	movs	r3, #6
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008804:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	2200      	movs	r2, #0
 800880a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	3304      	adds	r3, #4
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe ff4e 	bl	80076b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	3318      	adds	r3, #24
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe ff49 	bl	80076b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008824:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	f1c3 0207 	rsb	r2, r3, #7
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008834:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2200      	movs	r2, #0
 800883a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	2200      	movs	r2, #0
 8008842:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	334c      	adds	r3, #76	; 0x4c
 800884a:	2260      	movs	r2, #96	; 0x60
 800884c:	2100      	movs	r1, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f00e fab0 	bl	8016db4 <memset>
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	4a0d      	ldr	r2, [pc, #52]	; (800888c <prvInitialiseNewTask+0x130>)
 8008858:	651a      	str	r2, [r3, #80]	; 0x50
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	4a0c      	ldr	r2, [pc, #48]	; (8008890 <prvInitialiseNewTask+0x134>)
 800885e:	655a      	str	r2, [r3, #84]	; 0x54
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	4a0c      	ldr	r2, [pc, #48]	; (8008894 <prvInitialiseNewTask+0x138>)
 8008864:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	68f9      	ldr	r1, [r7, #12]
 800886a:	69b8      	ldr	r0, [r7, #24]
 800886c:	f000 fefc 	bl	8009668 <pxPortInitialiseStack>
 8008870:	4602      	mov	r2, r0
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008882:	bf00      	nop
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	0801af9c 	.word	0x0801af9c
 8008890:	0801afbc 	.word	0x0801afbc
 8008894:	0801af7c 	.word	0x0801af7c

08008898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088a0:	f000 ffd2 	bl	8009848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088a4:	4b2a      	ldr	r3, [pc, #168]	; (8008950 <prvAddNewTaskToReadyList+0xb8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	4a29      	ldr	r2, [pc, #164]	; (8008950 <prvAddNewTaskToReadyList+0xb8>)
 80088ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088ae:	4b29      	ldr	r3, [pc, #164]	; (8008954 <prvAddNewTaskToReadyList+0xbc>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d109      	bne.n	80088ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088b6:	4a27      	ldr	r2, [pc, #156]	; (8008954 <prvAddNewTaskToReadyList+0xbc>)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088bc:	4b24      	ldr	r3, [pc, #144]	; (8008950 <prvAddNewTaskToReadyList+0xb8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d110      	bne.n	80088e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088c4:	f000 fbf0 	bl	80090a8 <prvInitialiseTaskLists>
 80088c8:	e00d      	b.n	80088e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088ca:	4b23      	ldr	r3, [pc, #140]	; (8008958 <prvAddNewTaskToReadyList+0xc0>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088d2:	4b20      	ldr	r3, [pc, #128]	; (8008954 <prvAddNewTaskToReadyList+0xbc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	429a      	cmp	r2, r3
 80088de:	d802      	bhi.n	80088e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088e0:	4a1c      	ldr	r2, [pc, #112]	; (8008954 <prvAddNewTaskToReadyList+0xbc>)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088e6:	4b1d      	ldr	r3, [pc, #116]	; (800895c <prvAddNewTaskToReadyList+0xc4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	4a1b      	ldr	r2, [pc, #108]	; (800895c <prvAddNewTaskToReadyList+0xc4>)
 80088ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	2201      	movs	r2, #1
 80088f6:	409a      	lsls	r2, r3
 80088f8:	4b19      	ldr	r3, [pc, #100]	; (8008960 <prvAddNewTaskToReadyList+0xc8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	4a18      	ldr	r2, [pc, #96]	; (8008960 <prvAddNewTaskToReadyList+0xc8>)
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4a15      	ldr	r2, [pc, #84]	; (8008964 <prvAddNewTaskToReadyList+0xcc>)
 8008910:	441a      	add	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	4619      	mov	r1, r3
 8008918:	4610      	mov	r0, r2
 800891a:	f7fe fed6 	bl	80076ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800891e:	f000 ffc1 	bl	80098a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008922:	4b0d      	ldr	r3, [pc, #52]	; (8008958 <prvAddNewTaskToReadyList+0xc0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00e      	beq.n	8008948 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800892a:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <prvAddNewTaskToReadyList+0xbc>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	429a      	cmp	r2, r3
 8008936:	d207      	bcs.n	8008948 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008938:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <prvAddNewTaskToReadyList+0xd0>)
 800893a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200050d4 	.word	0x200050d4
 8008954:	20004fd4 	.word	0x20004fd4
 8008958:	200050e0 	.word	0x200050e0
 800895c:	200050f0 	.word	0x200050f0
 8008960:	200050dc 	.word	0x200050dc
 8008964:	20004fd8 	.word	0x20004fd8
 8008968:	e000ed04 	.word	0xe000ed04

0800896c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008974:	2300      	movs	r3, #0
 8008976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d016      	beq.n	80089ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800897e:	4b13      	ldr	r3, [pc, #76]	; (80089cc <vTaskDelay+0x60>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <vTaskDelay+0x2e>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	60bb      	str	r3, [r7, #8]
}
 8008998:	bf00      	nop
			vTaskSuspendAll();
 800899a:	f000 f883 	bl	8008aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800899e:	2100      	movs	r1, #0
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fdfb 	bl	800959c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089a6:	f000 f88b 	bl	8008ac0 <xTaskResumeAll>
 80089aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d107      	bne.n	80089c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80089b2:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <vTaskDelay+0x64>)
 80089b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200050fc 	.word	0x200050fc
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08a      	sub	sp, #40	; 0x28
 80089d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089e2:	463a      	mov	r2, r7
 80089e4:	1d39      	adds	r1, r7, #4
 80089e6:	f107 0308 	add.w	r3, r7, #8
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7f7 fdca 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	9202      	str	r2, [sp, #8]
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	2300      	movs	r3, #0
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	2300      	movs	r3, #0
 8008a00:	460a      	mov	r2, r1
 8008a02:	4920      	ldr	r1, [pc, #128]	; (8008a84 <vTaskStartScheduler+0xb0>)
 8008a04:	4820      	ldr	r0, [pc, #128]	; (8008a88 <vTaskStartScheduler+0xb4>)
 8008a06:	f7ff fe0a 	bl	800861e <xTaskCreateStatic>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4a1f      	ldr	r2, [pc, #124]	; (8008a8c <vTaskStartScheduler+0xb8>)
 8008a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a10:	4b1e      	ldr	r3, [pc, #120]	; (8008a8c <vTaskStartScheduler+0xb8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	e001      	b.n	8008a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d11b      	bne.n	8008a60 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	613b      	str	r3, [r7, #16]
}
 8008a3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a3c:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <vTaskStartScheduler+0xbc>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	334c      	adds	r3, #76	; 0x4c
 8008a42:	4a14      	ldr	r2, [pc, #80]	; (8008a94 <vTaskStartScheduler+0xc0>)
 8008a44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a46:	4b14      	ldr	r3, [pc, #80]	; (8008a98 <vTaskStartScheduler+0xc4>)
 8008a48:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <vTaskStartScheduler+0xc8>)
 8008a50:	2201      	movs	r2, #1
 8008a52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a54:	4b12      	ldr	r3, [pc, #72]	; (8008aa0 <vTaskStartScheduler+0xcc>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a5a:	f000 fe85 	bl	8009768 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a5e:	e00d      	b.n	8008a7c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d109      	bne.n	8008a7c <vTaskStartScheduler+0xa8>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	60fb      	str	r3, [r7, #12]
}
 8008a7a:	bf00      	nop
}
 8008a7c:	bf00      	nop
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	08017be0 	.word	0x08017be0
 8008a88:	08009079 	.word	0x08009079
 8008a8c:	200050f8 	.word	0x200050f8
 8008a90:	20004fd4 	.word	0x20004fd4
 8008a94:	2000001c 	.word	0x2000001c
 8008a98:	200050f4 	.word	0x200050f4
 8008a9c:	200050e0 	.word	0x200050e0
 8008aa0:	200050d8 	.word	0x200050d8

08008aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008aa8:	4b04      	ldr	r3, [pc, #16]	; (8008abc <vTaskSuspendAll+0x18>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	4a03      	ldr	r2, [pc, #12]	; (8008abc <vTaskSuspendAll+0x18>)
 8008ab0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ab2:	bf00      	nop
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	200050fc 	.word	0x200050fc

08008ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ace:	4b41      	ldr	r3, [pc, #260]	; (8008bd4 <xTaskResumeAll+0x114>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <xTaskResumeAll+0x2a>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	603b      	str	r3, [r7, #0]
}
 8008ae8:	bf00      	nop
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008aea:	f000 fead 	bl	8009848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008aee:	4b39      	ldr	r3, [pc, #228]	; (8008bd4 <xTaskResumeAll+0x114>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	4a37      	ldr	r2, [pc, #220]	; (8008bd4 <xTaskResumeAll+0x114>)
 8008af6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af8:	4b36      	ldr	r3, [pc, #216]	; (8008bd4 <xTaskResumeAll+0x114>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d161      	bne.n	8008bc4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b00:	4b35      	ldr	r3, [pc, #212]	; (8008bd8 <xTaskResumeAll+0x118>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d05d      	beq.n	8008bc4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b08:	e02e      	b.n	8008b68 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0a:	4b34      	ldr	r3, [pc, #208]	; (8008bdc <xTaskResumeAll+0x11c>)
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3318      	adds	r3, #24
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fe32 	bl	8007780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe fe2d 	bl	8007780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	409a      	lsls	r2, r3
 8008b2e:	4b2c      	ldr	r3, [pc, #176]	; (8008be0 <xTaskResumeAll+0x120>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	4a2a      	ldr	r2, [pc, #168]	; (8008be0 <xTaskResumeAll+0x120>)
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4a27      	ldr	r2, [pc, #156]	; (8008be4 <xTaskResumeAll+0x124>)
 8008b46:	441a      	add	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f7fe fdbb 	bl	80076ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b58:	4b23      	ldr	r3, [pc, #140]	; (8008be8 <xTaskResumeAll+0x128>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d302      	bcc.n	8008b68 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008b62:	4b22      	ldr	r3, [pc, #136]	; (8008bec <xTaskResumeAll+0x12c>)
 8008b64:	2201      	movs	r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b68:	4b1c      	ldr	r3, [pc, #112]	; (8008bdc <xTaskResumeAll+0x11c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1cc      	bne.n	8008b0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b76:	f000 fb39 	bl	80091ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b7a:	4b1d      	ldr	r3, [pc, #116]	; (8008bf0 <xTaskResumeAll+0x130>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d010      	beq.n	8008ba8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b86:	f000 f857 	bl	8008c38 <xTaskIncrementTick>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008b90:	4b16      	ldr	r3, [pc, #88]	; (8008bec <xTaskResumeAll+0x12c>)
 8008b92:	2201      	movs	r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1f1      	bne.n	8008b86 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8008ba2:	4b13      	ldr	r3, [pc, #76]	; (8008bf0 <xTaskResumeAll+0x130>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ba8:	4b10      	ldr	r3, [pc, #64]	; (8008bec <xTaskResumeAll+0x12c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d009      	beq.n	8008bc4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <xTaskResumeAll+0x134>)
 8008bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bc4:	f000 fe6e 	bl	80098a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	200050fc 	.word	0x200050fc
 8008bd8:	200050d4 	.word	0x200050d4
 8008bdc:	20005094 	.word	0x20005094
 8008be0:	200050dc 	.word	0x200050dc
 8008be4:	20004fd8 	.word	0x20004fd8
 8008be8:	20004fd4 	.word	0x20004fd4
 8008bec:	200050e8 	.word	0x200050e8
 8008bf0:	200050e4 	.word	0x200050e4
 8008bf4:	e000ed04 	.word	0xe000ed04

08008bf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008bfe:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <xTaskGetTickCount+0x18>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c04:	687b      	ldr	r3, [r7, #4]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bc80      	pop	{r7}
 8008c0e:	4770      	bx	lr
 8008c10:	200050d8 	.word	0x200050d8

08008c14 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c1a:	f000 fed9 	bl	80099d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008c1e:	2300      	movs	r3, #0
 8008c20:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008c22:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <xTaskGetTickCountFromISR+0x20>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c28:	683b      	ldr	r3, [r7, #0]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200050d8 	.word	0x200050d8

08008c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c42:	4b4e      	ldr	r3, [pc, #312]	; (8008d7c <xTaskIncrementTick+0x144>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f040 808d 	bne.w	8008d66 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c4c:	4b4c      	ldr	r3, [pc, #304]	; (8008d80 <xTaskIncrementTick+0x148>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c54:	4a4a      	ldr	r2, [pc, #296]	; (8008d80 <xTaskIncrementTick+0x148>)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d11f      	bne.n	8008ca0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c60:	4b48      	ldr	r3, [pc, #288]	; (8008d84 <xTaskIncrementTick+0x14c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d009      	beq.n	8008c7e <xTaskIncrementTick+0x46>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	603b      	str	r3, [r7, #0]
}
 8008c7c:	bf00      	nop
 8008c7e:	4b41      	ldr	r3, [pc, #260]	; (8008d84 <xTaskIncrementTick+0x14c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	4b40      	ldr	r3, [pc, #256]	; (8008d88 <xTaskIncrementTick+0x150>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a3e      	ldr	r2, [pc, #248]	; (8008d84 <xTaskIncrementTick+0x14c>)
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	4a3e      	ldr	r2, [pc, #248]	; (8008d88 <xTaskIncrementTick+0x150>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	4b3e      	ldr	r3, [pc, #248]	; (8008d8c <xTaskIncrementTick+0x154>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3301      	adds	r3, #1
 8008c98:	4a3c      	ldr	r2, [pc, #240]	; (8008d8c <xTaskIncrementTick+0x154>)
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	f000 faa6 	bl	80091ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ca0:	4b3b      	ldr	r3, [pc, #236]	; (8008d90 <xTaskIncrementTick+0x158>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d348      	bcc.n	8008d3c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008caa:	4b36      	ldr	r3, [pc, #216]	; (8008d84 <xTaskIncrementTick+0x14c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d104      	bne.n	8008cbe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb4:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <xTaskIncrementTick+0x158>)
 8008cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cba:	601a      	str	r2, [r3, #0]
					break;
 8008cbc:	e03e      	b.n	8008d3c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cbe:	4b31      	ldr	r3, [pc, #196]	; (8008d84 <xTaskIncrementTick+0x14c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d203      	bcs.n	8008cde <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cd6:	4a2e      	ldr	r2, [pc, #184]	; (8008d90 <xTaskIncrementTick+0x158>)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cdc:	e02e      	b.n	8008d3c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fd4c 	bl	8007780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	3318      	adds	r3, #24
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe fd43 	bl	8007780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	2201      	movs	r2, #1
 8008d00:	409a      	lsls	r2, r3
 8008d02:	4b24      	ldr	r3, [pc, #144]	; (8008d94 <xTaskIncrementTick+0x15c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	4a22      	ldr	r2, [pc, #136]	; (8008d94 <xTaskIncrementTick+0x15c>)
 8008d0a:	6013      	str	r3, [r2, #0]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4a1f      	ldr	r2, [pc, #124]	; (8008d98 <xTaskIncrementTick+0x160>)
 8008d1a:	441a      	add	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	f7fe fcd1 	bl	80076ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	4b1b      	ldr	r3, [pc, #108]	; (8008d9c <xTaskIncrementTick+0x164>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d3b9      	bcc.n	8008caa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d3a:	e7b6      	b.n	8008caa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d3c:	4b17      	ldr	r3, [pc, #92]	; (8008d9c <xTaskIncrementTick+0x164>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	4915      	ldr	r1, [pc, #84]	; (8008d98 <xTaskIncrementTick+0x160>)
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	440b      	add	r3, r1
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d901      	bls.n	8008d58 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8008d54:	2301      	movs	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d58:	4b11      	ldr	r3, [pc, #68]	; (8008da0 <xTaskIncrementTick+0x168>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d007      	beq.n	8008d70 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008d60:	2301      	movs	r3, #1
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	e004      	b.n	8008d70 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d66:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <xTaskIncrementTick+0x16c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	4a0d      	ldr	r2, [pc, #52]	; (8008da4 <xTaskIncrementTick+0x16c>)
 8008d6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d70:	697b      	ldr	r3, [r7, #20]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200050fc 	.word	0x200050fc
 8008d80:	200050d8 	.word	0x200050d8
 8008d84:	2000508c 	.word	0x2000508c
 8008d88:	20005090 	.word	0x20005090
 8008d8c:	200050ec 	.word	0x200050ec
 8008d90:	200050f4 	.word	0x200050f4
 8008d94:	200050dc 	.word	0x200050dc
 8008d98:	20004fd8 	.word	0x20004fd8
 8008d9c:	20004fd4 	.word	0x20004fd4
 8008da0:	200050e8 	.word	0x200050e8
 8008da4:	200050e4 	.word	0x200050e4

08008da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dae:	4b28      	ldr	r3, [pc, #160]	; (8008e50 <vTaskSwitchContext+0xa8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008db6:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <vTaskSwitchContext+0xac>)
 8008db8:	2201      	movs	r2, #1
 8008dba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008dbc:	e043      	b.n	8008e46 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008dbe:	4b25      	ldr	r3, [pc, #148]	; (8008e54 <vTaskSwitchContext+0xac>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dc4:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <vTaskSwitchContext+0xb0>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	fab3 f383 	clz	r3, r3
 8008dd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008dd2:	7afb      	ldrb	r3, [r7, #11]
 8008dd4:	f1c3 031f 	rsb	r3, r3, #31
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	4920      	ldr	r1, [pc, #128]	; (8008e5c <vTaskSwitchContext+0xb4>)
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d109      	bne.n	8008e02 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	607b      	str	r3, [r7, #4]
}
 8008e00:	bf00      	nop
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4a13      	ldr	r2, [pc, #76]	; (8008e5c <vTaskSwitchContext+0xb4>)
 8008e0e:	4413      	add	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	605a      	str	r2, [r3, #4]
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	3308      	adds	r3, #8
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d104      	bne.n	8008e32 <vTaskSwitchContext+0x8a>
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	605a      	str	r2, [r3, #4]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <vTaskSwitchContext+0xb8>)
 8008e3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e3c:	4b08      	ldr	r3, [pc, #32]	; (8008e60 <vTaskSwitchContext+0xb8>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	334c      	adds	r3, #76	; 0x4c
 8008e42:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <vTaskSwitchContext+0xbc>)
 8008e44:	6013      	str	r3, [r2, #0]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr
 8008e50:	200050fc 	.word	0x200050fc
 8008e54:	200050e8 	.word	0x200050e8
 8008e58:	200050dc 	.word	0x200050dc
 8008e5c:	20004fd8 	.word	0x20004fd8
 8008e60:	20004fd4 	.word	0x20004fd4
 8008e64:	2000001c 	.word	0x2000001c

08008e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <vTaskPlaceOnEventList+0x24>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	60fb      	str	r3, [r7, #12]
}
 8008e8a:	bf00      	nop

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e8c:	4b07      	ldr	r3, [pc, #28]	; (8008eac <vTaskPlaceOnEventList+0x44>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3318      	adds	r3, #24
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7fe fc3b 	bl	8007710 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	6838      	ldr	r0, [r7, #0]
 8008e9e:	f000 fb7d 	bl	800959c <prvAddCurrentTaskToDelayedList>
}
 8008ea2:	bf00      	nop
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20004fd4 	.word	0x20004fd4

08008eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d109      	bne.n	8008eda <xTaskRemoveFromEventList+0x2a>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60fb      	str	r3, [r7, #12]
}
 8008ed8:	bf00      	nop
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	3318      	adds	r3, #24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fc4e 	bl	8007780 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee4:	4b1d      	ldr	r3, [pc, #116]	; (8008f5c <xTaskRemoveFromEventList+0xac>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d11c      	bne.n	8008f26 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fe fc45 	bl	8007780 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	2201      	movs	r2, #1
 8008efc:	409a      	lsls	r2, r3
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <xTaskRemoveFromEventList+0xb0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	4a16      	ldr	r2, [pc, #88]	; (8008f60 <xTaskRemoveFromEventList+0xb0>)
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4a13      	ldr	r2, [pc, #76]	; (8008f64 <xTaskRemoveFromEventList+0xb4>)
 8008f16:	441a      	add	r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fe fbd3 	bl	80076ca <vListInsertEnd>
 8008f24:	e005      	b.n	8008f32 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3318      	adds	r3, #24
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	480e      	ldr	r0, [pc, #56]	; (8008f68 <xTaskRemoveFromEventList+0xb8>)
 8008f2e:	f7fe fbcc 	bl	80076ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f36:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <xTaskRemoveFromEventList+0xbc>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d905      	bls.n	8008f4c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f40:	2301      	movs	r3, #1
 8008f42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <xTaskRemoveFromEventList+0xc0>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	601a      	str	r2, [r3, #0]
 8008f4a:	e001      	b.n	8008f50 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f50:	697b      	ldr	r3, [r7, #20]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	200050fc 	.word	0x200050fc
 8008f60:	200050dc 	.word	0x200050dc
 8008f64:	20004fd8 	.word	0x20004fd8
 8008f68:	20005094 	.word	0x20005094
 8008f6c:	20004fd4 	.word	0x20004fd4
 8008f70:	200050e8 	.word	0x200050e8

08008f74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <vTaskInternalSetTimeOutState+0x24>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <vTaskInternalSetTimeOutState+0x28>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	605a      	str	r2, [r3, #4]
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	200050ec 	.word	0x200050ec
 8008f9c:	200050d8 	.word	0x200050d8

08008fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d109      	bne.n	8008fc4 <xTaskCheckForTimeOut+0x24>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	613b      	str	r3, [r7, #16]
}
 8008fc2:	bf00      	nop
	configASSERT( pxTicksToWait );
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d109      	bne.n	8008fde <xTaskCheckForTimeOut+0x3e>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	60fb      	str	r3, [r7, #12]
}
 8008fdc:	bf00      	nop

	taskENTER_CRITICAL();
 8008fde:	f000 fc33 	bl	8009848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fe2:	4b1d      	ldr	r3, [pc, #116]	; (8009058 <xTaskCheckForTimeOut+0xb8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d102      	bne.n	8009002 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	e023      	b.n	800904a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	4b15      	ldr	r3, [pc, #84]	; (800905c <xTaskCheckForTimeOut+0xbc>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d007      	beq.n	800901e <xTaskCheckForTimeOut+0x7e>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	429a      	cmp	r2, r3
 8009016:	d302      	bcc.n	800901e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009018:	2301      	movs	r3, #1
 800901a:	61fb      	str	r3, [r7, #28]
 800901c:	e015      	b.n	800904a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	429a      	cmp	r2, r3
 8009026:	d20b      	bcs.n	8009040 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	1ad2      	subs	r2, r2, r3
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff ff9d 	bl	8008f74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	e004      	b.n	800904a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009046:	2301      	movs	r3, #1
 8009048:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800904a:	f000 fc2b 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 800904e:	69fb      	ldr	r3, [r7, #28]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3720      	adds	r7, #32
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	200050d8 	.word	0x200050d8
 800905c:	200050ec 	.word	0x200050ec

08009060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009064:	4b03      	ldr	r3, [pc, #12]	; (8009074 <vTaskMissedYield+0x14>)
 8009066:	2201      	movs	r2, #1
 8009068:	601a      	str	r2, [r3, #0]
}
 800906a:	bf00      	nop
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	200050e8 	.word	0x200050e8

08009078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009080:	f000 f852 	bl	8009128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009084:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <prvIdleTask+0x28>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d9f9      	bls.n	8009080 <prvIdleTask+0x8>
			{
				taskYIELD();
 800908c:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <prvIdleTask+0x2c>)
 800908e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800909c:	e7f0      	b.n	8009080 <prvIdleTask+0x8>
 800909e:	bf00      	nop
 80090a0:	20004fd8 	.word	0x20004fd8
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090ae:	2300      	movs	r3, #0
 80090b0:	607b      	str	r3, [r7, #4]
 80090b2:	e00c      	b.n	80090ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	4613      	mov	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4a12      	ldr	r2, [pc, #72]	; (8009108 <prvInitialiseTaskLists+0x60>)
 80090c0:	4413      	add	r3, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fad6 	bl	8007674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3301      	adds	r3, #1
 80090cc:	607b      	str	r3, [r7, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b06      	cmp	r3, #6
 80090d2:	d9ef      	bls.n	80090b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090d4:	480d      	ldr	r0, [pc, #52]	; (800910c <prvInitialiseTaskLists+0x64>)
 80090d6:	f7fe facd 	bl	8007674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090da:	480d      	ldr	r0, [pc, #52]	; (8009110 <prvInitialiseTaskLists+0x68>)
 80090dc:	f7fe faca 	bl	8007674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090e0:	480c      	ldr	r0, [pc, #48]	; (8009114 <prvInitialiseTaskLists+0x6c>)
 80090e2:	f7fe fac7 	bl	8007674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090e6:	480c      	ldr	r0, [pc, #48]	; (8009118 <prvInitialiseTaskLists+0x70>)
 80090e8:	f7fe fac4 	bl	8007674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090ec:	480b      	ldr	r0, [pc, #44]	; (800911c <prvInitialiseTaskLists+0x74>)
 80090ee:	f7fe fac1 	bl	8007674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090f2:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <prvInitialiseTaskLists+0x78>)
 80090f4:	4a05      	ldr	r2, [pc, #20]	; (800910c <prvInitialiseTaskLists+0x64>)
 80090f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <prvInitialiseTaskLists+0x7c>)
 80090fa:	4a05      	ldr	r2, [pc, #20]	; (8009110 <prvInitialiseTaskLists+0x68>)
 80090fc:	601a      	str	r2, [r3, #0]
}
 80090fe:	bf00      	nop
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20004fd8 	.word	0x20004fd8
 800910c:	20005064 	.word	0x20005064
 8009110:	20005078 	.word	0x20005078
 8009114:	20005094 	.word	0x20005094
 8009118:	200050a8 	.word	0x200050a8
 800911c:	200050c0 	.word	0x200050c0
 8009120:	2000508c 	.word	0x2000508c
 8009124:	20005090 	.word	0x20005090

08009128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800912e:	e019      	b.n	8009164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009130:	f000 fb8a 	bl	8009848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009134:	4b10      	ldr	r3, [pc, #64]	; (8009178 <prvCheckTasksWaitingTermination+0x50>)
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	3304      	adds	r3, #4
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe fb1d 	bl	8007780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009146:	4b0d      	ldr	r3, [pc, #52]	; (800917c <prvCheckTasksWaitingTermination+0x54>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3b01      	subs	r3, #1
 800914c:	4a0b      	ldr	r2, [pc, #44]	; (800917c <prvCheckTasksWaitingTermination+0x54>)
 800914e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <prvCheckTasksWaitingTermination+0x58>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3b01      	subs	r3, #1
 8009156:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <prvCheckTasksWaitingTermination+0x58>)
 8009158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800915a:	f000 fba3 	bl	80098a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f810 	bl	8009184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009164:	4b06      	ldr	r3, [pc, #24]	; (8009180 <prvCheckTasksWaitingTermination+0x58>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e1      	bne.n	8009130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200050a8 	.word	0x200050a8
 800917c:	200050d4 	.word	0x200050d4
 8009180:	200050bc 	.word	0x200050bc

08009184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	334c      	adds	r3, #76	; 0x4c
 8009190:	4618      	mov	r0, r3
 8009192:	f00d ff59 	bl	8017048 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d108      	bne.n	80091b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 fd17 	bl	8009bd8 <vPortFree>
				vPortFree( pxTCB );
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fd14 	bl	8009bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091b0:	e017      	b.n	80091e2 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d103      	bne.n	80091c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fd0b 	bl	8009bd8 <vPortFree>
	}
 80091c2:	e00e      	b.n	80091e2 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d009      	beq.n	80091e2 <prvDeleteTCB+0x5e>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60fb      	str	r3, [r7, #12]
}
 80091e0:	bf00      	nop
	}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091f2:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <prvResetNextTaskUnblockTime+0x38>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091fc:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <prvResetNextTaskUnblockTime+0x3c>)
 80091fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009202:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009204:	e008      	b.n	8009218 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <prvResetNextTaskUnblockTime+0x38>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	4a04      	ldr	r2, [pc, #16]	; (8009228 <prvResetNextTaskUnblockTime+0x3c>)
 8009216:	6013      	str	r3, [r2, #0]
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	bc80      	pop	{r7}
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	2000508c 	.word	0x2000508c
 8009228:	200050f4 	.word	0x200050f4

0800922c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009232:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <xTaskGetSchedulerState+0x34>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d102      	bne.n	8009240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800923a:	2301      	movs	r3, #1
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	e008      	b.n	8009252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009240:	4b08      	ldr	r3, [pc, #32]	; (8009264 <xTaskGetSchedulerState+0x38>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009248:	2302      	movs	r3, #2
 800924a:	607b      	str	r3, [r7, #4]
 800924c:	e001      	b.n	8009252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800924e:	2300      	movs	r3, #0
 8009250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009252:	687b      	ldr	r3, [r7, #4]
	}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	200050e0 	.word	0x200050e0
 8009264:	200050fc 	.word	0x200050fc

08009268 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d05e      	beq.n	800933c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009282:	4b31      	ldr	r3, [pc, #196]	; (8009348 <xTaskPriorityInherit+0xe0>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	429a      	cmp	r2, r3
 800928a:	d24e      	bcs.n	800932a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	db06      	blt.n	80092a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009294:	4b2c      	ldr	r3, [pc, #176]	; (8009348 <xTaskPriorityInherit+0xe0>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	f1c3 0207 	rsb	r2, r3, #7
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6959      	ldr	r1, [r3, #20]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4a26      	ldr	r2, [pc, #152]	; (800934c <xTaskPriorityInherit+0xe4>)
 80092b4:	4413      	add	r3, r2
 80092b6:	4299      	cmp	r1, r3
 80092b8:	d12f      	bne.n	800931a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe fa5e 	bl	8007780 <uxListRemove>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10a      	bne.n	80092e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	2201      	movs	r2, #1
 80092d0:	fa02 f303 	lsl.w	r3, r2, r3
 80092d4:	43da      	mvns	r2, r3
 80092d6:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <xTaskPriorityInherit+0xe8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4013      	ands	r3, r2
 80092dc:	4a1c      	ldr	r2, [pc, #112]	; (8009350 <xTaskPriorityInherit+0xe8>)
 80092de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092e0:	4b19      	ldr	r3, [pc, #100]	; (8009348 <xTaskPriorityInherit+0xe0>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	2201      	movs	r2, #1
 80092f0:	409a      	lsls	r2, r3
 80092f2:	4b17      	ldr	r3, [pc, #92]	; (8009350 <xTaskPriorityInherit+0xe8>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	4a15      	ldr	r2, [pc, #84]	; (8009350 <xTaskPriorityInherit+0xe8>)
 80092fa:	6013      	str	r3, [r2, #0]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4a10      	ldr	r2, [pc, #64]	; (800934c <xTaskPriorityInherit+0xe4>)
 800930a:	441a      	add	r2, r3
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	3304      	adds	r3, #4
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f7fe f9d9 	bl	80076ca <vListInsertEnd>
 8009318:	e004      	b.n	8009324 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800931a:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <xTaskPriorityInherit+0xe0>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e008      	b.n	800933c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800932e:	4b06      	ldr	r3, [pc, #24]	; (8009348 <xTaskPriorityInherit+0xe0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	429a      	cmp	r2, r3
 8009336:	d201      	bcs.n	800933c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009338:	2301      	movs	r3, #1
 800933a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800933c:	68fb      	ldr	r3, [r7, #12]
	}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20004fd4 	.word	0x20004fd4
 800934c:	20004fd8 	.word	0x20004fd8
 8009350:	200050dc 	.word	0x200050dc

08009354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d06c      	beq.n	8009444 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800936a:	4b39      	ldr	r3, [pc, #228]	; (8009450 <xTaskPriorityDisinherit+0xfc>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	429a      	cmp	r2, r3
 8009372:	d009      	beq.n	8009388 <xTaskPriorityDisinherit+0x34>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	60fb      	str	r3, [r7, #12]
}
 8009386:	bf00      	nop
			configASSERT( pxTCB->uxMutexesHeld );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <xTaskPriorityDisinherit+0x50>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60bb      	str	r3, [r7, #8]
}
 80093a2:	bf00      	nop
			( pxTCB->uxMutexesHeld )--;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093a8:	1e5a      	subs	r2, r3, #1
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d044      	beq.n	8009444 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d140      	bne.n	8009444 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe f9da 	bl	8007780 <uxListRemove>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d115      	bne.n	80093fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	491f      	ldr	r1, [pc, #124]	; (8009454 <xTaskPriorityDisinherit+0x100>)
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <xTaskPriorityDisinherit+0xaa>
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	2201      	movs	r2, #1
 80093ee:	fa02 f303 	lsl.w	r3, r2, r3
 80093f2:	43da      	mvns	r2, r3
 80093f4:	4b18      	ldr	r3, [pc, #96]	; (8009458 <xTaskPriorityDisinherit+0x104>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4013      	ands	r3, r2
 80093fa:	4a17      	ldr	r2, [pc, #92]	; (8009458 <xTaskPriorityDisinherit+0x104>)
 80093fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940a:	f1c3 0207 	rsb	r2, r3, #7
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	2201      	movs	r2, #1
 8009418:	409a      	lsls	r2, r3
 800941a:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <xTaskPriorityDisinherit+0x104>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4313      	orrs	r3, r2
 8009420:	4a0d      	ldr	r2, [pc, #52]	; (8009458 <xTaskPriorityDisinherit+0x104>)
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4a08      	ldr	r2, [pc, #32]	; (8009454 <xTaskPriorityDisinherit+0x100>)
 8009432:	441a      	add	r2, r3
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	3304      	adds	r3, #4
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f7fe f945 	bl	80076ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009440:	2301      	movs	r3, #1
 8009442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009444:	697b      	ldr	r3, [r7, #20]
	}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	20004fd4 	.word	0x20004fd4
 8009454:	20004fd8 	.word	0x20004fd8
 8009458:	200050dc 	.word	0x200050dc

0800945c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800946a:	2301      	movs	r3, #1
 800946c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d075      	beq.n	8009560 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <vTaskPriorityDisinheritAfterTimeout+0x34>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	60fb      	str	r3, [r7, #12]
}
 800948e:	bf00      	nop

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d902      	bls.n	80094a0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	61fb      	str	r3, [r7, #28]
 800949e:	e002      	b.n	80094a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	69fa      	ldr	r2, [r7, #28]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d057      	beq.n	8009560 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d152      	bne.n	8009560 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094ba:	4b2b      	ldr	r3, [pc, #172]	; (8009568 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d109      	bne.n	80094d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	60bb      	str	r3, [r7, #8]
}
 80094d6:	bf00      	nop

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	db04      	blt.n	80094f6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	f1c3 0207 	rsb	r2, r3, #7
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	6959      	ldr	r1, [r3, #20]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4a19      	ldr	r2, [pc, #100]	; (800956c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009506:	4413      	add	r3, r2
 8009508:	4299      	cmp	r1, r3
 800950a:	d129      	bne.n	8009560 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	3304      	adds	r3, #4
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe f935 	bl	8007780 <uxListRemove>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	2201      	movs	r2, #1
 8009522:	fa02 f303 	lsl.w	r3, r2, r3
 8009526:	43da      	mvns	r2, r3
 8009528:	4b11      	ldr	r3, [pc, #68]	; (8009570 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4013      	ands	r3, r2
 800952e:	4a10      	ldr	r2, [pc, #64]	; (8009570 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009530:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009536:	2201      	movs	r2, #1
 8009538:	409a      	lsls	r2, r3
 800953a:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4313      	orrs	r3, r2
 8009540:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4a06      	ldr	r2, [pc, #24]	; (800956c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009552:	441a      	add	r2, r3
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	3304      	adds	r3, #4
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f7fe f8b5 	bl	80076ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009560:	bf00      	nop
 8009562:	3720      	adds	r7, #32
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20004fd4 	.word	0x20004fd4
 800956c:	20004fd8 	.word	0x20004fd8
 8009570:	200050dc 	.word	0x200050dc

08009574 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009578:	4b07      	ldr	r3, [pc, #28]	; (8009598 <pvTaskIncrementMutexHeldCount+0x24>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009580:	4b05      	ldr	r3, [pc, #20]	; (8009598 <pvTaskIncrementMutexHeldCount+0x24>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009586:	3201      	adds	r2, #1
 8009588:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800958a:	4b03      	ldr	r3, [pc, #12]	; (8009598 <pvTaskIncrementMutexHeldCount+0x24>)
 800958c:	681b      	ldr	r3, [r3, #0]
	}
 800958e:	4618      	mov	r0, r3
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	20004fd4 	.word	0x20004fd4

0800959c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095a6:	4b29      	ldr	r3, [pc, #164]	; (800964c <prvAddCurrentTaskToDelayedList+0xb0>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095ac:	4b28      	ldr	r3, [pc, #160]	; (8009650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3304      	adds	r3, #4
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe f8e4 	bl	8007780 <uxListRemove>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10b      	bne.n	80095d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095be:	4b24      	ldr	r3, [pc, #144]	; (8009650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	2201      	movs	r2, #1
 80095c6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ca:	43da      	mvns	r2, r3
 80095cc:	4b21      	ldr	r3, [pc, #132]	; (8009654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4013      	ands	r3, r2
 80095d2:	4a20      	ldr	r2, [pc, #128]	; (8009654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095dc:	d10a      	bne.n	80095f4 <prvAddCurrentTaskToDelayedList+0x58>
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d007      	beq.n	80095f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095e4:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3304      	adds	r3, #4
 80095ea:	4619      	mov	r1, r3
 80095ec:	481a      	ldr	r0, [pc, #104]	; (8009658 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095ee:	f7fe f86c 	bl	80076ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095f2:	e026      	b.n	8009642 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4413      	add	r3, r2
 80095fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095fc:	4b14      	ldr	r3, [pc, #80]	; (8009650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	429a      	cmp	r2, r3
 800960a:	d209      	bcs.n	8009620 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800960c:	4b13      	ldr	r3, [pc, #76]	; (800965c <prvAddCurrentTaskToDelayedList+0xc0>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3304      	adds	r3, #4
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f7fe f879 	bl	8007710 <vListInsert>
}
 800961e:	e010      	b.n	8009642 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009620:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	4b0a      	ldr	r3, [pc, #40]	; (8009650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3304      	adds	r3, #4
 800962a:	4619      	mov	r1, r3
 800962c:	4610      	mov	r0, r2
 800962e:	f7fe f86f 	bl	8007710 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009632:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	429a      	cmp	r2, r3
 800963a:	d202      	bcs.n	8009642 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800963c:	4a09      	ldr	r2, [pc, #36]	; (8009664 <prvAddCurrentTaskToDelayedList+0xc8>)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6013      	str	r3, [r2, #0]
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	200050d8 	.word	0x200050d8
 8009650:	20004fd4 	.word	0x20004fd4
 8009654:	200050dc 	.word	0x200050dc
 8009658:	200050c0 	.word	0x200050c0
 800965c:	20005090 	.word	0x20005090
 8009660:	2000508c 	.word	0x2000508c
 8009664:	200050f4 	.word	0x200050f4

08009668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3b04      	subs	r3, #4
 8009678:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3b04      	subs	r3, #4
 8009686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f023 0201 	bic.w	r2, r3, #1
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3b04      	subs	r3, #4
 8009696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009698:	4a08      	ldr	r2, [pc, #32]	; (80096bc <pxPortInitialiseStack+0x54>)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3b14      	subs	r3, #20
 80096a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3b20      	subs	r3, #32
 80096ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096b0:	68fb      	ldr	r3, [r7, #12]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bc80      	pop	{r7}
 80096ba:	4770      	bx	lr
 80096bc:	080096c1 	.word	0x080096c1

080096c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096ca:	4b11      	ldr	r3, [pc, #68]	; (8009710 <prvTaskExitError+0x50>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d2:	d009      	beq.n	80096e8 <prvTaskExitError+0x28>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	60fb      	str	r3, [r7, #12]
}
 80096e6:	bf00      	nop
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	60bb      	str	r3, [r7, #8]
}
 80096fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096fc:	bf00      	nop
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0fc      	beq.n	80096fe <prvTaskExitError+0x3e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr
 8009710:	2000000c 	.word	0x2000000c
	...

08009720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <pxCurrentTCBConst2>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800972a:	f380 8809 	msr	PSP, r0
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	f04e 0e0d 	orr.w	lr, lr, #13
 800973e:	4770      	bx	lr

08009740 <pxCurrentTCBConst2>:
 8009740:	20004fd4 	.word	0x20004fd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009748:	4806      	ldr	r0, [pc, #24]	; (8009764 <prvPortStartFirstTask+0x1c>)
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	f380 8808 	msr	MSP, r0
 8009752:	b662      	cpsie	i
 8009754:	b661      	cpsie	f
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	df00      	svc	0
 8009760:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009762:	bf00      	nop
 8009764:	e000ed08 	.word	0xe000ed08

08009768 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800976e:	4b31      	ldr	r3, [pc, #196]	; (8009834 <xPortStartScheduler+0xcc>)
 8009770:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	22ff      	movs	r2, #255	; 0xff
 800977e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009790:	b2da      	uxtb	r2, r3
 8009792:	4b29      	ldr	r3, [pc, #164]	; (8009838 <xPortStartScheduler+0xd0>)
 8009794:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009796:	4b29      	ldr	r3, [pc, #164]	; (800983c <xPortStartScheduler+0xd4>)
 8009798:	2207      	movs	r2, #7
 800979a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800979c:	e009      	b.n	80097b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800979e:	4b27      	ldr	r3, [pc, #156]	; (800983c <xPortStartScheduler+0xd4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	4a25      	ldr	r2, [pc, #148]	; (800983c <xPortStartScheduler+0xd4>)
 80097a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ba:	2b80      	cmp	r3, #128	; 0x80
 80097bc:	d0ef      	beq.n	800979e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097be:	4b1f      	ldr	r3, [pc, #124]	; (800983c <xPortStartScheduler+0xd4>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f1c3 0307 	rsb	r3, r3, #7
 80097c6:	2b04      	cmp	r3, #4
 80097c8:	d009      	beq.n	80097de <xPortStartScheduler+0x76>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	60bb      	str	r3, [r7, #8]
}
 80097dc:	bf00      	nop
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097de:	4b17      	ldr	r3, [pc, #92]	; (800983c <xPortStartScheduler+0xd4>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	021b      	lsls	r3, r3, #8
 80097e4:	4a15      	ldr	r2, [pc, #84]	; (800983c <xPortStartScheduler+0xd4>)
 80097e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097e8:	4b14      	ldr	r3, [pc, #80]	; (800983c <xPortStartScheduler+0xd4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097f0:	4a12      	ldr	r2, [pc, #72]	; (800983c <xPortStartScheduler+0xd4>)
 80097f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097fc:	4b10      	ldr	r3, [pc, #64]	; (8009840 <xPortStartScheduler+0xd8>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0f      	ldr	r2, [pc, #60]	; (8009840 <xPortStartScheduler+0xd8>)
 8009802:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <xPortStartScheduler+0xd8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a0c      	ldr	r2, [pc, #48]	; (8009840 <xPortStartScheduler+0xd8>)
 800980e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009814:	f000 f8ba 	bl	800998c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009818:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <xPortStartScheduler+0xdc>)
 800981a:	2200      	movs	r2, #0
 800981c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800981e:	f7ff ff93 	bl	8009748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009822:	f7ff fac1 	bl	8008da8 <vTaskSwitchContext>
	prvTaskExitError();
 8009826:	f7ff ff4b 	bl	80096c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	e000e400 	.word	0xe000e400
 8009838:	20005100 	.word	0x20005100
 800983c:	20005104 	.word	0x20005104
 8009840:	e000ed20 	.word	0xe000ed20
 8009844:	2000000c 	.word	0x2000000c

08009848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	607b      	str	r3, [r7, #4]
}
 8009860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009862:	4b0e      	ldr	r3, [pc, #56]	; (800989c <vPortEnterCritical+0x54>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3301      	adds	r3, #1
 8009868:	4a0c      	ldr	r2, [pc, #48]	; (800989c <vPortEnterCritical+0x54>)
 800986a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800986c:	4b0b      	ldr	r3, [pc, #44]	; (800989c <vPortEnterCritical+0x54>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d10e      	bne.n	8009892 <vPortEnterCritical+0x4a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009874:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <vPortEnterCritical+0x58>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d009      	beq.n	8009892 <vPortEnterCritical+0x4a>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	603b      	str	r3, [r7, #0]
}
 8009890:	bf00      	nop
	}
}
 8009892:	bf00      	nop
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	bc80      	pop	{r7}
 800989a:	4770      	bx	lr
 800989c:	2000000c 	.word	0x2000000c
 80098a0:	e000ed04 	.word	0xe000ed04

080098a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098aa:	4b11      	ldr	r3, [pc, #68]	; (80098f0 <vPortExitCritical+0x4c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d109      	bne.n	80098c6 <vPortExitCritical+0x22>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	607b      	str	r3, [r7, #4]
}
 80098c4:	bf00      	nop
	uxCriticalNesting--;
 80098c6:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <vPortExitCritical+0x4c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	4a08      	ldr	r2, [pc, #32]	; (80098f0 <vPortExitCritical+0x4c>)
 80098ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <vPortExitCritical+0x4c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d105      	bne.n	80098e4 <vPortExitCritical+0x40>
 80098d8:	2300      	movs	r3, #0
 80098da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f383 8811 	msr	BASEPRI, r3
}
 80098e2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bc80      	pop	{r7}
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	2000000c 	.word	0x2000000c
	...

08009900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009900:	f3ef 8009 	mrs	r0, PSP
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	4b0d      	ldr	r3, [pc, #52]	; (8009940 <pxCurrentTCBConst>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009910:	6010      	str	r0, [r2, #0]
 8009912:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009916:	f04f 0050 	mov.w	r0, #80	; 0x50
 800991a:	f380 8811 	msr	BASEPRI, r0
 800991e:	f7ff fa43 	bl	8008da8 <vTaskSwitchContext>
 8009922:	f04f 0000 	mov.w	r0, #0
 8009926:	f380 8811 	msr	BASEPRI, r0
 800992a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800992e:	6819      	ldr	r1, [r3, #0]
 8009930:	6808      	ldr	r0, [r1, #0]
 8009932:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009936:	f380 8809 	msr	PSP, r0
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	4770      	bx	lr

08009940 <pxCurrentTCBConst>:
 8009940:	20004fd4 	.word	0x20004fd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop

08009948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	607b      	str	r3, [r7, #4]
}
 8009960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009962:	f7ff f969 	bl	8008c38 <xTaskIncrementTick>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <xPortSysTickHandler+0x40>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	2300      	movs	r3, #0
 8009976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f383 8811 	msr	BASEPRI, r3
}
 800997e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	e000ed04 	.word	0xe000ed04

0800998c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009990:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <vPortSetupTimerInterrupt+0x30>)
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009996:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <vPortSetupTimerInterrupt+0x34>)
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800999c:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <vPortSetupTimerInterrupt+0x38>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a09      	ldr	r2, [pc, #36]	; (80099c8 <vPortSetupTimerInterrupt+0x3c>)
 80099a2:	fba2 2303 	umull	r2, r3, r2, r3
 80099a6:	099b      	lsrs	r3, r3, #6
 80099a8:	4a08      	ldr	r2, [pc, #32]	; (80099cc <vPortSetupTimerInterrupt+0x40>)
 80099aa:	3b01      	subs	r3, #1
 80099ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ae:	4b03      	ldr	r3, [pc, #12]	; (80099bc <vPortSetupTimerInterrupt+0x30>)
 80099b0:	2207      	movs	r2, #7
 80099b2:	601a      	str	r2, [r3, #0]
}
 80099b4:	bf00      	nop
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bc80      	pop	{r7}
 80099ba:	4770      	bx	lr
 80099bc:	e000e010 	.word	0xe000e010
 80099c0:	e000e018 	.word	0xe000e018
 80099c4:	20000000 	.word	0x20000000
 80099c8:	10624dd3 	.word	0x10624dd3
 80099cc:	e000e014 	.word	0xe000e014

080099d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099d6:	f3ef 8305 	mrs	r3, IPSR
 80099da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b0f      	cmp	r3, #15
 80099e0:	d913      	bls.n	8009a0a <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099e2:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <vPortValidateInterruptPriority+0x68>)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4413      	add	r3, r2
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099ec:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <vPortValidateInterruptPriority+0x6c>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	7afa      	ldrb	r2, [r7, #11]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d209      	bcs.n	8009a0a <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	607b      	str	r3, [r7, #4]
}
 8009a08:	bf00      	nop
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a0a:	4b0d      	ldr	r3, [pc, #52]	; (8009a40 <vPortValidateInterruptPriority+0x70>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a12:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <vPortValidateInterruptPriority+0x74>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d909      	bls.n	8009a2e <vPortValidateInterruptPriority+0x5e>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	603b      	str	r3, [r7, #0]
}
 8009a2c:	bf00      	nop
	}
 8009a2e:	bf00      	nop
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bc80      	pop	{r7}
 8009a36:	4770      	bx	lr
 8009a38:	e000e3f0 	.word	0xe000e3f0
 8009a3c:	20005100 	.word	0x20005100
 8009a40:	e000ed0c 	.word	0xe000ed0c
 8009a44:	20005104 	.word	0x20005104

08009a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a50:	2300      	movs	r3, #0
 8009a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a54:	f7ff f826 	bl	8008aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a58:	4b59      	ldr	r3, [pc, #356]	; (8009bc0 <pvPortMalloc+0x178>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a60:	f000 f91a 	bl	8009c98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a64:	4b57      	ldr	r3, [pc, #348]	; (8009bc4 <pvPortMalloc+0x17c>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f040 8091 	bne.w	8009b94 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01c      	beq.n	8009ab2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009a78:	2208      	movs	r2, #8
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d013      	beq.n	8009ab2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f023 0307 	bic.w	r3, r3, #7
 8009a90:	3308      	adds	r3, #8
 8009a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <pvPortMalloc+0x6a>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	617b      	str	r3, [r7, #20]
}
 8009ab0:	bf00      	nop
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d06d      	beq.n	8009b94 <pvPortMalloc+0x14c>
 8009ab8:	4b43      	ldr	r3, [pc, #268]	; (8009bc8 <pvPortMalloc+0x180>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d868      	bhi.n	8009b94 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ac2:	4b42      	ldr	r3, [pc, #264]	; (8009bcc <pvPortMalloc+0x184>)
 8009ac4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ac6:	4b41      	ldr	r3, [pc, #260]	; (8009bcc <pvPortMalloc+0x184>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009acc:	e004      	b.n	8009ad8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d903      	bls.n	8009aea <pvPortMalloc+0xa2>
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1f1      	bne.n	8009ace <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009aea:	4b35      	ldr	r3, [pc, #212]	; (8009bc0 <pvPortMalloc+0x178>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d04f      	beq.n	8009b94 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2208      	movs	r2, #8
 8009afa:	4413      	add	r3, r2
 8009afc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	1ad2      	subs	r2, r2, r3
 8009b0e:	2308      	movs	r3, #8
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d91e      	bls.n	8009b54 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d009      	beq.n	8009b3c <pvPortMalloc+0xf4>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	613b      	str	r3, [r7, #16]
}
 8009b3a:	bf00      	nop

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	1ad2      	subs	r2, r2, r3
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b4e:	69b8      	ldr	r0, [r7, #24]
 8009b50:	f000 f904 	bl	8009d5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b54:	4b1c      	ldr	r3, [pc, #112]	; (8009bc8 <pvPortMalloc+0x180>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	4a1a      	ldr	r2, [pc, #104]	; (8009bc8 <pvPortMalloc+0x180>)
 8009b60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b62:	4b19      	ldr	r3, [pc, #100]	; (8009bc8 <pvPortMalloc+0x180>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	4b1a      	ldr	r3, [pc, #104]	; (8009bd0 <pvPortMalloc+0x188>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d203      	bcs.n	8009b76 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b6e:	4b16      	ldr	r3, [pc, #88]	; (8009bc8 <pvPortMalloc+0x180>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a17      	ldr	r2, [pc, #92]	; (8009bd0 <pvPortMalloc+0x188>)
 8009b74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <pvPortMalloc+0x17c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b8a:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <pvPortMalloc+0x18c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	4a10      	ldr	r2, [pc, #64]	; (8009bd4 <pvPortMalloc+0x18c>)
 8009b92:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b94:	f7fe ff94 	bl	8008ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <pvPortMalloc+0x16e>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60fb      	str	r3, [r7, #12]
}
 8009bb4:	bf00      	nop
	return pvReturn;
 8009bb6:	69fb      	ldr	r3, [r7, #28]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3728      	adds	r7, #40	; 0x28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20008d10 	.word	0x20008d10
 8009bc4:	20008d24 	.word	0x20008d24
 8009bc8:	20008d14 	.word	0x20008d14
 8009bcc:	20008d08 	.word	0x20008d08
 8009bd0:	20008d18 	.word	0x20008d18
 8009bd4:	20008d1c 	.word	0x20008d1c

08009bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d04b      	beq.n	8009c82 <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bea:	2308      	movs	r3, #8
 8009bec:	425b      	negs	r3, r3
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	4b23      	ldr	r3, [pc, #140]	; (8009c8c <vPortFree+0xb4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4013      	ands	r3, r2
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <vPortFree+0x42>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60fb      	str	r3, [r7, #12]
}
 8009c18:	bf00      	nop
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d009      	beq.n	8009c36 <vPortFree+0x5e>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	60bb      	str	r3, [r7, #8]
}
 8009c34:	bf00      	nop

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	4b14      	ldr	r3, [pc, #80]	; (8009c8c <vPortFree+0xb4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4013      	ands	r3, r2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01e      	beq.n	8009c82 <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d11a      	bne.n	8009c82 <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	685a      	ldr	r2, [r3, #4]
 8009c50:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <vPortFree+0xb4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	43db      	mvns	r3, r3
 8009c56:	401a      	ands	r2, r3
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c5c:	f7fe ff22 	bl	8008aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <vPortFree+0xb8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4413      	add	r3, r2
 8009c6a:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <vPortFree+0xb8>)
 8009c6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c6e:	6938      	ldr	r0, [r7, #16]
 8009c70:	f000 f874 	bl	8009d5c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c74:	4b07      	ldr	r3, [pc, #28]	; (8009c94 <vPortFree+0xbc>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	4a06      	ldr	r2, [pc, #24]	; (8009c94 <vPortFree+0xbc>)
 8009c7c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c7e:	f7fe ff1f 	bl	8008ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c82:	bf00      	nop
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20008d24 	.word	0x20008d24
 8009c90:	20008d14 	.word	0x20008d14
 8009c94:	20008d20 	.word	0x20008d20

08009c98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ca2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ca4:	4b27      	ldr	r3, [pc, #156]	; (8009d44 <prvHeapInit+0xac>)
 8009ca6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00c      	beq.n	8009ccc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3307      	adds	r3, #7
 8009cb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0307 	bic.w	r3, r3, #7
 8009cbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	4a1f      	ldr	r2, [pc, #124]	; (8009d44 <prvHeapInit+0xac>)
 8009cc8:	4413      	add	r3, r2
 8009cca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cd0:	4a1d      	ldr	r2, [pc, #116]	; (8009d48 <prvHeapInit+0xb0>)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cd6:	4b1c      	ldr	r3, [pc, #112]	; (8009d48 <prvHeapInit+0xb0>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	1a9b      	subs	r3, r3, r2
 8009cea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f023 0307 	bic.w	r3, r3, #7
 8009cf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4a15      	ldr	r2, [pc, #84]	; (8009d4c <prvHeapInit+0xb4>)
 8009cf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cfa:	4b14      	ldr	r3, [pc, #80]	; (8009d4c <prvHeapInit+0xb4>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d02:	4b12      	ldr	r3, [pc, #72]	; (8009d4c <prvHeapInit+0xb4>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	1ad2      	subs	r2, r2, r3
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d18:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <prvHeapInit+0xb4>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	4a0a      	ldr	r2, [pc, #40]	; (8009d50 <prvHeapInit+0xb8>)
 8009d26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <prvHeapInit+0xbc>)
 8009d2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d30:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <prvHeapInit+0xc0>)
 8009d32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d36:	601a      	str	r2, [r3, #0]
}
 8009d38:	bf00      	nop
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bc80      	pop	{r7}
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20005108 	.word	0x20005108
 8009d48:	20008d08 	.word	0x20008d08
 8009d4c:	20008d10 	.word	0x20008d10
 8009d50:	20008d18 	.word	0x20008d18
 8009d54:	20008d14 	.word	0x20008d14
 8009d58:	20008d24 	.word	0x20008d24

08009d5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d64:	4b27      	ldr	r3, [pc, #156]	; (8009e04 <prvInsertBlockIntoFreeList+0xa8>)
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	e002      	b.n	8009d70 <prvInsertBlockIntoFreeList+0x14>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d8f7      	bhi.n	8009d6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	4413      	add	r3, r2
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d108      	bne.n	8009d9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	441a      	add	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	441a      	add	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d118      	bne.n	8009de4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	4b14      	ldr	r3, [pc, #80]	; (8009e08 <prvInsertBlockIntoFreeList+0xac>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d00d      	beq.n	8009dda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	441a      	add	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	e008      	b.n	8009dec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dda:	4b0b      	ldr	r3, [pc, #44]	; (8009e08 <prvInsertBlockIntoFreeList+0xac>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e003      	b.n	8009dec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d002      	beq.n	8009dfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bc80      	pop	{r7}
 8009e02:	4770      	bx	lr
 8009e04:	20008d08 	.word	0x20008d08
 8009e08:	20008d10 	.word	0x20008d10

08009e0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009e16:	f009 fd6b 	bl	80138f0 <sys_timeouts_sleeptime>
 8009e1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e22:	d10b      	bne.n	8009e3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009e24:	4813      	ldr	r0, [pc, #76]	; (8009e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e26:	f00c fb00 	bl	801642a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f00c fa72 	bl	8016318 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009e34:	480f      	ldr	r0, [pc, #60]	; (8009e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e36:	f00c fae9 	bl	801640c <sys_mutex_lock>
    return;
 8009e3a:	e018      	b.n	8009e6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d102      	bne.n	8009e48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009e42:	f009 fd1b 	bl	801387c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e46:	e7e6      	b.n	8009e16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009e48:	480a      	ldr	r0, [pc, #40]	; (8009e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e4a:	f00c faee 	bl	801642a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f00c fa60 	bl	8016318 <sys_arch_mbox_fetch>
 8009e58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009e5a:	4806      	ldr	r0, [pc, #24]	; (8009e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e5c:	f00c fad6 	bl	801640c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e66:	d102      	bne.n	8009e6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009e68:	f009 fd08 	bl	801387c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e6c:	e7d3      	b.n	8009e16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20008d34 	.word	0x20008d34

08009e78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009e80:	4810      	ldr	r0, [pc, #64]	; (8009ec4 <tcpip_thread+0x4c>)
 8009e82:	f00c fac3 	bl	801640c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009e86:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <tcpip_thread+0x50>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <tcpip_thread+0x50>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a0e      	ldr	r2, [pc, #56]	; (8009ecc <tcpip_thread+0x54>)
 8009e94:	6812      	ldr	r2, [r2, #0]
 8009e96:	4610      	mov	r0, r2
 8009e98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009e9a:	f107 030c 	add.w	r3, r7, #12
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	480b      	ldr	r0, [pc, #44]	; (8009ed0 <tcpip_thread+0x58>)
 8009ea2:	f7ff ffb3 	bl	8009e0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009eac:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <tcpip_thread+0x5c>)
 8009eae:	2291      	movs	r2, #145	; 0x91
 8009eb0:	4909      	ldr	r1, [pc, #36]	; (8009ed8 <tcpip_thread+0x60>)
 8009eb2:	480a      	ldr	r0, [pc, #40]	; (8009edc <tcpip_thread+0x64>)
 8009eb4:	f00d f864 	bl	8016f80 <iprintf>
      continue;
 8009eb8:	e003      	b.n	8009ec2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 f80f 	bl	8009ee0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009ec2:	e7ea      	b.n	8009e9a <tcpip_thread+0x22>
 8009ec4:	20008d34 	.word	0x20008d34
 8009ec8:	20008d28 	.word	0x20008d28
 8009ecc:	20008d2c 	.word	0x20008d2c
 8009ed0:	20008d30 	.word	0x20008d30
 8009ed4:	08017be8 	.word	0x08017be8
 8009ed8:	08017c18 	.word	0x08017c18
 8009edc:	08017c38 	.word	0x08017c38

08009ee0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d026      	beq.n	8009f3e <tcpip_thread_handle_msg+0x5e>
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	dc2b      	bgt.n	8009f4c <tcpip_thread_handle_msg+0x6c>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <tcpip_thread_handle_msg+0x1e>
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d015      	beq.n	8009f28 <tcpip_thread_handle_msg+0x48>
 8009efc:	e026      	b.n	8009f4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6850      	ldr	r0, [r2, #4]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6892      	ldr	r2, [r2, #8]
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	4798      	blx	r3
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d004      	beq.n	8009f1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f003 f815 	bl	800cf48 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	2009      	movs	r0, #9
 8009f22:	f002 f9db 	bl	800c2dc <memp_free>
      break;
 8009f26:	e018      	b.n	8009f5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6892      	ldr	r2, [r2, #8]
 8009f30:	4610      	mov	r0, r2
 8009f32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	2008      	movs	r0, #8
 8009f38:	f002 f9d0 	bl	800c2dc <memp_free>
      break;
 8009f3c:	e00d      	b.n	8009f5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6892      	ldr	r2, [r2, #8]
 8009f46:	4610      	mov	r0, r2
 8009f48:	4798      	blx	r3
      break;
 8009f4a:	e006      	b.n	8009f5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009f4c:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <tcpip_thread_handle_msg+0x84>)
 8009f4e:	22cf      	movs	r2, #207	; 0xcf
 8009f50:	4905      	ldr	r1, [pc, #20]	; (8009f68 <tcpip_thread_handle_msg+0x88>)
 8009f52:	4806      	ldr	r0, [pc, #24]	; (8009f6c <tcpip_thread_handle_msg+0x8c>)
 8009f54:	f00d f814 	bl	8016f80 <iprintf>
      break;
 8009f58:	bf00      	nop
  }
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	08017be8 	.word	0x08017be8
 8009f68:	08017c18 	.word	0x08017c18
 8009f6c:	08017c38 	.word	0x08017c38

08009f70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009f7c:	481a      	ldr	r0, [pc, #104]	; (8009fe8 <tcpip_inpkt+0x78>)
 8009f7e:	f00c fa0a 	bl	8016396 <sys_mbox_valid>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d105      	bne.n	8009f94 <tcpip_inpkt+0x24>
 8009f88:	4b18      	ldr	r3, [pc, #96]	; (8009fec <tcpip_inpkt+0x7c>)
 8009f8a:	22fc      	movs	r2, #252	; 0xfc
 8009f8c:	4918      	ldr	r1, [pc, #96]	; (8009ff0 <tcpip_inpkt+0x80>)
 8009f8e:	4819      	ldr	r0, [pc, #100]	; (8009ff4 <tcpip_inpkt+0x84>)
 8009f90:	f00c fff6 	bl	8016f80 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009f94:	2009      	movs	r0, #9
 8009f96:	f002 f92b 	bl	800c1f0 <memp_malloc>
 8009f9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa6:	e01a      	b.n	8009fde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2200      	movs	r2, #0
 8009fac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009fc0:	6979      	ldr	r1, [r7, #20]
 8009fc2:	4809      	ldr	r0, [pc, #36]	; (8009fe8 <tcpip_inpkt+0x78>)
 8009fc4:	f00c f98e 	bl	80162e4 <sys_mbox_trypost>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009fce:	6979      	ldr	r1, [r7, #20]
 8009fd0:	2009      	movs	r0, #9
 8009fd2:	f002 f983 	bl	800c2dc <memp_free>
    return ERR_MEM;
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fda:	e000      	b.n	8009fde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009fdc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20008d30 	.word	0x20008d30
 8009fec:	08017be8 	.word	0x08017be8
 8009ff0:	08017c60 	.word	0x08017c60
 8009ff4:	08017c38 	.word	0x08017c38

08009ff8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a008:	f003 0318 	and.w	r3, r3, #24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a010:	4a08      	ldr	r2, [pc, #32]	; (800a034 <tcpip_input+0x3c>)
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff ffab 	bl	8009f70 <tcpip_inpkt>
 800a01a:	4603      	mov	r3, r0
 800a01c:	e005      	b.n	800a02a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a01e:	4a06      	ldr	r2, [pc, #24]	; (800a038 <tcpip_input+0x40>)
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff ffa4 	bl	8009f70 <tcpip_inpkt>
 800a028:	4603      	mov	r3, r0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	080160f5 	.word	0x080160f5
 800a038:	08015001 	.word	0x08015001

0800a03c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a046:	4819      	ldr	r0, [pc, #100]	; (800a0ac <tcpip_try_callback+0x70>)
 800a048:	f00c f9a5 	bl	8016396 <sys_mbox_valid>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <tcpip_try_callback+0x24>
 800a052:	4b17      	ldr	r3, [pc, #92]	; (800a0b0 <tcpip_try_callback+0x74>)
 800a054:	f240 125d 	movw	r2, #349	; 0x15d
 800a058:	4916      	ldr	r1, [pc, #88]	; (800a0b4 <tcpip_try_callback+0x78>)
 800a05a:	4817      	ldr	r0, [pc, #92]	; (800a0b8 <tcpip_try_callback+0x7c>)
 800a05c:	f00c ff90 	bl	8016f80 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a060:	2008      	movs	r0, #8
 800a062:	f002 f8c5 	bl	800c1f0 <memp_malloc>
 800a066:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d102      	bne.n	800a074 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a06e:	f04f 33ff 	mov.w	r3, #4294967295
 800a072:	e017      	b.n	800a0a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2201      	movs	r2, #1
 800a078:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a086:	68f9      	ldr	r1, [r7, #12]
 800a088:	4808      	ldr	r0, [pc, #32]	; (800a0ac <tcpip_try_callback+0x70>)
 800a08a:	f00c f92b 	bl	80162e4 <sys_mbox_trypost>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a094:	68f9      	ldr	r1, [r7, #12]
 800a096:	2008      	movs	r0, #8
 800a098:	f002 f920 	bl	800c2dc <memp_free>
    return ERR_MEM;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a0:	e000      	b.n	800a0a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20008d30 	.word	0x20008d30
 800a0b0:	08017be8 	.word	0x08017be8
 800a0b4:	08017c60 	.word	0x08017c60
 800a0b8:	08017c38 	.word	0x08017c38

0800a0bc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a0c6:	f001 fbca 	bl	800b85e <lwip_init>

  tcpip_init_done = initfunc;
 800a0ca:	4a17      	ldr	r2, [pc, #92]	; (800a128 <tcpip_init+0x6c>)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a0d0:	4a16      	ldr	r2, [pc, #88]	; (800a12c <tcpip_init+0x70>)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a0d6:	2106      	movs	r1, #6
 800a0d8:	4815      	ldr	r0, [pc, #84]	; (800a130 <tcpip_init+0x74>)
 800a0da:	f00c f8e1 	bl	80162a0 <sys_mbox_new>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d006      	beq.n	800a0f2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a0e4:	4b13      	ldr	r3, [pc, #76]	; (800a134 <tcpip_init+0x78>)
 800a0e6:	f240 2261 	movw	r2, #609	; 0x261
 800a0ea:	4913      	ldr	r1, [pc, #76]	; (800a138 <tcpip_init+0x7c>)
 800a0ec:	4813      	ldr	r0, [pc, #76]	; (800a13c <tcpip_init+0x80>)
 800a0ee:	f00c ff47 	bl	8016f80 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a0f2:	4813      	ldr	r0, [pc, #76]	; (800a140 <tcpip_init+0x84>)
 800a0f4:	f00c f96e 	bl	80163d4 <sys_mutex_new>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d006      	beq.n	800a10c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a0fe:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <tcpip_init+0x78>)
 800a100:	f240 2265 	movw	r2, #613	; 0x265
 800a104:	490f      	ldr	r1, [pc, #60]	; (800a144 <tcpip_init+0x88>)
 800a106:	480d      	ldr	r0, [pc, #52]	; (800a13c <tcpip_init+0x80>)
 800a108:	f00c ff3a 	bl	8016f80 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a10c:	2300      	movs	r3, #0
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a114:	2200      	movs	r2, #0
 800a116:	490c      	ldr	r1, [pc, #48]	; (800a148 <tcpip_init+0x8c>)
 800a118:	480c      	ldr	r0, [pc, #48]	; (800a14c <tcpip_init+0x90>)
 800a11a:	f00c f993 	bl	8016444 <sys_thread_new>
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20008d28 	.word	0x20008d28
 800a12c:	20008d2c 	.word	0x20008d2c
 800a130:	20008d30 	.word	0x20008d30
 800a134:	08017be8 	.word	0x08017be8
 800a138:	08017c70 	.word	0x08017c70
 800a13c:	08017c38 	.word	0x08017c38
 800a140:	20008d34 	.word	0x20008d34
 800a144:	08017c94 	.word	0x08017c94
 800a148:	08009e79 	.word	0x08009e79
 800a14c:	08017cb8 	.word	0x08017cb8

0800a150 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4413      	add	r3, r2
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	3301      	adds	r3, #1
 800a170:	b29a      	uxth	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	2bff      	cmp	r3, #255	; 0xff
 800a17c:	d902      	bls.n	800a184 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	801a      	strh	r2, [r3, #0]
  }
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr

0800a18e <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800a18e:	b480      	push	{r7}
 800a190:	b083      	sub	sp, #12
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	885b      	ldrh	r3, [r3, #2]
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4413      	add	r3, r2
 800a1a0:	3304      	adds	r3, #4
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bc80      	pop	{r7}
 800a1aa:	4770      	bx	lr

0800a1ac <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800a1b8:	887b      	ldrh	r3, [r7, #2]
 800a1ba:	2bff      	cmp	r3, #255	; 0xff
 800a1bc:	d905      	bls.n	800a1ca <mqtt_ringbuf_advance_get_idx+0x1e>
 800a1be:	4b0e      	ldr	r3, [pc, #56]	; (800a1f8 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800a1c0:	22cb      	movs	r2, #203	; 0xcb
 800a1c2:	490e      	ldr	r1, [pc, #56]	; (800a1fc <mqtt_ringbuf_advance_get_idx+0x50>)
 800a1c4:	480e      	ldr	r0, [pc, #56]	; (800a200 <mqtt_ringbuf_advance_get_idx+0x54>)
 800a1c6:	f00c fedb 	bl	8016f80 <iprintf>

  rb->get += len;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	885a      	ldrh	r2, [r3, #2]
 800a1ce:	887b      	ldrh	r3, [r7, #2]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	885b      	ldrh	r3, [r3, #2]
 800a1dc:	2bff      	cmp	r3, #255	; 0xff
 800a1de:	d906      	bls.n	800a1ee <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	885b      	ldrh	r3, [r3, #2]
 800a1e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	805a      	strh	r2, [r3, #2]
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	08017cc8 	.word	0x08017cc8
 800a1fc:	08017d00 	.word	0x08017d00
 800a200:	08017d40 	.word	0x08017d40

0800a204 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	885b      	ldrh	r3, [r3, #2]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a220:	d303      	bcc.n	800a22a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a228:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	b29b      	uxth	r3, r3
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr

0800a238 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7ff ffdc 	bl	800a204 <mqtt_ringbuf_len>
 800a24c:	4603      	mov	r3, r0
 800a24e:	461a      	mov	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	885b      	ldrh	r3, [r3, #2]
 800a254:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a258:	429a      	cmp	r2, r3
 800a25a:	da04      	bge.n	800a266 <mqtt_output_send+0x2e>
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7ff ffd1 	bl	800a204 <mqtt_ringbuf_len>
 800a262:	4603      	mov	r3, r0
 800a264:	e004      	b.n	800a270 <mqtt_output_send+0x38>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	885b      	ldrh	r3, [r3, #2]
 800a26a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a26e:	b29b      	uxth	r3, r3
 800a270:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a278:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d105      	bne.n	800a28c <mqtt_output_send+0x54>
 800a280:	4b44      	ldr	r3, [pc, #272]	; (800a394 <mqtt_output_send+0x15c>)
 800a282:	22f0      	movs	r2, #240	; 0xf0
 800a284:	4944      	ldr	r1, [pc, #272]	; (800a398 <mqtt_output_send+0x160>)
 800a286:	4845      	ldr	r0, [pc, #276]	; (800a39c <mqtt_output_send+0x164>)
 800a288:	f00c fe7a 	bl	8016f80 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800a28c:	89bb      	ldrh	r3, [r7, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d07c      	beq.n	800a38c <mqtt_output_send+0x154>
 800a292:	897b      	ldrh	r3, [r7, #10]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d079      	beq.n	800a38c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 800a298:	89ba      	ldrh	r2, [r7, #12]
 800a29a:	897b      	ldrh	r3, [r7, #10]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d90d      	bls.n	800a2bc <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800a2a0:	897b      	ldrh	r3, [r7, #10]
 800a2a2:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff ffad 	bl	800a204 <mqtt_ringbuf_len>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	897b      	ldrh	r3, [r7, #10]
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	bf34      	ite	cc
 800a2b4:	2301      	movcc	r3, #1
 800a2b6:	2300      	movcs	r3, #0
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff ff66 	bl	800a18e <mqtt_ringbuf_get_ptr>
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <mqtt_output_send+0x96>
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e000      	b.n	800a2d0 <mqtt_output_send+0x98>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	89ba      	ldrh	r2, [r7, #12]
 800a2d2:	6838      	ldr	r0, [r7, #0]
 800a2d4:	f007 fc30 	bl	8011b38 <tcp_write>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800a2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d146      	bne.n	800a372 <mqtt_output_send+0x13a>
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d043      	beq.n	800a372 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800a2ea:	89bb      	ldrh	r3, [r7, #12]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7ff ff5c 	bl	800a1ac <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2fa:	461c      	mov	r4, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff ff81 	bl	800a204 <mqtt_ringbuf_len>
 800a302:	4603      	mov	r3, r0
 800a304:	461a      	mov	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	885b      	ldrh	r3, [r3, #2]
 800a30a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a30e:	429a      	cmp	r2, r3
 800a310:	da04      	bge.n	800a31c <mqtt_output_send+0xe4>
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff ff76 	bl	800a204 <mqtt_ringbuf_len>
 800a318:	4603      	mov	r3, r0
 800a31a:	e003      	b.n	800a324 <mqtt_output_send+0xec>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	885b      	ldrh	r3, [r3, #2]
 800a320:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a324:	42a3      	cmp	r3, r4
 800a326:	dd03      	ble.n	800a330 <mqtt_output_send+0xf8>
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a32e:	e014      	b.n	800a35a <mqtt_output_send+0x122>
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff ff67 	bl	800a204 <mqtt_ringbuf_len>
 800a336:	4603      	mov	r3, r0
 800a338:	461a      	mov	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a342:	429a      	cmp	r2, r3
 800a344:	da04      	bge.n	800a350 <mqtt_output_send+0x118>
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff ff5c 	bl	800a204 <mqtt_ringbuf_len>
 800a34c:	4603      	mov	r3, r0
 800a34e:	e004      	b.n	800a35a <mqtt_output_send+0x122>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	885b      	ldrh	r3, [r3, #2]
 800a354:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a358:	b29b      	uxth	r3, r3
 800a35a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff ff16 	bl	800a18e <mqtt_ringbuf_get_ptr>
 800a362:	4601      	mov	r1, r0
 800a364:	89ba      	ldrh	r2, [r7, #12]
 800a366:	2301      	movs	r3, #1
 800a368:	6838      	ldr	r0, [r7, #0]
 800a36a:	f007 fbe5 	bl	8011b38 <tcp_write>
 800a36e:	4603      	mov	r3, r0
 800a370:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800a372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d109      	bne.n	800a38e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800a37a:	89bb      	ldrh	r3, [r7, #12]
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7ff ff14 	bl	800a1ac <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800a384:	6838      	ldr	r0, [r7, #0]
 800a386:	f008 f9c1 	bl	801270c <tcp_output>
 800a38a:	e000      	b.n	800a38e <mqtt_output_send+0x156>
    return;
 800a38c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	bd90      	pop	{r4, r7, pc}
 800a394:	08017cc8 	.word	0x08017cc8
 800a398:	08017d68 	.word	0x08017d68
 800a39c:	08017d40 	.word	0x08017d40

0800a3a0 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <mqtt_delete_request+0x14>
    r->next = r;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	601a      	str	r2, [r3, #0]
  }
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bc80      	pop	{r7}
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <mqtt_take_request+0x28>
 800a3da:	4b1f      	ldr	r3, [pc, #124]	; (800a458 <mqtt_take_request+0x98>)
 800a3dc:	f240 1267 	movw	r2, #359	; 0x167
 800a3e0:	491e      	ldr	r1, [pc, #120]	; (800a45c <mqtt_take_request+0x9c>)
 800a3e2:	481f      	ldr	r0, [pc, #124]	; (800a460 <mqtt_take_request+0xa0>)
 800a3e4:	f00c fdcc 	bl	8016f80 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	e009      	b.n	800a404 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	899b      	ldrh	r3, [r3, #12]
 800a3f4:	887a      	ldrh	r2, [r7, #2]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d008      	beq.n	800a40c <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1f2      	bne.n	800a3f0 <mqtt_take_request+0x30>
 800a40a:	e000      	b.n	800a40e <mqtt_take_request+0x4e>
      break;
 800a40c:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01c      	beq.n	800a44e <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d104      	bne.n	800a424 <mqtt_take_request+0x64>
      *tail = iter->next;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	e003      	b.n	800a42c <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d009      	beq.n	800a448 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	89d9      	ldrh	r1, [r3, #14]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	89da      	ldrh	r2, [r3, #14]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	440a      	add	r2, r1
 800a444:	b292      	uxth	r2, r2
 800a446:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800a44e:	68fb      	ldr	r3, [r7, #12]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	08017cc8 	.word	0x08017cc8
 800a45c:	08017e08 	.word	0x08017e08
 800a460:	08017d40 	.word	0x08017d40

0800a464 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d106      	bne.n	800a484 <mqtt_request_time_elapsed+0x20>
 800a476:	4b21      	ldr	r3, [pc, #132]	; (800a4fc <mqtt_request_time_elapsed+0x98>)
 800a478:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800a47c:	4920      	ldr	r1, [pc, #128]	; (800a500 <mqtt_request_time_elapsed+0x9c>)
 800a47e:	4821      	ldr	r0, [pc, #132]	; (800a504 <mqtt_request_time_elapsed+0xa0>)
 800a480:	f00c fd7e 	bl	8016f80 <iprintf>
  r = *tail;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800a48a:	e02c      	b.n	800a4e6 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	89db      	ldrh	r3, [r3, #14]
 800a494:	429a      	cmp	r2, r3
 800a496:	d31c      	bcc.n	800a4d2 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	89db      	ldrh	r3, [r3, #14]
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	78fa      	ldrb	r2, [r7, #3]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d007      	beq.n	800a4c4 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	6892      	ldr	r2, [r2, #8]
 800a4bc:	f06f 0102 	mvn.w	r1, #2
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff ff6b 	bl	800a3a0 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	e009      	b.n	800a4e6 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	89da      	ldrh	r2, [r3, #14]
 800a4d6:	78fb      	ldrb	r3, [r7, #3]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	81da      	strh	r2, [r3, #14]
      t = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <mqtt_request_time_elapsed+0x8e>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1cc      	bne.n	800a48c <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800a4f2:	bf00      	nop
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	08017cc8 	.word	0x08017cc8
 800a500:	08017e28 	.word	0x08017e28
 800a504:	08017d40 	.word	0x08017d40

0800a508 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d106      	bne.n	800a524 <mqtt_clear_requests+0x1c>
 800a516:	4b0e      	ldr	r3, [pc, #56]	; (800a550 <mqtt_clear_requests+0x48>)
 800a518:	f240 12a7 	movw	r2, #423	; 0x1a7
 800a51c:	490d      	ldr	r1, [pc, #52]	; (800a554 <mqtt_clear_requests+0x4c>)
 800a51e:	480e      	ldr	r0, [pc, #56]	; (800a558 <mqtt_clear_requests+0x50>)
 800a520:	f00c fd2e 	bl	8016f80 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	e007      	b.n	800a53c <mqtt_clear_requests+0x34>
    next = iter->next;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7ff ff34 	bl	800a3a0 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1f4      	bne.n	800a52c <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]
}
 800a548:	bf00      	nop
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	08017cc8 	.word	0x08017cc8
 800a554:	08017e50 	.word	0x08017e50
 800a558:	08017d40 	.word	0x08017d40

0800a55c <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d106      	bne.n	800a57a <mqtt_init_requests+0x1e>
 800a56c:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <mqtt_init_requests+0x50>)
 800a56e:	f240 12b7 	movw	r2, #439	; 0x1b7
 800a572:	490f      	ldr	r1, [pc, #60]	; (800a5b0 <mqtt_init_requests+0x54>)
 800a574:	480f      	ldr	r0, [pc, #60]	; (800a5b4 <mqtt_init_requests+0x58>)
 800a576:	f00c fd03 	bl	8016f80 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]
 800a57e:	e00b      	b.n	800a598 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	011a      	lsls	r2, r3, #4
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	440b      	add	r3, r1
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	440a      	add	r2, r1
 800a590:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	3301      	adds	r3, #1
 800a596:	73fb      	strb	r3, [r7, #15]
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d8ef      	bhi.n	800a580 <mqtt_init_requests+0x24>
  }
}
 800a5a0:	bf00      	nop
 800a5a2:	bf00      	nop
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	08017cc8 	.word	0x08017cc8
 800a5b0:	08017e74 	.word	0x08017e74
 800a5b4:	08017d40 	.word	0x08017d40

0800a5b8 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff fdc1 	bl	800a150 <mqtt_ringbuf_put>
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800a5e2:	887b      	ldrh	r3, [r7, #2]
 800a5e4:	0a1b      	lsrs	r3, r3, #8
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff fdaf 	bl	800a150 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800a5f2:	887b      	ldrh	r3, [r7, #2]
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff fda9 	bl	800a150 <mqtt_ringbuf_put>
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b086      	sub	sp, #24
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	4613      	mov	r3, r2
 800a612:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800a614:	88fb      	ldrh	r3, [r7, #6]
 800a616:	0a1b      	lsrs	r3, r3, #8
 800a618:	b29b      	uxth	r3, r3
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	4619      	mov	r1, r3
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7ff fd96 	bl	800a150 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800a624:	88fb      	ldrh	r3, [r7, #6]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	4619      	mov	r1, r3
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7ff fd90 	bl	800a150 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a630:	2300      	movs	r3, #0
 800a632:	82fb      	strh	r3, [r7, #22]
 800a634:	e00a      	b.n	800a64c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800a636:	8afb      	ldrh	r3, [r7, #22]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	4413      	add	r3, r2
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	4619      	mov	r1, r3
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7ff fd85 	bl	800a150 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a646:	8afb      	ldrh	r3, [r7, #22]
 800a648:	3301      	adds	r3, #1
 800a64a:	82fb      	strh	r3, [r7, #22]
 800a64c:	8afa      	ldrh	r2, [r7, #22]
 800a64e:	88fb      	ldrh	r3, [r7, #6]
 800a650:	429a      	cmp	r2, r3
 800a652:	d3f0      	bcc.n	800a636 <mqtt_output_append_string+0x30>
  }
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b082      	sub	sp, #8
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	4608      	mov	r0, r1
 800a668:	4611      	mov	r1, r2
 800a66a:	461a      	mov	r2, r3
 800a66c:	4603      	mov	r3, r0
 800a66e:	70fb      	strb	r3, [r7, #3]
 800a670:	460b      	mov	r3, r1
 800a672:	70bb      	strb	r3, [r7, #2]
 800a674:	4613      	mov	r3, r2
 800a676:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	b25a      	sxtb	r2, r3
 800a67e:	78bb      	ldrb	r3, [r7, #2]
 800a680:	00db      	lsls	r3, r3, #3
 800a682:	b25b      	sxtb	r3, r3
 800a684:	f003 0308 	and.w	r3, r3, #8
 800a688:	b25b      	sxtb	r3, r3
 800a68a:	4313      	orrs	r3, r2
 800a68c:	b25a      	sxtb	r2, r3
 800a68e:	787b      	ldrb	r3, [r7, #1]
 800a690:	005b      	lsls	r3, r3, #1
 800a692:	b25b      	sxtb	r3, r3
 800a694:	f003 0306 	and.w	r3, r3, #6
 800a698:	b25b      	sxtb	r3, r3
 800a69a:	4313      	orrs	r3, r2
 800a69c:	b25a      	sxtb	r2, r3
 800a69e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	b25b      	sxtb	r3, r3
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	b25b      	sxtb	r3, r3
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff ff81 	bl	800a5b8 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800a6b6:	8abb      	ldrh	r3, [r7, #20]
 800a6b8:	b25b      	sxtb	r3, r3
 800a6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6be:	b25b      	sxtb	r3, r3
 800a6c0:	8aba      	ldrh	r2, [r7, #20]
 800a6c2:	2a7f      	cmp	r2, #127	; 0x7f
 800a6c4:	d902      	bls.n	800a6cc <mqtt_output_append_fixed_header+0x6e>
 800a6c6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800a6ca:	e000      	b.n	800a6ce <mqtt_output_append_fixed_header+0x70>
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	b25b      	sxtb	r3, r3
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff ff6e 	bl	800a5b8 <mqtt_output_append_u8>
    r_length >>= 7;
 800a6dc:	8abb      	ldrh	r3, [r7, #20]
 800a6de:	09db      	lsrs	r3, r3, #7
 800a6e0:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800a6e2:	8abb      	ldrh	r3, [r7, #20]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1e6      	bne.n	800a6b6 <mqtt_output_append_fixed_header+0x58>
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800a6f4:	b590      	push	{r4, r7, lr}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800a700:	887b      	ldrh	r3, [r7, #2]
 800a702:	3301      	adds	r3, #1
 800a704:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d106      	bne.n	800a71a <mqtt_output_check_space+0x26>
 800a70c:	4b0f      	ldr	r3, [pc, #60]	; (800a74c <mqtt_output_check_space+0x58>)
 800a70e:	f240 2207 	movw	r2, #519	; 0x207
 800a712:	490f      	ldr	r1, [pc, #60]	; (800a750 <mqtt_output_check_space+0x5c>)
 800a714:	480f      	ldr	r0, [pc, #60]	; (800a754 <mqtt_output_check_space+0x60>)
 800a716:	f00c fc33 	bl	8016f80 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800a71a:	89fb      	ldrh	r3, [r7, #14]
 800a71c:	3301      	adds	r3, #1
 800a71e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800a720:	887b      	ldrh	r3, [r7, #2]
 800a722:	09db      	lsrs	r3, r3, #7
 800a724:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800a726:	887b      	ldrh	r3, [r7, #2]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1f6      	bne.n	800a71a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800a72c:	89fc      	ldrh	r4, [r7, #14]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fd68 	bl	800a204 <mqtt_ringbuf_len>
 800a734:	4603      	mov	r3, r0
 800a736:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a73a:	429c      	cmp	r4, r3
 800a73c:	bfd4      	ite	le
 800a73e:	2301      	movle	r3, #1
 800a740:	2300      	movgt	r3, #0
 800a742:	b2db      	uxtb	r3, r3
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd90      	pop	{r4, r7, pc}
 800a74c:	08017cc8 	.word	0x08017cc8
 800a750:	08017e98 	.word	0x08017e98
 800a754:	08017d40 	.word	0x08017d40

0800a758 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <mqtt_close+0x20>
 800a76a:	4b27      	ldr	r3, [pc, #156]	; (800a808 <mqtt_close+0xb0>)
 800a76c:	f240 221b 	movw	r2, #539	; 0x21b
 800a770:	4926      	ldr	r1, [pc, #152]	; (800a80c <mqtt_close+0xb4>)
 800a772:	4827      	ldr	r0, [pc, #156]	; (800a810 <mqtt_close+0xb8>)
 800a774:	f00c fc04 	bl	8016f80 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d024      	beq.n	800a7ca <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	2100      	movs	r1, #0
 800a786:	4618      	mov	r0, r3
 800a788:	f004 fabe 	bl	800ed08 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f004 fafc 	bl	800ed90 <tcp_err>
    altcp_sent(client->conn, NULL);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2100      	movs	r1, #0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f004 fad4 	bl	800ed4c <tcp_sent>
    res = altcp_close(client->conn);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f003 f8d7 	bl	800d95c <tcp_close>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800a7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f003 f9b6 	bl	800db30 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3318      	adds	r3, #24
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fe9a 	bl	800a508 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	480f      	ldr	r0, [pc, #60]	; (800a814 <mqtt_close+0xbc>)
 800a7d8:	f009 f816 	bl	8013808 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	7a9b      	ldrb	r3, [r3, #10]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00d      	beq.n	800a800 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d006      	beq.n	800a800 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	6911      	ldr	r1, [r2, #16]
 800a7fa:	887a      	ldrh	r2, [r7, #2]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	4798      	blx	r3
    }
  }
}
 800a800:	bf00      	nop
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	08017cc8 	.word	0x08017cc8
 800a80c:	08017ebc 	.word	0x08017ebc
 800a810:	08017d40 	.word	0x08017d40
 800a814:	0800a819 	.word	0x0800a819

0800a818 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800a820:	2301      	movs	r3, #1
 800a822:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d106      	bne.n	800a83c <mqtt_cyclic_timer+0x24>
 800a82e:	4b42      	ldr	r3, [pc, #264]	; (800a938 <mqtt_cyclic_timer+0x120>)
 800a830:	f44f 7211 	mov.w	r2, #580	; 0x244
 800a834:	4941      	ldr	r1, [pc, #260]	; (800a93c <mqtt_cyclic_timer+0x124>)
 800a836:	4842      	ldr	r0, [pc, #264]	; (800a940 <mqtt_cyclic_timer+0x128>)
 800a838:	f00c fba2 	bl	8016f80 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	7a9b      	ldrb	r3, [r3, #10]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d115      	bne.n	800a870 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	3301      	adds	r3, #1
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
 800a856:	4613      	mov	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	2b63      	cmp	r3, #99	; 0x63
 800a85e:	dd5e      	ble.n	800a91e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800a860:	f240 1101 	movw	r1, #257	; 0x101
 800a864:	68b8      	ldr	r0, [r7, #8]
 800a866:	f7ff ff77 	bl	800a758 <mqtt_close>
      restart_timer = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]
 800a86e:	e056      	b.n	800a91e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	7a9b      	ldrb	r3, [r3, #10]
 800a874:	2b03      	cmp	r3, #3
 800a876:	d150      	bne.n	800a91a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	3318      	adds	r3, #24
 800a87c:	2105      	movs	r1, #5
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fdf0 	bl	800a464 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	885b      	ldrh	r3, [r3, #2]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d048      	beq.n	800a91e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	889b      	ldrh	r3, [r3, #4]
 800a890:	3301      	adds	r3, #1
 800a892:	b29a      	uxth	r2, r3
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	889b      	ldrh	r3, [r3, #4]
 800a89c:	461a      	mov	r2, r3
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	441a      	add	r2, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	885b      	ldrh	r3, [r3, #2]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	885b      	ldrh	r3, [r3, #2]
 800a8ae:	085b      	lsrs	r3, r3, #1
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	440b      	add	r3, r1
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	dd06      	ble.n	800a8c6 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800a8b8:	f240 1101 	movw	r1, #257	; 0x101
 800a8bc:	68b8      	ldr	r0, [r7, #8]
 800a8be:	f7ff ff4b 	bl	800a758 <mqtt_close>
        restart_timer = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	8852      	ldrh	r2, [r2, #2]
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	db18      	blt.n	800a90c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	33ec      	adds	r3, #236	; 0xec
 800a8de:	2100      	movs	r1, #0
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff ff07 	bl	800a6f4 <mqtt_output_check_space>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d018      	beq.n	800a91e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9301      	str	r3, [sp, #4]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	210c      	movs	r1, #12
 800a900:	f7ff fead 	bl	800a65e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	e008      	b.n	800a91e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	b29a      	uxth	r2, r3
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	801a      	strh	r2, [r3, #0]
 800a918:	e001      	b.n	800a91e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d005      	beq.n	800a930 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	4907      	ldr	r1, [pc, #28]	; (800a944 <mqtt_cyclic_timer+0x12c>)
 800a928:	f241 3088 	movw	r0, #5000	; 0x1388
 800a92c:	f008 ff46 	bl	80137bc <sys_timeout>
  }
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	08017cc8 	.word	0x08017cc8
 800a93c:	08017ed8 	.word	0x08017ed8
 800a940:	08017d40 	.word	0x08017d40
 800a944:	0800a819 	.word	0x0800a819

0800a948 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	4608      	mov	r0, r1
 800a952:	4611      	mov	r1, r2
 800a954:	461a      	mov	r2, r3
 800a956:	4603      	mov	r3, r0
 800a958:	70fb      	strb	r3, [r7, #3]
 800a95a:	460b      	mov	r3, r1
 800a95c:	803b      	strh	r3, [r7, #0]
 800a95e:	4613      	mov	r3, r2
 800a960:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	33ec      	adds	r3, #236	; 0xec
 800a96a:	2102      	movs	r1, #2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff fec1 	bl	800a6f4 <mqtt_output_check_space>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01c      	beq.n	800a9b2 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a97e:	78bb      	ldrb	r3, [r7, #2]
 800a980:	78f9      	ldrb	r1, [r7, #3]
 800a982:	2202      	movs	r2, #2
 800a984:	9201      	str	r2, [sp, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	9200      	str	r2, [sp, #0]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f7ff fe67 	bl	800a65e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	33ec      	adds	r3, #236	; 0xec
 800a994:	883a      	ldrh	r2, [r7, #0]
 800a996:	4611      	mov	r1, r2
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fe1c 	bl	800a5d6 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	f7ff fc44 	bl	800a238 <mqtt_output_send>
 800a9b0:	e001      	b.n	800a9b6 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800a9b2:	23ff      	movs	r3, #255	; 0xff
 800a9b4:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800a9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00c      	beq.n	800a9f0 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	6890      	ldr	r0, [r2, #8]
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	2a02      	cmp	r2, #2
 800a9e2:	d801      	bhi.n	800a9e8 <mqtt_incomming_suback+0x26>
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	e001      	b.n	800a9ec <mqtt_incomming_suback+0x2a>
 800a9e8:	f06f 020c 	mvn.w	r2, #12
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	4798      	blx	r3
  }
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800a9f8:	b590      	push	{r4, r7, lr}
 800a9fa:	b08f      	sub	sp, #60	; 0x3c
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	607b      	str	r3, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	72fb      	strb	r3, [r7, #11]
 800aa06:	4613      	mov	r3, r2
 800aa08:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	4413      	add	r3, r2
 800aa18:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800aa1a:	7afb      	ldrb	r3, [r7, #11]
 800aa1c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800aa20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800aa28:	091b      	lsrs	r3, r3, #4
 800aa2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa36:	2b7f      	cmp	r3, #127	; 0x7f
 800aa38:	d906      	bls.n	800aa48 <mqtt_message_received+0x50>
 800aa3a:	4b97      	ldr	r3, [pc, #604]	; (800ac98 <mqtt_message_received+0x2a0>)
 800aa3c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800aa40:	4996      	ldr	r1, [pc, #600]	; (800ac9c <mqtt_message_received+0x2a4>)
 800aa42:	4897      	ldr	r0, [pc, #604]	; (800aca0 <mqtt_message_received+0x2a8>)
 800aa44:	f00c fa9c 	bl	8016f80 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800aa48:	7afa      	ldrb	r2, [r7, #11]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d906      	bls.n	800aa60 <mqtt_message_received+0x68>
 800aa52:	4b91      	ldr	r3, [pc, #580]	; (800ac98 <mqtt_message_received+0x2a0>)
 800aa54:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800aa58:	4992      	ldr	r1, [pc, #584]	; (800aca4 <mqtt_message_received+0x2ac>)
 800aa5a:	4891      	ldr	r0, [pc, #580]	; (800aca0 <mqtt_message_received+0x2a8>)
 800aa5c:	f00c fa90 	bl	8016f80 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800aa60:	7afa      	ldrb	r2, [r7, #11]
 800aa62:	893b      	ldrh	r3, [r7, #8]
 800aa64:	4413      	add	r3, r2
 800aa66:	2b80      	cmp	r3, #128	; 0x80
 800aa68:	dd09      	ble.n	800aa7e <mqtt_message_received+0x86>
 800aa6a:	4b8b      	ldr	r3, [pc, #556]	; (800ac98 <mqtt_message_received+0x2a0>)
 800aa6c:	f240 22ad 	movw	r2, #685	; 0x2ad
 800aa70:	498d      	ldr	r1, [pc, #564]	; (800aca8 <mqtt_message_received+0x2b0>)
 800aa72:	488b      	ldr	r0, [pc, #556]	; (800aca0 <mqtt_message_received+0x2a8>)
 800aa74:	f00c fa84 	bl	8016f80 <iprintf>
 800aa78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa7c:	e16f      	b.n	800ad5e <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800aa7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d123      	bne.n	800aace <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	7a9b      	ldrb	r3, [r3, #10]
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	f040 8152 	bne.w	800ad34 <mqtt_message_received+0x33c>
      if (length < 2) {
 800aa90:	893b      	ldrh	r3, [r7, #8]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	f240 8150 	bls.w	800ad38 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800aaa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f040 8146 	bne.w	800ad34 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2203      	movs	r2, #3
 800aab2:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 813b 	beq.w	800ad34 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	6911      	ldr	r1, [r2, #16]
 800aac6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	4798      	blx	r3
 800aacc:	e132      	b.n	800ad34 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800aace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aad2:	2b0d      	cmp	r3, #13
 800aad4:	f000 812e 	beq.w	800ad34 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800aad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aadc:	2b03      	cmp	r3, #3
 800aade:	f040 80c0 	bne.w	800ac62 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800aae6:	893b      	ldrh	r3, [r7, #8]
 800aae8:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800aaf0:	105b      	asrs	r3, r3, #1
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 0303 	and.w	r3, r3, #3
 800aaf8:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aafe:	2b80      	cmp	r3, #128	; 0x80
 800ab00:	d87d      	bhi.n	800abfe <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800ab02:	7ffb      	ldrb	r3, [r7, #31]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <mqtt_message_received+0x114>
 800ab08:	2302      	movs	r3, #2
 800ab0a:	e000      	b.n	800ab0e <mqtt_message_received+0x116>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800ab10:	8bbb      	ldrh	r3, [r7, #28]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	893b      	ldrh	r3, [r7, #8]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	f280 8110 	bge.w	800ad3c <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800ab1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800ab22:	8b7b      	ldrh	r3, [r7, #26]
 800ab24:	021b      	lsls	r3, r3, #8
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	4413      	add	r3, r2
 800ab32:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800ab34:	8b7a      	ldrh	r2, [r7, #26]
 800ab36:	8939      	ldrh	r1, [r7, #8]
 800ab38:	8bbb      	ldrh	r3, [r7, #28]
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	1acb      	subs	r3, r1, r3
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	f300 80fe 	bgt.w	800ad40 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800ab44:	8b7a      	ldrh	r2, [r7, #26]
 800ab46:	8bbb      	ldrh	r3, [r7, #28]
 800ab48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab4a:	1acb      	subs	r3, r1, r3
 800ab4c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	f200 80f6 	bhi.w	800ad40 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab56:	3302      	adds	r3, #2
 800ab58:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800ab5a:	8b7b      	ldrh	r3, [r7, #26]
 800ab5c:	3302      	adds	r3, #2
 800ab5e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800ab60:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ab62:	7ffa      	ldrb	r2, [r7, #31]
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	d001      	beq.n	800ab6c <mqtt_message_received+0x174>
 800ab68:	2202      	movs	r2, #2
 800ab6a:	e000      	b.n	800ab6e <mqtt_message_received+0x176>
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	4413      	add	r3, r2
 800ab70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab72:	429a      	cmp	r2, r3
 800ab74:	f0c0 80e6 	bcc.w	800ad44 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800ab78:	7ffb      	ldrb	r3, [r7, #31]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01a      	beq.n	800abb4 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800ab7e:	893a      	ldrh	r2, [r7, #8]
 800ab80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ab82:	3302      	adds	r3, #2
 800ab84:	429a      	cmp	r2, r3
 800ab86:	f0c0 80df 	bcc.w	800ad48 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800ab8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ab8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab8e:	4413      	add	r3, r2
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	021b      	lsls	r3, r3, #8
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab9e:	440b      	add	r3, r1
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	4413      	add	r3, r2
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800abac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800abae:	3302      	adds	r3, #2
 800abb0:	863b      	strh	r3, [r7, #48]	; 0x30
 800abb2:	e002      	b.n	800abba <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800abba:	8b7b      	ldrh	r3, [r7, #26]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	4413      	add	r3, r2
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800abc4:	8b7b      	ldrh	r3, [r7, #26]
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	4413      	add	r3, r2
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800abce:	893a      	ldrh	r2, [r7, #8]
 800abd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800abd6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800abd8:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d008      	beq.n	800abf4 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800abea:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	440a      	add	r2, r1
 800abf0:	6979      	ldr	r1, [r7, #20]
 800abf2:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800abf4:	8b7b      	ldrh	r3, [r7, #26]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4413      	add	r3, r2
 800abfa:	7cfa      	ldrb	r2, [r7, #19]
 800abfc:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800abfe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d103      	bne.n	800ac0c <mqtt_message_received+0x214>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f040 8094 	bne.w	800ad34 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800ac0c:	893b      	ldrh	r3, [r7, #8]
 800ac0e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800ac10:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ac12:	440a      	add	r2, r1
 800ac14:	4293      	cmp	r3, r2
 800ac16:	f0c0 8099 	bcc.w	800ad4c <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800ac22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac26:	18d1      	adds	r1, r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bf0c      	ite	eq
 800ac2e:	2301      	moveq	r3, #1
 800ac30:	2300      	movne	r3, #0
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ac36:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d17a      	bne.n	800ad34 <mqtt_message_received+0x33c>
 800ac3e:	7ffb      	ldrb	r3, [r7, #31]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d077      	beq.n	800ad34 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800ac44:	7ffb      	ldrb	r3, [r7, #31]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d101      	bne.n	800ac4e <mqtt_message_received+0x256>
 800ac4a:	2304      	movs	r3, #4
 800ac4c:	e000      	b.n	800ac50 <mqtt_message_received+0x258>
 800ac4e:	2305      	movs	r3, #5
 800ac50:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	891a      	ldrh	r2, [r3, #8]
 800ac56:	7cb9      	ldrb	r1, [r7, #18]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fe74 	bl	800a948 <pub_ack_rec_rel_response>
 800ac60:	e068      	b.n	800ad34 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	021b      	lsls	r3, r3, #8
 800ac6a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6e:	3301      	adds	r3, #1
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac76:	4313      	orrs	r3, r2
 800ac78:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800ac7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d067      	beq.n	800ad50 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800ac80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac84:	2b05      	cmp	r3, #5
 800ac86:	d111      	bne.n	800acac <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800ac88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	2106      	movs	r1, #6
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f7ff fe5a 	bl	800a948 <pub_ack_rec_rel_response>
 800ac94:	e04e      	b.n	800ad34 <mqtt_message_received+0x33c>
 800ac96:	bf00      	nop
 800ac98:	08017cc8 	.word	0x08017cc8
 800ac9c:	08017efc 	.word	0x08017efc
 800aca0:	08017d40 	.word	0x08017d40
 800aca4:	08017f2c 	.word	0x08017f2c
 800aca8:	08017f50 	.word	0x08017f50

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800acac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acb0:	2b06      	cmp	r3, #6
 800acb2:	d106      	bne.n	800acc2 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800acb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800acb6:	2300      	movs	r3, #0
 800acb8:	2107      	movs	r1, #7
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f7ff fe44 	bl	800a948 <pub_ack_rec_rel_response>
 800acc0:	e038      	b.n	800ad34 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800acc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acc6:	2b09      	cmp	r3, #9
 800acc8:	d00b      	beq.n	800ace2 <mqtt_message_received+0x2ea>
 800acca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acce:	2b0b      	cmp	r3, #11
 800acd0:	d007      	beq.n	800ace2 <mqtt_message_received+0x2ea>
 800acd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acd6:	2b07      	cmp	r3, #7
 800acd8:	d003      	beq.n	800ace2 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800acda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acde:	2b04      	cmp	r3, #4
 800ace0:	d138      	bne.n	800ad54 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3318      	adds	r3, #24
 800ace6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ace8:	4611      	mov	r1, r2
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff fb68 	bl	800a3c0 <mqtt_take_request>
 800acf0:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01c      	beq.n	800ad32 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800acf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acfc:	2b09      	cmp	r3, #9
 800acfe:	d10a      	bne.n	800ad16 <mqtt_message_received+0x31e>
          if (length < 3) {
 800ad00:	893b      	ldrh	r3, [r7, #8]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d928      	bls.n	800ad58 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad08:	3302      	adds	r3, #2
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6a38      	ldr	r0, [r7, #32]
 800ad10:	f7ff fe57 	bl	800a9c2 <mqtt_incomming_suback>
 800ad14:	e00a      	b.n	800ad2c <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d006      	beq.n	800ad2c <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	6a3a      	ldr	r2, [r7, #32]
 800ad24:	6892      	ldr	r2, [r2, #8]
 800ad26:	2100      	movs	r1, #0
 800ad28:	4610      	mov	r0, r2
 800ad2a:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800ad2c:	6a38      	ldr	r0, [r7, #32]
 800ad2e:	f7ff fb37 	bl	800a3a0 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800ad32:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800ad34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad36:	e012      	b.n	800ad5e <mqtt_message_received+0x366>
        goto out_disconnect;
 800ad38:	bf00      	nop
 800ad3a:	e00e      	b.n	800ad5a <mqtt_message_received+0x362>
        goto out_disconnect;
 800ad3c:	bf00      	nop
 800ad3e:	e00c      	b.n	800ad5a <mqtt_message_received+0x362>
        goto out_disconnect;
 800ad40:	bf00      	nop
 800ad42:	e00a      	b.n	800ad5a <mqtt_message_received+0x362>
        goto out_disconnect;
 800ad44:	bf00      	nop
 800ad46:	e008      	b.n	800ad5a <mqtt_message_received+0x362>
          goto out_disconnect;
 800ad48:	bf00      	nop
 800ad4a:	e006      	b.n	800ad5a <mqtt_message_received+0x362>
        goto out_disconnect;
 800ad4c:	bf00      	nop
 800ad4e:	e004      	b.n	800ad5a <mqtt_message_received+0x362>
      goto out_disconnect;
 800ad50:	bf00      	nop
 800ad52:	e002      	b.n	800ad5a <mqtt_message_received+0x362>
      goto out_disconnect;
 800ad54:	bf00      	nop
 800ad56:	e000      	b.n	800ad5a <mqtt_message_received+0x362>
            goto out_disconnect;
 800ad58:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800ad5a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	373c      	adds	r7, #60	; 0x3c
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd90      	pop	{r4, r7, pc}
 800ad66:	bf00      	nop

0800ad68 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800ad82:	e0bc      	b.n	800aefe <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d903      	bls.n	800ad92 <mqtt_parse_incoming+0x2a>
 800ad8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	da4d      	bge.n	800ae2e <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800ad92:	7dfa      	ldrb	r2, [r7, #23]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d206      	bcs.n	800adaa <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800ad9c:	7dfb      	ldrb	r3, [r7, #23]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4413      	add	r3, r2
 800ada2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ada6:	75bb      	strb	r3, [r7, #22]
 800ada8:	e012      	b.n	800add0 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800adaa:	8bfb      	ldrh	r3, [r7, #30]
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	83fa      	strh	r2, [r7, #30]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6838      	ldr	r0, [r7, #0]
 800adb4:	f002 fb88 	bl	800d4c8 <pbuf_get_at>
 800adb8:	4603      	mov	r3, r0
 800adba:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adc0:	1c59      	adds	r1, r3, #1
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	6691      	str	r1, [r2, #104]	; 0x68
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	7dba      	ldrb	r2, [r7, #22]
 800adcc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800add0:	7dfb      	ldrb	r3, [r7, #23]
 800add2:	3301      	adds	r3, #1
 800add4:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800add6:	7dfb      	ldrb	r3, [r7, #23]
 800add8:	2b01      	cmp	r3, #1
 800adda:	f240 8090 	bls.w	800aefe <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800adde:	7dbb      	ldrb	r3, [r7, #22]
 800ade0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
 800ade6:	1e9a      	subs	r2, r3, #2
 800ade8:	4613      	mov	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	1a9b      	subs	r3, r3, r2
 800adee:	fa01 f303 	lsl.w	r3, r1, r3
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800adf8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	db7e      	blt.n	800aefe <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10b      	bne.n	800ae1e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800ae06:	7df9      	ldrb	r1, [r7, #23]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff fdf3 	bl	800a9f8 <mqtt_message_received>
            client->msg_idx = 0;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	75fb      	strb	r3, [r7, #23]
 800ae1c:	e06f      	b.n	800aefe <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800ae1e:	7dfa      	ldrb	r2, [r7, #23]
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	441a      	add	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800ae2c:	e067      	b.n	800aefe <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	7dfa      	ldrb	r2, [r7, #23]
 800ae38:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800ae3c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae40:	fb01 f202 	mul.w	r2, r1, r2
 800ae44:	1a9b      	subs	r3, r3, r2
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	891a      	ldrh	r2, [r3, #8]
 800ae54:	8bfb      	ldrh	r3, [r7, #30]
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d905      	bls.n	800ae6e <mqtt_parse_incoming+0x106>
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	891a      	ldrh	r2, [r3, #8]
 800ae66:	8bfb      	ldrh	r3, [r7, #30]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	e001      	b.n	800ae72 <mqtt_parse_incoming+0x10a>
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800ae74:	8a7b      	ldrh	r3, [r7, #18]
 800ae76:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800ae7a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800ae7c:	8aba      	ldrh	r2, [r7, #20]
 800ae7e:	8a3b      	ldrh	r3, [r7, #16]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d901      	bls.n	800ae88 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800ae84:	8a3b      	ldrh	r3, [r7, #16]
 800ae86:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ae8e:	8a7b      	ldrh	r3, [r7, #18]
 800ae90:	18d1      	adds	r1, r2, r3
 800ae92:	8bfb      	ldrh	r3, [r7, #30]
 800ae94:	8aba      	ldrh	r2, [r7, #20]
 800ae96:	6838      	ldr	r0, [r7, #0]
 800ae98:	f002 fa4a 	bl	800d330 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aea0:	8abb      	ldrh	r3, [r7, #20]
 800aea2:	441a      	add	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800aea8:	8bfa      	ldrh	r2, [r7, #30]
 800aeaa:	8abb      	ldrh	r3, [r7, #20]
 800aeac:	4413      	add	r3, r2
 800aeae:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800aeb0:	8abb      	ldrh	r3, [r7, #20]
 800aeb2:	69ba      	ldr	r2, [r7, #24]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <mqtt_parse_incoming+0x15e>
 800aebe:	8aba      	ldrh	r2, [r7, #20]
 800aec0:	8a3b      	ldrh	r3, [r7, #16]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d11b      	bne.n	800aefe <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800aec6:	8a7a      	ldrh	r2, [r7, #18]
 800aec8:	8abb      	ldrh	r3, [r7, #20]
 800aeca:	4413      	add	r3, r2
 800aecc:	b29a      	uxth	r2, r3
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	7df9      	ldrb	r1, [r7, #23]
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7ff fd8c 	bl	800a9f8 <mqtt_message_received>
 800aee0:	4603      	mov	r3, r0
 800aee2:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800aee4:	89fb      	ldrh	r3, [r7, #14]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <mqtt_parse_incoming+0x186>
          return res;
 800aeea:	89fb      	ldrh	r3, [r7, #14]
 800aeec:	e00e      	b.n	800af0c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	891b      	ldrh	r3, [r3, #8]
 800af02:	8bfa      	ldrh	r2, [r7, #30]
 800af04:	429a      	cmp	r2, r3
 800af06:	f4ff af3d 	bcc.w	800ad84 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3720      	adds	r7, #32
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d106      	bne.n	800af3a <mqtt_tcp_recv_cb+0x26>
 800af2c:	4b24      	ldr	r3, [pc, #144]	; (800afc0 <mqtt_tcp_recv_cb+0xac>)
 800af2e:	f240 32a7 	movw	r2, #935	; 0x3a7
 800af32:	4924      	ldr	r1, [pc, #144]	; (800afc4 <mqtt_tcp_recv_cb+0xb0>)
 800af34:	4824      	ldr	r0, [pc, #144]	; (800afc8 <mqtt_tcp_recv_cb+0xb4>)
 800af36:	f00c f823 	bl	8016f80 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	429a      	cmp	r2, r3
 800af42:	d006      	beq.n	800af52 <mqtt_tcp_recv_cb+0x3e>
 800af44:	4b1e      	ldr	r3, [pc, #120]	; (800afc0 <mqtt_tcp_recv_cb+0xac>)
 800af46:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800af4a:	4920      	ldr	r1, [pc, #128]	; (800afcc <mqtt_tcp_recv_cb+0xb8>)
 800af4c:	481e      	ldr	r0, [pc, #120]	; (800afc8 <mqtt_tcp_recv_cb+0xb4>)
 800af4e:	f00c f817 	bl	8016f80 <iprintf>

  if (p == NULL) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d105      	bne.n	800af64 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800af58:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af5c:	6978      	ldr	r0, [r7, #20]
 800af5e:	f7ff fbfb 	bl	800a758 <mqtt_close>
 800af62:	e027      	b.n	800afb4 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800af64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d005      	beq.n	800af78 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 ffeb 	bl	800cf48 <pbuf_free>
      return err;
 800af72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af76:	e01e      	b.n	800afb6 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	891b      	ldrh	r3, [r3, #8]
 800af7c:	4619      	mov	r1, r3
 800af7e:	68b8      	ldr	r0, [r7, #8]
 800af80:	f002 fed4 	bl	800dd2c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	6978      	ldr	r0, [r7, #20]
 800af88:	f7ff feee 	bl	800ad68 <mqtt_parse_incoming>
 800af8c:	4603      	mov	r3, r0
 800af8e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f001 ffd9 	bl	800cf48 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800af96:	8a7b      	ldrh	r3, [r7, #18]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d004      	beq.n	800afa6 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800af9c:	8a7b      	ldrh	r3, [r7, #18]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6978      	ldr	r0, [r7, #20]
 800afa2:	f7ff fbd9 	bl	800a758 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	885b      	ldrh	r3, [r3, #2]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d002      	beq.n	800afb4 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2200      	movs	r2, #0
 800afb2:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	08017cc8 	.word	0x08017cc8
 800afc4:	08017f68 	.word	0x08017f68
 800afc8:	08017d40 	.word	0x08017d40
 800afcc:	08017f8c 	.word	0x08017f8c

0800afd0 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	4613      	mov	r3, r2
 800afdc:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	7a9b      	ldrb	r3, [r3, #10]
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d127      	bne.n	800b03a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	2200      	movs	r2, #0
 800afee:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2200      	movs	r2, #0
 800aff4:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800aff6:	e00d      	b.n	800b014 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d006      	beq.n	800b00e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	6892      	ldr	r2, [r2, #8]
 800b008:	2100      	movs	r1, #0
 800b00a:	4610      	mov	r0, r2
 800b00c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800b00e:	6938      	ldr	r0, [r7, #16]
 800b010:	f7ff f9c6 	bl	800a3a0 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	3318      	adds	r3, #24
 800b018:	2100      	movs	r1, #0
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff f9d0 	bl	800a3c0 <mqtt_take_request>
 800b020:	6138      	str	r0, [r7, #16]
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1e7      	bne.n	800aff8 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	4619      	mov	r1, r3
 800b034:	4610      	mov	r0, r2
 800b036:	f7ff f8ff 	bl	800a238 <mqtt_output_send>
  }
  return ERR_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	460b      	mov	r3, r1
 800b04e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d106      	bne.n	800b068 <mqtt_tcp_err_cb+0x24>
 800b05a:	4b09      	ldr	r3, [pc, #36]	; (800b080 <mqtt_tcp_err_cb+0x3c>)
 800b05c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800b060:	4908      	ldr	r1, [pc, #32]	; (800b084 <mqtt_tcp_err_cb+0x40>)
 800b062:	4809      	ldr	r0, [pc, #36]	; (800b088 <mqtt_tcp_err_cb+0x44>)
 800b064:	f00b ff8c 	bl	8016f80 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800b06e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7ff fb70 	bl	800a758 <mqtt_close>
}
 800b078:	bf00      	nop
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	08017cc8 	.word	0x08017cc8
 800b084:	08017fb4 	.word	0x08017fb4
 800b088:	08017d40 	.word	0x08017d40

0800b08c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	7a9b      	ldrb	r3, [r3, #10]
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d105      	bne.n	800b0ae <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	33ec      	adds	r3, #236	; 0xec
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff f8c5 	bl	800a238 <mqtt_output_send>
  }
  return ERR_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800b0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800b0d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0d6:	e025      	b.n	800b124 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800b0de:	4913      	ldr	r1, [pc, #76]	; (800b12c <mqtt_tcp_connect_cb+0x74>)
 800b0e0:	68b8      	ldr	r0, [r7, #8]
 800b0e2:	f003 fe11 	bl	800ed08 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800b0e6:	4912      	ldr	r1, [pc, #72]	; (800b130 <mqtt_tcp_connect_cb+0x78>)
 800b0e8:	68b8      	ldr	r0, [r7, #8]
 800b0ea:	f003 fe2f 	bl	800ed4c <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	4910      	ldr	r1, [pc, #64]	; (800b134 <mqtt_tcp_connect_cb+0x7c>)
 800b0f2:	68b8      	ldr	r0, [r7, #8]
 800b0f4:	f003 fe6e 	bl	800edd4 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	490d      	ldr	r1, [pc, #52]	; (800b138 <mqtt_tcp_connect_cb+0x80>)
 800b102:	f241 3088 	movw	r0, #5000	; 0x1388
 800b106:	f008 fb59 	bl	80137bc <sys_timeout>
  client->cyclic_tick = 0;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2200      	movs	r2, #0
 800b10e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	4619      	mov	r1, r3
 800b11c:	4610      	mov	r0, r2
 800b11e:	f7ff f88b 	bl	800a238 <mqtt_output_send>

  return ERR_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	0800af15 	.word	0x0800af15
 800b130:	0800afd1 	.word	0x0800afd1
 800b134:	0800b08d 	.word	0x0800b08d
 800b138:	0800a819 	.word	0x0800a819

0800b13c <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800b140:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800b144:	2001      	movs	r0, #1
 800b146:	f000 ff8d 	bl	800c064 <mem_calloc>
 800b14a:	4603      	mov	r3, r0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08c      	sub	sp, #48	; 0x30
 800b154:	af02      	add	r7, sp, #8
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	4613      	mov	r3, r2
 800b15e:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800b160:	230a      	movs	r3, #10
 800b162:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b16a:	2300      	movs	r3, #0
 800b16c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b170:	2300      	movs	r3, #0
 800b172:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	83fb      	strh	r3, [r7, #30]
 800b17a:	2300      	movs	r3, #0
 800b17c:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <mqtt_client_connect+0x42>
 800b184:	4b9e      	ldr	r3, [pc, #632]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b186:	f240 520f 	movw	r2, #1295	; 0x50f
 800b18a:	499e      	ldr	r1, [pc, #632]	; (800b404 <mqtt_client_connect+0x2b4>)
 800b18c:	489e      	ldr	r0, [pc, #632]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b18e:	f00b fef7 	bl	8016f80 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <mqtt_client_connect+0x56>
 800b198:	4b99      	ldr	r3, [pc, #612]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b19a:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800b19e:	499b      	ldr	r1, [pc, #620]	; (800b40c <mqtt_client_connect+0x2bc>)
 800b1a0:	4899      	ldr	r0, [pc, #612]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b1a2:	f00b feed 	bl	8016f80 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d106      	bne.n	800b1ba <mqtt_client_connect+0x6a>
 800b1ac:	4b94      	ldr	r3, [pc, #592]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b1ae:	f240 5211 	movw	r2, #1297	; 0x511
 800b1b2:	4997      	ldr	r1, [pc, #604]	; (800b410 <mqtt_client_connect+0x2c0>)
 800b1b4:	4894      	ldr	r0, [pc, #592]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b1b6:	f00b fee3 	bl	8016f80 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800b1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d106      	bne.n	800b1d0 <mqtt_client_connect+0x80>
 800b1c2:	4b8f      	ldr	r3, [pc, #572]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b1c4:	f240 5212 	movw	r2, #1298	; 0x512
 800b1c8:	4992      	ldr	r1, [pc, #584]	; (800b414 <mqtt_client_connect+0x2c4>)
 800b1ca:	488f      	ldr	r0, [pc, #572]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b1cc:	f00b fed8 	bl	8016f80 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	7a9b      	ldrb	r3, [r3, #10]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800b1d8:	f06f 0309 	mvn.w	r3, #9
 800b1dc:	e21f      	b.n	800b61e <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800b1de:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f00b fde5 	bl	8016db4 <memset>
  client->connect_arg = arg;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ee:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800b1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f8:	899a      	ldrh	r2, [r3, #12]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	331c      	adds	r3, #28
 800b202:	2104      	movs	r1, #4
 800b204:	4618      	mov	r0, r3
 800b206:	f7ff f9a9 	bl	800a55c <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800b20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d073      	beq.n	800b2fa <mqtt_client_connect+0x1aa>
 800b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d06f      	beq.n	800b2fa <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800b21a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b21e:	f043 0304 	orr.w	r3, r3, #4
 800b222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800b226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b228:	7e1b      	ldrb	r3, [r3, #24]
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	b25b      	sxtb	r3, r3
 800b22e:	f003 0318 	and.w	r3, r3, #24
 800b232:	b25a      	sxtb	r2, r3
 800b234:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b238:	4313      	orrs	r3, r2
 800b23a:	b25b      	sxtb	r3, r3
 800b23c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800b240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b242:	7e5b      	ldrb	r3, [r3, #25]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d005      	beq.n	800b254 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800b248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b24c:	f043 0320 	orr.w	r3, r3, #32
 800b250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800b254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	4618      	mov	r0, r3
 800b25a:	f7f5 f809 	bl	8000270 <strlen>
 800b25e:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	2bff      	cmp	r3, #255	; 0xff
 800b264:	d909      	bls.n	800b27a <mqtt_client_connect+0x12a>
 800b266:	4b66      	ldr	r3, [pc, #408]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b268:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800b26c:	496a      	ldr	r1, [pc, #424]	; (800b418 <mqtt_client_connect+0x2c8>)
 800b26e:	4866      	ldr	r0, [pc, #408]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b270:	f00b fe86 	bl	8016f80 <iprintf>
 800b274:	f06f 0305 	mvn.w	r3, #5
 800b278:	e1d1      	b.n	800b61e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d109      	bne.n	800b294 <mqtt_client_connect+0x144>
 800b280:	4b5f      	ldr	r3, [pc, #380]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b282:	f240 5229 	movw	r2, #1321	; 0x529
 800b286:	4965      	ldr	r1, [pc, #404]	; (800b41c <mqtt_client_connect+0x2cc>)
 800b288:	485f      	ldr	r0, [pc, #380]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b28a:	f00b fe79 	bl	8016f80 <iprintf>
 800b28e:	f06f 0305 	mvn.w	r3, #5
 800b292:	e1c4      	b.n	800b61e <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800b29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7f4 ffe6 	bl	8000270 <strlen>
 800b2a4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	2bff      	cmp	r3, #255	; 0xff
 800b2aa:	d909      	bls.n	800b2c0 <mqtt_client_connect+0x170>
 800b2ac:	4b54      	ldr	r3, [pc, #336]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b2ae:	f240 522c 	movw	r2, #1324	; 0x52c
 800b2b2:	495b      	ldr	r1, [pc, #364]	; (800b420 <mqtt_client_connect+0x2d0>)
 800b2b4:	4854      	ldr	r0, [pc, #336]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b2b6:	f00b fe63 	bl	8016f80 <iprintf>
 800b2ba:	f06f 0305 	mvn.w	r3, #5
 800b2be:	e1ae      	b.n	800b61e <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800b2c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2c8:	1c9a      	adds	r2, r3, #2
 800b2ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b2ce:	4413      	add	r3, r2
 800b2d0:	1c9a      	adds	r2, r3, #2
 800b2d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b2d6:	4413      	add	r3, r2
 800b2d8:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2e0:	d309      	bcc.n	800b2f6 <mqtt_client_connect+0x1a6>
 800b2e2:	4b47      	ldr	r3, [pc, #284]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b2e4:	f240 522f 	movw	r2, #1327	; 0x52f
 800b2e8:	494e      	ldr	r1, [pc, #312]	; (800b424 <mqtt_client_connect+0x2d4>)
 800b2ea:	4847      	ldr	r0, [pc, #284]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b2ec:	f00b fe48 	bl	8016f80 <iprintf>
 800b2f0:	f06f 0305 	mvn.w	r3, #5
 800b2f4:	e193      	b.n	800b61e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800b2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d03d      	beq.n	800b37e <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800b302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800b30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	4618      	mov	r0, r3
 800b314:	f7f4 ffac 	bl	8000270 <strlen>
 800b318:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b320:	d309      	bcc.n	800b336 <mqtt_client_connect+0x1e6>
 800b322:	4b37      	ldr	r3, [pc, #220]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b324:	f240 5235 	movw	r2, #1333	; 0x535
 800b328:	493f      	ldr	r1, [pc, #252]	; (800b428 <mqtt_client_connect+0x2d8>)
 800b32a:	4837      	ldr	r0, [pc, #220]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b32c:	f00b fe28 	bl	8016f80 <iprintf>
 800b330:	f06f 0305 	mvn.w	r3, #5
 800b334:	e173      	b.n	800b61e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d109      	bne.n	800b350 <mqtt_client_connect+0x200>
 800b33c:	4b30      	ldr	r3, [pc, #192]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b33e:	f240 5236 	movw	r2, #1334	; 0x536
 800b342:	493a      	ldr	r1, [pc, #232]	; (800b42c <mqtt_client_connect+0x2dc>)
 800b344:	4830      	ldr	r0, [pc, #192]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b346:	f00b fe1b 	bl	8016f80 <iprintf>
 800b34a:	f06f 0305 	mvn.w	r3, #5
 800b34e:	e166      	b.n	800b61e <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800b354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b356:	1c9a      	adds	r2, r3, #2
 800b358:	8bfb      	ldrh	r3, [r7, #30]
 800b35a:	4413      	add	r3, r2
 800b35c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b364:	d309      	bcc.n	800b37a <mqtt_client_connect+0x22a>
 800b366:	4b26      	ldr	r3, [pc, #152]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b368:	f240 5239 	movw	r2, #1337	; 0x539
 800b36c:	492d      	ldr	r1, [pc, #180]	; (800b424 <mqtt_client_connect+0x2d4>)
 800b36e:	4826      	ldr	r0, [pc, #152]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b370:	f00b fe06 	bl	8016f80 <iprintf>
 800b374:	f06f 0305 	mvn.w	r3, #5
 800b378:	e151      	b.n	800b61e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800b37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d05a      	beq.n	800b43c <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800b386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800b392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	4618      	mov	r0, r3
 800b398:	f7f4 ff6a 	bl	8000270 <strlen>
 800b39c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a4:	d309      	bcc.n	800b3ba <mqtt_client_connect+0x26a>
 800b3a6:	4b16      	ldr	r3, [pc, #88]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b3a8:	f240 523f 	movw	r2, #1343	; 0x53f
 800b3ac:	4920      	ldr	r1, [pc, #128]	; (800b430 <mqtt_client_connect+0x2e0>)
 800b3ae:	4816      	ldr	r0, [pc, #88]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b3b0:	f00b fde6 	bl	8016f80 <iprintf>
 800b3b4:	f06f 0305 	mvn.w	r3, #5
 800b3b8:	e131      	b.n	800b61e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d109      	bne.n	800b3d4 <mqtt_client_connect+0x284>
 800b3c0:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b3c2:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800b3c6:	491b      	ldr	r1, [pc, #108]	; (800b434 <mqtt_client_connect+0x2e4>)
 800b3c8:	480f      	ldr	r0, [pc, #60]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b3ca:	f00b fdd9 	bl	8016f80 <iprintf>
 800b3ce:	f06f 0305 	mvn.w	r3, #5
 800b3d2:	e124      	b.n	800b61e <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800b3d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3da:	1c9a      	adds	r2, r3, #2
 800b3dc:	8bbb      	ldrh	r3, [r7, #28]
 800b3de:	4413      	add	r3, r2
 800b3e0:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e8:	d326      	bcc.n	800b438 <mqtt_client_connect+0x2e8>
 800b3ea:	4b05      	ldr	r3, [pc, #20]	; (800b400 <mqtt_client_connect+0x2b0>)
 800b3ec:	f240 5243 	movw	r2, #1347	; 0x543
 800b3f0:	490c      	ldr	r1, [pc, #48]	; (800b424 <mqtt_client_connect+0x2d4>)
 800b3f2:	4805      	ldr	r0, [pc, #20]	; (800b408 <mqtt_client_connect+0x2b8>)
 800b3f4:	f00b fdc4 	bl	8016f80 <iprintf>
 800b3f8:	f06f 0305 	mvn.w	r3, #5
 800b3fc:	e10f      	b.n	800b61e <mqtt_client_connect+0x4ce>
 800b3fe:	bf00      	nop
 800b400:	08017cc8 	.word	0x08017cc8
 800b404:	08018148 	.word	0x08018148
 800b408:	08017d40 	.word	0x08017d40
 800b40c:	0801816c 	.word	0x0801816c
 800b410:	08018194 	.word	0x08018194
 800b414:	080181c0 	.word	0x080181c0
 800b418:	080181f4 	.word	0x080181f4
 800b41c:	08018234 	.word	0x08018234
 800b420:	08018274 	.word	0x08018274
 800b424:	080182b0 	.word	0x080182b0
 800b428:	080182e0 	.word	0x080182e0
 800b42c:	08018320 	.word	0x08018320
 800b430:	08018364 	.word	0x08018364
 800b434:	080183a4 	.word	0x080183a4
    remaining_length = (u16_t)len;
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800b43c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b440:	f043 0302 	orr.w	r3, r3, #2
 800b444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800b448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7f4 ff0f 	bl	8000270 <strlen>
 800b452:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b45a:	d309      	bcc.n	800b470 <mqtt_client_connect+0x320>
 800b45c:	4b72      	ldr	r3, [pc, #456]	; (800b628 <mqtt_client_connect+0x4d8>)
 800b45e:	f240 524b 	movw	r2, #1355	; 0x54b
 800b462:	4972      	ldr	r1, [pc, #456]	; (800b62c <mqtt_client_connect+0x4dc>)
 800b464:	4872      	ldr	r0, [pc, #456]	; (800b630 <mqtt_client_connect+0x4e0>)
 800b466:	f00b fd8b 	bl	8016f80 <iprintf>
 800b46a:	f06f 0305 	mvn.w	r3, #5
 800b46e:	e0d6      	b.n	800b61e <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800b474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b476:	1c9a      	adds	r2, r3, #2
 800b478:	8afb      	ldrh	r3, [r7, #22]
 800b47a:	4413      	add	r3, r2
 800b47c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b484:	d309      	bcc.n	800b49a <mqtt_client_connect+0x34a>
 800b486:	4b68      	ldr	r3, [pc, #416]	; (800b628 <mqtt_client_connect+0x4d8>)
 800b488:	f240 524e 	movw	r2, #1358	; 0x54e
 800b48c:	4969      	ldr	r1, [pc, #420]	; (800b634 <mqtt_client_connect+0x4e4>)
 800b48e:	4868      	ldr	r0, [pc, #416]	; (800b630 <mqtt_client_connect+0x4e0>)
 800b490:	f00b fd76 	bl	8016f80 <iprintf>
 800b494:	f06f 0305 	mvn.w	r3, #5
 800b498:	e0c1      	b.n	800b61e <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	33ec      	adds	r3, #236	; 0xec
 800b4a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff f924 	bl	800a6f4 <mqtt_output_check_space>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d102      	bne.n	800b4b8 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800b4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b6:	e0b2      	b.n	800b61e <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	f003 fc07 	bl	800eccc <tcp_new_ip_type>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d102      	bne.n	800b4d2 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800b4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d0:	e0a5      	b.n	800b61e <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	68f9      	ldr	r1, [r7, #12]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f003 fc05 	bl	800ece8 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4954      	ldr	r1, [pc, #336]	; (800b638 <mqtt_client_connect+0x4e8>)
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f002 fb2e 	bl	800db48 <tcp_bind>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800b4f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f040 8084 	bne.w	800b604 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	68d8      	ldr	r0, [r3, #12]
 800b500:	88fa      	ldrh	r2, [r7, #6]
 800b502:	4b4e      	ldr	r3, [pc, #312]	; (800b63c <mqtt_client_connect+0x4ec>)
 800b504:	68b9      	ldr	r1, [r7, #8]
 800b506:	f002 fca7 	bl	800de58 <tcp_connect>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800b510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b514:	2b00      	cmp	r3, #0
 800b516:	d177      	bne.n	800b608 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	4948      	ldr	r1, [pc, #288]	; (800b640 <mqtt_client_connect+0x4f0>)
 800b51e:	4618      	mov	r0, r3
 800b520:	f003 fc36 	bl	800ed90 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2201      	movs	r2, #1
 800b528:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b532:	9301      	str	r3, [sp, #4]
 800b534:	2300      	movs	r3, #0
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	2300      	movs	r3, #0
 800b53a:	2200      	movs	r2, #0
 800b53c:	2101      	movs	r1, #1
 800b53e:	f7ff f88e 	bl	800a65e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	33ec      	adds	r3, #236	; 0xec
 800b546:	2204      	movs	r2, #4
 800b548:	493e      	ldr	r1, [pc, #248]	; (800b644 <mqtt_client_connect+0x4f4>)
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff f85b 	bl	800a606 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	33ec      	adds	r3, #236	; 0xec
 800b554:	2104      	movs	r1, #4
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff f82e 	bl	800a5b8 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	33ec      	adds	r3, #236	; 0xec
 800b560:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b564:	4611      	mov	r1, r2
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff f826 	bl	800a5b8 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b574:	899b      	ldrh	r3, [r3, #12]
 800b576:	4619      	mov	r1, r3
 800b578:	4610      	mov	r0, r2
 800b57a:	f7ff f82c 	bl	800a5d6 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	8afa      	ldrh	r2, [r7, #22]
 800b58a:	4619      	mov	r1, r3
 800b58c:	f7ff f83b 	bl	800a606 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800b590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d015      	beq.n	800b5c8 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b5aa:	b292      	uxth	r2, r2
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	f7ff f82a 	bl	800a606 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b5c0:	b292      	uxth	r2, r2
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	f7ff f81f 	bl	800a606 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800b5c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	da08      	bge.n	800b5e2 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	8bfa      	ldrh	r2, [r7, #30]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f7ff f812 	bl	800a606 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800b5e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d008      	beq.n	800b600 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	8bba      	ldrh	r2, [r7, #28]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	f7ff f803 	bl	800a606 <mqtt_output_append_string>
  }
  return ERR_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	e00c      	b.n	800b61e <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800b604:	bf00      	nop
 800b606:	e000      	b.n	800b60a <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800b608:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	4618      	mov	r0, r3
 800b610:	f002 fa8e 	bl	800db30 <tcp_abort>
  client->conn = NULL;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	60da      	str	r2, [r3, #12]
  return err;
 800b61a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3728      	adds	r7, #40	; 0x28
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	08017cc8 	.word	0x08017cc8
 800b62c:	080183e8 	.word	0x080183e8
 800b630:	08017d40 	.word	0x08017d40
 800b634:	080182b0 	.word	0x080182b0
 800b638:	0801af60 	.word	0x0801af60
 800b63c:	0800b0b9 	.word	0x0800b0b9
 800b640:	0800b045 	.word	0x0800b045
 800b644:	08018424 	.word	0x08018424

0800b648 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <mqtt_disconnect+0x1c>
 800b656:	4b0b      	ldr	r3, [pc, #44]	; (800b684 <mqtt_disconnect+0x3c>)
 800b658:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800b65c:	490a      	ldr	r1, [pc, #40]	; (800b688 <mqtt_disconnect+0x40>)
 800b65e:	480b      	ldr	r0, [pc, #44]	; (800b68c <mqtt_disconnect+0x44>)
 800b660:	f00b fc8e 	bl	8016f80 <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	7a9b      	ldrb	r3, [r3, #10]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d006      	beq.n	800b67a <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 800b672:	2100      	movs	r1, #0
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff f86f 	bl	800a758 <mqtt_close>
  }
}
 800b67a:	bf00      	nop
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	08017cc8 	.word	0x08017cc8
 800b688:	0801842c 	.word	0x0801842c
 800b68c:	08017d40 	.word	0x08017d40

0800b690 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	021b      	lsls	r3, r3, #8
 800b69e:	b21a      	sxth	r2, r3
 800b6a0:	88fb      	ldrh	r3, [r7, #6]
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	b21b      	sxth	r3, r3
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	b21b      	sxth	r3, r3
 800b6ac:	b29b      	uxth	r3, r3
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bc80      	pop	{r7}
 800b6b6:	4770      	bx	lr

0800b6b8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	061a      	lsls	r2, r3, #24
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	021b      	lsls	r3, r3, #8
 800b6c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	0a1b      	lsrs	r3, r3, #8
 800b6d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b6d6:	431a      	orrs	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	0e1b      	lsrs	r3, r3, #24
 800b6dc:	4313      	orrs	r3, r2
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bc80      	pop	{r7}
 800b6e6:	4770      	bx	lr

0800b6e8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b089      	sub	sp, #36	; 0x24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00d      	beq.n	800b728 <lwip_standard_chksum+0x40>
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dd0a      	ble.n	800b728 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b712:	69fa      	ldr	r2, [r7, #28]
 800b714:	1c53      	adds	r3, r2, #1
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	f107 030e 	add.w	r3, r7, #14
 800b71c:	3301      	adds	r3, #1
 800b71e:	7812      	ldrb	r2, [r2, #0]
 800b720:	701a      	strb	r2, [r3, #0]
    len--;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	3b01      	subs	r3, #1
 800b726:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b72c:	e00a      	b.n	800b744 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	1c9a      	adds	r2, r3, #2
 800b732:	61ba      	str	r2, [r7, #24]
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	4413      	add	r3, r2
 800b73c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	3b02      	subs	r3, #2
 800b742:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b01      	cmp	r3, #1
 800b748:	dcf1      	bgt.n	800b72e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dd04      	ble.n	800b75a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b750:	f107 030e 	add.w	r3, r7, #14
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b75a:	89fb      	ldrh	r3, [r7, #14]
 800b75c:	461a      	mov	r2, r3
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	4413      	add	r3, r2
 800b762:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	0c1a      	lsrs	r2, r3, #16
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	4413      	add	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	0c1a      	lsrs	r2, r3, #16
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	b29b      	uxth	r3, r3
 800b778:	4413      	add	r3, r2
 800b77a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d007      	beq.n	800b792 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	b29a      	uxth	r2, r3
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	0a1b      	lsrs	r3, r3, #8
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	b29b      	uxth	r3, r3
}
 800b796:	4618      	mov	r0, r3
 800b798:	3724      	adds	r7, #36	; 0x24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bc80      	pop	{r7}
 800b79e:	4770      	bx	lr

0800b7a0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b7ac:	887b      	ldrh	r3, [r7, #2]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff ff99 	bl	800b6e8 <lwip_standard_chksum>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	43db      	mvns	r3, r3
 800b7ba:	b29b      	uxth	r3, r3
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	613b      	str	r3, [r7, #16]
 800b7d8:	e02b      	b.n	800b832 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	895b      	ldrh	r3, [r3, #10]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f7ff ff7f 	bl	800b6e8 <lwip_standard_chksum>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	0c1a      	lsrs	r2, r3, #16
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	895b      	ldrh	r3, [r3, #10]
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	b29b      	uxth	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00e      	beq.n	800b82c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	bf0c      	ite	eq
 800b814:	2301      	moveq	r3, #1
 800b816:	2300      	movne	r3, #0
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	021b      	lsls	r3, r3, #8
 800b820:	b29a      	uxth	r2, r3
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	0a1b      	lsrs	r3, r3, #8
 800b826:	b2db      	uxtb	r3, r3
 800b828:	4313      	orrs	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1d0      	bne.n	800b7da <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d007      	beq.n	800b84e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	021b      	lsls	r3, r3, #8
 800b842:	b29a      	uxth	r2, r3
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	0a1b      	lsrs	r3, r3, #8
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	4313      	orrs	r3, r2
 800b84c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	b29b      	uxth	r3, r3
 800b852:	43db      	mvns	r3, r3
 800b854:	b29b      	uxth	r3, r3
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b868:	f00a fda6 	bl	80163b8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b86c:	f000 f8d0 	bl	800ba10 <mem_init>
  memp_init();
 800b870:	f000 fc50 	bl	800c114 <memp_init>
  pbuf_init();
  netif_init();
 800b874:	f000 fd5c 	bl	800c330 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b878:	f008 f872 	bl	8013960 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b87c:	f001 fe5e 	bl	800d53c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b880:	f007 ff7a 	bl	8013778 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b896:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <ptr_to_mem+0x1c>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	88fb      	ldrh	r3, [r7, #6]
 800b89c:	4413      	add	r3, r2
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bc80      	pop	{r7}
 800b8a6:	4770      	bx	lr
 800b8a8:	20008d50 	.word	0x20008d50

0800b8ac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b8b4:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <mem_to_ptr+0x1c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	b29b      	uxth	r3, r3
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bc80      	pop	{r7}
 800b8c6:	4770      	bx	lr
 800b8c8:	20008d50 	.word	0x20008d50

0800b8cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b8d4:	4b45      	ldr	r3, [pc, #276]	; (800b9ec <plug_holes+0x120>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d206      	bcs.n	800b8ec <plug_holes+0x20>
 800b8de:	4b44      	ldr	r3, [pc, #272]	; (800b9f0 <plug_holes+0x124>)
 800b8e0:	f240 12df 	movw	r2, #479	; 0x1df
 800b8e4:	4943      	ldr	r1, [pc, #268]	; (800b9f4 <plug_holes+0x128>)
 800b8e6:	4844      	ldr	r0, [pc, #272]	; (800b9f8 <plug_holes+0x12c>)
 800b8e8:	f00b fb4a 	bl	8016f80 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b8ec:	4b43      	ldr	r3, [pc, #268]	; (800b9fc <plug_holes+0x130>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d306      	bcc.n	800b904 <plug_holes+0x38>
 800b8f6:	4b3e      	ldr	r3, [pc, #248]	; (800b9f0 <plug_holes+0x124>)
 800b8f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b8fc:	4940      	ldr	r1, [pc, #256]	; (800ba00 <plug_holes+0x134>)
 800b8fe:	483e      	ldr	r0, [pc, #248]	; (800b9f8 <plug_holes+0x12c>)
 800b900:	f00b fb3e 	bl	8016f80 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	791b      	ldrb	r3, [r3, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d006      	beq.n	800b91a <plug_holes+0x4e>
 800b90c:	4b38      	ldr	r3, [pc, #224]	; (800b9f0 <plug_holes+0x124>)
 800b90e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b912:	493c      	ldr	r1, [pc, #240]	; (800ba04 <plug_holes+0x138>)
 800b914:	4838      	ldr	r0, [pc, #224]	; (800b9f8 <plug_holes+0x12c>)
 800b916:	f00b fb33 	bl	8016f80 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b922:	d906      	bls.n	800b932 <plug_holes+0x66>
 800b924:	4b32      	ldr	r3, [pc, #200]	; (800b9f0 <plug_holes+0x124>)
 800b926:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b92a:	4937      	ldr	r1, [pc, #220]	; (800ba08 <plug_holes+0x13c>)
 800b92c:	4832      	ldr	r0, [pc, #200]	; (800b9f8 <plug_holes+0x12c>)
 800b92e:	f00b fb27 	bl	8016f80 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff ffa8 	bl	800b88c <ptr_to_mem>
 800b93c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	429a      	cmp	r2, r3
 800b944:	d024      	beq.n	800b990 <plug_holes+0xc4>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	791b      	ldrb	r3, [r3, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d120      	bne.n	800b990 <plug_holes+0xc4>
 800b94e:	4b2b      	ldr	r3, [pc, #172]	; (800b9fc <plug_holes+0x130>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	429a      	cmp	r2, r3
 800b956:	d01b      	beq.n	800b990 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b958:	4b2c      	ldr	r3, [pc, #176]	; (800ba0c <plug_holes+0x140>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d102      	bne.n	800b968 <plug_holes+0x9c>
      lfree = mem;
 800b962:	4a2a      	ldr	r2, [pc, #168]	; (800ba0c <plug_holes+0x140>)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	881a      	ldrh	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b978:	d00a      	beq.n	800b990 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff ff84 	bl	800b88c <ptr_to_mem>
 800b984:	4604      	mov	r4, r0
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff ff90 	bl	800b8ac <mem_to_ptr>
 800b98c:	4603      	mov	r3, r0
 800b98e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	885b      	ldrh	r3, [r3, #2]
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff ff79 	bl	800b88c <ptr_to_mem>
 800b99a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d01f      	beq.n	800b9e4 <plug_holes+0x118>
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	791b      	ldrb	r3, [r3, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d11b      	bne.n	800b9e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b9ac:	4b17      	ldr	r3, [pc, #92]	; (800ba0c <plug_holes+0x140>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d102      	bne.n	800b9bc <plug_holes+0xf0>
      lfree = pmem;
 800b9b6:	4a15      	ldr	r2, [pc, #84]	; (800ba0c <plug_holes+0x140>)
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	881a      	ldrh	r2, [r3, #0]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9cc:	d00a      	beq.n	800b9e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff ff5a 	bl	800b88c <ptr_to_mem>
 800b9d8:	4604      	mov	r4, r0
 800b9da:	68b8      	ldr	r0, [r7, #8]
 800b9dc:	f7ff ff66 	bl	800b8ac <mem_to_ptr>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b9e4:	bf00      	nop
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd90      	pop	{r4, r7, pc}
 800b9ec:	20008d50 	.word	0x20008d50
 800b9f0:	08018478 	.word	0x08018478
 800b9f4:	080184a8 	.word	0x080184a8
 800b9f8:	080184c0 	.word	0x080184c0
 800b9fc:	20008d54 	.word	0x20008d54
 800ba00:	080184e8 	.word	0x080184e8
 800ba04:	08018504 	.word	0x08018504
 800ba08:	08018520 	.word	0x08018520
 800ba0c:	20008d5c 	.word	0x20008d5c

0800ba10 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ba16:	4b1d      	ldr	r3, [pc, #116]	; (800ba8c <mem_init+0x7c>)
 800ba18:	4a1d      	ldr	r2, [pc, #116]	; (800ba90 <mem_init+0x80>)
 800ba1a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ba1c:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <mem_init+0x7c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba28:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ba36:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ba3a:	f7ff ff27 	bl	800b88c <ptr_to_mem>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4a14      	ldr	r2, [pc, #80]	; (800ba94 <mem_init+0x84>)
 800ba42:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ba44:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <mem_init+0x84>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ba4c:	4b11      	ldr	r3, [pc, #68]	; (800ba94 <mem_init+0x84>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba54:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ba56:	4b0f      	ldr	r3, [pc, #60]	; (800ba94 <mem_init+0x84>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba5e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <mem_init+0x7c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a0c      	ldr	r2, [pc, #48]	; (800ba98 <mem_init+0x88>)
 800ba66:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ba68:	480c      	ldr	r0, [pc, #48]	; (800ba9c <mem_init+0x8c>)
 800ba6a:	f00a fcb3 	bl	80163d4 <sys_mutex_new>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d006      	beq.n	800ba82 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ba74:	4b0a      	ldr	r3, [pc, #40]	; (800baa0 <mem_init+0x90>)
 800ba76:	f240 221f 	movw	r2, #543	; 0x21f
 800ba7a:	490a      	ldr	r1, [pc, #40]	; (800baa4 <mem_init+0x94>)
 800ba7c:	480a      	ldr	r0, [pc, #40]	; (800baa8 <mem_init+0x98>)
 800ba7e:	f00b fa7f 	bl	8016f80 <iprintf>
  }
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20008d50 	.word	0x20008d50
 800ba90:	30044000 	.word	0x30044000
 800ba94:	20008d54 	.word	0x20008d54
 800ba98:	20008d5c 	.word	0x20008d5c
 800ba9c:	20008d58 	.word	0x20008d58
 800baa0:	08018478 	.word	0x08018478
 800baa4:	0801854c 	.word	0x0801854c
 800baa8:	080184c0 	.word	0x080184c0

0800baac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff fef9 	bl	800b8ac <mem_to_ptr>
 800baba:	4603      	mov	r3, r0
 800babc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff fee2 	bl	800b88c <ptr_to_mem>
 800bac8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	885b      	ldrh	r3, [r3, #2]
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff fedc 	bl	800b88c <ptr_to_mem>
 800bad4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	881b      	ldrh	r3, [r3, #0]
 800bada:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bade:	d818      	bhi.n	800bb12 <mem_link_valid+0x66>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	885b      	ldrh	r3, [r3, #2]
 800bae4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bae8:	d813      	bhi.n	800bb12 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800baee:	8afa      	ldrh	r2, [r7, #22]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d004      	beq.n	800bafe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	8afa      	ldrh	r2, [r7, #22]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d109      	bne.n	800bb12 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bafe:	4b08      	ldr	r3, [pc, #32]	; (800bb20 <mem_link_valid+0x74>)
 800bb00:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d006      	beq.n	800bb16 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	885b      	ldrh	r3, [r3, #2]
 800bb0c:	8afa      	ldrh	r2, [r7, #22]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d001      	beq.n	800bb16 <mem_link_valid+0x6a>
    return 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e000      	b.n	800bb18 <mem_link_valid+0x6c>
  }
  return 1;
 800bb16:	2301      	movs	r3, #1
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	20008d54 	.word	0x20008d54

0800bb24 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d070      	beq.n	800bc14 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f003 0303 	and.w	r3, r3, #3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00d      	beq.n	800bb58 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bb3c:	4b37      	ldr	r3, [pc, #220]	; (800bc1c <mem_free+0xf8>)
 800bb3e:	f240 2273 	movw	r2, #627	; 0x273
 800bb42:	4937      	ldr	r1, [pc, #220]	; (800bc20 <mem_free+0xfc>)
 800bb44:	4837      	ldr	r0, [pc, #220]	; (800bc24 <mem_free+0x100>)
 800bb46:	f00b fa1b 	bl	8016f80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb4a:	f00a fca1 	bl	8016490 <sys_arch_protect>
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f00a fcab 	bl	80164ac <sys_arch_unprotect>
    return;
 800bb56:	e05e      	b.n	800bc16 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3b08      	subs	r3, #8
 800bb5c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bb5e:	4b32      	ldr	r3, [pc, #200]	; (800bc28 <mem_free+0x104>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d306      	bcc.n	800bb76 <mem_free+0x52>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f103 020c 	add.w	r2, r3, #12
 800bb6e:	4b2f      	ldr	r3, [pc, #188]	; (800bc2c <mem_free+0x108>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d90d      	bls.n	800bb92 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bb76:	4b29      	ldr	r3, [pc, #164]	; (800bc1c <mem_free+0xf8>)
 800bb78:	f240 227f 	movw	r2, #639	; 0x27f
 800bb7c:	492c      	ldr	r1, [pc, #176]	; (800bc30 <mem_free+0x10c>)
 800bb7e:	4829      	ldr	r0, [pc, #164]	; (800bc24 <mem_free+0x100>)
 800bb80:	f00b f9fe 	bl	8016f80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb84:	f00a fc84 	bl	8016490 <sys_arch_protect>
 800bb88:	6138      	str	r0, [r7, #16]
 800bb8a:	6938      	ldr	r0, [r7, #16]
 800bb8c:	f00a fc8e 	bl	80164ac <sys_arch_unprotect>
    return;
 800bb90:	e041      	b.n	800bc16 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bb92:	4828      	ldr	r0, [pc, #160]	; (800bc34 <mem_free+0x110>)
 800bb94:	f00a fc3a 	bl	801640c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	791b      	ldrb	r3, [r3, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d110      	bne.n	800bbc2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bba0:	4b1e      	ldr	r3, [pc, #120]	; (800bc1c <mem_free+0xf8>)
 800bba2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bba6:	4924      	ldr	r1, [pc, #144]	; (800bc38 <mem_free+0x114>)
 800bba8:	481e      	ldr	r0, [pc, #120]	; (800bc24 <mem_free+0x100>)
 800bbaa:	f00b f9e9 	bl	8016f80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bbae:	4821      	ldr	r0, [pc, #132]	; (800bc34 <mem_free+0x110>)
 800bbb0:	f00a fc3b 	bl	801642a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbb4:	f00a fc6c 	bl	8016490 <sys_arch_protect>
 800bbb8:	6178      	str	r0, [r7, #20]
 800bbba:	6978      	ldr	r0, [r7, #20]
 800bbbc:	f00a fc76 	bl	80164ac <sys_arch_unprotect>
    return;
 800bbc0:	e029      	b.n	800bc16 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bbc2:	69f8      	ldr	r0, [r7, #28]
 800bbc4:	f7ff ff72 	bl	800baac <mem_link_valid>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d110      	bne.n	800bbf0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bbce:	4b13      	ldr	r3, [pc, #76]	; (800bc1c <mem_free+0xf8>)
 800bbd0:	f240 2295 	movw	r2, #661	; 0x295
 800bbd4:	4919      	ldr	r1, [pc, #100]	; (800bc3c <mem_free+0x118>)
 800bbd6:	4813      	ldr	r0, [pc, #76]	; (800bc24 <mem_free+0x100>)
 800bbd8:	f00b f9d2 	bl	8016f80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bbdc:	4815      	ldr	r0, [pc, #84]	; (800bc34 <mem_free+0x110>)
 800bbde:	f00a fc24 	bl	801642a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbe2:	f00a fc55 	bl	8016490 <sys_arch_protect>
 800bbe6:	61b8      	str	r0, [r7, #24]
 800bbe8:	69b8      	ldr	r0, [r7, #24]
 800bbea:	f00a fc5f 	bl	80164ac <sys_arch_unprotect>
    return;
 800bbee:	e012      	b.n	800bc16 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bbf6:	4b12      	ldr	r3, [pc, #72]	; (800bc40 <mem_free+0x11c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	69fa      	ldr	r2, [r7, #28]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d202      	bcs.n	800bc06 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bc00:	4a0f      	ldr	r2, [pc, #60]	; (800bc40 <mem_free+0x11c>)
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bc06:	69f8      	ldr	r0, [r7, #28]
 800bc08:	f7ff fe60 	bl	800b8cc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc0c:	4809      	ldr	r0, [pc, #36]	; (800bc34 <mem_free+0x110>)
 800bc0e:	f00a fc0c 	bl	801642a <sys_mutex_unlock>
 800bc12:	e000      	b.n	800bc16 <mem_free+0xf2>
    return;
 800bc14:	bf00      	nop
}
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	08018478 	.word	0x08018478
 800bc20:	08018568 	.word	0x08018568
 800bc24:	080184c0 	.word	0x080184c0
 800bc28:	20008d50 	.word	0x20008d50
 800bc2c:	20008d54 	.word	0x20008d54
 800bc30:	0801858c 	.word	0x0801858c
 800bc34:	20008d58 	.word	0x20008d58
 800bc38:	080185a8 	.word	0x080185a8
 800bc3c:	080185d0 	.word	0x080185d0
 800bc40:	20008d5c 	.word	0x20008d5c

0800bc44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bc50:	887b      	ldrh	r3, [r7, #2]
 800bc52:	3303      	adds	r3, #3
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	f023 0303 	bic.w	r3, r3, #3
 800bc5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bc5c:	8bfb      	ldrh	r3, [r7, #30]
 800bc5e:	2b0b      	cmp	r3, #11
 800bc60:	d801      	bhi.n	800bc66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bc62:	230c      	movs	r3, #12
 800bc64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bc66:	8bfb      	ldrh	r3, [r7, #30]
 800bc68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc6c:	d803      	bhi.n	800bc76 <mem_trim+0x32>
 800bc6e:	8bfa      	ldrh	r2, [r7, #30]
 800bc70:	887b      	ldrh	r3, [r7, #2]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d201      	bcs.n	800bc7a <mem_trim+0x36>
    return NULL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	e0d8      	b.n	800be2c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bc7a:	4b6e      	ldr	r3, [pc, #440]	; (800be34 <mem_trim+0x1f0>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d304      	bcc.n	800bc8e <mem_trim+0x4a>
 800bc84:	4b6c      	ldr	r3, [pc, #432]	; (800be38 <mem_trim+0x1f4>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d306      	bcc.n	800bc9c <mem_trim+0x58>
 800bc8e:	4b6b      	ldr	r3, [pc, #428]	; (800be3c <mem_trim+0x1f8>)
 800bc90:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bc94:	496a      	ldr	r1, [pc, #424]	; (800be40 <mem_trim+0x1fc>)
 800bc96:	486b      	ldr	r0, [pc, #428]	; (800be44 <mem_trim+0x200>)
 800bc98:	f00b f972 	bl	8016f80 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bc9c:	4b65      	ldr	r3, [pc, #404]	; (800be34 <mem_trim+0x1f0>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d304      	bcc.n	800bcb0 <mem_trim+0x6c>
 800bca6:	4b64      	ldr	r3, [pc, #400]	; (800be38 <mem_trim+0x1f4>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d307      	bcc.n	800bcc0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bcb0:	f00a fbee 	bl	8016490 <sys_arch_protect>
 800bcb4:	60b8      	str	r0, [r7, #8]
 800bcb6:	68b8      	ldr	r0, [r7, #8]
 800bcb8:	f00a fbf8 	bl	80164ac <sys_arch_unprotect>
    return rmem;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	e0b5      	b.n	800be2c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3b08      	subs	r3, #8
 800bcc4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bcc6:	69b8      	ldr	r0, [r7, #24]
 800bcc8:	f7ff fdf0 	bl	800b8ac <mem_to_ptr>
 800bccc:	4603      	mov	r3, r0
 800bcce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	881a      	ldrh	r2, [r3, #0]
 800bcd4:	8afb      	ldrh	r3, [r7, #22]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	3b08      	subs	r3, #8
 800bcdc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bcde:	8bfa      	ldrh	r2, [r7, #30]
 800bce0:	8abb      	ldrh	r3, [r7, #20]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d906      	bls.n	800bcf4 <mem_trim+0xb0>
 800bce6:	4b55      	ldr	r3, [pc, #340]	; (800be3c <mem_trim+0x1f8>)
 800bce8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bcec:	4956      	ldr	r1, [pc, #344]	; (800be48 <mem_trim+0x204>)
 800bcee:	4855      	ldr	r0, [pc, #340]	; (800be44 <mem_trim+0x200>)
 800bcf0:	f00b f946 	bl	8016f80 <iprintf>
  if (newsize > size) {
 800bcf4:	8bfa      	ldrh	r2, [r7, #30]
 800bcf6:	8abb      	ldrh	r3, [r7, #20]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d901      	bls.n	800bd00 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e095      	b.n	800be2c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bd00:	8bfa      	ldrh	r2, [r7, #30]
 800bd02:	8abb      	ldrh	r3, [r7, #20]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d101      	bne.n	800bd0c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	e08f      	b.n	800be2c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bd0c:	484f      	ldr	r0, [pc, #316]	; (800be4c <mem_trim+0x208>)
 800bd0e:	f00a fb7d 	bl	801640c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fdb8 	bl	800b88c <ptr_to_mem>
 800bd1c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	791b      	ldrb	r3, [r3, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d13f      	bne.n	800bda6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd2e:	d106      	bne.n	800bd3e <mem_trim+0xfa>
 800bd30:	4b42      	ldr	r3, [pc, #264]	; (800be3c <mem_trim+0x1f8>)
 800bd32:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bd36:	4946      	ldr	r1, [pc, #280]	; (800be50 <mem_trim+0x20c>)
 800bd38:	4842      	ldr	r0, [pc, #264]	; (800be44 <mem_trim+0x200>)
 800bd3a:	f00b f921 	bl	8016f80 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bd44:	8afa      	ldrh	r2, [r7, #22]
 800bd46:	8bfb      	ldrh	r3, [r7, #30]
 800bd48:	4413      	add	r3, r2
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bd50:	4b40      	ldr	r3, [pc, #256]	; (800be54 <mem_trim+0x210>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d106      	bne.n	800bd68 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bd5a:	89fb      	ldrh	r3, [r7, #14]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7ff fd95 	bl	800b88c <ptr_to_mem>
 800bd62:	4603      	mov	r3, r0
 800bd64:	4a3b      	ldr	r2, [pc, #236]	; (800be54 <mem_trim+0x210>)
 800bd66:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bd68:	89fb      	ldrh	r3, [r7, #14]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff fd8e 	bl	800b88c <ptr_to_mem>
 800bd70:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2200      	movs	r2, #0
 800bd76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	89ba      	ldrh	r2, [r7, #12]
 800bd7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	8afa      	ldrh	r2, [r7, #22]
 800bd82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	89fa      	ldrh	r2, [r7, #14]
 800bd88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd92:	d047      	beq.n	800be24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff fd77 	bl	800b88c <ptr_to_mem>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	89fb      	ldrh	r3, [r7, #14]
 800bda2:	8053      	strh	r3, [r2, #2]
 800bda4:	e03e      	b.n	800be24 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bda6:	8bfb      	ldrh	r3, [r7, #30]
 800bda8:	f103 0214 	add.w	r2, r3, #20
 800bdac:	8abb      	ldrh	r3, [r7, #20]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d838      	bhi.n	800be24 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdb2:	8afa      	ldrh	r2, [r7, #22]
 800bdb4:	8bfb      	ldrh	r3, [r7, #30]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	3308      	adds	r3, #8
 800bdbc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdc6:	d106      	bne.n	800bdd6 <mem_trim+0x192>
 800bdc8:	4b1c      	ldr	r3, [pc, #112]	; (800be3c <mem_trim+0x1f8>)
 800bdca:	f240 3216 	movw	r2, #790	; 0x316
 800bdce:	4920      	ldr	r1, [pc, #128]	; (800be50 <mem_trim+0x20c>)
 800bdd0:	481c      	ldr	r0, [pc, #112]	; (800be44 <mem_trim+0x200>)
 800bdd2:	f00b f8d5 	bl	8016f80 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bdd6:	89fb      	ldrh	r3, [r7, #14]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7ff fd57 	bl	800b88c <ptr_to_mem>
 800bdde:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bde0:	4b1c      	ldr	r3, [pc, #112]	; (800be54 <mem_trim+0x210>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d202      	bcs.n	800bdf0 <mem_trim+0x1ac>
      lfree = mem2;
 800bdea:	4a1a      	ldr	r2, [pc, #104]	; (800be54 <mem_trim+0x210>)
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	881a      	ldrh	r2, [r3, #0]
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	8afa      	ldrh	r2, [r7, #22]
 800be02:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	89fa      	ldrh	r2, [r7, #14]
 800be08:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	881b      	ldrh	r3, [r3, #0]
 800be0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be12:	d007      	beq.n	800be24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff fd37 	bl	800b88c <ptr_to_mem>
 800be1e:	4602      	mov	r2, r0
 800be20:	89fb      	ldrh	r3, [r7, #14]
 800be22:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be24:	4809      	ldr	r0, [pc, #36]	; (800be4c <mem_trim+0x208>)
 800be26:	f00a fb00 	bl	801642a <sys_mutex_unlock>
  return rmem;
 800be2a:	687b      	ldr	r3, [r7, #4]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3720      	adds	r7, #32
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20008d50 	.word	0x20008d50
 800be38:	20008d54 	.word	0x20008d54
 800be3c:	08018478 	.word	0x08018478
 800be40:	08018604 	.word	0x08018604
 800be44:	080184c0 	.word	0x080184c0
 800be48:	0801861c 	.word	0x0801861c
 800be4c:	20008d58 	.word	0x20008d58
 800be50:	0801863c 	.word	0x0801863c
 800be54:	20008d5c 	.word	0x20008d5c

0800be58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <mem_malloc+0x14>
    return NULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	e0e2      	b.n	800c032 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800be6c:	88fb      	ldrh	r3, [r7, #6]
 800be6e:	3303      	adds	r3, #3
 800be70:	b29b      	uxth	r3, r3
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800be78:	8bbb      	ldrh	r3, [r7, #28]
 800be7a:	2b0b      	cmp	r3, #11
 800be7c:	d801      	bhi.n	800be82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800be7e:	230c      	movs	r3, #12
 800be80:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800be82:	8bbb      	ldrh	r3, [r7, #28]
 800be84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be88:	d803      	bhi.n	800be92 <mem_malloc+0x3a>
 800be8a:	8bba      	ldrh	r2, [r7, #28]
 800be8c:	88fb      	ldrh	r3, [r7, #6]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d201      	bcs.n	800be96 <mem_malloc+0x3e>
    return NULL;
 800be92:	2300      	movs	r3, #0
 800be94:	e0cd      	b.n	800c032 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800be96:	4869      	ldr	r0, [pc, #420]	; (800c03c <mem_malloc+0x1e4>)
 800be98:	f00a fab8 	bl	801640c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800be9c:	4b68      	ldr	r3, [pc, #416]	; (800c040 <mem_malloc+0x1e8>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fd03 	bl	800b8ac <mem_to_ptr>
 800bea6:	4603      	mov	r3, r0
 800bea8:	83fb      	strh	r3, [r7, #30]
 800beaa:	e0b7      	b.n	800c01c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800beac:	8bfb      	ldrh	r3, [r7, #30]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fcec 	bl	800b88c <ptr_to_mem>
 800beb4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	791b      	ldrb	r3, [r3, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f040 80a7 	bne.w	800c00e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	461a      	mov	r2, r3
 800bec6:	8bfb      	ldrh	r3, [r7, #30]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	f1a3 0208 	sub.w	r2, r3, #8
 800bece:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bed0:	429a      	cmp	r2, r3
 800bed2:	f0c0 809c 	bcc.w	800c00e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	8bfb      	ldrh	r3, [r7, #30]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	f1a3 0208 	sub.w	r2, r3, #8
 800bee4:	8bbb      	ldrh	r3, [r7, #28]
 800bee6:	3314      	adds	r3, #20
 800bee8:	429a      	cmp	r2, r3
 800beea:	d333      	bcc.n	800bf54 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800beec:	8bfa      	ldrh	r2, [r7, #30]
 800beee:	8bbb      	ldrh	r3, [r7, #28]
 800bef0:	4413      	add	r3, r2
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	3308      	adds	r3, #8
 800bef6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bef8:	8a7b      	ldrh	r3, [r7, #18]
 800befa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800befe:	d106      	bne.n	800bf0e <mem_malloc+0xb6>
 800bf00:	4b50      	ldr	r3, [pc, #320]	; (800c044 <mem_malloc+0x1ec>)
 800bf02:	f240 3287 	movw	r2, #903	; 0x387
 800bf06:	4950      	ldr	r1, [pc, #320]	; (800c048 <mem_malloc+0x1f0>)
 800bf08:	4850      	ldr	r0, [pc, #320]	; (800c04c <mem_malloc+0x1f4>)
 800bf0a:	f00b f839 	bl	8016f80 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bf0e:	8a7b      	ldrh	r3, [r7, #18]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff fcbb 	bl	800b88c <ptr_to_mem>
 800bf16:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	881a      	ldrh	r2, [r3, #0]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	8bfa      	ldrh	r2, [r7, #30]
 800bf2a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	8a7a      	ldrh	r2, [r7, #18]
 800bf30:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	2201      	movs	r2, #1
 800bf36:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf40:	d00b      	beq.n	800bf5a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff fca0 	bl	800b88c <ptr_to_mem>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	8a7b      	ldrh	r3, [r7, #18]
 800bf50:	8053      	strh	r3, [r2, #2]
 800bf52:	e002      	b.n	800bf5a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	2201      	movs	r2, #1
 800bf58:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bf5a:	4b39      	ldr	r3, [pc, #228]	; (800c040 <mem_malloc+0x1e8>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d127      	bne.n	800bfb4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bf64:	4b36      	ldr	r3, [pc, #216]	; (800c040 <mem_malloc+0x1e8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bf6a:	e005      	b.n	800bf78 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7ff fc8b 	bl	800b88c <ptr_to_mem>
 800bf76:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	791b      	ldrb	r3, [r3, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d004      	beq.n	800bf8a <mem_malloc+0x132>
 800bf80:	4b33      	ldr	r3, [pc, #204]	; (800c050 <mem_malloc+0x1f8>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d1f0      	bne.n	800bf6c <mem_malloc+0x114>
          }
          lfree = cur;
 800bf8a:	4a2d      	ldr	r2, [pc, #180]	; (800c040 <mem_malloc+0x1e8>)
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bf90:	4b2b      	ldr	r3, [pc, #172]	; (800c040 <mem_malloc+0x1e8>)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	4b2e      	ldr	r3, [pc, #184]	; (800c050 <mem_malloc+0x1f8>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d00b      	beq.n	800bfb4 <mem_malloc+0x15c>
 800bf9c:	4b28      	ldr	r3, [pc, #160]	; (800c040 <mem_malloc+0x1e8>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	791b      	ldrb	r3, [r3, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <mem_malloc+0x15c>
 800bfa6:	4b27      	ldr	r3, [pc, #156]	; (800c044 <mem_malloc+0x1ec>)
 800bfa8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bfac:	4929      	ldr	r1, [pc, #164]	; (800c054 <mem_malloc+0x1fc>)
 800bfae:	4827      	ldr	r0, [pc, #156]	; (800c04c <mem_malloc+0x1f4>)
 800bfb0:	f00a ffe6 	bl	8016f80 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bfb4:	4821      	ldr	r0, [pc, #132]	; (800c03c <mem_malloc+0x1e4>)
 800bfb6:	f00a fa38 	bl	801642a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bfba:	8bba      	ldrh	r2, [r7, #28]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	4a23      	ldr	r2, [pc, #140]	; (800c050 <mem_malloc+0x1f8>)
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d906      	bls.n	800bfd8 <mem_malloc+0x180>
 800bfca:	4b1e      	ldr	r3, [pc, #120]	; (800c044 <mem_malloc+0x1ec>)
 800bfcc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bfd0:	4921      	ldr	r1, [pc, #132]	; (800c058 <mem_malloc+0x200>)
 800bfd2:	481e      	ldr	r0, [pc, #120]	; (800c04c <mem_malloc+0x1f4>)
 800bfd4:	f00a ffd4 	bl	8016f80 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	f003 0303 	and.w	r3, r3, #3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d006      	beq.n	800bff0 <mem_malloc+0x198>
 800bfe2:	4b18      	ldr	r3, [pc, #96]	; (800c044 <mem_malloc+0x1ec>)
 800bfe4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bfe8:	491c      	ldr	r1, [pc, #112]	; (800c05c <mem_malloc+0x204>)
 800bfea:	4818      	ldr	r0, [pc, #96]	; (800c04c <mem_malloc+0x1f4>)
 800bfec:	f00a ffc8 	bl	8016f80 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	f003 0303 	and.w	r3, r3, #3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d006      	beq.n	800c008 <mem_malloc+0x1b0>
 800bffa:	4b12      	ldr	r3, [pc, #72]	; (800c044 <mem_malloc+0x1ec>)
 800bffc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c000:	4917      	ldr	r1, [pc, #92]	; (800c060 <mem_malloc+0x208>)
 800c002:	4812      	ldr	r0, [pc, #72]	; (800c04c <mem_malloc+0x1f4>)
 800c004:	f00a ffbc 	bl	8016f80 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3308      	adds	r3, #8
 800c00c:	e011      	b.n	800c032 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c00e:	8bfb      	ldrh	r3, [r7, #30]
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff fc3b 	bl	800b88c <ptr_to_mem>
 800c016:	4603      	mov	r3, r0
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c01c:	8bfa      	ldrh	r2, [r7, #30]
 800c01e:	8bbb      	ldrh	r3, [r7, #28]
 800c020:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c024:	429a      	cmp	r2, r3
 800c026:	f4ff af41 	bcc.w	800beac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c02a:	4804      	ldr	r0, [pc, #16]	; (800c03c <mem_malloc+0x1e4>)
 800c02c:	f00a f9fd 	bl	801642a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3720      	adds	r7, #32
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	20008d58 	.word	0x20008d58
 800c040:	20008d5c 	.word	0x20008d5c
 800c044:	08018478 	.word	0x08018478
 800c048:	0801863c 	.word	0x0801863c
 800c04c:	080184c0 	.word	0x080184c0
 800c050:	20008d54 	.word	0x20008d54
 800c054:	08018650 	.word	0x08018650
 800c058:	0801866c 	.word	0x0801866c
 800c05c:	0801869c 	.word	0x0801869c
 800c060:	080186cc 	.word	0x080186cc

0800c064 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	460a      	mov	r2, r1
 800c06e:	80fb      	strh	r3, [r7, #6]
 800c070:	4613      	mov	r3, r2
 800c072:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800c074:	88fb      	ldrh	r3, [r7, #6]
 800c076:	88ba      	ldrh	r2, [r7, #4]
 800c078:	fb02 f303 	mul.w	r3, r2, r3
 800c07c:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	b29b      	uxth	r3, r3
 800c082:	461a      	mov	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	4293      	cmp	r3, r2
 800c088:	d001      	beq.n	800c08e <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800c08a:	2300      	movs	r3, #0
 800c08c:	e00e      	b.n	800c0ac <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	b29b      	uxth	r3, r3
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff fee0 	bl	800be58 <mem_malloc>
 800c098:	60b8      	str	r0, [r7, #8]
  if (p) {
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d004      	beq.n	800c0aa <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	68b8      	ldr	r0, [r7, #8]
 800c0a6:	f00a fe85 	bl	8016db4 <memset>
  }
  return p;
 800c0aa:	68bb      	ldr	r3, [r7, #8]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	3303      	adds	r3, #3
 800c0ca:	f023 0303 	bic.w	r3, r3, #3
 800c0ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e011      	b.n	800c0fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	885b      	ldrh	r3, [r3, #2]
 800c0fe:	461a      	mov	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4293      	cmp	r3, r2
 800c104:	dbe7      	blt.n	800c0d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	4770      	bx	lr
	...

0800c114 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c11a:	2300      	movs	r3, #0
 800c11c:	80fb      	strh	r3, [r7, #6]
 800c11e:	e009      	b.n	800c134 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c120:	88fb      	ldrh	r3, [r7, #6]
 800c122:	4a08      	ldr	r2, [pc, #32]	; (800c144 <memp_init+0x30>)
 800c124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff ffc3 	bl	800c0b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c12e:	88fb      	ldrh	r3, [r7, #6]
 800c130:	3301      	adds	r3, #1
 800c132:	80fb      	strh	r3, [r7, #6]
 800c134:	88fb      	ldrh	r3, [r7, #6]
 800c136:	2b0c      	cmp	r3, #12
 800c138:	d9f2      	bls.n	800c120 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c13a:	bf00      	nop
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	0801aeec 	.word	0x0801aeec

0800c148 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c150:	f00a f99e 	bl	8016490 <sys_arch_protect>
 800c154:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d015      	beq.n	800c190 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	6812      	ldr	r2, [r2, #0]
 800c16c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	f003 0303 	and.w	r3, r3, #3
 800c174:	2b00      	cmp	r3, #0
 800c176:	d006      	beq.n	800c186 <do_memp_malloc_pool+0x3e>
 800c178:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <do_memp_malloc_pool+0x58>)
 800c17a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c17e:	4909      	ldr	r1, [pc, #36]	; (800c1a4 <do_memp_malloc_pool+0x5c>)
 800c180:	4809      	ldr	r0, [pc, #36]	; (800c1a8 <do_memp_malloc_pool+0x60>)
 800c182:	f00a fefd 	bl	8016f80 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f00a f990 	bl	80164ac <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	e003      	b.n	800c198 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f00a f98b 	bl	80164ac <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	080186f0 	.word	0x080186f0
 800c1a4:	08018720 	.word	0x08018720
 800c1a8:	08018744 	.word	0x08018744

0800c1ac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <memp_malloc_pool+0x1c>
 800c1ba:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <memp_malloc_pool+0x38>)
 800c1bc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c1c0:	4909      	ldr	r1, [pc, #36]	; (800c1e8 <memp_malloc_pool+0x3c>)
 800c1c2:	480a      	ldr	r0, [pc, #40]	; (800c1ec <memp_malloc_pool+0x40>)
 800c1c4:	f00a fedc 	bl	8016f80 <iprintf>
  if (desc == NULL) {
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <memp_malloc_pool+0x26>
    return NULL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e003      	b.n	800c1da <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7ff ffb8 	bl	800c148 <do_memp_malloc_pool>
 800c1d8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	080186f0 	.word	0x080186f0
 800c1e8:	0801876c 	.word	0x0801876c
 800c1ec:	08018744 	.word	0x08018744

0800c1f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c1fa:	79fb      	ldrb	r3, [r7, #7]
 800c1fc:	2b0c      	cmp	r3, #12
 800c1fe:	d908      	bls.n	800c212 <memp_malloc+0x22>
 800c200:	4b0a      	ldr	r3, [pc, #40]	; (800c22c <memp_malloc+0x3c>)
 800c202:	f240 1257 	movw	r2, #343	; 0x157
 800c206:	490a      	ldr	r1, [pc, #40]	; (800c230 <memp_malloc+0x40>)
 800c208:	480a      	ldr	r0, [pc, #40]	; (800c234 <memp_malloc+0x44>)
 800c20a:	f00a feb9 	bl	8016f80 <iprintf>
 800c20e:	2300      	movs	r3, #0
 800c210:	e008      	b.n	800c224 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c212:	79fb      	ldrb	r3, [r7, #7]
 800c214:	4a08      	ldr	r2, [pc, #32]	; (800c238 <memp_malloc+0x48>)
 800c216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7ff ff94 	bl	800c148 <do_memp_malloc_pool>
 800c220:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c222:	68fb      	ldr	r3, [r7, #12]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	080186f0 	.word	0x080186f0
 800c230:	08018780 	.word	0x08018780
 800c234:	08018744 	.word	0x08018744
 800c238:	0801aeec 	.word	0x0801aeec

0800c23c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d006      	beq.n	800c25e <do_memp_free_pool+0x22>
 800c250:	4b0d      	ldr	r3, [pc, #52]	; (800c288 <do_memp_free_pool+0x4c>)
 800c252:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c256:	490d      	ldr	r1, [pc, #52]	; (800c28c <do_memp_free_pool+0x50>)
 800c258:	480d      	ldr	r0, [pc, #52]	; (800c290 <do_memp_free_pool+0x54>)
 800c25a:	f00a fe91 	bl	8016f80 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c262:	f00a f915 	bl	8016490 <sys_arch_protect>
 800c266:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c27a:	68b8      	ldr	r0, [r7, #8]
 800c27c:	f00a f916 	bl	80164ac <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c280:	bf00      	nop
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	080186f0 	.word	0x080186f0
 800c28c:	080187a0 	.word	0x080187a0
 800c290:	08018744 	.word	0x08018744

0800c294 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <memp_free_pool+0x1e>
 800c2a4:	4b0a      	ldr	r3, [pc, #40]	; (800c2d0 <memp_free_pool+0x3c>)
 800c2a6:	f240 1295 	movw	r2, #405	; 0x195
 800c2aa:	490a      	ldr	r1, [pc, #40]	; (800c2d4 <memp_free_pool+0x40>)
 800c2ac:	480a      	ldr	r0, [pc, #40]	; (800c2d8 <memp_free_pool+0x44>)
 800c2ae:	f00a fe67 	bl	8016f80 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d007      	beq.n	800c2c8 <memp_free_pool+0x34>
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d004      	beq.n	800c2c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7ff ffbb 	bl	800c23c <do_memp_free_pool>
 800c2c6:	e000      	b.n	800c2ca <memp_free_pool+0x36>
    return;
 800c2c8:	bf00      	nop
}
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	080186f0 	.word	0x080186f0
 800c2d4:	0801876c 	.word	0x0801876c
 800c2d8:	08018744 	.word	0x08018744

0800c2dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	6039      	str	r1, [r7, #0]
 800c2e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c2e8:	79fb      	ldrb	r3, [r7, #7]
 800c2ea:	2b0c      	cmp	r3, #12
 800c2ec:	d907      	bls.n	800c2fe <memp_free+0x22>
 800c2ee:	4b0c      	ldr	r3, [pc, #48]	; (800c320 <memp_free+0x44>)
 800c2f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c2f4:	490b      	ldr	r1, [pc, #44]	; (800c324 <memp_free+0x48>)
 800c2f6:	480c      	ldr	r0, [pc, #48]	; (800c328 <memp_free+0x4c>)
 800c2f8:	f00a fe42 	bl	8016f80 <iprintf>
 800c2fc:	e00c      	b.n	800c318 <memp_free+0x3c>

  if (mem == NULL) {
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d008      	beq.n	800c316 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c304:	79fb      	ldrb	r3, [r7, #7]
 800c306:	4a09      	ldr	r2, [pc, #36]	; (800c32c <memp_free+0x50>)
 800c308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff ff94 	bl	800c23c <do_memp_free_pool>
 800c314:	e000      	b.n	800c318 <memp_free+0x3c>
    return;
 800c316:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	080186f0 	.word	0x080186f0
 800c324:	080187c0 	.word	0x080187c0
 800c328:	08018744 	.word	0x08018744
 800c32c:	0801aeec 	.word	0x0801aeec

0800c330 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c330:	b480      	push	{r7}
 800c332:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c334:	bf00      	nop
 800c336:	46bd      	mov	sp, r7
 800c338:	bc80      	pop	{r7}
 800c33a:	4770      	bx	lr

0800c33c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
 800c348:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d108      	bne.n	800c362 <netif_add+0x26>
 800c350:	4b57      	ldr	r3, [pc, #348]	; (800c4b0 <netif_add+0x174>)
 800c352:	f240 1227 	movw	r2, #295	; 0x127
 800c356:	4957      	ldr	r1, [pc, #348]	; (800c4b4 <netif_add+0x178>)
 800c358:	4857      	ldr	r0, [pc, #348]	; (800c4b8 <netif_add+0x17c>)
 800c35a:	f00a fe11 	bl	8016f80 <iprintf>
 800c35e:	2300      	movs	r3, #0
 800c360:	e0a2      	b.n	800c4a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c364:	2b00      	cmp	r3, #0
 800c366:	d108      	bne.n	800c37a <netif_add+0x3e>
 800c368:	4b51      	ldr	r3, [pc, #324]	; (800c4b0 <netif_add+0x174>)
 800c36a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c36e:	4953      	ldr	r1, [pc, #332]	; (800c4bc <netif_add+0x180>)
 800c370:	4851      	ldr	r0, [pc, #324]	; (800c4b8 <netif_add+0x17c>)
 800c372:	f00a fe05 	bl	8016f80 <iprintf>
 800c376:	2300      	movs	r3, #0
 800c378:	e096      	b.n	800c4a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c380:	4b4f      	ldr	r3, [pc, #316]	; (800c4c0 <netif_add+0x184>)
 800c382:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c38a:	4b4d      	ldr	r3, [pc, #308]	; (800c4c0 <netif_add+0x184>)
 800c38c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c394:	4b4a      	ldr	r3, [pc, #296]	; (800c4c0 <netif_add+0x184>)
 800c396:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	4a45      	ldr	r2, [pc, #276]	; (800c4c4 <netif_add+0x188>)
 800c3ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6a3a      	ldr	r2, [r7, #32]
 800c3c8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c3ca:	4b3f      	ldr	r3, [pc, #252]	; (800c4c8 <netif_add+0x18c>)
 800c3cc:	781a      	ldrb	r2, [r3, #0]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	68b9      	ldr	r1, [r7, #8]
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f000 f911 	bl	800c608 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	4798      	blx	r3
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <netif_add+0xba>
    return NULL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e058      	b.n	800c4a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3fc:	2bff      	cmp	r3, #255	; 0xff
 800c3fe:	d103      	bne.n	800c408 <netif_add+0xcc>
        netif->num = 0;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c40c:	4b2f      	ldr	r3, [pc, #188]	; (800c4cc <netif_add+0x190>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	617b      	str	r3, [r7, #20]
 800c412:	e02b      	b.n	800c46c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d106      	bne.n	800c42a <netif_add+0xee>
 800c41c:	4b24      	ldr	r3, [pc, #144]	; (800c4b0 <netif_add+0x174>)
 800c41e:	f240 128b 	movw	r2, #395	; 0x18b
 800c422:	492b      	ldr	r1, [pc, #172]	; (800c4d0 <netif_add+0x194>)
 800c424:	4824      	ldr	r0, [pc, #144]	; (800c4b8 <netif_add+0x17c>)
 800c426:	f00a fdab 	bl	8016f80 <iprintf>
        num_netifs++;
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	3301      	adds	r3, #1
 800c42e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2bff      	cmp	r3, #255	; 0xff
 800c434:	dd06      	ble.n	800c444 <netif_add+0x108>
 800c436:	4b1e      	ldr	r3, [pc, #120]	; (800c4b0 <netif_add+0x174>)
 800c438:	f240 128d 	movw	r2, #397	; 0x18d
 800c43c:	4925      	ldr	r1, [pc, #148]	; (800c4d4 <netif_add+0x198>)
 800c43e:	481e      	ldr	r0, [pc, #120]	; (800c4b8 <netif_add+0x17c>)
 800c440:	f00a fd9e 	bl	8016f80 <iprintf>
        if (netif2->num == netif->num) {
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c450:	429a      	cmp	r2, r3
 800c452:	d108      	bne.n	800c466 <netif_add+0x12a>
          netif->num++;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c45a:	3301      	adds	r3, #1
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c464:	e005      	b.n	800c472 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1d0      	bne.n	800c414 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1be      	bne.n	800c3f6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c47e:	2bfe      	cmp	r3, #254	; 0xfe
 800c480:	d103      	bne.n	800c48a <netif_add+0x14e>
    netif_num = 0;
 800c482:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <netif_add+0x18c>)
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	e006      	b.n	800c498 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c490:	3301      	adds	r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <netif_add+0x18c>)
 800c496:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c498:	4b0c      	ldr	r3, [pc, #48]	; (800c4cc <netif_add+0x190>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <netif_add+0x190>)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	080187dc 	.word	0x080187dc
 800c4b4:	08018870 	.word	0x08018870
 800c4b8:	0801882c 	.word	0x0801882c
 800c4bc:	0801888c 	.word	0x0801888c
 800c4c0:	0801af60 	.word	0x0801af60
 800c4c4:	0800c815 	.word	0x0800c815
 800c4c8:	2000be34 	.word	0x2000be34
 800c4cc:	2000be2c 	.word	0x2000be2c
 800c4d0:	080188b0 	.word	0x080188b0
 800c4d4:	080188c4 	.word	0x080188c4

0800c4d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f002 fe1b 	bl	800f120 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f007 fbc1 	bl	8013c74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c4f2:	bf00      	nop
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
	...

0800c4fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d106      	bne.n	800c51c <netif_do_set_ipaddr+0x20>
 800c50e:	4b1d      	ldr	r3, [pc, #116]	; (800c584 <netif_do_set_ipaddr+0x88>)
 800c510:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c514:	491c      	ldr	r1, [pc, #112]	; (800c588 <netif_do_set_ipaddr+0x8c>)
 800c516:	481d      	ldr	r0, [pc, #116]	; (800c58c <netif_do_set_ipaddr+0x90>)
 800c518:	f00a fd32 	bl	8016f80 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d106      	bne.n	800c530 <netif_do_set_ipaddr+0x34>
 800c522:	4b18      	ldr	r3, [pc, #96]	; (800c584 <netif_do_set_ipaddr+0x88>)
 800c524:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c528:	4917      	ldr	r1, [pc, #92]	; (800c588 <netif_do_set_ipaddr+0x8c>)
 800c52a:	4818      	ldr	r0, [pc, #96]	; (800c58c <netif_do_set_ipaddr+0x90>)
 800c52c:	f00a fd28 	bl	8016f80 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3304      	adds	r3, #4
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d01c      	beq.n	800c578 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	3304      	adds	r3, #4
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c54e:	f107 0314 	add.w	r3, r7, #20
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff ffbf 	bl	800c4d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <netif_do_set_ipaddr+0x6a>
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	e000      	b.n	800c568 <netif_do_set_ipaddr+0x6c>
 800c566:	2300      	movs	r3, #0
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c56c:	2101      	movs	r1, #1
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f000 f8ce 	bl	800c710 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c574:	2301      	movs	r3, #1
 800c576:	e000      	b.n	800c57a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3718      	adds	r7, #24
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	080187dc 	.word	0x080187dc
 800c588:	080188f4 	.word	0x080188f4
 800c58c:	0801882c 	.word	0x0801882c

0800c590 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c590:	b480      	push	{r7}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d00a      	beq.n	800c5c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d002      	beq.n	800c5b6 <netif_do_set_netmask+0x26>
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	e000      	b.n	800c5b8 <netif_do_set_netmask+0x28>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e000      	b.n	800c5c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3714      	adds	r7, #20
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bc80      	pop	{r7}
 800c5ca:	4770      	bx	lr

0800c5cc <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	330c      	adds	r3, #12
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d00a      	beq.n	800c5fc <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d002      	beq.n	800c5f2 <netif_do_set_gw+0x26>
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	e000      	b.n	800c5f4 <netif_do_set_gw+0x28>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e000      	b.n	800c5fe <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	bc80      	pop	{r7}
 800c606:	4770      	bx	lr

0800c608 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c616:	2300      	movs	r3, #0
 800c618:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d101      	bne.n	800c628 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c624:	4b1c      	ldr	r3, [pc, #112]	; (800c698 <netif_set_addr+0x90>)
 800c626:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c62e:	4b1a      	ldr	r3, [pc, #104]	; (800c698 <netif_set_addr+0x90>)
 800c630:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c638:	4b17      	ldr	r3, [pc, #92]	; (800c698 <netif_set_addr+0x90>)
 800c63a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <netif_set_addr+0x42>
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <netif_set_addr+0x46>
 800c64a:	2301      	movs	r3, #1
 800c64c:	e000      	b.n	800c650 <netif_set_addr+0x48>
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d006      	beq.n	800c666 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c658:	f107 0310 	add.w	r3, r7, #16
 800c65c:	461a      	mov	r2, r3
 800c65e:	68b9      	ldr	r1, [r7, #8]
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7ff ff4b 	bl	800c4fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c666:	69fa      	ldr	r2, [r7, #28]
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f7ff ff90 	bl	800c590 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c670:	69ba      	ldr	r2, [r7, #24]
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f7ff ffa9 	bl	800c5cc <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d106      	bne.n	800c68e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c680:	f107 0310 	add.w	r3, r7, #16
 800c684:	461a      	mov	r2, r3
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f7ff ff37 	bl	800c4fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c68e:	bf00      	nop
 800c690:	3720      	adds	r7, #32
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	0801af60 	.word	0x0801af60

0800c69c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c6a4:	4a03      	ldr	r2, [pc, #12]	; (800c6b4 <netif_set_default+0x18>)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c6aa:	bf00      	nop
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bc80      	pop	{r7}
 800c6b2:	4770      	bx	lr
 800c6b4:	2000be30 	.word	0x2000be30

0800c6b8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d107      	bne.n	800c6d6 <netif_set_up+0x1e>
 800c6c6:	4b0f      	ldr	r3, [pc, #60]	; (800c704 <netif_set_up+0x4c>)
 800c6c8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c6cc:	490e      	ldr	r1, [pc, #56]	; (800c708 <netif_set_up+0x50>)
 800c6ce:	480f      	ldr	r0, [pc, #60]	; (800c70c <netif_set_up+0x54>)
 800c6d0:	f00a fc56 	bl	8016f80 <iprintf>
 800c6d4:	e013      	b.n	800c6fe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10c      	bne.n	800c6fe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6ea:	f043 0301 	orr.w	r3, r3, #1
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c6f6:	2103      	movs	r1, #3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f809 	bl	800c710 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	080187dc 	.word	0x080187dc
 800c708:	08018964 	.word	0x08018964
 800c70c:	0801882c 	.word	0x0801882c

0800c710 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d106      	bne.n	800c730 <netif_issue_reports+0x20>
 800c722:	4b18      	ldr	r3, [pc, #96]	; (800c784 <netif_issue_reports+0x74>)
 800c724:	f240 326d 	movw	r2, #877	; 0x36d
 800c728:	4917      	ldr	r1, [pc, #92]	; (800c788 <netif_issue_reports+0x78>)
 800c72a:	4818      	ldr	r0, [pc, #96]	; (800c78c <netif_issue_reports+0x7c>)
 800c72c:	f00a fc28 	bl	8016f80 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c736:	f003 0304 	and.w	r3, r3, #4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d01e      	beq.n	800c77c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c744:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d017      	beq.n	800c77c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c74c:	78fb      	ldrb	r3, [r7, #3]
 800c74e:	f003 0301 	and.w	r3, r3, #1
 800c752:	2b00      	cmp	r3, #0
 800c754:	d013      	beq.n	800c77e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	3304      	adds	r3, #4
 800c75a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00e      	beq.n	800c77e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c766:	f003 0308 	and.w	r3, r3, #8
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d007      	beq.n	800c77e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	3304      	adds	r3, #4
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f008 f9e5 	bl	8014b44 <etharp_request>
 800c77a:	e000      	b.n	800c77e <netif_issue_reports+0x6e>
    return;
 800c77c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	080187dc 	.word	0x080187dc
 800c788:	08018980 	.word	0x08018980
 800c78c:	0801882c 	.word	0x0801882c

0800c790 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d107      	bne.n	800c7ae <netif_set_down+0x1e>
 800c79e:	4b12      	ldr	r3, [pc, #72]	; (800c7e8 <netif_set_down+0x58>)
 800c7a0:	f240 329b 	movw	r2, #923	; 0x39b
 800c7a4:	4911      	ldr	r1, [pc, #68]	; (800c7ec <netif_set_down+0x5c>)
 800c7a6:	4812      	ldr	r0, [pc, #72]	; (800c7f0 <netif_set_down+0x60>)
 800c7a8:	f00a fbea 	bl	8016f80 <iprintf>
 800c7ac:	e019      	b.n	800c7e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7b4:	f003 0301 	and.w	r3, r3, #1
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d012      	beq.n	800c7e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7c2:	f023 0301 	bic.w	r3, r3, #1
 800c7c6:	b2da      	uxtb	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7d4:	f003 0308 	and.w	r3, r3, #8
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f007 fd6f 	bl	80142c0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	080187dc 	.word	0x080187dc
 800c7ec:	080189a4 	.word	0x080189a4
 800c7f0:	0801882c 	.word	0x0801882c

0800c7f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d002      	beq.n	800c80a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	61da      	str	r2, [r3, #28]
  }
}
 800c80a:	bf00      	nop
 800c80c:	370c      	adds	r7, #12
 800c80e:	46bd      	mov	sp, r7
 800c810:	bc80      	pop	{r7}
 800c812:	4770      	bx	lr

0800c814 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c820:	f06f 030b 	mvn.w	r3, #11
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	bc80      	pop	{r7}
 800c82c:	4770      	bx	lr
	...

0800c830 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c83a:	79fb      	ldrb	r3, [r7, #7]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d013      	beq.n	800c868 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c840:	4b0c      	ldr	r3, [pc, #48]	; (800c874 <netif_get_by_index+0x44>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e00c      	b.n	800c862 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c84e:	3301      	adds	r3, #1
 800c850:	b2db      	uxtb	r3, r3
 800c852:	79fa      	ldrb	r2, [r7, #7]
 800c854:	429a      	cmp	r2, r3
 800c856:	d101      	bne.n	800c85c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	e006      	b.n	800c86a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	60fb      	str	r3, [r7, #12]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1ef      	bne.n	800c848 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3714      	adds	r7, #20
 800c86e:	46bd      	mov	sp, r7
 800c870:	bc80      	pop	{r7}
 800c872:	4770      	bx	lr
 800c874:	2000be2c 	.word	0x2000be2c

0800c878 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c87e:	f009 fe07 	bl	8016490 <sys_arch_protect>
 800c882:	6038      	str	r0, [r7, #0]
 800c884:	4b0d      	ldr	r3, [pc, #52]	; (800c8bc <pbuf_free_ooseq+0x44>)
 800c886:	2200      	movs	r2, #0
 800c888:	701a      	strb	r2, [r3, #0]
 800c88a:	6838      	ldr	r0, [r7, #0]
 800c88c:	f009 fe0e 	bl	80164ac <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c890:	4b0b      	ldr	r3, [pc, #44]	; (800c8c0 <pbuf_free_ooseq+0x48>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	e00a      	b.n	800c8ae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f002 fc7b 	bl	800f19c <tcp_free_ooseq>
      return;
 800c8a6:	e005      	b.n	800c8b4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	607b      	str	r3, [r7, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1f1      	bne.n	800c898 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	2000be35 	.word	0x2000be35
 800c8c0:	2000be44 	.word	0x2000be44

0800c8c4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c8cc:	f7ff ffd4 	bl	800c878 <pbuf_free_ooseq>
}
 800c8d0:	bf00      	nop
 800c8d2:	3708      	adds	r7, #8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c8de:	f009 fdd7 	bl	8016490 <sys_arch_protect>
 800c8e2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c8e4:	4b0f      	ldr	r3, [pc, #60]	; (800c924 <pbuf_pool_is_empty+0x4c>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c8ea:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <pbuf_pool_is_empty+0x4c>)
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f009 fddb 	bl	80164ac <sys_arch_unprotect>

  if (!queued) {
 800c8f6:	78fb      	ldrb	r3, [r7, #3]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10f      	bne.n	800c91c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	480a      	ldr	r0, [pc, #40]	; (800c928 <pbuf_pool_is_empty+0x50>)
 800c900:	f7fd fb9c 	bl	800a03c <tcpip_try_callback>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d008      	beq.n	800c91c <pbuf_pool_is_empty+0x44>
 800c90a:	f009 fdc1 	bl	8016490 <sys_arch_protect>
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	4b04      	ldr	r3, [pc, #16]	; (800c924 <pbuf_pool_is_empty+0x4c>)
 800c912:	2200      	movs	r2, #0
 800c914:	701a      	strb	r2, [r3, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f009 fdc8 	bl	80164ac <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c91c:	bf00      	nop
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	2000be35 	.word	0x2000be35
 800c928:	0800c8c5 	.word	0x0800c8c5

0800c92c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	4611      	mov	r1, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	460b      	mov	r3, r1
 800c93c:	80fb      	strh	r3, [r7, #6]
 800c93e:	4613      	mov	r3, r2
 800c940:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	88fa      	ldrh	r2, [r7, #6]
 800c952:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	88ba      	ldrh	r2, [r7, #4]
 800c958:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c95a:	8b3b      	ldrh	r3, [r7, #24]
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	7f3a      	ldrb	r2, [r7, #28]
 800c966:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2201      	movs	r2, #1
 800c96c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	73da      	strb	r2, [r3, #15]
}
 800c974:	bf00      	nop
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr
	...

0800c980 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b08c      	sub	sp, #48	; 0x30
 800c984:	af02      	add	r7, sp, #8
 800c986:	4603      	mov	r3, r0
 800c988:	71fb      	strb	r3, [r7, #7]
 800c98a:	460b      	mov	r3, r1
 800c98c:	80bb      	strh	r3, [r7, #4]
 800c98e:	4613      	mov	r3, r2
 800c990:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c992:	79fb      	ldrb	r3, [r7, #7]
 800c994:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c996:	887b      	ldrh	r3, [r7, #2]
 800c998:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c99c:	d07f      	beq.n	800ca9e <pbuf_alloc+0x11e>
 800c99e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c9a2:	f300 80c8 	bgt.w	800cb36 <pbuf_alloc+0x1b6>
 800c9a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c9aa:	d010      	beq.n	800c9ce <pbuf_alloc+0x4e>
 800c9ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c9b0:	f300 80c1 	bgt.w	800cb36 <pbuf_alloc+0x1b6>
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d002      	beq.n	800c9be <pbuf_alloc+0x3e>
 800c9b8:	2b41      	cmp	r3, #65	; 0x41
 800c9ba:	f040 80bc 	bne.w	800cb36 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c9be:	887a      	ldrh	r2, [r7, #2]
 800c9c0:	88bb      	ldrh	r3, [r7, #4]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	f000 f8d1 	bl	800cb6c <pbuf_alloc_reference>
 800c9ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c9cc:	e0bd      	b.n	800cb4a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c9d6:	88bb      	ldrh	r3, [r7, #4]
 800c9d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c9da:	200c      	movs	r0, #12
 800c9dc:	f7ff fc08 	bl	800c1f0 <memp_malloc>
 800c9e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d109      	bne.n	800c9fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c9e8:	f7ff ff76 	bl	800c8d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c9f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f4:	f000 faa8 	bl	800cf48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	e0a7      	b.n	800cb4c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c9fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9fe:	3303      	adds	r3, #3
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	f023 0303 	bic.w	r3, r3, #3
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	8b7a      	ldrh	r2, [r7, #26]
 800ca10:	4293      	cmp	r3, r2
 800ca12:	bf28      	it	cs
 800ca14:	4613      	movcs	r3, r2
 800ca16:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ca18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca1a:	3310      	adds	r3, #16
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	4413      	add	r3, r2
 800ca20:	3303      	adds	r3, #3
 800ca22:	f023 0303 	bic.w	r3, r3, #3
 800ca26:	4618      	mov	r0, r3
 800ca28:	89f9      	ldrh	r1, [r7, #14]
 800ca2a:	8b7a      	ldrh	r2, [r7, #26]
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	9301      	str	r3, [sp, #4]
 800ca30:	887b      	ldrh	r3, [r7, #2]
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	460b      	mov	r3, r1
 800ca36:	4601      	mov	r1, r0
 800ca38:	6938      	ldr	r0, [r7, #16]
 800ca3a:	f7ff ff77 	bl	800c92c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f003 0303 	and.w	r3, r3, #3
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d006      	beq.n	800ca58 <pbuf_alloc+0xd8>
 800ca4a:	4b42      	ldr	r3, [pc, #264]	; (800cb54 <pbuf_alloc+0x1d4>)
 800ca4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca50:	4941      	ldr	r1, [pc, #260]	; (800cb58 <pbuf_alloc+0x1d8>)
 800ca52:	4842      	ldr	r0, [pc, #264]	; (800cb5c <pbuf_alloc+0x1dc>)
 800ca54:	f00a fa94 	bl	8016f80 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ca58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca5a:	3303      	adds	r3, #3
 800ca5c:	f023 0303 	bic.w	r3, r3, #3
 800ca60:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ca64:	d106      	bne.n	800ca74 <pbuf_alloc+0xf4>
 800ca66:	4b3b      	ldr	r3, [pc, #236]	; (800cb54 <pbuf_alloc+0x1d4>)
 800ca68:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ca6c:	493c      	ldr	r1, [pc, #240]	; (800cb60 <pbuf_alloc+0x1e0>)
 800ca6e:	483b      	ldr	r0, [pc, #236]	; (800cb5c <pbuf_alloc+0x1dc>)
 800ca70:	f00a fa86 	bl	8016f80 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d102      	bne.n	800ca80 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca7e:	e002      	b.n	800ca86 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ca8a:	8b7a      	ldrh	r2, [r7, #26]
 800ca8c:	89fb      	ldrh	r3, [r7, #14]
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ca96:	8b7b      	ldrh	r3, [r7, #26]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d19e      	bne.n	800c9da <pbuf_alloc+0x5a>
      break;
 800ca9c:	e055      	b.n	800cb4a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ca9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caa0:	3303      	adds	r3, #3
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	f023 0303 	bic.w	r3, r3, #3
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	88bb      	ldrh	r3, [r7, #4]
 800caac:	3303      	adds	r3, #3
 800caae:	b29b      	uxth	r3, r3
 800cab0:	f023 0303 	bic.w	r3, r3, #3
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	4413      	add	r3, r2
 800cab8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800caba:	8b3b      	ldrh	r3, [r7, #24]
 800cabc:	3310      	adds	r3, #16
 800cabe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cac0:	8b3a      	ldrh	r2, [r7, #24]
 800cac2:	88bb      	ldrh	r3, [r7, #4]
 800cac4:	3303      	adds	r3, #3
 800cac6:	f023 0303 	bic.w	r3, r3, #3
 800caca:	429a      	cmp	r2, r3
 800cacc:	d306      	bcc.n	800cadc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cace:	8afa      	ldrh	r2, [r7, #22]
 800cad0:	88bb      	ldrh	r3, [r7, #4]
 800cad2:	3303      	adds	r3, #3
 800cad4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cad8:	429a      	cmp	r2, r3
 800cada:	d201      	bcs.n	800cae0 <pbuf_alloc+0x160>
        return NULL;
 800cadc:	2300      	movs	r3, #0
 800cade:	e035      	b.n	800cb4c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cae0:	8afb      	ldrh	r3, [r7, #22]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff f9b8 	bl	800be58 <mem_malloc>
 800cae8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	2b00      	cmp	r3, #0
 800caee:	d101      	bne.n	800caf4 <pbuf_alloc+0x174>
        return NULL;
 800caf0:	2300      	movs	r3, #0
 800caf2:	e02b      	b.n	800cb4c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800caf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caf6:	3310      	adds	r3, #16
 800caf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cafa:	4413      	add	r3, r2
 800cafc:	3303      	adds	r3, #3
 800cafe:	f023 0303 	bic.w	r3, r3, #3
 800cb02:	4618      	mov	r0, r3
 800cb04:	88b9      	ldrh	r1, [r7, #4]
 800cb06:	88ba      	ldrh	r2, [r7, #4]
 800cb08:	2300      	movs	r3, #0
 800cb0a:	9301      	str	r3, [sp, #4]
 800cb0c:	887b      	ldrh	r3, [r7, #2]
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	460b      	mov	r3, r1
 800cb12:	4601      	mov	r1, r0
 800cb14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb16:	f7ff ff09 	bl	800c92c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f003 0303 	and.w	r3, r3, #3
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d010      	beq.n	800cb48 <pbuf_alloc+0x1c8>
 800cb26:	4b0b      	ldr	r3, [pc, #44]	; (800cb54 <pbuf_alloc+0x1d4>)
 800cb28:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cb2c:	490d      	ldr	r1, [pc, #52]	; (800cb64 <pbuf_alloc+0x1e4>)
 800cb2e:	480b      	ldr	r0, [pc, #44]	; (800cb5c <pbuf_alloc+0x1dc>)
 800cb30:	f00a fa26 	bl	8016f80 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cb34:	e008      	b.n	800cb48 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cb36:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <pbuf_alloc+0x1d4>)
 800cb38:	f240 1227 	movw	r2, #295	; 0x127
 800cb3c:	490a      	ldr	r1, [pc, #40]	; (800cb68 <pbuf_alloc+0x1e8>)
 800cb3e:	4807      	ldr	r0, [pc, #28]	; (800cb5c <pbuf_alloc+0x1dc>)
 800cb40:	f00a fa1e 	bl	8016f80 <iprintf>
      return NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	e001      	b.n	800cb4c <pbuf_alloc+0x1cc>
      break;
 800cb48:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3728      	adds	r7, #40	; 0x28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	08018a0c 	.word	0x08018a0c
 800cb58:	08018a3c 	.word	0x08018a3c
 800cb5c:	08018a6c 	.word	0x08018a6c
 800cb60:	08018a94 	.word	0x08018a94
 800cb64:	08018ac8 	.word	0x08018ac8
 800cb68:	08018af4 	.word	0x08018af4

0800cb6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	460b      	mov	r3, r1
 800cb76:	807b      	strh	r3, [r7, #2]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cb7c:	883b      	ldrh	r3, [r7, #0]
 800cb7e:	2b41      	cmp	r3, #65	; 0x41
 800cb80:	d009      	beq.n	800cb96 <pbuf_alloc_reference+0x2a>
 800cb82:	883b      	ldrh	r3, [r7, #0]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d006      	beq.n	800cb96 <pbuf_alloc_reference+0x2a>
 800cb88:	4b0f      	ldr	r3, [pc, #60]	; (800cbc8 <pbuf_alloc_reference+0x5c>)
 800cb8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cb8e:	490f      	ldr	r1, [pc, #60]	; (800cbcc <pbuf_alloc_reference+0x60>)
 800cb90:	480f      	ldr	r0, [pc, #60]	; (800cbd0 <pbuf_alloc_reference+0x64>)
 800cb92:	f00a f9f5 	bl	8016f80 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cb96:	200b      	movs	r0, #11
 800cb98:	f7ff fb2a 	bl	800c1f0 <memp_malloc>
 800cb9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d101      	bne.n	800cba8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cba4:	2300      	movs	r3, #0
 800cba6:	e00b      	b.n	800cbc0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cba8:	8879      	ldrh	r1, [r7, #2]
 800cbaa:	887a      	ldrh	r2, [r7, #2]
 800cbac:	2300      	movs	r3, #0
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	883b      	ldrh	r3, [r7, #0]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f7ff feb7 	bl	800c92c <pbuf_init_alloced_pbuf>
  return p;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	08018a0c 	.word	0x08018a0c
 800cbcc:	08018b10 	.word	0x08018b10
 800cbd0:	08018a6c 	.word	0x08018a6c

0800cbd4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af02      	add	r7, sp, #8
 800cbda:	607b      	str	r3, [r7, #4]
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73fb      	strb	r3, [r7, #15]
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	81bb      	strh	r3, [r7, #12]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cbec:	8a7b      	ldrh	r3, [r7, #18]
 800cbee:	3303      	adds	r3, #3
 800cbf0:	f023 0203 	bic.w	r2, r3, #3
 800cbf4:	89bb      	ldrh	r3, [r7, #12]
 800cbf6:	441a      	add	r2, r3
 800cbf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d901      	bls.n	800cc02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	e018      	b.n	800cc34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d007      	beq.n	800cc18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cc08:	8a7b      	ldrh	r3, [r7, #18]
 800cc0a:	3303      	adds	r3, #3
 800cc0c:	f023 0303 	bic.w	r3, r3, #3
 800cc10:	6a3a      	ldr	r2, [r7, #32]
 800cc12:	4413      	add	r3, r2
 800cc14:	617b      	str	r3, [r7, #20]
 800cc16:	e001      	b.n	800cc1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	89b9      	ldrh	r1, [r7, #12]
 800cc20:	89ba      	ldrh	r2, [r7, #12]
 800cc22:	2302      	movs	r3, #2
 800cc24:	9301      	str	r3, [sp, #4]
 800cc26:	897b      	ldrh	r3, [r7, #10]
 800cc28:	9300      	str	r3, [sp, #0]
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	6979      	ldr	r1, [r7, #20]
 800cc2e:	f7ff fe7d 	bl	800c92c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cc32:	687b      	ldr	r3, [r7, #4]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d106      	bne.n	800cc5c <pbuf_realloc+0x20>
 800cc4e:	4b3a      	ldr	r3, [pc, #232]	; (800cd38 <pbuf_realloc+0xfc>)
 800cc50:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cc54:	4939      	ldr	r1, [pc, #228]	; (800cd3c <pbuf_realloc+0x100>)
 800cc56:	483a      	ldr	r0, [pc, #232]	; (800cd40 <pbuf_realloc+0x104>)
 800cc58:	f00a f992 	bl	8016f80 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	891b      	ldrh	r3, [r3, #8]
 800cc60:	887a      	ldrh	r2, [r7, #2]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d263      	bcs.n	800cd2e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	891a      	ldrh	r2, [r3, #8]
 800cc6a:	887b      	ldrh	r3, [r7, #2]
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cc70:	887b      	ldrh	r3, [r7, #2]
 800cc72:	817b      	strh	r3, [r7, #10]
  q = p;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cc78:	e018      	b.n	800ccac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	895b      	ldrh	r3, [r3, #10]
 800cc7e:	897a      	ldrh	r2, [r7, #10]
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	891a      	ldrh	r2, [r3, #8]
 800cc88:	893b      	ldrh	r3, [r7, #8]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <pbuf_realloc+0x70>
 800cc9e:	4b26      	ldr	r3, [pc, #152]	; (800cd38 <pbuf_realloc+0xfc>)
 800cca0:	f240 12af 	movw	r2, #431	; 0x1af
 800cca4:	4927      	ldr	r1, [pc, #156]	; (800cd44 <pbuf_realloc+0x108>)
 800cca6:	4826      	ldr	r0, [pc, #152]	; (800cd40 <pbuf_realloc+0x104>)
 800cca8:	f00a f96a 	bl	8016f80 <iprintf>
  while (rem_len > q->len) {
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	895b      	ldrh	r3, [r3, #10]
 800ccb0:	897a      	ldrh	r2, [r7, #10]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d8e1      	bhi.n	800cc7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	7b1b      	ldrb	r3, [r3, #12]
 800ccba:	f003 030f 	and.w	r3, r3, #15
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d121      	bne.n	800cd06 <pbuf_realloc+0xca>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	895b      	ldrh	r3, [r3, #10]
 800ccc6:	897a      	ldrh	r2, [r7, #10]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d01c      	beq.n	800cd06 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	7b5b      	ldrb	r3, [r3, #13]
 800ccd0:	f003 0302 	and.w	r3, r3, #2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d116      	bne.n	800cd06 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	897b      	ldrh	r3, [r7, #10]
 800cce4:	4413      	add	r3, r2
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	4619      	mov	r1, r3
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f7fe ffaa 	bl	800bc44 <mem_trim>
 800ccf0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d106      	bne.n	800cd06 <pbuf_realloc+0xca>
 800ccf8:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <pbuf_realloc+0xfc>)
 800ccfa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ccfe:	4912      	ldr	r1, [pc, #72]	; (800cd48 <pbuf_realloc+0x10c>)
 800cd00:	480f      	ldr	r0, [pc, #60]	; (800cd40 <pbuf_realloc+0x104>)
 800cd02:	f00a f93d 	bl	8016f80 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	897a      	ldrh	r2, [r7, #10]
 800cd0a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	895a      	ldrh	r2, [r3, #10]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d004      	beq.n	800cd26 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f000 f911 	bl	800cf48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	e000      	b.n	800cd30 <pbuf_realloc+0xf4>
    return;
 800cd2e:	bf00      	nop

}
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	08018a0c 	.word	0x08018a0c
 800cd3c:	08018b24 	.word	0x08018b24
 800cd40:	08018a6c 	.word	0x08018a6c
 800cd44:	08018b3c 	.word	0x08018b3c
 800cd48:	08018b54 	.word	0x08018b54

0800cd4c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	4613      	mov	r3, r2
 800cd58:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d106      	bne.n	800cd6e <pbuf_add_header_impl+0x22>
 800cd60:	4b2b      	ldr	r3, [pc, #172]	; (800ce10 <pbuf_add_header_impl+0xc4>)
 800cd62:	f240 12df 	movw	r2, #479	; 0x1df
 800cd66:	492b      	ldr	r1, [pc, #172]	; (800ce14 <pbuf_add_header_impl+0xc8>)
 800cd68:	482b      	ldr	r0, [pc, #172]	; (800ce18 <pbuf_add_header_impl+0xcc>)
 800cd6a:	f00a f909 	bl	8016f80 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d003      	beq.n	800cd7c <pbuf_add_header_impl+0x30>
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd7a:	d301      	bcc.n	800cd80 <pbuf_add_header_impl+0x34>
    return 1;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e043      	b.n	800ce08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d101      	bne.n	800cd8a <pbuf_add_header_impl+0x3e>
    return 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	e03e      	b.n	800ce08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	891a      	ldrh	r2, [r3, #8]
 800cd92:	8a7b      	ldrh	r3, [r7, #18]
 800cd94:	4413      	add	r3, r2
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	8a7a      	ldrh	r2, [r7, #18]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d901      	bls.n	800cda2 <pbuf_add_header_impl+0x56>
    return 1;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e032      	b.n	800ce08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	7b1b      	ldrb	r3, [r3, #12]
 800cda6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cda8:	8a3b      	ldrh	r3, [r7, #16]
 800cdaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00c      	beq.n	800cdcc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	425b      	negs	r3, r3
 800cdba:	4413      	add	r3, r2
 800cdbc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3310      	adds	r3, #16
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d20d      	bcs.n	800cde4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e01d      	b.n	800ce08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d006      	beq.n	800cde0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	425b      	negs	r3, r3
 800cdda:	4413      	add	r3, r2
 800cddc:	617b      	str	r3, [r7, #20]
 800cdde:	e001      	b.n	800cde4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cde0:	2301      	movs	r3, #1
 800cde2:	e011      	b.n	800ce08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	697a      	ldr	r2, [r7, #20]
 800cde8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	895a      	ldrh	r2, [r3, #10]
 800cdee:	8a7b      	ldrh	r3, [r7, #18]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	891a      	ldrh	r2, [r3, #8]
 800cdfc:	8a7b      	ldrh	r3, [r7, #18]
 800cdfe:	4413      	add	r3, r2
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	811a      	strh	r2, [r3, #8]


  return 0;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	08018a0c 	.word	0x08018a0c
 800ce14:	08018b70 	.word	0x08018b70
 800ce18:	08018a6c 	.word	0x08018a6c

0800ce1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce26:	2200      	movs	r2, #0
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff ff8e 	bl	800cd4c <pbuf_add_header_impl>
 800ce30:	4603      	mov	r3, r0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d106      	bne.n	800ce5a <pbuf_remove_header+0x1e>
 800ce4c:	4b20      	ldr	r3, [pc, #128]	; (800ced0 <pbuf_remove_header+0x94>)
 800ce4e:	f240 224b 	movw	r2, #587	; 0x24b
 800ce52:	4920      	ldr	r1, [pc, #128]	; (800ced4 <pbuf_remove_header+0x98>)
 800ce54:	4820      	ldr	r0, [pc, #128]	; (800ced8 <pbuf_remove_header+0x9c>)
 800ce56:	f00a f893 	bl	8016f80 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <pbuf_remove_header+0x2c>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce66:	d301      	bcc.n	800ce6c <pbuf_remove_header+0x30>
    return 1;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e02c      	b.n	800cec6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d101      	bne.n	800ce76 <pbuf_remove_header+0x3a>
    return 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	e027      	b.n	800cec6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	895b      	ldrh	r3, [r3, #10]
 800ce7e:	89fa      	ldrh	r2, [r7, #14]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d908      	bls.n	800ce96 <pbuf_remove_header+0x5a>
 800ce84:	4b12      	ldr	r3, [pc, #72]	; (800ced0 <pbuf_remove_header+0x94>)
 800ce86:	f240 2255 	movw	r2, #597	; 0x255
 800ce8a:	4914      	ldr	r1, [pc, #80]	; (800cedc <pbuf_remove_header+0xa0>)
 800ce8c:	4812      	ldr	r0, [pc, #72]	; (800ced8 <pbuf_remove_header+0x9c>)
 800ce8e:	f00a f877 	bl	8016f80 <iprintf>
 800ce92:	2301      	movs	r3, #1
 800ce94:	e017      	b.n	800cec6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685a      	ldr	r2, [r3, #4]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	441a      	add	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	895a      	ldrh	r2, [r3, #10]
 800ceac:	89fb      	ldrh	r3, [r7, #14]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	891a      	ldrh	r2, [r3, #8]
 800ceba:	89fb      	ldrh	r3, [r7, #14]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	08018a0c 	.word	0x08018a0c
 800ced4:	08018b70 	.word	0x08018b70
 800ced8:	08018a6c 	.word	0x08018a6c
 800cedc:	08018b7c 	.word	0x08018b7c

0800cee0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	460b      	mov	r3, r1
 800ceea:	807b      	strh	r3, [r7, #2]
 800ceec:	4613      	mov	r3, r2
 800ceee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cef0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	da08      	bge.n	800cf0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cefc:	425b      	negs	r3, r3
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7ff ff9b 	bl	800ce3c <pbuf_remove_header>
 800cf06:	4603      	mov	r3, r0
 800cf08:	e007      	b.n	800cf1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cf0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf0e:	787a      	ldrb	r2, [r7, #1]
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff ff1a 	bl	800cd4c <pbuf_add_header_impl>
 800cf18:	4603      	mov	r3, r0
  }
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b082      	sub	sp, #8
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cf2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf32:	2201      	movs	r2, #1
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff ffd2 	bl	800cee0 <pbuf_header_impl>
 800cf3c:	4603      	mov	r3, r0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d10b      	bne.n	800cf6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <pbuf_free+0x22>
 800cf5c:	4b3b      	ldr	r3, [pc, #236]	; (800d04c <pbuf_free+0x104>)
 800cf5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cf62:	493b      	ldr	r1, [pc, #236]	; (800d050 <pbuf_free+0x108>)
 800cf64:	483b      	ldr	r0, [pc, #236]	; (800d054 <pbuf_free+0x10c>)
 800cf66:	f00a f80b 	bl	8016f80 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e069      	b.n	800d042 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cf72:	e062      	b.n	800d03a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cf74:	f009 fa8c 	bl	8016490 <sys_arch_protect>
 800cf78:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	7b9b      	ldrb	r3, [r3, #14]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d106      	bne.n	800cf90 <pbuf_free+0x48>
 800cf82:	4b32      	ldr	r3, [pc, #200]	; (800d04c <pbuf_free+0x104>)
 800cf84:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cf88:	4933      	ldr	r1, [pc, #204]	; (800d058 <pbuf_free+0x110>)
 800cf8a:	4832      	ldr	r0, [pc, #200]	; (800d054 <pbuf_free+0x10c>)
 800cf8c:	f009 fff8 	bl	8016f80 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7b9b      	ldrb	r3, [r3, #14]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	739a      	strb	r2, [r3, #14]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7b9b      	ldrb	r3, [r3, #14]
 800cfa0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cfa2:	69b8      	ldr	r0, [r7, #24]
 800cfa4:	f009 fa82 	bl	80164ac <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cfa8:	7dfb      	ldrb	r3, [r7, #23]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d143      	bne.n	800d036 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	7b1b      	ldrb	r3, [r3, #12]
 800cfb8:	f003 030f 	and.w	r3, r3, #15
 800cfbc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	7b5b      	ldrb	r3, [r3, #13]
 800cfc2:	f003 0302 	and.w	r3, r3, #2
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d011      	beq.n	800cfee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d106      	bne.n	800cfe4 <pbuf_free+0x9c>
 800cfd6:	4b1d      	ldr	r3, [pc, #116]	; (800d04c <pbuf_free+0x104>)
 800cfd8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cfdc:	491f      	ldr	r1, [pc, #124]	; (800d05c <pbuf_free+0x114>)
 800cfde:	481d      	ldr	r0, [pc, #116]	; (800d054 <pbuf_free+0x10c>)
 800cfe0:	f009 ffce 	bl	8016f80 <iprintf>
        pc->custom_free_function(p);
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	4798      	blx	r3
 800cfec:	e01d      	b.n	800d02a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cfee:	7bfb      	ldrb	r3, [r7, #15]
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d104      	bne.n	800cffe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cff4:	6879      	ldr	r1, [r7, #4]
 800cff6:	200c      	movs	r0, #12
 800cff8:	f7ff f970 	bl	800c2dc <memp_free>
 800cffc:	e015      	b.n	800d02a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d104      	bne.n	800d00e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d004:	6879      	ldr	r1, [r7, #4]
 800d006:	200b      	movs	r0, #11
 800d008:	f7ff f968 	bl	800c2dc <memp_free>
 800d00c:	e00d      	b.n	800d02a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d00e:	7bfb      	ldrb	r3, [r7, #15]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d103      	bne.n	800d01c <pbuf_free+0xd4>
          mem_free(p);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7fe fd85 	bl	800bb24 <mem_free>
 800d01a:	e006      	b.n	800d02a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d01c:	4b0b      	ldr	r3, [pc, #44]	; (800d04c <pbuf_free+0x104>)
 800d01e:	f240 320f 	movw	r2, #783	; 0x30f
 800d022:	490f      	ldr	r1, [pc, #60]	; (800d060 <pbuf_free+0x118>)
 800d024:	480b      	ldr	r0, [pc, #44]	; (800d054 <pbuf_free+0x10c>)
 800d026:	f009 ffab 	bl	8016f80 <iprintf>
        }
      }
      count++;
 800d02a:	7ffb      	ldrb	r3, [r7, #31]
 800d02c:	3301      	adds	r3, #1
 800d02e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	607b      	str	r3, [r7, #4]
 800d034:	e001      	b.n	800d03a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d036:	2300      	movs	r3, #0
 800d038:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d199      	bne.n	800cf74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d040:	7ffb      	ldrb	r3, [r7, #31]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3720      	adds	r7, #32
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	08018a0c 	.word	0x08018a0c
 800d050:	08018b70 	.word	0x08018b70
 800d054:	08018a6c 	.word	0x08018a6c
 800d058:	08018b9c 	.word	0x08018b9c
 800d05c:	08018bb4 	.word	0x08018bb4
 800d060:	08018bd8 	.word	0x08018bd8

0800d064 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d070:	e005      	b.n	800d07e <pbuf_clen+0x1a>
    ++len;
 800d072:	89fb      	ldrh	r3, [r7, #14]
 800d074:	3301      	adds	r3, #1
 800d076:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1f6      	bne.n	800d072 <pbuf_clen+0xe>
  }
  return len;
 800d084:	89fb      	ldrh	r3, [r7, #14]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bc80      	pop	{r7}
 800d08e:	4770      	bx	lr

0800d090 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d016      	beq.n	800d0cc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d09e:	f009 f9f7 	bl	8016490 <sys_arch_protect>
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7b9b      	ldrb	r3, [r3, #14]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	739a      	strb	r2, [r3, #14]
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f009 f9fb 	bl	80164ac <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	7b9b      	ldrb	r3, [r3, #14]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d106      	bne.n	800d0cc <pbuf_ref+0x3c>
 800d0be:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <pbuf_ref+0x44>)
 800d0c0:	f240 3242 	movw	r2, #834	; 0x342
 800d0c4:	4904      	ldr	r1, [pc, #16]	; (800d0d8 <pbuf_ref+0x48>)
 800d0c6:	4805      	ldr	r0, [pc, #20]	; (800d0dc <pbuf_ref+0x4c>)
 800d0c8:	f009 ff5a 	bl	8016f80 <iprintf>
  }
}
 800d0cc:	bf00      	nop
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	08018a0c 	.word	0x08018a0c
 800d0d8:	08018bec 	.word	0x08018bec
 800d0dc:	08018a6c 	.word	0x08018a6c

0800d0e0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <pbuf_cat+0x16>
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d107      	bne.n	800d106 <pbuf_cat+0x26>
 800d0f6:	4b20      	ldr	r3, [pc, #128]	; (800d178 <pbuf_cat+0x98>)
 800d0f8:	f240 3259 	movw	r2, #857	; 0x359
 800d0fc:	491f      	ldr	r1, [pc, #124]	; (800d17c <pbuf_cat+0x9c>)
 800d0fe:	4820      	ldr	r0, [pc, #128]	; (800d180 <pbuf_cat+0xa0>)
 800d100:	f009 ff3e 	bl	8016f80 <iprintf>
 800d104:	e034      	b.n	800d170 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	60fb      	str	r3, [r7, #12]
 800d10a:	e00a      	b.n	800d122 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	891a      	ldrh	r2, [r3, #8]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	891b      	ldrh	r3, [r3, #8]
 800d114:	4413      	add	r3, r2
 800d116:	b29a      	uxth	r2, r3
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1f0      	bne.n	800d10c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	891a      	ldrh	r2, [r3, #8]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	895b      	ldrh	r3, [r3, #10]
 800d132:	429a      	cmp	r2, r3
 800d134:	d006      	beq.n	800d144 <pbuf_cat+0x64>
 800d136:	4b10      	ldr	r3, [pc, #64]	; (800d178 <pbuf_cat+0x98>)
 800d138:	f240 3262 	movw	r2, #866	; 0x362
 800d13c:	4911      	ldr	r1, [pc, #68]	; (800d184 <pbuf_cat+0xa4>)
 800d13e:	4810      	ldr	r0, [pc, #64]	; (800d180 <pbuf_cat+0xa0>)
 800d140:	f009 ff1e 	bl	8016f80 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d006      	beq.n	800d15a <pbuf_cat+0x7a>
 800d14c:	4b0a      	ldr	r3, [pc, #40]	; (800d178 <pbuf_cat+0x98>)
 800d14e:	f240 3263 	movw	r2, #867	; 0x363
 800d152:	490d      	ldr	r1, [pc, #52]	; (800d188 <pbuf_cat+0xa8>)
 800d154:	480a      	ldr	r0, [pc, #40]	; (800d180 <pbuf_cat+0xa0>)
 800d156:	f009 ff13 	bl	8016f80 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	891a      	ldrh	r2, [r3, #8]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	891b      	ldrh	r3, [r3, #8]
 800d162:	4413      	add	r3, r2
 800d164:	b29a      	uxth	r2, r3
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	08018a0c 	.word	0x08018a0c
 800d17c:	08018c00 	.word	0x08018c00
 800d180:	08018a6c 	.word	0x08018a6c
 800d184:	08018c38 	.word	0x08018c38
 800d188:	08018c68 	.word	0x08018c68

0800d18c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d196:	2300      	movs	r3, #0
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	2300      	movs	r3, #0
 800d19c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d008      	beq.n	800d1b6 <pbuf_copy+0x2a>
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d005      	beq.n	800d1b6 <pbuf_copy+0x2a>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	891a      	ldrh	r2, [r3, #8]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	891b      	ldrh	r3, [r3, #8]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d209      	bcs.n	800d1ca <pbuf_copy+0x3e>
 800d1b6:	4b57      	ldr	r3, [pc, #348]	; (800d314 <pbuf_copy+0x188>)
 800d1b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d1bc:	4956      	ldr	r1, [pc, #344]	; (800d318 <pbuf_copy+0x18c>)
 800d1be:	4857      	ldr	r0, [pc, #348]	; (800d31c <pbuf_copy+0x190>)
 800d1c0:	f009 fede 	bl	8016f80 <iprintf>
 800d1c4:	f06f 030f 	mvn.w	r3, #15
 800d1c8:	e09f      	b.n	800d30a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	895b      	ldrh	r3, [r3, #10]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	1ad2      	subs	r2, r2, r3
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	895b      	ldrh	r3, [r3, #10]
 800d1d8:	4619      	mov	r1, r3
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	1acb      	subs	r3, r1, r3
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d306      	bcc.n	800d1f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	895b      	ldrh	r3, [r3, #10]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	e005      	b.n	800d1fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	895b      	ldrh	r3, [r3, #10]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	18d0      	adds	r0, r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	4413      	add	r3, r2
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	4619      	mov	r1, r3
 800d210:	f009 fdc2 	bl	8016d98 <memcpy>
    offset_to += len;
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	4413      	add	r3, r2
 800d21a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d21c:	693a      	ldr	r2, [r7, #16]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	4413      	add	r3, r2
 800d222:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	895b      	ldrh	r3, [r3, #10]
 800d228:	461a      	mov	r2, r3
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d906      	bls.n	800d23e <pbuf_copy+0xb2>
 800d230:	4b38      	ldr	r3, [pc, #224]	; (800d314 <pbuf_copy+0x188>)
 800d232:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d236:	493a      	ldr	r1, [pc, #232]	; (800d320 <pbuf_copy+0x194>)
 800d238:	4838      	ldr	r0, [pc, #224]	; (800d31c <pbuf_copy+0x190>)
 800d23a:	f009 fea1 	bl	8016f80 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	895b      	ldrh	r3, [r3, #10]
 800d242:	461a      	mov	r2, r3
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	4293      	cmp	r3, r2
 800d248:	d906      	bls.n	800d258 <pbuf_copy+0xcc>
 800d24a:	4b32      	ldr	r3, [pc, #200]	; (800d314 <pbuf_copy+0x188>)
 800d24c:	f240 32da 	movw	r2, #986	; 0x3da
 800d250:	4934      	ldr	r1, [pc, #208]	; (800d324 <pbuf_copy+0x198>)
 800d252:	4832      	ldr	r0, [pc, #200]	; (800d31c <pbuf_copy+0x190>)
 800d254:	f009 fe94 	bl	8016f80 <iprintf>
    if (offset_from >= p_from->len) {
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	895b      	ldrh	r3, [r3, #10]
 800d25c:	461a      	mov	r2, r3
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	4293      	cmp	r3, r2
 800d262:	d304      	bcc.n	800d26e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d264:	2300      	movs	r3, #0
 800d266:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	895b      	ldrh	r3, [r3, #10]
 800d272:	461a      	mov	r2, r3
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	4293      	cmp	r3, r2
 800d278:	d114      	bne.n	800d2a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10c      	bne.n	800d2a4 <pbuf_copy+0x118>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d009      	beq.n	800d2a4 <pbuf_copy+0x118>
 800d290:	4b20      	ldr	r3, [pc, #128]	; (800d314 <pbuf_copy+0x188>)
 800d292:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d296:	4924      	ldr	r1, [pc, #144]	; (800d328 <pbuf_copy+0x19c>)
 800d298:	4820      	ldr	r0, [pc, #128]	; (800d31c <pbuf_copy+0x190>)
 800d29a:	f009 fe71 	bl	8016f80 <iprintf>
 800d29e:	f06f 030f 	mvn.w	r3, #15
 800d2a2:	e032      	b.n	800d30a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d013      	beq.n	800d2d2 <pbuf_copy+0x146>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	895a      	ldrh	r2, [r3, #10]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	891b      	ldrh	r3, [r3, #8]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d10d      	bne.n	800d2d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d009      	beq.n	800d2d2 <pbuf_copy+0x146>
 800d2be:	4b15      	ldr	r3, [pc, #84]	; (800d314 <pbuf_copy+0x188>)
 800d2c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d2c4:	4919      	ldr	r1, [pc, #100]	; (800d32c <pbuf_copy+0x1a0>)
 800d2c6:	4815      	ldr	r0, [pc, #84]	; (800d31c <pbuf_copy+0x190>)
 800d2c8:	f009 fe5a 	bl	8016f80 <iprintf>
 800d2cc:	f06f 0305 	mvn.w	r3, #5
 800d2d0:	e01b      	b.n	800d30a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d013      	beq.n	800d300 <pbuf_copy+0x174>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	895a      	ldrh	r2, [r3, #10]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	891b      	ldrh	r3, [r3, #8]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d10d      	bne.n	800d300 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d009      	beq.n	800d300 <pbuf_copy+0x174>
 800d2ec:	4b09      	ldr	r3, [pc, #36]	; (800d314 <pbuf_copy+0x188>)
 800d2ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d2f2:	490e      	ldr	r1, [pc, #56]	; (800d32c <pbuf_copy+0x1a0>)
 800d2f4:	4809      	ldr	r0, [pc, #36]	; (800d31c <pbuf_copy+0x190>)
 800d2f6:	f009 fe43 	bl	8016f80 <iprintf>
 800d2fa:	f06f 0305 	mvn.w	r3, #5
 800d2fe:	e004      	b.n	800d30a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	f47f af61 	bne.w	800d1ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	08018a0c 	.word	0x08018a0c
 800d318:	08018cb4 	.word	0x08018cb4
 800d31c:	08018a6c 	.word	0x08018a6c
 800d320:	08018ce4 	.word	0x08018ce4
 800d324:	08018cfc 	.word	0x08018cfc
 800d328:	08018d18 	.word	0x08018d18
 800d32c:	08018d28 	.word	0x08018d28

0800d330 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	4611      	mov	r1, r2
 800d33c:	461a      	mov	r2, r3
 800d33e:	460b      	mov	r3, r1
 800d340:	80fb      	strh	r3, [r7, #6]
 800d342:	4613      	mov	r3, r2
 800d344:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d108      	bne.n	800d366 <pbuf_copy_partial+0x36>
 800d354:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <pbuf_copy_partial+0xd4>)
 800d356:	f240 420a 	movw	r2, #1034	; 0x40a
 800d35a:	492b      	ldr	r1, [pc, #172]	; (800d408 <pbuf_copy_partial+0xd8>)
 800d35c:	482b      	ldr	r0, [pc, #172]	; (800d40c <pbuf_copy_partial+0xdc>)
 800d35e:	f009 fe0f 	bl	8016f80 <iprintf>
 800d362:	2300      	movs	r3, #0
 800d364:	e04a      	b.n	800d3fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d108      	bne.n	800d37e <pbuf_copy_partial+0x4e>
 800d36c:	4b25      	ldr	r3, [pc, #148]	; (800d404 <pbuf_copy_partial+0xd4>)
 800d36e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d372:	4927      	ldr	r1, [pc, #156]	; (800d410 <pbuf_copy_partial+0xe0>)
 800d374:	4825      	ldr	r0, [pc, #148]	; (800d40c <pbuf_copy_partial+0xdc>)
 800d376:	f009 fe03 	bl	8016f80 <iprintf>
 800d37a:	2300      	movs	r3, #0
 800d37c:	e03e      	b.n	800d3fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	61fb      	str	r3, [r7, #28]
 800d382:	e034      	b.n	800d3ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d384:	88bb      	ldrh	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00a      	beq.n	800d3a0 <pbuf_copy_partial+0x70>
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	895b      	ldrh	r3, [r3, #10]
 800d38e:	88ba      	ldrh	r2, [r7, #4]
 800d390:	429a      	cmp	r2, r3
 800d392:	d305      	bcc.n	800d3a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	895b      	ldrh	r3, [r3, #10]
 800d398:	88ba      	ldrh	r2, [r7, #4]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	80bb      	strh	r3, [r7, #4]
 800d39e:	e023      	b.n	800d3e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	895a      	ldrh	r2, [r3, #10]
 800d3a4:	88bb      	ldrh	r3, [r7, #4]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d3aa:	8b3a      	ldrh	r2, [r7, #24]
 800d3ac:	88fb      	ldrh	r3, [r7, #6]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d901      	bls.n	800d3b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d3b2:	88fb      	ldrh	r3, [r7, #6]
 800d3b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d3b6:	8b7b      	ldrh	r3, [r7, #26]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	18d0      	adds	r0, r2, r3
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	685a      	ldr	r2, [r3, #4]
 800d3c0:	88bb      	ldrh	r3, [r7, #4]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	8b3a      	ldrh	r2, [r7, #24]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	f009 fce6 	bl	8016d98 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d3cc:	8afa      	ldrh	r2, [r7, #22]
 800d3ce:	8b3b      	ldrh	r3, [r7, #24]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d3d4:	8b7a      	ldrh	r2, [r7, #26]
 800d3d6:	8b3b      	ldrh	r3, [r7, #24]
 800d3d8:	4413      	add	r3, r2
 800d3da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d3dc:	88fa      	ldrh	r2, [r7, #6]
 800d3de:	8b3b      	ldrh	r3, [r7, #24]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	61fb      	str	r3, [r7, #28]
 800d3ee:	88fb      	ldrh	r3, [r7, #6]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <pbuf_copy_partial+0xca>
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1c4      	bne.n	800d384 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d3fa:	8afb      	ldrh	r3, [r7, #22]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3720      	adds	r7, #32
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	08018a0c 	.word	0x08018a0c
 800d408:	08018d54 	.word	0x08018d54
 800d40c:	08018a6c 	.word	0x08018a6c
 800d410:	08018d74 	.word	0x08018d74

0800d414 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d414:	b480      	push	{r7}
 800d416:	b087      	sub	sp, #28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	460b      	mov	r3, r1
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d422:	897b      	ldrh	r3, [r7, #10]
 800d424:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d42a:	e007      	b.n	800d43c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	895b      	ldrh	r3, [r3, #10]
 800d430:	8afa      	ldrh	r2, [r7, #22]
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d004      	beq.n	800d44c <pbuf_skip_const+0x38>
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	895b      	ldrh	r3, [r3, #10]
 800d446:	8afa      	ldrh	r2, [r7, #22]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d2ef      	bcs.n	800d42c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d002      	beq.n	800d458 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	8afa      	ldrh	r2, [r7, #22]
 800d456:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d458:	693b      	ldr	r3, [r7, #16]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	371c      	adds	r7, #28
 800d45e:	46bd      	mov	sp, r7
 800d460:	bc80      	pop	{r7}
 800d462:	4770      	bx	lr

0800d464 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	603a      	str	r2, [r7, #0]
 800d46e:	71fb      	strb	r3, [r7, #7]
 800d470:	460b      	mov	r3, r1
 800d472:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	8919      	ldrh	r1, [r3, #8]
 800d478:	88ba      	ldrh	r2, [r7, #4]
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff fa7f 	bl	800c980 <pbuf_alloc>
 800d482:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d101      	bne.n	800d48e <pbuf_clone+0x2a>
    return NULL;
 800d48a:	2300      	movs	r3, #0
 800d48c:	e011      	b.n	800d4b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f7ff fe7b 	bl	800d18c <pbuf_copy>
 800d496:	4603      	mov	r3, r0
 800d498:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d49a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d006      	beq.n	800d4b0 <pbuf_clone+0x4c>
 800d4a2:	4b06      	ldr	r3, [pc, #24]	; (800d4bc <pbuf_clone+0x58>)
 800d4a4:	f240 5224 	movw	r2, #1316	; 0x524
 800d4a8:	4905      	ldr	r1, [pc, #20]	; (800d4c0 <pbuf_clone+0x5c>)
 800d4aa:	4806      	ldr	r0, [pc, #24]	; (800d4c4 <pbuf_clone+0x60>)
 800d4ac:	f009 fd68 	bl	8016f80 <iprintf>
  return q;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	08018a0c 	.word	0x08018a0c
 800d4c0:	08018e80 	.word	0x08018e80
 800d4c4:	08018a6c 	.word	0x08018a6c

0800d4c8 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800d4d4:	887b      	ldrh	r3, [r7, #2]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 f80c 	bl	800d4f6 <pbuf_try_get_at>
 800d4de:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	db02      	blt.n	800d4ec <pbuf_get_at+0x24>
    return (u8_t)ret;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	e000      	b.n	800d4ee <pbuf_get_at+0x26>
  }
  return 0;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b084      	sub	sp, #16
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	460b      	mov	r3, r1
 800d500:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800d502:	f107 020a 	add.w	r2, r7, #10
 800d506:	887b      	ldrh	r3, [r7, #2]
 800d508:	4619      	mov	r1, r3
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7ff ff82 	bl	800d414 <pbuf_skip_const>
 800d510:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00a      	beq.n	800d52e <pbuf_try_get_at+0x38>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	895a      	ldrh	r2, [r3, #10]
 800d51c:	897b      	ldrh	r3, [r7, #10]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d905      	bls.n	800d52e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	897a      	ldrh	r2, [r7, #10]
 800d528:	4413      	add	r3, r2
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	e001      	b.n	800d532 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800d52e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
	...

0800d53c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d540:	f009 fd36 	bl	8016fb0 <rand>
 800d544:	4603      	mov	r3, r0
 800d546:	b29b      	uxth	r3, r3
 800d548:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d552:	b29a      	uxth	r2, r3
 800d554:	4b01      	ldr	r3, [pc, #4]	; (800d55c <tcp_init+0x20>)
 800d556:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d558:	bf00      	nop
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20000010 	.word	0x20000010

0800d560 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	7d1b      	ldrb	r3, [r3, #20]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d105      	bne.n	800d57c <tcp_free+0x1c>
 800d570:	4b06      	ldr	r3, [pc, #24]	; (800d58c <tcp_free+0x2c>)
 800d572:	22d4      	movs	r2, #212	; 0xd4
 800d574:	4906      	ldr	r1, [pc, #24]	; (800d590 <tcp_free+0x30>)
 800d576:	4807      	ldr	r0, [pc, #28]	; (800d594 <tcp_free+0x34>)
 800d578:	f009 fd02 	bl	8016f80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d57c:	6879      	ldr	r1, [r7, #4]
 800d57e:	2001      	movs	r0, #1
 800d580:	f7fe feac 	bl	800c2dc <memp_free>
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	08018f0c 	.word	0x08018f0c
 800d590:	08018f3c 	.word	0x08018f3c
 800d594:	08018f50 	.word	0x08018f50

0800d598 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	7d1b      	ldrb	r3, [r3, #20]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d105      	bne.n	800d5b4 <tcp_free_listen+0x1c>
 800d5a8:	4b06      	ldr	r3, [pc, #24]	; (800d5c4 <tcp_free_listen+0x2c>)
 800d5aa:	22df      	movs	r2, #223	; 0xdf
 800d5ac:	4906      	ldr	r1, [pc, #24]	; (800d5c8 <tcp_free_listen+0x30>)
 800d5ae:	4807      	ldr	r0, [pc, #28]	; (800d5cc <tcp_free_listen+0x34>)
 800d5b0:	f009 fce6 	bl	8016f80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	2002      	movs	r0, #2
 800d5b8:	f7fe fe90 	bl	800c2dc <memp_free>
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	08018f0c 	.word	0x08018f0c
 800d5c8:	08018f78 	.word	0x08018f78
 800d5cc:	08018f50 	.word	0x08018f50

0800d5d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d5d4:	f001 f898 	bl	800e708 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d5d8:	4b07      	ldr	r3, [pc, #28]	; (800d5f8 <tcp_tmr+0x28>)
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	4b05      	ldr	r3, [pc, #20]	; (800d5f8 <tcp_tmr+0x28>)
 800d5e2:	701a      	strb	r2, [r3, #0]
 800d5e4:	4b04      	ldr	r3, [pc, #16]	; (800d5f8 <tcp_tmr+0x28>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d5f0:	f000 fd4a 	bl	800e088 <tcp_slowtmr>
  }
}
 800d5f4:	bf00      	nop
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	2000be4d 	.word	0x2000be4d

0800d5fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d105      	bne.n	800d618 <tcp_remove_listener+0x1c>
 800d60c:	4b0d      	ldr	r3, [pc, #52]	; (800d644 <tcp_remove_listener+0x48>)
 800d60e:	22ff      	movs	r2, #255	; 0xff
 800d610:	490d      	ldr	r1, [pc, #52]	; (800d648 <tcp_remove_listener+0x4c>)
 800d612:	480e      	ldr	r0, [pc, #56]	; (800d64c <tcp_remove_listener+0x50>)
 800d614:	f009 fcb4 	bl	8016f80 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	e00a      	b.n	800d634 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	429a      	cmp	r2, r3
 800d626:	d102      	bne.n	800d62e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1f1      	bne.n	800d61e <tcp_remove_listener+0x22>
    }
  }
}
 800d63a:	bf00      	nop
 800d63c:	bf00      	nop
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	08018f0c 	.word	0x08018f0c
 800d648:	08018f94 	.word	0x08018f94
 800d64c:	08018f50 	.word	0x08018f50

0800d650 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d106      	bne.n	800d66c <tcp_listen_closed+0x1c>
 800d65e:	4b14      	ldr	r3, [pc, #80]	; (800d6b0 <tcp_listen_closed+0x60>)
 800d660:	f240 1211 	movw	r2, #273	; 0x111
 800d664:	4913      	ldr	r1, [pc, #76]	; (800d6b4 <tcp_listen_closed+0x64>)
 800d666:	4814      	ldr	r0, [pc, #80]	; (800d6b8 <tcp_listen_closed+0x68>)
 800d668:	f009 fc8a 	bl	8016f80 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	7d1b      	ldrb	r3, [r3, #20]
 800d670:	2b01      	cmp	r3, #1
 800d672:	d006      	beq.n	800d682 <tcp_listen_closed+0x32>
 800d674:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <tcp_listen_closed+0x60>)
 800d676:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d67a:	4910      	ldr	r1, [pc, #64]	; (800d6bc <tcp_listen_closed+0x6c>)
 800d67c:	480e      	ldr	r0, [pc, #56]	; (800d6b8 <tcp_listen_closed+0x68>)
 800d67e:	f009 fc7f 	bl	8016f80 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d682:	2301      	movs	r3, #1
 800d684:	60fb      	str	r3, [r7, #12]
 800d686:	e00b      	b.n	800d6a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d688:	4a0d      	ldr	r2, [pc, #52]	; (800d6c0 <tcp_listen_closed+0x70>)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	6879      	ldr	r1, [r7, #4]
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff ffb1 	bl	800d5fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	3301      	adds	r3, #1
 800d69e:	60fb      	str	r3, [r7, #12]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2b03      	cmp	r3, #3
 800d6a4:	d9f0      	bls.n	800d688 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d6a6:	bf00      	nop
 800d6a8:	bf00      	nop
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	08018f0c 	.word	0x08018f0c
 800d6b4:	08018fbc 	.word	0x08018fbc
 800d6b8:	08018f50 	.word	0x08018f50
 800d6bc:	08018fc8 	.word	0x08018fc8
 800d6c0:	0801af38 	.word	0x0801af38

0800d6c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d6c4:	b5b0      	push	{r4, r5, r7, lr}
 800d6c6:	b088      	sub	sp, #32
 800d6c8:	af04      	add	r7, sp, #16
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d106      	bne.n	800d6e4 <tcp_close_shutdown+0x20>
 800d6d6:	4b63      	ldr	r3, [pc, #396]	; (800d864 <tcp_close_shutdown+0x1a0>)
 800d6d8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d6dc:	4962      	ldr	r1, [pc, #392]	; (800d868 <tcp_close_shutdown+0x1a4>)
 800d6de:	4863      	ldr	r0, [pc, #396]	; (800d86c <tcp_close_shutdown+0x1a8>)
 800d6e0:	f009 fc4e 	bl	8016f80 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d6e4:	78fb      	ldrb	r3, [r7, #3]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d066      	beq.n	800d7b8 <tcp_close_shutdown+0xf4>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	7d1b      	ldrb	r3, [r3, #20]
 800d6ee:	2b04      	cmp	r3, #4
 800d6f0:	d003      	beq.n	800d6fa <tcp_close_shutdown+0x36>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	7d1b      	ldrb	r3, [r3, #20]
 800d6f6:	2b07      	cmp	r3, #7
 800d6f8:	d15e      	bne.n	800d7b8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d104      	bne.n	800d70c <tcp_close_shutdown+0x48>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d706:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d70a:	d055      	beq.n	800d7b8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	8b5b      	ldrh	r3, [r3, #26]
 800d710:	f003 0310 	and.w	r3, r3, #16
 800d714:	2b00      	cmp	r3, #0
 800d716:	d106      	bne.n	800d726 <tcp_close_shutdown+0x62>
 800d718:	4b52      	ldr	r3, [pc, #328]	; (800d864 <tcp_close_shutdown+0x1a0>)
 800d71a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d71e:	4954      	ldr	r1, [pc, #336]	; (800d870 <tcp_close_shutdown+0x1ac>)
 800d720:	4852      	ldr	r0, [pc, #328]	; (800d86c <tcp_close_shutdown+0x1a8>)
 800d722:	f009 fc2d 	bl	8016f80 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d72e:	687d      	ldr	r5, [r7, #4]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	3304      	adds	r3, #4
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	8ad2      	ldrh	r2, [r2, #22]
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	8b09      	ldrh	r1, [r1, #24]
 800d73c:	9102      	str	r1, [sp, #8]
 800d73e:	9201      	str	r2, [sp, #4]
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	462b      	mov	r3, r5
 800d744:	4622      	mov	r2, r4
 800d746:	4601      	mov	r1, r0
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f005 fd93 	bl	8013274 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f001 fb70 	bl	800ee34 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d754:	4b47      	ldr	r3, [pc, #284]	; (800d874 <tcp_close_shutdown+0x1b0>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d105      	bne.n	800d76a <tcp_close_shutdown+0xa6>
 800d75e:	4b45      	ldr	r3, [pc, #276]	; (800d874 <tcp_close_shutdown+0x1b0>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	4a43      	ldr	r2, [pc, #268]	; (800d874 <tcp_close_shutdown+0x1b0>)
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	e013      	b.n	800d792 <tcp_close_shutdown+0xce>
 800d76a:	4b42      	ldr	r3, [pc, #264]	; (800d874 <tcp_close_shutdown+0x1b0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	60fb      	str	r3, [r7, #12]
 800d770:	e00c      	b.n	800d78c <tcp_close_shutdown+0xc8>
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d104      	bne.n	800d786 <tcp_close_shutdown+0xc2>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	68da      	ldr	r2, [r3, #12]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	60da      	str	r2, [r3, #12]
 800d784:	e005      	b.n	800d792 <tcp_close_shutdown+0xce>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1ef      	bne.n	800d772 <tcp_close_shutdown+0xae>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	60da      	str	r2, [r3, #12]
 800d798:	4b37      	ldr	r3, [pc, #220]	; (800d878 <tcp_close_shutdown+0x1b4>)
 800d79a:	2201      	movs	r2, #1
 800d79c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d79e:	4b37      	ldr	r3, [pc, #220]	; (800d87c <tcp_close_shutdown+0x1b8>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d102      	bne.n	800d7ae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d7a8:	f004 f808 	bl	80117bc <tcp_trigger_input_pcb_close>
 800d7ac:	e002      	b.n	800d7b4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff fed6 	bl	800d560 <tcp_free>
      }
      return ERR_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	e050      	b.n	800d85a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	7d1b      	ldrb	r3, [r3, #20]
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d03b      	beq.n	800d838 <tcp_close_shutdown+0x174>
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	dc44      	bgt.n	800d84e <tcp_close_shutdown+0x18a>
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <tcp_close_shutdown+0x10a>
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d02a      	beq.n	800d822 <tcp_close_shutdown+0x15e>
 800d7cc:	e03f      	b.n	800d84e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	8adb      	ldrh	r3, [r3, #22]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d021      	beq.n	800d81a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d7d6:	4b2a      	ldr	r3, [pc, #168]	; (800d880 <tcp_close_shutdown+0x1bc>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d105      	bne.n	800d7ec <tcp_close_shutdown+0x128>
 800d7e0:	4b27      	ldr	r3, [pc, #156]	; (800d880 <tcp_close_shutdown+0x1bc>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	4a26      	ldr	r2, [pc, #152]	; (800d880 <tcp_close_shutdown+0x1bc>)
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	e013      	b.n	800d814 <tcp_close_shutdown+0x150>
 800d7ec:	4b24      	ldr	r3, [pc, #144]	; (800d880 <tcp_close_shutdown+0x1bc>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	60bb      	str	r3, [r7, #8]
 800d7f2:	e00c      	b.n	800d80e <tcp_close_shutdown+0x14a>
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d104      	bne.n	800d808 <tcp_close_shutdown+0x144>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68da      	ldr	r2, [r3, #12]
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	60da      	str	r2, [r3, #12]
 800d806:	e005      	b.n	800d814 <tcp_close_shutdown+0x150>
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	60bb      	str	r3, [r7, #8]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1ef      	bne.n	800d7f4 <tcp_close_shutdown+0x130>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7ff fea0 	bl	800d560 <tcp_free>
      break;
 800d820:	e01a      	b.n	800d858 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff ff14 	bl	800d650 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d828:	6879      	ldr	r1, [r7, #4]
 800d82a:	4816      	ldr	r0, [pc, #88]	; (800d884 <tcp_close_shutdown+0x1c0>)
 800d82c:	f001 fb52 	bl	800eed4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f7ff feb1 	bl	800d598 <tcp_free_listen>
      break;
 800d836:	e00f      	b.n	800d858 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d838:	6879      	ldr	r1, [r7, #4]
 800d83a:	480e      	ldr	r0, [pc, #56]	; (800d874 <tcp_close_shutdown+0x1b0>)
 800d83c:	f001 fb4a 	bl	800eed4 <tcp_pcb_remove>
 800d840:	4b0d      	ldr	r3, [pc, #52]	; (800d878 <tcp_close_shutdown+0x1b4>)
 800d842:	2201      	movs	r2, #1
 800d844:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff fe8a 	bl	800d560 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d84c:	e004      	b.n	800d858 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f81a 	bl	800d888 <tcp_close_shutdown_fin>
 800d854:	4603      	mov	r3, r0
 800d856:	e000      	b.n	800d85a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bdb0      	pop	{r4, r5, r7, pc}
 800d862:	bf00      	nop
 800d864:	08018f0c 	.word	0x08018f0c
 800d868:	08018fe0 	.word	0x08018fe0
 800d86c:	08018f50 	.word	0x08018f50
 800d870:	08019000 	.word	0x08019000
 800d874:	2000be44 	.word	0x2000be44
 800d878:	2000be4c 	.word	0x2000be4c
 800d87c:	2000be84 	.word	0x2000be84
 800d880:	2000be3c 	.word	0x2000be3c
 800d884:	2000be40 	.word	0x2000be40

0800d888 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d106      	bne.n	800d8a4 <tcp_close_shutdown_fin+0x1c>
 800d896:	4b2e      	ldr	r3, [pc, #184]	; (800d950 <tcp_close_shutdown_fin+0xc8>)
 800d898:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d89c:	492d      	ldr	r1, [pc, #180]	; (800d954 <tcp_close_shutdown_fin+0xcc>)
 800d89e:	482e      	ldr	r0, [pc, #184]	; (800d958 <tcp_close_shutdown_fin+0xd0>)
 800d8a0:	f009 fb6e 	bl	8016f80 <iprintf>

  switch (pcb->state) {
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	7d1b      	ldrb	r3, [r3, #20]
 800d8a8:	2b07      	cmp	r3, #7
 800d8aa:	d020      	beq.n	800d8ee <tcp_close_shutdown_fin+0x66>
 800d8ac:	2b07      	cmp	r3, #7
 800d8ae:	dc2b      	bgt.n	800d908 <tcp_close_shutdown_fin+0x80>
 800d8b0:	2b03      	cmp	r3, #3
 800d8b2:	d002      	beq.n	800d8ba <tcp_close_shutdown_fin+0x32>
 800d8b4:	2b04      	cmp	r3, #4
 800d8b6:	d00d      	beq.n	800d8d4 <tcp_close_shutdown_fin+0x4c>
 800d8b8:	e026      	b.n	800d908 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f004 fde8 	bl	8012490 <tcp_send_fin>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d11f      	bne.n	800d90c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2205      	movs	r2, #5
 800d8d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8d2:	e01b      	b.n	800d90c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f004 fddb 	bl	8012490 <tcp_send_fin>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d114      	bne.n	800d910 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2205      	movs	r2, #5
 800d8ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8ec:	e010      	b.n	800d910 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f004 fdce 	bl	8012490 <tcp_send_fin>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d109      	bne.n	800d914 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2209      	movs	r2, #9
 800d904:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d906:	e005      	b.n	800d914 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d908:	2300      	movs	r3, #0
 800d90a:	e01c      	b.n	800d946 <tcp_close_shutdown_fin+0xbe>
      break;
 800d90c:	bf00      	nop
 800d90e:	e002      	b.n	800d916 <tcp_close_shutdown_fin+0x8e>
      break;
 800d910:	bf00      	nop
 800d912:	e000      	b.n	800d916 <tcp_close_shutdown_fin+0x8e>
      break;
 800d914:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d103      	bne.n	800d926 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f004 fef4 	bl	801270c <tcp_output>
 800d924:	e00d      	b.n	800d942 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d92e:	d108      	bne.n	800d942 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	8b5b      	ldrh	r3, [r3, #26]
 800d934:	f043 0308 	orr.w	r3, r3, #8
 800d938:	b29a      	uxth	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	e001      	b.n	800d946 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d942:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	08018f0c 	.word	0x08018f0c
 800d954:	08018fbc 	.word	0x08018fbc
 800d958:	08018f50 	.word	0x08018f50

0800d95c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d109      	bne.n	800d97e <tcp_close+0x22>
 800d96a:	4b0f      	ldr	r3, [pc, #60]	; (800d9a8 <tcp_close+0x4c>)
 800d96c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d970:	490e      	ldr	r1, [pc, #56]	; (800d9ac <tcp_close+0x50>)
 800d972:	480f      	ldr	r0, [pc, #60]	; (800d9b0 <tcp_close+0x54>)
 800d974:	f009 fb04 	bl	8016f80 <iprintf>
 800d978:	f06f 030f 	mvn.w	r3, #15
 800d97c:	e00f      	b.n	800d99e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	7d1b      	ldrb	r3, [r3, #20]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d006      	beq.n	800d994 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	8b5b      	ldrh	r3, [r3, #26]
 800d98a:	f043 0310 	orr.w	r3, r3, #16
 800d98e:	b29a      	uxth	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d994:	2101      	movs	r1, #1
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f7ff fe94 	bl	800d6c4 <tcp_close_shutdown>
 800d99c:	4603      	mov	r3, r0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	08018f0c 	.word	0x08018f0c
 800d9ac:	0801901c 	.word	0x0801901c
 800d9b0:	08018f50 	.word	0x08018f50

0800d9b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08e      	sub	sp, #56	; 0x38
 800d9b8:	af04      	add	r7, sp, #16
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d107      	bne.n	800d9d4 <tcp_abandon+0x20>
 800d9c4:	4b52      	ldr	r3, [pc, #328]	; (800db10 <tcp_abandon+0x15c>)
 800d9c6:	f240 223d 	movw	r2, #573	; 0x23d
 800d9ca:	4952      	ldr	r1, [pc, #328]	; (800db14 <tcp_abandon+0x160>)
 800d9cc:	4852      	ldr	r0, [pc, #328]	; (800db18 <tcp_abandon+0x164>)
 800d9ce:	f009 fad7 	bl	8016f80 <iprintf>
 800d9d2:	e099      	b.n	800db08 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	7d1b      	ldrb	r3, [r3, #20]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d106      	bne.n	800d9ea <tcp_abandon+0x36>
 800d9dc:	4b4c      	ldr	r3, [pc, #304]	; (800db10 <tcp_abandon+0x15c>)
 800d9de:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d9e2:	494e      	ldr	r1, [pc, #312]	; (800db1c <tcp_abandon+0x168>)
 800d9e4:	484c      	ldr	r0, [pc, #304]	; (800db18 <tcp_abandon+0x164>)
 800d9e6:	f009 facb 	bl	8016f80 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	7d1b      	ldrb	r3, [r3, #20]
 800d9ee:	2b0a      	cmp	r3, #10
 800d9f0:	d107      	bne.n	800da02 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	484a      	ldr	r0, [pc, #296]	; (800db20 <tcp_abandon+0x16c>)
 800d9f6:	f001 fa6d 	bl	800eed4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff fdb0 	bl	800d560 <tcp_free>
 800da00:	e082      	b.n	800db08 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800da02:	2300      	movs	r3, #0
 800da04:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800da06:	2300      	movs	r3, #0
 800da08:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da0e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da14:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da1c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	7d1b      	ldrb	r3, [r3, #20]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d126      	bne.n	800da7a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	8adb      	ldrh	r3, [r3, #22]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d02e      	beq.n	800da92 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da34:	4b3b      	ldr	r3, [pc, #236]	; (800db24 <tcp_abandon+0x170>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d105      	bne.n	800da4a <tcp_abandon+0x96>
 800da3e:	4b39      	ldr	r3, [pc, #228]	; (800db24 <tcp_abandon+0x170>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	4a37      	ldr	r2, [pc, #220]	; (800db24 <tcp_abandon+0x170>)
 800da46:	6013      	str	r3, [r2, #0]
 800da48:	e013      	b.n	800da72 <tcp_abandon+0xbe>
 800da4a:	4b36      	ldr	r3, [pc, #216]	; (800db24 <tcp_abandon+0x170>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	61fb      	str	r3, [r7, #28]
 800da50:	e00c      	b.n	800da6c <tcp_abandon+0xb8>
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d104      	bne.n	800da66 <tcp_abandon+0xb2>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	68da      	ldr	r2, [r3, #12]
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	60da      	str	r2, [r3, #12]
 800da64:	e005      	b.n	800da72 <tcp_abandon+0xbe>
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	61fb      	str	r3, [r7, #28]
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1ef      	bne.n	800da52 <tcp_abandon+0x9e>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	60da      	str	r2, [r3, #12]
 800da78:	e00b      	b.n	800da92 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	8adb      	ldrh	r3, [r3, #22]
 800da82:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da84:	6879      	ldr	r1, [r7, #4]
 800da86:	4828      	ldr	r0, [pc, #160]	; (800db28 <tcp_abandon+0x174>)
 800da88:	f001 fa24 	bl	800eed4 <tcp_pcb_remove>
 800da8c:	4b27      	ldr	r3, [pc, #156]	; (800db2c <tcp_abandon+0x178>)
 800da8e:	2201      	movs	r2, #1
 800da90:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da96:	2b00      	cmp	r3, #0
 800da98:	d004      	beq.n	800daa4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 ff12 	bl	800e8c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d004      	beq.n	800dab6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab0:	4618      	mov	r0, r3
 800dab2:	f000 ff09 	bl	800e8c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d004      	beq.n	800dac8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 ff00 	bl	800e8c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00e      	beq.n	800daec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dace:	6879      	ldr	r1, [r7, #4]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	3304      	adds	r3, #4
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	8b12      	ldrh	r2, [r2, #24]
 800dad8:	9202      	str	r2, [sp, #8]
 800dada:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dadc:	9201      	str	r2, [sp, #4]
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	460b      	mov	r3, r1
 800dae2:	697a      	ldr	r2, [r7, #20]
 800dae4:	69b9      	ldr	r1, [r7, #24]
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f005 fbc4 	bl	8013274 <tcp_rst>
    }
    last_state = pcb->state;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	7d1b      	ldrb	r3, [r3, #20]
 800daf0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff fd34 	bl	800d560 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d004      	beq.n	800db08 <tcp_abandon+0x154>
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	f06f 010c 	mvn.w	r1, #12
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	4798      	blx	r3
  }
}
 800db08:	3728      	adds	r7, #40	; 0x28
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	08018f0c 	.word	0x08018f0c
 800db14:	08019050 	.word	0x08019050
 800db18:	08018f50 	.word	0x08018f50
 800db1c:	0801906c 	.word	0x0801906c
 800db20:	2000be48 	.word	0x2000be48
 800db24:	2000be3c 	.word	0x2000be3c
 800db28:	2000be44 	.word	0x2000be44
 800db2c:	2000be4c 	.word	0x2000be4c

0800db30 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800db38:	2101      	movs	r1, #1
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7ff ff3a 	bl	800d9b4 <tcp_abandon>
}
 800db40:	bf00      	nop
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b088      	sub	sp, #32
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	4613      	mov	r3, r2
 800db54:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800db56:	2304      	movs	r3, #4
 800db58:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800db60:	4b3e      	ldr	r3, [pc, #248]	; (800dc5c <tcp_bind+0x114>)
 800db62:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d109      	bne.n	800db7e <tcp_bind+0x36>
 800db6a:	4b3d      	ldr	r3, [pc, #244]	; (800dc60 <tcp_bind+0x118>)
 800db6c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800db70:	493c      	ldr	r1, [pc, #240]	; (800dc64 <tcp_bind+0x11c>)
 800db72:	483d      	ldr	r0, [pc, #244]	; (800dc68 <tcp_bind+0x120>)
 800db74:	f009 fa04 	bl	8016f80 <iprintf>
 800db78:	f06f 030f 	mvn.w	r3, #15
 800db7c:	e06a      	b.n	800dc54 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	7d1b      	ldrb	r3, [r3, #20]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d009      	beq.n	800db9a <tcp_bind+0x52>
 800db86:	4b36      	ldr	r3, [pc, #216]	; (800dc60 <tcp_bind+0x118>)
 800db88:	f240 22ab 	movw	r2, #683	; 0x2ab
 800db8c:	4937      	ldr	r1, [pc, #220]	; (800dc6c <tcp_bind+0x124>)
 800db8e:	4836      	ldr	r0, [pc, #216]	; (800dc68 <tcp_bind+0x120>)
 800db90:	f009 f9f6 	bl	8016f80 <iprintf>
 800db94:	f06f 0305 	mvn.w	r3, #5
 800db98:	e05c      	b.n	800dc54 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800db9a:	88fb      	ldrh	r3, [r7, #6]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d109      	bne.n	800dbb4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dba0:	f000 f914 	bl	800ddcc <tcp_new_port>
 800dba4:	4603      	mov	r3, r0
 800dba6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dba8:	88fb      	ldrh	r3, [r7, #6]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d135      	bne.n	800dc1a <tcp_bind+0xd2>
      return ERR_BUF;
 800dbae:	f06f 0301 	mvn.w	r3, #1
 800dbb2:	e04f      	b.n	800dc54 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	61fb      	str	r3, [r7, #28]
 800dbb8:	e02b      	b.n	800dc12 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dbba:	4a2d      	ldr	r2, [pc, #180]	; (800dc70 <tcp_bind+0x128>)
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	61bb      	str	r3, [r7, #24]
 800dbc6:	e01e      	b.n	800dc06 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	8adb      	ldrh	r3, [r3, #22]
 800dbcc:	88fa      	ldrh	r2, [r7, #6]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d116      	bne.n	800dc00 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dbd2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d010      	beq.n	800dbfa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00c      	beq.n	800dbfa <tcp_bind+0xb2>
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d009      	beq.n	800dbfa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d005      	beq.n	800dbfa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d102      	bne.n	800dc00 <tcp_bind+0xb8>
              return ERR_USE;
 800dbfa:	f06f 0307 	mvn.w	r3, #7
 800dbfe:	e029      	b.n	800dc54 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	61bb      	str	r3, [r7, #24]
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1dd      	bne.n	800dbc8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	61fb      	str	r3, [r7, #28]
 800dc12:	69fa      	ldr	r2, [r7, #28]
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	dbcf      	blt.n	800dbba <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00c      	beq.n	800dc3a <tcp_bind+0xf2>
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d008      	beq.n	800dc3a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <tcp_bind+0xec>
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	e000      	b.n	800dc36 <tcp_bind+0xee>
 800dc34:	2300      	movs	r3, #0
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	88fa      	ldrh	r2, [r7, #6]
 800dc3e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dc40:	4b0c      	ldr	r3, [pc, #48]	; (800dc74 <tcp_bind+0x12c>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	60da      	str	r2, [r3, #12]
 800dc48:	4a0a      	ldr	r2, [pc, #40]	; (800dc74 <tcp_bind+0x12c>)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6013      	str	r3, [r2, #0]
 800dc4e:	f005 fcd3 	bl	80135f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3720      	adds	r7, #32
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	0801af60 	.word	0x0801af60
 800dc60:	08018f0c 	.word	0x08018f0c
 800dc64:	080190a0 	.word	0x080190a0
 800dc68:	08018f50 	.word	0x08018f50
 800dc6c:	080190b8 	.word	0x080190b8
 800dc70:	0801af38 	.word	0x0801af38
 800dc74:	2000be3c 	.word	0x2000be3c

0800dc78 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d106      	bne.n	800dc94 <tcp_update_rcv_ann_wnd+0x1c>
 800dc86:	4b25      	ldr	r3, [pc, #148]	; (800dd1c <tcp_update_rcv_ann_wnd+0xa4>)
 800dc88:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dc8c:	4924      	ldr	r1, [pc, #144]	; (800dd20 <tcp_update_rcv_ann_wnd+0xa8>)
 800dc8e:	4825      	ldr	r0, [pc, #148]	; (800dd24 <tcp_update_rcv_ann_wnd+0xac>)
 800dc90:	f009 f976 	bl	8016f80 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dc9c:	4413      	add	r3, r2
 800dc9e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dca8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dcac:	bf28      	it	cs
 800dcae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dcb2:	b292      	uxth	r2, r2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	db08      	blt.n	800dcd0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcca:	68fa      	ldr	r2, [r7, #12]
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	e020      	b.n	800dd12 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	dd03      	ble.n	800dce6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dce4:	e014      	b.n	800dd10 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcf8:	d306      	bcc.n	800dd08 <tcp_update_rcv_ann_wnd+0x90>
 800dcfa:	4b08      	ldr	r3, [pc, #32]	; (800dd1c <tcp_update_rcv_ann_wnd+0xa4>)
 800dcfc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dd00:	4909      	ldr	r1, [pc, #36]	; (800dd28 <tcp_update_rcv_ann_wnd+0xb0>)
 800dd02:	4808      	ldr	r0, [pc, #32]	; (800dd24 <tcp_update_rcv_ann_wnd+0xac>)
 800dd04:	f009 f93c 	bl	8016f80 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dd10:	2300      	movs	r3, #0
  }
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	08018f0c 	.word	0x08018f0c
 800dd20:	08019168 	.word	0x08019168
 800dd24:	08018f50 	.word	0x08018f50
 800dd28:	0801918c 	.word	0x0801918c

0800dd2c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	460b      	mov	r3, r1
 800dd36:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d107      	bne.n	800dd4e <tcp_recved+0x22>
 800dd3e:	4b1f      	ldr	r3, [pc, #124]	; (800ddbc <tcp_recved+0x90>)
 800dd40:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dd44:	491e      	ldr	r1, [pc, #120]	; (800ddc0 <tcp_recved+0x94>)
 800dd46:	481f      	ldr	r0, [pc, #124]	; (800ddc4 <tcp_recved+0x98>)
 800dd48:	f009 f91a 	bl	8016f80 <iprintf>
 800dd4c:	e032      	b.n	800ddb4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	7d1b      	ldrb	r3, [r3, #20]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d106      	bne.n	800dd64 <tcp_recved+0x38>
 800dd56:	4b19      	ldr	r3, [pc, #100]	; (800ddbc <tcp_recved+0x90>)
 800dd58:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dd5c:	491a      	ldr	r1, [pc, #104]	; (800ddc8 <tcp_recved+0x9c>)
 800dd5e:	4819      	ldr	r0, [pc, #100]	; (800ddc4 <tcp_recved+0x98>)
 800dd60:	f009 f90e 	bl	8016f80 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd68:	887b      	ldrh	r3, [r7, #2]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dd6e:	89fb      	ldrh	r3, [r7, #14]
 800dd70:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd74:	d804      	bhi.n	800dd80 <tcp_recved+0x54>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd7a:	89fa      	ldrh	r2, [r7, #14]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d204      	bcs.n	800dd8a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dd86:	851a      	strh	r2, [r3, #40]	; 0x28
 800dd88:	e002      	b.n	800dd90 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	89fa      	ldrh	r2, [r7, #14]
 800dd8e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff ff71 	bl	800dc78 <tcp_update_rcv_ann_wnd>
 800dd96:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dd9e:	d309      	bcc.n	800ddb4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	8b5b      	ldrh	r3, [r3, #26]
 800dda4:	f043 0302 	orr.w	r3, r3, #2
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f004 fcac 	bl	801270c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	08018f0c 	.word	0x08018f0c
 800ddc0:	080191a8 	.word	0x080191a8
 800ddc4:	08018f50 	.word	0x08018f50
 800ddc8:	080191c0 	.word	0x080191c0

0800ddcc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ddd6:	4b1e      	ldr	r3, [pc, #120]	; (800de50 <tcp_new_port+0x84>)
 800ddd8:	881b      	ldrh	r3, [r3, #0]
 800ddda:	3301      	adds	r3, #1
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	4b1c      	ldr	r3, [pc, #112]	; (800de50 <tcp_new_port+0x84>)
 800dde0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dde2:	4b1b      	ldr	r3, [pc, #108]	; (800de50 <tcp_new_port+0x84>)
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d103      	bne.n	800ddf6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ddee:	4b18      	ldr	r3, [pc, #96]	; (800de50 <tcp_new_port+0x84>)
 800ddf0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ddf4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	71fb      	strb	r3, [r7, #7]
 800ddfa:	e01e      	b.n	800de3a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ddfc:	79fb      	ldrb	r3, [r7, #7]
 800ddfe:	4a15      	ldr	r2, [pc, #84]	; (800de54 <tcp_new_port+0x88>)
 800de00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	e011      	b.n	800de2e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	8ada      	ldrh	r2, [r3, #22]
 800de0e:	4b10      	ldr	r3, [pc, #64]	; (800de50 <tcp_new_port+0x84>)
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	429a      	cmp	r2, r3
 800de14:	d108      	bne.n	800de28 <tcp_new_port+0x5c>
        n++;
 800de16:	88bb      	ldrh	r3, [r7, #4]
 800de18:	3301      	adds	r3, #1
 800de1a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800de1c:	88bb      	ldrh	r3, [r7, #4]
 800de1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de22:	d3d8      	bcc.n	800ddd6 <tcp_new_port+0xa>
          return 0;
 800de24:	2300      	movs	r3, #0
 800de26:	e00d      	b.n	800de44 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	603b      	str	r3, [r7, #0]
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1ea      	bne.n	800de0a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	3301      	adds	r3, #1
 800de38:	71fb      	strb	r3, [r7, #7]
 800de3a:	79fb      	ldrb	r3, [r7, #7]
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d9dd      	bls.n	800ddfc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800de40:	4b03      	ldr	r3, [pc, #12]	; (800de50 <tcp_new_port+0x84>)
 800de42:	881b      	ldrh	r3, [r3, #0]
}
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	bc80      	pop	{r7}
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	20000010 	.word	0x20000010
 800de54:	0801af38 	.word	0x0801af38

0800de58 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b08a      	sub	sp, #40	; 0x28
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	603b      	str	r3, [r7, #0]
 800de64:	4613      	mov	r3, r2
 800de66:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800de68:	2300      	movs	r3, #0
 800de6a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d109      	bne.n	800de86 <tcp_connect+0x2e>
 800de72:	4b7d      	ldr	r3, [pc, #500]	; (800e068 <tcp_connect+0x210>)
 800de74:	f240 4235 	movw	r2, #1077	; 0x435
 800de78:	497c      	ldr	r1, [pc, #496]	; (800e06c <tcp_connect+0x214>)
 800de7a:	487d      	ldr	r0, [pc, #500]	; (800e070 <tcp_connect+0x218>)
 800de7c:	f009 f880 	bl	8016f80 <iprintf>
 800de80:	f06f 030f 	mvn.w	r3, #15
 800de84:	e0ec      	b.n	800e060 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d109      	bne.n	800dea0 <tcp_connect+0x48>
 800de8c:	4b76      	ldr	r3, [pc, #472]	; (800e068 <tcp_connect+0x210>)
 800de8e:	f240 4236 	movw	r2, #1078	; 0x436
 800de92:	4978      	ldr	r1, [pc, #480]	; (800e074 <tcp_connect+0x21c>)
 800de94:	4876      	ldr	r0, [pc, #472]	; (800e070 <tcp_connect+0x218>)
 800de96:	f009 f873 	bl	8016f80 <iprintf>
 800de9a:	f06f 030f 	mvn.w	r3, #15
 800de9e:	e0df      	b.n	800e060 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	7d1b      	ldrb	r3, [r3, #20]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d009      	beq.n	800debc <tcp_connect+0x64>
 800dea8:	4b6f      	ldr	r3, [pc, #444]	; (800e068 <tcp_connect+0x210>)
 800deaa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800deae:	4972      	ldr	r1, [pc, #456]	; (800e078 <tcp_connect+0x220>)
 800deb0:	486f      	ldr	r0, [pc, #444]	; (800e070 <tcp_connect+0x218>)
 800deb2:	f009 f865 	bl	8016f80 <iprintf>
 800deb6:	f06f 0309 	mvn.w	r3, #9
 800deba:	e0d1      	b.n	800e060 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d002      	beq.n	800dec8 <tcp_connect+0x70>
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	e000      	b.n	800deca <tcp_connect+0x72>
 800dec8:	2300      	movs	r3, #0
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	88fa      	ldrh	r2, [r7, #6]
 800ded2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	7a1b      	ldrb	r3, [r3, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d006      	beq.n	800deea <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	7a1b      	ldrb	r3, [r3, #8]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fe fca5 	bl	800c830 <netif_get_by_index>
 800dee6:	6278      	str	r0, [r7, #36]	; 0x24
 800dee8:	e005      	b.n	800def6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3304      	adds	r3, #4
 800deee:	4618      	mov	r0, r3
 800def0:	f006 ffee 	bl	8014ed0 <ip4_route>
 800def4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800def6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def8:	2b00      	cmp	r3, #0
 800defa:	d102      	bne.n	800df02 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800defc:	f06f 0303 	mvn.w	r3, #3
 800df00:	e0ae      	b.n	800e060 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d003      	beq.n	800df10 <tcp_connect+0xb8>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d111      	bne.n	800df34 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	2b00      	cmp	r3, #0
 800df14:	d002      	beq.n	800df1c <tcp_connect+0xc4>
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	3304      	adds	r3, #4
 800df1a:	e000      	b.n	800df1e <tcp_connect+0xc6>
 800df1c:	2300      	movs	r3, #0
 800df1e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <tcp_connect+0xd4>
      return ERR_RTE;
 800df26:	f06f 0303 	mvn.w	r3, #3
 800df2a:	e099      	b.n	800e060 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	8adb      	ldrh	r3, [r3, #22]
 800df38:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	8adb      	ldrh	r3, [r3, #22]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d10c      	bne.n	800df5c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800df42:	f7ff ff43 	bl	800ddcc <tcp_new_port>
 800df46:	4603      	mov	r3, r0
 800df48:	461a      	mov	r2, r3
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	8adb      	ldrh	r3, [r3, #22]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d102      	bne.n	800df5c <tcp_connect+0x104>
      return ERR_BUF;
 800df56:	f06f 0301 	mvn.w	r3, #1
 800df5a:	e081      	b.n	800e060 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f001 f84d 	bl	800effc <tcp_next_iss>
 800df62:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2200      	movs	r2, #0
 800df68:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	697a      	ldr	r2, [r7, #20]
 800df6e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	1e5a      	subs	r2, r3, #1
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	1e5a      	subs	r2, r3, #1
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	1e5a      	subs	r2, r3, #1
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dfa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dfb0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	3304      	adds	r3, #4
 800dfba:	461a      	mov	r2, r3
 800dfbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dfbe:	f001 f843 	bl	800f048 <tcp_eff_send_mss_netif>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	683a      	ldr	r2, [r7, #0]
 800dfd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800dfda:	2102      	movs	r1, #2
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f004 faa7 	bl	8012530 <tcp_enqueue_flags>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800dfe6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d136      	bne.n	800e05c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2202      	movs	r2, #2
 800dff2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800dff4:	8b7b      	ldrh	r3, [r7, #26]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d021      	beq.n	800e03e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dffa:	4b20      	ldr	r3, [pc, #128]	; (800e07c <tcp_connect+0x224>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	429a      	cmp	r2, r3
 800e002:	d105      	bne.n	800e010 <tcp_connect+0x1b8>
 800e004:	4b1d      	ldr	r3, [pc, #116]	; (800e07c <tcp_connect+0x224>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	4a1c      	ldr	r2, [pc, #112]	; (800e07c <tcp_connect+0x224>)
 800e00c:	6013      	str	r3, [r2, #0]
 800e00e:	e013      	b.n	800e038 <tcp_connect+0x1e0>
 800e010:	4b1a      	ldr	r3, [pc, #104]	; (800e07c <tcp_connect+0x224>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	623b      	str	r3, [r7, #32]
 800e016:	e00c      	b.n	800e032 <tcp_connect+0x1da>
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d104      	bne.n	800e02c <tcp_connect+0x1d4>
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	68da      	ldr	r2, [r3, #12]
 800e026:	6a3b      	ldr	r3, [r7, #32]
 800e028:	60da      	str	r2, [r3, #12]
 800e02a:	e005      	b.n	800e038 <tcp_connect+0x1e0>
 800e02c:	6a3b      	ldr	r3, [r7, #32]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	623b      	str	r3, [r7, #32]
 800e032:	6a3b      	ldr	r3, [r7, #32]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d1ef      	bne.n	800e018 <tcp_connect+0x1c0>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2200      	movs	r2, #0
 800e03c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e03e:	4b10      	ldr	r3, [pc, #64]	; (800e080 <tcp_connect+0x228>)
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	60da      	str	r2, [r3, #12]
 800e046:	4a0e      	ldr	r2, [pc, #56]	; (800e080 <tcp_connect+0x228>)
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6013      	str	r3, [r2, #0]
 800e04c:	f005 fad4 	bl	80135f8 <tcp_timer_needed>
 800e050:	4b0c      	ldr	r3, [pc, #48]	; (800e084 <tcp_connect+0x22c>)
 800e052:	2201      	movs	r2, #1
 800e054:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f004 fb58 	bl	801270c <tcp_output>
  }
  return ret;
 800e05c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3728      	adds	r7, #40	; 0x28
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	08018f0c 	.word	0x08018f0c
 800e06c:	080191e8 	.word	0x080191e8
 800e070:	08018f50 	.word	0x08018f50
 800e074:	08019204 	.word	0x08019204
 800e078:	08019220 	.word	0x08019220
 800e07c:	2000be3c 	.word	0x2000be3c
 800e080:	2000be44 	.word	0x2000be44
 800e084:	2000be4c 	.word	0x2000be4c

0800e088 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e088:	b5b0      	push	{r4, r5, r7, lr}
 800e08a:	b090      	sub	sp, #64	; 0x40
 800e08c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e08e:	2300      	movs	r3, #0
 800e090:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e094:	4b94      	ldr	r3, [pc, #592]	; (800e2e8 <tcp_slowtmr+0x260>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3301      	adds	r3, #1
 800e09a:	4a93      	ldr	r2, [pc, #588]	; (800e2e8 <tcp_slowtmr+0x260>)
 800e09c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e09e:	4b93      	ldr	r3, [pc, #588]	; (800e2ec <tcp_slowtmr+0x264>)
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	4b91      	ldr	r3, [pc, #580]	; (800e2ec <tcp_slowtmr+0x264>)
 800e0a8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e0ae:	4b90      	ldr	r3, [pc, #576]	; (800e2f0 <tcp_slowtmr+0x268>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e0b4:	e29f      	b.n	800e5f6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	7d1b      	ldrb	r3, [r3, #20]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d106      	bne.n	800e0cc <tcp_slowtmr+0x44>
 800e0be:	4b8d      	ldr	r3, [pc, #564]	; (800e2f4 <tcp_slowtmr+0x26c>)
 800e0c0:	f240 42be 	movw	r2, #1214	; 0x4be
 800e0c4:	498c      	ldr	r1, [pc, #560]	; (800e2f8 <tcp_slowtmr+0x270>)
 800e0c6:	488d      	ldr	r0, [pc, #564]	; (800e2fc <tcp_slowtmr+0x274>)
 800e0c8:	f008 ff5a 	bl	8016f80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ce:	7d1b      	ldrb	r3, [r3, #20]
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d106      	bne.n	800e0e2 <tcp_slowtmr+0x5a>
 800e0d4:	4b87      	ldr	r3, [pc, #540]	; (800e2f4 <tcp_slowtmr+0x26c>)
 800e0d6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e0da:	4989      	ldr	r1, [pc, #548]	; (800e300 <tcp_slowtmr+0x278>)
 800e0dc:	4887      	ldr	r0, [pc, #540]	; (800e2fc <tcp_slowtmr+0x274>)
 800e0de:	f008 ff4f 	bl	8016f80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e4:	7d1b      	ldrb	r3, [r3, #20]
 800e0e6:	2b0a      	cmp	r3, #10
 800e0e8:	d106      	bne.n	800e0f8 <tcp_slowtmr+0x70>
 800e0ea:	4b82      	ldr	r3, [pc, #520]	; (800e2f4 <tcp_slowtmr+0x26c>)
 800e0ec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e0f0:	4984      	ldr	r1, [pc, #528]	; (800e304 <tcp_slowtmr+0x27c>)
 800e0f2:	4882      	ldr	r0, [pc, #520]	; (800e2fc <tcp_slowtmr+0x274>)
 800e0f4:	f008 ff44 	bl	8016f80 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	7f9a      	ldrb	r2, [r3, #30]
 800e0fc:	4b7b      	ldr	r3, [pc, #492]	; (800e2ec <tcp_slowtmr+0x264>)
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	429a      	cmp	r2, r3
 800e102:	d105      	bne.n	800e110 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e10e:	e272      	b.n	800e5f6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e110:	4b76      	ldr	r3, [pc, #472]	; (800e2ec <tcp_slowtmr+0x264>)
 800e112:	781a      	ldrb	r2, [r3, #0]
 800e114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e116:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e126:	7d1b      	ldrb	r3, [r3, #20]
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d10a      	bne.n	800e142 <tcp_slowtmr+0xba>
 800e12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e132:	2b05      	cmp	r3, #5
 800e134:	d905      	bls.n	800e142 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e13a:	3301      	adds	r3, #1
 800e13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e140:	e11e      	b.n	800e380 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e148:	2b0b      	cmp	r3, #11
 800e14a:	d905      	bls.n	800e158 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e150:	3301      	adds	r3, #1
 800e152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e156:	e113      	b.n	800e380 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d075      	beq.n	800e24e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e166:	2b00      	cmp	r3, #0
 800e168:	d006      	beq.n	800e178 <tcp_slowtmr+0xf0>
 800e16a:	4b62      	ldr	r3, [pc, #392]	; (800e2f4 <tcp_slowtmr+0x26c>)
 800e16c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e170:	4965      	ldr	r1, [pc, #404]	; (800e308 <tcp_slowtmr+0x280>)
 800e172:	4862      	ldr	r0, [pc, #392]	; (800e2fc <tcp_slowtmr+0x274>)
 800e174:	f008 ff04 	bl	8016f80 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d106      	bne.n	800e18e <tcp_slowtmr+0x106>
 800e180:	4b5c      	ldr	r3, [pc, #368]	; (800e2f4 <tcp_slowtmr+0x26c>)
 800e182:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e186:	4961      	ldr	r1, [pc, #388]	; (800e30c <tcp_slowtmr+0x284>)
 800e188:	485c      	ldr	r0, [pc, #368]	; (800e2fc <tcp_slowtmr+0x274>)
 800e18a:	f008 fef9 	bl	8016f80 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e190:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e194:	2b0b      	cmp	r3, #11
 800e196:	d905      	bls.n	800e1a4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e19c:	3301      	adds	r3, #1
 800e19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1a2:	e0ed      	b.n	800e380 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	4a58      	ldr	r2, [pc, #352]	; (800e310 <tcp_slowtmr+0x288>)
 800e1ae:	5cd3      	ldrb	r3, [r2, r3]
 800e1b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e1b8:	7c7a      	ldrb	r2, [r7, #17]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d907      	bls.n	800e1ce <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e1d4:	7c7a      	ldrb	r2, [r7, #17]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	f200 80d2 	bhi.w	800e380 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e1dc:	2301      	movs	r3, #1
 800e1de:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d108      	bne.n	800e1fc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e1ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1ec:	f005 f936 	bl	801345c <tcp_zero_window_probe>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d014      	beq.n	800e220 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	623b      	str	r3, [r7, #32]
 800e1fa:	e011      	b.n	800e220 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e202:	4619      	mov	r1, r3
 800e204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e206:	f003 fffb 	bl	8012200 <tcp_split_unsent_seg>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d107      	bne.n	800e220 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e212:	f004 fa7b 	bl	801270c <tcp_output>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d101      	bne.n	800e220 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e220:	6a3b      	ldr	r3, [r7, #32]
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 80ac 	beq.w	800e380 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e232:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e236:	2b06      	cmp	r3, #6
 800e238:	f200 80a2 	bhi.w	800e380 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e242:	3301      	adds	r3, #1
 800e244:	b2da      	uxtb	r2, r3
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e24c:	e098      	b.n	800e380 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e254:	2b00      	cmp	r3, #0
 800e256:	db0f      	blt.n	800e278 <tcp_slowtmr+0x1f0>
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e25e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e262:	4293      	cmp	r3, r2
 800e264:	d008      	beq.n	800e278 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	3301      	adds	r3, #1
 800e270:	b29b      	uxth	r3, r3
 800e272:	b21a      	sxth	r2, r3
 800e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e276:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e280:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e284:	429a      	cmp	r2, r3
 800e286:	db7b      	blt.n	800e380 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e28a:	f004 fd31 	bl	8012cf0 <tcp_rexmit_rto_prepare>
 800e28e:	4603      	mov	r3, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d007      	beq.n	800e2a4 <tcp_slowtmr+0x21c>
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d171      	bne.n	800e380 <tcp_slowtmr+0x2f8>
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d06d      	beq.n	800e380 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a6:	7d1b      	ldrb	r3, [r3, #20]
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d03a      	beq.n	800e322 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2b2:	2b0c      	cmp	r3, #12
 800e2b4:	bf28      	it	cs
 800e2b6:	230c      	movcs	r3, #12
 800e2b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e2c0:	10db      	asrs	r3, r3, #3
 800e2c2:	b21b      	sxth	r3, r3
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e2cc:	4413      	add	r3, r2
 800e2ce:	7efa      	ldrb	r2, [r7, #27]
 800e2d0:	4910      	ldr	r1, [pc, #64]	; (800e314 <tcp_slowtmr+0x28c>)
 800e2d2:	5c8a      	ldrb	r2, [r1, r2]
 800e2d4:	4093      	lsls	r3, r2
 800e2d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	dc1a      	bgt.n	800e318 <tcp_slowtmr+0x290>
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	b21a      	sxth	r2, r3
 800e2e6:	e019      	b.n	800e31c <tcp_slowtmr+0x294>
 800e2e8:	2000be38 	.word	0x2000be38
 800e2ec:	2000be4e 	.word	0x2000be4e
 800e2f0:	2000be44 	.word	0x2000be44
 800e2f4:	08018f0c 	.word	0x08018f0c
 800e2f8:	08019250 	.word	0x08019250
 800e2fc:	08018f50 	.word	0x08018f50
 800e300:	0801927c 	.word	0x0801927c
 800e304:	080192a8 	.word	0x080192a8
 800e308:	080192d8 	.word	0x080192d8
 800e30c:	0801930c 	.word	0x0801930c
 800e310:	0801af30 	.word	0x0801af30
 800e314:	0801af20 	.word	0x0801af20
 800e318:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	2200      	movs	r2, #0
 800e326:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e330:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e334:	4293      	cmp	r3, r2
 800e336:	bf28      	it	cs
 800e338:	4613      	movcs	r3, r2
 800e33a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e33c:	8a7b      	ldrh	r3, [r7, #18]
 800e33e:	085b      	lsrs	r3, r3, #1
 800e340:	b29a      	uxth	r2, r3
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e352:	005b      	lsls	r3, r3, #1
 800e354:	b29b      	uxth	r3, r3
 800e356:	429a      	cmp	r2, r3
 800e358:	d206      	bcs.n	800e368 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e35e:	005b      	lsls	r3, r3, #1
 800e360:	b29a      	uxth	r2, r3
 800e362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e364:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	2200      	movs	r2, #0
 800e376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e37a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e37c:	f004 fd28 	bl	8012dd0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e382:	7d1b      	ldrb	r3, [r3, #20]
 800e384:	2b06      	cmp	r3, #6
 800e386:	d111      	bne.n	800e3ac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	8b5b      	ldrh	r3, [r3, #26]
 800e38c:	f003 0310 	and.w	r3, r3, #16
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00b      	beq.n	800e3ac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e394:	4b9d      	ldr	r3, [pc, #628]	; (800e60c <tcp_slowtmr+0x584>)
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39a:	6a1b      	ldr	r3, [r3, #32]
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	2b28      	cmp	r3, #40	; 0x28
 800e3a0:	d904      	bls.n	800e3ac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ae:	7a5b      	ldrb	r3, [r3, #9]
 800e3b0:	f003 0308 	and.w	r3, r3, #8
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d04c      	beq.n	800e452 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e3bc:	2b04      	cmp	r3, #4
 800e3be:	d003      	beq.n	800e3c8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e3c4:	2b07      	cmp	r3, #7
 800e3c6:	d144      	bne.n	800e452 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3c8:	4b90      	ldr	r3, [pc, #576]	; (800e60c <tcp_slowtmr+0x584>)
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	6a1b      	ldr	r3, [r3, #32]
 800e3d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e3d8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e3dc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e3e0:	498b      	ldr	r1, [pc, #556]	; (800e610 <tcp_slowtmr+0x588>)
 800e3e2:	fba1 1303 	umull	r1, r3, r1, r3
 800e3e6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d90a      	bls.n	800e402 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e3f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e400:	e027      	b.n	800e452 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e402:	4b82      	ldr	r3, [pc, #520]	; (800e60c <tcp_slowtmr+0x584>)
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e408:	6a1b      	ldr	r3, [r3, #32]
 800e40a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e414:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e418:	4618      	mov	r0, r3
 800e41a:	4b7e      	ldr	r3, [pc, #504]	; (800e614 <tcp_slowtmr+0x58c>)
 800e41c:	fb00 f303 	mul.w	r3, r0, r3
 800e420:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e422:	497b      	ldr	r1, [pc, #492]	; (800e610 <tcp_slowtmr+0x588>)
 800e424:	fba1 1303 	umull	r1, r3, r1, r3
 800e428:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d911      	bls.n	800e452 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e42e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e430:	f004 ffd4 	bl	80133dc <tcp_keepalive>
 800e434:	4603      	mov	r3, r0
 800e436:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e43a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d107      	bne.n	800e452 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e448:	3301      	adds	r3, #1
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e456:	2b00      	cmp	r3, #0
 800e458:	d011      	beq.n	800e47e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e45a:	4b6c      	ldr	r3, [pc, #432]	; (800e60c <tcp_slowtmr+0x584>)
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e460:	6a1b      	ldr	r3, [r3, #32]
 800e462:	1ad2      	subs	r2, r2, r3
 800e464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e466:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e46a:	4619      	mov	r1, r3
 800e46c:	460b      	mov	r3, r1
 800e46e:	005b      	lsls	r3, r3, #1
 800e470:	440b      	add	r3, r1
 800e472:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e474:	429a      	cmp	r2, r3
 800e476:	d302      	bcc.n	800e47e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e47a:	f000 fe8f 	bl	800f19c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	7d1b      	ldrb	r3, [r3, #20]
 800e482:	2b03      	cmp	r3, #3
 800e484:	d10b      	bne.n	800e49e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e486:	4b61      	ldr	r3, [pc, #388]	; (800e60c <tcp_slowtmr+0x584>)
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48c:	6a1b      	ldr	r3, [r3, #32]
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	2b28      	cmp	r3, #40	; 0x28
 800e492:	d904      	bls.n	800e49e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e498:	3301      	adds	r3, #1
 800e49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a0:	7d1b      	ldrb	r3, [r3, #20]
 800e4a2:	2b09      	cmp	r3, #9
 800e4a4:	d10b      	bne.n	800e4be <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e4a6:	4b59      	ldr	r3, [pc, #356]	; (800e60c <tcp_slowtmr+0x584>)
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ac:	6a1b      	ldr	r3, [r3, #32]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	2bf0      	cmp	r3, #240	; 0xf0
 800e4b2:	d904      	bls.n	800e4be <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e4be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d060      	beq.n	800e588 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e4ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4d0:	f000 fcb0 	bl	800ee34 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d010      	beq.n	800e4fc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e4da:	4b4f      	ldr	r3, [pc, #316]	; (800e618 <tcp_slowtmr+0x590>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d106      	bne.n	800e4f2 <tcp_slowtmr+0x46a>
 800e4e4:	4b4d      	ldr	r3, [pc, #308]	; (800e61c <tcp_slowtmr+0x594>)
 800e4e6:	f240 526d 	movw	r2, #1389	; 0x56d
 800e4ea:	494d      	ldr	r1, [pc, #308]	; (800e620 <tcp_slowtmr+0x598>)
 800e4ec:	484d      	ldr	r0, [pc, #308]	; (800e624 <tcp_slowtmr+0x59c>)
 800e4ee:	f008 fd47 	bl	8016f80 <iprintf>
        prev->next = pcb->next;
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	68da      	ldr	r2, [r3, #12]
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	60da      	str	r2, [r3, #12]
 800e4fa:	e00f      	b.n	800e51c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e4fc:	4b46      	ldr	r3, [pc, #280]	; (800e618 <tcp_slowtmr+0x590>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e502:	429a      	cmp	r2, r3
 800e504:	d006      	beq.n	800e514 <tcp_slowtmr+0x48c>
 800e506:	4b45      	ldr	r3, [pc, #276]	; (800e61c <tcp_slowtmr+0x594>)
 800e508:	f240 5271 	movw	r2, #1393	; 0x571
 800e50c:	4946      	ldr	r1, [pc, #280]	; (800e628 <tcp_slowtmr+0x5a0>)
 800e50e:	4845      	ldr	r0, [pc, #276]	; (800e624 <tcp_slowtmr+0x59c>)
 800e510:	f008 fd36 	bl	8016f80 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	4a3f      	ldr	r2, [pc, #252]	; (800e618 <tcp_slowtmr+0x590>)
 800e51a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e51c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e520:	2b00      	cmp	r3, #0
 800e522:	d013      	beq.n	800e54c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e52c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e530:	3304      	adds	r3, #4
 800e532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e534:	8ad2      	ldrh	r2, [r2, #22]
 800e536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e538:	8b09      	ldrh	r1, [r1, #24]
 800e53a:	9102      	str	r1, [sp, #8]
 800e53c:	9201      	str	r2, [sp, #4]
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	462b      	mov	r3, r5
 800e542:	4622      	mov	r2, r4
 800e544:	4601      	mov	r1, r0
 800e546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e548:	f004 fe94 	bl	8013274 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e554:	7d1b      	ldrb	r3, [r3, #20]
 800e556:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e562:	6838      	ldr	r0, [r7, #0]
 800e564:	f7fe fffc 	bl	800d560 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e568:	4b30      	ldr	r3, [pc, #192]	; (800e62c <tcp_slowtmr+0x5a4>)
 800e56a:	2200      	movs	r2, #0
 800e56c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d004      	beq.n	800e57e <tcp_slowtmr+0x4f6>
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f06f 010c 	mvn.w	r1, #12
 800e57a:	68b8      	ldr	r0, [r7, #8]
 800e57c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e57e:	4b2b      	ldr	r3, [pc, #172]	; (800e62c <tcp_slowtmr+0x5a4>)
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d037      	beq.n	800e5f6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e586:	e590      	b.n	800e0aa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e594:	7f1b      	ldrb	r3, [r3, #28]
 800e596:	3301      	adds	r3, #1
 800e598:	b2da      	uxtb	r2, r3
 800e59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	7f1a      	ldrb	r2, [r3, #28]
 800e5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a4:	7f5b      	ldrb	r3, [r3, #29]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d325      	bcc.n	800e5f6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e5b0:	4b1e      	ldr	r3, [pc, #120]	; (800e62c <tcp_slowtmr+0x5a4>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00b      	beq.n	800e5d8 <tcp_slowtmr+0x550>
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5c8:	6912      	ldr	r2, [r2, #16]
 800e5ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	4798      	blx	r3
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e5d6:	e002      	b.n	800e5de <tcp_slowtmr+0x556>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e5de:	4b13      	ldr	r3, [pc, #76]	; (800e62c <tcp_slowtmr+0x5a4>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d000      	beq.n	800e5e8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e5e6:	e560      	b.n	800e0aa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e5e8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d102      	bne.n	800e5f6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5f2:	f004 f88b 	bl	801270c <tcp_output>
  while (pcb != NULL) {
 800e5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f47f ad5c 	bne.w	800e0b6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e602:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <tcp_slowtmr+0x5a8>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e608:	e067      	b.n	800e6da <tcp_slowtmr+0x652>
 800e60a:	bf00      	nop
 800e60c:	2000be38 	.word	0x2000be38
 800e610:	10624dd3 	.word	0x10624dd3
 800e614:	000124f8 	.word	0x000124f8
 800e618:	2000be44 	.word	0x2000be44
 800e61c:	08018f0c 	.word	0x08018f0c
 800e620:	08019344 	.word	0x08019344
 800e624:	08018f50 	.word	0x08018f50
 800e628:	08019370 	.word	0x08019370
 800e62c:	2000be4c 	.word	0x2000be4c
 800e630:	2000be48 	.word	0x2000be48
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e636:	7d1b      	ldrb	r3, [r3, #20]
 800e638:	2b0a      	cmp	r3, #10
 800e63a:	d006      	beq.n	800e64a <tcp_slowtmr+0x5c2>
 800e63c:	4b2b      	ldr	r3, [pc, #172]	; (800e6ec <tcp_slowtmr+0x664>)
 800e63e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e642:	492b      	ldr	r1, [pc, #172]	; (800e6f0 <tcp_slowtmr+0x668>)
 800e644:	482b      	ldr	r0, [pc, #172]	; (800e6f4 <tcp_slowtmr+0x66c>)
 800e646:	f008 fc9b 	bl	8016f80 <iprintf>
    pcb_remove = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e650:	4b29      	ldr	r3, [pc, #164]	; (800e6f8 <tcp_slowtmr+0x670>)
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e656:	6a1b      	ldr	r3, [r3, #32]
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	2bf0      	cmp	r3, #240	; 0xf0
 800e65c:	d904      	bls.n	800e668 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e65e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e662:	3301      	adds	r3, #1
 800e664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d02f      	beq.n	800e6d0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e672:	f000 fbdf 	bl	800ee34 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d010      	beq.n	800e69e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e67c:	4b1f      	ldr	r3, [pc, #124]	; (800e6fc <tcp_slowtmr+0x674>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e682:	429a      	cmp	r2, r3
 800e684:	d106      	bne.n	800e694 <tcp_slowtmr+0x60c>
 800e686:	4b19      	ldr	r3, [pc, #100]	; (800e6ec <tcp_slowtmr+0x664>)
 800e688:	f240 52af 	movw	r2, #1455	; 0x5af
 800e68c:	491c      	ldr	r1, [pc, #112]	; (800e700 <tcp_slowtmr+0x678>)
 800e68e:	4819      	ldr	r0, [pc, #100]	; (800e6f4 <tcp_slowtmr+0x66c>)
 800e690:	f008 fc76 	bl	8016f80 <iprintf>
        prev->next = pcb->next;
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	68da      	ldr	r2, [r3, #12]
 800e698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69a:	60da      	str	r2, [r3, #12]
 800e69c:	e00f      	b.n	800e6be <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e69e:	4b17      	ldr	r3, [pc, #92]	; (800e6fc <tcp_slowtmr+0x674>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d006      	beq.n	800e6b6 <tcp_slowtmr+0x62e>
 800e6a8:	4b10      	ldr	r3, [pc, #64]	; (800e6ec <tcp_slowtmr+0x664>)
 800e6aa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e6ae:	4915      	ldr	r1, [pc, #84]	; (800e704 <tcp_slowtmr+0x67c>)
 800e6b0:	4810      	ldr	r0, [pc, #64]	; (800e6f4 <tcp_slowtmr+0x66c>)
 800e6b2:	f008 fc65 	bl	8016f80 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	4a10      	ldr	r2, [pc, #64]	; (800e6fc <tcp_slowtmr+0x674>)
 800e6bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e6c8:	69f8      	ldr	r0, [r7, #28]
 800e6ca:	f7fe ff49 	bl	800d560 <tcp_free>
 800e6ce:	e004      	b.n	800e6da <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1a9      	bne.n	800e634 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e6e0:	bf00      	nop
 800e6e2:	bf00      	nop
 800e6e4:	3730      	adds	r7, #48	; 0x30
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	08018f0c 	.word	0x08018f0c
 800e6f0:	0801939c 	.word	0x0801939c
 800e6f4:	08018f50 	.word	0x08018f50
 800e6f8:	2000be38 	.word	0x2000be38
 800e6fc:	2000be48 	.word	0x2000be48
 800e700:	080193cc 	.word	0x080193cc
 800e704:	080193f4 	.word	0x080193f4

0800e708 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e70e:	4b2d      	ldr	r3, [pc, #180]	; (800e7c4 <tcp_fasttmr+0xbc>)
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	3301      	adds	r3, #1
 800e714:	b2da      	uxtb	r2, r3
 800e716:	4b2b      	ldr	r3, [pc, #172]	; (800e7c4 <tcp_fasttmr+0xbc>)
 800e718:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e71a:	4b2b      	ldr	r3, [pc, #172]	; (800e7c8 <tcp_fasttmr+0xc0>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e720:	e048      	b.n	800e7b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	7f9a      	ldrb	r2, [r3, #30]
 800e726:	4b27      	ldr	r3, [pc, #156]	; (800e7c4 <tcp_fasttmr+0xbc>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d03f      	beq.n	800e7ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e72e:	4b25      	ldr	r3, [pc, #148]	; (800e7c4 <tcp_fasttmr+0xbc>)
 800e730:	781a      	ldrb	r2, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	8b5b      	ldrh	r3, [r3, #26]
 800e73a:	f003 0301 	and.w	r3, r3, #1
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d010      	beq.n	800e764 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	8b5b      	ldrh	r3, [r3, #26]
 800e746:	f043 0302 	orr.w	r3, r3, #2
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f003 ffdb 	bl	801270c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	8b5b      	ldrh	r3, [r3, #26]
 800e75a:	f023 0303 	bic.w	r3, r3, #3
 800e75e:	b29a      	uxth	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	8b5b      	ldrh	r3, [r3, #26]
 800e768:	f003 0308 	and.w	r3, r3, #8
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d009      	beq.n	800e784 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	8b5b      	ldrh	r3, [r3, #26]
 800e774:	f023 0308 	bic.w	r3, r3, #8
 800e778:	b29a      	uxth	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff f882 	bl	800d888 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00a      	beq.n	800e7a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e792:	4b0e      	ldr	r3, [pc, #56]	; (800e7cc <tcp_fasttmr+0xc4>)
 800e794:	2200      	movs	r2, #0
 800e796:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 f819 	bl	800e7d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e79e:	4b0b      	ldr	r3, [pc, #44]	; (800e7cc <tcp_fasttmr+0xc4>)
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d000      	beq.n	800e7a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e7a6:	e7b8      	b.n	800e71a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	607b      	str	r3, [r7, #4]
 800e7ac:	e002      	b.n	800e7b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d1b3      	bne.n	800e722 <tcp_fasttmr+0x1a>
    }
  }
}
 800e7ba:	bf00      	nop
 800e7bc:	bf00      	nop
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	2000be4e 	.word	0x2000be4e
 800e7c8:	2000be44 	.word	0x2000be44
 800e7cc:	2000be4c 	.word	0x2000be4c

0800e7d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e7d0:	b590      	push	{r4, r7, lr}
 800e7d2:	b085      	sub	sp, #20
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d109      	bne.n	800e7f2 <tcp_process_refused_data+0x22>
 800e7de:	4b37      	ldr	r3, [pc, #220]	; (800e8bc <tcp_process_refused_data+0xec>)
 800e7e0:	f240 6209 	movw	r2, #1545	; 0x609
 800e7e4:	4936      	ldr	r1, [pc, #216]	; (800e8c0 <tcp_process_refused_data+0xf0>)
 800e7e6:	4837      	ldr	r0, [pc, #220]	; (800e8c4 <tcp_process_refused_data+0xf4>)
 800e7e8:	f008 fbca 	bl	8016f80 <iprintf>
 800e7ec:	f06f 030f 	mvn.w	r3, #15
 800e7f0:	e060      	b.n	800e8b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7f6:	7b5b      	ldrb	r3, [r3, #13]
 800e7f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d00b      	beq.n	800e828 <tcp_process_refused_data+0x58>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6918      	ldr	r0, [r3, #16]
 800e81a:	2300      	movs	r3, #0
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	6879      	ldr	r1, [r7, #4]
 800e820:	47a0      	blx	r4
 800e822:	4603      	mov	r3, r0
 800e824:	73fb      	strb	r3, [r7, #15]
 800e826:	e007      	b.n	800e838 <tcp_process_refused_data+0x68>
 800e828:	2300      	movs	r3, #0
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	6879      	ldr	r1, [r7, #4]
 800e82e:	2000      	movs	r0, #0
 800e830:	f000 f8a4 	bl	800e97c <tcp_recv_null>
 800e834:	4603      	mov	r3, r0
 800e836:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d12a      	bne.n	800e896 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e840:	7bbb      	ldrb	r3, [r7, #14]
 800e842:	f003 0320 	and.w	r3, r3, #32
 800e846:	2b00      	cmp	r3, #0
 800e848:	d033      	beq.n	800e8b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e84e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e852:	d005      	beq.n	800e860 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e858:	3301      	adds	r3, #1
 800e85a:	b29a      	uxth	r2, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00b      	beq.n	800e882 <tcp_process_refused_data+0xb2>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6918      	ldr	r0, [r3, #16]
 800e874:	2300      	movs	r3, #0
 800e876:	2200      	movs	r2, #0
 800e878:	6879      	ldr	r1, [r7, #4]
 800e87a:	47a0      	blx	r4
 800e87c:	4603      	mov	r3, r0
 800e87e:	73fb      	strb	r3, [r7, #15]
 800e880:	e001      	b.n	800e886 <tcp_process_refused_data+0xb6>
 800e882:	2300      	movs	r3, #0
 800e884:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e88a:	f113 0f0d 	cmn.w	r3, #13
 800e88e:	d110      	bne.n	800e8b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e890:	f06f 030c 	mvn.w	r3, #12
 800e894:	e00e      	b.n	800e8b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e89a:	f113 0f0d 	cmn.w	r3, #13
 800e89e:	d102      	bne.n	800e8a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e8a0:	f06f 030c 	mvn.w	r3, #12
 800e8a4:	e006      	b.n	800e8b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e8ac:	f06f 0304 	mvn.w	r3, #4
 800e8b0:	e000      	b.n	800e8b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3714      	adds	r7, #20
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd90      	pop	{r4, r7, pc}
 800e8bc:	08018f0c 	.word	0x08018f0c
 800e8c0:	0801941c 	.word	0x0801941c
 800e8c4:	08018f50 	.word	0x08018f50

0800e8c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e8d0:	e007      	b.n	800e8e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f80a 	bl	800e8f2 <tcp_seg_free>
    seg = next;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1f4      	bne.n	800e8d2 <tcp_segs_free+0xa>
  }
}
 800e8e8:	bf00      	nop
 800e8ea:	bf00      	nop
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b082      	sub	sp, #8
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00c      	beq.n	800e91a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d004      	beq.n	800e912 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fb1b 	bl	800cf48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e912:	6879      	ldr	r1, [r7, #4]
 800e914:	2003      	movs	r0, #3
 800e916:	f7fd fce1 	bl	800c2dc <memp_free>
  }
}
 800e91a:	bf00      	nop
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
	...

0800e924 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d106      	bne.n	800e940 <tcp_seg_copy+0x1c>
 800e932:	4b0f      	ldr	r3, [pc, #60]	; (800e970 <tcp_seg_copy+0x4c>)
 800e934:	f240 6282 	movw	r2, #1666	; 0x682
 800e938:	490e      	ldr	r1, [pc, #56]	; (800e974 <tcp_seg_copy+0x50>)
 800e93a:	480f      	ldr	r0, [pc, #60]	; (800e978 <tcp_seg_copy+0x54>)
 800e93c:	f008 fb20 	bl	8016f80 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e940:	2003      	movs	r0, #3
 800e942:	f7fd fc55 	bl	800c1f0 <memp_malloc>
 800e946:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d101      	bne.n	800e952 <tcp_seg_copy+0x2e>
    return NULL;
 800e94e:	2300      	movs	r3, #0
 800e950:	e00a      	b.n	800e968 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e952:	2210      	movs	r2, #16
 800e954:	6879      	ldr	r1, [r7, #4]
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f008 fa1e 	bl	8016d98 <memcpy>
  pbuf_ref(cseg->p);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	4618      	mov	r0, r3
 800e962:	f7fe fb95 	bl	800d090 <pbuf_ref>
  return cseg;
 800e966:	68fb      	ldr	r3, [r7, #12]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	08018f0c 	.word	0x08018f0c
 800e974:	08019460 	.word	0x08019460
 800e978:	08018f50 	.word	0x08018f50

0800e97c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d109      	bne.n	800e9a4 <tcp_recv_null+0x28>
 800e990:	4b12      	ldr	r3, [pc, #72]	; (800e9dc <tcp_recv_null+0x60>)
 800e992:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e996:	4912      	ldr	r1, [pc, #72]	; (800e9e0 <tcp_recv_null+0x64>)
 800e998:	4812      	ldr	r0, [pc, #72]	; (800e9e4 <tcp_recv_null+0x68>)
 800e99a:	f008 faf1 	bl	8016f80 <iprintf>
 800e99e:	f06f 030f 	mvn.w	r3, #15
 800e9a2:	e016      	b.n	800e9d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d009      	beq.n	800e9be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	891b      	ldrh	r3, [r3, #8]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	68b8      	ldr	r0, [r7, #8]
 800e9b2:	f7ff f9bb 	bl	800dd2c <tcp_recved>
    pbuf_free(p);
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7fe fac6 	bl	800cf48 <pbuf_free>
 800e9bc:	e008      	b.n	800e9d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e9be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d104      	bne.n	800e9d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e9c6:	68b8      	ldr	r0, [r7, #8]
 800e9c8:	f7fe ffc8 	bl	800d95c <tcp_close>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	e000      	b.n	800e9d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	08018f0c 	.word	0x08018f0c
 800e9e0:	0801947c 	.word	0x0801947c
 800e9e4:	08018f50 	.word	0x08018f50

0800e9e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e9f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	db01      	blt.n	800e9fe <tcp_kill_prio+0x16>
 800e9fa:	79fb      	ldrb	r3, [r7, #7]
 800e9fc:	e000      	b.n	800ea00 <tcp_kill_prio+0x18>
 800e9fe:	237f      	movs	r3, #127	; 0x7f
 800ea00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ea02:	7afb      	ldrb	r3, [r7, #11]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d034      	beq.n	800ea72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ea08:	7afb      	ldrb	r3, [r7, #11]
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea12:	2300      	movs	r3, #0
 800ea14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea16:	4b19      	ldr	r3, [pc, #100]	; (800ea7c <tcp_kill_prio+0x94>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	617b      	str	r3, [r7, #20]
 800ea1c:	e01f      	b.n	800ea5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	7d5b      	ldrb	r3, [r3, #21]
 800ea22:	7afa      	ldrb	r2, [r7, #11]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d80c      	bhi.n	800ea42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ea2c:	7afa      	ldrb	r2, [r7, #11]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d112      	bne.n	800ea58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ea32:	4b13      	ldr	r3, [pc, #76]	; (800ea80 <tcp_kill_prio+0x98>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	6a1b      	ldr	r3, [r3, #32]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	68fa      	ldr	r2, [r7, #12]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d80a      	bhi.n	800ea58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ea42:	4b0f      	ldr	r3, [pc, #60]	; (800ea80 <tcp_kill_prio+0x98>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	6a1b      	ldr	r3, [r3, #32]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	7d5b      	ldrb	r3, [r3, #21]
 800ea56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	617b      	str	r3, [r7, #20]
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d1dc      	bne.n	800ea1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d004      	beq.n	800ea74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ea6a:	6938      	ldr	r0, [r7, #16]
 800ea6c:	f7ff f860 	bl	800db30 <tcp_abort>
 800ea70:	e000      	b.n	800ea74 <tcp_kill_prio+0x8c>
    return;
 800ea72:	bf00      	nop
  }
}
 800ea74:	3718      	adds	r7, #24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	2000be44 	.word	0x2000be44
 800ea80:	2000be38 	.word	0x2000be38

0800ea84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	2b08      	cmp	r3, #8
 800ea92:	d009      	beq.n	800eaa8 <tcp_kill_state+0x24>
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	2b09      	cmp	r3, #9
 800ea98:	d006      	beq.n	800eaa8 <tcp_kill_state+0x24>
 800ea9a:	4b1a      	ldr	r3, [pc, #104]	; (800eb04 <tcp_kill_state+0x80>)
 800ea9c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eaa0:	4919      	ldr	r1, [pc, #100]	; (800eb08 <tcp_kill_state+0x84>)
 800eaa2:	481a      	ldr	r0, [pc, #104]	; (800eb0c <tcp_kill_state+0x88>)
 800eaa4:	f008 fa6c 	bl	8016f80 <iprintf>

  inactivity = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eaac:	2300      	movs	r3, #0
 800eaae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eab0:	4b17      	ldr	r3, [pc, #92]	; (800eb10 <tcp_kill_state+0x8c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	617b      	str	r3, [r7, #20]
 800eab6:	e017      	b.n	800eae8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	7d1b      	ldrb	r3, [r3, #20]
 800eabc:	79fa      	ldrb	r2, [r7, #7]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d10f      	bne.n	800eae2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eac2:	4b14      	ldr	r3, [pc, #80]	; (800eb14 <tcp_kill_state+0x90>)
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d807      	bhi.n	800eae2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ead2:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <tcp_kill_state+0x90>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	6a1b      	ldr	r3, [r3, #32]
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	617b      	str	r3, [r7, #20]
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1e4      	bne.n	800eab8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d003      	beq.n	800eafc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6938      	ldr	r0, [r7, #16]
 800eaf8:	f7fe ff5c 	bl	800d9b4 <tcp_abandon>
  }
}
 800eafc:	bf00      	nop
 800eafe:	3718      	adds	r7, #24
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	08018f0c 	.word	0x08018f0c
 800eb08:	08019498 	.word	0x08019498
 800eb0c:	08018f50 	.word	0x08018f50
 800eb10:	2000be44 	.word	0x2000be44
 800eb14:	2000be38 	.word	0x2000be38

0800eb18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb26:	4b12      	ldr	r3, [pc, #72]	; (800eb70 <tcp_kill_timewait+0x58>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60fb      	str	r3, [r7, #12]
 800eb2c:	e012      	b.n	800eb54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb2e:	4b11      	ldr	r3, [pc, #68]	; (800eb74 <tcp_kill_timewait+0x5c>)
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d807      	bhi.n	800eb4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eb3e:	4b0d      	ldr	r3, [pc, #52]	; (800eb74 <tcp_kill_timewait+0x5c>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	1ad3      	subs	r3, r2, r3
 800eb48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	60fb      	str	r3, [r7, #12]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1e9      	bne.n	800eb2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d002      	beq.n	800eb66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb60:	68b8      	ldr	r0, [r7, #8]
 800eb62:	f7fe ffe5 	bl	800db30 <tcp_abort>
  }
}
 800eb66:	bf00      	nop
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	2000be48 	.word	0x2000be48
 800eb74:	2000be38 	.word	0x2000be38

0800eb78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eb7e:	4b10      	ldr	r3, [pc, #64]	; (800ebc0 <tcp_handle_closepend+0x48>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eb84:	e014      	b.n	800ebb0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	8b5b      	ldrh	r3, [r3, #26]
 800eb90:	f003 0308 	and.w	r3, r3, #8
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d009      	beq.n	800ebac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	8b5b      	ldrh	r3, [r3, #26]
 800eb9c:	f023 0308 	bic.w	r3, r3, #8
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7fe fe6e 	bl	800d888 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1e7      	bne.n	800eb86 <tcp_handle_closepend+0xe>
  }
}
 800ebb6:	bf00      	nop
 800ebb8:	bf00      	nop
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	2000be44 	.word	0x2000be44

0800ebc4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	4603      	mov	r3, r0
 800ebcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebce:	2001      	movs	r0, #1
 800ebd0:	f7fd fb0e 	bl	800c1f0 <memp_malloc>
 800ebd4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d126      	bne.n	800ec2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ebdc:	f7ff ffcc 	bl	800eb78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ebe0:	f7ff ff9a 	bl	800eb18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebe4:	2001      	movs	r0, #1
 800ebe6:	f7fd fb03 	bl	800c1f0 <memp_malloc>
 800ebea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d11b      	bne.n	800ec2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ebf2:	2009      	movs	r0, #9
 800ebf4:	f7ff ff46 	bl	800ea84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	f7fd faf9 	bl	800c1f0 <memp_malloc>
 800ebfe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d111      	bne.n	800ec2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ec06:	2008      	movs	r0, #8
 800ec08:	f7ff ff3c 	bl	800ea84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec0c:	2001      	movs	r0, #1
 800ec0e:	f7fd faef 	bl	800c1f0 <memp_malloc>
 800ec12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d107      	bne.n	800ec2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ec1a:	79fb      	ldrb	r3, [r7, #7]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7ff fee3 	bl	800e9e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec22:	2001      	movs	r0, #1
 800ec24:	f7fd fae4 	bl	800c1f0 <memp_malloc>
 800ec28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d03f      	beq.n	800ecb0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ec30:	229c      	movs	r2, #156	; 0x9c
 800ec32:	2100      	movs	r1, #0
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f008 f8bd 	bl	8016db4 <memset>
    pcb->prio = prio;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	79fa      	ldrb	r2, [r7, #7]
 800ec3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ec46:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ec50:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	22ff      	movs	r2, #255	; 0xff
 800ec5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ec66:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2206      	movs	r2, #6
 800ec6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2206      	movs	r2, #6
 800ec74:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec7c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ec86:	4b0d      	ldr	r3, [pc, #52]	; (800ecbc <tcp_alloc+0xf8>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ec8e:	4b0c      	ldr	r3, [pc, #48]	; (800ecc0 <tcp_alloc+0xfc>)
 800ec90:	781a      	ldrb	r2, [r3, #0]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ec9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4a08      	ldr	r2, [pc, #32]	; (800ecc4 <tcp_alloc+0x100>)
 800eca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	4a07      	ldr	r2, [pc, #28]	; (800ecc8 <tcp_alloc+0x104>)
 800ecac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	2000be38 	.word	0x2000be38
 800ecc0:	2000be4e 	.word	0x2000be4e
 800ecc4:	0800e97d 	.word	0x0800e97d
 800ecc8:	006ddd00 	.word	0x006ddd00

0800eccc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ecd6:	2040      	movs	r0, #64	; 0x40
 800ecd8:	f7ff ff74 	bl	800ebc4 <tcp_alloc>
 800ecdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ecde:	68fb      	ldr	r3, [r7, #12]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	611a      	str	r2, [r3, #16]
  }
}
 800ecfe:	bf00      	nop
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bc80      	pop	{r7}
 800ed06:	4770      	bx	lr

0800ed08 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00e      	beq.n	800ed36 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	7d1b      	ldrb	r3, [r3, #20]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d106      	bne.n	800ed2e <tcp_recv+0x26>
 800ed20:	4b07      	ldr	r3, [pc, #28]	; (800ed40 <tcp_recv+0x38>)
 800ed22:	f240 72df 	movw	r2, #2015	; 0x7df
 800ed26:	4907      	ldr	r1, [pc, #28]	; (800ed44 <tcp_recv+0x3c>)
 800ed28:	4807      	ldr	r0, [pc, #28]	; (800ed48 <tcp_recv+0x40>)
 800ed2a:	f008 f929 	bl	8016f80 <iprintf>
    pcb->recv = recv;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ed36:	bf00      	nop
 800ed38:	3708      	adds	r7, #8
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	08018f0c 	.word	0x08018f0c
 800ed44:	080194a8 	.word	0x080194a8
 800ed48:	08018f50 	.word	0x08018f50

0800ed4c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00e      	beq.n	800ed7a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	7d1b      	ldrb	r3, [r3, #20]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d106      	bne.n	800ed72 <tcp_sent+0x26>
 800ed64:	4b07      	ldr	r3, [pc, #28]	; (800ed84 <tcp_sent+0x38>)
 800ed66:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ed6a:	4907      	ldr	r1, [pc, #28]	; (800ed88 <tcp_sent+0x3c>)
 800ed6c:	4807      	ldr	r0, [pc, #28]	; (800ed8c <tcp_sent+0x40>)
 800ed6e:	f008 f907 	bl	8016f80 <iprintf>
    pcb->sent = sent;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	683a      	ldr	r2, [r7, #0]
 800ed76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ed7a:	bf00      	nop
 800ed7c:	3708      	adds	r7, #8
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	08018f0c 	.word	0x08018f0c
 800ed88:	080194d0 	.word	0x080194d0
 800ed8c:	08018f50 	.word	0x08018f50

0800ed90 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00e      	beq.n	800edbe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	7d1b      	ldrb	r3, [r3, #20]
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d106      	bne.n	800edb6 <tcp_err+0x26>
 800eda8:	4b07      	ldr	r3, [pc, #28]	; (800edc8 <tcp_err+0x38>)
 800edaa:	f640 020d 	movw	r2, #2061	; 0x80d
 800edae:	4907      	ldr	r1, [pc, #28]	; (800edcc <tcp_err+0x3c>)
 800edb0:	4807      	ldr	r0, [pc, #28]	; (800edd0 <tcp_err+0x40>)
 800edb2:	f008 f8e5 	bl	8016f80 <iprintf>
    pcb->errf = err;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	683a      	ldr	r2, [r7, #0]
 800edba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800edbe:	bf00      	nop
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	08018f0c 	.word	0x08018f0c
 800edcc:	080194f8 	.word	0x080194f8
 800edd0:	08018f50 	.word	0x08018f50

0800edd4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	4613      	mov	r3, r2
 800ede0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d107      	bne.n	800edf8 <tcp_poll+0x24>
 800ede8:	4b0e      	ldr	r3, [pc, #56]	; (800ee24 <tcp_poll+0x50>)
 800edea:	f640 023d 	movw	r2, #2109	; 0x83d
 800edee:	490e      	ldr	r1, [pc, #56]	; (800ee28 <tcp_poll+0x54>)
 800edf0:	480e      	ldr	r0, [pc, #56]	; (800ee2c <tcp_poll+0x58>)
 800edf2:	f008 f8c5 	bl	8016f80 <iprintf>
 800edf6:	e011      	b.n	800ee1c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	7d1b      	ldrb	r3, [r3, #20]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d106      	bne.n	800ee0e <tcp_poll+0x3a>
 800ee00:	4b08      	ldr	r3, [pc, #32]	; (800ee24 <tcp_poll+0x50>)
 800ee02:	f640 023e 	movw	r2, #2110	; 0x83e
 800ee06:	490a      	ldr	r1, [pc, #40]	; (800ee30 <tcp_poll+0x5c>)
 800ee08:	4808      	ldr	r0, [pc, #32]	; (800ee2c <tcp_poll+0x58>)
 800ee0a:	f008 f8b9 	bl	8016f80 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	79fa      	ldrb	r2, [r7, #7]
 800ee1a:	775a      	strb	r2, [r3, #29]
}
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	08018f0c 	.word	0x08018f0c
 800ee28:	08019520 	.word	0x08019520
 800ee2c:	08018f50 	.word	0x08018f50
 800ee30:	08019538 	.word	0x08019538

0800ee34 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d107      	bne.n	800ee52 <tcp_pcb_purge+0x1e>
 800ee42:	4b21      	ldr	r3, [pc, #132]	; (800eec8 <tcp_pcb_purge+0x94>)
 800ee44:	f640 0251 	movw	r2, #2129	; 0x851
 800ee48:	4920      	ldr	r1, [pc, #128]	; (800eecc <tcp_pcb_purge+0x98>)
 800ee4a:	4821      	ldr	r0, [pc, #132]	; (800eed0 <tcp_pcb_purge+0x9c>)
 800ee4c:	f008 f898 	bl	8016f80 <iprintf>
 800ee50:	e037      	b.n	800eec2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	7d1b      	ldrb	r3, [r3, #20]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d033      	beq.n	800eec2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ee5e:	2b0a      	cmp	r3, #10
 800ee60:	d02f      	beq.n	800eec2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d02b      	beq.n	800eec2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d007      	beq.n	800ee82 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fe f866 	bl	800cf48 <pbuf_free>
      pcb->refused_data = NULL;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d002      	beq.n	800ee90 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 f986 	bl	800f19c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee96:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff fd13 	bl	800e8c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fd0e 	bl	800e8c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	66da      	str	r2, [r3, #108]	; 0x6c
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	08018f0c 	.word	0x08018f0c
 800eecc:	08019558 	.word	0x08019558
 800eed0:	08018f50 	.word	0x08018f50

0800eed4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d106      	bne.n	800eef2 <tcp_pcb_remove+0x1e>
 800eee4:	4b3e      	ldr	r3, [pc, #248]	; (800efe0 <tcp_pcb_remove+0x10c>)
 800eee6:	f640 0283 	movw	r2, #2179	; 0x883
 800eeea:	493e      	ldr	r1, [pc, #248]	; (800efe4 <tcp_pcb_remove+0x110>)
 800eeec:	483e      	ldr	r0, [pc, #248]	; (800efe8 <tcp_pcb_remove+0x114>)
 800eeee:	f008 f847 	bl	8016f80 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d106      	bne.n	800ef06 <tcp_pcb_remove+0x32>
 800eef8:	4b39      	ldr	r3, [pc, #228]	; (800efe0 <tcp_pcb_remove+0x10c>)
 800eefa:	f640 0284 	movw	r2, #2180	; 0x884
 800eefe:	493b      	ldr	r1, [pc, #236]	; (800efec <tcp_pcb_remove+0x118>)
 800ef00:	4839      	ldr	r0, [pc, #228]	; (800efe8 <tcp_pcb_remove+0x114>)
 800ef02:	f008 f83d 	bl	8016f80 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d105      	bne.n	800ef1c <tcp_pcb_remove+0x48>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68da      	ldr	r2, [r3, #12]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	e013      	b.n	800ef44 <tcp_pcb_remove+0x70>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	60fb      	str	r3, [r7, #12]
 800ef22:	e00c      	b.n	800ef3e <tcp_pcb_remove+0x6a>
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d104      	bne.n	800ef38 <tcp_pcb_remove+0x64>
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	68da      	ldr	r2, [r3, #12]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	60da      	str	r2, [r3, #12]
 800ef36:	e005      	b.n	800ef44 <tcp_pcb_remove+0x70>
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1ef      	bne.n	800ef24 <tcp_pcb_remove+0x50>
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	2200      	movs	r2, #0
 800ef48:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ef4a:	6838      	ldr	r0, [r7, #0]
 800ef4c:	f7ff ff72 	bl	800ee34 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	7d1b      	ldrb	r3, [r3, #20]
 800ef54:	2b0a      	cmp	r3, #10
 800ef56:	d013      	beq.n	800ef80 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d00f      	beq.n	800ef80 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	8b5b      	ldrh	r3, [r3, #26]
 800ef64:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d009      	beq.n	800ef80 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	8b5b      	ldrh	r3, [r3, #26]
 800ef70:	f043 0302 	orr.w	r3, r3, #2
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef7a:	6838      	ldr	r0, [r7, #0]
 800ef7c:	f003 fbc6 	bl	801270c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	7d1b      	ldrb	r3, [r3, #20]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d020      	beq.n	800efca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d006      	beq.n	800ef9e <tcp_pcb_remove+0xca>
 800ef90:	4b13      	ldr	r3, [pc, #76]	; (800efe0 <tcp_pcb_remove+0x10c>)
 800ef92:	f640 0293 	movw	r2, #2195	; 0x893
 800ef96:	4916      	ldr	r1, [pc, #88]	; (800eff0 <tcp_pcb_remove+0x11c>)
 800ef98:	4813      	ldr	r0, [pc, #76]	; (800efe8 <tcp_pcb_remove+0x114>)
 800ef9a:	f007 fff1 	bl	8016f80 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d006      	beq.n	800efb4 <tcp_pcb_remove+0xe0>
 800efa6:	4b0e      	ldr	r3, [pc, #56]	; (800efe0 <tcp_pcb_remove+0x10c>)
 800efa8:	f640 0294 	movw	r2, #2196	; 0x894
 800efac:	4911      	ldr	r1, [pc, #68]	; (800eff4 <tcp_pcb_remove+0x120>)
 800efae:	480e      	ldr	r0, [pc, #56]	; (800efe8 <tcp_pcb_remove+0x114>)
 800efb0:	f007 ffe6 	bl	8016f80 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d006      	beq.n	800efca <tcp_pcb_remove+0xf6>
 800efbc:	4b08      	ldr	r3, [pc, #32]	; (800efe0 <tcp_pcb_remove+0x10c>)
 800efbe:	f640 0296 	movw	r2, #2198	; 0x896
 800efc2:	490d      	ldr	r1, [pc, #52]	; (800eff8 <tcp_pcb_remove+0x124>)
 800efc4:	4808      	ldr	r0, [pc, #32]	; (800efe8 <tcp_pcb_remove+0x114>)
 800efc6:	f007 ffdb 	bl	8016f80 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	2200      	movs	r2, #0
 800efce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	2200      	movs	r2, #0
 800efd4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800efd6:	bf00      	nop
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	08018f0c 	.word	0x08018f0c
 800efe4:	08019574 	.word	0x08019574
 800efe8:	08018f50 	.word	0x08018f50
 800efec:	08019590 	.word	0x08019590
 800eff0:	080195b0 	.word	0x080195b0
 800eff4:	080195c8 	.word	0x080195c8
 800eff8:	080195e4 	.word	0x080195e4

0800effc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d106      	bne.n	800f018 <tcp_next_iss+0x1c>
 800f00a:	4b0a      	ldr	r3, [pc, #40]	; (800f034 <tcp_next_iss+0x38>)
 800f00c:	f640 02af 	movw	r2, #2223	; 0x8af
 800f010:	4909      	ldr	r1, [pc, #36]	; (800f038 <tcp_next_iss+0x3c>)
 800f012:	480a      	ldr	r0, [pc, #40]	; (800f03c <tcp_next_iss+0x40>)
 800f014:	f007 ffb4 	bl	8016f80 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f018:	4b09      	ldr	r3, [pc, #36]	; (800f040 <tcp_next_iss+0x44>)
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	4b09      	ldr	r3, [pc, #36]	; (800f044 <tcp_next_iss+0x48>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	4413      	add	r3, r2
 800f022:	4a07      	ldr	r2, [pc, #28]	; (800f040 <tcp_next_iss+0x44>)
 800f024:	6013      	str	r3, [r2, #0]
  return iss;
 800f026:	4b06      	ldr	r3, [pc, #24]	; (800f040 <tcp_next_iss+0x44>)
 800f028:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	08018f0c 	.word	0x08018f0c
 800f038:	080195fc 	.word	0x080195fc
 800f03c:	08018f50 	.word	0x08018f50
 800f040:	20000014 	.word	0x20000014
 800f044:	2000be38 	.word	0x2000be38

0800f048 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b086      	sub	sp, #24
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	4603      	mov	r3, r0
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
 800f054:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d106      	bne.n	800f06a <tcp_eff_send_mss_netif+0x22>
 800f05c:	4b14      	ldr	r3, [pc, #80]	; (800f0b0 <tcp_eff_send_mss_netif+0x68>)
 800f05e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f062:	4914      	ldr	r1, [pc, #80]	; (800f0b4 <tcp_eff_send_mss_netif+0x6c>)
 800f064:	4814      	ldr	r0, [pc, #80]	; (800f0b8 <tcp_eff_send_mss_netif+0x70>)
 800f066:	f007 ff8b 	bl	8016f80 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d101      	bne.n	800f074 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f070:	89fb      	ldrh	r3, [r7, #14]
 800f072:	e019      	b.n	800f0a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f078:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f07a:	8afb      	ldrh	r3, [r7, #22]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d012      	beq.n	800f0a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f080:	2328      	movs	r3, #40	; 0x28
 800f082:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f084:	8afa      	ldrh	r2, [r7, #22]
 800f086:	8abb      	ldrh	r3, [r7, #20]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d904      	bls.n	800f096 <tcp_eff_send_mss_netif+0x4e>
 800f08c:	8afa      	ldrh	r2, [r7, #22]
 800f08e:	8abb      	ldrh	r3, [r7, #20]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	b29b      	uxth	r3, r3
 800f094:	e000      	b.n	800f098 <tcp_eff_send_mss_netif+0x50>
 800f096:	2300      	movs	r3, #0
 800f098:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f09a:	8a7a      	ldrh	r2, [r7, #18]
 800f09c:	89fb      	ldrh	r3, [r7, #14]
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	bf28      	it	cs
 800f0a2:	4613      	movcs	r3, r2
 800f0a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f0a6:	89fb      	ldrh	r3, [r7, #14]
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3718      	adds	r7, #24
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	08018f0c 	.word	0x08018f0c
 800f0b4:	08019618 	.word	0x08019618
 800f0b8:	08018f50 	.word	0x08018f50

0800f0bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d119      	bne.n	800f104 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f0d0:	4b10      	ldr	r3, [pc, #64]	; (800f114 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f0d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f0d6:	4910      	ldr	r1, [pc, #64]	; (800f118 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f0d8:	4810      	ldr	r0, [pc, #64]	; (800f11c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f0da:	f007 ff51 	bl	8016f80 <iprintf>

  while (pcb != NULL) {
 800f0de:	e011      	b.n	800f104 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d108      	bne.n	800f0fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f7fe fd1c 	bl	800db30 <tcp_abort>
      pcb = next;
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	e002      	b.n	800f104 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1ea      	bne.n	800f0e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f10a:	bf00      	nop
 800f10c:	bf00      	nop
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	08018f0c 	.word	0x08018f0c
 800f118:	08019640 	.word	0x08019640
 800f11c:	08018f50 	.word	0x08018f50

0800f120 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d02a      	beq.n	800f186 <tcp_netif_ip_addr_changed+0x66>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d026      	beq.n	800f186 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f138:	4b15      	ldr	r3, [pc, #84]	; (800f190 <tcp_netif_ip_addr_changed+0x70>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4619      	mov	r1, r3
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7ff ffbc 	bl	800f0bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f144:	4b13      	ldr	r3, [pc, #76]	; (800f194 <tcp_netif_ip_addr_changed+0x74>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4619      	mov	r1, r3
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7ff ffb6 	bl	800f0bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d017      	beq.n	800f186 <tcp_netif_ip_addr_changed+0x66>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d013      	beq.n	800f186 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f15e:	4b0e      	ldr	r3, [pc, #56]	; (800f198 <tcp_netif_ip_addr_changed+0x78>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	e00c      	b.n	800f180 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d103      	bne.n	800f17a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	60fb      	str	r3, [r7, #12]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d1ef      	bne.n	800f166 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f186:	bf00      	nop
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	2000be44 	.word	0x2000be44
 800f194:	2000be3c 	.word	0x2000be3c
 800f198:	2000be40 	.word	0x2000be40

0800f19c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d007      	beq.n	800f1bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7ff fb89 	bl	800e8c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f1bc:	bf00      	nop
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f1c4:	b590      	push	{r4, r7, lr}
 800f1c6:	b08d      	sub	sp, #52	; 0x34
 800f1c8:	af04      	add	r7, sp, #16
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d105      	bne.n	800f1e0 <tcp_input+0x1c>
 800f1d4:	4b9b      	ldr	r3, [pc, #620]	; (800f444 <tcp_input+0x280>)
 800f1d6:	2283      	movs	r2, #131	; 0x83
 800f1d8:	499b      	ldr	r1, [pc, #620]	; (800f448 <tcp_input+0x284>)
 800f1da:	489c      	ldr	r0, [pc, #624]	; (800f44c <tcp_input+0x288>)
 800f1dc:	f007 fed0 	bl	8016f80 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	4a9a      	ldr	r2, [pc, #616]	; (800f450 <tcp_input+0x28c>)
 800f1e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	895b      	ldrh	r3, [r3, #10]
 800f1ec:	2b13      	cmp	r3, #19
 800f1ee:	f240 83d1 	bls.w	800f994 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f1f2:	4b98      	ldr	r3, [pc, #608]	; (800f454 <tcp_input+0x290>)
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	4a97      	ldr	r2, [pc, #604]	; (800f454 <tcp_input+0x290>)
 800f1f8:	6812      	ldr	r2, [r2, #0]
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f006 f8fb 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	f040 83c7 	bne.w	800f998 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f20a:	4b92      	ldr	r3, [pc, #584]	; (800f454 <tcp_input+0x290>)
 800f20c:	695b      	ldr	r3, [r3, #20]
 800f20e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f212:	2be0      	cmp	r3, #224	; 0xe0
 800f214:	f000 83c0 	beq.w	800f998 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f218:	4b8d      	ldr	r3, [pc, #564]	; (800f450 <tcp_input+0x28c>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	899b      	ldrh	r3, [r3, #12]
 800f21e:	b29b      	uxth	r3, r3
 800f220:	4618      	mov	r0, r3
 800f222:	f7fc fa35 	bl	800b690 <lwip_htons>
 800f226:	4603      	mov	r3, r0
 800f228:	0b1b      	lsrs	r3, r3, #12
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f232:	7cbb      	ldrb	r3, [r7, #18]
 800f234:	2b13      	cmp	r3, #19
 800f236:	f240 83b1 	bls.w	800f99c <tcp_input+0x7d8>
 800f23a:	7cbb      	ldrb	r3, [r7, #18]
 800f23c:	b29a      	uxth	r2, r3
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	891b      	ldrh	r3, [r3, #8]
 800f242:	429a      	cmp	r2, r3
 800f244:	f200 83aa 	bhi.w	800f99c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f248:	7cbb      	ldrb	r3, [r7, #18]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	3b14      	subs	r3, #20
 800f24e:	b29a      	uxth	r2, r3
 800f250:	4b81      	ldr	r3, [pc, #516]	; (800f458 <tcp_input+0x294>)
 800f252:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f254:	4b81      	ldr	r3, [pc, #516]	; (800f45c <tcp_input+0x298>)
 800f256:	2200      	movs	r2, #0
 800f258:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	895a      	ldrh	r2, [r3, #10]
 800f25e:	7cbb      	ldrb	r3, [r7, #18]
 800f260:	b29b      	uxth	r3, r3
 800f262:	429a      	cmp	r2, r3
 800f264:	d309      	bcc.n	800f27a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f266:	4b7c      	ldr	r3, [pc, #496]	; (800f458 <tcp_input+0x294>)
 800f268:	881a      	ldrh	r2, [r3, #0]
 800f26a:	4b7d      	ldr	r3, [pc, #500]	; (800f460 <tcp_input+0x29c>)
 800f26c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f26e:	7cbb      	ldrb	r3, [r7, #18]
 800f270:	4619      	mov	r1, r3
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7fd fde2 	bl	800ce3c <pbuf_remove_header>
 800f278:	e04e      	b.n	800f318 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d105      	bne.n	800f28e <tcp_input+0xca>
 800f282:	4b70      	ldr	r3, [pc, #448]	; (800f444 <tcp_input+0x280>)
 800f284:	22c2      	movs	r2, #194	; 0xc2
 800f286:	4977      	ldr	r1, [pc, #476]	; (800f464 <tcp_input+0x2a0>)
 800f288:	4870      	ldr	r0, [pc, #448]	; (800f44c <tcp_input+0x288>)
 800f28a:	f007 fe79 	bl	8016f80 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f28e:	2114      	movs	r1, #20
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7fd fdd3 	bl	800ce3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	895a      	ldrh	r2, [r3, #10]
 800f29a:	4b71      	ldr	r3, [pc, #452]	; (800f460 <tcp_input+0x29c>)
 800f29c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f29e:	4b6e      	ldr	r3, [pc, #440]	; (800f458 <tcp_input+0x294>)
 800f2a0:	881a      	ldrh	r2, [r3, #0]
 800f2a2:	4b6f      	ldr	r3, [pc, #444]	; (800f460 <tcp_input+0x29c>)
 800f2a4:	881b      	ldrh	r3, [r3, #0]
 800f2a6:	1ad3      	subs	r3, r2, r3
 800f2a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f2aa:	4b6d      	ldr	r3, [pc, #436]	; (800f460 <tcp_input+0x29c>)
 800f2ac:	881b      	ldrh	r3, [r3, #0]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7fd fdc3 	bl	800ce3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	895b      	ldrh	r3, [r3, #10]
 800f2bc:	8a3a      	ldrh	r2, [r7, #16]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	f200 836e 	bhi.w	800f9a0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	4a64      	ldr	r2, [pc, #400]	; (800f45c <tcp_input+0x298>)
 800f2cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	8a3a      	ldrh	r2, [r7, #16]
 800f2d4:	4611      	mov	r1, r2
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fd fdb0 	bl	800ce3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	891a      	ldrh	r2, [r3, #8]
 800f2e0:	8a3b      	ldrh	r3, [r7, #16]
 800f2e2:	1ad3      	subs	r3, r2, r3
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	895b      	ldrh	r3, [r3, #10]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d005      	beq.n	800f2fe <tcp_input+0x13a>
 800f2f2:	4b54      	ldr	r3, [pc, #336]	; (800f444 <tcp_input+0x280>)
 800f2f4:	22df      	movs	r2, #223	; 0xdf
 800f2f6:	495c      	ldr	r1, [pc, #368]	; (800f468 <tcp_input+0x2a4>)
 800f2f8:	4854      	ldr	r0, [pc, #336]	; (800f44c <tcp_input+0x288>)
 800f2fa:	f007 fe41 	bl	8016f80 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	891a      	ldrh	r2, [r3, #8]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	891b      	ldrh	r3, [r3, #8]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d005      	beq.n	800f318 <tcp_input+0x154>
 800f30c:	4b4d      	ldr	r3, [pc, #308]	; (800f444 <tcp_input+0x280>)
 800f30e:	22e0      	movs	r2, #224	; 0xe0
 800f310:	4956      	ldr	r1, [pc, #344]	; (800f46c <tcp_input+0x2a8>)
 800f312:	484e      	ldr	r0, [pc, #312]	; (800f44c <tcp_input+0x288>)
 800f314:	f007 fe34 	bl	8016f80 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f318:	4b4d      	ldr	r3, [pc, #308]	; (800f450 <tcp_input+0x28c>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	b29b      	uxth	r3, r3
 800f320:	4a4b      	ldr	r2, [pc, #300]	; (800f450 <tcp_input+0x28c>)
 800f322:	6814      	ldr	r4, [r2, #0]
 800f324:	4618      	mov	r0, r3
 800f326:	f7fc f9b3 	bl	800b690 <lwip_htons>
 800f32a:	4603      	mov	r3, r0
 800f32c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f32e:	4b48      	ldr	r3, [pc, #288]	; (800f450 <tcp_input+0x28c>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	885b      	ldrh	r3, [r3, #2]
 800f334:	b29b      	uxth	r3, r3
 800f336:	4a46      	ldr	r2, [pc, #280]	; (800f450 <tcp_input+0x28c>)
 800f338:	6814      	ldr	r4, [r2, #0]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fc f9a8 	bl	800b690 <lwip_htons>
 800f340:	4603      	mov	r3, r0
 800f342:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f344:	4b42      	ldr	r3, [pc, #264]	; (800f450 <tcp_input+0x28c>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	4a41      	ldr	r2, [pc, #260]	; (800f450 <tcp_input+0x28c>)
 800f34c:	6814      	ldr	r4, [r2, #0]
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fc f9b2 	bl	800b6b8 <lwip_htonl>
 800f354:	4603      	mov	r3, r0
 800f356:	6063      	str	r3, [r4, #4]
 800f358:	6863      	ldr	r3, [r4, #4]
 800f35a:	4a45      	ldr	r2, [pc, #276]	; (800f470 <tcp_input+0x2ac>)
 800f35c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f35e:	4b3c      	ldr	r3, [pc, #240]	; (800f450 <tcp_input+0x28c>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	4a3a      	ldr	r2, [pc, #232]	; (800f450 <tcp_input+0x28c>)
 800f366:	6814      	ldr	r4, [r2, #0]
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fc f9a5 	bl	800b6b8 <lwip_htonl>
 800f36e:	4603      	mov	r3, r0
 800f370:	60a3      	str	r3, [r4, #8]
 800f372:	68a3      	ldr	r3, [r4, #8]
 800f374:	4a3f      	ldr	r2, [pc, #252]	; (800f474 <tcp_input+0x2b0>)
 800f376:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f378:	4b35      	ldr	r3, [pc, #212]	; (800f450 <tcp_input+0x28c>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	89db      	ldrh	r3, [r3, #14]
 800f37e:	b29b      	uxth	r3, r3
 800f380:	4a33      	ldr	r2, [pc, #204]	; (800f450 <tcp_input+0x28c>)
 800f382:	6814      	ldr	r4, [r2, #0]
 800f384:	4618      	mov	r0, r3
 800f386:	f7fc f983 	bl	800b690 <lwip_htons>
 800f38a:	4603      	mov	r3, r0
 800f38c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f38e:	4b30      	ldr	r3, [pc, #192]	; (800f450 <tcp_input+0x28c>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	899b      	ldrh	r3, [r3, #12]
 800f394:	b29b      	uxth	r3, r3
 800f396:	4618      	mov	r0, r3
 800f398:	f7fc f97a 	bl	800b690 <lwip_htons>
 800f39c:	4603      	mov	r3, r0
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3a4:	b2da      	uxtb	r2, r3
 800f3a6:	4b34      	ldr	r3, [pc, #208]	; (800f478 <tcp_input+0x2b4>)
 800f3a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	891a      	ldrh	r2, [r3, #8]
 800f3ae:	4b33      	ldr	r3, [pc, #204]	; (800f47c <tcp_input+0x2b8>)
 800f3b0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f3b2:	4b31      	ldr	r3, [pc, #196]	; (800f478 <tcp_input+0x2b4>)
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	f003 0303 	and.w	r3, r3, #3
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00c      	beq.n	800f3d8 <tcp_input+0x214>
    tcplen++;
 800f3be:	4b2f      	ldr	r3, [pc, #188]	; (800f47c <tcp_input+0x2b8>)
 800f3c0:	881b      	ldrh	r3, [r3, #0]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	4b2d      	ldr	r3, [pc, #180]	; (800f47c <tcp_input+0x2b8>)
 800f3c8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	891a      	ldrh	r2, [r3, #8]
 800f3ce:	4b2b      	ldr	r3, [pc, #172]	; (800f47c <tcp_input+0x2b8>)
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	f200 82e6 	bhi.w	800f9a4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3dc:	4b28      	ldr	r3, [pc, #160]	; (800f480 <tcp_input+0x2bc>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	61fb      	str	r3, [r7, #28]
 800f3e2:	e09d      	b.n	800f520 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	7d1b      	ldrb	r3, [r3, #20]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d105      	bne.n	800f3f8 <tcp_input+0x234>
 800f3ec:	4b15      	ldr	r3, [pc, #84]	; (800f444 <tcp_input+0x280>)
 800f3ee:	22fb      	movs	r2, #251	; 0xfb
 800f3f0:	4924      	ldr	r1, [pc, #144]	; (800f484 <tcp_input+0x2c0>)
 800f3f2:	4816      	ldr	r0, [pc, #88]	; (800f44c <tcp_input+0x288>)
 800f3f4:	f007 fdc4 	bl	8016f80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	7d1b      	ldrb	r3, [r3, #20]
 800f3fc:	2b0a      	cmp	r3, #10
 800f3fe:	d105      	bne.n	800f40c <tcp_input+0x248>
 800f400:	4b10      	ldr	r3, [pc, #64]	; (800f444 <tcp_input+0x280>)
 800f402:	22fc      	movs	r2, #252	; 0xfc
 800f404:	4920      	ldr	r1, [pc, #128]	; (800f488 <tcp_input+0x2c4>)
 800f406:	4811      	ldr	r0, [pc, #68]	; (800f44c <tcp_input+0x288>)
 800f408:	f007 fdba 	bl	8016f80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	7d1b      	ldrb	r3, [r3, #20]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d105      	bne.n	800f420 <tcp_input+0x25c>
 800f414:	4b0b      	ldr	r3, [pc, #44]	; (800f444 <tcp_input+0x280>)
 800f416:	22fd      	movs	r2, #253	; 0xfd
 800f418:	491c      	ldr	r1, [pc, #112]	; (800f48c <tcp_input+0x2c8>)
 800f41a:	480c      	ldr	r0, [pc, #48]	; (800f44c <tcp_input+0x288>)
 800f41c:	f007 fdb0 	bl	8016f80 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	7a1b      	ldrb	r3, [r3, #8]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d033      	beq.n	800f490 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	7a1a      	ldrb	r2, [r3, #8]
 800f42c:	4b09      	ldr	r3, [pc, #36]	; (800f454 <tcp_input+0x290>)
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f434:	3301      	adds	r3, #1
 800f436:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f438:	429a      	cmp	r2, r3
 800f43a:	d029      	beq.n	800f490 <tcp_input+0x2cc>
      prev = pcb;
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	61bb      	str	r3, [r7, #24]
      continue;
 800f440:	e06b      	b.n	800f51a <tcp_input+0x356>
 800f442:	bf00      	nop
 800f444:	08019674 	.word	0x08019674
 800f448:	080196a8 	.word	0x080196a8
 800f44c:	080196c0 	.word	0x080196c0
 800f450:	2000be60 	.word	0x2000be60
 800f454:	20008d38 	.word	0x20008d38
 800f458:	2000be64 	.word	0x2000be64
 800f45c:	2000be68 	.word	0x2000be68
 800f460:	2000be66 	.word	0x2000be66
 800f464:	080196e8 	.word	0x080196e8
 800f468:	080196f8 	.word	0x080196f8
 800f46c:	08019704 	.word	0x08019704
 800f470:	2000be70 	.word	0x2000be70
 800f474:	2000be74 	.word	0x2000be74
 800f478:	2000be7c 	.word	0x2000be7c
 800f47c:	2000be7a 	.word	0x2000be7a
 800f480:	2000be44 	.word	0x2000be44
 800f484:	08019724 	.word	0x08019724
 800f488:	0801974c 	.word	0x0801974c
 800f48c:	08019778 	.word	0x08019778
    }

    if (pcb->remote_port == tcphdr->src &&
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	8b1a      	ldrh	r2, [r3, #24]
 800f494:	4b72      	ldr	r3, [pc, #456]	; (800f660 <tcp_input+0x49c>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	881b      	ldrh	r3, [r3, #0]
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d13a      	bne.n	800f516 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	8ada      	ldrh	r2, [r3, #22]
 800f4a4:	4b6e      	ldr	r3, [pc, #440]	; (800f660 <tcp_input+0x49c>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	885b      	ldrh	r3, [r3, #2]
 800f4aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d132      	bne.n	800f516 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	4b6b      	ldr	r3, [pc, #428]	; (800f664 <tcp_input+0x4a0>)
 800f4b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d12c      	bne.n	800f516 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	4b68      	ldr	r3, [pc, #416]	; (800f664 <tcp_input+0x4a0>)
 800f4c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d126      	bne.n	800f516 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	69fa      	ldr	r2, [r7, #28]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d106      	bne.n	800f4e0 <tcp_input+0x31c>
 800f4d2:	4b65      	ldr	r3, [pc, #404]	; (800f668 <tcp_input+0x4a4>)
 800f4d4:	f240 120d 	movw	r2, #269	; 0x10d
 800f4d8:	4964      	ldr	r1, [pc, #400]	; (800f66c <tcp_input+0x4a8>)
 800f4da:	4865      	ldr	r0, [pc, #404]	; (800f670 <tcp_input+0x4ac>)
 800f4dc:	f007 fd50 	bl	8016f80 <iprintf>
      if (prev != NULL) {
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00a      	beq.n	800f4fc <tcp_input+0x338>
        prev->next = pcb->next;
 800f4e6:	69fb      	ldr	r3, [r7, #28]
 800f4e8:	68da      	ldr	r2, [r3, #12]
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f4ee:	4b61      	ldr	r3, [pc, #388]	; (800f674 <tcp_input+0x4b0>)
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f4f6:	4a5f      	ldr	r2, [pc, #380]	; (800f674 <tcp_input+0x4b0>)
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	69fa      	ldr	r2, [r7, #28]
 800f502:	429a      	cmp	r2, r3
 800f504:	d111      	bne.n	800f52a <tcp_input+0x366>
 800f506:	4b58      	ldr	r3, [pc, #352]	; (800f668 <tcp_input+0x4a4>)
 800f508:	f240 1215 	movw	r2, #277	; 0x115
 800f50c:	495a      	ldr	r1, [pc, #360]	; (800f678 <tcp_input+0x4b4>)
 800f50e:	4858      	ldr	r0, [pc, #352]	; (800f670 <tcp_input+0x4ac>)
 800f510:	f007 fd36 	bl	8016f80 <iprintf>
      break;
 800f514:	e009      	b.n	800f52a <tcp_input+0x366>
    }
    prev = pcb;
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	61fb      	str	r3, [r7, #28]
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	2b00      	cmp	r3, #0
 800f524:	f47f af5e 	bne.w	800f3e4 <tcp_input+0x220>
 800f528:	e000      	b.n	800f52c <tcp_input+0x368>
      break;
 800f52a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f040 80aa 	bne.w	800f688 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f534:	4b51      	ldr	r3, [pc, #324]	; (800f67c <tcp_input+0x4b8>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	61fb      	str	r3, [r7, #28]
 800f53a:	e03f      	b.n	800f5bc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	7d1b      	ldrb	r3, [r3, #20]
 800f540:	2b0a      	cmp	r3, #10
 800f542:	d006      	beq.n	800f552 <tcp_input+0x38e>
 800f544:	4b48      	ldr	r3, [pc, #288]	; (800f668 <tcp_input+0x4a4>)
 800f546:	f240 121f 	movw	r2, #287	; 0x11f
 800f54a:	494d      	ldr	r1, [pc, #308]	; (800f680 <tcp_input+0x4bc>)
 800f54c:	4848      	ldr	r0, [pc, #288]	; (800f670 <tcp_input+0x4ac>)
 800f54e:	f007 fd17 	bl	8016f80 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	7a1b      	ldrb	r3, [r3, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d009      	beq.n	800f56e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	7a1a      	ldrb	r2, [r3, #8]
 800f55e:	4b41      	ldr	r3, [pc, #260]	; (800f664 <tcp_input+0x4a0>)
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f566:	3301      	adds	r3, #1
 800f568:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d122      	bne.n	800f5b4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	8b1a      	ldrh	r2, [r3, #24]
 800f572:	4b3b      	ldr	r3, [pc, #236]	; (800f660 <tcp_input+0x49c>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d11b      	bne.n	800f5b6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	8ada      	ldrh	r2, [r3, #22]
 800f582:	4b37      	ldr	r3, [pc, #220]	; (800f660 <tcp_input+0x49c>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	885b      	ldrh	r3, [r3, #2]
 800f588:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d113      	bne.n	800f5b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	685a      	ldr	r2, [r3, #4]
 800f592:	4b34      	ldr	r3, [pc, #208]	; (800f664 <tcp_input+0x4a0>)
 800f594:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f596:	429a      	cmp	r2, r3
 800f598:	d10d      	bne.n	800f5b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	4b31      	ldr	r3, [pc, #196]	; (800f664 <tcp_input+0x4a0>)
 800f5a0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d107      	bne.n	800f5b6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f5a6:	69f8      	ldr	r0, [r7, #28]
 800f5a8:	f000 fb56 	bl	800fc58 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f7fd fccb 	bl	800cf48 <pbuf_free>
        return;
 800f5b2:	e1fd      	b.n	800f9b0 <tcp_input+0x7ec>
        continue;
 800f5b4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	61fb      	str	r3, [r7, #28]
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1bc      	bne.n	800f53c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f5c6:	4b2f      	ldr	r3, [pc, #188]	; (800f684 <tcp_input+0x4c0>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	617b      	str	r3, [r7, #20]
 800f5cc:	e02a      	b.n	800f624 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	7a1b      	ldrb	r3, [r3, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00c      	beq.n	800f5f0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	7a1a      	ldrb	r2, [r3, #8]
 800f5da:	4b22      	ldr	r3, [pc, #136]	; (800f664 <tcp_input+0x4a0>)
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d002      	beq.n	800f5f0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	61bb      	str	r3, [r7, #24]
        continue;
 800f5ee:	e016      	b.n	800f61e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	8ada      	ldrh	r2, [r3, #22]
 800f5f4:	4b1a      	ldr	r3, [pc, #104]	; (800f660 <tcp_input+0x49c>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	885b      	ldrh	r3, [r3, #2]
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d10c      	bne.n	800f61a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	4b17      	ldr	r3, [pc, #92]	; (800f664 <tcp_input+0x4a0>)
 800f606:	695b      	ldr	r3, [r3, #20]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d00f      	beq.n	800f62c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00d      	beq.n	800f62e <tcp_input+0x46a>
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d009      	beq.n	800f62e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	617b      	str	r3, [r7, #20]
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d1d1      	bne.n	800f5ce <tcp_input+0x40a>
 800f62a:	e000      	b.n	800f62e <tcp_input+0x46a>
            break;
 800f62c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d029      	beq.n	800f688 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00a      	beq.n	800f650 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	68da      	ldr	r2, [r3, #12]
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f642:	4b10      	ldr	r3, [pc, #64]	; (800f684 <tcp_input+0x4c0>)
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f64a:	4a0e      	ldr	r2, [pc, #56]	; (800f684 <tcp_input+0x4c0>)
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f650:	6978      	ldr	r0, [r7, #20]
 800f652:	f000 fa03 	bl	800fa5c <tcp_listen_input>
      }
      pbuf_free(p);
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f7fd fc76 	bl	800cf48 <pbuf_free>
      return;
 800f65c:	e1a8      	b.n	800f9b0 <tcp_input+0x7ec>
 800f65e:	bf00      	nop
 800f660:	2000be60 	.word	0x2000be60
 800f664:	20008d38 	.word	0x20008d38
 800f668:	08019674 	.word	0x08019674
 800f66c:	080197a0 	.word	0x080197a0
 800f670:	080196c0 	.word	0x080196c0
 800f674:	2000be44 	.word	0x2000be44
 800f678:	080197cc 	.word	0x080197cc
 800f67c:	2000be48 	.word	0x2000be48
 800f680:	080197f8 	.word	0x080197f8
 800f684:	2000be40 	.word	0x2000be40
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 8158 	beq.w	800f940 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f690:	4b95      	ldr	r3, [pc, #596]	; (800f8e8 <tcp_input+0x724>)
 800f692:	2200      	movs	r2, #0
 800f694:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	891a      	ldrh	r2, [r3, #8]
 800f69a:	4b93      	ldr	r3, [pc, #588]	; (800f8e8 <tcp_input+0x724>)
 800f69c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f69e:	4a92      	ldr	r2, [pc, #584]	; (800f8e8 <tcp_input+0x724>)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f6a4:	4b91      	ldr	r3, [pc, #580]	; (800f8ec <tcp_input+0x728>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a8f      	ldr	r2, [pc, #572]	; (800f8e8 <tcp_input+0x724>)
 800f6aa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f6ac:	4b90      	ldr	r3, [pc, #576]	; (800f8f0 <tcp_input+0x72c>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f6b2:	4b90      	ldr	r3, [pc, #576]	; (800f8f4 <tcp_input+0x730>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f6b8:	4b8f      	ldr	r3, [pc, #572]	; (800f8f8 <tcp_input+0x734>)
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f6be:	4b8f      	ldr	r3, [pc, #572]	; (800f8fc <tcp_input+0x738>)
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	f003 0308 	and.w	r3, r3, #8
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d006      	beq.n	800f6d8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	7b5b      	ldrb	r3, [r3, #13]
 800f6ce:	f043 0301 	orr.w	r3, r3, #1
 800f6d2:	b2da      	uxtb	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d017      	beq.n	800f710 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f6e0:	69f8      	ldr	r0, [r7, #28]
 800f6e2:	f7ff f875 	bl	800e7d0 <tcp_process_refused_data>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	f113 0f0d 	cmn.w	r3, #13
 800f6ec:	d007      	beq.n	800f6fe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00c      	beq.n	800f710 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f6f6:	4b82      	ldr	r3, [pc, #520]	; (800f900 <tcp_input+0x73c>)
 800f6f8:	881b      	ldrh	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d008      	beq.n	800f710 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f702:	2b00      	cmp	r3, #0
 800f704:	f040 80e3 	bne.w	800f8ce <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f708:	69f8      	ldr	r0, [r7, #28]
 800f70a:	f003 fe05 	bl	8013318 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f70e:	e0de      	b.n	800f8ce <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f710:	4a7c      	ldr	r2, [pc, #496]	; (800f904 <tcp_input+0x740>)
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f716:	69f8      	ldr	r0, [r7, #28]
 800f718:	f000 fb18 	bl	800fd4c <tcp_process>
 800f71c:	4603      	mov	r3, r0
 800f71e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f720:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f724:	f113 0f0d 	cmn.w	r3, #13
 800f728:	f000 80d3 	beq.w	800f8d2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f72c:	4b71      	ldr	r3, [pc, #452]	; (800f8f4 <tcp_input+0x730>)
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	f003 0308 	and.w	r3, r3, #8
 800f734:	2b00      	cmp	r3, #0
 800f736:	d015      	beq.n	800f764 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d008      	beq.n	800f754 <tcp_input+0x590>
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f748:	69fa      	ldr	r2, [r7, #28]
 800f74a:	6912      	ldr	r2, [r2, #16]
 800f74c:	f06f 010d 	mvn.w	r1, #13
 800f750:	4610      	mov	r0, r2
 800f752:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f754:	69f9      	ldr	r1, [r7, #28]
 800f756:	486c      	ldr	r0, [pc, #432]	; (800f908 <tcp_input+0x744>)
 800f758:	f7ff fbbc 	bl	800eed4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f75c:	69f8      	ldr	r0, [r7, #28]
 800f75e:	f7fd feff 	bl	800d560 <tcp_free>
 800f762:	e0da      	b.n	800f91a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f768:	4b63      	ldr	r3, [pc, #396]	; (800f8f8 <tcp_input+0x734>)
 800f76a:	881b      	ldrh	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d01d      	beq.n	800f7ac <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f770:	4b61      	ldr	r3, [pc, #388]	; (800f8f8 <tcp_input+0x734>)
 800f772:	881b      	ldrh	r3, [r3, #0]
 800f774:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00a      	beq.n	800f796 <tcp_input+0x5d2>
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f786:	69fa      	ldr	r2, [r7, #28]
 800f788:	6910      	ldr	r0, [r2, #16]
 800f78a:	89fa      	ldrh	r2, [r7, #14]
 800f78c:	69f9      	ldr	r1, [r7, #28]
 800f78e:	4798      	blx	r3
 800f790:	4603      	mov	r3, r0
 800f792:	74fb      	strb	r3, [r7, #19]
 800f794:	e001      	b.n	800f79a <tcp_input+0x5d6>
 800f796:	2300      	movs	r3, #0
 800f798:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f79a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f79e:	f113 0f0d 	cmn.w	r3, #13
 800f7a2:	f000 8098 	beq.w	800f8d6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f7a6:	4b54      	ldr	r3, [pc, #336]	; (800f8f8 <tcp_input+0x734>)
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f7ac:	69f8      	ldr	r0, [r7, #28]
 800f7ae:	f000 f915 	bl	800f9dc <tcp_input_delayed_close>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f040 8090 	bne.w	800f8da <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f7ba:	4b4d      	ldr	r3, [pc, #308]	; (800f8f0 <tcp_input+0x72c>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d041      	beq.n	800f846 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d006      	beq.n	800f7d8 <tcp_input+0x614>
 800f7ca:	4b50      	ldr	r3, [pc, #320]	; (800f90c <tcp_input+0x748>)
 800f7cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f7d0:	494f      	ldr	r1, [pc, #316]	; (800f910 <tcp_input+0x74c>)
 800f7d2:	4850      	ldr	r0, [pc, #320]	; (800f914 <tcp_input+0x750>)
 800f7d4:	f007 fbd4 	bl	8016f80 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	8b5b      	ldrh	r3, [r3, #26]
 800f7dc:	f003 0310 	and.w	r3, r3, #16
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d008      	beq.n	800f7f6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f7e4:	4b42      	ldr	r3, [pc, #264]	; (800f8f0 <tcp_input+0x72c>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fd fbad 	bl	800cf48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f7ee:	69f8      	ldr	r0, [r7, #28]
 800f7f0:	f7fe f99e 	bl	800db30 <tcp_abort>
            goto aborted;
 800f7f4:	e091      	b.n	800f91a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00c      	beq.n	800f81a <tcp_input+0x656>
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	6918      	ldr	r0, [r3, #16]
 800f80a:	4b39      	ldr	r3, [pc, #228]	; (800f8f0 <tcp_input+0x72c>)
 800f80c:	681a      	ldr	r2, [r3, #0]
 800f80e:	2300      	movs	r3, #0
 800f810:	69f9      	ldr	r1, [r7, #28]
 800f812:	47a0      	blx	r4
 800f814:	4603      	mov	r3, r0
 800f816:	74fb      	strb	r3, [r7, #19]
 800f818:	e008      	b.n	800f82c <tcp_input+0x668>
 800f81a:	4b35      	ldr	r3, [pc, #212]	; (800f8f0 <tcp_input+0x72c>)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	2300      	movs	r3, #0
 800f820:	69f9      	ldr	r1, [r7, #28]
 800f822:	2000      	movs	r0, #0
 800f824:	f7ff f8aa 	bl	800e97c <tcp_recv_null>
 800f828:	4603      	mov	r3, r0
 800f82a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f82c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f830:	f113 0f0d 	cmn.w	r3, #13
 800f834:	d053      	beq.n	800f8de <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f836:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d003      	beq.n	800f846 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f83e:	4b2c      	ldr	r3, [pc, #176]	; (800f8f0 <tcp_input+0x72c>)
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f846:	4b2b      	ldr	r3, [pc, #172]	; (800f8f4 <tcp_input+0x730>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	f003 0320 	and.w	r3, r3, #32
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d030      	beq.n	800f8b4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f856:	2b00      	cmp	r3, #0
 800f858:	d009      	beq.n	800f86e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f85e:	7b5a      	ldrb	r2, [r3, #13]
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f864:	f042 0220 	orr.w	r2, r2, #32
 800f868:	b2d2      	uxtb	r2, r2
 800f86a:	735a      	strb	r2, [r3, #13]
 800f86c:	e022      	b.n	800f8b4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f872:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f876:	d005      	beq.n	800f884 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f87c:	3301      	adds	r3, #1
 800f87e:	b29a      	uxth	r2, r3
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d00b      	beq.n	800f8a6 <tcp_input+0x6e2>
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	6918      	ldr	r0, [r3, #16]
 800f898:	2300      	movs	r3, #0
 800f89a:	2200      	movs	r2, #0
 800f89c:	69f9      	ldr	r1, [r7, #28]
 800f89e:	47a0      	blx	r4
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	74fb      	strb	r3, [r7, #19]
 800f8a4:	e001      	b.n	800f8aa <tcp_input+0x6e6>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f8aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8ae:	f113 0f0d 	cmn.w	r3, #13
 800f8b2:	d016      	beq.n	800f8e2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f8b4:	4b13      	ldr	r3, [pc, #76]	; (800f904 <tcp_input+0x740>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f8ba:	69f8      	ldr	r0, [r7, #28]
 800f8bc:	f000 f88e 	bl	800f9dc <tcp_input_delayed_close>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d128      	bne.n	800f918 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f8c6:	69f8      	ldr	r0, [r7, #28]
 800f8c8:	f002 ff20 	bl	801270c <tcp_output>
 800f8cc:	e025      	b.n	800f91a <tcp_input+0x756>
        goto aborted;
 800f8ce:	bf00      	nop
 800f8d0:	e023      	b.n	800f91a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f8d2:	bf00      	nop
 800f8d4:	e021      	b.n	800f91a <tcp_input+0x756>
              goto aborted;
 800f8d6:	bf00      	nop
 800f8d8:	e01f      	b.n	800f91a <tcp_input+0x756>
          goto aborted;
 800f8da:	bf00      	nop
 800f8dc:	e01d      	b.n	800f91a <tcp_input+0x756>
            goto aborted;
 800f8de:	bf00      	nop
 800f8e0:	e01b      	b.n	800f91a <tcp_input+0x756>
              goto aborted;
 800f8e2:	bf00      	nop
 800f8e4:	e019      	b.n	800f91a <tcp_input+0x756>
 800f8e6:	bf00      	nop
 800f8e8:	2000be50 	.word	0x2000be50
 800f8ec:	2000be60 	.word	0x2000be60
 800f8f0:	2000be80 	.word	0x2000be80
 800f8f4:	2000be7d 	.word	0x2000be7d
 800f8f8:	2000be78 	.word	0x2000be78
 800f8fc:	2000be7c 	.word	0x2000be7c
 800f900:	2000be7a 	.word	0x2000be7a
 800f904:	2000be84 	.word	0x2000be84
 800f908:	2000be44 	.word	0x2000be44
 800f90c:	08019674 	.word	0x08019674
 800f910:	08019828 	.word	0x08019828
 800f914:	080196c0 	.word	0x080196c0
          goto aborted;
 800f918:	bf00      	nop
    tcp_input_pcb = NULL;
 800f91a:	4b27      	ldr	r3, [pc, #156]	; (800f9b8 <tcp_input+0x7f4>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f920:	4b26      	ldr	r3, [pc, #152]	; (800f9bc <tcp_input+0x7f8>)
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f926:	4b26      	ldr	r3, [pc, #152]	; (800f9c0 <tcp_input+0x7fc>)
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d03f      	beq.n	800f9ae <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f92e:	4b24      	ldr	r3, [pc, #144]	; (800f9c0 <tcp_input+0x7fc>)
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	4618      	mov	r0, r3
 800f934:	f7fd fb08 	bl	800cf48 <pbuf_free>
      inseg.p = NULL;
 800f938:	4b21      	ldr	r3, [pc, #132]	; (800f9c0 <tcp_input+0x7fc>)
 800f93a:	2200      	movs	r2, #0
 800f93c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f93e:	e036      	b.n	800f9ae <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f940:	4b20      	ldr	r3, [pc, #128]	; (800f9c4 <tcp_input+0x800>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	899b      	ldrh	r3, [r3, #12]
 800f946:	b29b      	uxth	r3, r3
 800f948:	4618      	mov	r0, r3
 800f94a:	f7fb fea1 	bl	800b690 <lwip_htons>
 800f94e:	4603      	mov	r3, r0
 800f950:	b2db      	uxtb	r3, r3
 800f952:	f003 0304 	and.w	r3, r3, #4
 800f956:	2b00      	cmp	r3, #0
 800f958:	d118      	bne.n	800f98c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f95a:	4b1b      	ldr	r3, [pc, #108]	; (800f9c8 <tcp_input+0x804>)
 800f95c:	6819      	ldr	r1, [r3, #0]
 800f95e:	4b1b      	ldr	r3, [pc, #108]	; (800f9cc <tcp_input+0x808>)
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	4b1a      	ldr	r3, [pc, #104]	; (800f9d0 <tcp_input+0x80c>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f96a:	4b16      	ldr	r3, [pc, #88]	; (800f9c4 <tcp_input+0x800>)
 800f96c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f96e:	885b      	ldrh	r3, [r3, #2]
 800f970:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f972:	4a14      	ldr	r2, [pc, #80]	; (800f9c4 <tcp_input+0x800>)
 800f974:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f976:	8812      	ldrh	r2, [r2, #0]
 800f978:	b292      	uxth	r2, r2
 800f97a:	9202      	str	r2, [sp, #8]
 800f97c:	9301      	str	r3, [sp, #4]
 800f97e:	4b15      	ldr	r3, [pc, #84]	; (800f9d4 <tcp_input+0x810>)
 800f980:	9300      	str	r3, [sp, #0]
 800f982:	4b15      	ldr	r3, [pc, #84]	; (800f9d8 <tcp_input+0x814>)
 800f984:	4602      	mov	r2, r0
 800f986:	2000      	movs	r0, #0
 800f988:	f003 fc74 	bl	8013274 <tcp_rst>
    pbuf_free(p);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7fd fadb 	bl	800cf48 <pbuf_free>
  return;
 800f992:	e00c      	b.n	800f9ae <tcp_input+0x7ea>
    goto dropped;
 800f994:	bf00      	nop
 800f996:	e006      	b.n	800f9a6 <tcp_input+0x7e2>
    goto dropped;
 800f998:	bf00      	nop
 800f99a:	e004      	b.n	800f9a6 <tcp_input+0x7e2>
    goto dropped;
 800f99c:	bf00      	nop
 800f99e:	e002      	b.n	800f9a6 <tcp_input+0x7e2>
      goto dropped;
 800f9a0:	bf00      	nop
 800f9a2:	e000      	b.n	800f9a6 <tcp_input+0x7e2>
      goto dropped;
 800f9a4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f7fd face 	bl	800cf48 <pbuf_free>
 800f9ac:	e000      	b.n	800f9b0 <tcp_input+0x7ec>
  return;
 800f9ae:	bf00      	nop
}
 800f9b0:	3724      	adds	r7, #36	; 0x24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd90      	pop	{r4, r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	2000be84 	.word	0x2000be84
 800f9bc:	2000be80 	.word	0x2000be80
 800f9c0:	2000be50 	.word	0x2000be50
 800f9c4:	2000be60 	.word	0x2000be60
 800f9c8:	2000be74 	.word	0x2000be74
 800f9cc:	2000be7a 	.word	0x2000be7a
 800f9d0:	2000be70 	.word	0x2000be70
 800f9d4:	20008d48 	.word	0x20008d48
 800f9d8:	20008d4c 	.word	0x20008d4c

0800f9dc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d106      	bne.n	800f9f8 <tcp_input_delayed_close+0x1c>
 800f9ea:	4b17      	ldr	r3, [pc, #92]	; (800fa48 <tcp_input_delayed_close+0x6c>)
 800f9ec:	f240 225a 	movw	r2, #602	; 0x25a
 800f9f0:	4916      	ldr	r1, [pc, #88]	; (800fa4c <tcp_input_delayed_close+0x70>)
 800f9f2:	4817      	ldr	r0, [pc, #92]	; (800fa50 <tcp_input_delayed_close+0x74>)
 800f9f4:	f007 fac4 	bl	8016f80 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f9f8:	4b16      	ldr	r3, [pc, #88]	; (800fa54 <tcp_input_delayed_close+0x78>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	f003 0310 	and.w	r3, r3, #16
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d01c      	beq.n	800fa3e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	8b5b      	ldrh	r3, [r3, #26]
 800fa08:	f003 0310 	and.w	r3, r3, #16
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10d      	bne.n	800fa2c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d008      	beq.n	800fa2c <tcp_input_delayed_close+0x50>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	6912      	ldr	r2, [r2, #16]
 800fa24:	f06f 010e 	mvn.w	r1, #14
 800fa28:	4610      	mov	r0, r2
 800fa2a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa2c:	6879      	ldr	r1, [r7, #4]
 800fa2e:	480a      	ldr	r0, [pc, #40]	; (800fa58 <tcp_input_delayed_close+0x7c>)
 800fa30:	f7ff fa50 	bl	800eed4 <tcp_pcb_remove>
    tcp_free(pcb);
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f7fd fd93 	bl	800d560 <tcp_free>
    return 1;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e000      	b.n	800fa40 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fa3e:	2300      	movs	r3, #0
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	08019674 	.word	0x08019674
 800fa4c:	08019844 	.word	0x08019844
 800fa50:	080196c0 	.word	0x080196c0
 800fa54:	2000be7d 	.word	0x2000be7d
 800fa58:	2000be44 	.word	0x2000be44

0800fa5c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fa5c:	b590      	push	{r4, r7, lr}
 800fa5e:	b08b      	sub	sp, #44	; 0x2c
 800fa60:	af04      	add	r7, sp, #16
 800fa62:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fa64:	4b6f      	ldr	r3, [pc, #444]	; (800fc24 <tcp_listen_input+0x1c8>)
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	f003 0304 	and.w	r3, r3, #4
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f040 80d2 	bne.w	800fc16 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d106      	bne.n	800fa86 <tcp_listen_input+0x2a>
 800fa78:	4b6b      	ldr	r3, [pc, #428]	; (800fc28 <tcp_listen_input+0x1cc>)
 800fa7a:	f240 2281 	movw	r2, #641	; 0x281
 800fa7e:	496b      	ldr	r1, [pc, #428]	; (800fc2c <tcp_listen_input+0x1d0>)
 800fa80:	486b      	ldr	r0, [pc, #428]	; (800fc30 <tcp_listen_input+0x1d4>)
 800fa82:	f007 fa7d 	bl	8016f80 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fa86:	4b67      	ldr	r3, [pc, #412]	; (800fc24 <tcp_listen_input+0x1c8>)
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	f003 0310 	and.w	r3, r3, #16
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d019      	beq.n	800fac6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa92:	4b68      	ldr	r3, [pc, #416]	; (800fc34 <tcp_listen_input+0x1d8>)
 800fa94:	6819      	ldr	r1, [r3, #0]
 800fa96:	4b68      	ldr	r3, [pc, #416]	; (800fc38 <tcp_listen_input+0x1dc>)
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	4b67      	ldr	r3, [pc, #412]	; (800fc3c <tcp_listen_input+0x1e0>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faa2:	4b67      	ldr	r3, [pc, #412]	; (800fc40 <tcp_listen_input+0x1e4>)
 800faa4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faa6:	885b      	ldrh	r3, [r3, #2]
 800faa8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faaa:	4a65      	ldr	r2, [pc, #404]	; (800fc40 <tcp_listen_input+0x1e4>)
 800faac:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faae:	8812      	ldrh	r2, [r2, #0]
 800fab0:	b292      	uxth	r2, r2
 800fab2:	9202      	str	r2, [sp, #8]
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	4b63      	ldr	r3, [pc, #396]	; (800fc44 <tcp_listen_input+0x1e8>)
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	4b63      	ldr	r3, [pc, #396]	; (800fc48 <tcp_listen_input+0x1ec>)
 800fabc:	4602      	mov	r2, r0
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f003 fbd8 	bl	8013274 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fac4:	e0a9      	b.n	800fc1a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fac6:	4b57      	ldr	r3, [pc, #348]	; (800fc24 <tcp_listen_input+0x1c8>)
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	f003 0302 	and.w	r3, r3, #2
 800face:	2b00      	cmp	r3, #0
 800fad0:	f000 80a3 	beq.w	800fc1a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	7d5b      	ldrb	r3, [r3, #21]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7ff f873 	bl	800ebc4 <tcp_alloc>
 800fade:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d111      	bne.n	800fb0a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	699b      	ldr	r3, [r3, #24]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00a      	beq.n	800fb04 <tcp_listen_input+0xa8>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	699b      	ldr	r3, [r3, #24]
 800faf2:	687a      	ldr	r2, [r7, #4]
 800faf4:	6910      	ldr	r0, [r2, #16]
 800faf6:	f04f 32ff 	mov.w	r2, #4294967295
 800fafa:	2100      	movs	r1, #0
 800fafc:	4798      	blx	r3
 800fafe:	4603      	mov	r3, r0
 800fb00:	73bb      	strb	r3, [r7, #14]
      return;
 800fb02:	e08b      	b.n	800fc1c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb04:	23f0      	movs	r3, #240	; 0xf0
 800fb06:	73bb      	strb	r3, [r7, #14]
      return;
 800fb08:	e088      	b.n	800fc1c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fb0a:	4b50      	ldr	r3, [pc, #320]	; (800fc4c <tcp_listen_input+0x1f0>)
 800fb0c:	695a      	ldr	r2, [r3, #20]
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fb12:	4b4e      	ldr	r3, [pc, #312]	; (800fc4c <tcp_listen_input+0x1f0>)
 800fb14:	691a      	ldr	r2, [r3, #16]
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	8ada      	ldrh	r2, [r3, #22]
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fb22:	4b47      	ldr	r3, [pc, #284]	; (800fc40 <tcp_listen_input+0x1e4>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	881b      	ldrh	r3, [r3, #0]
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	2203      	movs	r2, #3
 800fb32:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fb34:	4b41      	ldr	r3, [pc, #260]	; (800fc3c <tcp_listen_input+0x1e0>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	1c5a      	adds	r2, r3, #1
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fb46:	6978      	ldr	r0, [r7, #20]
 800fb48:	f7ff fa58 	bl	800effc <tcp_next_iss>
 800fb4c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	693a      	ldr	r2, [r7, #16]
 800fb52:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	693a      	ldr	r2, [r7, #16]
 800fb58:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	693a      	ldr	r2, [r7, #16]
 800fb5e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fb66:	4b35      	ldr	r3, [pc, #212]	; (800fc3c <tcp_listen_input+0x1e0>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	1e5a      	subs	r2, r3, #1
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	691a      	ldr	r2, [r3, #16]
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	7a5b      	ldrb	r3, [r3, #9]
 800fb82:	f003 030c 	and.w	r3, r3, #12
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	7a1a      	ldrb	r2, [r3, #8]
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fb94:	4b2e      	ldr	r3, [pc, #184]	; (800fc50 <tcp_listen_input+0x1f4>)
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	60da      	str	r2, [r3, #12]
 800fb9c:	4a2c      	ldr	r2, [pc, #176]	; (800fc50 <tcp_listen_input+0x1f4>)
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	6013      	str	r3, [r2, #0]
 800fba2:	f003 fd29 	bl	80135f8 <tcp_timer_needed>
 800fba6:	4b2b      	ldr	r3, [pc, #172]	; (800fc54 <tcp_listen_input+0x1f8>)
 800fba8:	2201      	movs	r2, #1
 800fbaa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fbac:	6978      	ldr	r0, [r7, #20]
 800fbae:	f001 fd8f 	bl	80116d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fbb2:	4b23      	ldr	r3, [pc, #140]	; (800fc40 <tcp_listen_input+0x1e4>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	89db      	ldrh	r3, [r3, #14]
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f005 f97b 	bl	8014ed0 <ip4_route>
 800fbda:	4601      	mov	r1, r0
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	3304      	adds	r3, #4
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f7ff fa30 	bl	800f048 <tcp_eff_send_mss_netif>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	461a      	mov	r2, r3
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fbf0:	2112      	movs	r1, #18
 800fbf2:	6978      	ldr	r0, [r7, #20]
 800fbf4:	f002 fc9c 	bl	8012530 <tcp_enqueue_flags>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fbfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d004      	beq.n	800fc0e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fc04:	2100      	movs	r1, #0
 800fc06:	6978      	ldr	r0, [r7, #20]
 800fc08:	f7fd fed4 	bl	800d9b4 <tcp_abandon>
      return;
 800fc0c:	e006      	b.n	800fc1c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fc0e:	6978      	ldr	r0, [r7, #20]
 800fc10:	f002 fd7c 	bl	801270c <tcp_output>
  return;
 800fc14:	e001      	b.n	800fc1a <tcp_listen_input+0x1be>
    return;
 800fc16:	bf00      	nop
 800fc18:	e000      	b.n	800fc1c <tcp_listen_input+0x1c0>
  return;
 800fc1a:	bf00      	nop
}
 800fc1c:	371c      	adds	r7, #28
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd90      	pop	{r4, r7, pc}
 800fc22:	bf00      	nop
 800fc24:	2000be7c 	.word	0x2000be7c
 800fc28:	08019674 	.word	0x08019674
 800fc2c:	0801986c 	.word	0x0801986c
 800fc30:	080196c0 	.word	0x080196c0
 800fc34:	2000be74 	.word	0x2000be74
 800fc38:	2000be7a 	.word	0x2000be7a
 800fc3c:	2000be70 	.word	0x2000be70
 800fc40:	2000be60 	.word	0x2000be60
 800fc44:	20008d48 	.word	0x20008d48
 800fc48:	20008d4c 	.word	0x20008d4c
 800fc4c:	20008d38 	.word	0x20008d38
 800fc50:	2000be44 	.word	0x2000be44
 800fc54:	2000be4c 	.word	0x2000be4c

0800fc58 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b086      	sub	sp, #24
 800fc5c:	af04      	add	r7, sp, #16
 800fc5e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fc60:	4b2f      	ldr	r3, [pc, #188]	; (800fd20 <tcp_timewait_input+0xc8>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	f003 0304 	and.w	r3, r3, #4
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d153      	bne.n	800fd14 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d106      	bne.n	800fc80 <tcp_timewait_input+0x28>
 800fc72:	4b2c      	ldr	r3, [pc, #176]	; (800fd24 <tcp_timewait_input+0xcc>)
 800fc74:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fc78:	492b      	ldr	r1, [pc, #172]	; (800fd28 <tcp_timewait_input+0xd0>)
 800fc7a:	482c      	ldr	r0, [pc, #176]	; (800fd2c <tcp_timewait_input+0xd4>)
 800fc7c:	f007 f980 	bl	8016f80 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fc80:	4b27      	ldr	r3, [pc, #156]	; (800fd20 <tcp_timewait_input+0xc8>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	f003 0302 	and.w	r3, r3, #2
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d02a      	beq.n	800fce2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fc8c:	4b28      	ldr	r3, [pc, #160]	; (800fd30 <tcp_timewait_input+0xd8>)
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc94:	1ad3      	subs	r3, r2, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	db2d      	blt.n	800fcf6 <tcp_timewait_input+0x9e>
 800fc9a:	4b25      	ldr	r3, [pc, #148]	; (800fd30 <tcp_timewait_input+0xd8>)
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca2:	6879      	ldr	r1, [r7, #4]
 800fca4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fca6:	440b      	add	r3, r1
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	dc23      	bgt.n	800fcf6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcae:	4b21      	ldr	r3, [pc, #132]	; (800fd34 <tcp_timewait_input+0xdc>)
 800fcb0:	6819      	ldr	r1, [r3, #0]
 800fcb2:	4b21      	ldr	r3, [pc, #132]	; (800fd38 <tcp_timewait_input+0xe0>)
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	4b1d      	ldr	r3, [pc, #116]	; (800fd30 <tcp_timewait_input+0xd8>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcbe:	4b1f      	ldr	r3, [pc, #124]	; (800fd3c <tcp_timewait_input+0xe4>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcc2:	885b      	ldrh	r3, [r3, #2]
 800fcc4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcc6:	4a1d      	ldr	r2, [pc, #116]	; (800fd3c <tcp_timewait_input+0xe4>)
 800fcc8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcca:	8812      	ldrh	r2, [r2, #0]
 800fccc:	b292      	uxth	r2, r2
 800fcce:	9202      	str	r2, [sp, #8]
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	4b1b      	ldr	r3, [pc, #108]	; (800fd40 <tcp_timewait_input+0xe8>)
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	4b1b      	ldr	r3, [pc, #108]	; (800fd44 <tcp_timewait_input+0xec>)
 800fcd8:	4602      	mov	r2, r0
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f003 faca 	bl	8013274 <tcp_rst>
      return;
 800fce0:	e01b      	b.n	800fd1a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fce2:	4b0f      	ldr	r3, [pc, #60]	; (800fd20 <tcp_timewait_input+0xc8>)
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	f003 0301 	and.w	r3, r3, #1
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d003      	beq.n	800fcf6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fcee:	4b16      	ldr	r3, [pc, #88]	; (800fd48 <tcp_timewait_input+0xf0>)
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fcf6:	4b10      	ldr	r3, [pc, #64]	; (800fd38 <tcp_timewait_input+0xe0>)
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00c      	beq.n	800fd18 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	8b5b      	ldrh	r3, [r3, #26]
 800fd02:	f043 0302 	orr.w	r3, r3, #2
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f002 fcfd 	bl	801270c <tcp_output>
  }
  return;
 800fd12:	e001      	b.n	800fd18 <tcp_timewait_input+0xc0>
    return;
 800fd14:	bf00      	nop
 800fd16:	e000      	b.n	800fd1a <tcp_timewait_input+0xc2>
  return;
 800fd18:	bf00      	nop
}
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	2000be7c 	.word	0x2000be7c
 800fd24:	08019674 	.word	0x08019674
 800fd28:	0801988c 	.word	0x0801988c
 800fd2c:	080196c0 	.word	0x080196c0
 800fd30:	2000be70 	.word	0x2000be70
 800fd34:	2000be74 	.word	0x2000be74
 800fd38:	2000be7a 	.word	0x2000be7a
 800fd3c:	2000be60 	.word	0x2000be60
 800fd40:	20008d48 	.word	0x20008d48
 800fd44:	20008d4c 	.word	0x20008d4c
 800fd48:	2000be38 	.word	0x2000be38

0800fd4c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fd4c:	b590      	push	{r4, r7, lr}
 800fd4e:	b08d      	sub	sp, #52	; 0x34
 800fd50:	af04      	add	r7, sp, #16
 800fd52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fd54:	2300      	movs	r3, #0
 800fd56:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d106      	bne.n	800fd70 <tcp_process+0x24>
 800fd62:	4b9d      	ldr	r3, [pc, #628]	; (800ffd8 <tcp_process+0x28c>)
 800fd64:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fd68:	499c      	ldr	r1, [pc, #624]	; (800ffdc <tcp_process+0x290>)
 800fd6a:	489d      	ldr	r0, [pc, #628]	; (800ffe0 <tcp_process+0x294>)
 800fd6c:	f007 f908 	bl	8016f80 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fd70:	4b9c      	ldr	r3, [pc, #624]	; (800ffe4 <tcp_process+0x298>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f003 0304 	and.w	r3, r3, #4
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d04e      	beq.n	800fe1a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	7d1b      	ldrb	r3, [r3, #20]
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	d108      	bne.n	800fd96 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd88:	4b97      	ldr	r3, [pc, #604]	; (800ffe8 <tcp_process+0x29c>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d123      	bne.n	800fdd8 <tcp_process+0x8c>
        acceptable = 1;
 800fd90:	2301      	movs	r3, #1
 800fd92:	76fb      	strb	r3, [r7, #27]
 800fd94:	e020      	b.n	800fdd8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd9a:	4b94      	ldr	r3, [pc, #592]	; (800ffec <tcp_process+0x2a0>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d102      	bne.n	800fda8 <tcp_process+0x5c>
        acceptable = 1;
 800fda2:	2301      	movs	r3, #1
 800fda4:	76fb      	strb	r3, [r7, #27]
 800fda6:	e017      	b.n	800fdd8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fda8:	4b90      	ldr	r3, [pc, #576]	; (800ffec <tcp_process+0x2a0>)
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	db10      	blt.n	800fdd8 <tcp_process+0x8c>
 800fdb6:	4b8d      	ldr	r3, [pc, #564]	; (800ffec <tcp_process+0x2a0>)
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbe:	6879      	ldr	r1, [r7, #4]
 800fdc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdc2:	440b      	add	r3, r1
 800fdc4:	1ad3      	subs	r3, r2, r3
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	dc06      	bgt.n	800fdd8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	8b5b      	ldrh	r3, [r3, #26]
 800fdce:	f043 0302 	orr.w	r3, r3, #2
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fdd8:	7efb      	ldrb	r3, [r7, #27]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d01b      	beq.n	800fe16 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	7d1b      	ldrb	r3, [r3, #20]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d106      	bne.n	800fdf4 <tcp_process+0xa8>
 800fde6:	4b7c      	ldr	r3, [pc, #496]	; (800ffd8 <tcp_process+0x28c>)
 800fde8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fdec:	4980      	ldr	r1, [pc, #512]	; (800fff0 <tcp_process+0x2a4>)
 800fdee:	487c      	ldr	r0, [pc, #496]	; (800ffe0 <tcp_process+0x294>)
 800fdf0:	f007 f8c6 	bl	8016f80 <iprintf>
      recv_flags |= TF_RESET;
 800fdf4:	4b7f      	ldr	r3, [pc, #508]	; (800fff4 <tcp_process+0x2a8>)
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	f043 0308 	orr.w	r3, r3, #8
 800fdfc:	b2da      	uxtb	r2, r3
 800fdfe:	4b7d      	ldr	r3, [pc, #500]	; (800fff4 <tcp_process+0x2a8>)
 800fe00:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	8b5b      	ldrh	r3, [r3, #26]
 800fe06:	f023 0301 	bic.w	r3, r3, #1
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fe10:	f06f 030d 	mvn.w	r3, #13
 800fe14:	e37a      	b.n	801050c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fe16:	2300      	movs	r3, #0
 800fe18:	e378      	b.n	801050c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fe1a:	4b72      	ldr	r3, [pc, #456]	; (800ffe4 <tcp_process+0x298>)
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	f003 0302 	and.w	r3, r3, #2
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d010      	beq.n	800fe48 <tcp_process+0xfc>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	7d1b      	ldrb	r3, [r3, #20]
 800fe2a:	2b02      	cmp	r3, #2
 800fe2c:	d00c      	beq.n	800fe48 <tcp_process+0xfc>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	7d1b      	ldrb	r3, [r3, #20]
 800fe32:	2b03      	cmp	r3, #3
 800fe34:	d008      	beq.n	800fe48 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	8b5b      	ldrh	r3, [r3, #26]
 800fe3a:	f043 0302 	orr.w	r3, r3, #2
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fe44:	2300      	movs	r3, #0
 800fe46:	e361      	b.n	801050c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	8b5b      	ldrh	r3, [r3, #26]
 800fe4c:	f003 0310 	and.w	r3, r3, #16
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d103      	bne.n	800fe5c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fe54:	4b68      	ldr	r3, [pc, #416]	; (800fff8 <tcp_process+0x2ac>)
 800fe56:	681a      	ldr	r2, [r3, #0]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f001 fc2f 	bl	80116d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	7d1b      	ldrb	r3, [r3, #20]
 800fe76:	3b02      	subs	r3, #2
 800fe78:	2b07      	cmp	r3, #7
 800fe7a:	f200 8337 	bhi.w	80104ec <tcp_process+0x7a0>
 800fe7e:	a201      	add	r2, pc, #4	; (adr r2, 800fe84 <tcp_process+0x138>)
 800fe80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe84:	0800fea5 	.word	0x0800fea5
 800fe88:	080100d5 	.word	0x080100d5
 800fe8c:	0801024d 	.word	0x0801024d
 800fe90:	08010277 	.word	0x08010277
 800fe94:	0801039b 	.word	0x0801039b
 800fe98:	0801024d 	.word	0x0801024d
 800fe9c:	08010427 	.word	0x08010427
 800fea0:	080104b7 	.word	0x080104b7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fea4:	4b4f      	ldr	r3, [pc, #316]	; (800ffe4 <tcp_process+0x298>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	f003 0310 	and.w	r3, r3, #16
 800feac:	2b00      	cmp	r3, #0
 800feae:	f000 80e4 	beq.w	801007a <tcp_process+0x32e>
 800feb2:	4b4c      	ldr	r3, [pc, #304]	; (800ffe4 <tcp_process+0x298>)
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	f003 0302 	and.w	r3, r3, #2
 800feba:	2b00      	cmp	r3, #0
 800febc:	f000 80dd 	beq.w	801007a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fec4:	1c5a      	adds	r2, r3, #1
 800fec6:	4b48      	ldr	r3, [pc, #288]	; (800ffe8 <tcp_process+0x29c>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	429a      	cmp	r2, r3
 800fecc:	f040 80d5 	bne.w	801007a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fed0:	4b46      	ldr	r3, [pc, #280]	; (800ffec <tcp_process+0x2a0>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	1c5a      	adds	r2, r3, #1
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fee2:	4b41      	ldr	r3, [pc, #260]	; (800ffe8 <tcp_process+0x29c>)
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800feea:	4b44      	ldr	r3, [pc, #272]	; (800fffc <tcp_process+0x2b0>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	89db      	ldrh	r3, [r3, #14]
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff04:	4b39      	ldr	r3, [pc, #228]	; (800ffec <tcp_process+0x2a0>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	1e5a      	subs	r2, r3, #1
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2204      	movs	r2, #4
 800ff12:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	3304      	adds	r3, #4
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f004 ffd7 	bl	8014ed0 <ip4_route>
 800ff22:	4601      	mov	r1, r0
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	3304      	adds	r3, #4
 800ff28:	461a      	mov	r2, r3
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f7ff f88c 	bl	800f048 <tcp_eff_send_mss_netif>
 800ff30:	4603      	mov	r3, r0
 800ff32:	461a      	mov	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff3c:	009a      	lsls	r2, r3, #2
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	f241 111c 	movw	r1, #4380	; 0x111c
 800ff48:	428b      	cmp	r3, r1
 800ff4a:	bf38      	it	cc
 800ff4c:	460b      	movcc	r3, r1
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d204      	bcs.n	800ff5c <tcp_process+0x210>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff56:	009b      	lsls	r3, r3, #2
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	e00d      	b.n	800ff78 <tcp_process+0x22c>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff60:	005b      	lsls	r3, r3, #1
 800ff62:	f241 121c 	movw	r2, #4380	; 0x111c
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d904      	bls.n	800ff74 <tcp_process+0x228>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff6e:	005b      	lsls	r3, r3, #1
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	e001      	b.n	800ff78 <tcp_process+0x22c>
 800ff74:	f241 131c 	movw	r3, #4380	; 0x111c
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d106      	bne.n	800ff96 <tcp_process+0x24a>
 800ff88:	4b13      	ldr	r3, [pc, #76]	; (800ffd8 <tcp_process+0x28c>)
 800ff8a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ff8e:	491c      	ldr	r1, [pc, #112]	; (8010000 <tcp_process+0x2b4>)
 800ff90:	4813      	ldr	r0, [pc, #76]	; (800ffe0 <tcp_process+0x294>)
 800ff92:	f006 fff5 	bl	8016f80 <iprintf>
        --pcb->snd_queuelen;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffaa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d12a      	bne.n	8010008 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d106      	bne.n	800ffcc <tcp_process+0x280>
 800ffbe:	4b06      	ldr	r3, [pc, #24]	; (800ffd8 <tcp_process+0x28c>)
 800ffc0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ffc4:	490f      	ldr	r1, [pc, #60]	; (8010004 <tcp_process+0x2b8>)
 800ffc6:	4806      	ldr	r0, [pc, #24]	; (800ffe0 <tcp_process+0x294>)
 800ffc8:	f006 ffda 	bl	8016f80 <iprintf>
          pcb->unsent = rseg->next;
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	66da      	str	r2, [r3, #108]	; 0x6c
 800ffd4:	e01c      	b.n	8010010 <tcp_process+0x2c4>
 800ffd6:	bf00      	nop
 800ffd8:	08019674 	.word	0x08019674
 800ffdc:	080198ac 	.word	0x080198ac
 800ffe0:	080196c0 	.word	0x080196c0
 800ffe4:	2000be7c 	.word	0x2000be7c
 800ffe8:	2000be74 	.word	0x2000be74
 800ffec:	2000be70 	.word	0x2000be70
 800fff0:	080198c8 	.word	0x080198c8
 800fff4:	2000be7d 	.word	0x2000be7d
 800fff8:	2000be38 	.word	0x2000be38
 800fffc:	2000be60 	.word	0x2000be60
 8010000:	080198e8 	.word	0x080198e8
 8010004:	08019900 	.word	0x08019900
        } else {
          pcb->unacked = rseg->next;
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010010:	69f8      	ldr	r0, [r7, #28]
 8010012:	f7fe fc6e 	bl	800e8f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801001a:	2b00      	cmp	r3, #0
 801001c:	d104      	bne.n	8010028 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010024:	861a      	strh	r2, [r3, #48]	; 0x30
 8010026:	e006      	b.n	8010036 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00a      	beq.n	8010056 <tcp_process+0x30a>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	6910      	ldr	r0, [r2, #16]
 801004a:	2200      	movs	r2, #0
 801004c:	6879      	ldr	r1, [r7, #4]
 801004e:	4798      	blx	r3
 8010050:	4603      	mov	r3, r0
 8010052:	76bb      	strb	r3, [r7, #26]
 8010054:	e001      	b.n	801005a <tcp_process+0x30e>
 8010056:	2300      	movs	r3, #0
 8010058:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801005a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801005e:	f113 0f0d 	cmn.w	r3, #13
 8010062:	d102      	bne.n	801006a <tcp_process+0x31e>
          return ERR_ABRT;
 8010064:	f06f 030c 	mvn.w	r3, #12
 8010068:	e250      	b.n	801050c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	8b5b      	ldrh	r3, [r3, #26]
 801006e:	f043 0302 	orr.w	r3, r3, #2
 8010072:	b29a      	uxth	r2, r3
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010078:	e23a      	b.n	80104f0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801007a:	4b98      	ldr	r3, [pc, #608]	; (80102dc <tcp_process+0x590>)
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	f003 0310 	and.w	r3, r3, #16
 8010082:	2b00      	cmp	r3, #0
 8010084:	f000 8234 	beq.w	80104f0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010088:	4b95      	ldr	r3, [pc, #596]	; (80102e0 <tcp_process+0x594>)
 801008a:	6819      	ldr	r1, [r3, #0]
 801008c:	4b95      	ldr	r3, [pc, #596]	; (80102e4 <tcp_process+0x598>)
 801008e:	881b      	ldrh	r3, [r3, #0]
 8010090:	461a      	mov	r2, r3
 8010092:	4b95      	ldr	r3, [pc, #596]	; (80102e8 <tcp_process+0x59c>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010098:	4b94      	ldr	r3, [pc, #592]	; (80102ec <tcp_process+0x5a0>)
 801009a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801009c:	885b      	ldrh	r3, [r3, #2]
 801009e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100a0:	4a92      	ldr	r2, [pc, #584]	; (80102ec <tcp_process+0x5a0>)
 80100a2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100a4:	8812      	ldrh	r2, [r2, #0]
 80100a6:	b292      	uxth	r2, r2
 80100a8:	9202      	str	r2, [sp, #8]
 80100aa:	9301      	str	r3, [sp, #4]
 80100ac:	4b90      	ldr	r3, [pc, #576]	; (80102f0 <tcp_process+0x5a4>)
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	4b90      	ldr	r3, [pc, #576]	; (80102f4 <tcp_process+0x5a8>)
 80100b2:	4602      	mov	r2, r0
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f003 f8dd 	bl	8013274 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100c0:	2b05      	cmp	r3, #5
 80100c2:	f200 8215 	bhi.w	80104f0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f002 fea7 	bl	8012e20 <tcp_rexmit_rto>
      break;
 80100d2:	e20d      	b.n	80104f0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80100d4:	4b81      	ldr	r3, [pc, #516]	; (80102dc <tcp_process+0x590>)
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	f003 0310 	and.w	r3, r3, #16
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f000 80a1 	beq.w	8010224 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80100e2:	4b7f      	ldr	r3, [pc, #508]	; (80102e0 <tcp_process+0x594>)
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100ea:	1ad3      	subs	r3, r2, r3
 80100ec:	3b01      	subs	r3, #1
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	db7e      	blt.n	80101f0 <tcp_process+0x4a4>
 80100f2:	4b7b      	ldr	r3, [pc, #492]	; (80102e0 <tcp_process+0x594>)
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100fa:	1ad3      	subs	r3, r2, r3
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	dc77      	bgt.n	80101f0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2204      	movs	r2, #4
 8010104:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801010a:	2b00      	cmp	r3, #0
 801010c:	d102      	bne.n	8010114 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801010e:	23fa      	movs	r3, #250	; 0xfa
 8010110:	76bb      	strb	r3, [r7, #26]
 8010112:	e01d      	b.n	8010150 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010118:	699b      	ldr	r3, [r3, #24]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d106      	bne.n	801012c <tcp_process+0x3e0>
 801011e:	4b76      	ldr	r3, [pc, #472]	; (80102f8 <tcp_process+0x5ac>)
 8010120:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010124:	4975      	ldr	r1, [pc, #468]	; (80102fc <tcp_process+0x5b0>)
 8010126:	4876      	ldr	r0, [pc, #472]	; (8010300 <tcp_process+0x5b4>)
 8010128:	f006 ff2a 	bl	8016f80 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010130:	699b      	ldr	r3, [r3, #24]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00a      	beq.n	801014c <tcp_process+0x400>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801013a:	699b      	ldr	r3, [r3, #24]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	6910      	ldr	r0, [r2, #16]
 8010140:	2200      	movs	r2, #0
 8010142:	6879      	ldr	r1, [r7, #4]
 8010144:	4798      	blx	r3
 8010146:	4603      	mov	r3, r0
 8010148:	76bb      	strb	r3, [r7, #26]
 801014a:	e001      	b.n	8010150 <tcp_process+0x404>
 801014c:	23f0      	movs	r3, #240	; 0xf0
 801014e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010150:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00a      	beq.n	801016e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010158:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801015c:	f113 0f0d 	cmn.w	r3, #13
 8010160:	d002      	beq.n	8010168 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f7fd fce4 	bl	800db30 <tcp_abort>
            }
            return ERR_ABRT;
 8010168:	f06f 030c 	mvn.w	r3, #12
 801016c:	e1ce      	b.n	801050c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f000 fae0 	bl	8010734 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010174:	4b63      	ldr	r3, [pc, #396]	; (8010304 <tcp_process+0x5b8>)
 8010176:	881b      	ldrh	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d005      	beq.n	8010188 <tcp_process+0x43c>
            recv_acked--;
 801017c:	4b61      	ldr	r3, [pc, #388]	; (8010304 <tcp_process+0x5b8>)
 801017e:	881b      	ldrh	r3, [r3, #0]
 8010180:	3b01      	subs	r3, #1
 8010182:	b29a      	uxth	r2, r3
 8010184:	4b5f      	ldr	r3, [pc, #380]	; (8010304 <tcp_process+0x5b8>)
 8010186:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801018c:	009a      	lsls	r2, r3, #2
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010192:	005b      	lsls	r3, r3, #1
 8010194:	f241 111c 	movw	r1, #4380	; 0x111c
 8010198:	428b      	cmp	r3, r1
 801019a:	bf38      	it	cc
 801019c:	460b      	movcc	r3, r1
 801019e:	429a      	cmp	r2, r3
 80101a0:	d204      	bcs.n	80101ac <tcp_process+0x460>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	e00d      	b.n	80101c8 <tcp_process+0x47c>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	f241 121c 	movw	r2, #4380	; 0x111c
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d904      	bls.n	80101c4 <tcp_process+0x478>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	e001      	b.n	80101c8 <tcp_process+0x47c>
 80101c4:	f241 131c 	movw	r3, #4380	; 0x111c
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80101ce:	4b4e      	ldr	r3, [pc, #312]	; (8010308 <tcp_process+0x5bc>)
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	f003 0320 	and.w	r3, r3, #32
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d037      	beq.n	801024a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	8b5b      	ldrh	r3, [r3, #26]
 80101de:	f043 0302 	orr.w	r3, r3, #2
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2207      	movs	r2, #7
 80101ec:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80101ee:	e02c      	b.n	801024a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101f0:	4b3b      	ldr	r3, [pc, #236]	; (80102e0 <tcp_process+0x594>)
 80101f2:	6819      	ldr	r1, [r3, #0]
 80101f4:	4b3b      	ldr	r3, [pc, #236]	; (80102e4 <tcp_process+0x598>)
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	461a      	mov	r2, r3
 80101fa:	4b3b      	ldr	r3, [pc, #236]	; (80102e8 <tcp_process+0x59c>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010200:	4b3a      	ldr	r3, [pc, #232]	; (80102ec <tcp_process+0x5a0>)
 8010202:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010204:	885b      	ldrh	r3, [r3, #2]
 8010206:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010208:	4a38      	ldr	r2, [pc, #224]	; (80102ec <tcp_process+0x5a0>)
 801020a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801020c:	8812      	ldrh	r2, [r2, #0]
 801020e:	b292      	uxth	r2, r2
 8010210:	9202      	str	r2, [sp, #8]
 8010212:	9301      	str	r3, [sp, #4]
 8010214:	4b36      	ldr	r3, [pc, #216]	; (80102f0 <tcp_process+0x5a4>)
 8010216:	9300      	str	r3, [sp, #0]
 8010218:	4b36      	ldr	r3, [pc, #216]	; (80102f4 <tcp_process+0x5a8>)
 801021a:	4602      	mov	r2, r0
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f003 f829 	bl	8013274 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010222:	e167      	b.n	80104f4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010224:	4b2d      	ldr	r3, [pc, #180]	; (80102dc <tcp_process+0x590>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	f003 0302 	and.w	r3, r3, #2
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 8161 	beq.w	80104f4 <tcp_process+0x7a8>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010236:	1e5a      	subs	r2, r3, #1
 8010238:	4b2b      	ldr	r3, [pc, #172]	; (80102e8 <tcp_process+0x59c>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	429a      	cmp	r2, r3
 801023e:	f040 8159 	bne.w	80104f4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f002 fe0e 	bl	8012e64 <tcp_rexmit>
      break;
 8010248:	e154      	b.n	80104f4 <tcp_process+0x7a8>
 801024a:	e153      	b.n	80104f4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 fa71 	bl	8010734 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010252:	4b2d      	ldr	r3, [pc, #180]	; (8010308 <tcp_process+0x5bc>)
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	f003 0320 	and.w	r3, r3, #32
 801025a:	2b00      	cmp	r3, #0
 801025c:	f000 814c 	beq.w	80104f8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	8b5b      	ldrh	r3, [r3, #26]
 8010264:	f043 0302 	orr.w	r3, r3, #2
 8010268:	b29a      	uxth	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2207      	movs	r2, #7
 8010272:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010274:	e140      	b.n	80104f8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 fa5c 	bl	8010734 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801027c:	4b22      	ldr	r3, [pc, #136]	; (8010308 <tcp_process+0x5bc>)
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	f003 0320 	and.w	r3, r3, #32
 8010284:	2b00      	cmp	r3, #0
 8010286:	d071      	beq.n	801036c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010288:	4b14      	ldr	r3, [pc, #80]	; (80102dc <tcp_process+0x590>)
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	f003 0310 	and.w	r3, r3, #16
 8010290:	2b00      	cmp	r3, #0
 8010292:	d060      	beq.n	8010356 <tcp_process+0x60a>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010298:	4b11      	ldr	r3, [pc, #68]	; (80102e0 <tcp_process+0x594>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	429a      	cmp	r2, r3
 801029e:	d15a      	bne.n	8010356 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d156      	bne.n	8010356 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	8b5b      	ldrh	r3, [r3, #26]
 80102ac:	f043 0302 	orr.w	r3, r3, #2
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f7fe fdbc 	bl	800ee34 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80102bc:	4b13      	ldr	r3, [pc, #76]	; (801030c <tcp_process+0x5c0>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d105      	bne.n	80102d2 <tcp_process+0x586>
 80102c6:	4b11      	ldr	r3, [pc, #68]	; (801030c <tcp_process+0x5c0>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	4a0f      	ldr	r2, [pc, #60]	; (801030c <tcp_process+0x5c0>)
 80102ce:	6013      	str	r3, [r2, #0]
 80102d0:	e02e      	b.n	8010330 <tcp_process+0x5e4>
 80102d2:	4b0e      	ldr	r3, [pc, #56]	; (801030c <tcp_process+0x5c0>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	e027      	b.n	801032a <tcp_process+0x5de>
 80102da:	bf00      	nop
 80102dc:	2000be7c 	.word	0x2000be7c
 80102e0:	2000be74 	.word	0x2000be74
 80102e4:	2000be7a 	.word	0x2000be7a
 80102e8:	2000be70 	.word	0x2000be70
 80102ec:	2000be60 	.word	0x2000be60
 80102f0:	20008d48 	.word	0x20008d48
 80102f4:	20008d4c 	.word	0x20008d4c
 80102f8:	08019674 	.word	0x08019674
 80102fc:	08019914 	.word	0x08019914
 8010300:	080196c0 	.word	0x080196c0
 8010304:	2000be78 	.word	0x2000be78
 8010308:	2000be7d 	.word	0x2000be7d
 801030c:	2000be44 	.word	0x2000be44
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	429a      	cmp	r2, r3
 8010318:	d104      	bne.n	8010324 <tcp_process+0x5d8>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	68da      	ldr	r2, [r3, #12]
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	60da      	str	r2, [r3, #12]
 8010322:	e005      	b.n	8010330 <tcp_process+0x5e4>
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	617b      	str	r3, [r7, #20]
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1ef      	bne.n	8010310 <tcp_process+0x5c4>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2200      	movs	r2, #0
 8010334:	60da      	str	r2, [r3, #12]
 8010336:	4b77      	ldr	r3, [pc, #476]	; (8010514 <tcp_process+0x7c8>)
 8010338:	2201      	movs	r2, #1
 801033a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	220a      	movs	r2, #10
 8010340:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010342:	4b75      	ldr	r3, [pc, #468]	; (8010518 <tcp_process+0x7cc>)
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	60da      	str	r2, [r3, #12]
 801034a:	4a73      	ldr	r2, [pc, #460]	; (8010518 <tcp_process+0x7cc>)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6013      	str	r3, [r2, #0]
 8010350:	f003 f952 	bl	80135f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010354:	e0d2      	b.n	80104fc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	8b5b      	ldrh	r3, [r3, #26]
 801035a:	f043 0302 	orr.w	r3, r3, #2
 801035e:	b29a      	uxth	r2, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2208      	movs	r2, #8
 8010368:	751a      	strb	r2, [r3, #20]
      break;
 801036a:	e0c7      	b.n	80104fc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801036c:	4b6b      	ldr	r3, [pc, #428]	; (801051c <tcp_process+0x7d0>)
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	f003 0310 	and.w	r3, r3, #16
 8010374:	2b00      	cmp	r3, #0
 8010376:	f000 80c1 	beq.w	80104fc <tcp_process+0x7b0>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801037e:	4b68      	ldr	r3, [pc, #416]	; (8010520 <tcp_process+0x7d4>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	429a      	cmp	r2, r3
 8010384:	f040 80ba 	bne.w	80104fc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801038c:	2b00      	cmp	r3, #0
 801038e:	f040 80b5 	bne.w	80104fc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2206      	movs	r2, #6
 8010396:	751a      	strb	r2, [r3, #20]
      break;
 8010398:	e0b0      	b.n	80104fc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 f9ca 	bl	8010734 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80103a0:	4b60      	ldr	r3, [pc, #384]	; (8010524 <tcp_process+0x7d8>)
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	f003 0320 	and.w	r3, r3, #32
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f000 80a9 	beq.w	8010500 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	8b5b      	ldrh	r3, [r3, #26]
 80103b2:	f043 0302 	orr.w	r3, r3, #2
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7fe fd39 	bl	800ee34 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80103c2:	4b59      	ldr	r3, [pc, #356]	; (8010528 <tcp_process+0x7dc>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d105      	bne.n	80103d8 <tcp_process+0x68c>
 80103cc:	4b56      	ldr	r3, [pc, #344]	; (8010528 <tcp_process+0x7dc>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	4a55      	ldr	r2, [pc, #340]	; (8010528 <tcp_process+0x7dc>)
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	e013      	b.n	8010400 <tcp_process+0x6b4>
 80103d8:	4b53      	ldr	r3, [pc, #332]	; (8010528 <tcp_process+0x7dc>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	613b      	str	r3, [r7, #16]
 80103de:	e00c      	b.n	80103fa <tcp_process+0x6ae>
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d104      	bne.n	80103f4 <tcp_process+0x6a8>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	68da      	ldr	r2, [r3, #12]
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	60da      	str	r2, [r3, #12]
 80103f2:	e005      	b.n	8010400 <tcp_process+0x6b4>
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	613b      	str	r3, [r7, #16]
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1ef      	bne.n	80103e0 <tcp_process+0x694>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	60da      	str	r2, [r3, #12]
 8010406:	4b43      	ldr	r3, [pc, #268]	; (8010514 <tcp_process+0x7c8>)
 8010408:	2201      	movs	r2, #1
 801040a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	220a      	movs	r2, #10
 8010410:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010412:	4b41      	ldr	r3, [pc, #260]	; (8010518 <tcp_process+0x7cc>)
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	60da      	str	r2, [r3, #12]
 801041a:	4a3f      	ldr	r2, [pc, #252]	; (8010518 <tcp_process+0x7cc>)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6013      	str	r3, [r2, #0]
 8010420:	f003 f8ea 	bl	80135f8 <tcp_timer_needed>
      }
      break;
 8010424:	e06c      	b.n	8010500 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 f984 	bl	8010734 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801042c:	4b3b      	ldr	r3, [pc, #236]	; (801051c <tcp_process+0x7d0>)
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	f003 0310 	and.w	r3, r3, #16
 8010434:	2b00      	cmp	r3, #0
 8010436:	d065      	beq.n	8010504 <tcp_process+0x7b8>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801043c:	4b38      	ldr	r3, [pc, #224]	; (8010520 <tcp_process+0x7d4>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	429a      	cmp	r2, r3
 8010442:	d15f      	bne.n	8010504 <tcp_process+0x7b8>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010448:	2b00      	cmp	r3, #0
 801044a:	d15b      	bne.n	8010504 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7fe fcf1 	bl	800ee34 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010452:	4b35      	ldr	r3, [pc, #212]	; (8010528 <tcp_process+0x7dc>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	429a      	cmp	r2, r3
 801045a:	d105      	bne.n	8010468 <tcp_process+0x71c>
 801045c:	4b32      	ldr	r3, [pc, #200]	; (8010528 <tcp_process+0x7dc>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	4a31      	ldr	r2, [pc, #196]	; (8010528 <tcp_process+0x7dc>)
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	e013      	b.n	8010490 <tcp_process+0x744>
 8010468:	4b2f      	ldr	r3, [pc, #188]	; (8010528 <tcp_process+0x7dc>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	60fb      	str	r3, [r7, #12]
 801046e:	e00c      	b.n	801048a <tcp_process+0x73e>
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	429a      	cmp	r2, r3
 8010478:	d104      	bne.n	8010484 <tcp_process+0x738>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	68da      	ldr	r2, [r3, #12]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	60da      	str	r2, [r3, #12]
 8010482:	e005      	b.n	8010490 <tcp_process+0x744>
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	60fb      	str	r3, [r7, #12]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1ef      	bne.n	8010470 <tcp_process+0x724>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2200      	movs	r2, #0
 8010494:	60da      	str	r2, [r3, #12]
 8010496:	4b1f      	ldr	r3, [pc, #124]	; (8010514 <tcp_process+0x7c8>)
 8010498:	2201      	movs	r2, #1
 801049a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	220a      	movs	r2, #10
 80104a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104a2:	4b1d      	ldr	r3, [pc, #116]	; (8010518 <tcp_process+0x7cc>)
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	60da      	str	r2, [r3, #12]
 80104aa:	4a1b      	ldr	r2, [pc, #108]	; (8010518 <tcp_process+0x7cc>)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6013      	str	r3, [r2, #0]
 80104b0:	f003 f8a2 	bl	80135f8 <tcp_timer_needed>
      }
      break;
 80104b4:	e026      	b.n	8010504 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 f93c 	bl	8010734 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80104bc:	4b17      	ldr	r3, [pc, #92]	; (801051c <tcp_process+0x7d0>)
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	f003 0310 	and.w	r3, r3, #16
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d01f      	beq.n	8010508 <tcp_process+0x7bc>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104cc:	4b14      	ldr	r3, [pc, #80]	; (8010520 <tcp_process+0x7d4>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d119      	bne.n	8010508 <tcp_process+0x7bc>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d115      	bne.n	8010508 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80104dc:	4b11      	ldr	r3, [pc, #68]	; (8010524 <tcp_process+0x7d8>)
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	f043 0310 	orr.w	r3, r3, #16
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	4b0f      	ldr	r3, [pc, #60]	; (8010524 <tcp_process+0x7d8>)
 80104e8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80104ea:	e00d      	b.n	8010508 <tcp_process+0x7bc>
    default:
      break;
 80104ec:	bf00      	nop
 80104ee:	e00c      	b.n	801050a <tcp_process+0x7be>
      break;
 80104f0:	bf00      	nop
 80104f2:	e00a      	b.n	801050a <tcp_process+0x7be>
      break;
 80104f4:	bf00      	nop
 80104f6:	e008      	b.n	801050a <tcp_process+0x7be>
      break;
 80104f8:	bf00      	nop
 80104fa:	e006      	b.n	801050a <tcp_process+0x7be>
      break;
 80104fc:	bf00      	nop
 80104fe:	e004      	b.n	801050a <tcp_process+0x7be>
      break;
 8010500:	bf00      	nop
 8010502:	e002      	b.n	801050a <tcp_process+0x7be>
      break;
 8010504:	bf00      	nop
 8010506:	e000      	b.n	801050a <tcp_process+0x7be>
      break;
 8010508:	bf00      	nop
  }
  return ERR_OK;
 801050a:	2300      	movs	r3, #0
}
 801050c:	4618      	mov	r0, r3
 801050e:	3724      	adds	r7, #36	; 0x24
 8010510:	46bd      	mov	sp, r7
 8010512:	bd90      	pop	{r4, r7, pc}
 8010514:	2000be4c 	.word	0x2000be4c
 8010518:	2000be48 	.word	0x2000be48
 801051c:	2000be7c 	.word	0x2000be7c
 8010520:	2000be74 	.word	0x2000be74
 8010524:	2000be7d 	.word	0x2000be7d
 8010528:	2000be44 	.word	0x2000be44

0801052c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801052c:	b590      	push	{r4, r7, lr}
 801052e:	b085      	sub	sp, #20
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d106      	bne.n	801054a <tcp_oos_insert_segment+0x1e>
 801053c:	4b3b      	ldr	r3, [pc, #236]	; (801062c <tcp_oos_insert_segment+0x100>)
 801053e:	f240 421f 	movw	r2, #1055	; 0x41f
 8010542:	493b      	ldr	r1, [pc, #236]	; (8010630 <tcp_oos_insert_segment+0x104>)
 8010544:	483b      	ldr	r0, [pc, #236]	; (8010634 <tcp_oos_insert_segment+0x108>)
 8010546:	f006 fd1b 	bl	8016f80 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	899b      	ldrh	r3, [r3, #12]
 8010550:	b29b      	uxth	r3, r3
 8010552:	4618      	mov	r0, r3
 8010554:	f7fb f89c 	bl	800b690 <lwip_htons>
 8010558:	4603      	mov	r3, r0
 801055a:	b2db      	uxtb	r3, r3
 801055c:	f003 0301 	and.w	r3, r3, #1
 8010560:	2b00      	cmp	r3, #0
 8010562:	d028      	beq.n	80105b6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010564:	6838      	ldr	r0, [r7, #0]
 8010566:	f7fe f9af 	bl	800e8c8 <tcp_segs_free>
    next = NULL;
 801056a:	2300      	movs	r3, #0
 801056c:	603b      	str	r3, [r7, #0]
 801056e:	e056      	b.n	801061e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	899b      	ldrh	r3, [r3, #12]
 8010576:	b29b      	uxth	r3, r3
 8010578:	4618      	mov	r0, r3
 801057a:	f7fb f889 	bl	800b690 <lwip_htons>
 801057e:	4603      	mov	r3, r0
 8010580:	b2db      	uxtb	r3, r3
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00d      	beq.n	80105a6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	899b      	ldrh	r3, [r3, #12]
 8010590:	b29c      	uxth	r4, r3
 8010592:	2001      	movs	r0, #1
 8010594:	f7fb f87c 	bl	800b690 <lwip_htons>
 8010598:	4603      	mov	r3, r0
 801059a:	461a      	mov	r2, r3
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	4322      	orrs	r2, r4
 80105a2:	b292      	uxth	r2, r2
 80105a4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f7fe f99e 	bl	800e8f2 <tcp_seg_free>
    while (next &&
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00e      	beq.n	80105da <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	891b      	ldrh	r3, [r3, #8]
 80105c0:	461a      	mov	r2, r3
 80105c2:	4b1d      	ldr	r3, [pc, #116]	; (8010638 <tcp_oos_insert_segment+0x10c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	441a      	add	r2, r3
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	8909      	ldrh	r1, [r1, #8]
 80105d2:	440b      	add	r3, r1
 80105d4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	daca      	bge.n	8010570 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d01e      	beq.n	801061e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	891b      	ldrh	r3, [r3, #8]
 80105e4:	461a      	mov	r2, r3
 80105e6:	4b14      	ldr	r3, [pc, #80]	; (8010638 <tcp_oos_insert_segment+0x10c>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	441a      	add	r2, r3
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	dd12      	ble.n	801061e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	b29a      	uxth	r2, r3
 8010600:	4b0d      	ldr	r3, [pc, #52]	; (8010638 <tcp_oos_insert_segment+0x10c>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	b29b      	uxth	r3, r3
 8010606:	1ad3      	subs	r3, r2, r3
 8010608:	b29a      	uxth	r2, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	685a      	ldr	r2, [r3, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	891b      	ldrh	r3, [r3, #8]
 8010616:	4619      	mov	r1, r3
 8010618:	4610      	mov	r0, r2
 801061a:	f7fc fb0f 	bl	800cc3c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	683a      	ldr	r2, [r7, #0]
 8010622:	601a      	str	r2, [r3, #0]
}
 8010624:	bf00      	nop
 8010626:	3714      	adds	r7, #20
 8010628:	46bd      	mov	sp, r7
 801062a:	bd90      	pop	{r4, r7, pc}
 801062c:	08019674 	.word	0x08019674
 8010630:	08019934 	.word	0x08019934
 8010634:	080196c0 	.word	0x080196c0
 8010638:	2000be70 	.word	0x2000be70

0801063c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801063c:	b5b0      	push	{r4, r5, r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	607a      	str	r2, [r7, #4]
 8010648:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801064a:	e03e      	b.n	80106ca <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	4618      	mov	r0, r3
 801065c:	f7fc fd02 	bl	800d064 <pbuf_clen>
 8010660:	4603      	mov	r3, r0
 8010662:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801066a:	8a7a      	ldrh	r2, [r7, #18]
 801066c:	429a      	cmp	r2, r3
 801066e:	d906      	bls.n	801067e <tcp_free_acked_segments+0x42>
 8010670:	4b2a      	ldr	r3, [pc, #168]	; (801071c <tcp_free_acked_segments+0xe0>)
 8010672:	f240 4257 	movw	r2, #1111	; 0x457
 8010676:	492a      	ldr	r1, [pc, #168]	; (8010720 <tcp_free_acked_segments+0xe4>)
 8010678:	482a      	ldr	r0, [pc, #168]	; (8010724 <tcp_free_acked_segments+0xe8>)
 801067a:	f006 fc81 	bl	8016f80 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010684:	8a7b      	ldrh	r3, [r7, #18]
 8010686:	1ad3      	subs	r3, r2, r3
 8010688:	b29a      	uxth	r2, r3
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	891a      	ldrh	r2, [r3, #8]
 8010694:	4b24      	ldr	r3, [pc, #144]	; (8010728 <tcp_free_acked_segments+0xec>)
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	4413      	add	r3, r2
 801069a:	b29a      	uxth	r2, r3
 801069c:	4b22      	ldr	r3, [pc, #136]	; (8010728 <tcp_free_acked_segments+0xec>)
 801069e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80106a0:	6978      	ldr	r0, [r7, #20]
 80106a2:	f7fe f926 	bl	800e8f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d00c      	beq.n	80106ca <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d109      	bne.n	80106ca <tcp_free_acked_segments+0x8e>
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d106      	bne.n	80106ca <tcp_free_acked_segments+0x8e>
 80106bc:	4b17      	ldr	r3, [pc, #92]	; (801071c <tcp_free_acked_segments+0xe0>)
 80106be:	f240 4261 	movw	r2, #1121	; 0x461
 80106c2:	491a      	ldr	r1, [pc, #104]	; (801072c <tcp_free_acked_segments+0xf0>)
 80106c4:	4817      	ldr	r0, [pc, #92]	; (8010724 <tcp_free_acked_segments+0xe8>)
 80106c6:	f006 fc5b 	bl	8016f80 <iprintf>
  while (seg_list != NULL &&
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d020      	beq.n	8010712 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7fa ffee 	bl	800b6b8 <lwip_htonl>
 80106dc:	4604      	mov	r4, r0
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	891b      	ldrh	r3, [r3, #8]
 80106e2:	461d      	mov	r5, r3
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	899b      	ldrh	r3, [r3, #12]
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fa ffcf 	bl	800b690 <lwip_htons>
 80106f2:	4603      	mov	r3, r0
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	f003 0303 	and.w	r3, r3, #3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d001      	beq.n	8010702 <tcp_free_acked_segments+0xc6>
 80106fe:	2301      	movs	r3, #1
 8010700:	e000      	b.n	8010704 <tcp_free_acked_segments+0xc8>
 8010702:	2300      	movs	r3, #0
 8010704:	442b      	add	r3, r5
 8010706:	18e2      	adds	r2, r4, r3
 8010708:	4b09      	ldr	r3, [pc, #36]	; (8010730 <tcp_free_acked_segments+0xf4>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801070e:	2b00      	cmp	r3, #0
 8010710:	dd9c      	ble.n	801064c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010712:	68bb      	ldr	r3, [r7, #8]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3718      	adds	r7, #24
 8010718:	46bd      	mov	sp, r7
 801071a:	bdb0      	pop	{r4, r5, r7, pc}
 801071c:	08019674 	.word	0x08019674
 8010720:	0801995c 	.word	0x0801995c
 8010724:	080196c0 	.word	0x080196c0
 8010728:	2000be78 	.word	0x2000be78
 801072c:	08019984 	.word	0x08019984
 8010730:	2000be74 	.word	0x2000be74

08010734 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010734:	b5b0      	push	{r4, r5, r7, lr}
 8010736:	b094      	sub	sp, #80	; 0x50
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801073c:	2300      	movs	r3, #0
 801073e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d106      	bne.n	8010754 <tcp_receive+0x20>
 8010746:	4b91      	ldr	r3, [pc, #580]	; (801098c <tcp_receive+0x258>)
 8010748:	f240 427b 	movw	r2, #1147	; 0x47b
 801074c:	4990      	ldr	r1, [pc, #576]	; (8010990 <tcp_receive+0x25c>)
 801074e:	4891      	ldr	r0, [pc, #580]	; (8010994 <tcp_receive+0x260>)
 8010750:	f006 fc16 	bl	8016f80 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	7d1b      	ldrb	r3, [r3, #20]
 8010758:	2b03      	cmp	r3, #3
 801075a:	d806      	bhi.n	801076a <tcp_receive+0x36>
 801075c:	4b8b      	ldr	r3, [pc, #556]	; (801098c <tcp_receive+0x258>)
 801075e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010762:	498d      	ldr	r1, [pc, #564]	; (8010998 <tcp_receive+0x264>)
 8010764:	488b      	ldr	r0, [pc, #556]	; (8010994 <tcp_receive+0x260>)
 8010766:	f006 fc0b 	bl	8016f80 <iprintf>

  if (flags & TCP_ACK) {
 801076a:	4b8c      	ldr	r3, [pc, #560]	; (801099c <tcp_receive+0x268>)
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	f003 0310 	and.w	r3, r3, #16
 8010772:	2b00      	cmp	r3, #0
 8010774:	f000 8264 	beq.w	8010c40 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801077e:	461a      	mov	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010784:	4413      	add	r3, r2
 8010786:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801078c:	4b84      	ldr	r3, [pc, #528]	; (80109a0 <tcp_receive+0x26c>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	1ad3      	subs	r3, r2, r3
 8010792:	2b00      	cmp	r3, #0
 8010794:	db1b      	blt.n	80107ce <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801079a:	4b81      	ldr	r3, [pc, #516]	; (80109a0 <tcp_receive+0x26c>)
 801079c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801079e:	429a      	cmp	r2, r3
 80107a0:	d106      	bne.n	80107b0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107a6:	4b7f      	ldr	r3, [pc, #508]	; (80109a4 <tcp_receive+0x270>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	db0e      	blt.n	80107ce <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107b4:	4b7b      	ldr	r3, [pc, #492]	; (80109a4 <tcp_receive+0x270>)
 80107b6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d125      	bne.n	8010808 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107bc:	4b7a      	ldr	r3, [pc, #488]	; (80109a8 <tcp_receive+0x274>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	89db      	ldrh	r3, [r3, #14]
 80107c2:	b29a      	uxth	r2, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d91c      	bls.n	8010808 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80107ce:	4b76      	ldr	r3, [pc, #472]	; (80109a8 <tcp_receive+0x274>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	89db      	ldrh	r3, [r3, #14]
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d205      	bcs.n	80107f8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80107f8:	4b69      	ldr	r3, [pc, #420]	; (80109a0 <tcp_receive+0x26c>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010800:	4b68      	ldr	r3, [pc, #416]	; (80109a4 <tcp_receive+0x270>)
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010808:	4b66      	ldr	r3, [pc, #408]	; (80109a4 <tcp_receive+0x270>)
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010810:	1ad3      	subs	r3, r2, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	dc58      	bgt.n	80108c8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010816:	4b65      	ldr	r3, [pc, #404]	; (80109ac <tcp_receive+0x278>)
 8010818:	881b      	ldrh	r3, [r3, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d14b      	bne.n	80108b6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010828:	4413      	add	r3, r2
 801082a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801082c:	429a      	cmp	r2, r3
 801082e:	d142      	bne.n	80108b6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010836:	2b00      	cmp	r3, #0
 8010838:	db3d      	blt.n	80108b6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801083e:	4b59      	ldr	r3, [pc, #356]	; (80109a4 <tcp_receive+0x270>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	429a      	cmp	r2, r3
 8010844:	d137      	bne.n	80108b6 <tcp_receive+0x182>
              found_dupack = 1;
 8010846:	2301      	movs	r3, #1
 8010848:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010850:	2bff      	cmp	r3, #255	; 0xff
 8010852:	d007      	beq.n	8010864 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801085a:	3301      	adds	r3, #1
 801085c:	b2da      	uxtb	r2, r3
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801086a:	2b03      	cmp	r3, #3
 801086c:	d91b      	bls.n	80108a6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010878:	4413      	add	r3, r2
 801087a:	b29a      	uxth	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010882:	429a      	cmp	r2, r3
 8010884:	d30a      	bcc.n	801089c <tcp_receive+0x168>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010890:	4413      	add	r3, r2
 8010892:	b29a      	uxth	r2, r3
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801089a:	e004      	b.n	80108a6 <tcp_receive+0x172>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d902      	bls.n	80108b6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f002 fb43 	bl	8012f3c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80108b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f040 8161 	bne.w	8010b80 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80108c6:	e15b      	b.n	8010b80 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80108c8:	4b36      	ldr	r3, [pc, #216]	; (80109a4 <tcp_receive+0x270>)
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	3b01      	subs	r3, #1
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f2c0 814e 	blt.w	8010b76 <tcp_receive+0x442>
 80108da:	4b32      	ldr	r3, [pc, #200]	; (80109a4 <tcp_receive+0x270>)
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108e2:	1ad3      	subs	r3, r2, r3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f300 8146 	bgt.w	8010b76 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	8b5b      	ldrh	r3, [r3, #26]
 80108ee:	f003 0304 	and.w	r3, r3, #4
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d010      	beq.n	8010918 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	8b5b      	ldrh	r3, [r3, #26]
 80108fa:	f023 0304 	bic.w	r3, r3, #4
 80108fe:	b29a      	uxth	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2200      	movs	r2, #0
 8010914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010926:	10db      	asrs	r3, r3, #3
 8010928:	b21b      	sxth	r3, r3
 801092a:	b29a      	uxth	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010932:	b29b      	uxth	r3, r3
 8010934:	4413      	add	r3, r2
 8010936:	b29b      	uxth	r3, r3
 8010938:	b21a      	sxth	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010940:	4b18      	ldr	r3, [pc, #96]	; (80109a4 <tcp_receive+0x270>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	b29a      	uxth	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801094a:	b29b      	uxth	r3, r3
 801094c:	1ad3      	subs	r3, r2, r3
 801094e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010958:	4b12      	ldr	r3, [pc, #72]	; (80109a4 <tcp_receive+0x270>)
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	7d1b      	ldrb	r3, [r3, #20]
 8010964:	2b03      	cmp	r3, #3
 8010966:	f240 8097 	bls.w	8010a98 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010976:	429a      	cmp	r2, r3
 8010978:	d245      	bcs.n	8010a06 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	8b5b      	ldrh	r3, [r3, #26]
 801097e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010982:	2b00      	cmp	r3, #0
 8010984:	d014      	beq.n	80109b0 <tcp_receive+0x27c>
 8010986:	2301      	movs	r3, #1
 8010988:	e013      	b.n	80109b2 <tcp_receive+0x27e>
 801098a:	bf00      	nop
 801098c:	08019674 	.word	0x08019674
 8010990:	080199a4 	.word	0x080199a4
 8010994:	080196c0 	.word	0x080196c0
 8010998:	080199c0 	.word	0x080199c0
 801099c:	2000be7c 	.word	0x2000be7c
 80109a0:	2000be70 	.word	0x2000be70
 80109a4:	2000be74 	.word	0x2000be74
 80109a8:	2000be60 	.word	0x2000be60
 80109ac:	2000be7a 	.word	0x2000be7a
 80109b0:	2302      	movs	r3, #2
 80109b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80109b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109c0:	fb12 f303 	smulbb	r3, r2, r3
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80109c8:	4293      	cmp	r3, r2
 80109ca:	bf28      	it	cs
 80109cc:	4613      	movcs	r3, r2
 80109ce:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80109d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109d8:	4413      	add	r3, r2
 80109da:	b29a      	uxth	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d309      	bcc.n	80109fa <tcp_receive+0x2c6>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80109ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109ee:	4413      	add	r3, r2
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80109f8:	e04e      	b.n	8010a98 <tcp_receive+0x364>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a04:	e048      	b.n	8010a98 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a0e:	4413      	add	r3, r2
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d309      	bcc.n	8010a30 <tcp_receive+0x2fc>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a24:	4413      	add	r3, r2
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010a2e:	e004      	b.n	8010a3a <tcp_receive+0x306>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d326      	bcc.n	8010a98 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a6a:	4413      	add	r3, r2
 8010a6c:	b29a      	uxth	r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d30a      	bcc.n	8010a8e <tcp_receive+0x35a>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a82:	4413      	add	r3, r2
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a8c:	e004      	b.n	8010a98 <tcp_receive+0x364>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa0:	4a98      	ldr	r2, [pc, #608]	; (8010d04 <tcp_receive+0x5d0>)
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7ff fdca 	bl	801063c <tcp_free_acked_segments>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ab6:	4a94      	ldr	r2, [pc, #592]	; (8010d08 <tcp_receive+0x5d4>)
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff fdbf 	bl	801063c <tcp_free_acked_segments>
 8010abe:	4602      	mov	r2, r0
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d104      	bne.n	8010ad6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ad2:	861a      	strh	r2, [r3, #48]	; 0x30
 8010ad4:	e002      	b.n	8010adc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d103      	bne.n	8010af2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2200      	movs	r2, #0
 8010aee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010af8:	4b84      	ldr	r3, [pc, #528]	; (8010d0c <tcp_receive+0x5d8>)
 8010afa:	881b      	ldrh	r3, [r3, #0]
 8010afc:	4413      	add	r3, r2
 8010afe:	b29a      	uxth	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8b5b      	ldrh	r3, [r3, #26]
 8010b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d035      	beq.n	8010b7e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d118      	bne.n	8010b4c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d00c      	beq.n	8010b3c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fa fdc2 	bl	800b6b8 <lwip_htonl>
 8010b34:	4603      	mov	r3, r0
 8010b36:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	dc20      	bgt.n	8010b7e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	8b5b      	ldrh	r3, [r3, #26]
 8010b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b4a:	e018      	b.n	8010b7e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7fa fdad 	bl	800b6b8 <lwip_htonl>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	1ae3      	subs	r3, r4, r3
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	dc0b      	bgt.n	8010b7e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	8b5b      	ldrh	r3, [r3, #26]
 8010b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b74:	e003      	b.n	8010b7e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f002 fbce 	bl	8013318 <tcp_send_empty_ack>
 8010b7c:	e000      	b.n	8010b80 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b7e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d05b      	beq.n	8010c40 <tcp_receive+0x50c>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b8c:	4b60      	ldr	r3, [pc, #384]	; (8010d10 <tcp_receive+0x5dc>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	da54      	bge.n	8010c40 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010b96:	4b5f      	ldr	r3, [pc, #380]	; (8010d14 <tcp_receive+0x5e0>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	1ad3      	subs	r3, r2, r3
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010baa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010bb4:	10db      	asrs	r3, r3, #3
 8010bb6:	b21b      	sxth	r3, r3
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	1ad3      	subs	r3, r2, r3
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010bce:	4413      	add	r3, r2
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	b21a      	sxth	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010bd8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	da05      	bge.n	8010bec <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010be0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010be4:	425b      	negs	r3, r3
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010bec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010bf6:	109b      	asrs	r3, r3, #2
 8010bf8:	b21b      	sxth	r3, r3
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c10:	4413      	add	r3, r2
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	b21a      	sxth	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c20:	10db      	asrs	r3, r3, #3
 8010c22:	b21b      	sxth	r3, r3
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	4413      	add	r3, r2
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	b21a      	sxth	r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010c40:	4b35      	ldr	r3, [pc, #212]	; (8010d18 <tcp_receive+0x5e4>)
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f000 84e2 	beq.w	801160e <tcp_receive+0xeda>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	7d1b      	ldrb	r3, [r3, #20]
 8010c4e:	2b06      	cmp	r3, #6
 8010c50:	f200 84dd 	bhi.w	801160e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c58:	4b30      	ldr	r3, [pc, #192]	; (8010d1c <tcp_receive+0x5e8>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	1ad3      	subs	r3, r2, r3
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f2c0 808f 	blt.w	8010d84 <tcp_receive+0x650>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c6a:	4b2b      	ldr	r3, [pc, #172]	; (8010d18 <tcp_receive+0x5e4>)
 8010c6c:	881b      	ldrh	r3, [r3, #0]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	4b2a      	ldr	r3, [pc, #168]	; (8010d1c <tcp_receive+0x5e8>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	440b      	add	r3, r1
 8010c76:	1ad3      	subs	r3, r2, r3
 8010c78:	3301      	adds	r3, #1
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f300 8082 	bgt.w	8010d84 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010c80:	4b27      	ldr	r3, [pc, #156]	; (8010d20 <tcp_receive+0x5ec>)
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c8a:	4b24      	ldr	r3, [pc, #144]	; (8010d1c <tcp_receive+0x5e8>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	1ad3      	subs	r3, r2, r3
 8010c90:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010c92:	4b23      	ldr	r3, [pc, #140]	; (8010d20 <tcp_receive+0x5ec>)
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d106      	bne.n	8010ca8 <tcp_receive+0x574>
 8010c9a:	4b22      	ldr	r3, [pc, #136]	; (8010d24 <tcp_receive+0x5f0>)
 8010c9c:	f240 5294 	movw	r2, #1428	; 0x594
 8010ca0:	4921      	ldr	r1, [pc, #132]	; (8010d28 <tcp_receive+0x5f4>)
 8010ca2:	4822      	ldr	r0, [pc, #136]	; (8010d2c <tcp_receive+0x5f8>)
 8010ca4:	f006 f96c 	bl	8016f80 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d906      	bls.n	8010cc0 <tcp_receive+0x58c>
 8010cb2:	4b1c      	ldr	r3, [pc, #112]	; (8010d24 <tcp_receive+0x5f0>)
 8010cb4:	f240 5295 	movw	r2, #1429	; 0x595
 8010cb8:	491d      	ldr	r1, [pc, #116]	; (8010d30 <tcp_receive+0x5fc>)
 8010cba:	481c      	ldr	r0, [pc, #112]	; (8010d2c <tcp_receive+0x5f8>)
 8010cbc:	f006 f960 	bl	8016f80 <iprintf>
      off = (u16_t)off32;
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010cc6:	4b16      	ldr	r3, [pc, #88]	; (8010d20 <tcp_receive+0x5ec>)
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	891b      	ldrh	r3, [r3, #8]
 8010ccc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d906      	bls.n	8010ce2 <tcp_receive+0x5ae>
 8010cd4:	4b13      	ldr	r3, [pc, #76]	; (8010d24 <tcp_receive+0x5f0>)
 8010cd6:	f240 5297 	movw	r2, #1431	; 0x597
 8010cda:	4916      	ldr	r1, [pc, #88]	; (8010d34 <tcp_receive+0x600>)
 8010cdc:	4813      	ldr	r0, [pc, #76]	; (8010d2c <tcp_receive+0x5f8>)
 8010cde:	f006 f94f 	bl	8016f80 <iprintf>
      inseg.len -= off;
 8010ce2:	4b0f      	ldr	r3, [pc, #60]	; (8010d20 <tcp_receive+0x5ec>)
 8010ce4:	891a      	ldrh	r2, [r3, #8]
 8010ce6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cea:	1ad3      	subs	r3, r2, r3
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	4b0c      	ldr	r3, [pc, #48]	; (8010d20 <tcp_receive+0x5ec>)
 8010cf0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010cf2:	4b0b      	ldr	r3, [pc, #44]	; (8010d20 <tcp_receive+0x5ec>)
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	891a      	ldrh	r2, [r3, #8]
 8010cf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cfc:	1ad3      	subs	r3, r2, r3
 8010cfe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010d00:	e02a      	b.n	8010d58 <tcp_receive+0x624>
 8010d02:	bf00      	nop
 8010d04:	080199dc 	.word	0x080199dc
 8010d08:	080199e4 	.word	0x080199e4
 8010d0c:	2000be78 	.word	0x2000be78
 8010d10:	2000be74 	.word	0x2000be74
 8010d14:	2000be38 	.word	0x2000be38
 8010d18:	2000be7a 	.word	0x2000be7a
 8010d1c:	2000be70 	.word	0x2000be70
 8010d20:	2000be50 	.word	0x2000be50
 8010d24:	08019674 	.word	0x08019674
 8010d28:	080199ec 	.word	0x080199ec
 8010d2c:	080196c0 	.word	0x080196c0
 8010d30:	080199fc 	.word	0x080199fc
 8010d34:	08019a0c 	.word	0x08019a0c
        off -= p->len;
 8010d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d3a:	895b      	ldrh	r3, [r3, #10]
 8010d3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d40:	1ad3      	subs	r3, r2, r3
 8010d42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d4a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d4e:	2200      	movs	r2, #0
 8010d50:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d5a:	895b      	ldrh	r3, [r3, #10]
 8010d5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d8e9      	bhi.n	8010d38 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010d64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d68:	4619      	mov	r1, r3
 8010d6a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d6c:	f7fc f866 	bl	800ce3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d74:	4a91      	ldr	r2, [pc, #580]	; (8010fbc <tcp_receive+0x888>)
 8010d76:	6013      	str	r3, [r2, #0]
 8010d78:	4b91      	ldr	r3, [pc, #580]	; (8010fc0 <tcp_receive+0x88c>)
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	4a8f      	ldr	r2, [pc, #572]	; (8010fbc <tcp_receive+0x888>)
 8010d7e:	6812      	ldr	r2, [r2, #0]
 8010d80:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d82:	e00d      	b.n	8010da0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010d84:	4b8d      	ldr	r3, [pc, #564]	; (8010fbc <tcp_receive+0x888>)
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	da06      	bge.n	8010da0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	8b5b      	ldrh	r3, [r3, #26]
 8010d96:	f043 0302 	orr.w	r3, r3, #2
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010da0:	4b86      	ldr	r3, [pc, #536]	; (8010fbc <tcp_receive+0x888>)
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f2c0 842a 	blt.w	8011604 <tcp_receive+0xed0>
 8010db0:	4b82      	ldr	r3, [pc, #520]	; (8010fbc <tcp_receive+0x888>)
 8010db2:	681a      	ldr	r2, [r3, #0]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db8:	6879      	ldr	r1, [r7, #4]
 8010dba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010dbc:	440b      	add	r3, r1
 8010dbe:	1ad3      	subs	r3, r2, r3
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f300 841e 	bgt.w	8011604 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dcc:	4b7b      	ldr	r3, [pc, #492]	; (8010fbc <tcp_receive+0x888>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	f040 829a 	bne.w	801130a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010dd6:	4b7a      	ldr	r3, [pc, #488]	; (8010fc0 <tcp_receive+0x88c>)
 8010dd8:	891c      	ldrh	r4, [r3, #8]
 8010dda:	4b79      	ldr	r3, [pc, #484]	; (8010fc0 <tcp_receive+0x88c>)
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	899b      	ldrh	r3, [r3, #12]
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fa fc54 	bl	800b690 <lwip_htons>
 8010de8:	4603      	mov	r3, r0
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	f003 0303 	and.w	r3, r3, #3
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d001      	beq.n	8010df8 <tcp_receive+0x6c4>
 8010df4:	2301      	movs	r3, #1
 8010df6:	e000      	b.n	8010dfa <tcp_receive+0x6c6>
 8010df8:	2300      	movs	r3, #0
 8010dfa:	4423      	add	r3, r4
 8010dfc:	b29a      	uxth	r2, r3
 8010dfe:	4b71      	ldr	r3, [pc, #452]	; (8010fc4 <tcp_receive+0x890>)
 8010e00:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e06:	4b6f      	ldr	r3, [pc, #444]	; (8010fc4 <tcp_receive+0x890>)
 8010e08:	881b      	ldrh	r3, [r3, #0]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d275      	bcs.n	8010efa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e0e:	4b6c      	ldr	r3, [pc, #432]	; (8010fc0 <tcp_receive+0x88c>)
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	899b      	ldrh	r3, [r3, #12]
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fa fc3a 	bl	800b690 <lwip_htons>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	f003 0301 	and.w	r3, r3, #1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d01f      	beq.n	8010e68 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010e28:	4b65      	ldr	r3, [pc, #404]	; (8010fc0 <tcp_receive+0x88c>)
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	899b      	ldrh	r3, [r3, #12]
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	b21b      	sxth	r3, r3
 8010e32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e36:	b21c      	sxth	r4, r3
 8010e38:	4b61      	ldr	r3, [pc, #388]	; (8010fc0 <tcp_receive+0x88c>)
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	899b      	ldrh	r3, [r3, #12]
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7fa fc25 	bl	800b690 <lwip_htons>
 8010e46:	4603      	mov	r3, r0
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fa fc1c 	bl	800b690 <lwip_htons>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	b21b      	sxth	r3, r3
 8010e5c:	4323      	orrs	r3, r4
 8010e5e:	b21a      	sxth	r2, r3
 8010e60:	4b57      	ldr	r3, [pc, #348]	; (8010fc0 <tcp_receive+0x88c>)
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	b292      	uxth	r2, r2
 8010e66:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e6c:	4b54      	ldr	r3, [pc, #336]	; (8010fc0 <tcp_receive+0x88c>)
 8010e6e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e70:	4b53      	ldr	r3, [pc, #332]	; (8010fc0 <tcp_receive+0x88c>)
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	899b      	ldrh	r3, [r3, #12]
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fa fc09 	bl	800b690 <lwip_htons>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	b2db      	uxtb	r3, r3
 8010e82:	f003 0302 	and.w	r3, r3, #2
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d005      	beq.n	8010e96 <tcp_receive+0x762>
            inseg.len -= 1;
 8010e8a:	4b4d      	ldr	r3, [pc, #308]	; (8010fc0 <tcp_receive+0x88c>)
 8010e8c:	891b      	ldrh	r3, [r3, #8]
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	b29a      	uxth	r2, r3
 8010e92:	4b4b      	ldr	r3, [pc, #300]	; (8010fc0 <tcp_receive+0x88c>)
 8010e94:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010e96:	4b4a      	ldr	r3, [pc, #296]	; (8010fc0 <tcp_receive+0x88c>)
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	4a49      	ldr	r2, [pc, #292]	; (8010fc0 <tcp_receive+0x88c>)
 8010e9c:	8912      	ldrh	r2, [r2, #8]
 8010e9e:	4611      	mov	r1, r2
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fb fecb 	bl	800cc3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010ea6:	4b46      	ldr	r3, [pc, #280]	; (8010fc0 <tcp_receive+0x88c>)
 8010ea8:	891c      	ldrh	r4, [r3, #8]
 8010eaa:	4b45      	ldr	r3, [pc, #276]	; (8010fc0 <tcp_receive+0x88c>)
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	899b      	ldrh	r3, [r3, #12]
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fa fbec 	bl	800b690 <lwip_htons>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	f003 0303 	and.w	r3, r3, #3
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d001      	beq.n	8010ec8 <tcp_receive+0x794>
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e000      	b.n	8010eca <tcp_receive+0x796>
 8010ec8:	2300      	movs	r3, #0
 8010eca:	4423      	add	r3, r4
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	4b3d      	ldr	r3, [pc, #244]	; (8010fc4 <tcp_receive+0x890>)
 8010ed0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010ed2:	4b3c      	ldr	r3, [pc, #240]	; (8010fc4 <tcp_receive+0x890>)
 8010ed4:	881b      	ldrh	r3, [r3, #0]
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	4b38      	ldr	r3, [pc, #224]	; (8010fbc <tcp_receive+0x888>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	441a      	add	r2, r3
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee2:	6879      	ldr	r1, [r7, #4]
 8010ee4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ee6:	440b      	add	r3, r1
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d006      	beq.n	8010efa <tcp_receive+0x7c6>
 8010eec:	4b36      	ldr	r3, [pc, #216]	; (8010fc8 <tcp_receive+0x894>)
 8010eee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010ef2:	4936      	ldr	r1, [pc, #216]	; (8010fcc <tcp_receive+0x898>)
 8010ef4:	4836      	ldr	r0, [pc, #216]	; (8010fd0 <tcp_receive+0x89c>)
 8010ef6:	f006 f843 	bl	8016f80 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f000 80e7 	beq.w	80110d2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f04:	4b2e      	ldr	r3, [pc, #184]	; (8010fc0 <tcp_receive+0x88c>)
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	899b      	ldrh	r3, [r3, #12]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fa fbbf 	bl	800b690 <lwip_htons>
 8010f12:	4603      	mov	r3, r0
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	f003 0301 	and.w	r3, r3, #1
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d010      	beq.n	8010f40 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010f1e:	e00a      	b.n	8010f36 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f24:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	f7fd fcde 	bl	800e8f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d1f0      	bne.n	8010f20 <tcp_receive+0x7ec>
 8010f3e:	e0c8      	b.n	80110d2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f44:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010f46:	e052      	b.n	8010fee <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	899b      	ldrh	r3, [r3, #12]
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fa fb9d 	bl	800b690 <lwip_htons>
 8010f56:	4603      	mov	r3, r0
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	f003 0301 	and.w	r3, r3, #1
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d03d      	beq.n	8010fde <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010f62:	4b17      	ldr	r3, [pc, #92]	; (8010fc0 <tcp_receive+0x88c>)
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	899b      	ldrh	r3, [r3, #12]
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fa fb90 	bl	800b690 <lwip_htons>
 8010f70:	4603      	mov	r3, r0
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d130      	bne.n	8010fde <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010f7c:	4b10      	ldr	r3, [pc, #64]	; (8010fc0 <tcp_receive+0x88c>)
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	899b      	ldrh	r3, [r3, #12]
 8010f82:	b29c      	uxth	r4, r3
 8010f84:	2001      	movs	r0, #1
 8010f86:	f7fa fb83 	bl	800b690 <lwip_htons>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	4b0c      	ldr	r3, [pc, #48]	; (8010fc0 <tcp_receive+0x88c>)
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	4322      	orrs	r2, r4
 8010f94:	b292      	uxth	r2, r2
 8010f96:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010f98:	4b09      	ldr	r3, [pc, #36]	; (8010fc0 <tcp_receive+0x88c>)
 8010f9a:	891c      	ldrh	r4, [r3, #8]
 8010f9c:	4b08      	ldr	r3, [pc, #32]	; (8010fc0 <tcp_receive+0x88c>)
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	899b      	ldrh	r3, [r3, #12]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fa fb73 	bl	800b690 <lwip_htons>
 8010faa:	4603      	mov	r3, r0
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	f003 0303 	and.w	r3, r3, #3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00e      	beq.n	8010fd4 <tcp_receive+0x8a0>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e00d      	b.n	8010fd6 <tcp_receive+0x8a2>
 8010fba:	bf00      	nop
 8010fbc:	2000be70 	.word	0x2000be70
 8010fc0:	2000be50 	.word	0x2000be50
 8010fc4:	2000be7a 	.word	0x2000be7a
 8010fc8:	08019674 	.word	0x08019674
 8010fcc:	08019a1c 	.word	0x08019a1c
 8010fd0:	080196c0 	.word	0x080196c0
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	4423      	add	r3, r4
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	4b98      	ldr	r3, [pc, #608]	; (801123c <tcp_receive+0xb08>)
 8010fdc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fe0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010fe8:	6938      	ldr	r0, [r7, #16]
 8010fea:	f7fd fc82 	bl	800e8f2 <tcp_seg_free>
            while (next &&
 8010fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d00e      	beq.n	8011012 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010ff4:	4b91      	ldr	r3, [pc, #580]	; (801123c <tcp_receive+0xb08>)
 8010ff6:	881b      	ldrh	r3, [r3, #0]
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	4b91      	ldr	r3, [pc, #580]	; (8011240 <tcp_receive+0xb0c>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	441a      	add	r2, r3
 8011000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011008:	8909      	ldrh	r1, [r1, #8]
 801100a:	440b      	add	r3, r1
 801100c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801100e:	2b00      	cmp	r3, #0
 8011010:	da9a      	bge.n	8010f48 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011014:	2b00      	cmp	r3, #0
 8011016:	d059      	beq.n	80110cc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011018:	4b88      	ldr	r3, [pc, #544]	; (801123c <tcp_receive+0xb08>)
 801101a:	881b      	ldrh	r3, [r3, #0]
 801101c:	461a      	mov	r2, r3
 801101e:	4b88      	ldr	r3, [pc, #544]	; (8011240 <tcp_receive+0xb0c>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	441a      	add	r2, r3
 8011024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801102c:	2b00      	cmp	r3, #0
 801102e:	dd4d      	ble.n	80110cc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	b29a      	uxth	r2, r3
 8011038:	4b81      	ldr	r3, [pc, #516]	; (8011240 <tcp_receive+0xb0c>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	b29b      	uxth	r3, r3
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	b29a      	uxth	r2, r3
 8011042:	4b80      	ldr	r3, [pc, #512]	; (8011244 <tcp_receive+0xb10>)
 8011044:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011046:	4b7f      	ldr	r3, [pc, #508]	; (8011244 <tcp_receive+0xb10>)
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	899b      	ldrh	r3, [r3, #12]
 801104c:	b29b      	uxth	r3, r3
 801104e:	4618      	mov	r0, r3
 8011050:	f7fa fb1e 	bl	800b690 <lwip_htons>
 8011054:	4603      	mov	r3, r0
 8011056:	b2db      	uxtb	r3, r3
 8011058:	f003 0302 	and.w	r3, r3, #2
 801105c:	2b00      	cmp	r3, #0
 801105e:	d005      	beq.n	801106c <tcp_receive+0x938>
                inseg.len -= 1;
 8011060:	4b78      	ldr	r3, [pc, #480]	; (8011244 <tcp_receive+0xb10>)
 8011062:	891b      	ldrh	r3, [r3, #8]
 8011064:	3b01      	subs	r3, #1
 8011066:	b29a      	uxth	r2, r3
 8011068:	4b76      	ldr	r3, [pc, #472]	; (8011244 <tcp_receive+0xb10>)
 801106a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801106c:	4b75      	ldr	r3, [pc, #468]	; (8011244 <tcp_receive+0xb10>)
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	4a74      	ldr	r2, [pc, #464]	; (8011244 <tcp_receive+0xb10>)
 8011072:	8912      	ldrh	r2, [r2, #8]
 8011074:	4611      	mov	r1, r2
 8011076:	4618      	mov	r0, r3
 8011078:	f7fb fde0 	bl	800cc3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801107c:	4b71      	ldr	r3, [pc, #452]	; (8011244 <tcp_receive+0xb10>)
 801107e:	891c      	ldrh	r4, [r3, #8]
 8011080:	4b70      	ldr	r3, [pc, #448]	; (8011244 <tcp_receive+0xb10>)
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	899b      	ldrh	r3, [r3, #12]
 8011086:	b29b      	uxth	r3, r3
 8011088:	4618      	mov	r0, r3
 801108a:	f7fa fb01 	bl	800b690 <lwip_htons>
 801108e:	4603      	mov	r3, r0
 8011090:	b2db      	uxtb	r3, r3
 8011092:	f003 0303 	and.w	r3, r3, #3
 8011096:	2b00      	cmp	r3, #0
 8011098:	d001      	beq.n	801109e <tcp_receive+0x96a>
 801109a:	2301      	movs	r3, #1
 801109c:	e000      	b.n	80110a0 <tcp_receive+0x96c>
 801109e:	2300      	movs	r3, #0
 80110a0:	4423      	add	r3, r4
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	4b65      	ldr	r3, [pc, #404]	; (801123c <tcp_receive+0xb08>)
 80110a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80110a8:	4b64      	ldr	r3, [pc, #400]	; (801123c <tcp_receive+0xb08>)
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	461a      	mov	r2, r3
 80110ae:	4b64      	ldr	r3, [pc, #400]	; (8011240 <tcp_receive+0xb0c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	441a      	add	r2, r3
 80110b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b6:	68db      	ldr	r3, [r3, #12]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d006      	beq.n	80110cc <tcp_receive+0x998>
 80110be:	4b62      	ldr	r3, [pc, #392]	; (8011248 <tcp_receive+0xb14>)
 80110c0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80110c4:	4961      	ldr	r1, [pc, #388]	; (801124c <tcp_receive+0xb18>)
 80110c6:	4862      	ldr	r0, [pc, #392]	; (8011250 <tcp_receive+0xb1c>)
 80110c8:	f005 ff5a 	bl	8016f80 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110d0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80110d2:	4b5a      	ldr	r3, [pc, #360]	; (801123c <tcp_receive+0xb08>)
 80110d4:	881b      	ldrh	r3, [r3, #0]
 80110d6:	461a      	mov	r2, r3
 80110d8:	4b59      	ldr	r3, [pc, #356]	; (8011240 <tcp_receive+0xb0c>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	441a      	add	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110e6:	4b55      	ldr	r3, [pc, #340]	; (801123c <tcp_receive+0xb08>)
 80110e8:	881b      	ldrh	r3, [r3, #0]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d206      	bcs.n	80110fc <tcp_receive+0x9c8>
 80110ee:	4b56      	ldr	r3, [pc, #344]	; (8011248 <tcp_receive+0xb14>)
 80110f0:	f240 6207 	movw	r2, #1543	; 0x607
 80110f4:	4957      	ldr	r1, [pc, #348]	; (8011254 <tcp_receive+0xb20>)
 80110f6:	4856      	ldr	r0, [pc, #344]	; (8011250 <tcp_receive+0xb1c>)
 80110f8:	f005 ff42 	bl	8016f80 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011100:	4b4e      	ldr	r3, [pc, #312]	; (801123c <tcp_receive+0xb08>)
 8011102:	881b      	ldrh	r3, [r3, #0]
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	b29a      	uxth	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f7fc fdb3 	bl	800dc78 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011112:	4b4c      	ldr	r3, [pc, #304]	; (8011244 <tcp_receive+0xb10>)
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	891b      	ldrh	r3, [r3, #8]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d006      	beq.n	801112a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801111c:	4b49      	ldr	r3, [pc, #292]	; (8011244 <tcp_receive+0xb10>)
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	4a4d      	ldr	r2, [pc, #308]	; (8011258 <tcp_receive+0xb24>)
 8011122:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011124:	4b47      	ldr	r3, [pc, #284]	; (8011244 <tcp_receive+0xb10>)
 8011126:	2200      	movs	r2, #0
 8011128:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801112a:	4b46      	ldr	r3, [pc, #280]	; (8011244 <tcp_receive+0xb10>)
 801112c:	68db      	ldr	r3, [r3, #12]
 801112e:	899b      	ldrh	r3, [r3, #12]
 8011130:	b29b      	uxth	r3, r3
 8011132:	4618      	mov	r0, r3
 8011134:	f7fa faac 	bl	800b690 <lwip_htons>
 8011138:	4603      	mov	r3, r0
 801113a:	b2db      	uxtb	r3, r3
 801113c:	f003 0301 	and.w	r3, r3, #1
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 80b8 	beq.w	80112b6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011146:	4b45      	ldr	r3, [pc, #276]	; (801125c <tcp_receive+0xb28>)
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	f043 0320 	orr.w	r3, r3, #32
 801114e:	b2da      	uxtb	r2, r3
 8011150:	4b42      	ldr	r3, [pc, #264]	; (801125c <tcp_receive+0xb28>)
 8011152:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011154:	e0af      	b.n	80112b6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801115a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	4a36      	ldr	r2, [pc, #216]	; (8011240 <tcp_receive+0xb0c>)
 8011166:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	891b      	ldrh	r3, [r3, #8]
 801116c:	461c      	mov	r4, r3
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	899b      	ldrh	r3, [r3, #12]
 8011174:	b29b      	uxth	r3, r3
 8011176:	4618      	mov	r0, r3
 8011178:	f7fa fa8a 	bl	800b690 <lwip_htons>
 801117c:	4603      	mov	r3, r0
 801117e:	b2db      	uxtb	r3, r3
 8011180:	f003 0303 	and.w	r3, r3, #3
 8011184:	2b00      	cmp	r3, #0
 8011186:	d001      	beq.n	801118c <tcp_receive+0xa58>
 8011188:	2301      	movs	r3, #1
 801118a:	e000      	b.n	801118e <tcp_receive+0xa5a>
 801118c:	2300      	movs	r3, #0
 801118e:	191a      	adds	r2, r3, r4
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011194:	441a      	add	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801119e:	461c      	mov	r4, r3
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	891b      	ldrh	r3, [r3, #8]
 80111a4:	461d      	mov	r5, r3
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	899b      	ldrh	r3, [r3, #12]
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fa fa6e 	bl	800b690 <lwip_htons>
 80111b4:	4603      	mov	r3, r0
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	f003 0303 	and.w	r3, r3, #3
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <tcp_receive+0xa90>
 80111c0:	2301      	movs	r3, #1
 80111c2:	e000      	b.n	80111c6 <tcp_receive+0xa92>
 80111c4:	2300      	movs	r3, #0
 80111c6:	442b      	add	r3, r5
 80111c8:	429c      	cmp	r4, r3
 80111ca:	d206      	bcs.n	80111da <tcp_receive+0xaa6>
 80111cc:	4b1e      	ldr	r3, [pc, #120]	; (8011248 <tcp_receive+0xb14>)
 80111ce:	f240 622b 	movw	r2, #1579	; 0x62b
 80111d2:	4923      	ldr	r1, [pc, #140]	; (8011260 <tcp_receive+0xb2c>)
 80111d4:	481e      	ldr	r0, [pc, #120]	; (8011250 <tcp_receive+0xb1c>)
 80111d6:	f005 fed3 	bl	8016f80 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	891b      	ldrh	r3, [r3, #8]
 80111de:	461c      	mov	r4, r3
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	899b      	ldrh	r3, [r3, #12]
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7fa fa51 	bl	800b690 <lwip_htons>
 80111ee:	4603      	mov	r3, r0
 80111f0:	b2db      	uxtb	r3, r3
 80111f2:	f003 0303 	and.w	r3, r3, #3
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d001      	beq.n	80111fe <tcp_receive+0xaca>
 80111fa:	2301      	movs	r3, #1
 80111fc:	e000      	b.n	8011200 <tcp_receive+0xacc>
 80111fe:	2300      	movs	r3, #0
 8011200:	1919      	adds	r1, r3, r4
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011206:	b28b      	uxth	r3, r1
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	b29a      	uxth	r2, r3
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7fc fd31 	bl	800dc78 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	891b      	ldrh	r3, [r3, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d028      	beq.n	8011272 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011220:	4b0d      	ldr	r3, [pc, #52]	; (8011258 <tcp_receive+0xb24>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d01d      	beq.n	8011264 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011228:	4b0b      	ldr	r3, [pc, #44]	; (8011258 <tcp_receive+0xb24>)
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f7fb ff54 	bl	800d0e0 <pbuf_cat>
 8011238:	e018      	b.n	801126c <tcp_receive+0xb38>
 801123a:	bf00      	nop
 801123c:	2000be7a 	.word	0x2000be7a
 8011240:	2000be70 	.word	0x2000be70
 8011244:	2000be50 	.word	0x2000be50
 8011248:	08019674 	.word	0x08019674
 801124c:	08019a54 	.word	0x08019a54
 8011250:	080196c0 	.word	0x080196c0
 8011254:	08019a90 	.word	0x08019a90
 8011258:	2000be80 	.word	0x2000be80
 801125c:	2000be7d 	.word	0x2000be7d
 8011260:	08019ab0 	.word	0x08019ab0
            } else {
              recv_data = cseg->p;
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	4a70      	ldr	r2, [pc, #448]	; (801142c <tcp_receive+0xcf8>)
 801126a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	2200      	movs	r2, #0
 8011270:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	899b      	ldrh	r3, [r3, #12]
 8011278:	b29b      	uxth	r3, r3
 801127a:	4618      	mov	r0, r3
 801127c:	f7fa fa08 	bl	800b690 <lwip_htons>
 8011280:	4603      	mov	r3, r0
 8011282:	b2db      	uxtb	r3, r3
 8011284:	f003 0301 	and.w	r3, r3, #1
 8011288:	2b00      	cmp	r3, #0
 801128a:	d00d      	beq.n	80112a8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801128c:	4b68      	ldr	r3, [pc, #416]	; (8011430 <tcp_receive+0xcfc>)
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	f043 0320 	orr.w	r3, r3, #32
 8011294:	b2da      	uxtb	r2, r3
 8011296:	4b66      	ldr	r3, [pc, #408]	; (8011430 <tcp_receive+0xcfc>)
 8011298:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	7d1b      	ldrb	r3, [r3, #20]
 801129e:	2b04      	cmp	r3, #4
 80112a0:	d102      	bne.n	80112a8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2207      	movs	r2, #7
 80112a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80112b0:	68b8      	ldr	r0, [r7, #8]
 80112b2:	f7fd fb1e 	bl	800e8f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d008      	beq.n	80112d0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	685a      	ldr	r2, [r3, #4]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80112ca:	429a      	cmp	r2, r3
 80112cc:	f43f af43 	beq.w	8011156 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	8b5b      	ldrh	r3, [r3, #26]
 80112d4:	f003 0301 	and.w	r3, r3, #1
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d00e      	beq.n	80112fa <tcp_receive+0xbc6>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	8b5b      	ldrh	r3, [r3, #26]
 80112e0:	f023 0301 	bic.w	r3, r3, #1
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	835a      	strh	r2, [r3, #26]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	8b5b      	ldrh	r3, [r3, #26]
 80112ee:	f043 0302 	orr.w	r3, r3, #2
 80112f2:	b29a      	uxth	r2, r3
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80112f8:	e188      	b.n	801160c <tcp_receive+0xed8>
        tcp_ack(pcb);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	8b5b      	ldrh	r3, [r3, #26]
 80112fe:	f043 0301 	orr.w	r3, r3, #1
 8011302:	b29a      	uxth	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011308:	e180      	b.n	801160c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801130e:	2b00      	cmp	r3, #0
 8011310:	d106      	bne.n	8011320 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011312:	4848      	ldr	r0, [pc, #288]	; (8011434 <tcp_receive+0xd00>)
 8011314:	f7fd fb06 	bl	800e924 <tcp_seg_copy>
 8011318:	4602      	mov	r2, r0
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	675a      	str	r2, [r3, #116]	; 0x74
 801131e:	e16d      	b.n	80115fc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011320:	2300      	movs	r3, #0
 8011322:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011328:	63bb      	str	r3, [r7, #56]	; 0x38
 801132a:	e157      	b.n	80115dc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132e:	68db      	ldr	r3, [r3, #12]
 8011330:	685a      	ldr	r2, [r3, #4]
 8011332:	4b41      	ldr	r3, [pc, #260]	; (8011438 <tcp_receive+0xd04>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	429a      	cmp	r2, r3
 8011338:	d11d      	bne.n	8011376 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801133a:	4b3e      	ldr	r3, [pc, #248]	; (8011434 <tcp_receive+0xd00>)
 801133c:	891a      	ldrh	r2, [r3, #8]
 801133e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011340:	891b      	ldrh	r3, [r3, #8]
 8011342:	429a      	cmp	r2, r3
 8011344:	f240 814f 	bls.w	80115e6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011348:	483a      	ldr	r0, [pc, #232]	; (8011434 <tcp_receive+0xd00>)
 801134a:	f7fd faeb 	bl	800e924 <tcp_seg_copy>
 801134e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	2b00      	cmp	r3, #0
 8011354:	f000 8149 	beq.w	80115ea <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801135a:	2b00      	cmp	r3, #0
 801135c:	d003      	beq.n	8011366 <tcp_receive+0xc32>
                    prev->next = cseg;
 801135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011360:	697a      	ldr	r2, [r7, #20]
 8011362:	601a      	str	r2, [r3, #0]
 8011364:	e002      	b.n	801136c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	697a      	ldr	r2, [r7, #20]
 801136a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801136c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801136e:	6978      	ldr	r0, [r7, #20]
 8011370:	f7ff f8dc 	bl	801052c <tcp_oos_insert_segment>
                }
                break;
 8011374:	e139      	b.n	80115ea <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011378:	2b00      	cmp	r3, #0
 801137a:	d117      	bne.n	80113ac <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801137c:	4b2e      	ldr	r3, [pc, #184]	; (8011438 <tcp_receive+0xd04>)
 801137e:	681a      	ldr	r2, [r3, #0]
 8011380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	2b00      	cmp	r3, #0
 801138a:	da57      	bge.n	801143c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801138c:	4829      	ldr	r0, [pc, #164]	; (8011434 <tcp_receive+0xd00>)
 801138e:	f7fd fac9 	bl	800e924 <tcp_seg_copy>
 8011392:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	2b00      	cmp	r3, #0
 8011398:	f000 8129 	beq.w	80115ee <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	69ba      	ldr	r2, [r7, #24]
 80113a0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80113a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80113a4:	69b8      	ldr	r0, [r7, #24]
 80113a6:	f7ff f8c1 	bl	801052c <tcp_oos_insert_segment>
                  }
                  break;
 80113aa:	e120      	b.n	80115ee <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80113ac:	4b22      	ldr	r3, [pc, #136]	; (8011438 <tcp_receive+0xd04>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	1ad3      	subs	r3, r2, r3
 80113b8:	3b01      	subs	r3, #1
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	db3e      	blt.n	801143c <tcp_receive+0xd08>
 80113be:	4b1e      	ldr	r3, [pc, #120]	; (8011438 <tcp_receive+0xd04>)
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	1ad3      	subs	r3, r2, r3
 80113ca:	3301      	adds	r3, #1
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	dc35      	bgt.n	801143c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113d0:	4818      	ldr	r0, [pc, #96]	; (8011434 <tcp_receive+0xd00>)
 80113d2:	f7fd faa7 	bl	800e924 <tcp_seg_copy>
 80113d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80113d8:	69fb      	ldr	r3, [r7, #28]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	f000 8109 	beq.w	80115f2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80113e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113e8:	8912      	ldrh	r2, [r2, #8]
 80113ea:	441a      	add	r2, r3
 80113ec:	4b12      	ldr	r3, [pc, #72]	; (8011438 <tcp_receive+0xd04>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	dd12      	ble.n	801141c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80113f6:	4b10      	ldr	r3, [pc, #64]	; (8011438 <tcp_receive+0xd04>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	b29b      	uxth	r3, r3
 8011404:	1ad3      	subs	r3, r2, r3
 8011406:	b29a      	uxth	r2, r3
 8011408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801140a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801140e:	685a      	ldr	r2, [r3, #4]
 8011410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011412:	891b      	ldrh	r3, [r3, #8]
 8011414:	4619      	mov	r1, r3
 8011416:	4610      	mov	r0, r2
 8011418:	f7fb fc10 	bl	800cc3c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801141e:	69fa      	ldr	r2, [r7, #28]
 8011420:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011424:	69f8      	ldr	r0, [r7, #28]
 8011426:	f7ff f881 	bl	801052c <tcp_oos_insert_segment>
                  }
                  break;
 801142a:	e0e2      	b.n	80115f2 <tcp_receive+0xebe>
 801142c:	2000be80 	.word	0x2000be80
 8011430:	2000be7d 	.word	0x2000be7d
 8011434:	2000be50 	.word	0x2000be50
 8011438:	2000be70 	.word	0x2000be70
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801143c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	f040 80c6 	bne.w	80115d6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801144a:	4b80      	ldr	r3, [pc, #512]	; (801164c <tcp_receive+0xf18>)
 801144c:	681a      	ldr	r2, [r3, #0]
 801144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011456:	2b00      	cmp	r3, #0
 8011458:	f340 80bd 	ble.w	80115d6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	899b      	ldrh	r3, [r3, #12]
 8011462:	b29b      	uxth	r3, r3
 8011464:	4618      	mov	r0, r3
 8011466:	f7fa f913 	bl	800b690 <lwip_htons>
 801146a:	4603      	mov	r3, r0
 801146c:	b2db      	uxtb	r3, r3
 801146e:	f003 0301 	and.w	r3, r3, #1
 8011472:	2b00      	cmp	r3, #0
 8011474:	f040 80bf 	bne.w	80115f6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011478:	4875      	ldr	r0, [pc, #468]	; (8011650 <tcp_receive+0xf1c>)
 801147a:	f7fd fa53 	bl	800e924 <tcp_seg_copy>
 801147e:	4602      	mov	r2, r0
 8011480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011482:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	f000 80b6 	beq.w	80115fa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011496:	8912      	ldrh	r2, [r2, #8]
 8011498:	441a      	add	r2, r3
 801149a:	4b6c      	ldr	r3, [pc, #432]	; (801164c <tcp_receive+0xf18>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	dd12      	ble.n	80114ca <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80114a4:	4b69      	ldr	r3, [pc, #420]	; (801164c <tcp_receive+0xf18>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	1ad3      	subs	r3, r2, r3
 80114b4:	b29a      	uxth	r2, r3
 80114b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80114ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114bc:	685a      	ldr	r2, [r3, #4]
 80114be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c0:	891b      	ldrh	r3, [r3, #8]
 80114c2:	4619      	mov	r1, r3
 80114c4:	4610      	mov	r0, r2
 80114c6:	f7fb fbb9 	bl	800cc3c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80114ca:	4b62      	ldr	r3, [pc, #392]	; (8011654 <tcp_receive+0xf20>)
 80114cc:	881b      	ldrh	r3, [r3, #0]
 80114ce:	461a      	mov	r2, r3
 80114d0:	4b5e      	ldr	r3, [pc, #376]	; (801164c <tcp_receive+0xf18>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	441a      	add	r2, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114da:	6879      	ldr	r1, [r7, #4]
 80114dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114de:	440b      	add	r3, r1
 80114e0:	1ad3      	subs	r3, r2, r3
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f340 8089 	ble.w	80115fa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80114e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	899b      	ldrh	r3, [r3, #12]
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fa f8cc 	bl	800b690 <lwip_htons>
 80114f8:	4603      	mov	r3, r0
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	f003 0301 	and.w	r3, r3, #1
 8011500:	2b00      	cmp	r3, #0
 8011502:	d022      	beq.n	801154a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	899b      	ldrh	r3, [r3, #12]
 801150c:	b29b      	uxth	r3, r3
 801150e:	b21b      	sxth	r3, r3
 8011510:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011514:	b21c      	sxth	r4, r3
 8011516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	899b      	ldrh	r3, [r3, #12]
 801151e:	b29b      	uxth	r3, r3
 8011520:	4618      	mov	r0, r3
 8011522:	f7fa f8b5 	bl	800b690 <lwip_htons>
 8011526:	4603      	mov	r3, r0
 8011528:	b2db      	uxtb	r3, r3
 801152a:	b29b      	uxth	r3, r3
 801152c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011530:	b29b      	uxth	r3, r3
 8011532:	4618      	mov	r0, r3
 8011534:	f7fa f8ac 	bl	800b690 <lwip_htons>
 8011538:	4603      	mov	r3, r0
 801153a:	b21b      	sxth	r3, r3
 801153c:	4323      	orrs	r3, r4
 801153e:	b21a      	sxth	r2, r3
 8011540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	b292      	uxth	r2, r2
 8011548:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801154e:	b29a      	uxth	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011554:	4413      	add	r3, r2
 8011556:	b299      	uxth	r1, r3
 8011558:	4b3c      	ldr	r3, [pc, #240]	; (801164c <tcp_receive+0xf18>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	b29a      	uxth	r2, r3
 801155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	1a8a      	subs	r2, r1, r2
 8011564:	b292      	uxth	r2, r2
 8011566:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	685a      	ldr	r2, [r3, #4]
 801156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	891b      	ldrh	r3, [r3, #8]
 8011574:	4619      	mov	r1, r3
 8011576:	4610      	mov	r0, r2
 8011578:	f7fb fb60 	bl	800cc3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	891c      	ldrh	r4, [r3, #8]
 8011582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	899b      	ldrh	r3, [r3, #12]
 801158a:	b29b      	uxth	r3, r3
 801158c:	4618      	mov	r0, r3
 801158e:	f7fa f87f 	bl	800b690 <lwip_htons>
 8011592:	4603      	mov	r3, r0
 8011594:	b2db      	uxtb	r3, r3
 8011596:	f003 0303 	and.w	r3, r3, #3
 801159a:	2b00      	cmp	r3, #0
 801159c:	d001      	beq.n	80115a2 <tcp_receive+0xe6e>
 801159e:	2301      	movs	r3, #1
 80115a0:	e000      	b.n	80115a4 <tcp_receive+0xe70>
 80115a2:	2300      	movs	r3, #0
 80115a4:	4423      	add	r3, r4
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	4b2a      	ldr	r3, [pc, #168]	; (8011654 <tcp_receive+0xf20>)
 80115aa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80115ac:	4b29      	ldr	r3, [pc, #164]	; (8011654 <tcp_receive+0xf20>)
 80115ae:	881b      	ldrh	r3, [r3, #0]
 80115b0:	461a      	mov	r2, r3
 80115b2:	4b26      	ldr	r3, [pc, #152]	; (801164c <tcp_receive+0xf18>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	441a      	add	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115bc:	6879      	ldr	r1, [r7, #4]
 80115be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115c0:	440b      	add	r3, r1
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d019      	beq.n	80115fa <tcp_receive+0xec6>
 80115c6:	4b24      	ldr	r3, [pc, #144]	; (8011658 <tcp_receive+0xf24>)
 80115c8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80115cc:	4923      	ldr	r1, [pc, #140]	; (801165c <tcp_receive+0xf28>)
 80115ce:	4824      	ldr	r0, [pc, #144]	; (8011660 <tcp_receive+0xf2c>)
 80115d0:	f005 fcd6 	bl	8016f80 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80115d4:	e011      	b.n	80115fa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80115d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	63bb      	str	r3, [r7, #56]	; 0x38
 80115dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115de:	2b00      	cmp	r3, #0
 80115e0:	f47f aea4 	bne.w	801132c <tcp_receive+0xbf8>
 80115e4:	e00a      	b.n	80115fc <tcp_receive+0xec8>
                break;
 80115e6:	bf00      	nop
 80115e8:	e008      	b.n	80115fc <tcp_receive+0xec8>
                break;
 80115ea:	bf00      	nop
 80115ec:	e006      	b.n	80115fc <tcp_receive+0xec8>
                  break;
 80115ee:	bf00      	nop
 80115f0:	e004      	b.n	80115fc <tcp_receive+0xec8>
                  break;
 80115f2:	bf00      	nop
 80115f4:	e002      	b.n	80115fc <tcp_receive+0xec8>
                  break;
 80115f6:	bf00      	nop
 80115f8:	e000      	b.n	80115fc <tcp_receive+0xec8>
                break;
 80115fa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f001 fe8b 	bl	8013318 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011602:	e003      	b.n	801160c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f001 fe87 	bl	8013318 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801160a:	e01a      	b.n	8011642 <tcp_receive+0xf0e>
 801160c:	e019      	b.n	8011642 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801160e:	4b0f      	ldr	r3, [pc, #60]	; (801164c <tcp_receive+0xf18>)
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011616:	1ad3      	subs	r3, r2, r3
 8011618:	2b00      	cmp	r3, #0
 801161a:	db0a      	blt.n	8011632 <tcp_receive+0xefe>
 801161c:	4b0b      	ldr	r3, [pc, #44]	; (801164c <tcp_receive+0xf18>)
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011624:	6879      	ldr	r1, [r7, #4]
 8011626:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011628:	440b      	add	r3, r1
 801162a:	1ad3      	subs	r3, r2, r3
 801162c:	3301      	adds	r3, #1
 801162e:	2b00      	cmp	r3, #0
 8011630:	dd07      	ble.n	8011642 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	8b5b      	ldrh	r3, [r3, #26]
 8011636:	f043 0302 	orr.w	r3, r3, #2
 801163a:	b29a      	uxth	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011640:	e7ff      	b.n	8011642 <tcp_receive+0xf0e>
 8011642:	bf00      	nop
 8011644:	3750      	adds	r7, #80	; 0x50
 8011646:	46bd      	mov	sp, r7
 8011648:	bdb0      	pop	{r4, r5, r7, pc}
 801164a:	bf00      	nop
 801164c:	2000be70 	.word	0x2000be70
 8011650:	2000be50 	.word	0x2000be50
 8011654:	2000be7a 	.word	0x2000be7a
 8011658:	08019674 	.word	0x08019674
 801165c:	08019a1c 	.word	0x08019a1c
 8011660:	080196c0 	.word	0x080196c0

08011664 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801166a:	4b15      	ldr	r3, [pc, #84]	; (80116c0 <tcp_get_next_optbyte+0x5c>)
 801166c:	881b      	ldrh	r3, [r3, #0]
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	b291      	uxth	r1, r2
 8011672:	4a13      	ldr	r2, [pc, #76]	; (80116c0 <tcp_get_next_optbyte+0x5c>)
 8011674:	8011      	strh	r1, [r2, #0]
 8011676:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011678:	4b12      	ldr	r3, [pc, #72]	; (80116c4 <tcp_get_next_optbyte+0x60>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d004      	beq.n	801168a <tcp_get_next_optbyte+0x26>
 8011680:	4b11      	ldr	r3, [pc, #68]	; (80116c8 <tcp_get_next_optbyte+0x64>)
 8011682:	881b      	ldrh	r3, [r3, #0]
 8011684:	88fa      	ldrh	r2, [r7, #6]
 8011686:	429a      	cmp	r2, r3
 8011688:	d208      	bcs.n	801169c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801168a:	4b10      	ldr	r3, [pc, #64]	; (80116cc <tcp_get_next_optbyte+0x68>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	3314      	adds	r3, #20
 8011690:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011692:	88fb      	ldrh	r3, [r7, #6]
 8011694:	683a      	ldr	r2, [r7, #0]
 8011696:	4413      	add	r3, r2
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	e00b      	b.n	80116b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801169c:	88fb      	ldrh	r3, [r7, #6]
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	4b09      	ldr	r3, [pc, #36]	; (80116c8 <tcp_get_next_optbyte+0x64>)
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	1ad3      	subs	r3, r2, r3
 80116a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80116aa:	4b06      	ldr	r3, [pc, #24]	; (80116c4 <tcp_get_next_optbyte+0x60>)
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	797b      	ldrb	r3, [r7, #5]
 80116b0:	4413      	add	r3, r2
 80116b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bc80      	pop	{r7}
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop
 80116c0:	2000be6c 	.word	0x2000be6c
 80116c4:	2000be68 	.word	0x2000be68
 80116c8:	2000be66 	.word	0x2000be66
 80116cc:	2000be60 	.word	0x2000be60

080116d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d106      	bne.n	80116ec <tcp_parseopt+0x1c>
 80116de:	4b32      	ldr	r3, [pc, #200]	; (80117a8 <tcp_parseopt+0xd8>)
 80116e0:	f240 727d 	movw	r2, #1917	; 0x77d
 80116e4:	4931      	ldr	r1, [pc, #196]	; (80117ac <tcp_parseopt+0xdc>)
 80116e6:	4832      	ldr	r0, [pc, #200]	; (80117b0 <tcp_parseopt+0xe0>)
 80116e8:	f005 fc4a 	bl	8016f80 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80116ec:	4b31      	ldr	r3, [pc, #196]	; (80117b4 <tcp_parseopt+0xe4>)
 80116ee:	881b      	ldrh	r3, [r3, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d055      	beq.n	80117a0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80116f4:	4b30      	ldr	r3, [pc, #192]	; (80117b8 <tcp_parseopt+0xe8>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	801a      	strh	r2, [r3, #0]
 80116fa:	e045      	b.n	8011788 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80116fc:	f7ff ffb2 	bl	8011664 <tcp_get_next_optbyte>
 8011700:	4603      	mov	r3, r0
 8011702:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011704:	7bfb      	ldrb	r3, [r7, #15]
 8011706:	2b02      	cmp	r3, #2
 8011708:	d006      	beq.n	8011718 <tcp_parseopt+0x48>
 801170a:	2b02      	cmp	r3, #2
 801170c:	dc2b      	bgt.n	8011766 <tcp_parseopt+0x96>
 801170e:	2b00      	cmp	r3, #0
 8011710:	d041      	beq.n	8011796 <tcp_parseopt+0xc6>
 8011712:	2b01      	cmp	r3, #1
 8011714:	d127      	bne.n	8011766 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011716:	e037      	b.n	8011788 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011718:	f7ff ffa4 	bl	8011664 <tcp_get_next_optbyte>
 801171c:	4603      	mov	r3, r0
 801171e:	2b04      	cmp	r3, #4
 8011720:	d13b      	bne.n	801179a <tcp_parseopt+0xca>
 8011722:	4b25      	ldr	r3, [pc, #148]	; (80117b8 <tcp_parseopt+0xe8>)
 8011724:	881b      	ldrh	r3, [r3, #0]
 8011726:	3301      	adds	r3, #1
 8011728:	4a22      	ldr	r2, [pc, #136]	; (80117b4 <tcp_parseopt+0xe4>)
 801172a:	8812      	ldrh	r2, [r2, #0]
 801172c:	4293      	cmp	r3, r2
 801172e:	da34      	bge.n	801179a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011730:	f7ff ff98 	bl	8011664 <tcp_get_next_optbyte>
 8011734:	4603      	mov	r3, r0
 8011736:	b29b      	uxth	r3, r3
 8011738:	021b      	lsls	r3, r3, #8
 801173a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801173c:	f7ff ff92 	bl	8011664 <tcp_get_next_optbyte>
 8011740:	4603      	mov	r3, r0
 8011742:	b29a      	uxth	r2, r3
 8011744:	89bb      	ldrh	r3, [r7, #12]
 8011746:	4313      	orrs	r3, r2
 8011748:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801174a:	89bb      	ldrh	r3, [r7, #12]
 801174c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011750:	d804      	bhi.n	801175c <tcp_parseopt+0x8c>
 8011752:	89bb      	ldrh	r3, [r7, #12]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d001      	beq.n	801175c <tcp_parseopt+0x8c>
 8011758:	89ba      	ldrh	r2, [r7, #12]
 801175a:	e001      	b.n	8011760 <tcp_parseopt+0x90>
 801175c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011764:	e010      	b.n	8011788 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011766:	f7ff ff7d 	bl	8011664 <tcp_get_next_optbyte>
 801176a:	4603      	mov	r3, r0
 801176c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801176e:	7afb      	ldrb	r3, [r7, #11]
 8011770:	2b01      	cmp	r3, #1
 8011772:	d914      	bls.n	801179e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011774:	7afb      	ldrb	r3, [r7, #11]
 8011776:	b29a      	uxth	r2, r3
 8011778:	4b0f      	ldr	r3, [pc, #60]	; (80117b8 <tcp_parseopt+0xe8>)
 801177a:	881b      	ldrh	r3, [r3, #0]
 801177c:	4413      	add	r3, r2
 801177e:	b29b      	uxth	r3, r3
 8011780:	3b02      	subs	r3, #2
 8011782:	b29a      	uxth	r2, r3
 8011784:	4b0c      	ldr	r3, [pc, #48]	; (80117b8 <tcp_parseopt+0xe8>)
 8011786:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011788:	4b0b      	ldr	r3, [pc, #44]	; (80117b8 <tcp_parseopt+0xe8>)
 801178a:	881a      	ldrh	r2, [r3, #0]
 801178c:	4b09      	ldr	r3, [pc, #36]	; (80117b4 <tcp_parseopt+0xe4>)
 801178e:	881b      	ldrh	r3, [r3, #0]
 8011790:	429a      	cmp	r2, r3
 8011792:	d3b3      	bcc.n	80116fc <tcp_parseopt+0x2c>
 8011794:	e004      	b.n	80117a0 <tcp_parseopt+0xd0>
          return;
 8011796:	bf00      	nop
 8011798:	e002      	b.n	80117a0 <tcp_parseopt+0xd0>
            return;
 801179a:	bf00      	nop
 801179c:	e000      	b.n	80117a0 <tcp_parseopt+0xd0>
            return;
 801179e:	bf00      	nop
      }
    }
  }
}
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	08019674 	.word	0x08019674
 80117ac:	08019ad8 	.word	0x08019ad8
 80117b0:	080196c0 	.word	0x080196c0
 80117b4:	2000be64 	.word	0x2000be64
 80117b8:	2000be6c 	.word	0x2000be6c

080117bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80117bc:	b480      	push	{r7}
 80117be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80117c0:	4b05      	ldr	r3, [pc, #20]	; (80117d8 <tcp_trigger_input_pcb_close+0x1c>)
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	f043 0310 	orr.w	r3, r3, #16
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	4b03      	ldr	r3, [pc, #12]	; (80117d8 <tcp_trigger_input_pcb_close+0x1c>)
 80117cc:	701a      	strb	r2, [r3, #0]
}
 80117ce:	bf00      	nop
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bc80      	pop	{r7}
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	2000be7d 	.word	0x2000be7d

080117dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00a      	beq.n	8011804 <tcp_route+0x28>
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	7a1b      	ldrb	r3, [r3, #8]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d006      	beq.n	8011804 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	7a1b      	ldrb	r3, [r3, #8]
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fb f818 	bl	800c830 <netif_get_by_index>
 8011800:	4603      	mov	r3, r0
 8011802:	e003      	b.n	801180c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f003 fb63 	bl	8014ed0 <ip4_route>
 801180a:	4603      	mov	r3, r0
  }
}
 801180c:	4618      	mov	r0, r3
 801180e:	3710      	adds	r7, #16
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011814:	b590      	push	{r4, r7, lr}
 8011816:	b087      	sub	sp, #28
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	603b      	str	r3, [r7, #0]
 8011820:	4613      	mov	r3, r2
 8011822:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d105      	bne.n	8011836 <tcp_create_segment+0x22>
 801182a:	4b44      	ldr	r3, [pc, #272]	; (801193c <tcp_create_segment+0x128>)
 801182c:	22a3      	movs	r2, #163	; 0xa3
 801182e:	4944      	ldr	r1, [pc, #272]	; (8011940 <tcp_create_segment+0x12c>)
 8011830:	4844      	ldr	r0, [pc, #272]	; (8011944 <tcp_create_segment+0x130>)
 8011832:	f005 fba5 	bl	8016f80 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d105      	bne.n	8011848 <tcp_create_segment+0x34>
 801183c:	4b3f      	ldr	r3, [pc, #252]	; (801193c <tcp_create_segment+0x128>)
 801183e:	22a4      	movs	r2, #164	; 0xa4
 8011840:	4941      	ldr	r1, [pc, #260]	; (8011948 <tcp_create_segment+0x134>)
 8011842:	4840      	ldr	r0, [pc, #256]	; (8011944 <tcp_create_segment+0x130>)
 8011844:	f005 fb9c 	bl	8016f80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011848:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	b2db      	uxtb	r3, r3
 8011850:	f003 0304 	and.w	r3, r3, #4
 8011854:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011856:	2003      	movs	r0, #3
 8011858:	f7fa fcca 	bl	800c1f0 <memp_malloc>
 801185c:	6138      	str	r0, [r7, #16]
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d104      	bne.n	801186e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011864:	68b8      	ldr	r0, [r7, #8]
 8011866:	f7fb fb6f 	bl	800cf48 <pbuf_free>
    return NULL;
 801186a:	2300      	movs	r3, #0
 801186c:	e061      	b.n	8011932 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011874:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	2200      	movs	r2, #0
 801187a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	891a      	ldrh	r2, [r3, #8]
 8011886:	7dfb      	ldrb	r3, [r7, #23]
 8011888:	b29b      	uxth	r3, r3
 801188a:	429a      	cmp	r2, r3
 801188c:	d205      	bcs.n	801189a <tcp_create_segment+0x86>
 801188e:	4b2b      	ldr	r3, [pc, #172]	; (801193c <tcp_create_segment+0x128>)
 8011890:	22b0      	movs	r2, #176	; 0xb0
 8011892:	492e      	ldr	r1, [pc, #184]	; (801194c <tcp_create_segment+0x138>)
 8011894:	482b      	ldr	r0, [pc, #172]	; (8011944 <tcp_create_segment+0x130>)
 8011896:	f005 fb73 	bl	8016f80 <iprintf>
  seg->len = p->tot_len - optlen;
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	891a      	ldrh	r2, [r3, #8]
 801189e:	7dfb      	ldrb	r3, [r7, #23]
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	1ad3      	subs	r3, r2, r3
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80118aa:	2114      	movs	r1, #20
 80118ac:	68b8      	ldr	r0, [r7, #8]
 80118ae:	f7fb fab5 	bl	800ce1c <pbuf_add_header>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d004      	beq.n	80118c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80118b8:	6938      	ldr	r0, [r7, #16]
 80118ba:	f7fd f81a 	bl	800e8f2 <tcp_seg_free>
    return NULL;
 80118be:	2300      	movs	r3, #0
 80118c0:	e037      	b.n	8011932 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	685a      	ldr	r2, [r3, #4]
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	8ada      	ldrh	r2, [r3, #22]
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	68dc      	ldr	r4, [r3, #12]
 80118d4:	4610      	mov	r0, r2
 80118d6:	f7f9 fedb 	bl	800b690 <lwip_htons>
 80118da:	4603      	mov	r3, r0
 80118dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	8b1a      	ldrh	r2, [r3, #24]
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	68dc      	ldr	r4, [r3, #12]
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7f9 fed2 	bl	800b690 <lwip_htons>
 80118ec:	4603      	mov	r3, r0
 80118ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	68dc      	ldr	r4, [r3, #12]
 80118f4:	6838      	ldr	r0, [r7, #0]
 80118f6:	f7f9 fedf 	bl	800b6b8 <lwip_htonl>
 80118fa:	4603      	mov	r3, r0
 80118fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80118fe:	7dfb      	ldrb	r3, [r7, #23]
 8011900:	089b      	lsrs	r3, r3, #2
 8011902:	b2db      	uxtb	r3, r3
 8011904:	b29b      	uxth	r3, r3
 8011906:	3305      	adds	r3, #5
 8011908:	b29b      	uxth	r3, r3
 801190a:	031b      	lsls	r3, r3, #12
 801190c:	b29a      	uxth	r2, r3
 801190e:	79fb      	ldrb	r3, [r7, #7]
 8011910:	b29b      	uxth	r3, r3
 8011912:	4313      	orrs	r3, r2
 8011914:	b29a      	uxth	r2, r3
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	68dc      	ldr	r4, [r3, #12]
 801191a:	4610      	mov	r0, r2
 801191c:	f7f9 feb8 	bl	800b690 <lwip_htons>
 8011920:	4603      	mov	r3, r0
 8011922:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	2200      	movs	r2, #0
 801192a:	749a      	strb	r2, [r3, #18]
 801192c:	2200      	movs	r2, #0
 801192e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011930:	693b      	ldr	r3, [r7, #16]
}
 8011932:	4618      	mov	r0, r3
 8011934:	371c      	adds	r7, #28
 8011936:	46bd      	mov	sp, r7
 8011938:	bd90      	pop	{r4, r7, pc}
 801193a:	bf00      	nop
 801193c:	08019af4 	.word	0x08019af4
 8011940:	08019b28 	.word	0x08019b28
 8011944:	08019b48 	.word	0x08019b48
 8011948:	08019b70 	.word	0x08019b70
 801194c:	08019b94 	.word	0x08019b94

08011950 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af00      	add	r7, sp, #0
 8011956:	607b      	str	r3, [r7, #4]
 8011958:	4603      	mov	r3, r0
 801195a:	73fb      	strb	r3, [r7, #15]
 801195c:	460b      	mov	r3, r1
 801195e:	81bb      	strh	r3, [r7, #12]
 8011960:	4613      	mov	r3, r2
 8011962:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011964:	89bb      	ldrh	r3, [r7, #12]
 8011966:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d105      	bne.n	801197a <tcp_pbuf_prealloc+0x2a>
 801196e:	4b30      	ldr	r3, [pc, #192]	; (8011a30 <tcp_pbuf_prealloc+0xe0>)
 8011970:	22e8      	movs	r2, #232	; 0xe8
 8011972:	4930      	ldr	r1, [pc, #192]	; (8011a34 <tcp_pbuf_prealloc+0xe4>)
 8011974:	4830      	ldr	r0, [pc, #192]	; (8011a38 <tcp_pbuf_prealloc+0xe8>)
 8011976:	f005 fb03 	bl	8016f80 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801197a:	6a3b      	ldr	r3, [r7, #32]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d105      	bne.n	801198c <tcp_pbuf_prealloc+0x3c>
 8011980:	4b2b      	ldr	r3, [pc, #172]	; (8011a30 <tcp_pbuf_prealloc+0xe0>)
 8011982:	22e9      	movs	r2, #233	; 0xe9
 8011984:	492d      	ldr	r1, [pc, #180]	; (8011a3c <tcp_pbuf_prealloc+0xec>)
 8011986:	482c      	ldr	r0, [pc, #176]	; (8011a38 <tcp_pbuf_prealloc+0xe8>)
 8011988:	f005 fafa 	bl	8016f80 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801198c:	89ba      	ldrh	r2, [r7, #12]
 801198e:	897b      	ldrh	r3, [r7, #10]
 8011990:	429a      	cmp	r2, r3
 8011992:	d221      	bcs.n	80119d8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011994:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011998:	f003 0302 	and.w	r3, r3, #2
 801199c:	2b00      	cmp	r3, #0
 801199e:	d111      	bne.n	80119c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80119a0:	6a3b      	ldr	r3, [r7, #32]
 80119a2:	8b5b      	ldrh	r3, [r3, #26]
 80119a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d115      	bne.n	80119d8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80119ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d007      	beq.n	80119c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d103      	bne.n	80119c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80119bc:	6a3b      	ldr	r3, [r7, #32]
 80119be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d009      	beq.n	80119d8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80119c4:	89bb      	ldrh	r3, [r7, #12]
 80119c6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80119ca:	f023 0203 	bic.w	r2, r3, #3
 80119ce:	897b      	ldrh	r3, [r7, #10]
 80119d0:	4293      	cmp	r3, r2
 80119d2:	bf28      	it	cs
 80119d4:	4613      	movcs	r3, r2
 80119d6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80119d8:	8af9      	ldrh	r1, [r7, #22]
 80119da:	7bfb      	ldrb	r3, [r7, #15]
 80119dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7fa ffcd 	bl	800c980 <pbuf_alloc>
 80119e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	e019      	b.n	8011a26 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d006      	beq.n	8011a08 <tcp_pbuf_prealloc+0xb8>
 80119fa:	4b0d      	ldr	r3, [pc, #52]	; (8011a30 <tcp_pbuf_prealloc+0xe0>)
 80119fc:	f240 120b 	movw	r2, #267	; 0x10b
 8011a00:	490f      	ldr	r1, [pc, #60]	; (8011a40 <tcp_pbuf_prealloc+0xf0>)
 8011a02:	480d      	ldr	r0, [pc, #52]	; (8011a38 <tcp_pbuf_prealloc+0xe8>)
 8011a04:	f005 fabc 	bl	8016f80 <iprintf>
  *oversize = p->len - length;
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	895a      	ldrh	r2, [r3, #10]
 8011a0c:	89bb      	ldrh	r3, [r7, #12]
 8011a0e:	1ad3      	subs	r3, r2, r3
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	89ba      	ldrh	r2, [r7, #12]
 8011a1a:	811a      	strh	r2, [r3, #8]
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	891a      	ldrh	r2, [r3, #8]
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	815a      	strh	r2, [r3, #10]
  return p;
 8011a24:	693b      	ldr	r3, [r7, #16]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3718      	adds	r7, #24
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	08019af4 	.word	0x08019af4
 8011a34:	08019bac 	.word	0x08019bac
 8011a38:	08019b48 	.word	0x08019b48
 8011a3c:	08019bd0 	.word	0x08019bd0
 8011a40:	08019bf0 	.word	0x08019bf0

08011a44 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d106      	bne.n	8011a64 <tcp_write_checks+0x20>
 8011a56:	4b33      	ldr	r3, [pc, #204]	; (8011b24 <tcp_write_checks+0xe0>)
 8011a58:	f240 1233 	movw	r2, #307	; 0x133
 8011a5c:	4932      	ldr	r1, [pc, #200]	; (8011b28 <tcp_write_checks+0xe4>)
 8011a5e:	4833      	ldr	r0, [pc, #204]	; (8011b2c <tcp_write_checks+0xe8>)
 8011a60:	f005 fa8e 	bl	8016f80 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7d1b      	ldrb	r3, [r3, #20]
 8011a68:	2b04      	cmp	r3, #4
 8011a6a:	d00e      	beq.n	8011a8a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011a70:	2b07      	cmp	r3, #7
 8011a72:	d00a      	beq.n	8011a8a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011a78:	2b02      	cmp	r3, #2
 8011a7a:	d006      	beq.n	8011a8a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011a80:	2b03      	cmp	r3, #3
 8011a82:	d002      	beq.n	8011a8a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011a84:	f06f 030a 	mvn.w	r3, #10
 8011a88:	e048      	b.n	8011b1c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011a8a:	887b      	ldrh	r3, [r7, #2]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <tcp_write_checks+0x50>
    return ERR_OK;
 8011a90:	2300      	movs	r3, #0
 8011a92:	e043      	b.n	8011b1c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a9a:	887a      	ldrh	r2, [r7, #2]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d909      	bls.n	8011ab4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	8b5b      	ldrh	r3, [r3, #26]
 8011aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011aae:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab2:	e033      	b.n	8011b1c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011aba:	2b08      	cmp	r3, #8
 8011abc:	d909      	bls.n	8011ad2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	8b5b      	ldrh	r3, [r3, #26]
 8011ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011acc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ad0:	e024      	b.n	8011b1c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d00f      	beq.n	8011afc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d11a      	bne.n	8011b1a <tcp_write_checks+0xd6>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d116      	bne.n	8011b1a <tcp_write_checks+0xd6>
 8011aec:	4b0d      	ldr	r3, [pc, #52]	; (8011b24 <tcp_write_checks+0xe0>)
 8011aee:	f240 1255 	movw	r2, #341	; 0x155
 8011af2:	490f      	ldr	r1, [pc, #60]	; (8011b30 <tcp_write_checks+0xec>)
 8011af4:	480d      	ldr	r0, [pc, #52]	; (8011b2c <tcp_write_checks+0xe8>)
 8011af6:	f005 fa43 	bl	8016f80 <iprintf>
 8011afa:	e00e      	b.n	8011b1a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d103      	bne.n	8011b0c <tcp_write_checks+0xc8>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d006      	beq.n	8011b1a <tcp_write_checks+0xd6>
 8011b0c:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <tcp_write_checks+0xe0>)
 8011b0e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011b12:	4908      	ldr	r1, [pc, #32]	; (8011b34 <tcp_write_checks+0xf0>)
 8011b14:	4805      	ldr	r0, [pc, #20]	; (8011b2c <tcp_write_checks+0xe8>)
 8011b16:	f005 fa33 	bl	8016f80 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011b1a:	2300      	movs	r3, #0
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	08019af4 	.word	0x08019af4
 8011b28:	08019c04 	.word	0x08019c04
 8011b2c:	08019b48 	.word	0x08019b48
 8011b30:	08019c24 	.word	0x08019c24
 8011b34:	08019c60 	.word	0x08019c60

08011b38 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011b38:	b590      	push	{r4, r7, lr}
 8011b3a:	b09b      	sub	sp, #108	; 0x6c
 8011b3c:	af04      	add	r7, sp, #16
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	4611      	mov	r1, r2
 8011b44:	461a      	mov	r2, r3
 8011b46:	460b      	mov	r3, r1
 8011b48:	80fb      	strh	r3, [r7, #6]
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011b52:	2300      	movs	r3, #0
 8011b54:	653b      	str	r3, [r7, #80]	; 0x50
 8011b56:	2300      	movs	r3, #0
 8011b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b5e:	2300      	movs	r3, #0
 8011b60:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011b62:	2300      	movs	r3, #0
 8011b64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011b72:	2300      	movs	r3, #0
 8011b74:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011b76:	2300      	movs	r3, #0
 8011b78:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d109      	bne.n	8011b94 <tcp_write+0x5c>
 8011b80:	4ba4      	ldr	r3, [pc, #656]	; (8011e14 <tcp_write+0x2dc>)
 8011b82:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011b86:	49a4      	ldr	r1, [pc, #656]	; (8011e18 <tcp_write+0x2e0>)
 8011b88:	48a4      	ldr	r0, [pc, #656]	; (8011e1c <tcp_write+0x2e4>)
 8011b8a:	f005 f9f9 	bl	8016f80 <iprintf>
 8011b8e:	f06f 030f 	mvn.w	r3, #15
 8011b92:	e32a      	b.n	80121ea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b9a:	085b      	lsrs	r3, r3, #1
 8011b9c:	b29a      	uxth	r2, r3
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	bf28      	it	cs
 8011ba6:	4613      	movcs	r3, r2
 8011ba8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d102      	bne.n	8011bb6 <tcp_write+0x7e>
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bb4:	e000      	b.n	8011bb8 <tcp_write+0x80>
 8011bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d109      	bne.n	8011bd4 <tcp_write+0x9c>
 8011bc0:	4b94      	ldr	r3, [pc, #592]	; (8011e14 <tcp_write+0x2dc>)
 8011bc2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011bc6:	4996      	ldr	r1, [pc, #600]	; (8011e20 <tcp_write+0x2e8>)
 8011bc8:	4894      	ldr	r0, [pc, #592]	; (8011e1c <tcp_write+0x2e4>)
 8011bca:	f005 f9d9 	bl	8016f80 <iprintf>
 8011bce:	f06f 030f 	mvn.w	r3, #15
 8011bd2:	e30a      	b.n	80121ea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011bd4:	88fb      	ldrh	r3, [r7, #6]
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f7ff ff33 	bl	8011a44 <tcp_write_checks>
 8011bde:	4603      	mov	r3, r0
 8011be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011be4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d002      	beq.n	8011bf2 <tcp_write+0xba>
    return err;
 8011bec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011bf0:	e2fb      	b.n	80121ea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bf8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	f000 80f6 	beq.w	8011df8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c10:	653b      	str	r3, [r7, #80]	; 0x50
 8011c12:	e002      	b.n	8011c1a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d1f8      	bne.n	8011c14 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c24:	7a9b      	ldrb	r3, [r3, #10]
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	f003 0304 	and.w	r3, r3, #4
 8011c2e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011c30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c34:	891b      	ldrh	r3, [r3, #8]
 8011c36:	4619      	mov	r1, r3
 8011c38:	8c3b      	ldrh	r3, [r7, #32]
 8011c3a:	440b      	add	r3, r1
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	da06      	bge.n	8011c4e <tcp_write+0x116>
 8011c40:	4b74      	ldr	r3, [pc, #464]	; (8011e14 <tcp_write+0x2dc>)
 8011c42:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011c46:	4977      	ldr	r1, [pc, #476]	; (8011e24 <tcp_write+0x2ec>)
 8011c48:	4874      	ldr	r0, [pc, #464]	; (8011e1c <tcp_write+0x2e4>)
 8011c4a:	f005 f999 	bl	8016f80 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c50:	891a      	ldrh	r2, [r3, #8]
 8011c52:	8c3b      	ldrh	r3, [r7, #32]
 8011c54:	4413      	add	r3, r2
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c5a:	1ad3      	subs	r3, r2, r3
 8011c5c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c64:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011c66:	8a7b      	ldrh	r3, [r7, #18]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d026      	beq.n	8011cba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011c6c:	8a7b      	ldrh	r3, [r7, #18]
 8011c6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d206      	bcs.n	8011c82 <tcp_write+0x14a>
 8011c74:	4b67      	ldr	r3, [pc, #412]	; (8011e14 <tcp_write+0x2dc>)
 8011c76:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011c7a:	496b      	ldr	r1, [pc, #428]	; (8011e28 <tcp_write+0x2f0>)
 8011c7c:	4867      	ldr	r0, [pc, #412]	; (8011e1c <tcp_write+0x2e4>)
 8011c7e:	f005 f97f 	bl	8016f80 <iprintf>
      seg = last_unsent;
 8011c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c84:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011c86:	8a7b      	ldrh	r3, [r7, #18]
 8011c88:	88fa      	ldrh	r2, [r7, #6]
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	bf28      	it	cs
 8011c8e:	4613      	movcs	r3, r2
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c94:	4293      	cmp	r3, r2
 8011c96:	bf28      	it	cs
 8011c98:	4613      	movcs	r3, r2
 8011c9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011c9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ca0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ca2:	4413      	add	r3, r2
 8011ca4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011ca8:	8a7a      	ldrh	r2, [r7, #18]
 8011caa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011cb2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011cb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cb6:	1ad3      	subs	r3, r2, r3
 8011cb8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011cba:	8a7b      	ldrh	r3, [r7, #18]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00b      	beq.n	8011cd8 <tcp_write+0x1a0>
 8011cc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cc4:	88fb      	ldrh	r3, [r7, #6]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d006      	beq.n	8011cd8 <tcp_write+0x1a0>
 8011cca:	4b52      	ldr	r3, [pc, #328]	; (8011e14 <tcp_write+0x2dc>)
 8011ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cd0:	4956      	ldr	r1, [pc, #344]	; (8011e2c <tcp_write+0x2f4>)
 8011cd2:	4852      	ldr	r0, [pc, #328]	; (8011e1c <tcp_write+0x2e4>)
 8011cd4:	f005 f954 	bl	8016f80 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011cd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cdc:	88fb      	ldrh	r3, [r7, #6]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	f080 8167 	bcs.w	8011fb2 <tcp_write+0x47a>
 8011ce4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	f000 8163 	beq.w	8011fb2 <tcp_write+0x47a>
 8011cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cee:	891b      	ldrh	r3, [r3, #8]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	f000 815e 	beq.w	8011fb2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011cf6:	88fa      	ldrh	r2, [r7, #6]
 8011cf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cfc:	1ad2      	subs	r2, r2, r3
 8011cfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d00:	4293      	cmp	r3, r2
 8011d02:	bfa8      	it	ge
 8011d04:	4613      	movge	r3, r2
 8011d06:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d0a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011d0c:	797b      	ldrb	r3, [r7, #5]
 8011d0e:	f003 0301 	and.w	r3, r3, #1
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d027      	beq.n	8011d66 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011d16:	f107 0012 	add.w	r0, r7, #18
 8011d1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d1c:	8bf9      	ldrh	r1, [r7, #30]
 8011d1e:	2301      	movs	r3, #1
 8011d20:	9302      	str	r3, [sp, #8]
 8011d22:	797b      	ldrb	r3, [r7, #5]
 8011d24:	9301      	str	r3, [sp, #4]
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	9300      	str	r3, [sp, #0]
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	f7ff fe0f 	bl	8011950 <tcp_pbuf_prealloc>
 8011d32:	6578      	str	r0, [r7, #84]	; 0x54
 8011d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f000 8225 	beq.w	8012186 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d3e:	6858      	ldr	r0, [r3, #4]
 8011d40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d44:	68ba      	ldr	r2, [r7, #8]
 8011d46:	4413      	add	r3, r2
 8011d48:	8bfa      	ldrh	r2, [r7, #30]
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	f005 f824 	bl	8016d98 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011d50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011d52:	f7fb f987 	bl	800d064 <pbuf_clen>
 8011d56:	4603      	mov	r3, r0
 8011d58:	461a      	mov	r2, r3
 8011d5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011d5e:	4413      	add	r3, r2
 8011d60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011d64:	e041      	b.n	8011dea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8011d6c:	e002      	b.n	8011d74 <tcp_write+0x23c>
 8011d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	637b      	str	r3, [r7, #52]	; 0x34
 8011d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1f8      	bne.n	8011d6e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d7e:	7b1b      	ldrb	r3, [r3, #12]
 8011d80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d115      	bne.n	8011db4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d8e:	8952      	ldrh	r2, [r2, #10]
 8011d90:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011d92:	68ba      	ldr	r2, [r7, #8]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d10d      	bne.n	8011db4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d006      	beq.n	8011dae <tcp_write+0x276>
 8011da0:	4b1c      	ldr	r3, [pc, #112]	; (8011e14 <tcp_write+0x2dc>)
 8011da2:	f240 2231 	movw	r2, #561	; 0x231
 8011da6:	4922      	ldr	r1, [pc, #136]	; (8011e30 <tcp_write+0x2f8>)
 8011da8:	481c      	ldr	r0, [pc, #112]	; (8011e1c <tcp_write+0x2e4>)
 8011daa:	f005 f8e9 	bl	8016f80 <iprintf>
          extendlen = seglen;
 8011dae:	8bfb      	ldrh	r3, [r7, #30]
 8011db0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011db2:	e01a      	b.n	8011dea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011db4:	8bfb      	ldrh	r3, [r7, #30]
 8011db6:	2201      	movs	r2, #1
 8011db8:	4619      	mov	r1, r3
 8011dba:	2000      	movs	r0, #0
 8011dbc:	f7fa fde0 	bl	800c980 <pbuf_alloc>
 8011dc0:	6578      	str	r0, [r7, #84]	; 0x54
 8011dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f000 81e0 	beq.w	801218a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011dca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dce:	68ba      	ldr	r2, [r7, #8]
 8011dd0:	441a      	add	r2, r3
 8011dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dd4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011dd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011dd8:	f7fb f944 	bl	800d064 <pbuf_clen>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	461a      	mov	r2, r3
 8011de0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011de4:	4413      	add	r3, r2
 8011de6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011dea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011dee:	8bfb      	ldrh	r3, [r7, #30]
 8011df0:	4413      	add	r3, r2
 8011df2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011df6:	e0dc      	b.n	8011fb2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f000 80d7 	beq.w	8011fb2 <tcp_write+0x47a>
 8011e04:	4b03      	ldr	r3, [pc, #12]	; (8011e14 <tcp_write+0x2dc>)
 8011e06:	f240 224a 	movw	r2, #586	; 0x24a
 8011e0a:	490a      	ldr	r1, [pc, #40]	; (8011e34 <tcp_write+0x2fc>)
 8011e0c:	4803      	ldr	r0, [pc, #12]	; (8011e1c <tcp_write+0x2e4>)
 8011e0e:	f005 f8b7 	bl	8016f80 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011e12:	e0ce      	b.n	8011fb2 <tcp_write+0x47a>
 8011e14:	08019af4 	.word	0x08019af4
 8011e18:	08019c94 	.word	0x08019c94
 8011e1c:	08019b48 	.word	0x08019b48
 8011e20:	08019cac 	.word	0x08019cac
 8011e24:	08019ce0 	.word	0x08019ce0
 8011e28:	08019cf8 	.word	0x08019cf8
 8011e2c:	08019d18 	.word	0x08019d18
 8011e30:	08019d38 	.word	0x08019d38
 8011e34:	08019d64 	.word	0x08019d64
    struct pbuf *p;
    u16_t left = len - pos;
 8011e38:	88fa      	ldrh	r2, [r7, #6]
 8011e3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011e42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011e4e:	8b7a      	ldrh	r2, [r7, #26]
 8011e50:	8bbb      	ldrh	r3, [r7, #28]
 8011e52:	4293      	cmp	r3, r2
 8011e54:	bf28      	it	cs
 8011e56:	4613      	movcs	r3, r2
 8011e58:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011e5a:	797b      	ldrb	r3, [r7, #5]
 8011e5c:	f003 0301 	and.w	r3, r3, #1
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d036      	beq.n	8011ed2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011e64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	8b3b      	ldrh	r3, [r7, #24]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	b299      	uxth	r1, r3
 8011e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	bf0c      	ite	eq
 8011e76:	2301      	moveq	r3, #1
 8011e78:	2300      	movne	r3, #0
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	f107 0012 	add.w	r0, r7, #18
 8011e80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e82:	9302      	str	r3, [sp, #8]
 8011e84:	797b      	ldrb	r3, [r7, #5]
 8011e86:	9301      	str	r3, [sp, #4]
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	9300      	str	r3, [sp, #0]
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2036      	movs	r0, #54	; 0x36
 8011e90:	f7ff fd5e 	bl	8011950 <tcp_pbuf_prealloc>
 8011e94:	6338      	str	r0, [r7, #48]	; 0x30
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 8178 	beq.w	801218e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea0:	895b      	ldrh	r3, [r3, #10]
 8011ea2:	8b3a      	ldrh	r2, [r7, #24]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d906      	bls.n	8011eb6 <tcp_write+0x37e>
 8011ea8:	4b8c      	ldr	r3, [pc, #560]	; (80120dc <tcp_write+0x5a4>)
 8011eaa:	f240 2266 	movw	r2, #614	; 0x266
 8011eae:	498c      	ldr	r1, [pc, #560]	; (80120e0 <tcp_write+0x5a8>)
 8011eb0:	488c      	ldr	r0, [pc, #560]	; (80120e4 <tcp_write+0x5ac>)
 8011eb2:	f005 f865 	bl	8016f80 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb8:	685a      	ldr	r2, [r3, #4]
 8011eba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ebe:	18d0      	adds	r0, r2, r3
 8011ec0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ec4:	68ba      	ldr	r2, [r7, #8]
 8011ec6:	4413      	add	r3, r2
 8011ec8:	8b3a      	ldrh	r2, [r7, #24]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	f004 ff64 	bl	8016d98 <memcpy>
 8011ed0:	e02f      	b.n	8011f32 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011ed2:	8a7b      	ldrh	r3, [r7, #18]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d006      	beq.n	8011ee6 <tcp_write+0x3ae>
 8011ed8:	4b80      	ldr	r3, [pc, #512]	; (80120dc <tcp_write+0x5a4>)
 8011eda:	f240 2271 	movw	r2, #625	; 0x271
 8011ede:	4982      	ldr	r1, [pc, #520]	; (80120e8 <tcp_write+0x5b0>)
 8011ee0:	4880      	ldr	r0, [pc, #512]	; (80120e4 <tcp_write+0x5ac>)
 8011ee2:	f005 f84d 	bl	8016f80 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011ee6:	8b3b      	ldrh	r3, [r7, #24]
 8011ee8:	2201      	movs	r2, #1
 8011eea:	4619      	mov	r1, r3
 8011eec:	2036      	movs	r0, #54	; 0x36
 8011eee:	f7fa fd47 	bl	800c980 <pbuf_alloc>
 8011ef2:	6178      	str	r0, [r7, #20]
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f000 814b 	beq.w	8012192 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011efc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f00:	68ba      	ldr	r2, [r7, #8]
 8011f02:	441a      	add	r2, r3
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011f08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f12:	4619      	mov	r1, r3
 8011f14:	2036      	movs	r0, #54	; 0x36
 8011f16:	f7fa fd33 	bl	800c980 <pbuf_alloc>
 8011f1a:	6338      	str	r0, [r7, #48]	; 0x30
 8011f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d103      	bne.n	8011f2a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011f22:	6978      	ldr	r0, [r7, #20]
 8011f24:	f7fb f810 	bl	800cf48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011f28:	e136      	b.n	8012198 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011f2a:	6979      	ldr	r1, [r7, #20]
 8011f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f2e:	f7fb f8d7 	bl	800d0e0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f34:	f7fb f896 	bl	800d064 <pbuf_clen>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f40:	4413      	add	r3, r2
 8011f42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011f46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f4a:	2b09      	cmp	r3, #9
 8011f4c:	d903      	bls.n	8011f56 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f50:	f7fa fffa 	bl	800cf48 <pbuf_free>
      goto memerr;
 8011f54:	e120      	b.n	8012198 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011f5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f5e:	441a      	add	r2, r3
 8011f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f64:	9300      	str	r3, [sp, #0]
 8011f66:	4613      	mov	r3, r2
 8011f68:	2200      	movs	r2, #0
 8011f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f6c:	68f8      	ldr	r0, [r7, #12]
 8011f6e:	f7ff fc51 	bl	8011814 <tcp_create_segment>
 8011f72:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f000 810d 	beq.w	8012196 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d102      	bne.n	8011f88 <tcp_write+0x450>
      queue = seg;
 8011f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f84:	647b      	str	r3, [r7, #68]	; 0x44
 8011f86:	e00c      	b.n	8011fa2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d106      	bne.n	8011f9c <tcp_write+0x464>
 8011f8e:	4b53      	ldr	r3, [pc, #332]	; (80120dc <tcp_write+0x5a4>)
 8011f90:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011f94:	4955      	ldr	r1, [pc, #340]	; (80120ec <tcp_write+0x5b4>)
 8011f96:	4853      	ldr	r0, [pc, #332]	; (80120e4 <tcp_write+0x5ac>)
 8011f98:	f004 fff2 	bl	8016f80 <iprintf>
      prev_seg->next = seg;
 8011f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011fa0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fa4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011fa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011faa:	8b3b      	ldrh	r3, [r7, #24]
 8011fac:	4413      	add	r3, r2
 8011fae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011fb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fb6:	88fb      	ldrh	r3, [r7, #6]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	f4ff af3d 	bcc.w	8011e38 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011fbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d02c      	beq.n	801201e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fca:	e01e      	b.n	801200a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fce:	891a      	ldrh	r2, [r3, #8]
 8011fd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fd2:	4413      	add	r3, r2
 8011fd4:	b29a      	uxth	r2, r3
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d110      	bne.n	8012004 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fe8:	8952      	ldrh	r2, [r2, #10]
 8011fea:	4413      	add	r3, r2
 8011fec:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011fee:	68b9      	ldr	r1, [r7, #8]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f004 fed1 	bl	8016d98 <memcpy>
        p->len += oversize_used;
 8011ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff8:	895a      	ldrh	r2, [r3, #10]
 8011ffa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ffc:	4413      	add	r3, r2
 8011ffe:	b29a      	uxth	r2, r3
 8012000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012002:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	62fb      	str	r3, [r7, #44]	; 0x2c
 801200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200c:	2b00      	cmp	r3, #0
 801200e:	d1dd      	bne.n	8011fcc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012012:	891a      	ldrh	r2, [r3, #8]
 8012014:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012016:	4413      	add	r3, r2
 8012018:	b29a      	uxth	r2, r3
 801201a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801201c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801201e:	8a7a      	ldrh	r2, [r7, #18]
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012028:	2b00      	cmp	r3, #0
 801202a:	d018      	beq.n	801205e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801202c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801202e:	2b00      	cmp	r3, #0
 8012030:	d106      	bne.n	8012040 <tcp_write+0x508>
 8012032:	4b2a      	ldr	r3, [pc, #168]	; (80120dc <tcp_write+0x5a4>)
 8012034:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012038:	492d      	ldr	r1, [pc, #180]	; (80120f0 <tcp_write+0x5b8>)
 801203a:	482a      	ldr	r0, [pc, #168]	; (80120e4 <tcp_write+0x5ac>)
 801203c:	f004 ffa0 	bl	8016f80 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012046:	4618      	mov	r0, r3
 8012048:	f7fb f84a 	bl	800d0e0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204e:	891a      	ldrh	r2, [r3, #8]
 8012050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012052:	891b      	ldrh	r3, [r3, #8]
 8012054:	4413      	add	r3, r2
 8012056:	b29a      	uxth	r2, r3
 8012058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801205a:	811a      	strh	r2, [r3, #8]
 801205c:	e037      	b.n	80120ce <tcp_write+0x596>
  } else if (extendlen > 0) {
 801205e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012060:	2b00      	cmp	r3, #0
 8012062:	d034      	beq.n	80120ce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012066:	2b00      	cmp	r3, #0
 8012068:	d003      	beq.n	8012072 <tcp_write+0x53a>
 801206a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d106      	bne.n	8012080 <tcp_write+0x548>
 8012072:	4b1a      	ldr	r3, [pc, #104]	; (80120dc <tcp_write+0x5a4>)
 8012074:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012078:	491e      	ldr	r1, [pc, #120]	; (80120f4 <tcp_write+0x5bc>)
 801207a:	481a      	ldr	r0, [pc, #104]	; (80120e4 <tcp_write+0x5ac>)
 801207c:	f004 ff80 	bl	8016f80 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	62bb      	str	r3, [r7, #40]	; 0x28
 8012086:	e009      	b.n	801209c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801208a:	891a      	ldrh	r2, [r3, #8]
 801208c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801208e:	4413      	add	r3, r2
 8012090:	b29a      	uxth	r2, r3
 8012092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012094:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	62bb      	str	r3, [r7, #40]	; 0x28
 801209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d1f1      	bne.n	8012088 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80120a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a6:	891a      	ldrh	r2, [r3, #8]
 80120a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120aa:	4413      	add	r3, r2
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80120b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b4:	895a      	ldrh	r2, [r3, #10]
 80120b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120b8:	4413      	add	r3, r2
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120be:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80120c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120c2:	891a      	ldrh	r2, [r3, #8]
 80120c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120c6:	4413      	add	r3, r2
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120cc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80120ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d111      	bne.n	80120f8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80120da:	e010      	b.n	80120fe <tcp_write+0x5c6>
 80120dc:	08019af4 	.word	0x08019af4
 80120e0:	08019d94 	.word	0x08019d94
 80120e4:	08019b48 	.word	0x08019b48
 80120e8:	08019dd4 	.word	0x08019dd4
 80120ec:	08019de4 	.word	0x08019de4
 80120f0:	08019df8 	.word	0x08019df8
 80120f4:	08019e30 	.word	0x08019e30
  } else {
    last_unsent->next = queue;
 80120f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120fc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012102:	88fb      	ldrh	r3, [r7, #6]
 8012104:	441a      	add	r2, r3
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012110:	88fb      	ldrh	r3, [r7, #6]
 8012112:	1ad3      	subs	r3, r2, r3
 8012114:	b29a      	uxth	r2, r3
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012122:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00e      	beq.n	801214e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10a      	bne.n	801214e <tcp_write+0x616>
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801213c:	2b00      	cmp	r3, #0
 801213e:	d106      	bne.n	801214e <tcp_write+0x616>
 8012140:	4b2c      	ldr	r3, [pc, #176]	; (80121f4 <tcp_write+0x6bc>)
 8012142:	f240 3212 	movw	r2, #786	; 0x312
 8012146:	492c      	ldr	r1, [pc, #176]	; (80121f8 <tcp_write+0x6c0>)
 8012148:	482c      	ldr	r0, [pc, #176]	; (80121fc <tcp_write+0x6c4>)
 801214a:	f004 ff19 	bl	8016f80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801214e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012150:	2b00      	cmp	r3, #0
 8012152:	d016      	beq.n	8012182 <tcp_write+0x64a>
 8012154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d012      	beq.n	8012182 <tcp_write+0x64a>
 801215c:	797b      	ldrb	r3, [r7, #5]
 801215e:	f003 0302 	and.w	r3, r3, #2
 8012162:	2b00      	cmp	r3, #0
 8012164:	d10d      	bne.n	8012182 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012168:	68db      	ldr	r3, [r3, #12]
 801216a:	899b      	ldrh	r3, [r3, #12]
 801216c:	b29c      	uxth	r4, r3
 801216e:	2008      	movs	r0, #8
 8012170:	f7f9 fa8e 	bl	800b690 <lwip_htons>
 8012174:	4603      	mov	r3, r0
 8012176:	461a      	mov	r2, r3
 8012178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801217a:	68db      	ldr	r3, [r3, #12]
 801217c:	4322      	orrs	r2, r4
 801217e:	b292      	uxth	r2, r2
 8012180:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012182:	2300      	movs	r3, #0
 8012184:	e031      	b.n	80121ea <tcp_write+0x6b2>
          goto memerr;
 8012186:	bf00      	nop
 8012188:	e006      	b.n	8012198 <tcp_write+0x660>
            goto memerr;
 801218a:	bf00      	nop
 801218c:	e004      	b.n	8012198 <tcp_write+0x660>
        goto memerr;
 801218e:	bf00      	nop
 8012190:	e002      	b.n	8012198 <tcp_write+0x660>
        goto memerr;
 8012192:	bf00      	nop
 8012194:	e000      	b.n	8012198 <tcp_write+0x660>
      goto memerr;
 8012196:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	8b5b      	ldrh	r3, [r3, #26]
 801219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121a0:	b29a      	uxth	r2, r3
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80121a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d002      	beq.n	80121b2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80121ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80121ae:	f7fa fecb 	bl	800cf48 <pbuf_free>
  }
  if (queue != NULL) {
 80121b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d002      	beq.n	80121be <tcp_write+0x686>
    tcp_segs_free(queue);
 80121b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80121ba:	f7fc fb85 	bl	800e8c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d00e      	beq.n	80121e6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d10a      	bne.n	80121e6 <tcp_write+0x6ae>
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d106      	bne.n	80121e6 <tcp_write+0x6ae>
 80121d8:	4b06      	ldr	r3, [pc, #24]	; (80121f4 <tcp_write+0x6bc>)
 80121da:	f240 3227 	movw	r2, #807	; 0x327
 80121de:	4906      	ldr	r1, [pc, #24]	; (80121f8 <tcp_write+0x6c0>)
 80121e0:	4806      	ldr	r0, [pc, #24]	; (80121fc <tcp_write+0x6c4>)
 80121e2:	f004 fecd 	bl	8016f80 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80121e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	375c      	adds	r7, #92	; 0x5c
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd90      	pop	{r4, r7, pc}
 80121f2:	bf00      	nop
 80121f4:	08019af4 	.word	0x08019af4
 80121f8:	08019e68 	.word	0x08019e68
 80121fc:	08019b48 	.word	0x08019b48

08012200 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012200:	b590      	push	{r4, r7, lr}
 8012202:	b08b      	sub	sp, #44	; 0x2c
 8012204:	af02      	add	r7, sp, #8
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	460b      	mov	r3, r1
 801220a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801220c:	2300      	movs	r3, #0
 801220e:	61fb      	str	r3, [r7, #28]
 8012210:	2300      	movs	r3, #0
 8012212:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012214:	2300      	movs	r3, #0
 8012216:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d106      	bne.n	801222c <tcp_split_unsent_seg+0x2c>
 801221e:	4b95      	ldr	r3, [pc, #596]	; (8012474 <tcp_split_unsent_seg+0x274>)
 8012220:	f240 324b 	movw	r2, #843	; 0x34b
 8012224:	4994      	ldr	r1, [pc, #592]	; (8012478 <tcp_split_unsent_seg+0x278>)
 8012226:	4895      	ldr	r0, [pc, #596]	; (801247c <tcp_split_unsent_seg+0x27c>)
 8012228:	f004 feaa 	bl	8016f80 <iprintf>

  useg = pcb->unsent;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012230:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d102      	bne.n	801223e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012238:	f04f 33ff 	mov.w	r3, #4294967295
 801223c:	e116      	b.n	801246c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801223e:	887b      	ldrh	r3, [r7, #2]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d109      	bne.n	8012258 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012244:	4b8b      	ldr	r3, [pc, #556]	; (8012474 <tcp_split_unsent_seg+0x274>)
 8012246:	f240 3253 	movw	r2, #851	; 0x353
 801224a:	498d      	ldr	r1, [pc, #564]	; (8012480 <tcp_split_unsent_seg+0x280>)
 801224c:	488b      	ldr	r0, [pc, #556]	; (801247c <tcp_split_unsent_seg+0x27c>)
 801224e:	f004 fe97 	bl	8016f80 <iprintf>
    return ERR_VAL;
 8012252:	f06f 0305 	mvn.w	r3, #5
 8012256:	e109      	b.n	801246c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	891b      	ldrh	r3, [r3, #8]
 801225c:	887a      	ldrh	r2, [r7, #2]
 801225e:	429a      	cmp	r2, r3
 8012260:	d301      	bcc.n	8012266 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012262:	2300      	movs	r3, #0
 8012264:	e102      	b.n	801246c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801226a:	887a      	ldrh	r2, [r7, #2]
 801226c:	429a      	cmp	r2, r3
 801226e:	d906      	bls.n	801227e <tcp_split_unsent_seg+0x7e>
 8012270:	4b80      	ldr	r3, [pc, #512]	; (8012474 <tcp_split_unsent_seg+0x274>)
 8012272:	f240 325b 	movw	r2, #859	; 0x35b
 8012276:	4983      	ldr	r1, [pc, #524]	; (8012484 <tcp_split_unsent_seg+0x284>)
 8012278:	4880      	ldr	r0, [pc, #512]	; (801247c <tcp_split_unsent_seg+0x27c>)
 801227a:	f004 fe81 	bl	8016f80 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	891b      	ldrh	r3, [r3, #8]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d106      	bne.n	8012294 <tcp_split_unsent_seg+0x94>
 8012286:	4b7b      	ldr	r3, [pc, #492]	; (8012474 <tcp_split_unsent_seg+0x274>)
 8012288:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801228c:	497e      	ldr	r1, [pc, #504]	; (8012488 <tcp_split_unsent_seg+0x288>)
 801228e:	487b      	ldr	r0, [pc, #492]	; (801247c <tcp_split_unsent_seg+0x27c>)
 8012290:	f004 fe76 	bl	8016f80 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	7a9b      	ldrb	r3, [r3, #10]
 8012298:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801229a:	7bfb      	ldrb	r3, [r7, #15]
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	f003 0304 	and.w	r3, r3, #4
 80122a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	891a      	ldrh	r2, [r3, #8]
 80122aa:	887b      	ldrh	r3, [r7, #2]
 80122ac:	1ad3      	subs	r3, r2, r3
 80122ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80122b0:	7bbb      	ldrb	r3, [r7, #14]
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	89bb      	ldrh	r3, [r7, #12]
 80122b6:	4413      	add	r3, r2
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122be:	4619      	mov	r1, r3
 80122c0:	2036      	movs	r0, #54	; 0x36
 80122c2:	f7fa fb5d 	bl	800c980 <pbuf_alloc>
 80122c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f000 80b7 	beq.w	801243e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	891a      	ldrh	r2, [r3, #8]
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	891b      	ldrh	r3, [r3, #8]
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	b29a      	uxth	r2, r3
 80122de:	887b      	ldrh	r3, [r7, #2]
 80122e0:	4413      	add	r3, r2
 80122e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	6858      	ldr	r0, [r3, #4]
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	685a      	ldr	r2, [r3, #4]
 80122ec:	7bbb      	ldrb	r3, [r7, #14]
 80122ee:	18d1      	adds	r1, r2, r3
 80122f0:	897b      	ldrh	r3, [r7, #10]
 80122f2:	89ba      	ldrh	r2, [r7, #12]
 80122f4:	f7fb f81c 	bl	800d330 <pbuf_copy_partial>
 80122f8:	4603      	mov	r3, r0
 80122fa:	461a      	mov	r2, r3
 80122fc:	89bb      	ldrh	r3, [r7, #12]
 80122fe:	4293      	cmp	r3, r2
 8012300:	f040 809f 	bne.w	8012442 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	68db      	ldr	r3, [r3, #12]
 8012308:	899b      	ldrh	r3, [r3, #12]
 801230a:	b29b      	uxth	r3, r3
 801230c:	4618      	mov	r0, r3
 801230e:	f7f9 f9bf 	bl	800b690 <lwip_htons>
 8012312:	4603      	mov	r3, r0
 8012314:	b2db      	uxtb	r3, r3
 8012316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801231a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801231c:	2300      	movs	r3, #0
 801231e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012320:	7efb      	ldrb	r3, [r7, #27]
 8012322:	f003 0308 	and.w	r3, r3, #8
 8012326:	2b00      	cmp	r3, #0
 8012328:	d007      	beq.n	801233a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801232a:	7efb      	ldrb	r3, [r7, #27]
 801232c:	f023 0308 	bic.w	r3, r3, #8
 8012330:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012332:	7ebb      	ldrb	r3, [r7, #26]
 8012334:	f043 0308 	orr.w	r3, r3, #8
 8012338:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801233a:	7efb      	ldrb	r3, [r7, #27]
 801233c:	f003 0301 	and.w	r3, r3, #1
 8012340:	2b00      	cmp	r3, #0
 8012342:	d007      	beq.n	8012354 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012344:	7efb      	ldrb	r3, [r7, #27]
 8012346:	f023 0301 	bic.w	r3, r3, #1
 801234a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801234c:	7ebb      	ldrb	r3, [r7, #26]
 801234e:	f043 0301 	orr.w	r3, r3, #1
 8012352:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	4618      	mov	r0, r3
 801235c:	f7f9 f9ac 	bl	800b6b8 <lwip_htonl>
 8012360:	4602      	mov	r2, r0
 8012362:	887b      	ldrh	r3, [r7, #2]
 8012364:	18d1      	adds	r1, r2, r3
 8012366:	7eba      	ldrb	r2, [r7, #26]
 8012368:	7bfb      	ldrb	r3, [r7, #15]
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	460b      	mov	r3, r1
 801236e:	6939      	ldr	r1, [r7, #16]
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7ff fa4f 	bl	8011814 <tcp_create_segment>
 8012376:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d063      	beq.n	8012446 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	4618      	mov	r0, r3
 8012384:	f7fa fe6e 	bl	800d064 <pbuf_clen>
 8012388:	4603      	mov	r3, r0
 801238a:	461a      	mov	r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012392:	1a9b      	subs	r3, r3, r2
 8012394:	b29a      	uxth	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	6858      	ldr	r0, [r3, #4]
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	891a      	ldrh	r2, [r3, #8]
 80123a6:	89bb      	ldrh	r3, [r7, #12]
 80123a8:	1ad3      	subs	r3, r2, r3
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	4619      	mov	r1, r3
 80123ae:	f7fa fc45 	bl	800cc3c <pbuf_realloc>
  useg->len -= remainder;
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	891a      	ldrh	r2, [r3, #8]
 80123b6:	89bb      	ldrh	r3, [r7, #12]
 80123b8:	1ad3      	subs	r3, r2, r3
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	899b      	ldrh	r3, [r3, #12]
 80123c6:	b29c      	uxth	r4, r3
 80123c8:	7efb      	ldrb	r3, [r7, #27]
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7f9 f95f 	bl	800b690 <lwip_htons>
 80123d2:	4603      	mov	r3, r0
 80123d4:	461a      	mov	r2, r3
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	68db      	ldr	r3, [r3, #12]
 80123da:	4322      	orrs	r2, r4
 80123dc:	b292      	uxth	r2, r2
 80123de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7fa fe3d 	bl	800d064 <pbuf_clen>
 80123ea:	4603      	mov	r3, r0
 80123ec:	461a      	mov	r2, r3
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123f4:	4413      	add	r3, r2
 80123f6:	b29a      	uxth	r2, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	4618      	mov	r0, r3
 8012404:	f7fa fe2e 	bl	800d064 <pbuf_clen>
 8012408:	4603      	mov	r3, r0
 801240a:	461a      	mov	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012412:	4413      	add	r3, r2
 8012414:	b29a      	uxth	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	69fa      	ldr	r2, [r7, #28]
 8012428:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d103      	bne.n	801243a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2200      	movs	r2, #0
 8012436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801243a:	2300      	movs	r3, #0
 801243c:	e016      	b.n	801246c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801243e:	bf00      	nop
 8012440:	e002      	b.n	8012448 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012442:	bf00      	nop
 8012444:	e000      	b.n	8012448 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012446:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d006      	beq.n	801245c <tcp_split_unsent_seg+0x25c>
 801244e:	4b09      	ldr	r3, [pc, #36]	; (8012474 <tcp_split_unsent_seg+0x274>)
 8012450:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012454:	490d      	ldr	r1, [pc, #52]	; (801248c <tcp_split_unsent_seg+0x28c>)
 8012456:	4809      	ldr	r0, [pc, #36]	; (801247c <tcp_split_unsent_seg+0x27c>)
 8012458:	f004 fd92 	bl	8016f80 <iprintf>
  if (p != NULL) {
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d002      	beq.n	8012468 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012462:	6938      	ldr	r0, [r7, #16]
 8012464:	f7fa fd70 	bl	800cf48 <pbuf_free>
  }

  return ERR_MEM;
 8012468:	f04f 33ff 	mov.w	r3, #4294967295
}
 801246c:	4618      	mov	r0, r3
 801246e:	3724      	adds	r7, #36	; 0x24
 8012470:	46bd      	mov	sp, r7
 8012472:	bd90      	pop	{r4, r7, pc}
 8012474:	08019af4 	.word	0x08019af4
 8012478:	08019e88 	.word	0x08019e88
 801247c:	08019b48 	.word	0x08019b48
 8012480:	08019eac 	.word	0x08019eac
 8012484:	08019ed0 	.word	0x08019ed0
 8012488:	08019ee0 	.word	0x08019ee0
 801248c:	08019ef0 	.word	0x08019ef0

08012490 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012490:	b590      	push	{r4, r7, lr}
 8012492:	b085      	sub	sp, #20
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d106      	bne.n	80124ac <tcp_send_fin+0x1c>
 801249e:	4b21      	ldr	r3, [pc, #132]	; (8012524 <tcp_send_fin+0x94>)
 80124a0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80124a4:	4920      	ldr	r1, [pc, #128]	; (8012528 <tcp_send_fin+0x98>)
 80124a6:	4821      	ldr	r0, [pc, #132]	; (801252c <tcp_send_fin+0x9c>)
 80124a8:	f004 fd6a 	bl	8016f80 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d02e      	beq.n	8012512 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b8:	60fb      	str	r3, [r7, #12]
 80124ba:	e002      	b.n	80124c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1f8      	bne.n	80124bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	68db      	ldr	r3, [r3, #12]
 80124ce:	899b      	ldrh	r3, [r3, #12]
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7f9 f8dc 	bl	800b690 <lwip_htons>
 80124d8:	4603      	mov	r3, r0
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	f003 0307 	and.w	r3, r3, #7
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d116      	bne.n	8012512 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	899b      	ldrh	r3, [r3, #12]
 80124ea:	b29c      	uxth	r4, r3
 80124ec:	2001      	movs	r0, #1
 80124ee:	f7f9 f8cf 	bl	800b690 <lwip_htons>
 80124f2:	4603      	mov	r3, r0
 80124f4:	461a      	mov	r2, r3
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	4322      	orrs	r2, r4
 80124fc:	b292      	uxth	r2, r2
 80124fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	8b5b      	ldrh	r3, [r3, #26]
 8012504:	f043 0320 	orr.w	r3, r3, #32
 8012508:	b29a      	uxth	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801250e:	2300      	movs	r3, #0
 8012510:	e004      	b.n	801251c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012512:	2101      	movs	r1, #1
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f000 f80b 	bl	8012530 <tcp_enqueue_flags>
 801251a:	4603      	mov	r3, r0
}
 801251c:	4618      	mov	r0, r3
 801251e:	3714      	adds	r7, #20
 8012520:	46bd      	mov	sp, r7
 8012522:	bd90      	pop	{r4, r7, pc}
 8012524:	08019af4 	.word	0x08019af4
 8012528:	08019efc 	.word	0x08019efc
 801252c:	08019b48 	.word	0x08019b48

08012530 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b08a      	sub	sp, #40	; 0x28
 8012534:	af02      	add	r7, sp, #8
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	460b      	mov	r3, r1
 801253a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801253c:	2300      	movs	r3, #0
 801253e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012540:	2300      	movs	r3, #0
 8012542:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012544:	78fb      	ldrb	r3, [r7, #3]
 8012546:	f003 0303 	and.w	r3, r3, #3
 801254a:	2b00      	cmp	r3, #0
 801254c:	d106      	bne.n	801255c <tcp_enqueue_flags+0x2c>
 801254e:	4b67      	ldr	r3, [pc, #412]	; (80126ec <tcp_enqueue_flags+0x1bc>)
 8012550:	f240 4211 	movw	r2, #1041	; 0x411
 8012554:	4966      	ldr	r1, [pc, #408]	; (80126f0 <tcp_enqueue_flags+0x1c0>)
 8012556:	4867      	ldr	r0, [pc, #412]	; (80126f4 <tcp_enqueue_flags+0x1c4>)
 8012558:	f004 fd12 	bl	8016f80 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d106      	bne.n	8012570 <tcp_enqueue_flags+0x40>
 8012562:	4b62      	ldr	r3, [pc, #392]	; (80126ec <tcp_enqueue_flags+0x1bc>)
 8012564:	f240 4213 	movw	r2, #1043	; 0x413
 8012568:	4963      	ldr	r1, [pc, #396]	; (80126f8 <tcp_enqueue_flags+0x1c8>)
 801256a:	4862      	ldr	r0, [pc, #392]	; (80126f4 <tcp_enqueue_flags+0x1c4>)
 801256c:	f004 fd08 	bl	8016f80 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	f003 0302 	and.w	r3, r3, #2
 8012576:	2b00      	cmp	r3, #0
 8012578:	d001      	beq.n	801257e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801257a:	2301      	movs	r3, #1
 801257c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801257e:	7ffb      	ldrb	r3, [r7, #31]
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	b2db      	uxtb	r3, r3
 8012584:	f003 0304 	and.w	r3, r3, #4
 8012588:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801258a:	7dfb      	ldrb	r3, [r7, #23]
 801258c:	b29b      	uxth	r3, r3
 801258e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012592:	4619      	mov	r1, r3
 8012594:	2036      	movs	r0, #54	; 0x36
 8012596:	f7fa f9f3 	bl	800c980 <pbuf_alloc>
 801259a:	6138      	str	r0, [r7, #16]
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d109      	bne.n	80125b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	8b5b      	ldrh	r3, [r3, #26]
 80125a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80125b0:	f04f 33ff 	mov.w	r3, #4294967295
 80125b4:	e095      	b.n	80126e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	895a      	ldrh	r2, [r3, #10]
 80125ba:	7dfb      	ldrb	r3, [r7, #23]
 80125bc:	b29b      	uxth	r3, r3
 80125be:	429a      	cmp	r2, r3
 80125c0:	d206      	bcs.n	80125d0 <tcp_enqueue_flags+0xa0>
 80125c2:	4b4a      	ldr	r3, [pc, #296]	; (80126ec <tcp_enqueue_flags+0x1bc>)
 80125c4:	f240 4239 	movw	r2, #1081	; 0x439
 80125c8:	494c      	ldr	r1, [pc, #304]	; (80126fc <tcp_enqueue_flags+0x1cc>)
 80125ca:	484a      	ldr	r0, [pc, #296]	; (80126f4 <tcp_enqueue_flags+0x1c4>)
 80125cc:	f004 fcd8 	bl	8016f80 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80125d4:	78fa      	ldrb	r2, [r7, #3]
 80125d6:	7ffb      	ldrb	r3, [r7, #31]
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	460b      	mov	r3, r1
 80125dc:	6939      	ldr	r1, [r7, #16]
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f7ff f918 	bl	8011814 <tcp_create_segment>
 80125e4:	60f8      	str	r0, [r7, #12]
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d109      	bne.n	8012600 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	8b5b      	ldrh	r3, [r3, #26]
 80125f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125f4:	b29a      	uxth	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80125fa:	f04f 33ff 	mov.w	r3, #4294967295
 80125fe:	e070      	b.n	80126e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	f003 0303 	and.w	r3, r3, #3
 8012608:	2b00      	cmp	r3, #0
 801260a:	d006      	beq.n	801261a <tcp_enqueue_flags+0xea>
 801260c:	4b37      	ldr	r3, [pc, #220]	; (80126ec <tcp_enqueue_flags+0x1bc>)
 801260e:	f240 4242 	movw	r2, #1090	; 0x442
 8012612:	493b      	ldr	r1, [pc, #236]	; (8012700 <tcp_enqueue_flags+0x1d0>)
 8012614:	4837      	ldr	r0, [pc, #220]	; (80126f4 <tcp_enqueue_flags+0x1c4>)
 8012616:	f004 fcb3 	bl	8016f80 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	891b      	ldrh	r3, [r3, #8]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d006      	beq.n	8012630 <tcp_enqueue_flags+0x100>
 8012622:	4b32      	ldr	r3, [pc, #200]	; (80126ec <tcp_enqueue_flags+0x1bc>)
 8012624:	f240 4243 	movw	r2, #1091	; 0x443
 8012628:	4936      	ldr	r1, [pc, #216]	; (8012704 <tcp_enqueue_flags+0x1d4>)
 801262a:	4832      	ldr	r0, [pc, #200]	; (80126f4 <tcp_enqueue_flags+0x1c4>)
 801262c:	f004 fca8 	bl	8016f80 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012634:	2b00      	cmp	r3, #0
 8012636:	d103      	bne.n	8012640 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	68fa      	ldr	r2, [r7, #12]
 801263c:	66da      	str	r2, [r3, #108]	; 0x6c
 801263e:	e00d      	b.n	801265c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012644:	61bb      	str	r3, [r7, #24]
 8012646:	e002      	b.n	801264e <tcp_enqueue_flags+0x11e>
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	61bb      	str	r3, [r7, #24]
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1f8      	bne.n	8012648 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2200      	movs	r2, #0
 8012660:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012664:	78fb      	ldrb	r3, [r7, #3]
 8012666:	f003 0302 	and.w	r3, r3, #2
 801266a:	2b00      	cmp	r3, #0
 801266c:	d104      	bne.n	8012678 <tcp_enqueue_flags+0x148>
 801266e:	78fb      	ldrb	r3, [r7, #3]
 8012670:	f003 0301 	and.w	r3, r3, #1
 8012674:	2b00      	cmp	r3, #0
 8012676:	d004      	beq.n	8012682 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801267c:	1c5a      	adds	r2, r3, #1
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012682:	78fb      	ldrb	r3, [r7, #3]
 8012684:	f003 0301 	and.w	r3, r3, #1
 8012688:	2b00      	cmp	r3, #0
 801268a:	d006      	beq.n	801269a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8b5b      	ldrh	r3, [r3, #26]
 8012690:	f043 0320 	orr.w	r3, r3, #32
 8012694:	b29a      	uxth	r2, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	4618      	mov	r0, r3
 80126a0:	f7fa fce0 	bl	800d064 <pbuf_clen>
 80126a4:	4603      	mov	r3, r0
 80126a6:	461a      	mov	r2, r3
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126ae:	4413      	add	r3, r2
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d00e      	beq.n	80126e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d10a      	bne.n	80126e0 <tcp_enqueue_flags+0x1b0>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d106      	bne.n	80126e0 <tcp_enqueue_flags+0x1b0>
 80126d2:	4b06      	ldr	r3, [pc, #24]	; (80126ec <tcp_enqueue_flags+0x1bc>)
 80126d4:	f240 4265 	movw	r2, #1125	; 0x465
 80126d8:	490b      	ldr	r1, [pc, #44]	; (8012708 <tcp_enqueue_flags+0x1d8>)
 80126da:	4806      	ldr	r0, [pc, #24]	; (80126f4 <tcp_enqueue_flags+0x1c4>)
 80126dc:	f004 fc50 	bl	8016f80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80126e0:	2300      	movs	r3, #0
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3720      	adds	r7, #32
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	08019af4 	.word	0x08019af4
 80126f0:	08019f18 	.word	0x08019f18
 80126f4:	08019b48 	.word	0x08019b48
 80126f8:	08019f70 	.word	0x08019f70
 80126fc:	08019f90 	.word	0x08019f90
 8012700:	08019fcc 	.word	0x08019fcc
 8012704:	08019fe4 	.word	0x08019fe4
 8012708:	0801a010 	.word	0x0801a010

0801270c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801270c:	b5b0      	push	{r4, r5, r7, lr}
 801270e:	b08a      	sub	sp, #40	; 0x28
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d106      	bne.n	8012728 <tcp_output+0x1c>
 801271a:	4b8a      	ldr	r3, [pc, #552]	; (8012944 <tcp_output+0x238>)
 801271c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012720:	4989      	ldr	r1, [pc, #548]	; (8012948 <tcp_output+0x23c>)
 8012722:	488a      	ldr	r0, [pc, #552]	; (801294c <tcp_output+0x240>)
 8012724:	f004 fc2c 	bl	8016f80 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	7d1b      	ldrb	r3, [r3, #20]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d106      	bne.n	801273e <tcp_output+0x32>
 8012730:	4b84      	ldr	r3, [pc, #528]	; (8012944 <tcp_output+0x238>)
 8012732:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012736:	4986      	ldr	r1, [pc, #536]	; (8012950 <tcp_output+0x244>)
 8012738:	4884      	ldr	r0, [pc, #528]	; (801294c <tcp_output+0x240>)
 801273a:	f004 fc21 	bl	8016f80 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801273e:	4b85      	ldr	r3, [pc, #532]	; (8012954 <tcp_output+0x248>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	429a      	cmp	r2, r3
 8012746:	d101      	bne.n	801274c <tcp_output+0x40>
    return ERR_OK;
 8012748:	2300      	movs	r3, #0
 801274a:	e1ce      	b.n	8012aea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012758:	4293      	cmp	r3, r2
 801275a:	bf28      	it	cs
 801275c:	4613      	movcs	r3, r2
 801275e:	b29b      	uxth	r3, r3
 8012760:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012766:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276a:	2b00      	cmp	r3, #0
 801276c:	d10b      	bne.n	8012786 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	8b5b      	ldrh	r3, [r3, #26]
 8012772:	f003 0302 	and.w	r3, r3, #2
 8012776:	2b00      	cmp	r3, #0
 8012778:	f000 81aa 	beq.w	8012ad0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 fdcb 	bl	8013318 <tcp_send_empty_ack>
 8012782:	4603      	mov	r3, r0
 8012784:	e1b1      	b.n	8012aea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012786:	6879      	ldr	r1, [r7, #4]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	3304      	adds	r3, #4
 801278c:	461a      	mov	r2, r3
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff f824 	bl	80117dc <tcp_route>
 8012794:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d102      	bne.n	80127a2 <tcp_output+0x96>
    return ERR_RTE;
 801279c:	f06f 0303 	mvn.w	r3, #3
 80127a0:	e1a3      	b.n	8012aea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d003      	beq.n	80127b0 <tcp_output+0xa4>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d111      	bne.n	80127d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d002      	beq.n	80127bc <tcp_output+0xb0>
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	3304      	adds	r3, #4
 80127ba:	e000      	b.n	80127be <tcp_output+0xb2>
 80127bc:	2300      	movs	r3, #0
 80127be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d102      	bne.n	80127cc <tcp_output+0xc0>
      return ERR_RTE;
 80127c6:	f06f 0303 	mvn.w	r3, #3
 80127ca:	e18e      	b.n	8012aea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80127d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	4618      	mov	r0, r3
 80127dc:	f7f8 ff6c 	bl	800b6b8 <lwip_htonl>
 80127e0:	4602      	mov	r2, r0
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127e6:	1ad3      	subs	r3, r2, r3
 80127e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127ea:	8912      	ldrh	r2, [r2, #8]
 80127ec:	4413      	add	r3, r2
 80127ee:	69ba      	ldr	r2, [r7, #24]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d227      	bcs.n	8012844 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127fa:	461a      	mov	r2, r3
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	4293      	cmp	r3, r2
 8012800:	d114      	bne.n	801282c <tcp_output+0x120>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012806:	2b00      	cmp	r3, #0
 8012808:	d110      	bne.n	801282c <tcp_output+0x120>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012810:	2b00      	cmp	r3, #0
 8012812:	d10b      	bne.n	801282c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2200      	movs	r2, #0
 8012818:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2201      	movs	r2, #1
 8012820:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2200      	movs	r2, #0
 8012828:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	8b5b      	ldrh	r3, [r3, #26]
 8012830:	f003 0302 	and.w	r3, r3, #2
 8012834:	2b00      	cmp	r3, #0
 8012836:	f000 814d 	beq.w	8012ad4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f000 fd6c 	bl	8013318 <tcp_send_empty_ack>
 8012840:	4603      	mov	r3, r0
 8012842:	e152      	b.n	8012aea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012850:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012852:	6a3b      	ldr	r3, [r7, #32]
 8012854:	2b00      	cmp	r3, #0
 8012856:	f000 811c 	beq.w	8012a92 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801285a:	e002      	b.n	8012862 <tcp_output+0x156>
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	623b      	str	r3, [r7, #32]
 8012862:	6a3b      	ldr	r3, [r7, #32]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1f8      	bne.n	801285c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801286a:	e112      	b.n	8012a92 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286e:	68db      	ldr	r3, [r3, #12]
 8012870:	899b      	ldrh	r3, [r3, #12]
 8012872:	b29b      	uxth	r3, r3
 8012874:	4618      	mov	r0, r3
 8012876:	f7f8 ff0b 	bl	800b690 <lwip_htons>
 801287a:	4603      	mov	r3, r0
 801287c:	b2db      	uxtb	r3, r3
 801287e:	f003 0304 	and.w	r3, r3, #4
 8012882:	2b00      	cmp	r3, #0
 8012884:	d006      	beq.n	8012894 <tcp_output+0x188>
 8012886:	4b2f      	ldr	r3, [pc, #188]	; (8012944 <tcp_output+0x238>)
 8012888:	f240 5236 	movw	r2, #1334	; 0x536
 801288c:	4932      	ldr	r1, [pc, #200]	; (8012958 <tcp_output+0x24c>)
 801288e:	482f      	ldr	r0, [pc, #188]	; (801294c <tcp_output+0x240>)
 8012890:	f004 fb76 	bl	8016f80 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012898:	2b00      	cmp	r3, #0
 801289a:	d01f      	beq.n	80128dc <tcp_output+0x1d0>
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	8b5b      	ldrh	r3, [r3, #26]
 80128a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d119      	bne.n	80128dc <tcp_output+0x1d0>
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00b      	beq.n	80128c8 <tcp_output+0x1bc>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d110      	bne.n	80128dc <tcp_output+0x1d0>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128be:	891a      	ldrh	r2, [r3, #8]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d209      	bcs.n	80128dc <tcp_output+0x1d0>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d004      	beq.n	80128dc <tcp_output+0x1d0>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128d8:	2b08      	cmp	r3, #8
 80128da:	d901      	bls.n	80128e0 <tcp_output+0x1d4>
 80128dc:	2301      	movs	r3, #1
 80128de:	e000      	b.n	80128e2 <tcp_output+0x1d6>
 80128e0:	2300      	movs	r3, #0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d106      	bne.n	80128f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	8b5b      	ldrh	r3, [r3, #26]
 80128ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f000 80e4 	beq.w	8012abc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	7d1b      	ldrb	r3, [r3, #20]
 80128f8:	2b02      	cmp	r3, #2
 80128fa:	d00d      	beq.n	8012918 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80128fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fe:	68db      	ldr	r3, [r3, #12]
 8012900:	899b      	ldrh	r3, [r3, #12]
 8012902:	b29c      	uxth	r4, r3
 8012904:	2010      	movs	r0, #16
 8012906:	f7f8 fec3 	bl	800b690 <lwip_htons>
 801290a:	4603      	mov	r3, r0
 801290c:	461a      	mov	r2, r3
 801290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012910:	68db      	ldr	r3, [r3, #12]
 8012912:	4322      	orrs	r2, r4
 8012914:	b292      	uxth	r2, r2
 8012916:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012918:	697a      	ldr	r2, [r7, #20]
 801291a:	6879      	ldr	r1, [r7, #4]
 801291c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801291e:	f000 f909 	bl	8012b34 <tcp_output_segment>
 8012922:	4603      	mov	r3, r0
 8012924:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d016      	beq.n	801295c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	8b5b      	ldrh	r3, [r3, #26]
 8012932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012936:	b29a      	uxth	r2, r3
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	835a      	strh	r2, [r3, #26]
      return err;
 801293c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012940:	e0d3      	b.n	8012aea <tcp_output+0x3de>
 8012942:	bf00      	nop
 8012944:	08019af4 	.word	0x08019af4
 8012948:	0801a038 	.word	0x0801a038
 801294c:	08019b48 	.word	0x08019b48
 8012950:	0801a050 	.word	0x0801a050
 8012954:	2000be84 	.word	0x2000be84
 8012958:	0801a078 	.word	0x0801a078
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	7d1b      	ldrb	r3, [r3, #20]
 8012968:	2b02      	cmp	r3, #2
 801296a:	d006      	beq.n	801297a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	8b5b      	ldrh	r3, [r3, #26]
 8012970:	f023 0303 	bic.w	r3, r3, #3
 8012974:	b29a      	uxth	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297c:	68db      	ldr	r3, [r3, #12]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	4618      	mov	r0, r3
 8012982:	f7f8 fe99 	bl	800b6b8 <lwip_htonl>
 8012986:	4604      	mov	r4, r0
 8012988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298a:	891b      	ldrh	r3, [r3, #8]
 801298c:	461d      	mov	r5, r3
 801298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	899b      	ldrh	r3, [r3, #12]
 8012994:	b29b      	uxth	r3, r3
 8012996:	4618      	mov	r0, r3
 8012998:	f7f8 fe7a 	bl	800b690 <lwip_htons>
 801299c:	4603      	mov	r3, r0
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	f003 0303 	and.w	r3, r3, #3
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d001      	beq.n	80129ac <tcp_output+0x2a0>
 80129a8:	2301      	movs	r3, #1
 80129aa:	e000      	b.n	80129ae <tcp_output+0x2a2>
 80129ac:	2300      	movs	r3, #0
 80129ae:	442b      	add	r3, r5
 80129b0:	4423      	add	r3, r4
 80129b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	1ad3      	subs	r3, r2, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	da02      	bge.n	80129c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	68ba      	ldr	r2, [r7, #8]
 80129c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80129c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c8:	891b      	ldrh	r3, [r3, #8]
 80129ca:	461c      	mov	r4, r3
 80129cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	899b      	ldrh	r3, [r3, #12]
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7f8 fe5b 	bl	800b690 <lwip_htons>
 80129da:	4603      	mov	r3, r0
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	f003 0303 	and.w	r3, r3, #3
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d001      	beq.n	80129ea <tcp_output+0x2de>
 80129e6:	2301      	movs	r3, #1
 80129e8:	e000      	b.n	80129ec <tcp_output+0x2e0>
 80129ea:	2300      	movs	r3, #0
 80129ec:	4423      	add	r3, r4
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d049      	beq.n	8012a86 <tcp_output+0x37a>
      seg->next = NULL;
 80129f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f4:	2200      	movs	r2, #0
 80129f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d105      	bne.n	8012a0c <tcp_output+0x300>
        pcb->unacked = seg;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a04:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	623b      	str	r3, [r7, #32]
 8012a0a:	e03f      	b.n	8012a8c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7f8 fe50 	bl	800b6b8 <lwip_htonl>
 8012a18:	4604      	mov	r4, r0
 8012a1a:	6a3b      	ldr	r3, [r7, #32]
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7f8 fe49 	bl	800b6b8 <lwip_htonl>
 8012a26:	4603      	mov	r3, r0
 8012a28:	1ae3      	subs	r3, r4, r3
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	da24      	bge.n	8012a78 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	3370      	adds	r3, #112	; 0x70
 8012a32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a34:	e002      	b.n	8012a3c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012a36:	69fb      	ldr	r3, [r7, #28]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d011      	beq.n	8012a68 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7f8 fe33 	bl	800b6b8 <lwip_htonl>
 8012a52:	4604      	mov	r4, r0
 8012a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f7f8 fe2c 	bl	800b6b8 <lwip_htonl>
 8012a60:	4603      	mov	r3, r0
 8012a62:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	dbe6      	blt.n	8012a36 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a74:	601a      	str	r2, [r3, #0]
 8012a76:	e009      	b.n	8012a8c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012a78:	6a3b      	ldr	r3, [r7, #32]
 8012a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a7c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012a7e:	6a3b      	ldr	r3, [r7, #32]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	623b      	str	r3, [r7, #32]
 8012a84:	e002      	b.n	8012a8c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012a86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a88:	f7fb ff33 	bl	800e8f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a90:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d012      	beq.n	8012abe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7f8 fe0a 	bl	800b6b8 <lwip_htonl>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aae:	8912      	ldrh	r2, [r2, #8]
 8012ab0:	4413      	add	r3, r2
  while (seg != NULL &&
 8012ab2:	69ba      	ldr	r2, [r7, #24]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	f4bf aed9 	bcs.w	801286c <tcp_output+0x160>
 8012aba:	e000      	b.n	8012abe <tcp_output+0x3b2>
      break;
 8012abc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d108      	bne.n	8012ad8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012ace:	e004      	b.n	8012ada <tcp_output+0x3ce>
    goto output_done;
 8012ad0:	bf00      	nop
 8012ad2:	e002      	b.n	8012ada <tcp_output+0x3ce>
    goto output_done;
 8012ad4:	bf00      	nop
 8012ad6:	e000      	b.n	8012ada <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012ad8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	8b5b      	ldrh	r3, [r3, #26]
 8012ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012ae8:	2300      	movs	r3, #0
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3728      	adds	r7, #40	; 0x28
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bdb0      	pop	{r4, r5, r7, pc}
 8012af2:	bf00      	nop

08012af4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d106      	bne.n	8012b10 <tcp_output_segment_busy+0x1c>
 8012b02:	4b09      	ldr	r3, [pc, #36]	; (8012b28 <tcp_output_segment_busy+0x34>)
 8012b04:	f240 529a 	movw	r2, #1434	; 0x59a
 8012b08:	4908      	ldr	r1, [pc, #32]	; (8012b2c <tcp_output_segment_busy+0x38>)
 8012b0a:	4809      	ldr	r0, [pc, #36]	; (8012b30 <tcp_output_segment_busy+0x3c>)
 8012b0c:	f004 fa38 	bl	8016f80 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	685b      	ldr	r3, [r3, #4]
 8012b14:	7b9b      	ldrb	r3, [r3, #14]
 8012b16:	2b01      	cmp	r3, #1
 8012b18:	d001      	beq.n	8012b1e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e000      	b.n	8012b20 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012b1e:	2300      	movs	r3, #0
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}
 8012b28:	08019af4 	.word	0x08019af4
 8012b2c:	0801a090 	.word	0x0801a090
 8012b30:	08019b48 	.word	0x08019b48

08012b34 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012b34:	b5b0      	push	{r4, r5, r7, lr}
 8012b36:	b08c      	sub	sp, #48	; 0x30
 8012b38:	af04      	add	r7, sp, #16
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d106      	bne.n	8012b54 <tcp_output_segment+0x20>
 8012b46:	4b63      	ldr	r3, [pc, #396]	; (8012cd4 <tcp_output_segment+0x1a0>)
 8012b48:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012b4c:	4962      	ldr	r1, [pc, #392]	; (8012cd8 <tcp_output_segment+0x1a4>)
 8012b4e:	4863      	ldr	r0, [pc, #396]	; (8012cdc <tcp_output_segment+0x1a8>)
 8012b50:	f004 fa16 	bl	8016f80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d106      	bne.n	8012b68 <tcp_output_segment+0x34>
 8012b5a:	4b5e      	ldr	r3, [pc, #376]	; (8012cd4 <tcp_output_segment+0x1a0>)
 8012b5c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012b60:	495f      	ldr	r1, [pc, #380]	; (8012ce0 <tcp_output_segment+0x1ac>)
 8012b62:	485e      	ldr	r0, [pc, #376]	; (8012cdc <tcp_output_segment+0x1a8>)
 8012b64:	f004 fa0c 	bl	8016f80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d106      	bne.n	8012b7c <tcp_output_segment+0x48>
 8012b6e:	4b59      	ldr	r3, [pc, #356]	; (8012cd4 <tcp_output_segment+0x1a0>)
 8012b70:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012b74:	495b      	ldr	r1, [pc, #364]	; (8012ce4 <tcp_output_segment+0x1b0>)
 8012b76:	4859      	ldr	r0, [pc, #356]	; (8012cdc <tcp_output_segment+0x1a8>)
 8012b78:	f004 fa02 	bl	8016f80 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f7ff ffb9 	bl	8012af4 <tcp_output_segment_busy>
 8012b82:	4603      	mov	r3, r0
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d001      	beq.n	8012b8c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	e09f      	b.n	8012ccc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	68dc      	ldr	r4, [r3, #12]
 8012b94:	4610      	mov	r0, r2
 8012b96:	f7f8 fd8f 	bl	800b6b8 <lwip_htonl>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	68dc      	ldr	r4, [r3, #12]
 8012ba6:	4610      	mov	r0, r2
 8012ba8:	f7f8 fd72 	bl	800b690 <lwip_htons>
 8012bac:	4603      	mov	r3, r0
 8012bae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb4:	68ba      	ldr	r2, [r7, #8]
 8012bb6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012bb8:	441a      	add	r2, r3
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	3314      	adds	r3, #20
 8012bc4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	7a9b      	ldrb	r3, [r3, #10]
 8012bca:	f003 0301 	and.w	r3, r3, #1
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d015      	beq.n	8012bfe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	3304      	adds	r3, #4
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	6879      	ldr	r1, [r7, #4]
 8012bda:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012bde:	f7fc fa33 	bl	800f048 <tcp_eff_send_mss_netif>
 8012be2:	4603      	mov	r3, r0
 8012be4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012be6:	8b7b      	ldrh	r3, [r7, #26]
 8012be8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7f8 fd63 	bl	800b6b8 <lwip_htonl>
 8012bf2:	4602      	mov	r2, r0
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	3304      	adds	r3, #4
 8012bfc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	da02      	bge.n	8012c0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10c      	bne.n	8012c30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012c16:	4b34      	ldr	r3, [pc, #208]	; (8012ce8 <tcp_output_segment+0x1b4>)
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	68db      	ldr	r3, [r3, #12]
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7f8 fd47 	bl	800b6b8 <lwip_htonl>
 8012c2a:	4602      	mov	r2, r0
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	68da      	ldr	r2, [r3, #12]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	1ad3      	subs	r3, r2, r3
 8012c3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	8959      	ldrh	r1, [r3, #10]
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	685b      	ldr	r3, [r3, #4]
 8012c48:	8b3a      	ldrh	r2, [r7, #24]
 8012c4a:	1a8a      	subs	r2, r1, r2
 8012c4c:	b292      	uxth	r2, r2
 8012c4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	8919      	ldrh	r1, [r3, #8]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	8b3a      	ldrh	r2, [r7, #24]
 8012c5c:	1a8a      	subs	r2, r1, r2
 8012c5e:	b292      	uxth	r2, r2
 8012c60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	68d2      	ldr	r2, [r2, #12]
 8012c6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	68db      	ldr	r3, [r3, #12]
 8012c70:	2200      	movs	r2, #0
 8012c72:	741a      	strb	r2, [r3, #16]
 8012c74:	2200      	movs	r2, #0
 8012c76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	f103 0214 	add.w	r2, r3, #20
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	7a9b      	ldrb	r3, [r3, #10]
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	f003 0304 	and.w	r3, r3, #4
 8012c8a:	4413      	add	r3, r2
 8012c8c:	69fa      	ldr	r2, [r7, #28]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d006      	beq.n	8012ca0 <tcp_output_segment+0x16c>
 8012c92:	4b10      	ldr	r3, [pc, #64]	; (8012cd4 <tcp_output_segment+0x1a0>)
 8012c94:	f240 621c 	movw	r2, #1564	; 0x61c
 8012c98:	4914      	ldr	r1, [pc, #80]	; (8012cec <tcp_output_segment+0x1b8>)
 8012c9a:	4810      	ldr	r0, [pc, #64]	; (8012cdc <tcp_output_segment+0x1a8>)
 8012c9c:	f004 f970 	bl	8016f80 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	6858      	ldr	r0, [r3, #4]
 8012ca4:	68b9      	ldr	r1, [r7, #8]
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	1d1c      	adds	r4, r3, #4
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	7add      	ldrb	r5, [r3, #11]
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	7a9b      	ldrb	r3, [r3, #10]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	9202      	str	r2, [sp, #8]
 8012cb6:	2206      	movs	r2, #6
 8012cb8:	9201      	str	r2, [sp, #4]
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	462b      	mov	r3, r5
 8012cbe:	4622      	mov	r2, r4
 8012cc0:	f002 fac2 	bl	8015248 <ip4_output_if>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3720      	adds	r7, #32
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8012cd4:	08019af4 	.word	0x08019af4
 8012cd8:	0801a0b8 	.word	0x0801a0b8
 8012cdc:	08019b48 	.word	0x08019b48
 8012ce0:	0801a0d8 	.word	0x0801a0d8
 8012ce4:	0801a0f8 	.word	0x0801a0f8
 8012ce8:	2000be38 	.word	0x2000be38
 8012cec:	0801a11c 	.word	0x0801a11c

08012cf0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012cf0:	b5b0      	push	{r4, r5, r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d106      	bne.n	8012d0c <tcp_rexmit_rto_prepare+0x1c>
 8012cfe:	4b31      	ldr	r3, [pc, #196]	; (8012dc4 <tcp_rexmit_rto_prepare+0xd4>)
 8012d00:	f240 6263 	movw	r2, #1635	; 0x663
 8012d04:	4930      	ldr	r1, [pc, #192]	; (8012dc8 <tcp_rexmit_rto_prepare+0xd8>)
 8012d06:	4831      	ldr	r0, [pc, #196]	; (8012dcc <tcp_rexmit_rto_prepare+0xdc>)
 8012d08:	f004 f93a 	bl	8016f80 <iprintf>

  if (pcb->unacked == NULL) {
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d102      	bne.n	8012d1a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012d14:	f06f 0305 	mvn.w	r3, #5
 8012d18:	e050      	b.n	8012dbc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d1e:	60fb      	str	r3, [r7, #12]
 8012d20:	e00b      	b.n	8012d3a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012d22:	68f8      	ldr	r0, [r7, #12]
 8012d24:	f7ff fee6 	bl	8012af4 <tcp_output_segment_busy>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d002      	beq.n	8012d34 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012d2e:	f06f 0305 	mvn.w	r3, #5
 8012d32:	e043      	b.n	8012dbc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	60fb      	str	r3, [r7, #12]
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d1ef      	bne.n	8012d22 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f7ff fed6 	bl	8012af4 <tcp_output_segment_busy>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d002      	beq.n	8012d54 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012d4e:	f06f 0305 	mvn.w	r3, #5
 8012d52:	e033      	b.n	8012dbc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2200      	movs	r2, #0
 8012d68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	8b5b      	ldrh	r3, [r3, #26]
 8012d6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012d72:	b29a      	uxth	r2, r3
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7f8 fc9a 	bl	800b6b8 <lwip_htonl>
 8012d84:	4604      	mov	r4, r0
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	891b      	ldrh	r3, [r3, #8]
 8012d8a:	461d      	mov	r5, r3
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	899b      	ldrh	r3, [r3, #12]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7f8 fc7b 	bl	800b690 <lwip_htons>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	f003 0303 	and.w	r3, r3, #3
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d001      	beq.n	8012daa <tcp_rexmit_rto_prepare+0xba>
 8012da6:	2301      	movs	r3, #1
 8012da8:	e000      	b.n	8012dac <tcp_rexmit_rto_prepare+0xbc>
 8012daa:	2300      	movs	r3, #0
 8012dac:	442b      	add	r3, r5
 8012dae:	18e2      	adds	r2, r4, r3
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2200      	movs	r2, #0
 8012db8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3710      	adds	r7, #16
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8012dc4:	08019af4 	.word	0x08019af4
 8012dc8:	0801a130 	.word	0x0801a130
 8012dcc:	08019b48 	.word	0x08019b48

08012dd0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d106      	bne.n	8012dec <tcp_rexmit_rto_commit+0x1c>
 8012dde:	4b0d      	ldr	r3, [pc, #52]	; (8012e14 <tcp_rexmit_rto_commit+0x44>)
 8012de0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012de4:	490c      	ldr	r1, [pc, #48]	; (8012e18 <tcp_rexmit_rto_commit+0x48>)
 8012de6:	480d      	ldr	r0, [pc, #52]	; (8012e1c <tcp_rexmit_rto_commit+0x4c>)
 8012de8:	f004 f8ca 	bl	8016f80 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012df2:	2bff      	cmp	r3, #255	; 0xff
 8012df4:	d007      	beq.n	8012e06 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f7ff fc80 	bl	801270c <tcp_output>
}
 8012e0c:	bf00      	nop
 8012e0e:	3708      	adds	r7, #8
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}
 8012e14:	08019af4 	.word	0x08019af4
 8012e18:	0801a154 	.word	0x0801a154
 8012e1c:	08019b48 	.word	0x08019b48

08012e20 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d106      	bne.n	8012e3c <tcp_rexmit_rto+0x1c>
 8012e2e:	4b0a      	ldr	r3, [pc, #40]	; (8012e58 <tcp_rexmit_rto+0x38>)
 8012e30:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012e34:	4909      	ldr	r1, [pc, #36]	; (8012e5c <tcp_rexmit_rto+0x3c>)
 8012e36:	480a      	ldr	r0, [pc, #40]	; (8012e60 <tcp_rexmit_rto+0x40>)
 8012e38:	f004 f8a2 	bl	8016f80 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f7ff ff57 	bl	8012cf0 <tcp_rexmit_rto_prepare>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d102      	bne.n	8012e4e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f7ff ffc1 	bl	8012dd0 <tcp_rexmit_rto_commit>
  }
}
 8012e4e:	bf00      	nop
 8012e50:	3708      	adds	r7, #8
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	08019af4 	.word	0x08019af4
 8012e5c:	0801a178 	.word	0x0801a178
 8012e60:	08019b48 	.word	0x08019b48

08012e64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012e64:	b590      	push	{r4, r7, lr}
 8012e66:	b085      	sub	sp, #20
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d106      	bne.n	8012e80 <tcp_rexmit+0x1c>
 8012e72:	4b2f      	ldr	r3, [pc, #188]	; (8012f30 <tcp_rexmit+0xcc>)
 8012e74:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012e78:	492e      	ldr	r1, [pc, #184]	; (8012f34 <tcp_rexmit+0xd0>)
 8012e7a:	482f      	ldr	r0, [pc, #188]	; (8012f38 <tcp_rexmit+0xd4>)
 8012e7c:	f004 f880 	bl	8016f80 <iprintf>

  if (pcb->unacked == NULL) {
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d102      	bne.n	8012e8e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012e88:	f06f 0305 	mvn.w	r3, #5
 8012e8c:	e04c      	b.n	8012f28 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e92:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012e94:	68b8      	ldr	r0, [r7, #8]
 8012e96:	f7ff fe2d 	bl	8012af4 <tcp_output_segment_busy>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d002      	beq.n	8012ea6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012ea0:	f06f 0305 	mvn.w	r3, #5
 8012ea4:	e040      	b.n	8012f28 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	681a      	ldr	r2, [r3, #0]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	336c      	adds	r3, #108	; 0x6c
 8012eb2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012eb4:	e002      	b.n	8012ebc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d011      	beq.n	8012ee8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7f8 fbf3 	bl	800b6b8 <lwip_htonl>
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7f8 fbec 	bl	800b6b8 <lwip_htonl>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	dbe6      	blt.n	8012eb6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	68ba      	ldr	r2, [r7, #8]
 8012ef4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d103      	bne.n	8012f06 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f0c:	2bff      	cmp	r3, #255	; 0xff
 8012f0e:	d007      	beq.n	8012f20 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f16:	3301      	adds	r3, #1
 8012f18:	b2da      	uxtb	r2, r3
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2200      	movs	r2, #0
 8012f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012f26:	2300      	movs	r3, #0
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3714      	adds	r7, #20
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd90      	pop	{r4, r7, pc}
 8012f30:	08019af4 	.word	0x08019af4
 8012f34:	0801a194 	.word	0x0801a194
 8012f38:	08019b48 	.word	0x08019b48

08012f3c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d106      	bne.n	8012f58 <tcp_rexmit_fast+0x1c>
 8012f4a:	4b2a      	ldr	r3, [pc, #168]	; (8012ff4 <tcp_rexmit_fast+0xb8>)
 8012f4c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012f50:	4929      	ldr	r1, [pc, #164]	; (8012ff8 <tcp_rexmit_fast+0xbc>)
 8012f52:	482a      	ldr	r0, [pc, #168]	; (8012ffc <tcp_rexmit_fast+0xc0>)
 8012f54:	f004 f814 	bl	8016f80 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d044      	beq.n	8012fea <tcp_rexmit_fast+0xae>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	8b5b      	ldrh	r3, [r3, #26]
 8012f64:	f003 0304 	and.w	r3, r3, #4
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d13e      	bne.n	8012fea <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ff ff79 	bl	8012e64 <tcp_rexmit>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d138      	bne.n	8012fea <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f84:	4293      	cmp	r3, r2
 8012f86:	bf28      	it	cs
 8012f88:	4613      	movcs	r3, r2
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	0fda      	lsrs	r2, r3, #31
 8012f8e:	4413      	add	r3, r2
 8012f90:	105b      	asrs	r3, r3, #1
 8012f92:	b29a      	uxth	r2, r3
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fa6:	005b      	lsls	r3, r3, #1
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d206      	bcs.n	8012fba <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fb0:	005b      	lsls	r3, r3, #1
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fc4:	4619      	mov	r1, r3
 8012fc6:	0049      	lsls	r1, r1, #1
 8012fc8:	440b      	add	r3, r1
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	4413      	add	r3, r2
 8012fce:	b29a      	uxth	r2, r3
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	8b5b      	ldrh	r3, [r3, #26]
 8012fda:	f043 0304 	orr.w	r3, r3, #4
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012fea:	bf00      	nop
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	08019af4 	.word	0x08019af4
 8012ff8:	0801a1ac 	.word	0x0801a1ac
 8012ffc:	08019b48 	.word	0x08019b48

08013000 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b086      	sub	sp, #24
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	607b      	str	r3, [r7, #4]
 801300a:	460b      	mov	r3, r1
 801300c:	817b      	strh	r3, [r7, #10]
 801300e:	4613      	mov	r3, r2
 8013010:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013012:	897a      	ldrh	r2, [r7, #10]
 8013014:	893b      	ldrh	r3, [r7, #8]
 8013016:	4413      	add	r3, r2
 8013018:	b29b      	uxth	r3, r3
 801301a:	3314      	adds	r3, #20
 801301c:	b29b      	uxth	r3, r3
 801301e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013022:	4619      	mov	r1, r3
 8013024:	2022      	movs	r0, #34	; 0x22
 8013026:	f7f9 fcab 	bl	800c980 <pbuf_alloc>
 801302a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d04d      	beq.n	80130ce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013032:	897b      	ldrh	r3, [r7, #10]
 8013034:	3313      	adds	r3, #19
 8013036:	697a      	ldr	r2, [r7, #20]
 8013038:	8952      	ldrh	r2, [r2, #10]
 801303a:	4293      	cmp	r3, r2
 801303c:	db06      	blt.n	801304c <tcp_output_alloc_header_common+0x4c>
 801303e:	4b26      	ldr	r3, [pc, #152]	; (80130d8 <tcp_output_alloc_header_common+0xd8>)
 8013040:	f240 7223 	movw	r2, #1827	; 0x723
 8013044:	4925      	ldr	r1, [pc, #148]	; (80130dc <tcp_output_alloc_header_common+0xdc>)
 8013046:	4826      	ldr	r0, [pc, #152]	; (80130e0 <tcp_output_alloc_header_common+0xe0>)
 8013048:	f003 ff9a 	bl	8016f80 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013052:	8c3b      	ldrh	r3, [r7, #32]
 8013054:	4618      	mov	r0, r3
 8013056:	f7f8 fb1b 	bl	800b690 <lwip_htons>
 801305a:	4603      	mov	r3, r0
 801305c:	461a      	mov	r2, r3
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013064:	4618      	mov	r0, r3
 8013066:	f7f8 fb13 	bl	800b690 <lwip_htons>
 801306a:	4603      	mov	r3, r0
 801306c:	461a      	mov	r2, r3
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	687a      	ldr	r2, [r7, #4]
 8013076:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f7f8 fb1d 	bl	800b6b8 <lwip_htonl>
 801307e:	4602      	mov	r2, r0
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013084:	897b      	ldrh	r3, [r7, #10]
 8013086:	089b      	lsrs	r3, r3, #2
 8013088:	b29b      	uxth	r3, r3
 801308a:	3305      	adds	r3, #5
 801308c:	b29b      	uxth	r3, r3
 801308e:	031b      	lsls	r3, r3, #12
 8013090:	b29a      	uxth	r2, r3
 8013092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013096:	b29b      	uxth	r3, r3
 8013098:	4313      	orrs	r3, r2
 801309a:	b29b      	uxth	r3, r3
 801309c:	4618      	mov	r0, r3
 801309e:	f7f8 faf7 	bl	800b690 <lwip_htons>
 80130a2:	4603      	mov	r3, r0
 80130a4:	461a      	mov	r2, r3
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80130aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7f8 faef 	bl	800b690 <lwip_htons>
 80130b2:	4603      	mov	r3, r0
 80130b4:	461a      	mov	r2, r3
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	2200      	movs	r2, #0
 80130be:	741a      	strb	r2, [r3, #16]
 80130c0:	2200      	movs	r2, #0
 80130c2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	2200      	movs	r2, #0
 80130c8:	749a      	strb	r2, [r3, #18]
 80130ca:	2200      	movs	r2, #0
 80130cc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80130ce:	697b      	ldr	r3, [r7, #20]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3718      	adds	r7, #24
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	08019af4 	.word	0x08019af4
 80130dc:	0801a1cc 	.word	0x0801a1cc
 80130e0:	08019b48 	.word	0x08019b48

080130e4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80130e4:	b5b0      	push	{r4, r5, r7, lr}
 80130e6:	b08a      	sub	sp, #40	; 0x28
 80130e8:	af04      	add	r7, sp, #16
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	607b      	str	r3, [r7, #4]
 80130ee:	460b      	mov	r3, r1
 80130f0:	817b      	strh	r3, [r7, #10]
 80130f2:	4613      	mov	r3, r2
 80130f4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d106      	bne.n	801310a <tcp_output_alloc_header+0x26>
 80130fc:	4b15      	ldr	r3, [pc, #84]	; (8013154 <tcp_output_alloc_header+0x70>)
 80130fe:	f240 7242 	movw	r2, #1858	; 0x742
 8013102:	4915      	ldr	r1, [pc, #84]	; (8013158 <tcp_output_alloc_header+0x74>)
 8013104:	4815      	ldr	r0, [pc, #84]	; (801315c <tcp_output_alloc_header+0x78>)
 8013106:	f003 ff3b 	bl	8016f80 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	8adb      	ldrh	r3, [r3, #22]
 8013112:	68fa      	ldr	r2, [r7, #12]
 8013114:	8b12      	ldrh	r2, [r2, #24]
 8013116:	68f9      	ldr	r1, [r7, #12]
 8013118:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801311a:	893d      	ldrh	r5, [r7, #8]
 801311c:	897c      	ldrh	r4, [r7, #10]
 801311e:	9103      	str	r1, [sp, #12]
 8013120:	2110      	movs	r1, #16
 8013122:	9102      	str	r1, [sp, #8]
 8013124:	9201      	str	r2, [sp, #4]
 8013126:	9300      	str	r3, [sp, #0]
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	462a      	mov	r2, r5
 801312c:	4621      	mov	r1, r4
 801312e:	f7ff ff67 	bl	8013000 <tcp_output_alloc_header_common>
 8013132:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d006      	beq.n	8013148 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801313e:	68fa      	ldr	r2, [r7, #12]
 8013140:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013142:	441a      	add	r2, r3
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013148:	697b      	ldr	r3, [r7, #20]
}
 801314a:	4618      	mov	r0, r3
 801314c:	3718      	adds	r7, #24
 801314e:	46bd      	mov	sp, r7
 8013150:	bdb0      	pop	{r4, r5, r7, pc}
 8013152:	bf00      	nop
 8013154:	08019af4 	.word	0x08019af4
 8013158:	0801a1fc 	.word	0x0801a1fc
 801315c:	08019b48 	.word	0x08019b48

08013160 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b088      	sub	sp, #32
 8013164:	af00      	add	r7, sp, #0
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	4611      	mov	r1, r2
 801316c:	461a      	mov	r2, r3
 801316e:	460b      	mov	r3, r1
 8013170:	71fb      	strb	r3, [r7, #7]
 8013172:	4613      	mov	r3, r2
 8013174:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013176:	2300      	movs	r3, #0
 8013178:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d106      	bne.n	801318e <tcp_output_fill_options+0x2e>
 8013180:	4b13      	ldr	r3, [pc, #76]	; (80131d0 <tcp_output_fill_options+0x70>)
 8013182:	f240 7256 	movw	r2, #1878	; 0x756
 8013186:	4913      	ldr	r1, [pc, #76]	; (80131d4 <tcp_output_fill_options+0x74>)
 8013188:	4813      	ldr	r0, [pc, #76]	; (80131d8 <tcp_output_fill_options+0x78>)
 801318a:	f003 fef9 	bl	8016f80 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	3314      	adds	r3, #20
 8013198:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	f103 0214 	add.w	r2, r3, #20
 80131a0:	8bfb      	ldrh	r3, [r7, #30]
 80131a2:	009b      	lsls	r3, r3, #2
 80131a4:	4619      	mov	r1, r3
 80131a6:	79fb      	ldrb	r3, [r7, #7]
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	f003 0304 	and.w	r3, r3, #4
 80131ae:	440b      	add	r3, r1
 80131b0:	4413      	add	r3, r2
 80131b2:	697a      	ldr	r2, [r7, #20]
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d006      	beq.n	80131c6 <tcp_output_fill_options+0x66>
 80131b8:	4b05      	ldr	r3, [pc, #20]	; (80131d0 <tcp_output_fill_options+0x70>)
 80131ba:	f240 7275 	movw	r2, #1909	; 0x775
 80131be:	4907      	ldr	r1, [pc, #28]	; (80131dc <tcp_output_fill_options+0x7c>)
 80131c0:	4805      	ldr	r0, [pc, #20]	; (80131d8 <tcp_output_fill_options+0x78>)
 80131c2:	f003 fedd 	bl	8016f80 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80131c6:	bf00      	nop
 80131c8:	3720      	adds	r7, #32
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	08019af4 	.word	0x08019af4
 80131d4:	0801a224 	.word	0x0801a224
 80131d8:	08019b48 	.word	0x08019b48
 80131dc:	0801a11c 	.word	0x0801a11c

080131e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b08a      	sub	sp, #40	; 0x28
 80131e4:	af04      	add	r7, sp, #16
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	607a      	str	r2, [r7, #4]
 80131ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d106      	bne.n	8013202 <tcp_output_control_segment+0x22>
 80131f4:	4b1c      	ldr	r3, [pc, #112]	; (8013268 <tcp_output_control_segment+0x88>)
 80131f6:	f240 7287 	movw	r2, #1927	; 0x787
 80131fa:	491c      	ldr	r1, [pc, #112]	; (801326c <tcp_output_control_segment+0x8c>)
 80131fc:	481c      	ldr	r0, [pc, #112]	; (8013270 <tcp_output_control_segment+0x90>)
 80131fe:	f003 febf 	bl	8016f80 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013202:	683a      	ldr	r2, [r7, #0]
 8013204:	6879      	ldr	r1, [r7, #4]
 8013206:	68f8      	ldr	r0, [r7, #12]
 8013208:	f7fe fae8 	bl	80117dc <tcp_route>
 801320c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d102      	bne.n	801321a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013214:	23fc      	movs	r3, #252	; 0xfc
 8013216:	75fb      	strb	r3, [r7, #23]
 8013218:	e01c      	b.n	8013254 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d006      	beq.n	801322e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	7adb      	ldrb	r3, [r3, #11]
 8013224:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	7a9b      	ldrb	r3, [r3, #10]
 801322a:	757b      	strb	r3, [r7, #21]
 801322c:	e003      	b.n	8013236 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801322e:	23ff      	movs	r3, #255	; 0xff
 8013230:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013232:	2300      	movs	r3, #0
 8013234:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013236:	7dba      	ldrb	r2, [r7, #22]
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	9302      	str	r3, [sp, #8]
 801323c:	2306      	movs	r3, #6
 801323e:	9301      	str	r3, [sp, #4]
 8013240:	7d7b      	ldrb	r3, [r7, #21]
 8013242:	9300      	str	r3, [sp, #0]
 8013244:	4613      	mov	r3, r2
 8013246:	683a      	ldr	r2, [r7, #0]
 8013248:	6879      	ldr	r1, [r7, #4]
 801324a:	68b8      	ldr	r0, [r7, #8]
 801324c:	f001 fffc 	bl	8015248 <ip4_output_if>
 8013250:	4603      	mov	r3, r0
 8013252:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013254:	68b8      	ldr	r0, [r7, #8]
 8013256:	f7f9 fe77 	bl	800cf48 <pbuf_free>
  return err;
 801325a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3718      	adds	r7, #24
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	08019af4 	.word	0x08019af4
 801326c:	0801a24c 	.word	0x0801a24c
 8013270:	08019b48 	.word	0x08019b48

08013274 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013274:	b590      	push	{r4, r7, lr}
 8013276:	b08b      	sub	sp, #44	; 0x2c
 8013278:	af04      	add	r7, sp, #16
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	60b9      	str	r1, [r7, #8]
 801327e:	607a      	str	r2, [r7, #4]
 8013280:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d106      	bne.n	8013296 <tcp_rst+0x22>
 8013288:	4b1f      	ldr	r3, [pc, #124]	; (8013308 <tcp_rst+0x94>)
 801328a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801328e:	491f      	ldr	r1, [pc, #124]	; (801330c <tcp_rst+0x98>)
 8013290:	481f      	ldr	r0, [pc, #124]	; (8013310 <tcp_rst+0x9c>)
 8013292:	f003 fe75 	bl	8016f80 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013298:	2b00      	cmp	r3, #0
 801329a:	d106      	bne.n	80132aa <tcp_rst+0x36>
 801329c:	4b1a      	ldr	r3, [pc, #104]	; (8013308 <tcp_rst+0x94>)
 801329e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80132a2:	491c      	ldr	r1, [pc, #112]	; (8013314 <tcp_rst+0xa0>)
 80132a4:	481a      	ldr	r0, [pc, #104]	; (8013310 <tcp_rst+0x9c>)
 80132a6:	f003 fe6b 	bl	8016f80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132aa:	2300      	movs	r3, #0
 80132ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80132ae:	f246 0308 	movw	r3, #24584	; 0x6008
 80132b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80132b4:	7dfb      	ldrb	r3, [r7, #23]
 80132b6:	b29c      	uxth	r4, r3
 80132b8:	68b8      	ldr	r0, [r7, #8]
 80132ba:	f7f8 f9fd 	bl	800b6b8 <lwip_htonl>
 80132be:	4602      	mov	r2, r0
 80132c0:	8abb      	ldrh	r3, [r7, #20]
 80132c2:	9303      	str	r3, [sp, #12]
 80132c4:	2314      	movs	r3, #20
 80132c6:	9302      	str	r3, [sp, #8]
 80132c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80132ca:	9301      	str	r3, [sp, #4]
 80132cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132ce:	9300      	str	r3, [sp, #0]
 80132d0:	4613      	mov	r3, r2
 80132d2:	2200      	movs	r2, #0
 80132d4:	4621      	mov	r1, r4
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff fe92 	bl	8013000 <tcp_output_alloc_header_common>
 80132dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d00c      	beq.n	80132fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80132e4:	7dfb      	ldrb	r3, [r7, #23]
 80132e6:	2200      	movs	r2, #0
 80132e8:	6939      	ldr	r1, [r7, #16]
 80132ea:	68f8      	ldr	r0, [r7, #12]
 80132ec:	f7ff ff38 	bl	8013160 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80132f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f2:	683a      	ldr	r2, [r7, #0]
 80132f4:	6939      	ldr	r1, [r7, #16]
 80132f6:	68f8      	ldr	r0, [r7, #12]
 80132f8:	f7ff ff72 	bl	80131e0 <tcp_output_control_segment>
 80132fc:	e000      	b.n	8013300 <tcp_rst+0x8c>
    return;
 80132fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013300:	371c      	adds	r7, #28
 8013302:	46bd      	mov	sp, r7
 8013304:	bd90      	pop	{r4, r7, pc}
 8013306:	bf00      	nop
 8013308:	08019af4 	.word	0x08019af4
 801330c:	0801a278 	.word	0x0801a278
 8013310:	08019b48 	.word	0x08019b48
 8013314:	0801a294 	.word	0x0801a294

08013318 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013318:	b590      	push	{r4, r7, lr}
 801331a:	b087      	sub	sp, #28
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013320:	2300      	movs	r3, #0
 8013322:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013324:	2300      	movs	r3, #0
 8013326:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d106      	bne.n	801333c <tcp_send_empty_ack+0x24>
 801332e:	4b28      	ldr	r3, [pc, #160]	; (80133d0 <tcp_send_empty_ack+0xb8>)
 8013330:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013334:	4927      	ldr	r1, [pc, #156]	; (80133d4 <tcp_send_empty_ack+0xbc>)
 8013336:	4828      	ldr	r0, [pc, #160]	; (80133d8 <tcp_send_empty_ack+0xc0>)
 8013338:	f003 fe22 	bl	8016f80 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801333c:	7dfb      	ldrb	r3, [r7, #23]
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	b2db      	uxtb	r3, r3
 8013342:	f003 0304 	and.w	r3, r3, #4
 8013346:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013348:	7d7b      	ldrb	r3, [r7, #21]
 801334a:	b29c      	uxth	r4, r3
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013350:	4618      	mov	r0, r3
 8013352:	f7f8 f9b1 	bl	800b6b8 <lwip_htonl>
 8013356:	4603      	mov	r3, r0
 8013358:	2200      	movs	r2, #0
 801335a:	4621      	mov	r1, r4
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f7ff fec1 	bl	80130e4 <tcp_output_alloc_header>
 8013362:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d109      	bne.n	801337e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	8b5b      	ldrh	r3, [r3, #26]
 801336e:	f043 0303 	orr.w	r3, r3, #3
 8013372:	b29a      	uxth	r2, r3
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013378:	f06f 0301 	mvn.w	r3, #1
 801337c:	e023      	b.n	80133c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801337e:	7dbb      	ldrb	r3, [r7, #22]
 8013380:	7dfa      	ldrb	r2, [r7, #23]
 8013382:	6939      	ldr	r1, [r7, #16]
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff feeb 	bl	8013160 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801338a:	687a      	ldr	r2, [r7, #4]
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	3304      	adds	r3, #4
 8013390:	6939      	ldr	r1, [r7, #16]
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7ff ff24 	bl	80131e0 <tcp_output_control_segment>
 8013398:	4603      	mov	r3, r0
 801339a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801339c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d007      	beq.n	80133b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	8b5b      	ldrh	r3, [r3, #26]
 80133a8:	f043 0303 	orr.w	r3, r3, #3
 80133ac:	b29a      	uxth	r2, r3
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	835a      	strh	r2, [r3, #26]
 80133b2:	e006      	b.n	80133c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	8b5b      	ldrh	r3, [r3, #26]
 80133b8:	f023 0303 	bic.w	r3, r3, #3
 80133bc:	b29a      	uxth	r2, r3
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80133c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	371c      	adds	r7, #28
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd90      	pop	{r4, r7, pc}
 80133ce:	bf00      	nop
 80133d0:	08019af4 	.word	0x08019af4
 80133d4:	0801a2b0 	.word	0x0801a2b0
 80133d8:	08019b48 	.word	0x08019b48

080133dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80133dc:	b590      	push	{r4, r7, lr}
 80133de:	b087      	sub	sp, #28
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80133e4:	2300      	movs	r3, #0
 80133e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d106      	bne.n	80133fc <tcp_keepalive+0x20>
 80133ee:	4b18      	ldr	r3, [pc, #96]	; (8013450 <tcp_keepalive+0x74>)
 80133f0:	f640 0224 	movw	r2, #2084	; 0x824
 80133f4:	4917      	ldr	r1, [pc, #92]	; (8013454 <tcp_keepalive+0x78>)
 80133f6:	4818      	ldr	r0, [pc, #96]	; (8013458 <tcp_keepalive+0x7c>)
 80133f8:	f003 fdc2 	bl	8016f80 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80133fc:	7dfb      	ldrb	r3, [r7, #23]
 80133fe:	b29c      	uxth	r4, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013404:	3b01      	subs	r3, #1
 8013406:	4618      	mov	r0, r3
 8013408:	f7f8 f956 	bl	800b6b8 <lwip_htonl>
 801340c:	4603      	mov	r3, r0
 801340e:	2200      	movs	r2, #0
 8013410:	4621      	mov	r1, r4
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f7ff fe66 	bl	80130e4 <tcp_output_alloc_header>
 8013418:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d102      	bne.n	8013426 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013420:	f04f 33ff 	mov.w	r3, #4294967295
 8013424:	e010      	b.n	8013448 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013426:	7dfb      	ldrb	r3, [r7, #23]
 8013428:	2200      	movs	r2, #0
 801342a:	6939      	ldr	r1, [r7, #16]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7ff fe97 	bl	8013160 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013432:	687a      	ldr	r2, [r7, #4]
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	3304      	adds	r3, #4
 8013438:	6939      	ldr	r1, [r7, #16]
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f7ff fed0 	bl	80131e0 <tcp_output_control_segment>
 8013440:	4603      	mov	r3, r0
 8013442:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013448:	4618      	mov	r0, r3
 801344a:	371c      	adds	r7, #28
 801344c:	46bd      	mov	sp, r7
 801344e:	bd90      	pop	{r4, r7, pc}
 8013450:	08019af4 	.word	0x08019af4
 8013454:	0801a2d0 	.word	0x0801a2d0
 8013458:	08019b48 	.word	0x08019b48

0801345c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801345c:	b590      	push	{r4, r7, lr}
 801345e:	b08b      	sub	sp, #44	; 0x2c
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013464:	2300      	movs	r3, #0
 8013466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d106      	bne.n	801347e <tcp_zero_window_probe+0x22>
 8013470:	4b4c      	ldr	r3, [pc, #304]	; (80135a4 <tcp_zero_window_probe+0x148>)
 8013472:	f640 024f 	movw	r2, #2127	; 0x84f
 8013476:	494c      	ldr	r1, [pc, #304]	; (80135a8 <tcp_zero_window_probe+0x14c>)
 8013478:	484c      	ldr	r0, [pc, #304]	; (80135ac <tcp_zero_window_probe+0x150>)
 801347a:	f003 fd81 	bl	8016f80 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013482:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013484:	6a3b      	ldr	r3, [r7, #32]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801348a:	2300      	movs	r3, #0
 801348c:	e086      	b.n	801359c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013494:	2bff      	cmp	r3, #255	; 0xff
 8013496:	d007      	beq.n	80134a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801349e:	3301      	adds	r3, #1
 80134a0:	b2da      	uxtb	r2, r3
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80134a8:	6a3b      	ldr	r3, [r7, #32]
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	899b      	ldrh	r3, [r3, #12]
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7f8 f8ed 	bl	800b690 <lwip_htons>
 80134b6:	4603      	mov	r3, r0
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	f003 0301 	and.w	r3, r3, #1
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d005      	beq.n	80134ce <tcp_zero_window_probe+0x72>
 80134c2:	6a3b      	ldr	r3, [r7, #32]
 80134c4:	891b      	ldrh	r3, [r3, #8]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d101      	bne.n	80134ce <tcp_zero_window_probe+0x72>
 80134ca:	2301      	movs	r3, #1
 80134cc:	e000      	b.n	80134d0 <tcp_zero_window_probe+0x74>
 80134ce:	2300      	movs	r3, #0
 80134d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80134d2:	7ffb      	ldrb	r3, [r7, #31]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	bf0c      	ite	eq
 80134d8:	2301      	moveq	r3, #1
 80134da:	2300      	movne	r3, #0
 80134dc:	b2db      	uxtb	r3, r3
 80134de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80134e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134e4:	b299      	uxth	r1, r3
 80134e6:	6a3b      	ldr	r3, [r7, #32]
 80134e8:	68db      	ldr	r3, [r3, #12]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	8bba      	ldrh	r2, [r7, #28]
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f7ff fdf8 	bl	80130e4 <tcp_output_alloc_header>
 80134f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d102      	bne.n	8013502 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013500:	e04c      	b.n	801359c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013508:	7ffb      	ldrb	r3, [r7, #31]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d011      	beq.n	8013532 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	899b      	ldrh	r3, [r3, #12]
 8013512:	b29b      	uxth	r3, r3
 8013514:	b21b      	sxth	r3, r3
 8013516:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801351a:	b21c      	sxth	r4, r3
 801351c:	2011      	movs	r0, #17
 801351e:	f7f8 f8b7 	bl	800b690 <lwip_htons>
 8013522:	4603      	mov	r3, r0
 8013524:	b21b      	sxth	r3, r3
 8013526:	4323      	orrs	r3, r4
 8013528:	b21b      	sxth	r3, r3
 801352a:	b29a      	uxth	r2, r3
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	819a      	strh	r2, [r3, #12]
 8013530:	e010      	b.n	8013554 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	3314      	adds	r3, #20
 8013538:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801353a:	6a3b      	ldr	r3, [r7, #32]
 801353c:	6858      	ldr	r0, [r3, #4]
 801353e:	6a3b      	ldr	r3, [r7, #32]
 8013540:	685b      	ldr	r3, [r3, #4]
 8013542:	891a      	ldrh	r2, [r3, #8]
 8013544:	6a3b      	ldr	r3, [r7, #32]
 8013546:	891b      	ldrh	r3, [r3, #8]
 8013548:	1ad3      	subs	r3, r2, r3
 801354a:	b29b      	uxth	r3, r3
 801354c:	2201      	movs	r2, #1
 801354e:	6939      	ldr	r1, [r7, #16]
 8013550:	f7f9 feee 	bl	800d330 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013554:	6a3b      	ldr	r3, [r7, #32]
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	685b      	ldr	r3, [r3, #4]
 801355a:	4618      	mov	r0, r3
 801355c:	f7f8 f8ac 	bl	800b6b8 <lwip_htonl>
 8013560:	4603      	mov	r3, r0
 8013562:	3301      	adds	r3, #1
 8013564:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	1ad3      	subs	r3, r2, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	da02      	bge.n	8013578 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801357c:	2200      	movs	r2, #0
 801357e:	69b9      	ldr	r1, [r7, #24]
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f7ff fded 	bl	8013160 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013586:	687a      	ldr	r2, [r7, #4]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	3304      	adds	r3, #4
 801358c:	69b9      	ldr	r1, [r7, #24]
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f7ff fe26 	bl	80131e0 <tcp_output_control_segment>
 8013594:	4603      	mov	r3, r0
 8013596:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013598:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801359c:	4618      	mov	r0, r3
 801359e:	372c      	adds	r7, #44	; 0x2c
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd90      	pop	{r4, r7, pc}
 80135a4:	08019af4 	.word	0x08019af4
 80135a8:	0801a2ec 	.word	0x0801a2ec
 80135ac:	08019b48 	.word	0x08019b48

080135b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80135b8:	f7fa f80a 	bl	800d5d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80135bc:	4b0a      	ldr	r3, [pc, #40]	; (80135e8 <tcpip_tcp_timer+0x38>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d103      	bne.n	80135cc <tcpip_tcp_timer+0x1c>
 80135c4:	4b09      	ldr	r3, [pc, #36]	; (80135ec <tcpip_tcp_timer+0x3c>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d005      	beq.n	80135d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80135cc:	2200      	movs	r2, #0
 80135ce:	4908      	ldr	r1, [pc, #32]	; (80135f0 <tcpip_tcp_timer+0x40>)
 80135d0:	20fa      	movs	r0, #250	; 0xfa
 80135d2:	f000 f8f3 	bl	80137bc <sys_timeout>
 80135d6:	e003      	b.n	80135e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80135d8:	4b06      	ldr	r3, [pc, #24]	; (80135f4 <tcpip_tcp_timer+0x44>)
 80135da:	2200      	movs	r2, #0
 80135dc:	601a      	str	r2, [r3, #0]
  }
}
 80135de:	bf00      	nop
 80135e0:	bf00      	nop
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	2000be44 	.word	0x2000be44
 80135ec:	2000be48 	.word	0x2000be48
 80135f0:	080135b1 	.word	0x080135b1
 80135f4:	2000be90 	.word	0x2000be90

080135f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80135fc:	4b0a      	ldr	r3, [pc, #40]	; (8013628 <tcp_timer_needed+0x30>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d10f      	bne.n	8013624 <tcp_timer_needed+0x2c>
 8013604:	4b09      	ldr	r3, [pc, #36]	; (801362c <tcp_timer_needed+0x34>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d103      	bne.n	8013614 <tcp_timer_needed+0x1c>
 801360c:	4b08      	ldr	r3, [pc, #32]	; (8013630 <tcp_timer_needed+0x38>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d007      	beq.n	8013624 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013614:	4b04      	ldr	r3, [pc, #16]	; (8013628 <tcp_timer_needed+0x30>)
 8013616:	2201      	movs	r2, #1
 8013618:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801361a:	2200      	movs	r2, #0
 801361c:	4905      	ldr	r1, [pc, #20]	; (8013634 <tcp_timer_needed+0x3c>)
 801361e:	20fa      	movs	r0, #250	; 0xfa
 8013620:	f000 f8cc 	bl	80137bc <sys_timeout>
  }
}
 8013624:	bf00      	nop
 8013626:	bd80      	pop	{r7, pc}
 8013628:	2000be90 	.word	0x2000be90
 801362c:	2000be44 	.word	0x2000be44
 8013630:	2000be48 	.word	0x2000be48
 8013634:	080135b1 	.word	0x080135b1

08013638 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b086      	sub	sp, #24
 801363c:	af00      	add	r7, sp, #0
 801363e:	60f8      	str	r0, [r7, #12]
 8013640:	60b9      	str	r1, [r7, #8]
 8013642:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013644:	200a      	movs	r0, #10
 8013646:	f7f8 fdd3 	bl	800c1f0 <memp_malloc>
 801364a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d109      	bne.n	8013666 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d151      	bne.n	80136fc <sys_timeout_abs+0xc4>
 8013658:	4b2a      	ldr	r3, [pc, #168]	; (8013704 <sys_timeout_abs+0xcc>)
 801365a:	22be      	movs	r2, #190	; 0xbe
 801365c:	492a      	ldr	r1, [pc, #168]	; (8013708 <sys_timeout_abs+0xd0>)
 801365e:	482b      	ldr	r0, [pc, #172]	; (801370c <sys_timeout_abs+0xd4>)
 8013660:	f003 fc8e 	bl	8016f80 <iprintf>
    return;
 8013664:	e04a      	b.n	80136fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	2200      	movs	r2, #0
 801366a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	68ba      	ldr	r2, [r7, #8]
 8013670:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	68fa      	ldr	r2, [r7, #12]
 801367c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801367e:	4b24      	ldr	r3, [pc, #144]	; (8013710 <sys_timeout_abs+0xd8>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d103      	bne.n	801368e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013686:	4a22      	ldr	r2, [pc, #136]	; (8013710 <sys_timeout_abs+0xd8>)
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	6013      	str	r3, [r2, #0]
    return;
 801368c:	e037      	b.n	80136fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	685a      	ldr	r2, [r3, #4]
 8013692:	4b1f      	ldr	r3, [pc, #124]	; (8013710 <sys_timeout_abs+0xd8>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	1ad3      	subs	r3, r2, r3
 801369a:	0fdb      	lsrs	r3, r3, #31
 801369c:	f003 0301 	and.w	r3, r3, #1
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d007      	beq.n	80136b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80136a6:	4b1a      	ldr	r3, [pc, #104]	; (8013710 <sys_timeout_abs+0xd8>)
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80136ae:	4a18      	ldr	r2, [pc, #96]	; (8013710 <sys_timeout_abs+0xd8>)
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	6013      	str	r3, [r2, #0]
 80136b4:	e023      	b.n	80136fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80136b6:	4b16      	ldr	r3, [pc, #88]	; (8013710 <sys_timeout_abs+0xd8>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	617b      	str	r3, [r7, #20]
 80136bc:	e01a      	b.n	80136f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d00b      	beq.n	80136de <sys_timeout_abs+0xa6>
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	685a      	ldr	r2, [r3, #4]
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	685b      	ldr	r3, [r3, #4]
 80136d0:	1ad3      	subs	r3, r2, r3
 80136d2:	0fdb      	lsrs	r3, r3, #31
 80136d4:	f003 0301 	and.w	r3, r3, #1
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d007      	beq.n	80136ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	693a      	ldr	r2, [r7, #16]
 80136ea:	601a      	str	r2, [r3, #0]
        break;
 80136ec:	e007      	b.n	80136fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	617b      	str	r3, [r7, #20]
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d1e1      	bne.n	80136be <sys_timeout_abs+0x86>
 80136fa:	e000      	b.n	80136fe <sys_timeout_abs+0xc6>
    return;
 80136fc:	bf00      	nop
      }
    }
  }
}
 80136fe:	3718      	adds	r7, #24
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	0801a310 	.word	0x0801a310
 8013708:	0801a344 	.word	0x0801a344
 801370c:	0801a384 	.word	0x0801a384
 8013710:	2000be88 	.word	0x2000be88

08013714 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b086      	sub	sp, #24
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	4798      	blx	r3

  now = sys_now();
 8013726:	f7f2 fadb 	bl	8005ce0 <sys_now>
 801372a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	4b0f      	ldr	r3, [pc, #60]	; (8013770 <lwip_cyclic_timer+0x5c>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	4413      	add	r3, r2
 8013736:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013738:	68fa      	ldr	r2, [r7, #12]
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	1ad3      	subs	r3, r2, r3
 801373e:	0fdb      	lsrs	r3, r3, #31
 8013740:	f003 0301 	and.w	r3, r3, #1
 8013744:	b2db      	uxtb	r3, r3
 8013746:	2b00      	cmp	r3, #0
 8013748:	d009      	beq.n	801375e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	4413      	add	r3, r2
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	4907      	ldr	r1, [pc, #28]	; (8013774 <lwip_cyclic_timer+0x60>)
 8013756:	4618      	mov	r0, r3
 8013758:	f7ff ff6e 	bl	8013638 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801375c:	e004      	b.n	8013768 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801375e:	687a      	ldr	r2, [r7, #4]
 8013760:	4904      	ldr	r1, [pc, #16]	; (8013774 <lwip_cyclic_timer+0x60>)
 8013762:	68f8      	ldr	r0, [r7, #12]
 8013764:	f7ff ff68 	bl	8013638 <sys_timeout_abs>
}
 8013768:	bf00      	nop
 801376a:	3718      	adds	r7, #24
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	2000be8c 	.word	0x2000be8c
 8013774:	08013715 	.word	0x08013715

08013778 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801377e:	2301      	movs	r3, #1
 8013780:	607b      	str	r3, [r7, #4]
 8013782:	e00e      	b.n	80137a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013784:	4a0b      	ldr	r2, [pc, #44]	; (80137b4 <sys_timeouts_init+0x3c>)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	00db      	lsls	r3, r3, #3
 8013790:	4a08      	ldr	r2, [pc, #32]	; (80137b4 <sys_timeouts_init+0x3c>)
 8013792:	4413      	add	r3, r2
 8013794:	461a      	mov	r2, r3
 8013796:	4908      	ldr	r1, [pc, #32]	; (80137b8 <sys_timeouts_init+0x40>)
 8013798:	f000 f810 	bl	80137bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	3301      	adds	r3, #1
 80137a0:	607b      	str	r3, [r7, #4]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b02      	cmp	r3, #2
 80137a6:	d9ed      	bls.n	8013784 <sys_timeouts_init+0xc>
  }
}
 80137a8:	bf00      	nop
 80137aa:	bf00      	nop
 80137ac:	3708      	adds	r7, #8
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
 80137b2:	bf00      	nop
 80137b4:	0801af48 	.word	0x0801af48
 80137b8:	08013715 	.word	0x08013715

080137bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b086      	sub	sp, #24
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	60f8      	str	r0, [r7, #12]
 80137c4:	60b9      	str	r1, [r7, #8]
 80137c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137ce:	d306      	bcc.n	80137de <sys_timeout+0x22>
 80137d0:	4b0a      	ldr	r3, [pc, #40]	; (80137fc <sys_timeout+0x40>)
 80137d2:	f240 1229 	movw	r2, #297	; 0x129
 80137d6:	490a      	ldr	r1, [pc, #40]	; (8013800 <sys_timeout+0x44>)
 80137d8:	480a      	ldr	r0, [pc, #40]	; (8013804 <sys_timeout+0x48>)
 80137da:	f003 fbd1 	bl	8016f80 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80137de:	f7f2 fa7f 	bl	8005ce0 <sys_now>
 80137e2:	4602      	mov	r2, r0
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	4413      	add	r3, r2
 80137e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80137ea:	687a      	ldr	r2, [r7, #4]
 80137ec:	68b9      	ldr	r1, [r7, #8]
 80137ee:	6978      	ldr	r0, [r7, #20]
 80137f0:	f7ff ff22 	bl	8013638 <sys_timeout_abs>
#endif
}
 80137f4:	bf00      	nop
 80137f6:	3718      	adds	r7, #24
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	0801a310 	.word	0x0801a310
 8013800:	0801a3ac 	.word	0x0801a3ac
 8013804:	0801a384 	.word	0x0801a384

08013808 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013812:	4b19      	ldr	r3, [pc, #100]	; (8013878 <sys_untimeout+0x70>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d029      	beq.n	801386e <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801381a:	4b17      	ldr	r3, [pc, #92]	; (8013878 <sys_untimeout+0x70>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	60bb      	str	r3, [r7, #8]
 8013820:	2300      	movs	r3, #0
 8013822:	60fb      	str	r3, [r7, #12]
 8013824:	e01f      	b.n	8013866 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	689b      	ldr	r3, [r3, #8]
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	429a      	cmp	r2, r3
 801382e:	d115      	bne.n	801385c <sys_untimeout+0x54>
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	683a      	ldr	r2, [r7, #0]
 8013836:	429a      	cmp	r2, r3
 8013838:	d110      	bne.n	801385c <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d104      	bne.n	801384a <sys_untimeout+0x42>
        next_timeout = t->next;
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	4a0c      	ldr	r2, [pc, #48]	; (8013878 <sys_untimeout+0x70>)
 8013846:	6013      	str	r3, [r2, #0]
 8013848:	e003      	b.n	8013852 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	681a      	ldr	r2, [r3, #0]
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8013852:	68b9      	ldr	r1, [r7, #8]
 8013854:	200a      	movs	r0, #10
 8013856:	f7f8 fd41 	bl	800c2dc <memp_free>
      return;
 801385a:	e009      	b.n	8013870 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	60fb      	str	r3, [r7, #12]
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	60bb      	str	r3, [r7, #8]
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d1dc      	bne.n	8013826 <sys_untimeout+0x1e>
    }
  }
  return;
 801386c:	e000      	b.n	8013870 <sys_untimeout+0x68>
    return;
 801386e:	bf00      	nop
}
 8013870:	3710      	adds	r7, #16
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	2000be88 	.word	0x2000be88

0801387c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013882:	f7f2 fa2d 	bl	8005ce0 <sys_now>
 8013886:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013888:	4b17      	ldr	r3, [pc, #92]	; (80138e8 <sys_check_timeouts+0x6c>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d022      	beq.n	80138da <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	68fa      	ldr	r2, [r7, #12]
 801389a:	1ad3      	subs	r3, r2, r3
 801389c:	0fdb      	lsrs	r3, r3, #31
 801389e:	f003 0301 	and.w	r3, r3, #1
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d11a      	bne.n	80138de <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	4a0e      	ldr	r2, [pc, #56]	; (80138e8 <sys_check_timeouts+0x6c>)
 80138ae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	689b      	ldr	r3, [r3, #8]
 80138b4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	68db      	ldr	r3, [r3, #12]
 80138ba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	4a0a      	ldr	r2, [pc, #40]	; (80138ec <sys_check_timeouts+0x70>)
 80138c2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80138c4:	68b9      	ldr	r1, [r7, #8]
 80138c6:	200a      	movs	r0, #10
 80138c8:	f7f8 fd08 	bl	800c2dc <memp_free>
    if (handler != NULL) {
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d0da      	beq.n	8013888 <sys_check_timeouts+0xc>
      handler(arg);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6838      	ldr	r0, [r7, #0]
 80138d6:	4798      	blx	r3
  do {
 80138d8:	e7d6      	b.n	8013888 <sys_check_timeouts+0xc>
      return;
 80138da:	bf00      	nop
 80138dc:	e000      	b.n	80138e0 <sys_check_timeouts+0x64>
      return;
 80138de:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80138e0:	3710      	adds	r7, #16
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	2000be88 	.word	0x2000be88
 80138ec:	2000be8c 	.word	0x2000be8c

080138f0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80138f6:	4b16      	ldr	r3, [pc, #88]	; (8013950 <sys_timeouts_sleeptime+0x60>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d102      	bne.n	8013904 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80138fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013902:	e020      	b.n	8013946 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013904:	f7f2 f9ec 	bl	8005ce0 <sys_now>
 8013908:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801390a:	4b11      	ldr	r3, [pc, #68]	; (8013950 <sys_timeouts_sleeptime+0x60>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	685a      	ldr	r2, [r3, #4]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	1ad3      	subs	r3, r2, r3
 8013914:	0fdb      	lsrs	r3, r3, #31
 8013916:	f003 0301 	and.w	r3, r3, #1
 801391a:	b2db      	uxtb	r3, r3
 801391c:	2b00      	cmp	r3, #0
 801391e:	d001      	beq.n	8013924 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013920:	2300      	movs	r3, #0
 8013922:	e010      	b.n	8013946 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013924:	4b0a      	ldr	r3, [pc, #40]	; (8013950 <sys_timeouts_sleeptime+0x60>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	685a      	ldr	r2, [r3, #4]
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	1ad3      	subs	r3, r2, r3
 801392e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	da06      	bge.n	8013944 <sys_timeouts_sleeptime+0x54>
 8013936:	4b07      	ldr	r3, [pc, #28]	; (8013954 <sys_timeouts_sleeptime+0x64>)
 8013938:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801393c:	4906      	ldr	r1, [pc, #24]	; (8013958 <sys_timeouts_sleeptime+0x68>)
 801393e:	4807      	ldr	r0, [pc, #28]	; (801395c <sys_timeouts_sleeptime+0x6c>)
 8013940:	f003 fb1e 	bl	8016f80 <iprintf>
    return ret;
 8013944:	683b      	ldr	r3, [r7, #0]
  }
}
 8013946:	4618      	mov	r0, r3
 8013948:	3708      	adds	r7, #8
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	2000be88 	.word	0x2000be88
 8013954:	0801a310 	.word	0x0801a310
 8013958:	0801a3e4 	.word	0x0801a3e4
 801395c:	0801a384 	.word	0x0801a384

08013960 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013964:	f003 fb24 	bl	8016fb0 <rand>
 8013968:	4603      	mov	r3, r0
 801396a:	b29b      	uxth	r3, r3
 801396c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013970:	b29b      	uxth	r3, r3
 8013972:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013976:	b29a      	uxth	r2, r3
 8013978:	4b01      	ldr	r3, [pc, #4]	; (8013980 <udp_init+0x20>)
 801397a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801397c:	bf00      	nop
 801397e:	bd80      	pop	{r7, pc}
 8013980:	20000018 	.word	0x20000018

08013984 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	4613      	mov	r3, r2
 8013990:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d105      	bne.n	80139a4 <udp_input_local_match+0x20>
 8013998:	4b27      	ldr	r3, [pc, #156]	; (8013a38 <udp_input_local_match+0xb4>)
 801399a:	2287      	movs	r2, #135	; 0x87
 801399c:	4927      	ldr	r1, [pc, #156]	; (8013a3c <udp_input_local_match+0xb8>)
 801399e:	4828      	ldr	r0, [pc, #160]	; (8013a40 <udp_input_local_match+0xbc>)
 80139a0:	f003 faee 	bl	8016f80 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d105      	bne.n	80139b6 <udp_input_local_match+0x32>
 80139aa:	4b23      	ldr	r3, [pc, #140]	; (8013a38 <udp_input_local_match+0xb4>)
 80139ac:	2288      	movs	r2, #136	; 0x88
 80139ae:	4925      	ldr	r1, [pc, #148]	; (8013a44 <udp_input_local_match+0xc0>)
 80139b0:	4823      	ldr	r0, [pc, #140]	; (8013a40 <udp_input_local_match+0xbc>)
 80139b2:	f003 fae5 	bl	8016f80 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	7a1b      	ldrb	r3, [r3, #8]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d00b      	beq.n	80139d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	7a1a      	ldrb	r2, [r3, #8]
 80139c2:	4b21      	ldr	r3, [pc, #132]	; (8013a48 <udp_input_local_match+0xc4>)
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139ca:	3301      	adds	r3, #1
 80139cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d001      	beq.n	80139d6 <udp_input_local_match+0x52>
    return 0;
 80139d2:	2300      	movs	r3, #0
 80139d4:	e02b      	b.n	8013a2e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80139d6:	79fb      	ldrb	r3, [r7, #7]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d018      	beq.n	8013a0e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d013      	beq.n	8013a0a <udp_input_local_match+0x86>
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d00f      	beq.n	8013a0a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80139ea:	4b17      	ldr	r3, [pc, #92]	; (8013a48 <udp_input_local_match+0xc4>)
 80139ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80139ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139f2:	d00a      	beq.n	8013a0a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	681a      	ldr	r2, [r3, #0]
 80139f8:	4b13      	ldr	r3, [pc, #76]	; (8013a48 <udp_input_local_match+0xc4>)
 80139fa:	695b      	ldr	r3, [r3, #20]
 80139fc:	405a      	eors	r2, r3
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	3308      	adds	r3, #8
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d110      	bne.n	8013a2c <udp_input_local_match+0xa8>
          return 1;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e00f      	b.n	8013a2e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d009      	beq.n	8013a28 <udp_input_local_match+0xa4>
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d005      	beq.n	8013a28 <udp_input_local_match+0xa4>
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	4b09      	ldr	r3, [pc, #36]	; (8013a48 <udp_input_local_match+0xc4>)
 8013a22:	695b      	ldr	r3, [r3, #20]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d101      	bne.n	8013a2c <udp_input_local_match+0xa8>
        return 1;
 8013a28:	2301      	movs	r3, #1
 8013a2a:	e000      	b.n	8013a2e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013a2c:	2300      	movs	r3, #0
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3710      	adds	r7, #16
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}
 8013a36:	bf00      	nop
 8013a38:	0801a3f8 	.word	0x0801a3f8
 8013a3c:	0801a428 	.word	0x0801a428
 8013a40:	0801a44c 	.word	0x0801a44c
 8013a44:	0801a474 	.word	0x0801a474
 8013a48:	20008d38 	.word	0x20008d38

08013a4c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013a4c:	b590      	push	{r4, r7, lr}
 8013a4e:	b08d      	sub	sp, #52	; 0x34
 8013a50:	af02      	add	r7, sp, #8
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013a56:	2300      	movs	r3, #0
 8013a58:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d105      	bne.n	8013a6c <udp_input+0x20>
 8013a60:	4b7c      	ldr	r3, [pc, #496]	; (8013c54 <udp_input+0x208>)
 8013a62:	22cf      	movs	r2, #207	; 0xcf
 8013a64:	497c      	ldr	r1, [pc, #496]	; (8013c58 <udp_input+0x20c>)
 8013a66:	487d      	ldr	r0, [pc, #500]	; (8013c5c <udp_input+0x210>)
 8013a68:	f003 fa8a 	bl	8016f80 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d105      	bne.n	8013a7e <udp_input+0x32>
 8013a72:	4b78      	ldr	r3, [pc, #480]	; (8013c54 <udp_input+0x208>)
 8013a74:	22d0      	movs	r2, #208	; 0xd0
 8013a76:	497a      	ldr	r1, [pc, #488]	; (8013c60 <udp_input+0x214>)
 8013a78:	4878      	ldr	r0, [pc, #480]	; (8013c5c <udp_input+0x210>)
 8013a7a:	f003 fa81 	bl	8016f80 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	895b      	ldrh	r3, [r3, #10]
 8013a82:	2b07      	cmp	r3, #7
 8013a84:	d803      	bhi.n	8013a8e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f7f9 fa5e 	bl	800cf48 <pbuf_free>
    goto end;
 8013a8c:	e0de      	b.n	8013c4c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013a94:	4b73      	ldr	r3, [pc, #460]	; (8013c64 <udp_input+0x218>)
 8013a96:	695b      	ldr	r3, [r3, #20]
 8013a98:	4a72      	ldr	r2, [pc, #456]	; (8013c64 <udp_input+0x218>)
 8013a9a:	6812      	ldr	r2, [r2, #0]
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f001 fcaa 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	881b      	ldrh	r3, [r3, #0]
 8013aac:	b29b      	uxth	r3, r3
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7f7 fdee 	bl	800b690 <lwip_htons>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	885b      	ldrh	r3, [r3, #2]
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7f7 fde6 	bl	800b690 <lwip_htons>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013acc:	2300      	movs	r3, #0
 8013ace:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ad4:	4b64      	ldr	r3, [pc, #400]	; (8013c68 <udp_input+0x21c>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8013ada:	e054      	b.n	8013b86 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ade:	8a5b      	ldrh	r3, [r3, #18]
 8013ae0:	89fa      	ldrh	r2, [r7, #14]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	d14a      	bne.n	8013b7c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013ae6:	7cfb      	ldrb	r3, [r7, #19]
 8013ae8:	461a      	mov	r2, r3
 8013aea:	6839      	ldr	r1, [r7, #0]
 8013aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013aee:	f7ff ff49 	bl	8013984 <udp_input_local_match>
 8013af2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d041      	beq.n	8013b7c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afa:	7c1b      	ldrb	r3, [r3, #16]
 8013afc:	f003 0304 	and.w	r3, r3, #4
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d11d      	bne.n	8013b40 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d102      	bne.n	8013b10 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0c:	61fb      	str	r3, [r7, #28]
 8013b0e:	e017      	b.n	8013b40 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013b10:	7cfb      	ldrb	r3, [r7, #19]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d014      	beq.n	8013b40 <udp_input+0xf4>
 8013b16:	4b53      	ldr	r3, [pc, #332]	; (8013c64 <udp_input+0x218>)
 8013b18:	695b      	ldr	r3, [r3, #20]
 8013b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b1e:	d10f      	bne.n	8013b40 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	681a      	ldr	r2, [r3, #0]
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	3304      	adds	r3, #4
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d008      	beq.n	8013b40 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b30:	681a      	ldr	r2, [r3, #0]
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	3304      	adds	r3, #4
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d101      	bne.n	8013b40 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b42:	8a9b      	ldrh	r3, [r3, #20]
 8013b44:	8a3a      	ldrh	r2, [r7, #16]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d118      	bne.n	8013b7c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d005      	beq.n	8013b5e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b54:	685a      	ldr	r2, [r3, #4]
 8013b56:	4b43      	ldr	r3, [pc, #268]	; (8013c64 <udp_input+0x218>)
 8013b58:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d10e      	bne.n	8013b7c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013b5e:	6a3b      	ldr	r3, [r7, #32]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d014      	beq.n	8013b8e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b66:	68da      	ldr	r2, [r3, #12]
 8013b68:	6a3b      	ldr	r3, [r7, #32]
 8013b6a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013b6c:	4b3e      	ldr	r3, [pc, #248]	; (8013c68 <udp_input+0x21c>)
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b72:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013b74:	4a3c      	ldr	r2, [pc, #240]	; (8013c68 <udp_input+0x21c>)
 8013b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b78:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013b7a:	e008      	b.n	8013b8e <udp_input+0x142>
      }
    }

    prev = pcb;
 8013b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	627b      	str	r3, [r7, #36]	; 0x24
 8013b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d1a7      	bne.n	8013adc <udp_input+0x90>
 8013b8c:	e000      	b.n	8013b90 <udp_input+0x144>
        break;
 8013b8e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d101      	bne.n	8013b9a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013b96:	69fb      	ldr	r3, [r7, #28]
 8013b98:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <udp_input+0x15a>
    for_us = 1;
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	76fb      	strb	r3, [r7, #27]
 8013ba4:	e00a      	b.n	8013bbc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	3304      	adds	r3, #4
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	4b2d      	ldr	r3, [pc, #180]	; (8013c64 <udp_input+0x218>)
 8013bae:	695b      	ldr	r3, [r3, #20]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	bf0c      	ite	eq
 8013bb4:	2301      	moveq	r3, #1
 8013bb6:	2300      	movne	r3, #0
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013bbc:	7efb      	ldrb	r3, [r7, #27]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d041      	beq.n	8013c46 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013bc2:	2108      	movs	r1, #8
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7f9 f939 	bl	800ce3c <pbuf_remove_header>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d00a      	beq.n	8013be6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013bd0:	4b20      	ldr	r3, [pc, #128]	; (8013c54 <udp_input+0x208>)
 8013bd2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013bd6:	4925      	ldr	r1, [pc, #148]	; (8013c6c <udp_input+0x220>)
 8013bd8:	4820      	ldr	r0, [pc, #128]	; (8013c5c <udp_input+0x210>)
 8013bda:	f003 f9d1 	bl	8016f80 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f7f9 f9b2 	bl	800cf48 <pbuf_free>
      goto end;
 8013be4:	e032      	b.n	8013c4c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d012      	beq.n	8013c12 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bee:	699b      	ldr	r3, [r3, #24]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00a      	beq.n	8013c0a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf6:	699c      	ldr	r4, [r3, #24]
 8013bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfa:	69d8      	ldr	r0, [r3, #28]
 8013bfc:	8a3b      	ldrh	r3, [r7, #16]
 8013bfe:	9300      	str	r3, [sp, #0]
 8013c00:	4b1b      	ldr	r3, [pc, #108]	; (8013c70 <udp_input+0x224>)
 8013c02:	687a      	ldr	r2, [r7, #4]
 8013c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c06:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013c08:	e021      	b.n	8013c4e <udp_input+0x202>
        pbuf_free(p);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f7f9 f99c 	bl	800cf48 <pbuf_free>
        goto end;
 8013c10:	e01c      	b.n	8013c4c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013c12:	7cfb      	ldrb	r3, [r7, #19]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d112      	bne.n	8013c3e <udp_input+0x1f2>
 8013c18:	4b12      	ldr	r3, [pc, #72]	; (8013c64 <udp_input+0x218>)
 8013c1a:	695b      	ldr	r3, [r3, #20]
 8013c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c20:	2be0      	cmp	r3, #224	; 0xe0
 8013c22:	d00c      	beq.n	8013c3e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013c24:	4b0f      	ldr	r3, [pc, #60]	; (8013c64 <udp_input+0x218>)
 8013c26:	899b      	ldrh	r3, [r3, #12]
 8013c28:	3308      	adds	r3, #8
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	b21b      	sxth	r3, r3
 8013c2e:	4619      	mov	r1, r3
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f7f9 f976 	bl	800cf22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013c36:	2103      	movs	r1, #3
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f001 f8b5 	bl	8014da8 <icmp_dest_unreach>
      pbuf_free(p);
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f7f9 f982 	bl	800cf48 <pbuf_free>
  return;
 8013c44:	e003      	b.n	8013c4e <udp_input+0x202>
    pbuf_free(p);
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f7f9 f97e 	bl	800cf48 <pbuf_free>
  return;
 8013c4c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013c4e:	372c      	adds	r7, #44	; 0x2c
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd90      	pop	{r4, r7, pc}
 8013c54:	0801a3f8 	.word	0x0801a3f8
 8013c58:	0801a49c 	.word	0x0801a49c
 8013c5c:	0801a44c 	.word	0x0801a44c
 8013c60:	0801a4b4 	.word	0x0801a4b4
 8013c64:	20008d38 	.word	0x20008d38
 8013c68:	2000be94 	.word	0x2000be94
 8013c6c:	0801a4d0 	.word	0x0801a4d0
 8013c70:	20008d48 	.word	0x20008d48

08013c74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013c74:	b480      	push	{r7}
 8013c76:	b085      	sub	sp, #20
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d01e      	beq.n	8013cc2 <udp_netif_ip_addr_changed+0x4e>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d01a      	beq.n	8013cc2 <udp_netif_ip_addr_changed+0x4e>
 8013c8c:	683b      	ldr	r3, [r7, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d017      	beq.n	8013cc2 <udp_netif_ip_addr_changed+0x4e>
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d013      	beq.n	8013cc2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c9a:	4b0c      	ldr	r3, [pc, #48]	; (8013ccc <udp_netif_ip_addr_changed+0x58>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	60fb      	str	r3, [r7, #12]
 8013ca0:	e00c      	b.n	8013cbc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d103      	bne.n	8013cb6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	68db      	ldr	r3, [r3, #12]
 8013cba:	60fb      	str	r3, [r7, #12]
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d1ef      	bne.n	8013ca2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013cc2:	bf00      	nop
 8013cc4:	3714      	adds	r7, #20
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bc80      	pop	{r7}
 8013cca:	4770      	bx	lr
 8013ccc:	2000be94 	.word	0x2000be94

08013cd0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013cd8:	4915      	ldr	r1, [pc, #84]	; (8013d30 <etharp_free_entry+0x60>)
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	440b      	add	r3, r1
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d013      	beq.n	8013d14 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013cec:	4910      	ldr	r1, [pc, #64]	; (8013d30 <etharp_free_entry+0x60>)
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	4613      	mov	r3, r2
 8013cf2:	005b      	lsls	r3, r3, #1
 8013cf4:	4413      	add	r3, r2
 8013cf6:	00db      	lsls	r3, r3, #3
 8013cf8:	440b      	add	r3, r1
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7f9 f923 	bl	800cf48 <pbuf_free>
    arp_table[i].q = NULL;
 8013d02:	490b      	ldr	r1, [pc, #44]	; (8013d30 <etharp_free_entry+0x60>)
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	4613      	mov	r3, r2
 8013d08:	005b      	lsls	r3, r3, #1
 8013d0a:	4413      	add	r3, r2
 8013d0c:	00db      	lsls	r3, r3, #3
 8013d0e:	440b      	add	r3, r1
 8013d10:	2200      	movs	r2, #0
 8013d12:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013d14:	4906      	ldr	r1, [pc, #24]	; (8013d30 <etharp_free_entry+0x60>)
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	4613      	mov	r3, r2
 8013d1a:	005b      	lsls	r3, r3, #1
 8013d1c:	4413      	add	r3, r2
 8013d1e:	00db      	lsls	r3, r3, #3
 8013d20:	440b      	add	r3, r1
 8013d22:	3314      	adds	r3, #20
 8013d24:	2200      	movs	r2, #0
 8013d26:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013d28:	bf00      	nop
 8013d2a:	3708      	adds	r7, #8
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	2000be98 	.word	0x2000be98

08013d34 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	607b      	str	r3, [r7, #4]
 8013d3e:	e096      	b.n	8013e6e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013d40:	494f      	ldr	r1, [pc, #316]	; (8013e80 <etharp_tmr+0x14c>)
 8013d42:	687a      	ldr	r2, [r7, #4]
 8013d44:	4613      	mov	r3, r2
 8013d46:	005b      	lsls	r3, r3, #1
 8013d48:	4413      	add	r3, r2
 8013d4a:	00db      	lsls	r3, r3, #3
 8013d4c:	440b      	add	r3, r1
 8013d4e:	3314      	adds	r3, #20
 8013d50:	781b      	ldrb	r3, [r3, #0]
 8013d52:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013d54:	78fb      	ldrb	r3, [r7, #3]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	f000 8086 	beq.w	8013e68 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013d5c:	4948      	ldr	r1, [pc, #288]	; (8013e80 <etharp_tmr+0x14c>)
 8013d5e:	687a      	ldr	r2, [r7, #4]
 8013d60:	4613      	mov	r3, r2
 8013d62:	005b      	lsls	r3, r3, #1
 8013d64:	4413      	add	r3, r2
 8013d66:	00db      	lsls	r3, r3, #3
 8013d68:	440b      	add	r3, r1
 8013d6a:	3312      	adds	r3, #18
 8013d6c:	881b      	ldrh	r3, [r3, #0]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	b298      	uxth	r0, r3
 8013d72:	4943      	ldr	r1, [pc, #268]	; (8013e80 <etharp_tmr+0x14c>)
 8013d74:	687a      	ldr	r2, [r7, #4]
 8013d76:	4613      	mov	r3, r2
 8013d78:	005b      	lsls	r3, r3, #1
 8013d7a:	4413      	add	r3, r2
 8013d7c:	00db      	lsls	r3, r3, #3
 8013d7e:	440b      	add	r3, r1
 8013d80:	3312      	adds	r3, #18
 8013d82:	4602      	mov	r2, r0
 8013d84:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d86:	493e      	ldr	r1, [pc, #248]	; (8013e80 <etharp_tmr+0x14c>)
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	4613      	mov	r3, r2
 8013d8c:	005b      	lsls	r3, r3, #1
 8013d8e:	4413      	add	r3, r2
 8013d90:	00db      	lsls	r3, r3, #3
 8013d92:	440b      	add	r3, r1
 8013d94:	3312      	adds	r3, #18
 8013d96:	881b      	ldrh	r3, [r3, #0]
 8013d98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013d9c:	d215      	bcs.n	8013dca <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013d9e:	4938      	ldr	r1, [pc, #224]	; (8013e80 <etharp_tmr+0x14c>)
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	4613      	mov	r3, r2
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	4413      	add	r3, r2
 8013da8:	00db      	lsls	r3, r3, #3
 8013daa:	440b      	add	r3, r1
 8013dac:	3314      	adds	r3, #20
 8013dae:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	d10e      	bne.n	8013dd2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013db4:	4932      	ldr	r1, [pc, #200]	; (8013e80 <etharp_tmr+0x14c>)
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	4613      	mov	r3, r2
 8013dba:	005b      	lsls	r3, r3, #1
 8013dbc:	4413      	add	r3, r2
 8013dbe:	00db      	lsls	r3, r3, #3
 8013dc0:	440b      	add	r3, r1
 8013dc2:	3312      	adds	r3, #18
 8013dc4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013dc6:	2b04      	cmp	r3, #4
 8013dc8:	d903      	bls.n	8013dd2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f7ff ff80 	bl	8013cd0 <etharp_free_entry>
 8013dd0:	e04a      	b.n	8013e68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013dd2:	492b      	ldr	r1, [pc, #172]	; (8013e80 <etharp_tmr+0x14c>)
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	005b      	lsls	r3, r3, #1
 8013dda:	4413      	add	r3, r2
 8013ddc:	00db      	lsls	r3, r3, #3
 8013dde:	440b      	add	r3, r1
 8013de0:	3314      	adds	r3, #20
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	2b03      	cmp	r3, #3
 8013de6:	d10a      	bne.n	8013dfe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013de8:	4925      	ldr	r1, [pc, #148]	; (8013e80 <etharp_tmr+0x14c>)
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	4613      	mov	r3, r2
 8013dee:	005b      	lsls	r3, r3, #1
 8013df0:	4413      	add	r3, r2
 8013df2:	00db      	lsls	r3, r3, #3
 8013df4:	440b      	add	r3, r1
 8013df6:	3314      	adds	r3, #20
 8013df8:	2204      	movs	r2, #4
 8013dfa:	701a      	strb	r2, [r3, #0]
 8013dfc:	e034      	b.n	8013e68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013dfe:	4920      	ldr	r1, [pc, #128]	; (8013e80 <etharp_tmr+0x14c>)
 8013e00:	687a      	ldr	r2, [r7, #4]
 8013e02:	4613      	mov	r3, r2
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	4413      	add	r3, r2
 8013e08:	00db      	lsls	r3, r3, #3
 8013e0a:	440b      	add	r3, r1
 8013e0c:	3314      	adds	r3, #20
 8013e0e:	781b      	ldrb	r3, [r3, #0]
 8013e10:	2b04      	cmp	r3, #4
 8013e12:	d10a      	bne.n	8013e2a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013e14:	491a      	ldr	r1, [pc, #104]	; (8013e80 <etharp_tmr+0x14c>)
 8013e16:	687a      	ldr	r2, [r7, #4]
 8013e18:	4613      	mov	r3, r2
 8013e1a:	005b      	lsls	r3, r3, #1
 8013e1c:	4413      	add	r3, r2
 8013e1e:	00db      	lsls	r3, r3, #3
 8013e20:	440b      	add	r3, r1
 8013e22:	3314      	adds	r3, #20
 8013e24:	2202      	movs	r2, #2
 8013e26:	701a      	strb	r2, [r3, #0]
 8013e28:	e01e      	b.n	8013e68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013e2a:	4915      	ldr	r1, [pc, #84]	; (8013e80 <etharp_tmr+0x14c>)
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	4613      	mov	r3, r2
 8013e30:	005b      	lsls	r3, r3, #1
 8013e32:	4413      	add	r3, r2
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	440b      	add	r3, r1
 8013e38:	3314      	adds	r3, #20
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d113      	bne.n	8013e68 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013e40:	490f      	ldr	r1, [pc, #60]	; (8013e80 <etharp_tmr+0x14c>)
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	4613      	mov	r3, r2
 8013e46:	005b      	lsls	r3, r3, #1
 8013e48:	4413      	add	r3, r2
 8013e4a:	00db      	lsls	r3, r3, #3
 8013e4c:	440b      	add	r3, r1
 8013e4e:	3308      	adds	r3, #8
 8013e50:	6818      	ldr	r0, [r3, #0]
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	4613      	mov	r3, r2
 8013e56:	005b      	lsls	r3, r3, #1
 8013e58:	4413      	add	r3, r2
 8013e5a:	00db      	lsls	r3, r3, #3
 8013e5c:	4a08      	ldr	r2, [pc, #32]	; (8013e80 <etharp_tmr+0x14c>)
 8013e5e:	4413      	add	r3, r2
 8013e60:	3304      	adds	r3, #4
 8013e62:	4619      	mov	r1, r3
 8013e64:	f000 fe6e 	bl	8014b44 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	607b      	str	r3, [r7, #4]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2b09      	cmp	r3, #9
 8013e72:	f77f af65 	ble.w	8013d40 <etharp_tmr+0xc>
      }
    }
  }
}
 8013e76:	bf00      	nop
 8013e78:	bf00      	nop
 8013e7a:	3708      	adds	r7, #8
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}
 8013e80:	2000be98 	.word	0x2000be98

08013e84 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b08a      	sub	sp, #40	; 0x28
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	60f8      	str	r0, [r7, #12]
 8013e8c:	460b      	mov	r3, r1
 8013e8e:	607a      	str	r2, [r7, #4]
 8013e90:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013e92:	230a      	movs	r3, #10
 8013e94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013e96:	230a      	movs	r3, #10
 8013e98:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013e9a:	230a      	movs	r3, #10
 8013e9c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013ea2:	230a      	movs	r3, #10
 8013ea4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	83bb      	strh	r3, [r7, #28]
 8013eaa:	2300      	movs	r3, #0
 8013eac:	837b      	strh	r3, [r7, #26]
 8013eae:	2300      	movs	r3, #0
 8013eb0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	843b      	strh	r3, [r7, #32]
 8013eb6:	e0ae      	b.n	8014016 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013eb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ebc:	49a6      	ldr	r1, [pc, #664]	; (8014158 <etharp_find_entry+0x2d4>)
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	005b      	lsls	r3, r3, #1
 8013ec2:	4413      	add	r3, r2
 8013ec4:	00db      	lsls	r3, r3, #3
 8013ec6:	440b      	add	r3, r1
 8013ec8:	3314      	adds	r3, #20
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013ece:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013ed2:	2b0a      	cmp	r3, #10
 8013ed4:	d105      	bne.n	8013ee2 <etharp_find_entry+0x5e>
 8013ed6:	7dfb      	ldrb	r3, [r7, #23]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d102      	bne.n	8013ee2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013edc:	8c3b      	ldrh	r3, [r7, #32]
 8013ede:	847b      	strh	r3, [r7, #34]	; 0x22
 8013ee0:	e095      	b.n	801400e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013ee2:	7dfb      	ldrb	r3, [r7, #23]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	f000 8092 	beq.w	801400e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013eea:	7dfb      	ldrb	r3, [r7, #23]
 8013eec:	2b01      	cmp	r3, #1
 8013eee:	d009      	beq.n	8013f04 <etharp_find_entry+0x80>
 8013ef0:	7dfb      	ldrb	r3, [r7, #23]
 8013ef2:	2b01      	cmp	r3, #1
 8013ef4:	d806      	bhi.n	8013f04 <etharp_find_entry+0x80>
 8013ef6:	4b99      	ldr	r3, [pc, #612]	; (801415c <etharp_find_entry+0x2d8>)
 8013ef8:	f240 1223 	movw	r2, #291	; 0x123
 8013efc:	4998      	ldr	r1, [pc, #608]	; (8014160 <etharp_find_entry+0x2dc>)
 8013efe:	4899      	ldr	r0, [pc, #612]	; (8014164 <etharp_find_entry+0x2e0>)
 8013f00:	f003 f83e 	bl	8016f80 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d020      	beq.n	8013f4c <etharp_find_entry+0xc8>
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	6819      	ldr	r1, [r3, #0]
 8013f0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f12:	4891      	ldr	r0, [pc, #580]	; (8014158 <etharp_find_entry+0x2d4>)
 8013f14:	4613      	mov	r3, r2
 8013f16:	005b      	lsls	r3, r3, #1
 8013f18:	4413      	add	r3, r2
 8013f1a:	00db      	lsls	r3, r3, #3
 8013f1c:	4403      	add	r3, r0
 8013f1e:	3304      	adds	r3, #4
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	4299      	cmp	r1, r3
 8013f24:	d112      	bne.n	8013f4c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d00c      	beq.n	8013f46 <etharp_find_entry+0xc2>
 8013f2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f30:	4989      	ldr	r1, [pc, #548]	; (8014158 <etharp_find_entry+0x2d4>)
 8013f32:	4613      	mov	r3, r2
 8013f34:	005b      	lsls	r3, r3, #1
 8013f36:	4413      	add	r3, r2
 8013f38:	00db      	lsls	r3, r3, #3
 8013f3a:	440b      	add	r3, r1
 8013f3c:	3308      	adds	r3, #8
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	429a      	cmp	r2, r3
 8013f44:	d102      	bne.n	8013f4c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013f46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f4a:	e100      	b.n	801414e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013f4c:	7dfb      	ldrb	r3, [r7, #23]
 8013f4e:	2b01      	cmp	r3, #1
 8013f50:	d140      	bne.n	8013fd4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013f52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f56:	4980      	ldr	r1, [pc, #512]	; (8014158 <etharp_find_entry+0x2d4>)
 8013f58:	4613      	mov	r3, r2
 8013f5a:	005b      	lsls	r3, r3, #1
 8013f5c:	4413      	add	r3, r2
 8013f5e:	00db      	lsls	r3, r3, #3
 8013f60:	440b      	add	r3, r1
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d01a      	beq.n	8013f9e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013f68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f6c:	497a      	ldr	r1, [pc, #488]	; (8014158 <etharp_find_entry+0x2d4>)
 8013f6e:	4613      	mov	r3, r2
 8013f70:	005b      	lsls	r3, r3, #1
 8013f72:	4413      	add	r3, r2
 8013f74:	00db      	lsls	r3, r3, #3
 8013f76:	440b      	add	r3, r1
 8013f78:	3312      	adds	r3, #18
 8013f7a:	881b      	ldrh	r3, [r3, #0]
 8013f7c:	8bba      	ldrh	r2, [r7, #28]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d845      	bhi.n	801400e <etharp_find_entry+0x18a>
            old_queue = i;
 8013f82:	8c3b      	ldrh	r3, [r7, #32]
 8013f84:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013f86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f8a:	4973      	ldr	r1, [pc, #460]	; (8014158 <etharp_find_entry+0x2d4>)
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	005b      	lsls	r3, r3, #1
 8013f90:	4413      	add	r3, r2
 8013f92:	00db      	lsls	r3, r3, #3
 8013f94:	440b      	add	r3, r1
 8013f96:	3312      	adds	r3, #18
 8013f98:	881b      	ldrh	r3, [r3, #0]
 8013f9a:	83bb      	strh	r3, [r7, #28]
 8013f9c:	e037      	b.n	801400e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013f9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fa2:	496d      	ldr	r1, [pc, #436]	; (8014158 <etharp_find_entry+0x2d4>)
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	005b      	lsls	r3, r3, #1
 8013fa8:	4413      	add	r3, r2
 8013faa:	00db      	lsls	r3, r3, #3
 8013fac:	440b      	add	r3, r1
 8013fae:	3312      	adds	r3, #18
 8013fb0:	881b      	ldrh	r3, [r3, #0]
 8013fb2:	8b7a      	ldrh	r2, [r7, #26]
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d82a      	bhi.n	801400e <etharp_find_entry+0x18a>
            old_pending = i;
 8013fb8:	8c3b      	ldrh	r3, [r7, #32]
 8013fba:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013fbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fc0:	4965      	ldr	r1, [pc, #404]	; (8014158 <etharp_find_entry+0x2d4>)
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	005b      	lsls	r3, r3, #1
 8013fc6:	4413      	add	r3, r2
 8013fc8:	00db      	lsls	r3, r3, #3
 8013fca:	440b      	add	r3, r1
 8013fcc:	3312      	adds	r3, #18
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	837b      	strh	r3, [r7, #26]
 8013fd2:	e01c      	b.n	801400e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013fd4:	7dfb      	ldrb	r3, [r7, #23]
 8013fd6:	2b01      	cmp	r3, #1
 8013fd8:	d919      	bls.n	801400e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013fda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fde:	495e      	ldr	r1, [pc, #376]	; (8014158 <etharp_find_entry+0x2d4>)
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	005b      	lsls	r3, r3, #1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	00db      	lsls	r3, r3, #3
 8013fe8:	440b      	add	r3, r1
 8013fea:	3312      	adds	r3, #18
 8013fec:	881b      	ldrh	r3, [r3, #0]
 8013fee:	8b3a      	ldrh	r2, [r7, #24]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d80c      	bhi.n	801400e <etharp_find_entry+0x18a>
            old_stable = i;
 8013ff4:	8c3b      	ldrh	r3, [r7, #32]
 8013ff6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013ff8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ffc:	4956      	ldr	r1, [pc, #344]	; (8014158 <etharp_find_entry+0x2d4>)
 8013ffe:	4613      	mov	r3, r2
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	4413      	add	r3, r2
 8014004:	00db      	lsls	r3, r3, #3
 8014006:	440b      	add	r3, r1
 8014008:	3312      	adds	r3, #18
 801400a:	881b      	ldrh	r3, [r3, #0]
 801400c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801400e:	8c3b      	ldrh	r3, [r7, #32]
 8014010:	3301      	adds	r3, #1
 8014012:	b29b      	uxth	r3, r3
 8014014:	843b      	strh	r3, [r7, #32]
 8014016:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801401a:	2b09      	cmp	r3, #9
 801401c:	f77f af4c 	ble.w	8013eb8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014020:	7afb      	ldrb	r3, [r7, #11]
 8014022:	f003 0302 	and.w	r3, r3, #2
 8014026:	2b00      	cmp	r3, #0
 8014028:	d108      	bne.n	801403c <etharp_find_entry+0x1b8>
 801402a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801402e:	2b0a      	cmp	r3, #10
 8014030:	d107      	bne.n	8014042 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014032:	7afb      	ldrb	r3, [r7, #11]
 8014034:	f003 0301 	and.w	r3, r3, #1
 8014038:	2b00      	cmp	r3, #0
 801403a:	d102      	bne.n	8014042 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801403c:	f04f 33ff 	mov.w	r3, #4294967295
 8014040:	e085      	b.n	801414e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014046:	2b09      	cmp	r3, #9
 8014048:	dc02      	bgt.n	8014050 <etharp_find_entry+0x1cc>
    i = empty;
 801404a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801404c:	843b      	strh	r3, [r7, #32]
 801404e:	e039      	b.n	80140c4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014050:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014054:	2b09      	cmp	r3, #9
 8014056:	dc14      	bgt.n	8014082 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801405a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801405c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014060:	493d      	ldr	r1, [pc, #244]	; (8014158 <etharp_find_entry+0x2d4>)
 8014062:	4613      	mov	r3, r2
 8014064:	005b      	lsls	r3, r3, #1
 8014066:	4413      	add	r3, r2
 8014068:	00db      	lsls	r3, r3, #3
 801406a:	440b      	add	r3, r1
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d018      	beq.n	80140a4 <etharp_find_entry+0x220>
 8014072:	4b3a      	ldr	r3, [pc, #232]	; (801415c <etharp_find_entry+0x2d8>)
 8014074:	f240 126d 	movw	r2, #365	; 0x16d
 8014078:	493b      	ldr	r1, [pc, #236]	; (8014168 <etharp_find_entry+0x2e4>)
 801407a:	483a      	ldr	r0, [pc, #232]	; (8014164 <etharp_find_entry+0x2e0>)
 801407c:	f002 ff80 	bl	8016f80 <iprintf>
 8014080:	e010      	b.n	80140a4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014082:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014086:	2b09      	cmp	r3, #9
 8014088:	dc02      	bgt.n	8014090 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801408a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801408c:	843b      	strh	r3, [r7, #32]
 801408e:	e009      	b.n	80140a4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014090:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014094:	2b09      	cmp	r3, #9
 8014096:	dc02      	bgt.n	801409e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014098:	8bfb      	ldrh	r3, [r7, #30]
 801409a:	843b      	strh	r3, [r7, #32]
 801409c:	e002      	b.n	80140a4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801409e:	f04f 33ff 	mov.w	r3, #4294967295
 80140a2:	e054      	b.n	801414e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80140a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140a8:	2b09      	cmp	r3, #9
 80140aa:	dd06      	ble.n	80140ba <etharp_find_entry+0x236>
 80140ac:	4b2b      	ldr	r3, [pc, #172]	; (801415c <etharp_find_entry+0x2d8>)
 80140ae:	f240 127f 	movw	r2, #383	; 0x17f
 80140b2:	492e      	ldr	r1, [pc, #184]	; (801416c <etharp_find_entry+0x2e8>)
 80140b4:	482b      	ldr	r0, [pc, #172]	; (8014164 <etharp_find_entry+0x2e0>)
 80140b6:	f002 ff63 	bl	8016f80 <iprintf>
    etharp_free_entry(i);
 80140ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140be:	4618      	mov	r0, r3
 80140c0:	f7ff fe06 	bl	8013cd0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80140c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140c8:	2b09      	cmp	r3, #9
 80140ca:	dd06      	ble.n	80140da <etharp_find_entry+0x256>
 80140cc:	4b23      	ldr	r3, [pc, #140]	; (801415c <etharp_find_entry+0x2d8>)
 80140ce:	f240 1283 	movw	r2, #387	; 0x183
 80140d2:	4926      	ldr	r1, [pc, #152]	; (801416c <etharp_find_entry+0x2e8>)
 80140d4:	4823      	ldr	r0, [pc, #140]	; (8014164 <etharp_find_entry+0x2e0>)
 80140d6:	f002 ff53 	bl	8016f80 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80140da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140de:	491e      	ldr	r1, [pc, #120]	; (8014158 <etharp_find_entry+0x2d4>)
 80140e0:	4613      	mov	r3, r2
 80140e2:	005b      	lsls	r3, r3, #1
 80140e4:	4413      	add	r3, r2
 80140e6:	00db      	lsls	r3, r3, #3
 80140e8:	440b      	add	r3, r1
 80140ea:	3314      	adds	r3, #20
 80140ec:	781b      	ldrb	r3, [r3, #0]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d006      	beq.n	8014100 <etharp_find_entry+0x27c>
 80140f2:	4b1a      	ldr	r3, [pc, #104]	; (801415c <etharp_find_entry+0x2d8>)
 80140f4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80140f8:	491d      	ldr	r1, [pc, #116]	; (8014170 <etharp_find_entry+0x2ec>)
 80140fa:	481a      	ldr	r0, [pc, #104]	; (8014164 <etharp_find_entry+0x2e0>)
 80140fc:	f002 ff40 	bl	8016f80 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d00b      	beq.n	801411e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014106:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	6819      	ldr	r1, [r3, #0]
 801410e:	4812      	ldr	r0, [pc, #72]	; (8014158 <etharp_find_entry+0x2d4>)
 8014110:	4613      	mov	r3, r2
 8014112:	005b      	lsls	r3, r3, #1
 8014114:	4413      	add	r3, r2
 8014116:	00db      	lsls	r3, r3, #3
 8014118:	4403      	add	r3, r0
 801411a:	3304      	adds	r3, #4
 801411c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801411e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014122:	490d      	ldr	r1, [pc, #52]	; (8014158 <etharp_find_entry+0x2d4>)
 8014124:	4613      	mov	r3, r2
 8014126:	005b      	lsls	r3, r3, #1
 8014128:	4413      	add	r3, r2
 801412a:	00db      	lsls	r3, r3, #3
 801412c:	440b      	add	r3, r1
 801412e:	3312      	adds	r3, #18
 8014130:	2200      	movs	r2, #0
 8014132:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014134:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014138:	4907      	ldr	r1, [pc, #28]	; (8014158 <etharp_find_entry+0x2d4>)
 801413a:	4613      	mov	r3, r2
 801413c:	005b      	lsls	r3, r3, #1
 801413e:	4413      	add	r3, r2
 8014140:	00db      	lsls	r3, r3, #3
 8014142:	440b      	add	r3, r1
 8014144:	3308      	adds	r3, #8
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801414a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801414e:	4618      	mov	r0, r3
 8014150:	3728      	adds	r7, #40	; 0x28
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
 8014156:	bf00      	nop
 8014158:	2000be98 	.word	0x2000be98
 801415c:	0801a75c 	.word	0x0801a75c
 8014160:	0801a794 	.word	0x0801a794
 8014164:	0801a7d4 	.word	0x0801a7d4
 8014168:	0801a7fc 	.word	0x0801a7fc
 801416c:	0801a814 	.word	0x0801a814
 8014170:	0801a828 	.word	0x0801a828

08014174 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b088      	sub	sp, #32
 8014178:	af02      	add	r7, sp, #8
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
 8014180:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014188:	2b06      	cmp	r3, #6
 801418a:	d006      	beq.n	801419a <etharp_update_arp_entry+0x26>
 801418c:	4b48      	ldr	r3, [pc, #288]	; (80142b0 <etharp_update_arp_entry+0x13c>)
 801418e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014192:	4948      	ldr	r1, [pc, #288]	; (80142b4 <etharp_update_arp_entry+0x140>)
 8014194:	4848      	ldr	r0, [pc, #288]	; (80142b8 <etharp_update_arp_entry+0x144>)
 8014196:	f002 fef3 	bl	8016f80 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d012      	beq.n	80141c6 <etharp_update_arp_entry+0x52>
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d00e      	beq.n	80141c6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	68f9      	ldr	r1, [r7, #12]
 80141ae:	4618      	mov	r0, r3
 80141b0:	f001 f922 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 80141b4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d105      	bne.n	80141c6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80141c2:	2be0      	cmp	r3, #224	; 0xe0
 80141c4:	d102      	bne.n	80141cc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80141c6:	f06f 030f 	mvn.w	r3, #15
 80141ca:	e06c      	b.n	80142a6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80141cc:	78fb      	ldrb	r3, [r7, #3]
 80141ce:	68fa      	ldr	r2, [r7, #12]
 80141d0:	4619      	mov	r1, r3
 80141d2:	68b8      	ldr	r0, [r7, #8]
 80141d4:	f7ff fe56 	bl	8013e84 <etharp_find_entry>
 80141d8:	4603      	mov	r3, r0
 80141da:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80141dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	da02      	bge.n	80141ea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80141e4:	8afb      	ldrh	r3, [r7, #22]
 80141e6:	b25b      	sxtb	r3, r3
 80141e8:	e05d      	b.n	80142a6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80141ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141ee:	4933      	ldr	r1, [pc, #204]	; (80142bc <etharp_update_arp_entry+0x148>)
 80141f0:	4613      	mov	r3, r2
 80141f2:	005b      	lsls	r3, r3, #1
 80141f4:	4413      	add	r3, r2
 80141f6:	00db      	lsls	r3, r3, #3
 80141f8:	440b      	add	r3, r1
 80141fa:	3314      	adds	r3, #20
 80141fc:	2202      	movs	r2, #2
 80141fe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014200:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014204:	492d      	ldr	r1, [pc, #180]	; (80142bc <etharp_update_arp_entry+0x148>)
 8014206:	4613      	mov	r3, r2
 8014208:	005b      	lsls	r3, r3, #1
 801420a:	4413      	add	r3, r2
 801420c:	00db      	lsls	r3, r3, #3
 801420e:	440b      	add	r3, r1
 8014210:	3308      	adds	r3, #8
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014216:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801421a:	4613      	mov	r3, r2
 801421c:	005b      	lsls	r3, r3, #1
 801421e:	4413      	add	r3, r2
 8014220:	00db      	lsls	r3, r3, #3
 8014222:	3308      	adds	r3, #8
 8014224:	4a25      	ldr	r2, [pc, #148]	; (80142bc <etharp_update_arp_entry+0x148>)
 8014226:	4413      	add	r3, r2
 8014228:	3304      	adds	r3, #4
 801422a:	2206      	movs	r2, #6
 801422c:	6879      	ldr	r1, [r7, #4]
 801422e:	4618      	mov	r0, r3
 8014230:	f002 fdb2 	bl	8016d98 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014234:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014238:	4920      	ldr	r1, [pc, #128]	; (80142bc <etharp_update_arp_entry+0x148>)
 801423a:	4613      	mov	r3, r2
 801423c:	005b      	lsls	r3, r3, #1
 801423e:	4413      	add	r3, r2
 8014240:	00db      	lsls	r3, r3, #3
 8014242:	440b      	add	r3, r1
 8014244:	3312      	adds	r3, #18
 8014246:	2200      	movs	r2, #0
 8014248:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801424a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801424e:	491b      	ldr	r1, [pc, #108]	; (80142bc <etharp_update_arp_entry+0x148>)
 8014250:	4613      	mov	r3, r2
 8014252:	005b      	lsls	r3, r3, #1
 8014254:	4413      	add	r3, r2
 8014256:	00db      	lsls	r3, r3, #3
 8014258:	440b      	add	r3, r1
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d021      	beq.n	80142a4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014260:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014264:	4915      	ldr	r1, [pc, #84]	; (80142bc <etharp_update_arp_entry+0x148>)
 8014266:	4613      	mov	r3, r2
 8014268:	005b      	lsls	r3, r3, #1
 801426a:	4413      	add	r3, r2
 801426c:	00db      	lsls	r3, r3, #3
 801426e:	440b      	add	r3, r1
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014274:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014278:	4910      	ldr	r1, [pc, #64]	; (80142bc <etharp_update_arp_entry+0x148>)
 801427a:	4613      	mov	r3, r2
 801427c:	005b      	lsls	r3, r3, #1
 801427e:	4413      	add	r3, r2
 8014280:	00db      	lsls	r3, r3, #3
 8014282:	440b      	add	r3, r1
 8014284:	2200      	movs	r2, #0
 8014286:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801428e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014292:	9300      	str	r3, [sp, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6939      	ldr	r1, [r7, #16]
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f001 ffb9 	bl	8016210 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801429e:	6938      	ldr	r0, [r7, #16]
 80142a0:	f7f8 fe52 	bl	800cf48 <pbuf_free>
  }
  return ERR_OK;
 80142a4:	2300      	movs	r3, #0
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3718      	adds	r7, #24
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	bf00      	nop
 80142b0:	0801a75c 	.word	0x0801a75c
 80142b4:	0801a854 	.word	0x0801a854
 80142b8:	0801a7d4 	.word	0x0801a7d4
 80142bc:	2000be98 	.word	0x2000be98

080142c0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142c8:	2300      	movs	r3, #0
 80142ca:	60fb      	str	r3, [r7, #12]
 80142cc:	e01e      	b.n	801430c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80142ce:	4913      	ldr	r1, [pc, #76]	; (801431c <etharp_cleanup_netif+0x5c>)
 80142d0:	68fa      	ldr	r2, [r7, #12]
 80142d2:	4613      	mov	r3, r2
 80142d4:	005b      	lsls	r3, r3, #1
 80142d6:	4413      	add	r3, r2
 80142d8:	00db      	lsls	r3, r3, #3
 80142da:	440b      	add	r3, r1
 80142dc:	3314      	adds	r3, #20
 80142de:	781b      	ldrb	r3, [r3, #0]
 80142e0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80142e2:	7afb      	ldrb	r3, [r7, #11]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d00e      	beq.n	8014306 <etharp_cleanup_netif+0x46>
 80142e8:	490c      	ldr	r1, [pc, #48]	; (801431c <etharp_cleanup_netif+0x5c>)
 80142ea:	68fa      	ldr	r2, [r7, #12]
 80142ec:	4613      	mov	r3, r2
 80142ee:	005b      	lsls	r3, r3, #1
 80142f0:	4413      	add	r3, r2
 80142f2:	00db      	lsls	r3, r3, #3
 80142f4:	440b      	add	r3, r1
 80142f6:	3308      	adds	r3, #8
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d102      	bne.n	8014306 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014300:	68f8      	ldr	r0, [r7, #12]
 8014302:	f7ff fce5 	bl	8013cd0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	3301      	adds	r3, #1
 801430a:	60fb      	str	r3, [r7, #12]
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2b09      	cmp	r3, #9
 8014310:	dddd      	ble.n	80142ce <etharp_cleanup_netif+0xe>
    }
  }
}
 8014312:	bf00      	nop
 8014314:	bf00      	nop
 8014316:	3710      	adds	r7, #16
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	2000be98 	.word	0x2000be98

08014320 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014320:	b5b0      	push	{r4, r5, r7, lr}
 8014322:	b08a      	sub	sp, #40	; 0x28
 8014324:	af04      	add	r7, sp, #16
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d107      	bne.n	8014340 <etharp_input+0x20>
 8014330:	4b3d      	ldr	r3, [pc, #244]	; (8014428 <etharp_input+0x108>)
 8014332:	f240 228a 	movw	r2, #650	; 0x28a
 8014336:	493d      	ldr	r1, [pc, #244]	; (801442c <etharp_input+0x10c>)
 8014338:	483d      	ldr	r0, [pc, #244]	; (8014430 <etharp_input+0x110>)
 801433a:	f002 fe21 	bl	8016f80 <iprintf>
 801433e:	e06f      	b.n	8014420 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	881b      	ldrh	r3, [r3, #0]
 801434a:	b29b      	uxth	r3, r3
 801434c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014350:	d10c      	bne.n	801436c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014356:	2b06      	cmp	r3, #6
 8014358:	d108      	bne.n	801436c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801435e:	2b04      	cmp	r3, #4
 8014360:	d104      	bne.n	801436c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	885b      	ldrh	r3, [r3, #2]
 8014366:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014368:	2b08      	cmp	r3, #8
 801436a:	d003      	beq.n	8014374 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f7f8 fdeb 	bl	800cf48 <pbuf_free>
    return;
 8014372:	e055      	b.n	8014420 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	330e      	adds	r3, #14
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	3318      	adds	r3, #24
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	3304      	adds	r3, #4
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d102      	bne.n	8014394 <etharp_input+0x74>
    for_us = 0;
 801438e:	2300      	movs	r3, #0
 8014390:	75fb      	strb	r3, [r7, #23]
 8014392:	e009      	b.n	80143a8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014394:	68ba      	ldr	r2, [r7, #8]
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	3304      	adds	r3, #4
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	429a      	cmp	r2, r3
 801439e:	bf0c      	ite	eq
 80143a0:	2301      	moveq	r3, #1
 80143a2:	2300      	movne	r3, #0
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	f103 0208 	add.w	r2, r3, #8
 80143ae:	7dfb      	ldrb	r3, [r7, #23]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d001      	beq.n	80143b8 <etharp_input+0x98>
 80143b4:	2301      	movs	r3, #1
 80143b6:	e000      	b.n	80143ba <etharp_input+0x9a>
 80143b8:	2302      	movs	r3, #2
 80143ba:	f107 010c 	add.w	r1, r7, #12
 80143be:	6838      	ldr	r0, [r7, #0]
 80143c0:	f7ff fed8 	bl	8014174 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	88db      	ldrh	r3, [r3, #6]
 80143c8:	b29b      	uxth	r3, r3
 80143ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143ce:	d003      	beq.n	80143d8 <etharp_input+0xb8>
 80143d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143d4:	d01e      	beq.n	8014414 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80143d6:	e020      	b.n	801441a <etharp_input+0xfa>
      if (for_us) {
 80143d8:	7dfb      	ldrb	r3, [r7, #23]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d01c      	beq.n	8014418 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80143f4:	693a      	ldr	r2, [r7, #16]
 80143f6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80143f8:	2102      	movs	r1, #2
 80143fa:	9103      	str	r1, [sp, #12]
 80143fc:	f107 010c 	add.w	r1, r7, #12
 8014400:	9102      	str	r1, [sp, #8]
 8014402:	9201      	str	r2, [sp, #4]
 8014404:	9300      	str	r3, [sp, #0]
 8014406:	462b      	mov	r3, r5
 8014408:	4622      	mov	r2, r4
 801440a:	4601      	mov	r1, r0
 801440c:	6838      	ldr	r0, [r7, #0]
 801440e:	f000 faeb 	bl	80149e8 <etharp_raw>
      break;
 8014412:	e001      	b.n	8014418 <etharp_input+0xf8>
      break;
 8014414:	bf00      	nop
 8014416:	e000      	b.n	801441a <etharp_input+0xfa>
      break;
 8014418:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7f8 fd94 	bl	800cf48 <pbuf_free>
}
 8014420:	3718      	adds	r7, #24
 8014422:	46bd      	mov	sp, r7
 8014424:	bdb0      	pop	{r4, r5, r7, pc}
 8014426:	bf00      	nop
 8014428:	0801a75c 	.word	0x0801a75c
 801442c:	0801a8ac 	.word	0x0801a8ac
 8014430:	0801a7d4 	.word	0x0801a7d4

08014434 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b086      	sub	sp, #24
 8014438:	af02      	add	r7, sp, #8
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	4613      	mov	r3, r2
 8014440:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014442:	79fa      	ldrb	r2, [r7, #7]
 8014444:	4944      	ldr	r1, [pc, #272]	; (8014558 <etharp_output_to_arp_index+0x124>)
 8014446:	4613      	mov	r3, r2
 8014448:	005b      	lsls	r3, r3, #1
 801444a:	4413      	add	r3, r2
 801444c:	00db      	lsls	r3, r3, #3
 801444e:	440b      	add	r3, r1
 8014450:	3314      	adds	r3, #20
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	2b01      	cmp	r3, #1
 8014456:	d806      	bhi.n	8014466 <etharp_output_to_arp_index+0x32>
 8014458:	4b40      	ldr	r3, [pc, #256]	; (801455c <etharp_output_to_arp_index+0x128>)
 801445a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801445e:	4940      	ldr	r1, [pc, #256]	; (8014560 <etharp_output_to_arp_index+0x12c>)
 8014460:	4840      	ldr	r0, [pc, #256]	; (8014564 <etharp_output_to_arp_index+0x130>)
 8014462:	f002 fd8d 	bl	8016f80 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014466:	79fa      	ldrb	r2, [r7, #7]
 8014468:	493b      	ldr	r1, [pc, #236]	; (8014558 <etharp_output_to_arp_index+0x124>)
 801446a:	4613      	mov	r3, r2
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	4413      	add	r3, r2
 8014470:	00db      	lsls	r3, r3, #3
 8014472:	440b      	add	r3, r1
 8014474:	3314      	adds	r3, #20
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	2b02      	cmp	r3, #2
 801447a:	d153      	bne.n	8014524 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801447c:	79fa      	ldrb	r2, [r7, #7]
 801447e:	4936      	ldr	r1, [pc, #216]	; (8014558 <etharp_output_to_arp_index+0x124>)
 8014480:	4613      	mov	r3, r2
 8014482:	005b      	lsls	r3, r3, #1
 8014484:	4413      	add	r3, r2
 8014486:	00db      	lsls	r3, r3, #3
 8014488:	440b      	add	r3, r1
 801448a:	3312      	adds	r3, #18
 801448c:	881b      	ldrh	r3, [r3, #0]
 801448e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014492:	d919      	bls.n	80144c8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014494:	79fa      	ldrb	r2, [r7, #7]
 8014496:	4613      	mov	r3, r2
 8014498:	005b      	lsls	r3, r3, #1
 801449a:	4413      	add	r3, r2
 801449c:	00db      	lsls	r3, r3, #3
 801449e:	4a2e      	ldr	r2, [pc, #184]	; (8014558 <etharp_output_to_arp_index+0x124>)
 80144a0:	4413      	add	r3, r2
 80144a2:	3304      	adds	r3, #4
 80144a4:	4619      	mov	r1, r3
 80144a6:	68f8      	ldr	r0, [r7, #12]
 80144a8:	f000 fb4c 	bl	8014b44 <etharp_request>
 80144ac:	4603      	mov	r3, r0
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d138      	bne.n	8014524 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80144b2:	79fa      	ldrb	r2, [r7, #7]
 80144b4:	4928      	ldr	r1, [pc, #160]	; (8014558 <etharp_output_to_arp_index+0x124>)
 80144b6:	4613      	mov	r3, r2
 80144b8:	005b      	lsls	r3, r3, #1
 80144ba:	4413      	add	r3, r2
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	440b      	add	r3, r1
 80144c0:	3314      	adds	r3, #20
 80144c2:	2203      	movs	r2, #3
 80144c4:	701a      	strb	r2, [r3, #0]
 80144c6:	e02d      	b.n	8014524 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80144c8:	79fa      	ldrb	r2, [r7, #7]
 80144ca:	4923      	ldr	r1, [pc, #140]	; (8014558 <etharp_output_to_arp_index+0x124>)
 80144cc:	4613      	mov	r3, r2
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	4413      	add	r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	440b      	add	r3, r1
 80144d6:	3312      	adds	r3, #18
 80144d8:	881b      	ldrh	r3, [r3, #0]
 80144da:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80144de:	d321      	bcc.n	8014524 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80144e0:	79fa      	ldrb	r2, [r7, #7]
 80144e2:	4613      	mov	r3, r2
 80144e4:	005b      	lsls	r3, r3, #1
 80144e6:	4413      	add	r3, r2
 80144e8:	00db      	lsls	r3, r3, #3
 80144ea:	4a1b      	ldr	r2, [pc, #108]	; (8014558 <etharp_output_to_arp_index+0x124>)
 80144ec:	4413      	add	r3, r2
 80144ee:	1d19      	adds	r1, r3, #4
 80144f0:	79fa      	ldrb	r2, [r7, #7]
 80144f2:	4613      	mov	r3, r2
 80144f4:	005b      	lsls	r3, r3, #1
 80144f6:	4413      	add	r3, r2
 80144f8:	00db      	lsls	r3, r3, #3
 80144fa:	3308      	adds	r3, #8
 80144fc:	4a16      	ldr	r2, [pc, #88]	; (8014558 <etharp_output_to_arp_index+0x124>)
 80144fe:	4413      	add	r3, r2
 8014500:	3304      	adds	r3, #4
 8014502:	461a      	mov	r2, r3
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f000 fafb 	bl	8014b00 <etharp_request_dst>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d109      	bne.n	8014524 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014510:	79fa      	ldrb	r2, [r7, #7]
 8014512:	4911      	ldr	r1, [pc, #68]	; (8014558 <etharp_output_to_arp_index+0x124>)
 8014514:	4613      	mov	r3, r2
 8014516:	005b      	lsls	r3, r3, #1
 8014518:	4413      	add	r3, r2
 801451a:	00db      	lsls	r3, r3, #3
 801451c:	440b      	add	r3, r1
 801451e:	3314      	adds	r3, #20
 8014520:	2203      	movs	r2, #3
 8014522:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801452a:	79fa      	ldrb	r2, [r7, #7]
 801452c:	4613      	mov	r3, r2
 801452e:	005b      	lsls	r3, r3, #1
 8014530:	4413      	add	r3, r2
 8014532:	00db      	lsls	r3, r3, #3
 8014534:	3308      	adds	r3, #8
 8014536:	4a08      	ldr	r2, [pc, #32]	; (8014558 <etharp_output_to_arp_index+0x124>)
 8014538:	4413      	add	r3, r2
 801453a:	3304      	adds	r3, #4
 801453c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014540:	9200      	str	r2, [sp, #0]
 8014542:	460a      	mov	r2, r1
 8014544:	68b9      	ldr	r1, [r7, #8]
 8014546:	68f8      	ldr	r0, [r7, #12]
 8014548:	f001 fe62 	bl	8016210 <ethernet_output>
 801454c:	4603      	mov	r3, r0
}
 801454e:	4618      	mov	r0, r3
 8014550:	3710      	adds	r7, #16
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	2000be98 	.word	0x2000be98
 801455c:	0801a75c 	.word	0x0801a75c
 8014560:	0801a8cc 	.word	0x0801a8cc
 8014564:	0801a7d4 	.word	0x0801a7d4

08014568 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b08a      	sub	sp, #40	; 0x28
 801456c:	af02      	add	r7, sp, #8
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d106      	bne.n	801458c <etharp_output+0x24>
 801457e:	4b73      	ldr	r3, [pc, #460]	; (801474c <etharp_output+0x1e4>)
 8014580:	f240 321e 	movw	r2, #798	; 0x31e
 8014584:	4972      	ldr	r1, [pc, #456]	; (8014750 <etharp_output+0x1e8>)
 8014586:	4873      	ldr	r0, [pc, #460]	; (8014754 <etharp_output+0x1ec>)
 8014588:	f002 fcfa 	bl	8016f80 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d106      	bne.n	80145a0 <etharp_output+0x38>
 8014592:	4b6e      	ldr	r3, [pc, #440]	; (801474c <etharp_output+0x1e4>)
 8014594:	f240 321f 	movw	r2, #799	; 0x31f
 8014598:	496f      	ldr	r1, [pc, #444]	; (8014758 <etharp_output+0x1f0>)
 801459a:	486e      	ldr	r0, [pc, #440]	; (8014754 <etharp_output+0x1ec>)
 801459c:	f002 fcf0 	bl	8016f80 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d106      	bne.n	80145b4 <etharp_output+0x4c>
 80145a6:	4b69      	ldr	r3, [pc, #420]	; (801474c <etharp_output+0x1e4>)
 80145a8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80145ac:	496b      	ldr	r1, [pc, #428]	; (801475c <etharp_output+0x1f4>)
 80145ae:	4869      	ldr	r0, [pc, #420]	; (8014754 <etharp_output+0x1ec>)
 80145b0:	f002 fce6 	bl	8016f80 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	68f9      	ldr	r1, [r7, #12]
 80145ba:	4618      	mov	r0, r3
 80145bc:	f000 ff1c 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 80145c0:	4603      	mov	r3, r0
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d002      	beq.n	80145cc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80145c6:	4b66      	ldr	r3, [pc, #408]	; (8014760 <etharp_output+0x1f8>)
 80145c8:	61fb      	str	r3, [r7, #28]
 80145ca:	e0af      	b.n	801472c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145d4:	2be0      	cmp	r3, #224	; 0xe0
 80145d6:	d118      	bne.n	801460a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80145d8:	2301      	movs	r3, #1
 80145da:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80145dc:	2300      	movs	r3, #0
 80145de:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80145e0:	235e      	movs	r3, #94	; 0x5e
 80145e2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	3301      	adds	r3, #1
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	3302      	adds	r3, #2
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	3303      	adds	r3, #3
 80145fe:	781b      	ldrb	r3, [r3, #0]
 8014600:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014602:	f107 0310 	add.w	r3, r7, #16
 8014606:	61fb      	str	r3, [r7, #28]
 8014608:	e090      	b.n	801472c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	3304      	adds	r3, #4
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	405a      	eors	r2, r3
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	3308      	adds	r3, #8
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4013      	ands	r3, r2
 801461e:	2b00      	cmp	r3, #0
 8014620:	d012      	beq.n	8014648 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014628:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801462c:	4293      	cmp	r3, r2
 801462e:	d00b      	beq.n	8014648 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	330c      	adds	r3, #12
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d003      	beq.n	8014642 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	330c      	adds	r3, #12
 801463e:	61bb      	str	r3, [r7, #24]
 8014640:	e002      	b.n	8014648 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014642:	f06f 0303 	mvn.w	r3, #3
 8014646:	e07d      	b.n	8014744 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014648:	4b46      	ldr	r3, [pc, #280]	; (8014764 <etharp_output+0x1fc>)
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	4619      	mov	r1, r3
 801464e:	4a46      	ldr	r2, [pc, #280]	; (8014768 <etharp_output+0x200>)
 8014650:	460b      	mov	r3, r1
 8014652:	005b      	lsls	r3, r3, #1
 8014654:	440b      	add	r3, r1
 8014656:	00db      	lsls	r3, r3, #3
 8014658:	4413      	add	r3, r2
 801465a:	3314      	adds	r3, #20
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	2b01      	cmp	r3, #1
 8014660:	d925      	bls.n	80146ae <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014662:	4b40      	ldr	r3, [pc, #256]	; (8014764 <etharp_output+0x1fc>)
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	4619      	mov	r1, r3
 8014668:	4a3f      	ldr	r2, [pc, #252]	; (8014768 <etharp_output+0x200>)
 801466a:	460b      	mov	r3, r1
 801466c:	005b      	lsls	r3, r3, #1
 801466e:	440b      	add	r3, r1
 8014670:	00db      	lsls	r3, r3, #3
 8014672:	4413      	add	r3, r2
 8014674:	3308      	adds	r3, #8
 8014676:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014678:	68fa      	ldr	r2, [r7, #12]
 801467a:	429a      	cmp	r2, r3
 801467c:	d117      	bne.n	80146ae <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	681a      	ldr	r2, [r3, #0]
 8014682:	4b38      	ldr	r3, [pc, #224]	; (8014764 <etharp_output+0x1fc>)
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	4618      	mov	r0, r3
 8014688:	4937      	ldr	r1, [pc, #220]	; (8014768 <etharp_output+0x200>)
 801468a:	4603      	mov	r3, r0
 801468c:	005b      	lsls	r3, r3, #1
 801468e:	4403      	add	r3, r0
 8014690:	00db      	lsls	r3, r3, #3
 8014692:	440b      	add	r3, r1
 8014694:	3304      	adds	r3, #4
 8014696:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014698:	429a      	cmp	r2, r3
 801469a:	d108      	bne.n	80146ae <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801469c:	4b31      	ldr	r3, [pc, #196]	; (8014764 <etharp_output+0x1fc>)
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	461a      	mov	r2, r3
 80146a2:	68b9      	ldr	r1, [r7, #8]
 80146a4:	68f8      	ldr	r0, [r7, #12]
 80146a6:	f7ff fec5 	bl	8014434 <etharp_output_to_arp_index>
 80146aa:	4603      	mov	r3, r0
 80146ac:	e04a      	b.n	8014744 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80146ae:	2300      	movs	r3, #0
 80146b0:	75fb      	strb	r3, [r7, #23]
 80146b2:	e031      	b.n	8014718 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80146b4:	7dfa      	ldrb	r2, [r7, #23]
 80146b6:	492c      	ldr	r1, [pc, #176]	; (8014768 <etharp_output+0x200>)
 80146b8:	4613      	mov	r3, r2
 80146ba:	005b      	lsls	r3, r3, #1
 80146bc:	4413      	add	r3, r2
 80146be:	00db      	lsls	r3, r3, #3
 80146c0:	440b      	add	r3, r1
 80146c2:	3314      	adds	r3, #20
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	2b01      	cmp	r3, #1
 80146c8:	d923      	bls.n	8014712 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80146ca:	7dfa      	ldrb	r2, [r7, #23]
 80146cc:	4926      	ldr	r1, [pc, #152]	; (8014768 <etharp_output+0x200>)
 80146ce:	4613      	mov	r3, r2
 80146d0:	005b      	lsls	r3, r3, #1
 80146d2:	4413      	add	r3, r2
 80146d4:	00db      	lsls	r3, r3, #3
 80146d6:	440b      	add	r3, r1
 80146d8:	3308      	adds	r3, #8
 80146da:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80146dc:	68fa      	ldr	r2, [r7, #12]
 80146de:	429a      	cmp	r2, r3
 80146e0:	d117      	bne.n	8014712 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	6819      	ldr	r1, [r3, #0]
 80146e6:	7dfa      	ldrb	r2, [r7, #23]
 80146e8:	481f      	ldr	r0, [pc, #124]	; (8014768 <etharp_output+0x200>)
 80146ea:	4613      	mov	r3, r2
 80146ec:	005b      	lsls	r3, r3, #1
 80146ee:	4413      	add	r3, r2
 80146f0:	00db      	lsls	r3, r3, #3
 80146f2:	4403      	add	r3, r0
 80146f4:	3304      	adds	r3, #4
 80146f6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80146f8:	4299      	cmp	r1, r3
 80146fa:	d10a      	bne.n	8014712 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80146fc:	4a19      	ldr	r2, [pc, #100]	; (8014764 <etharp_output+0x1fc>)
 80146fe:	7dfb      	ldrb	r3, [r7, #23]
 8014700:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014702:	7dfb      	ldrb	r3, [r7, #23]
 8014704:	461a      	mov	r2, r3
 8014706:	68b9      	ldr	r1, [r7, #8]
 8014708:	68f8      	ldr	r0, [r7, #12]
 801470a:	f7ff fe93 	bl	8014434 <etharp_output_to_arp_index>
 801470e:	4603      	mov	r3, r0
 8014710:	e018      	b.n	8014744 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014712:	7dfb      	ldrb	r3, [r7, #23]
 8014714:	3301      	adds	r3, #1
 8014716:	75fb      	strb	r3, [r7, #23]
 8014718:	7dfb      	ldrb	r3, [r7, #23]
 801471a:	2b09      	cmp	r3, #9
 801471c:	d9ca      	bls.n	80146b4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801471e:	68ba      	ldr	r2, [r7, #8]
 8014720:	69b9      	ldr	r1, [r7, #24]
 8014722:	68f8      	ldr	r0, [r7, #12]
 8014724:	f000 f822 	bl	801476c <etharp_query>
 8014728:	4603      	mov	r3, r0
 801472a:	e00b      	b.n	8014744 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014732:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014736:	9300      	str	r3, [sp, #0]
 8014738:	69fb      	ldr	r3, [r7, #28]
 801473a:	68b9      	ldr	r1, [r7, #8]
 801473c:	68f8      	ldr	r0, [r7, #12]
 801473e:	f001 fd67 	bl	8016210 <ethernet_output>
 8014742:	4603      	mov	r3, r0
}
 8014744:	4618      	mov	r0, r3
 8014746:	3720      	adds	r7, #32
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}
 801474c:	0801a75c 	.word	0x0801a75c
 8014750:	0801a8ac 	.word	0x0801a8ac
 8014754:	0801a7d4 	.word	0x0801a7d4
 8014758:	0801a8fc 	.word	0x0801a8fc
 801475c:	0801a89c 	.word	0x0801a89c
 8014760:	0801af64 	.word	0x0801af64
 8014764:	2000bf88 	.word	0x2000bf88
 8014768:	2000be98 	.word	0x2000be98

0801476c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b08c      	sub	sp, #48	; 0x30
 8014770:	af02      	add	r7, sp, #8
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	3326      	adds	r3, #38	; 0x26
 801477c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801477e:	23ff      	movs	r3, #255	; 0xff
 8014780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014784:	2300      	movs	r3, #0
 8014786:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	68f9      	ldr	r1, [r7, #12]
 801478e:	4618      	mov	r0, r3
 8014790:	f000 fe32 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d10c      	bne.n	80147b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80147a2:	2be0      	cmp	r3, #224	; 0xe0
 80147a4:	d006      	beq.n	80147b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d003      	beq.n	80147b4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d102      	bne.n	80147ba <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80147b4:	f06f 030f 	mvn.w	r3, #15
 80147b8:	e101      	b.n	80149be <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80147ba:	68fa      	ldr	r2, [r7, #12]
 80147bc:	2101      	movs	r1, #1
 80147be:	68b8      	ldr	r0, [r7, #8]
 80147c0:	f7ff fb60 	bl	8013e84 <etharp_find_entry>
 80147c4:	4603      	mov	r3, r0
 80147c6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80147c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	da02      	bge.n	80147d6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80147d0:	8a7b      	ldrh	r3, [r7, #18]
 80147d2:	b25b      	sxtb	r3, r3
 80147d4:	e0f3      	b.n	80149be <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80147d6:	8a7b      	ldrh	r3, [r7, #18]
 80147d8:	2b7e      	cmp	r3, #126	; 0x7e
 80147da:	d906      	bls.n	80147ea <etharp_query+0x7e>
 80147dc:	4b7a      	ldr	r3, [pc, #488]	; (80149c8 <etharp_query+0x25c>)
 80147de:	f240 32c1 	movw	r2, #961	; 0x3c1
 80147e2:	497a      	ldr	r1, [pc, #488]	; (80149cc <etharp_query+0x260>)
 80147e4:	487a      	ldr	r0, [pc, #488]	; (80149d0 <etharp_query+0x264>)
 80147e6:	f002 fbcb 	bl	8016f80 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80147ea:	8a7b      	ldrh	r3, [r7, #18]
 80147ec:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80147ee:	7c7a      	ldrb	r2, [r7, #17]
 80147f0:	4978      	ldr	r1, [pc, #480]	; (80149d4 <etharp_query+0x268>)
 80147f2:	4613      	mov	r3, r2
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	4413      	add	r3, r2
 80147f8:	00db      	lsls	r3, r3, #3
 80147fa:	440b      	add	r3, r1
 80147fc:	3314      	adds	r3, #20
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d115      	bne.n	8014830 <etharp_query+0xc4>
    is_new_entry = 1;
 8014804:	2301      	movs	r3, #1
 8014806:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014808:	7c7a      	ldrb	r2, [r7, #17]
 801480a:	4972      	ldr	r1, [pc, #456]	; (80149d4 <etharp_query+0x268>)
 801480c:	4613      	mov	r3, r2
 801480e:	005b      	lsls	r3, r3, #1
 8014810:	4413      	add	r3, r2
 8014812:	00db      	lsls	r3, r3, #3
 8014814:	440b      	add	r3, r1
 8014816:	3314      	adds	r3, #20
 8014818:	2201      	movs	r2, #1
 801481a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801481c:	7c7a      	ldrb	r2, [r7, #17]
 801481e:	496d      	ldr	r1, [pc, #436]	; (80149d4 <etharp_query+0x268>)
 8014820:	4613      	mov	r3, r2
 8014822:	005b      	lsls	r3, r3, #1
 8014824:	4413      	add	r3, r2
 8014826:	00db      	lsls	r3, r3, #3
 8014828:	440b      	add	r3, r1
 801482a:	3308      	adds	r3, #8
 801482c:	68fa      	ldr	r2, [r7, #12]
 801482e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014830:	7c7a      	ldrb	r2, [r7, #17]
 8014832:	4968      	ldr	r1, [pc, #416]	; (80149d4 <etharp_query+0x268>)
 8014834:	4613      	mov	r3, r2
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	00db      	lsls	r3, r3, #3
 801483c:	440b      	add	r3, r1
 801483e:	3314      	adds	r3, #20
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	2b01      	cmp	r3, #1
 8014844:	d011      	beq.n	801486a <etharp_query+0xfe>
 8014846:	7c7a      	ldrb	r2, [r7, #17]
 8014848:	4962      	ldr	r1, [pc, #392]	; (80149d4 <etharp_query+0x268>)
 801484a:	4613      	mov	r3, r2
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	4413      	add	r3, r2
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	440b      	add	r3, r1
 8014854:	3314      	adds	r3, #20
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	2b01      	cmp	r3, #1
 801485a:	d806      	bhi.n	801486a <etharp_query+0xfe>
 801485c:	4b5a      	ldr	r3, [pc, #360]	; (80149c8 <etharp_query+0x25c>)
 801485e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014862:	495d      	ldr	r1, [pc, #372]	; (80149d8 <etharp_query+0x26c>)
 8014864:	485a      	ldr	r0, [pc, #360]	; (80149d0 <etharp_query+0x264>)
 8014866:	f002 fb8b 	bl	8016f80 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801486a:	6a3b      	ldr	r3, [r7, #32]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d102      	bne.n	8014876 <etharp_query+0x10a>
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d10c      	bne.n	8014890 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014876:	68b9      	ldr	r1, [r7, #8]
 8014878:	68f8      	ldr	r0, [r7, #12]
 801487a:	f000 f963 	bl	8014b44 <etharp_request>
 801487e:	4603      	mov	r3, r0
 8014880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d102      	bne.n	8014890 <etharp_query+0x124>
      return result;
 801488a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801488e:	e096      	b.n	80149be <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d106      	bne.n	80148a4 <etharp_query+0x138>
 8014896:	4b4c      	ldr	r3, [pc, #304]	; (80149c8 <etharp_query+0x25c>)
 8014898:	f240 32e1 	movw	r2, #993	; 0x3e1
 801489c:	494f      	ldr	r1, [pc, #316]	; (80149dc <etharp_query+0x270>)
 801489e:	484c      	ldr	r0, [pc, #304]	; (80149d0 <etharp_query+0x264>)
 80148a0:	f002 fb6e 	bl	8016f80 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80148a4:	7c7a      	ldrb	r2, [r7, #17]
 80148a6:	494b      	ldr	r1, [pc, #300]	; (80149d4 <etharp_query+0x268>)
 80148a8:	4613      	mov	r3, r2
 80148aa:	005b      	lsls	r3, r3, #1
 80148ac:	4413      	add	r3, r2
 80148ae:	00db      	lsls	r3, r3, #3
 80148b0:	440b      	add	r3, r1
 80148b2:	3314      	adds	r3, #20
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	2b01      	cmp	r3, #1
 80148b8:	d917      	bls.n	80148ea <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80148ba:	4a49      	ldr	r2, [pc, #292]	; (80149e0 <etharp_query+0x274>)
 80148bc:	7c7b      	ldrb	r3, [r7, #17]
 80148be:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80148c0:	7c7a      	ldrb	r2, [r7, #17]
 80148c2:	4613      	mov	r3, r2
 80148c4:	005b      	lsls	r3, r3, #1
 80148c6:	4413      	add	r3, r2
 80148c8:	00db      	lsls	r3, r3, #3
 80148ca:	3308      	adds	r3, #8
 80148cc:	4a41      	ldr	r2, [pc, #260]	; (80149d4 <etharp_query+0x268>)
 80148ce:	4413      	add	r3, r2
 80148d0:	3304      	adds	r3, #4
 80148d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80148d6:	9200      	str	r2, [sp, #0]
 80148d8:	697a      	ldr	r2, [r7, #20]
 80148da:	6879      	ldr	r1, [r7, #4]
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f001 fc97 	bl	8016210 <ethernet_output>
 80148e2:	4603      	mov	r3, r0
 80148e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148e8:	e067      	b.n	80149ba <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80148ea:	7c7a      	ldrb	r2, [r7, #17]
 80148ec:	4939      	ldr	r1, [pc, #228]	; (80149d4 <etharp_query+0x268>)
 80148ee:	4613      	mov	r3, r2
 80148f0:	005b      	lsls	r3, r3, #1
 80148f2:	4413      	add	r3, r2
 80148f4:	00db      	lsls	r3, r3, #3
 80148f6:	440b      	add	r3, r1
 80148f8:	3314      	adds	r3, #20
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d15c      	bne.n	80149ba <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014900:	2300      	movs	r3, #0
 8014902:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014908:	e01c      	b.n	8014944 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	895a      	ldrh	r2, [r3, #10]
 801490e:	69fb      	ldr	r3, [r7, #28]
 8014910:	891b      	ldrh	r3, [r3, #8]
 8014912:	429a      	cmp	r2, r3
 8014914:	d10a      	bne.n	801492c <etharp_query+0x1c0>
 8014916:	69fb      	ldr	r3, [r7, #28]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d006      	beq.n	801492c <etharp_query+0x1c0>
 801491e:	4b2a      	ldr	r3, [pc, #168]	; (80149c8 <etharp_query+0x25c>)
 8014920:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014924:	492f      	ldr	r1, [pc, #188]	; (80149e4 <etharp_query+0x278>)
 8014926:	482a      	ldr	r0, [pc, #168]	; (80149d0 <etharp_query+0x264>)
 8014928:	f002 fb2a 	bl	8016f80 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	7b1b      	ldrb	r3, [r3, #12]
 8014930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <etharp_query+0x1d2>
        copy_needed = 1;
 8014938:	2301      	movs	r3, #1
 801493a:	61bb      	str	r3, [r7, #24]
        break;
 801493c:	e005      	b.n	801494a <etharp_query+0x1de>
      }
      p = p->next;
 801493e:	69fb      	ldr	r3, [r7, #28]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014944:	69fb      	ldr	r3, [r7, #28]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d1df      	bne.n	801490a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801494a:	69bb      	ldr	r3, [r7, #24]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d007      	beq.n	8014960 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014956:	200e      	movs	r0, #14
 8014958:	f7f8 fd84 	bl	800d464 <pbuf_clone>
 801495c:	61f8      	str	r0, [r7, #28]
 801495e:	e004      	b.n	801496a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014964:	69f8      	ldr	r0, [r7, #28]
 8014966:	f7f8 fb93 	bl	800d090 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801496a:	69fb      	ldr	r3, [r7, #28]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d021      	beq.n	80149b4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014970:	7c7a      	ldrb	r2, [r7, #17]
 8014972:	4918      	ldr	r1, [pc, #96]	; (80149d4 <etharp_query+0x268>)
 8014974:	4613      	mov	r3, r2
 8014976:	005b      	lsls	r3, r3, #1
 8014978:	4413      	add	r3, r2
 801497a:	00db      	lsls	r3, r3, #3
 801497c:	440b      	add	r3, r1
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d00a      	beq.n	801499a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014984:	7c7a      	ldrb	r2, [r7, #17]
 8014986:	4913      	ldr	r1, [pc, #76]	; (80149d4 <etharp_query+0x268>)
 8014988:	4613      	mov	r3, r2
 801498a:	005b      	lsls	r3, r3, #1
 801498c:	4413      	add	r3, r2
 801498e:	00db      	lsls	r3, r3, #3
 8014990:	440b      	add	r3, r1
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	4618      	mov	r0, r3
 8014996:	f7f8 fad7 	bl	800cf48 <pbuf_free>
      }
      arp_table[i].q = p;
 801499a:	7c7a      	ldrb	r2, [r7, #17]
 801499c:	490d      	ldr	r1, [pc, #52]	; (80149d4 <etharp_query+0x268>)
 801499e:	4613      	mov	r3, r2
 80149a0:	005b      	lsls	r3, r3, #1
 80149a2:	4413      	add	r3, r2
 80149a4:	00db      	lsls	r3, r3, #3
 80149a6:	440b      	add	r3, r1
 80149a8:	69fa      	ldr	r2, [r7, #28]
 80149aa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80149ac:	2300      	movs	r3, #0
 80149ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80149b2:	e002      	b.n	80149ba <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80149b4:	23ff      	movs	r3, #255	; 0xff
 80149b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80149ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3728      	adds	r7, #40	; 0x28
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	0801a75c 	.word	0x0801a75c
 80149cc:	0801a908 	.word	0x0801a908
 80149d0:	0801a7d4 	.word	0x0801a7d4
 80149d4:	2000be98 	.word	0x2000be98
 80149d8:	0801a918 	.word	0x0801a918
 80149dc:	0801a8fc 	.word	0x0801a8fc
 80149e0:	2000bf88 	.word	0x2000bf88
 80149e4:	0801a940 	.word	0x0801a940

080149e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b08a      	sub	sp, #40	; 0x28
 80149ec:	af02      	add	r7, sp, #8
 80149ee:	60f8      	str	r0, [r7, #12]
 80149f0:	60b9      	str	r1, [r7, #8]
 80149f2:	607a      	str	r2, [r7, #4]
 80149f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80149f6:	2300      	movs	r3, #0
 80149f8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d106      	bne.n	8014a0e <etharp_raw+0x26>
 8014a00:	4b3a      	ldr	r3, [pc, #232]	; (8014aec <etharp_raw+0x104>)
 8014a02:	f240 4257 	movw	r2, #1111	; 0x457
 8014a06:	493a      	ldr	r1, [pc, #232]	; (8014af0 <etharp_raw+0x108>)
 8014a08:	483a      	ldr	r0, [pc, #232]	; (8014af4 <etharp_raw+0x10c>)
 8014a0a:	f002 fab9 	bl	8016f80 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014a0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a12:	211c      	movs	r1, #28
 8014a14:	200e      	movs	r0, #14
 8014a16:	f7f7 ffb3 	bl	800c980 <pbuf_alloc>
 8014a1a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014a1c:	69bb      	ldr	r3, [r7, #24]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d102      	bne.n	8014a28 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014a22:	f04f 33ff 	mov.w	r3, #4294967295
 8014a26:	e05d      	b.n	8014ae4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014a28:	69bb      	ldr	r3, [r7, #24]
 8014a2a:	895b      	ldrh	r3, [r3, #10]
 8014a2c:	2b1b      	cmp	r3, #27
 8014a2e:	d806      	bhi.n	8014a3e <etharp_raw+0x56>
 8014a30:	4b2e      	ldr	r3, [pc, #184]	; (8014aec <etharp_raw+0x104>)
 8014a32:	f240 4262 	movw	r2, #1122	; 0x462
 8014a36:	4930      	ldr	r1, [pc, #192]	; (8014af8 <etharp_raw+0x110>)
 8014a38:	482e      	ldr	r0, [pc, #184]	; (8014af4 <etharp_raw+0x10c>)
 8014a3a:	f002 faa1 	bl	8016f80 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014a44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014a46:	4618      	mov	r0, r3
 8014a48:	f7f6 fe22 	bl	800b690 <lwip_htons>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	461a      	mov	r2, r3
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014a5a:	2b06      	cmp	r3, #6
 8014a5c:	d006      	beq.n	8014a6c <etharp_raw+0x84>
 8014a5e:	4b23      	ldr	r3, [pc, #140]	; (8014aec <etharp_raw+0x104>)
 8014a60:	f240 4269 	movw	r2, #1129	; 0x469
 8014a64:	4925      	ldr	r1, [pc, #148]	; (8014afc <etharp_raw+0x114>)
 8014a66:	4823      	ldr	r0, [pc, #140]	; (8014af4 <etharp_raw+0x10c>)
 8014a68:	f002 fa8a 	bl	8016f80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	3308      	adds	r3, #8
 8014a70:	2206      	movs	r2, #6
 8014a72:	6839      	ldr	r1, [r7, #0]
 8014a74:	4618      	mov	r0, r3
 8014a76:	f002 f98f 	bl	8016d98 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014a7a:	697b      	ldr	r3, [r7, #20]
 8014a7c:	3312      	adds	r3, #18
 8014a7e:	2206      	movs	r2, #6
 8014a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a82:	4618      	mov	r0, r3
 8014a84:	f002 f988 	bl	8016d98 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	330e      	adds	r3, #14
 8014a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a8e:	6812      	ldr	r2, [r2, #0]
 8014a90:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	3318      	adds	r3, #24
 8014a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a98:	6812      	ldr	r2, [r2, #0]
 8014a9a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	701a      	strb	r2, [r3, #0]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	f042 0201 	orr.w	r2, r2, #1
 8014aa8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	2200      	movs	r2, #0
 8014aae:	f042 0208 	orr.w	r2, r2, #8
 8014ab2:	709a      	strb	r2, [r3, #2]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	2206      	movs	r2, #6
 8014abc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	2204      	movs	r2, #4
 8014ac2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014ac4:	f640 0306 	movw	r3, #2054	; 0x806
 8014ac8:	9300      	str	r3, [sp, #0]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	68ba      	ldr	r2, [r7, #8]
 8014ace:	69b9      	ldr	r1, [r7, #24]
 8014ad0:	68f8      	ldr	r0, [r7, #12]
 8014ad2:	f001 fb9d 	bl	8016210 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014ad6:	69b8      	ldr	r0, [r7, #24]
 8014ad8:	f7f8 fa36 	bl	800cf48 <pbuf_free>
  p = NULL;
 8014adc:	2300      	movs	r3, #0
 8014ade:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014ae0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3720      	adds	r7, #32
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	0801a75c 	.word	0x0801a75c
 8014af0:	0801a8ac 	.word	0x0801a8ac
 8014af4:	0801a7d4 	.word	0x0801a7d4
 8014af8:	0801a95c 	.word	0x0801a95c
 8014afc:	0801a990 	.word	0x0801a990

08014b00 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b088      	sub	sp, #32
 8014b04:	af04      	add	r7, sp, #16
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	9203      	str	r2, [sp, #12]
 8014b20:	68ba      	ldr	r2, [r7, #8]
 8014b22:	9202      	str	r2, [sp, #8]
 8014b24:	4a06      	ldr	r2, [pc, #24]	; (8014b40 <etharp_request_dst+0x40>)
 8014b26:	9201      	str	r2, [sp, #4]
 8014b28:	9300      	str	r3, [sp, #0]
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	68f8      	ldr	r0, [r7, #12]
 8014b30:	f7ff ff5a 	bl	80149e8 <etharp_raw>
 8014b34:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3710      	adds	r7, #16
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	0801af6c 	.word	0x0801af6c

08014b44 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014b4e:	4a05      	ldr	r2, [pc, #20]	; (8014b64 <etharp_request+0x20>)
 8014b50:	6839      	ldr	r1, [r7, #0]
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f7ff ffd4 	bl	8014b00 <etharp_request_dst>
 8014b58:	4603      	mov	r3, r0
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3708      	adds	r7, #8
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	0801af64 	.word	0x0801af64

08014b68 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b08e      	sub	sp, #56	; 0x38
 8014b6c:	af04      	add	r7, sp, #16
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014b72:	4b87      	ldr	r3, [pc, #540]	; (8014d90 <icmp_input+0x228>)
 8014b74:	689b      	ldr	r3, [r3, #8]
 8014b76:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	f003 030f 	and.w	r3, r3, #15
 8014b80:	b2db      	uxtb	r3, r3
 8014b82:	009b      	lsls	r3, r3, #2
 8014b84:	b2db      	uxtb	r3, r3
 8014b86:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014b88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b8a:	2b13      	cmp	r3, #19
 8014b8c:	f240 80e8 	bls.w	8014d60 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	895b      	ldrh	r3, [r3, #10]
 8014b94:	2b03      	cmp	r3, #3
 8014b96:	f240 80e5 	bls.w	8014d64 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014ba4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	f000 80d2 	beq.w	8014d52 <icmp_input+0x1ea>
 8014bae:	2b08      	cmp	r3, #8
 8014bb0:	f040 80d2 	bne.w	8014d58 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014bb4:	4b77      	ldr	r3, [pc, #476]	; (8014d94 <icmp_input+0x22c>)
 8014bb6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014bb8:	4b75      	ldr	r3, [pc, #468]	; (8014d90 <icmp_input+0x228>)
 8014bba:	695b      	ldr	r3, [r3, #20]
 8014bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014bc0:	2be0      	cmp	r3, #224	; 0xe0
 8014bc2:	f000 80d6 	beq.w	8014d72 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014bc6:	4b72      	ldr	r3, [pc, #456]	; (8014d90 <icmp_input+0x228>)
 8014bc8:	695b      	ldr	r3, [r3, #20]
 8014bca:	4a71      	ldr	r2, [pc, #452]	; (8014d90 <icmp_input+0x228>)
 8014bcc:	6812      	ldr	r2, [r2, #0]
 8014bce:	4611      	mov	r1, r2
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f000 fc11 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f040 80cc 	bne.w	8014d76 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	891b      	ldrh	r3, [r3, #8]
 8014be2:	2b07      	cmp	r3, #7
 8014be4:	f240 80c0 	bls.w	8014d68 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f7f6 fdeb 	bl	800b7c4 <inet_chksum_pbuf>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d003      	beq.n	8014bfc <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f7f8 f9a7 	bl	800cf48 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014bfa:	e0c5      	b.n	8014d88 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014bfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bfe:	330e      	adds	r3, #14
 8014c00:	4619      	mov	r1, r3
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7f8 f90a 	bl	800ce1c <pbuf_add_header>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d04b      	beq.n	8014ca6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	891a      	ldrh	r2, [r3, #8]
 8014c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c14:	4413      	add	r3, r2
 8014c16:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	891b      	ldrh	r3, [r3, #8]
 8014c1c:	8b7a      	ldrh	r2, [r7, #26]
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	f0c0 80ab 	bcc.w	8014d7a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014c24:	8b7b      	ldrh	r3, [r7, #26]
 8014c26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c2a:	4619      	mov	r1, r3
 8014c2c:	200e      	movs	r0, #14
 8014c2e:	f7f7 fea7 	bl	800c980 <pbuf_alloc>
 8014c32:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	f000 80a1 	beq.w	8014d7e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	895b      	ldrh	r3, [r3, #10]
 8014c40:	461a      	mov	r2, r3
 8014c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c44:	3308      	adds	r3, #8
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d203      	bcs.n	8014c52 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014c4a:	6978      	ldr	r0, [r7, #20]
 8014c4c:	f7f8 f97c 	bl	800cf48 <pbuf_free>
          goto icmperr;
 8014c50:	e096      	b.n	8014d80 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014c52:	697b      	ldr	r3, [r7, #20]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f002 f89c 	bl	8016d98 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c62:	4619      	mov	r1, r3
 8014c64:	6978      	ldr	r0, [r7, #20]
 8014c66:	f7f8 f8e9 	bl	800ce3c <pbuf_remove_header>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d009      	beq.n	8014c84 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014c70:	4b49      	ldr	r3, [pc, #292]	; (8014d98 <icmp_input+0x230>)
 8014c72:	22b6      	movs	r2, #182	; 0xb6
 8014c74:	4949      	ldr	r1, [pc, #292]	; (8014d9c <icmp_input+0x234>)
 8014c76:	484a      	ldr	r0, [pc, #296]	; (8014da0 <icmp_input+0x238>)
 8014c78:	f002 f982 	bl	8016f80 <iprintf>
          pbuf_free(r);
 8014c7c:	6978      	ldr	r0, [r7, #20]
 8014c7e:	f7f8 f963 	bl	800cf48 <pbuf_free>
          goto icmperr;
 8014c82:	e07d      	b.n	8014d80 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014c84:	6879      	ldr	r1, [r7, #4]
 8014c86:	6978      	ldr	r0, [r7, #20]
 8014c88:	f7f8 fa80 	bl	800d18c <pbuf_copy>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d003      	beq.n	8014c9a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014c92:	6978      	ldr	r0, [r7, #20]
 8014c94:	f7f8 f958 	bl	800cf48 <pbuf_free>
          goto icmperr;
 8014c98:	e072      	b.n	8014d80 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f7f8 f954 	bl	800cf48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	607b      	str	r3, [r7, #4]
 8014ca4:	e00f      	b.n	8014cc6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ca8:	330e      	adds	r3, #14
 8014caa:	4619      	mov	r1, r3
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f7f8 f8c5 	bl	800ce3c <pbuf_remove_header>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d006      	beq.n	8014cc6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014cb8:	4b37      	ldr	r3, [pc, #220]	; (8014d98 <icmp_input+0x230>)
 8014cba:	22c7      	movs	r2, #199	; 0xc7
 8014cbc:	4939      	ldr	r1, [pc, #228]	; (8014da4 <icmp_input+0x23c>)
 8014cbe:	4838      	ldr	r0, [pc, #224]	; (8014da0 <icmp_input+0x238>)
 8014cc0:	f002 f95e 	bl	8016f80 <iprintf>
          goto icmperr;
 8014cc4:	e05c      	b.n	8014d80 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cce:	4619      	mov	r1, r3
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f7f8 f8a3 	bl	800ce1c <pbuf_add_header>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d13c      	bne.n	8014d56 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	681a      	ldr	r2, [r3, #0]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014cea:	4b29      	ldr	r3, [pc, #164]	; (8014d90 <icmp_input+0x228>)
 8014cec:	691a      	ldr	r2, [r3, #16]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	885b      	ldrh	r3, [r3, #2]
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014d02:	4293      	cmp	r3, r2
 8014d04:	d907      	bls.n	8014d16 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	885b      	ldrh	r3, [r3, #2]
 8014d0a:	b29b      	uxth	r3, r3
 8014d0c:	3309      	adds	r3, #9
 8014d0e:	b29a      	uxth	r2, r3
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	805a      	strh	r2, [r3, #2]
 8014d14:	e006      	b.n	8014d24 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	885b      	ldrh	r3, [r3, #2]
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	3308      	adds	r3, #8
 8014d1e:	b29a      	uxth	r2, r3
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	22ff      	movs	r2, #255	; 0xff
 8014d28:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	729a      	strb	r2, [r3, #10]
 8014d30:	2200      	movs	r2, #0
 8014d32:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	9302      	str	r3, [sp, #8]
 8014d38:	2301      	movs	r3, #1
 8014d3a:	9301      	str	r3, [sp, #4]
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	9300      	str	r3, [sp, #0]
 8014d40:	23ff      	movs	r3, #255	; 0xff
 8014d42:	2200      	movs	r2, #0
 8014d44:	69f9      	ldr	r1, [r7, #28]
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f000 fa7e 	bl	8015248 <ip4_output_if>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014d50:	e001      	b.n	8014d56 <icmp_input+0x1ee>
      break;
 8014d52:	bf00      	nop
 8014d54:	e000      	b.n	8014d58 <icmp_input+0x1f0>
      break;
 8014d56:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f7f8 f8f5 	bl	800cf48 <pbuf_free>
  return;
 8014d5e:	e013      	b.n	8014d88 <icmp_input+0x220>
    goto lenerr;
 8014d60:	bf00      	nop
 8014d62:	e002      	b.n	8014d6a <icmp_input+0x202>
    goto lenerr;
 8014d64:	bf00      	nop
 8014d66:	e000      	b.n	8014d6a <icmp_input+0x202>
        goto lenerr;
 8014d68:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f7f8 f8ec 	bl	800cf48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d70:	e00a      	b.n	8014d88 <icmp_input+0x220>
        goto icmperr;
 8014d72:	bf00      	nop
 8014d74:	e004      	b.n	8014d80 <icmp_input+0x218>
        goto icmperr;
 8014d76:	bf00      	nop
 8014d78:	e002      	b.n	8014d80 <icmp_input+0x218>
          goto icmperr;
 8014d7a:	bf00      	nop
 8014d7c:	e000      	b.n	8014d80 <icmp_input+0x218>
          goto icmperr;
 8014d7e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f7f8 f8e1 	bl	800cf48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d86:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014d88:	3728      	adds	r7, #40	; 0x28
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	20008d38 	.word	0x20008d38
 8014d94:	20008d4c 	.word	0x20008d4c
 8014d98:	0801a9d4 	.word	0x0801a9d4
 8014d9c:	0801aa0c 	.word	0x0801aa0c
 8014da0:	0801aa44 	.word	0x0801aa44
 8014da4:	0801aa6c 	.word	0x0801aa6c

08014da8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	460b      	mov	r3, r1
 8014db2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014db4:	78fb      	ldrb	r3, [r7, #3]
 8014db6:	461a      	mov	r2, r3
 8014db8:	2103      	movs	r1, #3
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f000 f814 	bl	8014de8 <icmp_send_response>
}
 8014dc0:	bf00      	nop
 8014dc2:	3708      	adds	r7, #8
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014dd4:	78fb      	ldrb	r3, [r7, #3]
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	210b      	movs	r1, #11
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f000 f804 	bl	8014de8 <icmp_send_response>
}
 8014de0:	bf00      	nop
 8014de2:	3708      	adds	r7, #8
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}

08014de8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b08c      	sub	sp, #48	; 0x30
 8014dec:	af04      	add	r7, sp, #16
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	460b      	mov	r3, r1
 8014df2:	70fb      	strb	r3, [r7, #3]
 8014df4:	4613      	mov	r3, r2
 8014df6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014df8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014dfc:	2124      	movs	r1, #36	; 0x24
 8014dfe:	2022      	movs	r0, #34	; 0x22
 8014e00:	f7f7 fdbe 	bl	800c980 <pbuf_alloc>
 8014e04:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d056      	beq.n	8014eba <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	895b      	ldrh	r3, [r3, #10]
 8014e10:	2b23      	cmp	r3, #35	; 0x23
 8014e12:	d806      	bhi.n	8014e22 <icmp_send_response+0x3a>
 8014e14:	4b2b      	ldr	r3, [pc, #172]	; (8014ec4 <icmp_send_response+0xdc>)
 8014e16:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014e1a:	492b      	ldr	r1, [pc, #172]	; (8014ec8 <icmp_send_response+0xe0>)
 8014e1c:	482b      	ldr	r0, [pc, #172]	; (8014ecc <icmp_send_response+0xe4>)
 8014e1e:	f002 f8af 	bl	8016f80 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014e28:	69fb      	ldr	r3, [r7, #28]
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	78fa      	ldrb	r2, [r7, #3]
 8014e32:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	78ba      	ldrb	r2, [r7, #2]
 8014e38:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	711a      	strb	r2, [r3, #4]
 8014e40:	2200      	movs	r2, #0
 8014e42:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	2200      	movs	r2, #0
 8014e48:	719a      	strb	r2, [r3, #6]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014e4e:	69fb      	ldr	r3, [r7, #28]
 8014e50:	685b      	ldr	r3, [r3, #4]
 8014e52:	f103 0008 	add.w	r0, r3, #8
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	221c      	movs	r2, #28
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	f001 ff9b 	bl	8016d98 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	68db      	ldr	r3, [r3, #12]
 8014e66:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014e68:	f107 030c 	add.w	r3, r7, #12
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f000 f82f 	bl	8014ed0 <ip4_route>
 8014e72:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d01b      	beq.n	8014eb2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014e7a:	697b      	ldr	r3, [r7, #20]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	709a      	strb	r2, [r3, #2]
 8014e80:	2200      	movs	r2, #0
 8014e82:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014e84:	69fb      	ldr	r3, [r7, #28]
 8014e86:	895b      	ldrh	r3, [r3, #10]
 8014e88:	4619      	mov	r1, r3
 8014e8a:	6978      	ldr	r0, [r7, #20]
 8014e8c:	f7f6 fc88 	bl	800b7a0 <inet_chksum>
 8014e90:	4603      	mov	r3, r0
 8014e92:	461a      	mov	r2, r3
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014e98:	f107 020c 	add.w	r2, r7, #12
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	9302      	str	r3, [sp, #8]
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	9301      	str	r3, [sp, #4]
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	9300      	str	r3, [sp, #0]
 8014ea8:	23ff      	movs	r3, #255	; 0xff
 8014eaa:	2100      	movs	r1, #0
 8014eac:	69f8      	ldr	r0, [r7, #28]
 8014eae:	f000 f9cb 	bl	8015248 <ip4_output_if>
  }
  pbuf_free(q);
 8014eb2:	69f8      	ldr	r0, [r7, #28]
 8014eb4:	f7f8 f848 	bl	800cf48 <pbuf_free>
 8014eb8:	e000      	b.n	8014ebc <icmp_send_response+0xd4>
    return;
 8014eba:	bf00      	nop
}
 8014ebc:	3720      	adds	r7, #32
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	0801a9d4 	.word	0x0801a9d4
 8014ec8:	0801aaa0 	.word	0x0801aaa0
 8014ecc:	0801aa44 	.word	0x0801aa44

08014ed0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b085      	sub	sp, #20
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014ed8:	4b32      	ldr	r3, [pc, #200]	; (8014fa4 <ip4_route+0xd4>)
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	60fb      	str	r3, [r7, #12]
 8014ede:	e036      	b.n	8014f4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ee6:	f003 0301 	and.w	r3, r3, #1
 8014eea:	b2db      	uxtb	r3, r3
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d02b      	beq.n	8014f48 <ip4_route+0x78>
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ef6:	089b      	lsrs	r3, r3, #2
 8014ef8:	f003 0301 	and.w	r3, r3, #1
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d022      	beq.n	8014f48 <ip4_route+0x78>
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	3304      	adds	r3, #4
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d01d      	beq.n	8014f48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	3304      	adds	r3, #4
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	405a      	eors	r2, r3
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	3308      	adds	r3, #8
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	4013      	ands	r3, r2
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d101      	bne.n	8014f28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	e038      	b.n	8014f9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f2e:	f003 0302 	and.w	r3, r3, #2
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d108      	bne.n	8014f48 <ip4_route+0x78>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681a      	ldr	r2, [r3, #0]
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	330c      	adds	r3, #12
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d101      	bne.n	8014f48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	e028      	b.n	8014f9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	60fb      	str	r3, [r7, #12]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d1c5      	bne.n	8014ee0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014f54:	4b14      	ldr	r3, [pc, #80]	; (8014fa8 <ip4_route+0xd8>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d01a      	beq.n	8014f92 <ip4_route+0xc2>
 8014f5c:	4b12      	ldr	r3, [pc, #72]	; (8014fa8 <ip4_route+0xd8>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f64:	f003 0301 	and.w	r3, r3, #1
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d012      	beq.n	8014f92 <ip4_route+0xc2>
 8014f6c:	4b0e      	ldr	r3, [pc, #56]	; (8014fa8 <ip4_route+0xd8>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f74:	f003 0304 	and.w	r3, r3, #4
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00a      	beq.n	8014f92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014f7c:	4b0a      	ldr	r3, [pc, #40]	; (8014fa8 <ip4_route+0xd8>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	3304      	adds	r3, #4
 8014f82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d004      	beq.n	8014f92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8014f90:	d101      	bne.n	8014f96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014f92:	2300      	movs	r3, #0
 8014f94:	e001      	b.n	8014f9a <ip4_route+0xca>
  }

  return netif_default;
 8014f96:	4b04      	ldr	r3, [pc, #16]	; (8014fa8 <ip4_route+0xd8>)
 8014f98:	681b      	ldr	r3, [r3, #0]
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3714      	adds	r7, #20
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bc80      	pop	{r7}
 8014fa2:	4770      	bx	lr
 8014fa4:	2000be2c 	.word	0x2000be2c
 8014fa8:	2000be30 	.word	0x2000be30

08014fac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b082      	sub	sp, #8
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014fba:	f003 0301 	and.w	r3, r3, #1
 8014fbe:	b2db      	uxtb	r3, r3
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d016      	beq.n	8014ff2 <ip4_input_accept+0x46>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	3304      	adds	r3, #4
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d011      	beq.n	8014ff2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fce:	4b0b      	ldr	r3, [pc, #44]	; (8014ffc <ip4_input_accept+0x50>)
 8014fd0:	695a      	ldr	r2, [r3, #20]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d008      	beq.n	8014fee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014fdc:	4b07      	ldr	r3, [pc, #28]	; (8014ffc <ip4_input_accept+0x50>)
 8014fde:	695b      	ldr	r3, [r3, #20]
 8014fe0:	6879      	ldr	r1, [r7, #4]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f000 fa08 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 8014fe8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d001      	beq.n	8014ff2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	e000      	b.n	8014ff4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014ff2:	2300      	movs	r3, #0
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3708      	adds	r7, #8
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	20008d38 	.word	0x20008d38

08015000 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b086      	sub	sp, #24
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	091b      	lsrs	r3, r3, #4
 8015016:	b2db      	uxtb	r3, r3
 8015018:	2b04      	cmp	r3, #4
 801501a:	d004      	beq.n	8015026 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7f7 ff93 	bl	800cf48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015022:	2300      	movs	r3, #0
 8015024:	e107      	b.n	8015236 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015026:	697b      	ldr	r3, [r7, #20]
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	f003 030f 	and.w	r3, r3, #15
 801502e:	b2db      	uxtb	r3, r3
 8015030:	009b      	lsls	r3, r3, #2
 8015032:	b2db      	uxtb	r3, r3
 8015034:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	885b      	ldrh	r3, [r3, #2]
 801503a:	b29b      	uxth	r3, r3
 801503c:	4618      	mov	r0, r3
 801503e:	f7f6 fb27 	bl	800b690 <lwip_htons>
 8015042:	4603      	mov	r3, r0
 8015044:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	891b      	ldrh	r3, [r3, #8]
 801504a:	89ba      	ldrh	r2, [r7, #12]
 801504c:	429a      	cmp	r2, r3
 801504e:	d204      	bcs.n	801505a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015050:	89bb      	ldrh	r3, [r7, #12]
 8015052:	4619      	mov	r1, r3
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f7f7 fdf1 	bl	800cc3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	895b      	ldrh	r3, [r3, #10]
 801505e:	89fa      	ldrh	r2, [r7, #14]
 8015060:	429a      	cmp	r2, r3
 8015062:	d807      	bhi.n	8015074 <ip4_input+0x74>
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	891b      	ldrh	r3, [r3, #8]
 8015068:	89ba      	ldrh	r2, [r7, #12]
 801506a:	429a      	cmp	r2, r3
 801506c:	d802      	bhi.n	8015074 <ip4_input+0x74>
 801506e:	89fb      	ldrh	r3, [r7, #14]
 8015070:	2b13      	cmp	r3, #19
 8015072:	d804      	bhi.n	801507e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f7f7 ff67 	bl	800cf48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801507a:	2300      	movs	r3, #0
 801507c:	e0db      	b.n	8015236 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	691b      	ldr	r3, [r3, #16]
 8015082:	4a6f      	ldr	r2, [pc, #444]	; (8015240 <ip4_input+0x240>)
 8015084:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	68db      	ldr	r3, [r3, #12]
 801508a:	4a6d      	ldr	r2, [pc, #436]	; (8015240 <ip4_input+0x240>)
 801508c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801508e:	4b6c      	ldr	r3, [pc, #432]	; (8015240 <ip4_input+0x240>)
 8015090:	695b      	ldr	r3, [r3, #20]
 8015092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015096:	2be0      	cmp	r3, #224	; 0xe0
 8015098:	d112      	bne.n	80150c0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150a0:	f003 0301 	and.w	r3, r3, #1
 80150a4:	b2db      	uxtb	r3, r3
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d007      	beq.n	80150ba <ip4_input+0xba>
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	3304      	adds	r3, #4
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d002      	beq.n	80150ba <ip4_input+0xba>
      netif = inp;
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	613b      	str	r3, [r7, #16]
 80150b8:	e02a      	b.n	8015110 <ip4_input+0x110>
    } else {
      netif = NULL;
 80150ba:	2300      	movs	r3, #0
 80150bc:	613b      	str	r3, [r7, #16]
 80150be:	e027      	b.n	8015110 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80150c0:	6838      	ldr	r0, [r7, #0]
 80150c2:	f7ff ff73 	bl	8014fac <ip4_input_accept>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d002      	beq.n	80150d2 <ip4_input+0xd2>
      netif = inp;
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	613b      	str	r3, [r7, #16]
 80150d0:	e01e      	b.n	8015110 <ip4_input+0x110>
    } else {
      netif = NULL;
 80150d2:	2300      	movs	r3, #0
 80150d4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80150d6:	4b5a      	ldr	r3, [pc, #360]	; (8015240 <ip4_input+0x240>)
 80150d8:	695b      	ldr	r3, [r3, #20]
 80150da:	b2db      	uxtb	r3, r3
 80150dc:	2b7f      	cmp	r3, #127	; 0x7f
 80150de:	d017      	beq.n	8015110 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80150e0:	4b58      	ldr	r3, [pc, #352]	; (8015244 <ip4_input+0x244>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	613b      	str	r3, [r7, #16]
 80150e6:	e00e      	b.n	8015106 <ip4_input+0x106>
          if (netif == inp) {
 80150e8:	693a      	ldr	r2, [r7, #16]
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d006      	beq.n	80150fe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80150f0:	6938      	ldr	r0, [r7, #16]
 80150f2:	f7ff ff5b 	bl	8014fac <ip4_input_accept>
 80150f6:	4603      	mov	r3, r0
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d108      	bne.n	801510e <ip4_input+0x10e>
 80150fc:	e000      	b.n	8015100 <ip4_input+0x100>
            continue;
 80150fe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	613b      	str	r3, [r7, #16]
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d1ed      	bne.n	80150e8 <ip4_input+0xe8>
 801510c:	e000      	b.n	8015110 <ip4_input+0x110>
            break;
 801510e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015110:	4b4b      	ldr	r3, [pc, #300]	; (8015240 <ip4_input+0x240>)
 8015112:	691b      	ldr	r3, [r3, #16]
 8015114:	6839      	ldr	r1, [r7, #0]
 8015116:	4618      	mov	r0, r3
 8015118:	f000 f96e 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 801511c:	4603      	mov	r3, r0
 801511e:	2b00      	cmp	r3, #0
 8015120:	d105      	bne.n	801512e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015122:	4b47      	ldr	r3, [pc, #284]	; (8015240 <ip4_input+0x240>)
 8015124:	691b      	ldr	r3, [r3, #16]
 8015126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801512a:	2be0      	cmp	r3, #224	; 0xe0
 801512c:	d104      	bne.n	8015138 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7f7 ff0a 	bl	800cf48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015134:	2300      	movs	r3, #0
 8015136:	e07e      	b.n	8015236 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d104      	bne.n	8015148 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801513e:	6878      	ldr	r0, [r7, #4]
 8015140:	f7f7 ff02 	bl	800cf48 <pbuf_free>
    return ERR_OK;
 8015144:	2300      	movs	r3, #0
 8015146:	e076      	b.n	8015236 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	88db      	ldrh	r3, [r3, #6]
 801514c:	b29b      	uxth	r3, r3
 801514e:	461a      	mov	r2, r3
 8015150:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015154:	4013      	ands	r3, r2
 8015156:	2b00      	cmp	r3, #0
 8015158:	d00b      	beq.n	8015172 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f000 fc90 	bl	8015a80 <ip4_reass>
 8015160:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d101      	bne.n	801516c <ip4_input+0x16c>
      return ERR_OK;
 8015168:	2300      	movs	r3, #0
 801516a:	e064      	b.n	8015236 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	685b      	ldr	r3, [r3, #4]
 8015170:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015172:	4a33      	ldr	r2, [pc, #204]	; (8015240 <ip4_input+0x240>)
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015178:	4a31      	ldr	r2, [pc, #196]	; (8015240 <ip4_input+0x240>)
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801517e:	4a30      	ldr	r2, [pc, #192]	; (8015240 <ip4_input+0x240>)
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	f003 030f 	and.w	r3, r3, #15
 801518c:	b2db      	uxtb	r3, r3
 801518e:	009b      	lsls	r3, r3, #2
 8015190:	b2db      	uxtb	r3, r3
 8015192:	b29a      	uxth	r2, r3
 8015194:	4b2a      	ldr	r3, [pc, #168]	; (8015240 <ip4_input+0x240>)
 8015196:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015198:	89fb      	ldrh	r3, [r7, #14]
 801519a:	4619      	mov	r1, r3
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7f7 fe4d 	bl	800ce3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	7a5b      	ldrb	r3, [r3, #9]
 80151a6:	2b11      	cmp	r3, #17
 80151a8:	d006      	beq.n	80151b8 <ip4_input+0x1b8>
 80151aa:	2b11      	cmp	r3, #17
 80151ac:	dc13      	bgt.n	80151d6 <ip4_input+0x1d6>
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	d00c      	beq.n	80151cc <ip4_input+0x1cc>
 80151b2:	2b06      	cmp	r3, #6
 80151b4:	d005      	beq.n	80151c2 <ip4_input+0x1c2>
 80151b6:	e00e      	b.n	80151d6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80151b8:	6839      	ldr	r1, [r7, #0]
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f7fe fc46 	bl	8013a4c <udp_input>
        break;
 80151c0:	e026      	b.n	8015210 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80151c2:	6839      	ldr	r1, [r7, #0]
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f7f9 fffd 	bl	800f1c4 <tcp_input>
        break;
 80151ca:	e021      	b.n	8015210 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80151cc:	6839      	ldr	r1, [r7, #0]
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f7ff fcca 	bl	8014b68 <icmp_input>
        break;
 80151d4:	e01c      	b.n	8015210 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80151d6:	4b1a      	ldr	r3, [pc, #104]	; (8015240 <ip4_input+0x240>)
 80151d8:	695b      	ldr	r3, [r3, #20]
 80151da:	6939      	ldr	r1, [r7, #16]
 80151dc:	4618      	mov	r0, r3
 80151de:	f000 f90b 	bl	80153f8 <ip4_addr_isbroadcast_u32>
 80151e2:	4603      	mov	r3, r0
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d10f      	bne.n	8015208 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80151e8:	4b15      	ldr	r3, [pc, #84]	; (8015240 <ip4_input+0x240>)
 80151ea:	695b      	ldr	r3, [r3, #20]
 80151ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80151f0:	2be0      	cmp	r3, #224	; 0xe0
 80151f2:	d009      	beq.n	8015208 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80151f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151f8:	4619      	mov	r1, r3
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	f7f7 fe91 	bl	800cf22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015200:	2102      	movs	r1, #2
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f7ff fdd0 	bl	8014da8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	f7f7 fe9d 	bl	800cf48 <pbuf_free>
        break;
 801520e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015210:	4b0b      	ldr	r3, [pc, #44]	; (8015240 <ip4_input+0x240>)
 8015212:	2200      	movs	r2, #0
 8015214:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015216:	4b0a      	ldr	r3, [pc, #40]	; (8015240 <ip4_input+0x240>)
 8015218:	2200      	movs	r2, #0
 801521a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801521c:	4b08      	ldr	r3, [pc, #32]	; (8015240 <ip4_input+0x240>)
 801521e:	2200      	movs	r2, #0
 8015220:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015222:	4b07      	ldr	r3, [pc, #28]	; (8015240 <ip4_input+0x240>)
 8015224:	2200      	movs	r2, #0
 8015226:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015228:	4b05      	ldr	r3, [pc, #20]	; (8015240 <ip4_input+0x240>)
 801522a:	2200      	movs	r2, #0
 801522c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801522e:	4b04      	ldr	r3, [pc, #16]	; (8015240 <ip4_input+0x240>)
 8015230:	2200      	movs	r2, #0
 8015232:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015234:	2300      	movs	r3, #0
}
 8015236:	4618      	mov	r0, r3
 8015238:	3718      	adds	r7, #24
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}
 801523e:	bf00      	nop
 8015240:	20008d38 	.word	0x20008d38
 8015244:	2000be2c 	.word	0x2000be2c

08015248 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b08a      	sub	sp, #40	; 0x28
 801524c:	af04      	add	r7, sp, #16
 801524e:	60f8      	str	r0, [r7, #12]
 8015250:	60b9      	str	r1, [r7, #8]
 8015252:	607a      	str	r2, [r7, #4]
 8015254:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d009      	beq.n	8015274 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d003      	beq.n	801526e <ip4_output_if+0x26>
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d102      	bne.n	8015274 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015270:	3304      	adds	r3, #4
 8015272:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015274:	78fa      	ldrb	r2, [r7, #3]
 8015276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015278:	9302      	str	r3, [sp, #8]
 801527a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801527e:	9301      	str	r3, [sp, #4]
 8015280:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015284:	9300      	str	r3, [sp, #0]
 8015286:	4613      	mov	r3, r2
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	6979      	ldr	r1, [r7, #20]
 801528c:	68f8      	ldr	r0, [r7, #12]
 801528e:	f000 f805 	bl	801529c <ip4_output_if_src>
 8015292:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015294:	4618      	mov	r0, r3
 8015296:	3718      	adds	r7, #24
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}

0801529c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b088      	sub	sp, #32
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	60f8      	str	r0, [r7, #12]
 80152a4:	60b9      	str	r1, [r7, #8]
 80152a6:	607a      	str	r2, [r7, #4]
 80152a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	7b9b      	ldrb	r3, [r3, #14]
 80152ae:	2b01      	cmp	r3, #1
 80152b0:	d006      	beq.n	80152c0 <ip4_output_if_src+0x24>
 80152b2:	4b4b      	ldr	r3, [pc, #300]	; (80153e0 <ip4_output_if_src+0x144>)
 80152b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80152b8:	494a      	ldr	r1, [pc, #296]	; (80153e4 <ip4_output_if_src+0x148>)
 80152ba:	484b      	ldr	r0, [pc, #300]	; (80153e8 <ip4_output_if_src+0x14c>)
 80152bc:	f001 fe60 	bl	8016f80 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d060      	beq.n	8015388 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80152c6:	2314      	movs	r3, #20
 80152c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80152ca:	2114      	movs	r1, #20
 80152cc:	68f8      	ldr	r0, [r7, #12]
 80152ce:	f7f7 fda5 	bl	800ce1c <pbuf_add_header>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d002      	beq.n	80152de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80152d8:	f06f 0301 	mvn.w	r3, #1
 80152dc:	e07c      	b.n	80153d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	895b      	ldrh	r3, [r3, #10]
 80152e8:	2b13      	cmp	r3, #19
 80152ea:	d806      	bhi.n	80152fa <ip4_output_if_src+0x5e>
 80152ec:	4b3c      	ldr	r3, [pc, #240]	; (80153e0 <ip4_output_if_src+0x144>)
 80152ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 80152f2:	493e      	ldr	r1, [pc, #248]	; (80153ec <ip4_output_if_src+0x150>)
 80152f4:	483c      	ldr	r0, [pc, #240]	; (80153e8 <ip4_output_if_src+0x14c>)
 80152f6:	f001 fe43 	bl	8016f80 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80152fa:	69fb      	ldr	r3, [r7, #28]
 80152fc:	78fa      	ldrb	r2, [r7, #3]
 80152fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015306:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681a      	ldr	r2, [r3, #0]
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015310:	8b7b      	ldrh	r3, [r7, #26]
 8015312:	089b      	lsrs	r3, r3, #2
 8015314:	b29b      	uxth	r3, r3
 8015316:	b2db      	uxtb	r3, r3
 8015318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801531c:	b2da      	uxtb	r2, r3
 801531e:	69fb      	ldr	r3, [r7, #28]
 8015320:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015328:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	891b      	ldrh	r3, [r3, #8]
 801532e:	4618      	mov	r0, r3
 8015330:	f7f6 f9ae 	bl	800b690 <lwip_htons>
 8015334:	4603      	mov	r3, r0
 8015336:	461a      	mov	r2, r3
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	2200      	movs	r2, #0
 8015340:	719a      	strb	r2, [r3, #6]
 8015342:	2200      	movs	r2, #0
 8015344:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015346:	4b2a      	ldr	r3, [pc, #168]	; (80153f0 <ip4_output_if_src+0x154>)
 8015348:	881b      	ldrh	r3, [r3, #0]
 801534a:	4618      	mov	r0, r3
 801534c:	f7f6 f9a0 	bl	800b690 <lwip_htons>
 8015350:	4603      	mov	r3, r0
 8015352:	461a      	mov	r2, r3
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015358:	4b25      	ldr	r3, [pc, #148]	; (80153f0 <ip4_output_if_src+0x154>)
 801535a:	881b      	ldrh	r3, [r3, #0]
 801535c:	3301      	adds	r3, #1
 801535e:	b29a      	uxth	r2, r3
 8015360:	4b23      	ldr	r3, [pc, #140]	; (80153f0 <ip4_output_if_src+0x154>)
 8015362:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d104      	bne.n	8015374 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801536a:	4b22      	ldr	r3, [pc, #136]	; (80153f4 <ip4_output_if_src+0x158>)
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	69fb      	ldr	r3, [r7, #28]
 8015370:	60da      	str	r2, [r3, #12]
 8015372:	e003      	b.n	801537c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	681a      	ldr	r2, [r3, #0]
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801537c:	69fb      	ldr	r3, [r7, #28]
 801537e:	2200      	movs	r2, #0
 8015380:	729a      	strb	r2, [r3, #10]
 8015382:	2200      	movs	r2, #0
 8015384:	72da      	strb	r2, [r3, #11]
 8015386:	e00f      	b.n	80153a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	895b      	ldrh	r3, [r3, #10]
 801538c:	2b13      	cmp	r3, #19
 801538e:	d802      	bhi.n	8015396 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015390:	f06f 0301 	mvn.w	r3, #1
 8015394:	e020      	b.n	80153d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801539c:	69fb      	ldr	r3, [r7, #28]
 801539e:	691b      	ldr	r3, [r3, #16]
 80153a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80153a2:	f107 0314 	add.w	r3, r7, #20
 80153a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80153a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d00c      	beq.n	80153ca <ip4_output_if_src+0x12e>
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	891a      	ldrh	r2, [r3, #8]
 80153b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d906      	bls.n	80153ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f000 fd51 	bl	8015e68 <ip4_frag>
 80153c6:	4603      	mov	r3, r0
 80153c8:	e006      	b.n	80153d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80153ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153cc:	695b      	ldr	r3, [r3, #20]
 80153ce:	687a      	ldr	r2, [r7, #4]
 80153d0:	68f9      	ldr	r1, [r7, #12]
 80153d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153d4:	4798      	blx	r3
 80153d6:	4603      	mov	r3, r0
}
 80153d8:	4618      	mov	r0, r3
 80153da:	3720      	adds	r7, #32
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	0801aacc 	.word	0x0801aacc
 80153e4:	0801ab00 	.word	0x0801ab00
 80153e8:	0801ab0c 	.word	0x0801ab0c
 80153ec:	0801ab34 	.word	0x0801ab34
 80153f0:	2000bf8a 	.word	0x2000bf8a
 80153f4:	0801af60 	.word	0x0801af60

080153f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80153f8:	b480      	push	{r7}
 80153fa:	b085      	sub	sp, #20
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801540c:	d002      	beq.n	8015414 <ip4_addr_isbroadcast_u32+0x1c>
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d101      	bne.n	8015418 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015414:	2301      	movs	r3, #1
 8015416:	e02a      	b.n	801546e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801541e:	f003 0302 	and.w	r3, r3, #2
 8015422:	2b00      	cmp	r3, #0
 8015424:	d101      	bne.n	801542a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015426:	2300      	movs	r3, #0
 8015428:	e021      	b.n	801546e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	3304      	adds	r3, #4
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	687a      	ldr	r2, [r7, #4]
 8015432:	429a      	cmp	r2, r3
 8015434:	d101      	bne.n	801543a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015436:	2300      	movs	r3, #0
 8015438:	e019      	b.n	801546e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801543a:	68fa      	ldr	r2, [r7, #12]
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	3304      	adds	r3, #4
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	405a      	eors	r2, r3
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	3308      	adds	r3, #8
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4013      	ands	r3, r2
 801544c:	2b00      	cmp	r3, #0
 801544e:	d10d      	bne.n	801546c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	3308      	adds	r3, #8
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	43da      	mvns	r2, r3
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	3308      	adds	r3, #8
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015464:	429a      	cmp	r2, r3
 8015466:	d101      	bne.n	801546c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015468:	2301      	movs	r3, #1
 801546a:	e000      	b.n	801546e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801546c:	2300      	movs	r3, #0
  }
}
 801546e:	4618      	mov	r0, r3
 8015470:	3714      	adds	r7, #20
 8015472:	46bd      	mov	sp, r7
 8015474:	bc80      	pop	{r7}
 8015476:	4770      	bx	lr

08015478 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801547e:	2300      	movs	r3, #0
 8015480:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015482:	4b12      	ldr	r3, [pc, #72]	; (80154cc <ip_reass_tmr+0x54>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015488:	e018      	b.n	80154bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	7fdb      	ldrb	r3, [r3, #31]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d00b      	beq.n	80154aa <ip_reass_tmr+0x32>
      r->timer--;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	7fdb      	ldrb	r3, [r3, #31]
 8015496:	3b01      	subs	r3, #1
 8015498:	b2da      	uxtb	r2, r3
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	60fb      	str	r3, [r7, #12]
 80154a8:	e008      	b.n	80154bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80154b4:	68b9      	ldr	r1, [r7, #8]
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f000 f80a 	bl	80154d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d1e3      	bne.n	801548a <ip_reass_tmr+0x12>
    }
  }
}
 80154c2:	bf00      	nop
 80154c4:	bf00      	nop
 80154c6:	3710      	adds	r7, #16
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	2000bf8c 	.word	0x2000bf8c

080154d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b088      	sub	sp, #32
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80154da:	2300      	movs	r3, #0
 80154dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80154de:	683a      	ldr	r2, [r7, #0]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d105      	bne.n	80154f2 <ip_reass_free_complete_datagram+0x22>
 80154e6:	4b45      	ldr	r3, [pc, #276]	; (80155fc <ip_reass_free_complete_datagram+0x12c>)
 80154e8:	22ab      	movs	r2, #171	; 0xab
 80154ea:	4945      	ldr	r1, [pc, #276]	; (8015600 <ip_reass_free_complete_datagram+0x130>)
 80154ec:	4845      	ldr	r0, [pc, #276]	; (8015604 <ip_reass_free_complete_datagram+0x134>)
 80154ee:	f001 fd47 	bl	8016f80 <iprintf>
  if (prev != NULL) {
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d00a      	beq.n	801550e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	687a      	ldr	r2, [r7, #4]
 80154fe:	429a      	cmp	r2, r3
 8015500:	d005      	beq.n	801550e <ip_reass_free_complete_datagram+0x3e>
 8015502:	4b3e      	ldr	r3, [pc, #248]	; (80155fc <ip_reass_free_complete_datagram+0x12c>)
 8015504:	22ad      	movs	r2, #173	; 0xad
 8015506:	4940      	ldr	r1, [pc, #256]	; (8015608 <ip_reass_free_complete_datagram+0x138>)
 8015508:	483e      	ldr	r0, [pc, #248]	; (8015604 <ip_reass_free_complete_datagram+0x134>)
 801550a:	f001 fd39 	bl	8016f80 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	685b      	ldr	r3, [r3, #4]
 8015514:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	889b      	ldrh	r3, [r3, #4]
 801551a:	b29b      	uxth	r3, r3
 801551c:	2b00      	cmp	r3, #0
 801551e:	d12a      	bne.n	8015576 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801552e:	69bb      	ldr	r3, [r7, #24]
 8015530:	6858      	ldr	r0, [r3, #4]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	3308      	adds	r3, #8
 8015536:	2214      	movs	r2, #20
 8015538:	4619      	mov	r1, r3
 801553a:	f001 fc2d 	bl	8016d98 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801553e:	2101      	movs	r1, #1
 8015540:	69b8      	ldr	r0, [r7, #24]
 8015542:	f7ff fc41 	bl	8014dc8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015546:	69b8      	ldr	r0, [r7, #24]
 8015548:	f7f7 fd8c 	bl	800d064 <pbuf_clen>
 801554c:	4603      	mov	r3, r0
 801554e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015550:	8bfa      	ldrh	r2, [r7, #30]
 8015552:	8a7b      	ldrh	r3, [r7, #18]
 8015554:	4413      	add	r3, r2
 8015556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801555a:	db05      	blt.n	8015568 <ip_reass_free_complete_datagram+0x98>
 801555c:	4b27      	ldr	r3, [pc, #156]	; (80155fc <ip_reass_free_complete_datagram+0x12c>)
 801555e:	22bc      	movs	r2, #188	; 0xbc
 8015560:	492a      	ldr	r1, [pc, #168]	; (801560c <ip_reass_free_complete_datagram+0x13c>)
 8015562:	4828      	ldr	r0, [pc, #160]	; (8015604 <ip_reass_free_complete_datagram+0x134>)
 8015564:	f001 fd0c 	bl	8016f80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015568:	8bfa      	ldrh	r2, [r7, #30]
 801556a:	8a7b      	ldrh	r3, [r7, #18]
 801556c:	4413      	add	r3, r2
 801556e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015570:	69b8      	ldr	r0, [r7, #24]
 8015572:	f7f7 fce9 	bl	800cf48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	685b      	ldr	r3, [r3, #4]
 801557a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801557c:	e01f      	b.n	80155be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801557e:	69bb      	ldr	r3, [r7, #24]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015584:	69bb      	ldr	r3, [r7, #24]
 8015586:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801558e:	68f8      	ldr	r0, [r7, #12]
 8015590:	f7f7 fd68 	bl	800d064 <pbuf_clen>
 8015594:	4603      	mov	r3, r0
 8015596:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015598:	8bfa      	ldrh	r2, [r7, #30]
 801559a:	8a7b      	ldrh	r3, [r7, #18]
 801559c:	4413      	add	r3, r2
 801559e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155a2:	db05      	blt.n	80155b0 <ip_reass_free_complete_datagram+0xe0>
 80155a4:	4b15      	ldr	r3, [pc, #84]	; (80155fc <ip_reass_free_complete_datagram+0x12c>)
 80155a6:	22cc      	movs	r2, #204	; 0xcc
 80155a8:	4918      	ldr	r1, [pc, #96]	; (801560c <ip_reass_free_complete_datagram+0x13c>)
 80155aa:	4816      	ldr	r0, [pc, #88]	; (8015604 <ip_reass_free_complete_datagram+0x134>)
 80155ac:	f001 fce8 	bl	8016f80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80155b0:	8bfa      	ldrh	r2, [r7, #30]
 80155b2:	8a7b      	ldrh	r3, [r7, #18]
 80155b4:	4413      	add	r3, r2
 80155b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f7f7 fcc5 	bl	800cf48 <pbuf_free>
  while (p != NULL) {
 80155be:	69bb      	ldr	r3, [r7, #24]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d1dc      	bne.n	801557e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80155c4:	6839      	ldr	r1, [r7, #0]
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f000 f8c2 	bl	8015750 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80155cc:	4b10      	ldr	r3, [pc, #64]	; (8015610 <ip_reass_free_complete_datagram+0x140>)
 80155ce:	881b      	ldrh	r3, [r3, #0]
 80155d0:	8bfa      	ldrh	r2, [r7, #30]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d905      	bls.n	80155e2 <ip_reass_free_complete_datagram+0x112>
 80155d6:	4b09      	ldr	r3, [pc, #36]	; (80155fc <ip_reass_free_complete_datagram+0x12c>)
 80155d8:	22d2      	movs	r2, #210	; 0xd2
 80155da:	490e      	ldr	r1, [pc, #56]	; (8015614 <ip_reass_free_complete_datagram+0x144>)
 80155dc:	4809      	ldr	r0, [pc, #36]	; (8015604 <ip_reass_free_complete_datagram+0x134>)
 80155de:	f001 fccf 	bl	8016f80 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80155e2:	4b0b      	ldr	r3, [pc, #44]	; (8015610 <ip_reass_free_complete_datagram+0x140>)
 80155e4:	881a      	ldrh	r2, [r3, #0]
 80155e6:	8bfb      	ldrh	r3, [r7, #30]
 80155e8:	1ad3      	subs	r3, r2, r3
 80155ea:	b29a      	uxth	r2, r3
 80155ec:	4b08      	ldr	r3, [pc, #32]	; (8015610 <ip_reass_free_complete_datagram+0x140>)
 80155ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80155f0:	8bfb      	ldrh	r3, [r7, #30]
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3720      	adds	r7, #32
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}
 80155fa:	bf00      	nop
 80155fc:	0801ab64 	.word	0x0801ab64
 8015600:	0801aba0 	.word	0x0801aba0
 8015604:	0801abac 	.word	0x0801abac
 8015608:	0801abd4 	.word	0x0801abd4
 801560c:	0801abe8 	.word	0x0801abe8
 8015610:	2000bf90 	.word	0x2000bf90
 8015614:	0801ac08 	.word	0x0801ac08

08015618 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b08a      	sub	sp, #40	; 0x28
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015622:	2300      	movs	r3, #0
 8015624:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015626:	2300      	movs	r3, #0
 8015628:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801562a:	2300      	movs	r3, #0
 801562c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801562e:	2300      	movs	r3, #0
 8015630:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015632:	2300      	movs	r3, #0
 8015634:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015636:	4b28      	ldr	r3, [pc, #160]	; (80156d8 <ip_reass_remove_oldest_datagram+0xc0>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801563c:	e030      	b.n	80156a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015640:	695a      	ldr	r2, [r3, #20]
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	68db      	ldr	r3, [r3, #12]
 8015646:	429a      	cmp	r2, r3
 8015648:	d10c      	bne.n	8015664 <ip_reass_remove_oldest_datagram+0x4c>
 801564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564c:	699a      	ldr	r2, [r3, #24]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	691b      	ldr	r3, [r3, #16]
 8015652:	429a      	cmp	r2, r3
 8015654:	d106      	bne.n	8015664 <ip_reass_remove_oldest_datagram+0x4c>
 8015656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015658:	899a      	ldrh	r2, [r3, #12]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	889b      	ldrh	r3, [r3, #4]
 801565e:	b29b      	uxth	r3, r3
 8015660:	429a      	cmp	r2, r3
 8015662:	d014      	beq.n	801568e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	3301      	adds	r3, #1
 8015668:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801566a:	6a3b      	ldr	r3, [r7, #32]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d104      	bne.n	801567a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015672:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015674:	69fb      	ldr	r3, [r7, #28]
 8015676:	61bb      	str	r3, [r7, #24]
 8015678:	e009      	b.n	801568e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567c:	7fda      	ldrb	r2, [r3, #31]
 801567e:	6a3b      	ldr	r3, [r7, #32]
 8015680:	7fdb      	ldrb	r3, [r3, #31]
 8015682:	429a      	cmp	r2, r3
 8015684:	d803      	bhi.n	801568e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015688:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d001      	beq.n	801569a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015698:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80156a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d1cb      	bne.n	801563e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80156a6:	6a3b      	ldr	r3, [r7, #32]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d008      	beq.n	80156be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80156ac:	69b9      	ldr	r1, [r7, #24]
 80156ae:	6a38      	ldr	r0, [r7, #32]
 80156b0:	f7ff ff0e 	bl	80154d0 <ip_reass_free_complete_datagram>
 80156b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80156b6:	697a      	ldr	r2, [r7, #20]
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	4413      	add	r3, r2
 80156bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80156be:	697a      	ldr	r2, [r7, #20]
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	da02      	bge.n	80156cc <ip_reass_remove_oldest_datagram+0xb4>
 80156c6:	693b      	ldr	r3, [r7, #16]
 80156c8:	2b01      	cmp	r3, #1
 80156ca:	dcac      	bgt.n	8015626 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80156cc:	697b      	ldr	r3, [r7, #20]
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3728      	adds	r7, #40	; 0x28
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	bf00      	nop
 80156d8:	2000bf8c 	.word	0x2000bf8c

080156dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b084      	sub	sp, #16
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80156e6:	2004      	movs	r0, #4
 80156e8:	f7f6 fd82 	bl	800c1f0 <memp_malloc>
 80156ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d110      	bne.n	8015716 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80156f4:	6839      	ldr	r1, [r7, #0]
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f7ff ff8e 	bl	8015618 <ip_reass_remove_oldest_datagram>
 80156fc:	4602      	mov	r2, r0
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	4293      	cmp	r3, r2
 8015702:	dc03      	bgt.n	801570c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015704:	2004      	movs	r0, #4
 8015706:	f7f6 fd73 	bl	800c1f0 <memp_malloc>
 801570a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d101      	bne.n	8015716 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015712:	2300      	movs	r3, #0
 8015714:	e016      	b.n	8015744 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015716:	2220      	movs	r2, #32
 8015718:	2100      	movs	r1, #0
 801571a:	68f8      	ldr	r0, [r7, #12]
 801571c:	f001 fb4a 	bl	8016db4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	220f      	movs	r2, #15
 8015724:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015726:	4b09      	ldr	r3, [pc, #36]	; (801574c <ip_reass_enqueue_new_datagram+0x70>)
 8015728:	681a      	ldr	r2, [r3, #0]
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801572e:	4a07      	ldr	r2, [pc, #28]	; (801574c <ip_reass_enqueue_new_datagram+0x70>)
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	3308      	adds	r3, #8
 8015738:	2214      	movs	r2, #20
 801573a:	6879      	ldr	r1, [r7, #4]
 801573c:	4618      	mov	r0, r3
 801573e:	f001 fb2b 	bl	8016d98 <memcpy>
  return ipr;
 8015742:	68fb      	ldr	r3, [r7, #12]
}
 8015744:	4618      	mov	r0, r3
 8015746:	3710      	adds	r7, #16
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	2000bf8c 	.word	0x2000bf8c

08015750 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
 8015758:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801575a:	4b10      	ldr	r3, [pc, #64]	; (801579c <ip_reass_dequeue_datagram+0x4c>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	429a      	cmp	r2, r3
 8015762:	d104      	bne.n	801576e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	4a0c      	ldr	r2, [pc, #48]	; (801579c <ip_reass_dequeue_datagram+0x4c>)
 801576a:	6013      	str	r3, [r2, #0]
 801576c:	e00d      	b.n	801578a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d106      	bne.n	8015782 <ip_reass_dequeue_datagram+0x32>
 8015774:	4b0a      	ldr	r3, [pc, #40]	; (80157a0 <ip_reass_dequeue_datagram+0x50>)
 8015776:	f240 1245 	movw	r2, #325	; 0x145
 801577a:	490a      	ldr	r1, [pc, #40]	; (80157a4 <ip_reass_dequeue_datagram+0x54>)
 801577c:	480a      	ldr	r0, [pc, #40]	; (80157a8 <ip_reass_dequeue_datagram+0x58>)
 801577e:	f001 fbff 	bl	8016f80 <iprintf>
    prev->next = ipr->next;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681a      	ldr	r2, [r3, #0]
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801578a:	6879      	ldr	r1, [r7, #4]
 801578c:	2004      	movs	r0, #4
 801578e:	f7f6 fda5 	bl	800c2dc <memp_free>
}
 8015792:	bf00      	nop
 8015794:	3708      	adds	r7, #8
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	2000bf8c 	.word	0x2000bf8c
 80157a0:	0801ab64 	.word	0x0801ab64
 80157a4:	0801ac2c 	.word	0x0801ac2c
 80157a8:	0801abac 	.word	0x0801abac

080157ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b08c      	sub	sp, #48	; 0x30
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80157b8:	2300      	movs	r3, #0
 80157ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80157bc:	2301      	movs	r3, #1
 80157be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	685b      	ldr	r3, [r3, #4]
 80157c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80157c6:	69fb      	ldr	r3, [r7, #28]
 80157c8:	885b      	ldrh	r3, [r3, #2]
 80157ca:	b29b      	uxth	r3, r3
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7f5 ff5f 	bl	800b690 <lwip_htons>
 80157d2:	4603      	mov	r3, r0
 80157d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	f003 030f 	and.w	r3, r3, #15
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	009b      	lsls	r3, r3, #2
 80157e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80157e4:	7e7b      	ldrb	r3, [r7, #25]
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	8b7a      	ldrh	r2, [r7, #26]
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d202      	bcs.n	80157f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157ee:	f04f 33ff 	mov.w	r3, #4294967295
 80157f2:	e135      	b.n	8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80157f4:	7e7b      	ldrb	r3, [r7, #25]
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	8b7a      	ldrh	r2, [r7, #26]
 80157fa:	1ad3      	subs	r3, r2, r3
 80157fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80157fe:	69fb      	ldr	r3, [r7, #28]
 8015800:	88db      	ldrh	r3, [r3, #6]
 8015802:	b29b      	uxth	r3, r3
 8015804:	4618      	mov	r0, r3
 8015806:	f7f5 ff43 	bl	800b690 <lwip_htons>
 801580a:	4603      	mov	r3, r0
 801580c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015810:	b29b      	uxth	r3, r3
 8015812:	00db      	lsls	r3, r3, #3
 8015814:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801581e:	2200      	movs	r2, #0
 8015820:	701a      	strb	r2, [r3, #0]
 8015822:	2200      	movs	r2, #0
 8015824:	705a      	strb	r2, [r3, #1]
 8015826:	2200      	movs	r2, #0
 8015828:	709a      	strb	r2, [r3, #2]
 801582a:	2200      	movs	r2, #0
 801582c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015830:	8afa      	ldrh	r2, [r7, #22]
 8015832:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015834:	8afa      	ldrh	r2, [r7, #22]
 8015836:	8b7b      	ldrh	r3, [r7, #26]
 8015838:	4413      	add	r3, r2
 801583a:	b29a      	uxth	r2, r3
 801583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015842:	88db      	ldrh	r3, [r3, #6]
 8015844:	b29b      	uxth	r3, r3
 8015846:	8afa      	ldrh	r2, [r7, #22]
 8015848:	429a      	cmp	r2, r3
 801584a:	d902      	bls.n	8015852 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801584c:	f04f 33ff 	mov.w	r3, #4294967295
 8015850:	e106      	b.n	8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	685b      	ldr	r3, [r3, #4]
 8015856:	627b      	str	r3, [r7, #36]	; 0x24
 8015858:	e068      	b.n	801592c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015862:	889b      	ldrh	r3, [r3, #4]
 8015864:	b29a      	uxth	r2, r3
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	889b      	ldrh	r3, [r3, #4]
 801586a:	b29b      	uxth	r3, r3
 801586c:	429a      	cmp	r2, r3
 801586e:	d235      	bcs.n	80158dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015874:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015878:	2b00      	cmp	r3, #0
 801587a:	d020      	beq.n	80158be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587e:	889b      	ldrh	r3, [r3, #4]
 8015880:	b29a      	uxth	r2, r3
 8015882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015884:	88db      	ldrh	r3, [r3, #6]
 8015886:	b29b      	uxth	r3, r3
 8015888:	429a      	cmp	r2, r3
 801588a:	d307      	bcc.n	801589c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801588e:	88db      	ldrh	r3, [r3, #6]
 8015890:	b29a      	uxth	r2, r3
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	889b      	ldrh	r3, [r3, #4]
 8015896:	b29b      	uxth	r3, r3
 8015898:	429a      	cmp	r2, r3
 801589a:	d902      	bls.n	80158a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801589c:	f04f 33ff 	mov.w	r3, #4294967295
 80158a0:	e0de      	b.n	8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80158a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a4:	68ba      	ldr	r2, [r7, #8]
 80158a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80158a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158aa:	88db      	ldrh	r3, [r3, #6]
 80158ac:	b29a      	uxth	r2, r3
 80158ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b0:	889b      	ldrh	r3, [r3, #4]
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d03d      	beq.n	8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80158b8:	2300      	movs	r3, #0
 80158ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80158bc:	e03a      	b.n	8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80158be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c0:	88db      	ldrh	r3, [r3, #6]
 80158c2:	b29a      	uxth	r2, r3
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	889b      	ldrh	r3, [r3, #4]
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d902      	bls.n	80158d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158ce:	f04f 33ff 	mov.w	r3, #4294967295
 80158d2:	e0c5      	b.n	8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	68ba      	ldr	r2, [r7, #8]
 80158d8:	605a      	str	r2, [r3, #4]
      break;
 80158da:	e02b      	b.n	8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80158dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158de:	889b      	ldrh	r3, [r3, #4]
 80158e0:	b29a      	uxth	r2, r3
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	889b      	ldrh	r3, [r3, #4]
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d102      	bne.n	80158f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158ec:	f04f 33ff 	mov.w	r3, #4294967295
 80158f0:	e0b6      	b.n	8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80158f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f4:	889b      	ldrh	r3, [r3, #4]
 80158f6:	b29a      	uxth	r2, r3
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	88db      	ldrh	r3, [r3, #6]
 80158fc:	b29b      	uxth	r3, r3
 80158fe:	429a      	cmp	r2, r3
 8015900:	d202      	bcs.n	8015908 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015902:	f04f 33ff 	mov.w	r3, #4294967295
 8015906:	e0ab      	b.n	8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590a:	2b00      	cmp	r3, #0
 801590c:	d009      	beq.n	8015922 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015910:	88db      	ldrh	r3, [r3, #6]
 8015912:	b29a      	uxth	r2, r3
 8015914:	693b      	ldr	r3, [r7, #16]
 8015916:	889b      	ldrh	r3, [r3, #4]
 8015918:	b29b      	uxth	r3, r3
 801591a:	429a      	cmp	r2, r3
 801591c:	d001      	beq.n	8015922 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801591e:	2300      	movs	r3, #0
 8015920:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015922:	693b      	ldr	r3, [r7, #16]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592e:	2b00      	cmp	r3, #0
 8015930:	d193      	bne.n	801585a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015932:	e000      	b.n	8015936 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015934:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015938:	2b00      	cmp	r3, #0
 801593a:	d12d      	bne.n	8015998 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801593e:	2b00      	cmp	r3, #0
 8015940:	d01c      	beq.n	801597c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015944:	88db      	ldrh	r3, [r3, #6]
 8015946:	b29a      	uxth	r2, r3
 8015948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801594a:	889b      	ldrh	r3, [r3, #4]
 801594c:	b29b      	uxth	r3, r3
 801594e:	429a      	cmp	r2, r3
 8015950:	d906      	bls.n	8015960 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015952:	4b45      	ldr	r3, [pc, #276]	; (8015a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015954:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015958:	4944      	ldr	r1, [pc, #272]	; (8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801595a:	4845      	ldr	r0, [pc, #276]	; (8015a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801595c:	f001 fb10 	bl	8016f80 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015962:	68ba      	ldr	r2, [r7, #8]
 8015964:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015968:	88db      	ldrh	r3, [r3, #6]
 801596a:	b29a      	uxth	r2, r3
 801596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801596e:	889b      	ldrh	r3, [r3, #4]
 8015970:	b29b      	uxth	r3, r3
 8015972:	429a      	cmp	r2, r3
 8015974:	d010      	beq.n	8015998 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015976:	2300      	movs	r3, #0
 8015978:	623b      	str	r3, [r7, #32]
 801597a:	e00d      	b.n	8015998 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d006      	beq.n	8015992 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015984:	4b38      	ldr	r3, [pc, #224]	; (8015a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015986:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801598a:	493a      	ldr	r1, [pc, #232]	; (8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801598c:	4838      	ldr	r0, [pc, #224]	; (8015a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801598e:	f001 faf7 	bl	8016f80 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	68ba      	ldr	r2, [r7, #8]
 8015996:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d105      	bne.n	80159aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	7f9b      	ldrb	r3, [r3, #30]
 80159a2:	f003 0301 	and.w	r3, r3, #1
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d059      	beq.n	8015a5e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80159aa:	6a3b      	ldr	r3, [r7, #32]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d04f      	beq.n	8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	685b      	ldr	r3, [r3, #4]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d006      	beq.n	80159c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	685b      	ldr	r3, [r3, #4]
 80159be:	889b      	ldrh	r3, [r3, #4]
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d002      	beq.n	80159cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80159c6:	2300      	movs	r3, #0
 80159c8:	623b      	str	r3, [r7, #32]
 80159ca:	e041      	b.n	8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80159cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80159d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80159d6:	e012      	b.n	80159fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80159d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80159de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159e0:	88db      	ldrh	r3, [r3, #6]
 80159e2:	b29a      	uxth	r2, r3
 80159e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e6:	889b      	ldrh	r3, [r3, #4]
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d002      	beq.n	80159f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80159ee:	2300      	movs	r3, #0
 80159f0:	623b      	str	r3, [r7, #32]
            break;
 80159f2:	e007      	b.n	8015a04 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80159f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80159f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80159fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d1e9      	bne.n	80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015a04:	6a3b      	ldr	r3, [r7, #32]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d022      	beq.n	8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d106      	bne.n	8015a20 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015a12:	4b15      	ldr	r3, [pc, #84]	; (8015a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a14:	f240 12df 	movw	r2, #479	; 0x1df
 8015a18:	4917      	ldr	r1, [pc, #92]	; (8015a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a1a:	4815      	ldr	r0, [pc, #84]	; (8015a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a1c:	f001 fab0 	bl	8016f80 <iprintf>
          LWIP_ASSERT("sanity check",
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d106      	bne.n	8015a3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015a2c:	4b0e      	ldr	r3, [pc, #56]	; (8015a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015a32:	4911      	ldr	r1, [pc, #68]	; (8015a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a34:	480e      	ldr	r0, [pc, #56]	; (8015a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a36:	f001 faa3 	bl	8016f80 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d006      	beq.n	8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015a42:	4b09      	ldr	r3, [pc, #36]	; (8015a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a44:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015a48:	490c      	ldr	r1, [pc, #48]	; (8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015a4a:	4809      	ldr	r0, [pc, #36]	; (8015a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a4c:	f001 fa98 	bl	8016f80 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015a50:	6a3b      	ldr	r3, [r7, #32]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	bf14      	ite	ne
 8015a56:	2301      	movne	r3, #1
 8015a58:	2300      	moveq	r3, #0
 8015a5a:	b2db      	uxtb	r3, r3
 8015a5c:	e000      	b.n	8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015a5e:	2300      	movs	r3, #0
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3730      	adds	r7, #48	; 0x30
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}
 8015a68:	0801ab64 	.word	0x0801ab64
 8015a6c:	0801ac48 	.word	0x0801ac48
 8015a70:	0801abac 	.word	0x0801abac
 8015a74:	0801ac68 	.word	0x0801ac68
 8015a78:	0801aca0 	.word	0x0801aca0
 8015a7c:	0801acb0 	.word	0x0801acb0

08015a80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b08e      	sub	sp, #56	; 0x38
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	685b      	ldr	r3, [r3, #4]
 8015a8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a90:	781b      	ldrb	r3, [r3, #0]
 8015a92:	f003 030f 	and.w	r3, r3, #15
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	009b      	lsls	r3, r3, #2
 8015a9a:	b2db      	uxtb	r3, r3
 8015a9c:	2b14      	cmp	r3, #20
 8015a9e:	f040 8171 	bne.w	8015d84 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aa4:	88db      	ldrh	r3, [r3, #6]
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7f5 fdf1 	bl	800b690 <lwip_htons>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	00db      	lsls	r3, r3, #3
 8015ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015abc:	885b      	ldrh	r3, [r3, #2]
 8015abe:	b29b      	uxth	r3, r3
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7f5 fde5 	bl	800b690 <lwip_htons>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	f003 030f 	and.w	r3, r3, #15
 8015ad2:	b2db      	uxtb	r3, r3
 8015ad4:	009b      	lsls	r3, r3, #2
 8015ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	f0c0 8150 	bcc.w	8015d88 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015aec:	b29b      	uxth	r3, r3
 8015aee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015af0:	1ad3      	subs	r3, r2, r3
 8015af2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f7f7 fab5 	bl	800d064 <pbuf_clen>
 8015afa:	4603      	mov	r3, r0
 8015afc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015afe:	4b8c      	ldr	r3, [pc, #560]	; (8015d30 <ip4_reass+0x2b0>)
 8015b00:	881b      	ldrh	r3, [r3, #0]
 8015b02:	461a      	mov	r2, r3
 8015b04:	8c3b      	ldrh	r3, [r7, #32]
 8015b06:	4413      	add	r3, r2
 8015b08:	2b0a      	cmp	r3, #10
 8015b0a:	dd10      	ble.n	8015b2e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b0c:	8c3b      	ldrh	r3, [r7, #32]
 8015b0e:	4619      	mov	r1, r3
 8015b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b12:	f7ff fd81 	bl	8015618 <ip_reass_remove_oldest_datagram>
 8015b16:	4603      	mov	r3, r0
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	f000 8137 	beq.w	8015d8c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015b1e:	4b84      	ldr	r3, [pc, #528]	; (8015d30 <ip4_reass+0x2b0>)
 8015b20:	881b      	ldrh	r3, [r3, #0]
 8015b22:	461a      	mov	r2, r3
 8015b24:	8c3b      	ldrh	r3, [r7, #32]
 8015b26:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b28:	2b0a      	cmp	r3, #10
 8015b2a:	f300 812f 	bgt.w	8015d8c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b2e:	4b81      	ldr	r3, [pc, #516]	; (8015d34 <ip4_reass+0x2b4>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	633b      	str	r3, [r7, #48]	; 0x30
 8015b34:	e015      	b.n	8015b62 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b38:	695a      	ldr	r2, [r3, #20]
 8015b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b3c:	68db      	ldr	r3, [r3, #12]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d10c      	bne.n	8015b5c <ip4_reass+0xdc>
 8015b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b44:	699a      	ldr	r2, [r3, #24]
 8015b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b48:	691b      	ldr	r3, [r3, #16]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d106      	bne.n	8015b5c <ip4_reass+0xdc>
 8015b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b50:	899a      	ldrh	r2, [r3, #12]
 8015b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b54:	889b      	ldrh	r3, [r3, #4]
 8015b56:	b29b      	uxth	r3, r3
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d006      	beq.n	8015b6a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	633b      	str	r3, [r7, #48]	; 0x30
 8015b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d1e6      	bne.n	8015b36 <ip4_reass+0xb6>
 8015b68:	e000      	b.n	8015b6c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015b6a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d109      	bne.n	8015b86 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015b72:	8c3b      	ldrh	r3, [r7, #32]
 8015b74:	4619      	mov	r1, r3
 8015b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b78:	f7ff fdb0 	bl	80156dc <ip_reass_enqueue_new_datagram>
 8015b7c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d11c      	bne.n	8015bbe <ip4_reass+0x13e>
      goto nullreturn;
 8015b84:	e105      	b.n	8015d92 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b88:	88db      	ldrh	r3, [r3, #6]
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7f5 fd7f 	bl	800b690 <lwip_htons>
 8015b92:	4603      	mov	r3, r0
 8015b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d110      	bne.n	8015bbe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b9e:	89db      	ldrh	r3, [r3, #14]
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7f5 fd75 	bl	800b690 <lwip_htons>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d006      	beq.n	8015bbe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb2:	3308      	adds	r3, #8
 8015bb4:	2214      	movs	r2, #20
 8015bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f001 f8ed 	bl	8016d98 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc0:	88db      	ldrh	r3, [r3, #6]
 8015bc2:	b29b      	uxth	r3, r3
 8015bc4:	f003 0320 	and.w	r3, r3, #32
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	bf0c      	ite	eq
 8015bcc:	2301      	moveq	r3, #1
 8015bce:	2300      	movne	r3, #0
 8015bd0:	b2db      	uxtb	r3, r3
 8015bd2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015bd4:	69fb      	ldr	r3, [r7, #28]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d00e      	beq.n	8015bf8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015bda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bde:	4413      	add	r3, r2
 8015be0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015be2:	8b7a      	ldrh	r2, [r7, #26]
 8015be4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015be6:	429a      	cmp	r2, r3
 8015be8:	f0c0 80a0 	bcc.w	8015d2c <ip4_reass+0x2ac>
 8015bec:	8b7b      	ldrh	r3, [r7, #26]
 8015bee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015bf2:	4293      	cmp	r3, r2
 8015bf4:	f200 809a 	bhi.w	8015d2c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015bf8:	69fa      	ldr	r2, [r7, #28]
 8015bfa:	6879      	ldr	r1, [r7, #4]
 8015bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bfe:	f7ff fdd5 	bl	80157ac <ip_reass_chain_frag_into_datagram_and_validate>
 8015c02:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c0a:	f000 809b 	beq.w	8015d44 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015c0e:	4b48      	ldr	r3, [pc, #288]	; (8015d30 <ip4_reass+0x2b0>)
 8015c10:	881a      	ldrh	r2, [r3, #0]
 8015c12:	8c3b      	ldrh	r3, [r7, #32]
 8015c14:	4413      	add	r3, r2
 8015c16:	b29a      	uxth	r2, r3
 8015c18:	4b45      	ldr	r3, [pc, #276]	; (8015d30 <ip4_reass+0x2b0>)
 8015c1a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015c1c:	69fb      	ldr	r3, [r7, #28]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d00d      	beq.n	8015c3e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c26:	4413      	add	r3, r2
 8015c28:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c2c:	8a7a      	ldrh	r2, [r7, #18]
 8015c2e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c32:	7f9b      	ldrb	r3, [r3, #30]
 8015c34:	f043 0301 	orr.w	r3, r3, #1
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	2b01      	cmp	r3, #1
 8015c42:	d171      	bne.n	8015d28 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c46:	8b9b      	ldrh	r3, [r3, #28]
 8015c48:	3314      	adds	r3, #20
 8015c4a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c4e:	685b      	ldr	r3, [r3, #4]
 8015c50:	685b      	ldr	r3, [r3, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c60:	3308      	adds	r3, #8
 8015c62:	2214      	movs	r2, #20
 8015c64:	4619      	mov	r1, r3
 8015c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c68:	f001 f896 	bl	8016d98 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015c6c:	8a3b      	ldrh	r3, [r7, #16]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7f5 fd0e 	bl	800b690 <lwip_htons>
 8015c74:	4603      	mov	r3, r0
 8015c76:	461a      	mov	r2, r3
 8015c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c7a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c7e:	2200      	movs	r2, #0
 8015c80:	719a      	strb	r2, [r3, #6]
 8015c82:	2200      	movs	r2, #0
 8015c84:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c88:	2200      	movs	r2, #0
 8015c8a:	729a      	strb	r2, [r3, #10]
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015c96:	e00d      	b.n	8015cb4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015c9e:	2114      	movs	r1, #20
 8015ca0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015ca2:	f7f7 f8cb 	bl	800ce3c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015ca6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f7f7 fa19 	bl	800d0e0 <pbuf_cat>
      r = iprh->next_pbuf;
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d1ee      	bne.n	8015c98 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015cba:	4b1e      	ldr	r3, [pc, #120]	; (8015d34 <ip4_reass+0x2b4>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d102      	bne.n	8015cca <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cc8:	e010      	b.n	8015cec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015cca:	4b1a      	ldr	r3, [pc, #104]	; (8015d34 <ip4_reass+0x2b4>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cd0:	e007      	b.n	8015ce2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	d006      	beq.n	8015cea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d1f4      	bne.n	8015cd2 <ip4_reass+0x252>
 8015ce8:	e000      	b.n	8015cec <ip4_reass+0x26c>
          break;
 8015cea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cf0:	f7ff fd2e 	bl	8015750 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f7f7 f9b5 	bl	800d064 <pbuf_clen>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015cfe:	4b0c      	ldr	r3, [pc, #48]	; (8015d30 <ip4_reass+0x2b0>)
 8015d00:	881b      	ldrh	r3, [r3, #0]
 8015d02:	8c3a      	ldrh	r2, [r7, #32]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d906      	bls.n	8015d16 <ip4_reass+0x296>
 8015d08:	4b0b      	ldr	r3, [pc, #44]	; (8015d38 <ip4_reass+0x2b8>)
 8015d0a:	f240 229b 	movw	r2, #667	; 0x29b
 8015d0e:	490b      	ldr	r1, [pc, #44]	; (8015d3c <ip4_reass+0x2bc>)
 8015d10:	480b      	ldr	r0, [pc, #44]	; (8015d40 <ip4_reass+0x2c0>)
 8015d12:	f001 f935 	bl	8016f80 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015d16:	4b06      	ldr	r3, [pc, #24]	; (8015d30 <ip4_reass+0x2b0>)
 8015d18:	881a      	ldrh	r2, [r3, #0]
 8015d1a:	8c3b      	ldrh	r3, [r7, #32]
 8015d1c:	1ad3      	subs	r3, r2, r3
 8015d1e:	b29a      	uxth	r2, r3
 8015d20:	4b03      	ldr	r3, [pc, #12]	; (8015d30 <ip4_reass+0x2b0>)
 8015d22:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	e038      	b.n	8015d9a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	e036      	b.n	8015d9a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015d2c:	bf00      	nop
 8015d2e:	e00a      	b.n	8015d46 <ip4_reass+0x2c6>
 8015d30:	2000bf90 	.word	0x2000bf90
 8015d34:	2000bf8c 	.word	0x2000bf8c
 8015d38:	0801ab64 	.word	0x0801ab64
 8015d3c:	0801acd4 	.word	0x0801acd4
 8015d40:	0801abac 	.word	0x0801abac
    goto nullreturn_ipr;
 8015d44:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d106      	bne.n	8015d5a <ip4_reass+0x2da>
 8015d4c:	4b15      	ldr	r3, [pc, #84]	; (8015da4 <ip4_reass+0x324>)
 8015d4e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015d52:	4915      	ldr	r1, [pc, #84]	; (8015da8 <ip4_reass+0x328>)
 8015d54:	4815      	ldr	r0, [pc, #84]	; (8015dac <ip4_reass+0x32c>)
 8015d56:	f001 f913 	bl	8016f80 <iprintf>
  if (ipr->p == NULL) {
 8015d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d116      	bne.n	8015d90 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015d62:	4b13      	ldr	r3, [pc, #76]	; (8015db0 <ip4_reass+0x330>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d006      	beq.n	8015d7a <ip4_reass+0x2fa>
 8015d6c:	4b0d      	ldr	r3, [pc, #52]	; (8015da4 <ip4_reass+0x324>)
 8015d6e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015d72:	4910      	ldr	r1, [pc, #64]	; (8015db4 <ip4_reass+0x334>)
 8015d74:	480d      	ldr	r0, [pc, #52]	; (8015dac <ip4_reass+0x32c>)
 8015d76:	f001 f903 	bl	8016f80 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015d7a:	2100      	movs	r1, #0
 8015d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d7e:	f7ff fce7 	bl	8015750 <ip_reass_dequeue_datagram>
 8015d82:	e006      	b.n	8015d92 <ip4_reass+0x312>
    goto nullreturn;
 8015d84:	bf00      	nop
 8015d86:	e004      	b.n	8015d92 <ip4_reass+0x312>
    goto nullreturn;
 8015d88:	bf00      	nop
 8015d8a:	e002      	b.n	8015d92 <ip4_reass+0x312>
      goto nullreturn;
 8015d8c:	bf00      	nop
 8015d8e:	e000      	b.n	8015d92 <ip4_reass+0x312>
  }

nullreturn:
 8015d90:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f7f7 f8d8 	bl	800cf48 <pbuf_free>
  return NULL;
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3738      	adds	r7, #56	; 0x38
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	0801ab64 	.word	0x0801ab64
 8015da8:	0801acf0 	.word	0x0801acf0
 8015dac:	0801abac 	.word	0x0801abac
 8015db0:	2000bf8c 	.word	0x2000bf8c
 8015db4:	0801acfc 	.word	0x0801acfc

08015db8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015dbc:	2005      	movs	r0, #5
 8015dbe:	f7f6 fa17 	bl	800c1f0 <memp_malloc>
 8015dc2:	4603      	mov	r3, r0
}
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b082      	sub	sp, #8
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d106      	bne.n	8015de4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015dd6:	4b07      	ldr	r3, [pc, #28]	; (8015df4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015dd8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015ddc:	4906      	ldr	r1, [pc, #24]	; (8015df8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015dde:	4807      	ldr	r0, [pc, #28]	; (8015dfc <ip_frag_free_pbuf_custom_ref+0x34>)
 8015de0:	f001 f8ce 	bl	8016f80 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015de4:	6879      	ldr	r1, [r7, #4]
 8015de6:	2005      	movs	r0, #5
 8015de8:	f7f6 fa78 	bl	800c2dc <memp_free>
}
 8015dec:	bf00      	nop
 8015dee:	3708      	adds	r7, #8
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	0801ab64 	.word	0x0801ab64
 8015df8:	0801ad1c 	.word	0x0801ad1c
 8015dfc:	0801abac 	.word	0x0801abac

08015e00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b084      	sub	sp, #16
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d106      	bne.n	8015e20 <ipfrag_free_pbuf_custom+0x20>
 8015e12:	4b11      	ldr	r3, [pc, #68]	; (8015e58 <ipfrag_free_pbuf_custom+0x58>)
 8015e14:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015e18:	4910      	ldr	r1, [pc, #64]	; (8015e5c <ipfrag_free_pbuf_custom+0x5c>)
 8015e1a:	4811      	ldr	r0, [pc, #68]	; (8015e60 <ipfrag_free_pbuf_custom+0x60>)
 8015e1c:	f001 f8b0 	bl	8016f80 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015e20:	68fa      	ldr	r2, [r7, #12]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	429a      	cmp	r2, r3
 8015e26:	d006      	beq.n	8015e36 <ipfrag_free_pbuf_custom+0x36>
 8015e28:	4b0b      	ldr	r3, [pc, #44]	; (8015e58 <ipfrag_free_pbuf_custom+0x58>)
 8015e2a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015e2e:	490d      	ldr	r1, [pc, #52]	; (8015e64 <ipfrag_free_pbuf_custom+0x64>)
 8015e30:	480b      	ldr	r0, [pc, #44]	; (8015e60 <ipfrag_free_pbuf_custom+0x60>)
 8015e32:	f001 f8a5 	bl	8016f80 <iprintf>
  if (pcr->original != NULL) {
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	695b      	ldr	r3, [r3, #20]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d004      	beq.n	8015e48 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	695b      	ldr	r3, [r3, #20]
 8015e42:	4618      	mov	r0, r3
 8015e44:	f7f7 f880 	bl	800cf48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015e48:	68f8      	ldr	r0, [r7, #12]
 8015e4a:	f7ff ffbd 	bl	8015dc8 <ip_frag_free_pbuf_custom_ref>
}
 8015e4e:	bf00      	nop
 8015e50:	3710      	adds	r7, #16
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}
 8015e56:	bf00      	nop
 8015e58:	0801ab64 	.word	0x0801ab64
 8015e5c:	0801ad28 	.word	0x0801ad28
 8015e60:	0801abac 	.word	0x0801abac
 8015e64:	0801ad34 	.word	0x0801ad34

08015e68 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b094      	sub	sp, #80	; 0x50
 8015e6c:	af02      	add	r7, sp, #8
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015e74:	2300      	movs	r3, #0
 8015e76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015e7e:	3b14      	subs	r3, #20
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	da00      	bge.n	8015e86 <ip4_frag+0x1e>
 8015e84:	3307      	adds	r3, #7
 8015e86:	10db      	asrs	r3, r3, #3
 8015e88:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015e8a:	2314      	movs	r3, #20
 8015e8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e96:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	f003 030f 	and.w	r3, r3, #15
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	009b      	lsls	r3, r3, #2
 8015ea4:	b2db      	uxtb	r3, r3
 8015ea6:	2b14      	cmp	r3, #20
 8015ea8:	d002      	beq.n	8015eb0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015eaa:	f06f 0305 	mvn.w	r3, #5
 8015eae:	e110      	b.n	80160d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	895b      	ldrh	r3, [r3, #10]
 8015eb4:	2b13      	cmp	r3, #19
 8015eb6:	d809      	bhi.n	8015ecc <ip4_frag+0x64>
 8015eb8:	4b88      	ldr	r3, [pc, #544]	; (80160dc <ip4_frag+0x274>)
 8015eba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015ebe:	4988      	ldr	r1, [pc, #544]	; (80160e0 <ip4_frag+0x278>)
 8015ec0:	4888      	ldr	r0, [pc, #544]	; (80160e4 <ip4_frag+0x27c>)
 8015ec2:	f001 f85d 	bl	8016f80 <iprintf>
 8015ec6:	f06f 0305 	mvn.w	r3, #5
 8015eca:	e102      	b.n	80160d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ece:	88db      	ldrh	r3, [r3, #6]
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7f5 fbdc 	bl	800b690 <lwip_htons>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015edc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015ede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ee2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015ee6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015eec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	891b      	ldrh	r3, [r3, #8]
 8015ef2:	3b14      	subs	r3, #20
 8015ef4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015ef8:	e0e1      	b.n	80160be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015efa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015efc:	00db      	lsls	r3, r3, #3
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f04:	4293      	cmp	r3, r2
 8015f06:	bf28      	it	cs
 8015f08:	4613      	movcs	r3, r2
 8015f0a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015f0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f10:	2114      	movs	r1, #20
 8015f12:	200e      	movs	r0, #14
 8015f14:	f7f6 fd34 	bl	800c980 <pbuf_alloc>
 8015f18:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	f000 80d5 	beq.w	80160cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f24:	895b      	ldrh	r3, [r3, #10]
 8015f26:	2b13      	cmp	r3, #19
 8015f28:	d806      	bhi.n	8015f38 <ip4_frag+0xd0>
 8015f2a:	4b6c      	ldr	r3, [pc, #432]	; (80160dc <ip4_frag+0x274>)
 8015f2c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015f30:	496d      	ldr	r1, [pc, #436]	; (80160e8 <ip4_frag+0x280>)
 8015f32:	486c      	ldr	r0, [pc, #432]	; (80160e4 <ip4_frag+0x27c>)
 8015f34:	f001 f824 	bl	8016f80 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	2214      	movs	r2, #20
 8015f3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f40:	4618      	mov	r0, r3
 8015f42:	f000 ff29 	bl	8016d98 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015f4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015f52:	e064      	b.n	801601e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	895a      	ldrh	r2, [r3, #10]
 8015f58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f5a:	1ad3      	subs	r3, r2, r3
 8015f5c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	895b      	ldrh	r3, [r3, #10]
 8015f62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d906      	bls.n	8015f76 <ip4_frag+0x10e>
 8015f68:	4b5c      	ldr	r3, [pc, #368]	; (80160dc <ip4_frag+0x274>)
 8015f6a:	f240 322d 	movw	r2, #813	; 0x32d
 8015f6e:	495f      	ldr	r1, [pc, #380]	; (80160ec <ip4_frag+0x284>)
 8015f70:	485c      	ldr	r0, [pc, #368]	; (80160e4 <ip4_frag+0x27c>)
 8015f72:	f001 f805 	bl	8016f80 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015f76:	8bfa      	ldrh	r2, [r7, #30]
 8015f78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015f7c:	4293      	cmp	r3, r2
 8015f7e:	bf28      	it	cs
 8015f80:	4613      	movcs	r3, r2
 8015f82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015f86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d105      	bne.n	8015f9a <ip4_frag+0x132>
        poff = 0;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	60fb      	str	r3, [r7, #12]
        continue;
 8015f98:	e041      	b.n	801601e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015f9a:	f7ff ff0d 	bl	8015db8 <ip_frag_alloc_pbuf_custom_ref>
 8015f9e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015fa0:	69bb      	ldr	r3, [r7, #24]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d103      	bne.n	8015fae <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fa8:	f7f6 ffce 	bl	800cf48 <pbuf_free>
        goto memerr;
 8015fac:	e08f      	b.n	80160ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015fae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015fb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fb6:	4413      	add	r3, r2
 8015fb8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015fbc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015fc0:	9201      	str	r2, [sp, #4]
 8015fc2:	9300      	str	r3, [sp, #0]
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	2241      	movs	r2, #65	; 0x41
 8015fc8:	2000      	movs	r0, #0
 8015fca:	f7f6 fe03 	bl	800cbd4 <pbuf_alloced_custom>
 8015fce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d106      	bne.n	8015fe4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015fd6:	69b8      	ldr	r0, [r7, #24]
 8015fd8:	f7ff fef6 	bl	8015dc8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fde:	f7f6 ffb3 	bl	800cf48 <pbuf_free>
        goto memerr;
 8015fe2:	e074      	b.n	80160ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015fe4:	68f8      	ldr	r0, [r7, #12]
 8015fe6:	f7f7 f853 	bl	800d090 <pbuf_ref>
      pcr->original = p;
 8015fea:	69bb      	ldr	r3, [r7, #24]
 8015fec:	68fa      	ldr	r2, [r7, #12]
 8015fee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015ff0:	69bb      	ldr	r3, [r7, #24]
 8015ff2:	4a3f      	ldr	r2, [pc, #252]	; (80160f0 <ip4_frag+0x288>)
 8015ff4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015ff6:	6979      	ldr	r1, [r7, #20]
 8015ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ffa:	f7f7 f871 	bl	800d0e0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015ffe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016002:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016006:	1ad3      	subs	r3, r2, r3
 8016008:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801600c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016010:	2b00      	cmp	r3, #0
 8016012:	d004      	beq.n	801601e <ip4_frag+0x1b6>
        poff = 0;
 8016014:	2300      	movs	r3, #0
 8016016:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801601e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016022:	2b00      	cmp	r3, #0
 8016024:	d196      	bne.n	8015f54 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016026:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016028:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801602c:	4413      	add	r3, r2
 801602e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016034:	f1a3 0213 	sub.w	r2, r3, #19
 8016038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801603c:	429a      	cmp	r2, r3
 801603e:	bfcc      	ite	gt
 8016040:	2301      	movgt	r3, #1
 8016042:	2300      	movle	r3, #0
 8016044:	b2db      	uxtb	r3, r3
 8016046:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016048:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801604c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016050:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016052:	6a3b      	ldr	r3, [r7, #32]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d002      	beq.n	801605e <ip4_frag+0x1f6>
 8016058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801605a:	2b00      	cmp	r3, #0
 801605c:	d003      	beq.n	8016066 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801605e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016060:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016064:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016068:	4618      	mov	r0, r3
 801606a:	f7f5 fb11 	bl	800b690 <lwip_htons>
 801606e:	4603      	mov	r3, r0
 8016070:	461a      	mov	r2, r3
 8016072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016074:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016078:	3314      	adds	r3, #20
 801607a:	b29b      	uxth	r3, r3
 801607c:	4618      	mov	r0, r3
 801607e:	f7f5 fb07 	bl	800b690 <lwip_htons>
 8016082:	4603      	mov	r3, r0
 8016084:	461a      	mov	r2, r3
 8016086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016088:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801608c:	2200      	movs	r2, #0
 801608e:	729a      	strb	r2, [r3, #10]
 8016090:	2200      	movs	r2, #0
 8016092:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	695b      	ldr	r3, [r3, #20]
 8016098:	687a      	ldr	r2, [r7, #4]
 801609a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801609c:	68b8      	ldr	r0, [r7, #8]
 801609e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80160a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160a2:	f7f6 ff51 	bl	800cf48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80160a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80160aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80160ac:	1ad3      	subs	r3, r2, r3
 80160ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80160b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80160b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160b8:	4413      	add	r3, r2
 80160ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80160be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	f47f af19 	bne.w	8015efa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80160c8:	2300      	movs	r3, #0
 80160ca:	e002      	b.n	80160d2 <ip4_frag+0x26a>
      goto memerr;
 80160cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80160ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	3748      	adds	r7, #72	; 0x48
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd80      	pop	{r7, pc}
 80160da:	bf00      	nop
 80160dc:	0801ab64 	.word	0x0801ab64
 80160e0:	0801ad40 	.word	0x0801ad40
 80160e4:	0801abac 	.word	0x0801abac
 80160e8:	0801ad5c 	.word	0x0801ad5c
 80160ec:	0801ad7c 	.word	0x0801ad7c
 80160f0:	08015e01 	.word	0x08015e01

080160f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b086      	sub	sp, #24
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80160fe:	230e      	movs	r3, #14
 8016100:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	895b      	ldrh	r3, [r3, #10]
 8016106:	2b0e      	cmp	r3, #14
 8016108:	d96e      	bls.n	80161e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	7bdb      	ldrb	r3, [r3, #15]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d106      	bne.n	8016120 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016118:	3301      	adds	r3, #1
 801611a:	b2da      	uxtb	r2, r3
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	7b1a      	ldrb	r2, [r3, #12]
 801612a:	7b5b      	ldrb	r3, [r3, #13]
 801612c:	021b      	lsls	r3, r3, #8
 801612e:	4313      	orrs	r3, r2
 8016130:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016132:	693b      	ldr	r3, [r7, #16]
 8016134:	781b      	ldrb	r3, [r3, #0]
 8016136:	f003 0301 	and.w	r3, r3, #1
 801613a:	2b00      	cmp	r3, #0
 801613c:	d023      	beq.n	8016186 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	2b01      	cmp	r3, #1
 8016144:	d10f      	bne.n	8016166 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	785b      	ldrb	r3, [r3, #1]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d11b      	bne.n	8016186 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801614e:	693b      	ldr	r3, [r7, #16]
 8016150:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016152:	2b5e      	cmp	r3, #94	; 0x5e
 8016154:	d117      	bne.n	8016186 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	7b5b      	ldrb	r3, [r3, #13]
 801615a:	f043 0310 	orr.w	r3, r3, #16
 801615e:	b2da      	uxtb	r2, r3
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	735a      	strb	r2, [r3, #13]
 8016164:	e00f      	b.n	8016186 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	2206      	movs	r2, #6
 801616a:	4928      	ldr	r1, [pc, #160]	; (801620c <ethernet_input+0x118>)
 801616c:	4618      	mov	r0, r3
 801616e:	f000 fe03 	bl	8016d78 <memcmp>
 8016172:	4603      	mov	r3, r0
 8016174:	2b00      	cmp	r3, #0
 8016176:	d106      	bne.n	8016186 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	7b5b      	ldrb	r3, [r3, #13]
 801617c:	f043 0308 	orr.w	r3, r3, #8
 8016180:	b2da      	uxtb	r2, r3
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016186:	89fb      	ldrh	r3, [r7, #14]
 8016188:	2b08      	cmp	r3, #8
 801618a:	d003      	beq.n	8016194 <ethernet_input+0xa0>
 801618c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016190:	d014      	beq.n	80161bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016192:	e032      	b.n	80161fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801619a:	f003 0308 	and.w	r3, r3, #8
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d024      	beq.n	80161ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80161a2:	8afb      	ldrh	r3, [r7, #22]
 80161a4:	4619      	mov	r1, r3
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f7f6 fe48 	bl	800ce3c <pbuf_remove_header>
 80161ac:	4603      	mov	r3, r0
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d11e      	bne.n	80161f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80161b2:	6839      	ldr	r1, [r7, #0]
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f7fe ff23 	bl	8015000 <ip4_input>
      break;
 80161ba:	e013      	b.n	80161e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161c2:	f003 0308 	and.w	r3, r3, #8
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d014      	beq.n	80161f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80161ca:	8afb      	ldrh	r3, [r7, #22]
 80161cc:	4619      	mov	r1, r3
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f7f6 fe34 	bl	800ce3c <pbuf_remove_header>
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d10e      	bne.n	80161f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80161da:	6839      	ldr	r1, [r7, #0]
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7fe f89f 	bl	8014320 <etharp_input>
      break;
 80161e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80161e4:	2300      	movs	r3, #0
 80161e6:	e00c      	b.n	8016202 <ethernet_input+0x10e>
    goto free_and_return;
 80161e8:	bf00      	nop
 80161ea:	e006      	b.n	80161fa <ethernet_input+0x106>
        goto free_and_return;
 80161ec:	bf00      	nop
 80161ee:	e004      	b.n	80161fa <ethernet_input+0x106>
        goto free_and_return;
 80161f0:	bf00      	nop
 80161f2:	e002      	b.n	80161fa <ethernet_input+0x106>
        goto free_and_return;
 80161f4:	bf00      	nop
 80161f6:	e000      	b.n	80161fa <ethernet_input+0x106>
        goto free_and_return;
 80161f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f7f6 fea4 	bl	800cf48 <pbuf_free>
  return ERR_OK;
 8016200:	2300      	movs	r3, #0
}
 8016202:	4618      	mov	r0, r3
 8016204:	3718      	adds	r7, #24
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}
 801620a:	bf00      	nop
 801620c:	0801af64 	.word	0x0801af64

08016210 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016210:	b580      	push	{r7, lr}
 8016212:	b086      	sub	sp, #24
 8016214:	af00      	add	r7, sp, #0
 8016216:	60f8      	str	r0, [r7, #12]
 8016218:	60b9      	str	r1, [r7, #8]
 801621a:	607a      	str	r2, [r7, #4]
 801621c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801621e:	8c3b      	ldrh	r3, [r7, #32]
 8016220:	4618      	mov	r0, r3
 8016222:	f7f5 fa35 	bl	800b690 <lwip_htons>
 8016226:	4603      	mov	r3, r0
 8016228:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801622a:	210e      	movs	r1, #14
 801622c:	68b8      	ldr	r0, [r7, #8]
 801622e:	f7f6 fdf5 	bl	800ce1c <pbuf_add_header>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d125      	bne.n	8016284 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016238:	68bb      	ldr	r3, [r7, #8]
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	8afa      	ldrh	r2, [r7, #22]
 8016242:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	2206      	movs	r2, #6
 8016248:	6839      	ldr	r1, [r7, #0]
 801624a:	4618      	mov	r0, r3
 801624c:	f000 fda4 	bl	8016d98 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	3306      	adds	r3, #6
 8016254:	2206      	movs	r2, #6
 8016256:	6879      	ldr	r1, [r7, #4]
 8016258:	4618      	mov	r0, r3
 801625a:	f000 fd9d 	bl	8016d98 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016264:	2b06      	cmp	r3, #6
 8016266:	d006      	beq.n	8016276 <ethernet_output+0x66>
 8016268:	4b0a      	ldr	r3, [pc, #40]	; (8016294 <ethernet_output+0x84>)
 801626a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801626e:	490a      	ldr	r1, [pc, #40]	; (8016298 <ethernet_output+0x88>)
 8016270:	480a      	ldr	r0, [pc, #40]	; (801629c <ethernet_output+0x8c>)
 8016272:	f000 fe85 	bl	8016f80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	699b      	ldr	r3, [r3, #24]
 801627a:	68b9      	ldr	r1, [r7, #8]
 801627c:	68f8      	ldr	r0, [r7, #12]
 801627e:	4798      	blx	r3
 8016280:	4603      	mov	r3, r0
 8016282:	e002      	b.n	801628a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016284:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016286:	f06f 0301 	mvn.w	r3, #1
}
 801628a:	4618      	mov	r0, r3
 801628c:	3718      	adds	r7, #24
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}
 8016292:	bf00      	nop
 8016294:	0801ad8c 	.word	0x0801ad8c
 8016298:	0801adc4 	.word	0x0801adc4
 801629c:	0801adf8 	.word	0x0801adf8

080162a0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b086      	sub	sp, #24
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
 80162a8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	60bb      	str	r3, [r7, #8]
 80162ae:	2304      	movs	r3, #4
 80162b0:	60fb      	str	r3, [r7, #12]
 80162b2:	2300      	movs	r3, #0
 80162b4:	613b      	str	r3, [r7, #16]
 80162b6:	2300      	movs	r3, #0
 80162b8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80162ba:	f107 0308 	add.w	r3, r7, #8
 80162be:	2100      	movs	r1, #0
 80162c0:	4618      	mov	r0, r3
 80162c2:	f7f1 f8fb 	bl	80074bc <osMessageCreate>
 80162c6:	4602      	mov	r2, r0
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d102      	bne.n	80162da <sys_mbox_new+0x3a>
    return ERR_MEM;
 80162d4:	f04f 33ff 	mov.w	r3, #4294967295
 80162d8:	e000      	b.n	80162dc <sys_mbox_new+0x3c>

  return ERR_OK;
 80162da:	2300      	movs	r3, #0
}
 80162dc:	4618      	mov	r0, r3
 80162de:	3718      	adds	r7, #24
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}

080162e4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b084      	sub	sp, #16
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
 80162ec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	6839      	ldr	r1, [r7, #0]
 80162f4:	2200      	movs	r2, #0
 80162f6:	4618      	mov	r0, r3
 80162f8:	f7f1 f908 	bl	800750c <osMessagePut>
 80162fc:	4603      	mov	r3, r0
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d102      	bne.n	8016308 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016302:	2300      	movs	r3, #0
 8016304:	73fb      	strb	r3, [r7, #15]
 8016306:	e001      	b.n	801630c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016308:	23ff      	movs	r3, #255	; 0xff
 801630a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801630c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016310:	4618      	mov	r0, r3
 8016312:	3710      	adds	r7, #16
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b08c      	sub	sp, #48	; 0x30
 801631c:	af00      	add	r7, sp, #0
 801631e:	61f8      	str	r0, [r7, #28]
 8016320:	61b9      	str	r1, [r7, #24]
 8016322:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016324:	f7f0 ff3a 	bl	800719c <osKernelSysTick>
 8016328:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d017      	beq.n	8016360 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	6819      	ldr	r1, [r3, #0]
 8016334:	f107 0320 	add.w	r3, r7, #32
 8016338:	697a      	ldr	r2, [r7, #20]
 801633a:	4618      	mov	r0, r3
 801633c:	f7f1 f926 	bl	800758c <osMessageGet>

    if(event.status == osEventMessage)
 8016340:	6a3b      	ldr	r3, [r7, #32]
 8016342:	2b10      	cmp	r3, #16
 8016344:	d109      	bne.n	801635a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	461a      	mov	r2, r3
 801634a:	69bb      	ldr	r3, [r7, #24]
 801634c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801634e:	f7f0 ff25 	bl	800719c <osKernelSysTick>
 8016352:	4602      	mov	r2, r0
 8016354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016356:	1ad3      	subs	r3, r2, r3
 8016358:	e019      	b.n	801638e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801635a:	f04f 33ff 	mov.w	r3, #4294967295
 801635e:	e016      	b.n	801638e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	6819      	ldr	r1, [r3, #0]
 8016364:	463b      	mov	r3, r7
 8016366:	f04f 32ff 	mov.w	r2, #4294967295
 801636a:	4618      	mov	r0, r3
 801636c:	f7f1 f90e 	bl	800758c <osMessageGet>
 8016370:	f107 0320 	add.w	r3, r7, #32
 8016374:	463a      	mov	r2, r7
 8016376:	ca07      	ldmia	r2, {r0, r1, r2}
 8016378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637e:	461a      	mov	r2, r3
 8016380:	69bb      	ldr	r3, [r7, #24]
 8016382:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016384:	f7f0 ff0a 	bl	800719c <osKernelSysTick>
 8016388:	4602      	mov	r2, r0
 801638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801638c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801638e:	4618      	mov	r0, r3
 8016390:	3730      	adds	r7, #48	; 0x30
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}

08016396 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016396:	b480      	push	{r7}
 8016398:	b083      	sub	sp, #12
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d101      	bne.n	80163aa <sys_mbox_valid+0x14>
    return 0;
 80163a6:	2300      	movs	r3, #0
 80163a8:	e000      	b.n	80163ac <sys_mbox_valid+0x16>
  else
    return 1;
 80163aa:	2301      	movs	r3, #1
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	370c      	adds	r7, #12
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bc80      	pop	{r7}
 80163b4:	4770      	bx	lr
	...

080163b8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80163bc:	4803      	ldr	r0, [pc, #12]	; (80163cc <sys_init+0x14>)
 80163be:	f7f0 ff5d 	bl	800727c <osMutexCreate>
 80163c2:	4603      	mov	r3, r0
 80163c4:	4a02      	ldr	r2, [pc, #8]	; (80163d0 <sys_init+0x18>)
 80163c6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80163c8:	bf00      	nop
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	0801af74 	.word	0x0801af74
 80163d0:	2000bf94 	.word	0x2000bf94

080163d4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b084      	sub	sp, #16
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80163dc:	2300      	movs	r3, #0
 80163de:	60bb      	str	r3, [r7, #8]
 80163e0:	2300      	movs	r3, #0
 80163e2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80163e4:	f107 0308 	add.w	r3, r7, #8
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7f0 ff47 	bl	800727c <osMutexCreate>
 80163ee:	4602      	mov	r2, r0
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d102      	bne.n	8016402 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80163fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016400:	e000      	b.n	8016404 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016402:	2300      	movs	r3, #0
}
 8016404:	4618      	mov	r0, r3
 8016406:	3710      	adds	r7, #16
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}

0801640c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b082      	sub	sp, #8
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	f04f 31ff 	mov.w	r1, #4294967295
 801641c:	4618      	mov	r0, r3
 801641e:	f7f0 ff45 	bl	80072ac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016422:	bf00      	nop
 8016424:	3708      	adds	r7, #8
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}

0801642a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801642a:	b580      	push	{r7, lr}
 801642c:	b082      	sub	sp, #8
 801642e:	af00      	add	r7, sp, #0
 8016430:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	4618      	mov	r0, r3
 8016438:	f7f0 ff86 	bl	8007348 <osMutexRelease>
}
 801643c:	bf00      	nop
 801643e:	3708      	adds	r7, #8
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}

08016444 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b08c      	sub	sp, #48	; 0x30
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
 8016450:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016452:	f107 0314 	add.w	r3, r7, #20
 8016456:	2200      	movs	r2, #0
 8016458:	601a      	str	r2, [r3, #0]
 801645a:	605a      	str	r2, [r3, #4]
 801645c:	609a      	str	r2, [r3, #8]
 801645e:	60da      	str	r2, [r3, #12]
 8016460:	611a      	str	r2, [r3, #16]
 8016462:	615a      	str	r2, [r3, #20]
 8016464:	619a      	str	r2, [r3, #24]
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	617b      	str	r3, [r7, #20]
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	61bb      	str	r3, [r7, #24]
 801646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016470:	b21b      	sxth	r3, r3
 8016472:	83bb      	strh	r3, [r7, #28]
 8016474:	683b      	ldr	r3, [r7, #0]
 8016476:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016478:	f107 0314 	add.w	r3, r7, #20
 801647c:	6879      	ldr	r1, [r7, #4]
 801647e:	4618      	mov	r0, r3
 8016480:	f7f0 fe9c 	bl	80071bc <osThreadCreate>
 8016484:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016486:	4618      	mov	r0, r3
 8016488:	3730      	adds	r7, #48	; 0x30
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
	...

08016490 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016494:	4b04      	ldr	r3, [pc, #16]	; (80164a8 <sys_arch_protect+0x18>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	f04f 31ff 	mov.w	r1, #4294967295
 801649c:	4618      	mov	r0, r3
 801649e:	f7f0 ff05 	bl	80072ac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80164a2:	2301      	movs	r3, #1
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	bd80      	pop	{r7, pc}
 80164a8:	2000bf94 	.word	0x2000bf94

080164ac <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b082      	sub	sp, #8
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80164b4:	4b04      	ldr	r3, [pc, #16]	; (80164c8 <sys_arch_unprotect+0x1c>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7f0 ff45 	bl	8007348 <osMutexRelease>
}
 80164be:	bf00      	nop
 80164c0:	3708      	adds	r7, #8
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	2000bf94 	.word	0x2000bf94

080164cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80164e0:	4619      	mov	r1, r3
 80164e2:	4610      	mov	r0, r2
 80164e4:	f7ef fcc6 	bl	8005e74 <USBD_LL_SetupStage>
}
 80164e8:	bf00      	nop
 80164ea:	3708      	adds	r7, #8
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
 80164f8:	460b      	mov	r3, r1
 80164fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016502:	78fa      	ldrb	r2, [r7, #3]
 8016504:	6879      	ldr	r1, [r7, #4]
 8016506:	4613      	mov	r3, r2
 8016508:	00db      	lsls	r3, r3, #3
 801650a:	4413      	add	r3, r2
 801650c:	009b      	lsls	r3, r3, #2
 801650e:	440b      	add	r3, r1
 8016510:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	78fb      	ldrb	r3, [r7, #3]
 8016518:	4619      	mov	r1, r3
 801651a:	f7ef fd00 	bl	8005f1e <USBD_LL_DataOutStage>
}
 801651e:	bf00      	nop
 8016520:	3708      	adds	r7, #8
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b082      	sub	sp, #8
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
 801652e:	460b      	mov	r3, r1
 8016530:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016538:	78fa      	ldrb	r2, [r7, #3]
 801653a:	6879      	ldr	r1, [r7, #4]
 801653c:	4613      	mov	r3, r2
 801653e:	00db      	lsls	r3, r3, #3
 8016540:	4413      	add	r3, r2
 8016542:	009b      	lsls	r3, r3, #2
 8016544:	440b      	add	r3, r1
 8016546:	334c      	adds	r3, #76	; 0x4c
 8016548:	681a      	ldr	r2, [r3, #0]
 801654a:	78fb      	ldrb	r3, [r7, #3]
 801654c:	4619      	mov	r1, r3
 801654e:	f7ef fd99 	bl	8006084 <USBD_LL_DataInStage>
}
 8016552:	bf00      	nop
 8016554:	3708      	adds	r7, #8
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}

0801655a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b082      	sub	sp, #8
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016568:	4618      	mov	r0, r3
 801656a:	f7ef feca 	bl	8006302 <USBD_LL_SOF>
}
 801656e:	bf00      	nop
 8016570:	3708      	adds	r7, #8
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}

08016576 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016576:	b580      	push	{r7, lr}
 8016578:	b084      	sub	sp, #16
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801657e:	2301      	movs	r3, #1
 8016580:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	68db      	ldr	r3, [r3, #12]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d102      	bne.n	8016590 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801658a:	2300      	movs	r3, #0
 801658c:	73fb      	strb	r3, [r7, #15]
 801658e:	e008      	b.n	80165a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	68db      	ldr	r3, [r3, #12]
 8016594:	2b02      	cmp	r3, #2
 8016596:	d102      	bne.n	801659e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016598:	2301      	movs	r3, #1
 801659a:	73fb      	strb	r3, [r7, #15]
 801659c:	e001      	b.n	80165a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801659e:	f7ea f9b9 	bl	8000914 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165a8:	7bfa      	ldrb	r2, [r7, #15]
 80165aa:	4611      	mov	r1, r2
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7ef fe6d 	bl	800628c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7ef fe15 	bl	80061e8 <USBD_LL_Reset>
}
 80165be:	bf00      	nop
 80165c0:	3710      	adds	r7, #16
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}
	...

080165c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7ef fe67 	bl	80062aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	687a      	ldr	r2, [r7, #4]
 80165e8:	6812      	ldr	r2, [r2, #0]
 80165ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80165ee:	f043 0301 	orr.w	r3, r3, #1
 80165f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	6a1b      	ldr	r3, [r3, #32]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d005      	beq.n	8016608 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80165fc:	4b04      	ldr	r3, [pc, #16]	; (8016610 <HAL_PCD_SuspendCallback+0x48>)
 80165fe:	691b      	ldr	r3, [r3, #16]
 8016600:	4a03      	ldr	r2, [pc, #12]	; (8016610 <HAL_PCD_SuspendCallback+0x48>)
 8016602:	f043 0306 	orr.w	r3, r3, #6
 8016606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016608:	bf00      	nop
 801660a:	3708      	adds	r7, #8
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}
 8016610:	e000ed00 	.word	0xe000ed00

08016614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b082      	sub	sp, #8
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016622:	4618      	mov	r0, r3
 8016624:	f7ef fe56 	bl	80062d4 <USBD_LL_Resume>
}
 8016628:	bf00      	nop
 801662a:	3708      	adds	r7, #8
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}

08016630 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b082      	sub	sp, #8
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
 8016638:	460b      	mov	r3, r1
 801663a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016642:	78fa      	ldrb	r2, [r7, #3]
 8016644:	4611      	mov	r1, r2
 8016646:	4618      	mov	r0, r3
 8016648:	f7ef fead 	bl	80063a6 <USBD_LL_IsoOUTIncomplete>
}
 801664c:	bf00      	nop
 801664e:	3708      	adds	r7, #8
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	460b      	mov	r3, r1
 801665e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016666:	78fa      	ldrb	r2, [r7, #3]
 8016668:	4611      	mov	r1, r2
 801666a:	4618      	mov	r0, r3
 801666c:	f7ef fe69 	bl	8006342 <USBD_LL_IsoINIncomplete>
}
 8016670:	bf00      	nop
 8016672:	3708      	adds	r7, #8
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}

08016678 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b082      	sub	sp, #8
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016686:	4618      	mov	r0, r3
 8016688:	f7ef febf 	bl	800640a <USBD_LL_DevConnected>
}
 801668c:	bf00      	nop
 801668e:	3708      	adds	r7, #8
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}

08016694 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7ef febb 	bl	800641e <USBD_LL_DevDisconnected>
}
 80166a8:	bf00      	nop
 80166aa:	3708      	adds	r7, #8
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b084      	sub	sp, #16
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	4608      	mov	r0, r1
 80166ba:	4611      	mov	r1, r2
 80166bc:	461a      	mov	r2, r3
 80166be:	4603      	mov	r3, r0
 80166c0:	70fb      	strb	r3, [r7, #3]
 80166c2:	460b      	mov	r3, r1
 80166c4:	70bb      	strb	r3, [r7, #2]
 80166c6:	4613      	mov	r3, r2
 80166c8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166ca:	2300      	movs	r3, #0
 80166cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166ce:	2300      	movs	r3, #0
 80166d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80166d8:	78bb      	ldrb	r3, [r7, #2]
 80166da:	883a      	ldrh	r2, [r7, #0]
 80166dc:	78f9      	ldrb	r1, [r7, #3]
 80166de:	f7ec fc1f 	bl	8002f20 <HAL_PCD_EP_Open>
 80166e2:	4603      	mov	r3, r0
 80166e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166e6:	7bfb      	ldrb	r3, [r7, #15]
 80166e8:	4618      	mov	r0, r3
 80166ea:	f000 f8d1 	bl	8016890 <USBD_Get_USB_Status>
 80166ee:	4603      	mov	r3, r0
 80166f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3710      	adds	r7, #16
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b084      	sub	sp, #16
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	460b      	mov	r3, r1
 8016706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016708:	2300      	movs	r3, #0
 801670a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801670c:	2300      	movs	r3, #0
 801670e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016716:	78fa      	ldrb	r2, [r7, #3]
 8016718:	4611      	mov	r1, r2
 801671a:	4618      	mov	r0, r3
 801671c:	f7ec fcfd 	bl	800311a <HAL_PCD_EP_SetStall>
 8016720:	4603      	mov	r3, r0
 8016722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016724:	7bfb      	ldrb	r3, [r7, #15]
 8016726:	4618      	mov	r0, r3
 8016728:	f000 f8b2 	bl	8016890 <USBD_Get_USB_Status>
 801672c:	4603      	mov	r3, r0
 801672e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016730:	7bbb      	ldrb	r3, [r7, #14]
}
 8016732:	4618      	mov	r0, r3
 8016734:	3710      	adds	r7, #16
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}

0801673a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801673a:	b580      	push	{r7, lr}
 801673c:	b084      	sub	sp, #16
 801673e:	af00      	add	r7, sp, #0
 8016740:	6078      	str	r0, [r7, #4]
 8016742:	460b      	mov	r3, r1
 8016744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016746:	2300      	movs	r3, #0
 8016748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801674a:	2300      	movs	r3, #0
 801674c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016754:	78fa      	ldrb	r2, [r7, #3]
 8016756:	4611      	mov	r1, r2
 8016758:	4618      	mov	r0, r3
 801675a:	f7ec fd42 	bl	80031e2 <HAL_PCD_EP_ClrStall>
 801675e:	4603      	mov	r3, r0
 8016760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016762:	7bfb      	ldrb	r3, [r7, #15]
 8016764:	4618      	mov	r0, r3
 8016766:	f000 f893 	bl	8016890 <USBD_Get_USB_Status>
 801676a:	4603      	mov	r3, r0
 801676c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801676e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016770:	4618      	mov	r0, r3
 8016772:	3710      	adds	r7, #16
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	460b      	mov	r3, r1
 8016782:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801678a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801678c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016790:	2b00      	cmp	r3, #0
 8016792:	da0b      	bge.n	80167ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016794:	78fb      	ldrb	r3, [r7, #3]
 8016796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801679a:	68f9      	ldr	r1, [r7, #12]
 801679c:	4613      	mov	r3, r2
 801679e:	00db      	lsls	r3, r3, #3
 80167a0:	4413      	add	r3, r2
 80167a2:	009b      	lsls	r3, r3, #2
 80167a4:	440b      	add	r3, r1
 80167a6:	333e      	adds	r3, #62	; 0x3e
 80167a8:	781b      	ldrb	r3, [r3, #0]
 80167aa:	e00b      	b.n	80167c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80167ac:	78fb      	ldrb	r3, [r7, #3]
 80167ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80167b2:	68f9      	ldr	r1, [r7, #12]
 80167b4:	4613      	mov	r3, r2
 80167b6:	00db      	lsls	r3, r3, #3
 80167b8:	4413      	add	r3, r2
 80167ba:	009b      	lsls	r3, r3, #2
 80167bc:	440b      	add	r3, r1
 80167be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80167c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80167c4:	4618      	mov	r0, r3
 80167c6:	3714      	adds	r7, #20
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bc80      	pop	{r7}
 80167cc:	4770      	bx	lr

080167ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80167ce:	b580      	push	{r7, lr}
 80167d0:	b084      	sub	sp, #16
 80167d2:	af00      	add	r7, sp, #0
 80167d4:	6078      	str	r0, [r7, #4]
 80167d6:	460b      	mov	r3, r1
 80167d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167da:	2300      	movs	r3, #0
 80167dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167de:	2300      	movs	r3, #0
 80167e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80167e8:	78fa      	ldrb	r2, [r7, #3]
 80167ea:	4611      	mov	r1, r2
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7ec fb72 	bl	8002ed6 <HAL_PCD_SetAddress>
 80167f2:	4603      	mov	r3, r0
 80167f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167f6:	7bfb      	ldrb	r3, [r7, #15]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f000 f849 	bl	8016890 <USBD_Get_USB_Status>
 80167fe:	4603      	mov	r3, r0
 8016800:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016802:	7bbb      	ldrb	r3, [r7, #14]
}
 8016804:	4618      	mov	r0, r3
 8016806:	3710      	adds	r7, #16
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}

0801680c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b086      	sub	sp, #24
 8016810:	af00      	add	r7, sp, #0
 8016812:	60f8      	str	r0, [r7, #12]
 8016814:	607a      	str	r2, [r7, #4]
 8016816:	603b      	str	r3, [r7, #0]
 8016818:	460b      	mov	r3, r1
 801681a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801681c:	2300      	movs	r3, #0
 801681e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016820:	2300      	movs	r3, #0
 8016822:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801682a:	7af9      	ldrb	r1, [r7, #11]
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	687a      	ldr	r2, [r7, #4]
 8016830:	f7ec fc29 	bl	8003086 <HAL_PCD_EP_Transmit>
 8016834:	4603      	mov	r3, r0
 8016836:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016838:	7dfb      	ldrb	r3, [r7, #23]
 801683a:	4618      	mov	r0, r3
 801683c:	f000 f828 	bl	8016890 <USBD_Get_USB_Status>
 8016840:	4603      	mov	r3, r0
 8016842:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016844:	7dbb      	ldrb	r3, [r7, #22]
}
 8016846:	4618      	mov	r0, r3
 8016848:	3718      	adds	r7, #24
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}

0801684e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801684e:	b580      	push	{r7, lr}
 8016850:	b086      	sub	sp, #24
 8016852:	af00      	add	r7, sp, #0
 8016854:	60f8      	str	r0, [r7, #12]
 8016856:	607a      	str	r2, [r7, #4]
 8016858:	603b      	str	r3, [r7, #0]
 801685a:	460b      	mov	r3, r1
 801685c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801685e:	2300      	movs	r3, #0
 8016860:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016862:	2300      	movs	r3, #0
 8016864:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801686c:	7af9      	ldrb	r1, [r7, #11]
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	687a      	ldr	r2, [r7, #4]
 8016872:	f7ec fbbd 	bl	8002ff0 <HAL_PCD_EP_Receive>
 8016876:	4603      	mov	r3, r0
 8016878:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801687a:	7dfb      	ldrb	r3, [r7, #23]
 801687c:	4618      	mov	r0, r3
 801687e:	f000 f807 	bl	8016890 <USBD_Get_USB_Status>
 8016882:	4603      	mov	r3, r0
 8016884:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016886:	7dbb      	ldrb	r3, [r7, #22]
}
 8016888:	4618      	mov	r0, r3
 801688a:	3718      	adds	r7, #24
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}

08016890 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016890:	b480      	push	{r7}
 8016892:	b085      	sub	sp, #20
 8016894:	af00      	add	r7, sp, #0
 8016896:	4603      	mov	r3, r0
 8016898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801689a:	2300      	movs	r3, #0
 801689c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801689e:	79fb      	ldrb	r3, [r7, #7]
 80168a0:	2b03      	cmp	r3, #3
 80168a2:	d817      	bhi.n	80168d4 <USBD_Get_USB_Status+0x44>
 80168a4:	a201      	add	r2, pc, #4	; (adr r2, 80168ac <USBD_Get_USB_Status+0x1c>)
 80168a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168aa:	bf00      	nop
 80168ac:	080168bd 	.word	0x080168bd
 80168b0:	080168c3 	.word	0x080168c3
 80168b4:	080168c9 	.word	0x080168c9
 80168b8:	080168cf 	.word	0x080168cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80168bc:	2300      	movs	r3, #0
 80168be:	73fb      	strb	r3, [r7, #15]
    break;
 80168c0:	e00b      	b.n	80168da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80168c2:	2303      	movs	r3, #3
 80168c4:	73fb      	strb	r3, [r7, #15]
    break;
 80168c6:	e008      	b.n	80168da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80168c8:	2301      	movs	r3, #1
 80168ca:	73fb      	strb	r3, [r7, #15]
    break;
 80168cc:	e005      	b.n	80168da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80168ce:	2303      	movs	r3, #3
 80168d0:	73fb      	strb	r3, [r7, #15]
    break;
 80168d2:	e002      	b.n	80168da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80168d4:	2303      	movs	r3, #3
 80168d6:	73fb      	strb	r3, [r7, #15]
    break;
 80168d8:	bf00      	nop
  }
  return usb_status;
 80168da:	7bfb      	ldrb	r3, [r7, #15]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3714      	adds	r7, #20
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bc80      	pop	{r7}
 80168e4:	4770      	bx	lr
 80168e6:	bf00      	nop

080168e8 <__sflush_r>:
 80168e8:	898a      	ldrh	r2, [r1, #12]
 80168ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ec:	4605      	mov	r5, r0
 80168ee:	0710      	lsls	r0, r2, #28
 80168f0:	460c      	mov	r4, r1
 80168f2:	d457      	bmi.n	80169a4 <__sflush_r+0xbc>
 80168f4:	684b      	ldr	r3, [r1, #4]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	dc04      	bgt.n	8016904 <__sflush_r+0x1c>
 80168fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	dc01      	bgt.n	8016904 <__sflush_r+0x1c>
 8016900:	2000      	movs	r0, #0
 8016902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016906:	2e00      	cmp	r6, #0
 8016908:	d0fa      	beq.n	8016900 <__sflush_r+0x18>
 801690a:	2300      	movs	r3, #0
 801690c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016910:	682f      	ldr	r7, [r5, #0]
 8016912:	602b      	str	r3, [r5, #0]
 8016914:	d032      	beq.n	801697c <__sflush_r+0x94>
 8016916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016918:	89a3      	ldrh	r3, [r4, #12]
 801691a:	075a      	lsls	r2, r3, #29
 801691c:	d505      	bpl.n	801692a <__sflush_r+0x42>
 801691e:	6863      	ldr	r3, [r4, #4]
 8016920:	1ac0      	subs	r0, r0, r3
 8016922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016924:	b10b      	cbz	r3, 801692a <__sflush_r+0x42>
 8016926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016928:	1ac0      	subs	r0, r0, r3
 801692a:	2300      	movs	r3, #0
 801692c:	4602      	mov	r2, r0
 801692e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016930:	6a21      	ldr	r1, [r4, #32]
 8016932:	4628      	mov	r0, r5
 8016934:	47b0      	blx	r6
 8016936:	1c43      	adds	r3, r0, #1
 8016938:	89a3      	ldrh	r3, [r4, #12]
 801693a:	d106      	bne.n	801694a <__sflush_r+0x62>
 801693c:	6829      	ldr	r1, [r5, #0]
 801693e:	291d      	cmp	r1, #29
 8016940:	d82c      	bhi.n	801699c <__sflush_r+0xb4>
 8016942:	4a29      	ldr	r2, [pc, #164]	; (80169e8 <__sflush_r+0x100>)
 8016944:	40ca      	lsrs	r2, r1
 8016946:	07d6      	lsls	r6, r2, #31
 8016948:	d528      	bpl.n	801699c <__sflush_r+0xb4>
 801694a:	2200      	movs	r2, #0
 801694c:	6062      	str	r2, [r4, #4]
 801694e:	04d9      	lsls	r1, r3, #19
 8016950:	6922      	ldr	r2, [r4, #16]
 8016952:	6022      	str	r2, [r4, #0]
 8016954:	d504      	bpl.n	8016960 <__sflush_r+0x78>
 8016956:	1c42      	adds	r2, r0, #1
 8016958:	d101      	bne.n	801695e <__sflush_r+0x76>
 801695a:	682b      	ldr	r3, [r5, #0]
 801695c:	b903      	cbnz	r3, 8016960 <__sflush_r+0x78>
 801695e:	6560      	str	r0, [r4, #84]	; 0x54
 8016960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016962:	602f      	str	r7, [r5, #0]
 8016964:	2900      	cmp	r1, #0
 8016966:	d0cb      	beq.n	8016900 <__sflush_r+0x18>
 8016968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801696c:	4299      	cmp	r1, r3
 801696e:	d002      	beq.n	8016976 <__sflush_r+0x8e>
 8016970:	4628      	mov	r0, r5
 8016972:	f000 fa27 	bl	8016dc4 <_free_r>
 8016976:	2000      	movs	r0, #0
 8016978:	6360      	str	r0, [r4, #52]	; 0x34
 801697a:	e7c2      	b.n	8016902 <__sflush_r+0x1a>
 801697c:	6a21      	ldr	r1, [r4, #32]
 801697e:	2301      	movs	r3, #1
 8016980:	4628      	mov	r0, r5
 8016982:	47b0      	blx	r6
 8016984:	1c41      	adds	r1, r0, #1
 8016986:	d1c7      	bne.n	8016918 <__sflush_r+0x30>
 8016988:	682b      	ldr	r3, [r5, #0]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d0c4      	beq.n	8016918 <__sflush_r+0x30>
 801698e:	2b1d      	cmp	r3, #29
 8016990:	d001      	beq.n	8016996 <__sflush_r+0xae>
 8016992:	2b16      	cmp	r3, #22
 8016994:	d101      	bne.n	801699a <__sflush_r+0xb2>
 8016996:	602f      	str	r7, [r5, #0]
 8016998:	e7b2      	b.n	8016900 <__sflush_r+0x18>
 801699a:	89a3      	ldrh	r3, [r4, #12]
 801699c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169a0:	81a3      	strh	r3, [r4, #12]
 80169a2:	e7ae      	b.n	8016902 <__sflush_r+0x1a>
 80169a4:	690f      	ldr	r7, [r1, #16]
 80169a6:	2f00      	cmp	r7, #0
 80169a8:	d0aa      	beq.n	8016900 <__sflush_r+0x18>
 80169aa:	0793      	lsls	r3, r2, #30
 80169ac:	680e      	ldr	r6, [r1, #0]
 80169ae:	bf08      	it	eq
 80169b0:	694b      	ldreq	r3, [r1, #20]
 80169b2:	600f      	str	r7, [r1, #0]
 80169b4:	bf18      	it	ne
 80169b6:	2300      	movne	r3, #0
 80169b8:	1bf6      	subs	r6, r6, r7
 80169ba:	608b      	str	r3, [r1, #8]
 80169bc:	2e00      	cmp	r6, #0
 80169be:	dd9f      	ble.n	8016900 <__sflush_r+0x18>
 80169c0:	6a21      	ldr	r1, [r4, #32]
 80169c2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80169c6:	4633      	mov	r3, r6
 80169c8:	463a      	mov	r2, r7
 80169ca:	4628      	mov	r0, r5
 80169cc:	47e0      	blx	ip
 80169ce:	2800      	cmp	r0, #0
 80169d0:	dc06      	bgt.n	80169e0 <__sflush_r+0xf8>
 80169d2:	89a3      	ldrh	r3, [r4, #12]
 80169d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169d8:	81a3      	strh	r3, [r4, #12]
 80169da:	f04f 30ff 	mov.w	r0, #4294967295
 80169de:	e790      	b.n	8016902 <__sflush_r+0x1a>
 80169e0:	4407      	add	r7, r0
 80169e2:	1a36      	subs	r6, r6, r0
 80169e4:	e7ea      	b.n	80169bc <__sflush_r+0xd4>
 80169e6:	bf00      	nop
 80169e8:	20400001 	.word	0x20400001

080169ec <_fflush_r>:
 80169ec:	b538      	push	{r3, r4, r5, lr}
 80169ee:	690b      	ldr	r3, [r1, #16]
 80169f0:	4605      	mov	r5, r0
 80169f2:	460c      	mov	r4, r1
 80169f4:	b913      	cbnz	r3, 80169fc <_fflush_r+0x10>
 80169f6:	2500      	movs	r5, #0
 80169f8:	4628      	mov	r0, r5
 80169fa:	bd38      	pop	{r3, r4, r5, pc}
 80169fc:	b118      	cbz	r0, 8016a06 <_fflush_r+0x1a>
 80169fe:	6983      	ldr	r3, [r0, #24]
 8016a00:	b90b      	cbnz	r3, 8016a06 <_fflush_r+0x1a>
 8016a02:	f000 f887 	bl	8016b14 <__sinit>
 8016a06:	4b14      	ldr	r3, [pc, #80]	; (8016a58 <_fflush_r+0x6c>)
 8016a08:	429c      	cmp	r4, r3
 8016a0a:	d11b      	bne.n	8016a44 <_fflush_r+0x58>
 8016a0c:	686c      	ldr	r4, [r5, #4]
 8016a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d0ef      	beq.n	80169f6 <_fflush_r+0xa>
 8016a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016a18:	07d0      	lsls	r0, r2, #31
 8016a1a:	d404      	bmi.n	8016a26 <_fflush_r+0x3a>
 8016a1c:	0599      	lsls	r1, r3, #22
 8016a1e:	d402      	bmi.n	8016a26 <_fflush_r+0x3a>
 8016a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a22:	f000 f93a 	bl	8016c9a <__retarget_lock_acquire_recursive>
 8016a26:	4628      	mov	r0, r5
 8016a28:	4621      	mov	r1, r4
 8016a2a:	f7ff ff5d 	bl	80168e8 <__sflush_r>
 8016a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a30:	07da      	lsls	r2, r3, #31
 8016a32:	4605      	mov	r5, r0
 8016a34:	d4e0      	bmi.n	80169f8 <_fflush_r+0xc>
 8016a36:	89a3      	ldrh	r3, [r4, #12]
 8016a38:	059b      	lsls	r3, r3, #22
 8016a3a:	d4dd      	bmi.n	80169f8 <_fflush_r+0xc>
 8016a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a3e:	f000 f92d 	bl	8016c9c <__retarget_lock_release_recursive>
 8016a42:	e7d9      	b.n	80169f8 <_fflush_r+0xc>
 8016a44:	4b05      	ldr	r3, [pc, #20]	; (8016a5c <_fflush_r+0x70>)
 8016a46:	429c      	cmp	r4, r3
 8016a48:	d101      	bne.n	8016a4e <_fflush_r+0x62>
 8016a4a:	68ac      	ldr	r4, [r5, #8]
 8016a4c:	e7df      	b.n	8016a0e <_fflush_r+0x22>
 8016a4e:	4b04      	ldr	r3, [pc, #16]	; (8016a60 <_fflush_r+0x74>)
 8016a50:	429c      	cmp	r4, r3
 8016a52:	bf08      	it	eq
 8016a54:	68ec      	ldreq	r4, [r5, #12]
 8016a56:	e7da      	b.n	8016a0e <_fflush_r+0x22>
 8016a58:	0801af9c 	.word	0x0801af9c
 8016a5c:	0801afbc 	.word	0x0801afbc
 8016a60:	0801af7c 	.word	0x0801af7c

08016a64 <std>:
 8016a64:	2300      	movs	r3, #0
 8016a66:	b510      	push	{r4, lr}
 8016a68:	4604      	mov	r4, r0
 8016a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8016a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a72:	6083      	str	r3, [r0, #8]
 8016a74:	8181      	strh	r1, [r0, #12]
 8016a76:	6643      	str	r3, [r0, #100]	; 0x64
 8016a78:	81c2      	strh	r2, [r0, #14]
 8016a7a:	6183      	str	r3, [r0, #24]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	2208      	movs	r2, #8
 8016a80:	305c      	adds	r0, #92	; 0x5c
 8016a82:	f000 f997 	bl	8016db4 <memset>
 8016a86:	4b05      	ldr	r3, [pc, #20]	; (8016a9c <std+0x38>)
 8016a88:	6263      	str	r3, [r4, #36]	; 0x24
 8016a8a:	4b05      	ldr	r3, [pc, #20]	; (8016aa0 <std+0x3c>)
 8016a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a8e:	4b05      	ldr	r3, [pc, #20]	; (8016aa4 <std+0x40>)
 8016a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a92:	4b05      	ldr	r3, [pc, #20]	; (8016aa8 <std+0x44>)
 8016a94:	6224      	str	r4, [r4, #32]
 8016a96:	6323      	str	r3, [r4, #48]	; 0x30
 8016a98:	bd10      	pop	{r4, pc}
 8016a9a:	bf00      	nop
 8016a9c:	08017121 	.word	0x08017121
 8016aa0:	08017143 	.word	0x08017143
 8016aa4:	0801717b 	.word	0x0801717b
 8016aa8:	0801719f 	.word	0x0801719f

08016aac <_cleanup_r>:
 8016aac:	4901      	ldr	r1, [pc, #4]	; (8016ab4 <_cleanup_r+0x8>)
 8016aae:	f000 b8af 	b.w	8016c10 <_fwalk_reent>
 8016ab2:	bf00      	nop
 8016ab4:	080169ed 	.word	0x080169ed

08016ab8 <__sfmoreglue>:
 8016ab8:	b570      	push	{r4, r5, r6, lr}
 8016aba:	2268      	movs	r2, #104	; 0x68
 8016abc:	1e4d      	subs	r5, r1, #1
 8016abe:	4355      	muls	r5, r2
 8016ac0:	460e      	mov	r6, r1
 8016ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016ac6:	f000 f9e7 	bl	8016e98 <_malloc_r>
 8016aca:	4604      	mov	r4, r0
 8016acc:	b140      	cbz	r0, 8016ae0 <__sfmoreglue+0x28>
 8016ace:	2100      	movs	r1, #0
 8016ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8016ad4:	300c      	adds	r0, #12
 8016ad6:	60a0      	str	r0, [r4, #8]
 8016ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016adc:	f000 f96a 	bl	8016db4 <memset>
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	bd70      	pop	{r4, r5, r6, pc}

08016ae4 <__sfp_lock_acquire>:
 8016ae4:	4801      	ldr	r0, [pc, #4]	; (8016aec <__sfp_lock_acquire+0x8>)
 8016ae6:	f000 b8d8 	b.w	8016c9a <__retarget_lock_acquire_recursive>
 8016aea:	bf00      	nop
 8016aec:	2000c4a5 	.word	0x2000c4a5

08016af0 <__sfp_lock_release>:
 8016af0:	4801      	ldr	r0, [pc, #4]	; (8016af8 <__sfp_lock_release+0x8>)
 8016af2:	f000 b8d3 	b.w	8016c9c <__retarget_lock_release_recursive>
 8016af6:	bf00      	nop
 8016af8:	2000c4a5 	.word	0x2000c4a5

08016afc <__sinit_lock_acquire>:
 8016afc:	4801      	ldr	r0, [pc, #4]	; (8016b04 <__sinit_lock_acquire+0x8>)
 8016afe:	f000 b8cc 	b.w	8016c9a <__retarget_lock_acquire_recursive>
 8016b02:	bf00      	nop
 8016b04:	2000c4a6 	.word	0x2000c4a6

08016b08 <__sinit_lock_release>:
 8016b08:	4801      	ldr	r0, [pc, #4]	; (8016b10 <__sinit_lock_release+0x8>)
 8016b0a:	f000 b8c7 	b.w	8016c9c <__retarget_lock_release_recursive>
 8016b0e:	bf00      	nop
 8016b10:	2000c4a6 	.word	0x2000c4a6

08016b14 <__sinit>:
 8016b14:	b510      	push	{r4, lr}
 8016b16:	4604      	mov	r4, r0
 8016b18:	f7ff fff0 	bl	8016afc <__sinit_lock_acquire>
 8016b1c:	69a3      	ldr	r3, [r4, #24]
 8016b1e:	b11b      	cbz	r3, 8016b28 <__sinit+0x14>
 8016b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b24:	f7ff bff0 	b.w	8016b08 <__sinit_lock_release>
 8016b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8016b2e:	4b13      	ldr	r3, [pc, #76]	; (8016b7c <__sinit+0x68>)
 8016b30:	4a13      	ldr	r2, [pc, #76]	; (8016b80 <__sinit+0x6c>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8016b36:	42a3      	cmp	r3, r4
 8016b38:	bf04      	itt	eq
 8016b3a:	2301      	moveq	r3, #1
 8016b3c:	61a3      	streq	r3, [r4, #24]
 8016b3e:	4620      	mov	r0, r4
 8016b40:	f000 f820 	bl	8016b84 <__sfp>
 8016b44:	6060      	str	r0, [r4, #4]
 8016b46:	4620      	mov	r0, r4
 8016b48:	f000 f81c 	bl	8016b84 <__sfp>
 8016b4c:	60a0      	str	r0, [r4, #8]
 8016b4e:	4620      	mov	r0, r4
 8016b50:	f000 f818 	bl	8016b84 <__sfp>
 8016b54:	2200      	movs	r2, #0
 8016b56:	60e0      	str	r0, [r4, #12]
 8016b58:	2104      	movs	r1, #4
 8016b5a:	6860      	ldr	r0, [r4, #4]
 8016b5c:	f7ff ff82 	bl	8016a64 <std>
 8016b60:	68a0      	ldr	r0, [r4, #8]
 8016b62:	2201      	movs	r2, #1
 8016b64:	2109      	movs	r1, #9
 8016b66:	f7ff ff7d 	bl	8016a64 <std>
 8016b6a:	68e0      	ldr	r0, [r4, #12]
 8016b6c:	2202      	movs	r2, #2
 8016b6e:	2112      	movs	r1, #18
 8016b70:	f7ff ff78 	bl	8016a64 <std>
 8016b74:	2301      	movs	r3, #1
 8016b76:	61a3      	str	r3, [r4, #24]
 8016b78:	e7d2      	b.n	8016b20 <__sinit+0xc>
 8016b7a:	bf00      	nop
 8016b7c:	0801afdc 	.word	0x0801afdc
 8016b80:	08016aad 	.word	0x08016aad

08016b84 <__sfp>:
 8016b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b86:	4607      	mov	r7, r0
 8016b88:	f7ff ffac 	bl	8016ae4 <__sfp_lock_acquire>
 8016b8c:	4b1e      	ldr	r3, [pc, #120]	; (8016c08 <__sfp+0x84>)
 8016b8e:	681e      	ldr	r6, [r3, #0]
 8016b90:	69b3      	ldr	r3, [r6, #24]
 8016b92:	b913      	cbnz	r3, 8016b9a <__sfp+0x16>
 8016b94:	4630      	mov	r0, r6
 8016b96:	f7ff ffbd 	bl	8016b14 <__sinit>
 8016b9a:	3648      	adds	r6, #72	; 0x48
 8016b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016ba0:	3b01      	subs	r3, #1
 8016ba2:	d503      	bpl.n	8016bac <__sfp+0x28>
 8016ba4:	6833      	ldr	r3, [r6, #0]
 8016ba6:	b30b      	cbz	r3, 8016bec <__sfp+0x68>
 8016ba8:	6836      	ldr	r6, [r6, #0]
 8016baa:	e7f7      	b.n	8016b9c <__sfp+0x18>
 8016bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016bb0:	b9d5      	cbnz	r5, 8016be8 <__sfp+0x64>
 8016bb2:	4b16      	ldr	r3, [pc, #88]	; (8016c0c <__sfp+0x88>)
 8016bb4:	60e3      	str	r3, [r4, #12]
 8016bb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016bba:	6665      	str	r5, [r4, #100]	; 0x64
 8016bbc:	f000 f86c 	bl	8016c98 <__retarget_lock_init_recursive>
 8016bc0:	f7ff ff96 	bl	8016af0 <__sfp_lock_release>
 8016bc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016bc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016bcc:	6025      	str	r5, [r4, #0]
 8016bce:	61a5      	str	r5, [r4, #24]
 8016bd0:	2208      	movs	r2, #8
 8016bd2:	4629      	mov	r1, r5
 8016bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016bd8:	f000 f8ec 	bl	8016db4 <memset>
 8016bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016be4:	4620      	mov	r0, r4
 8016be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016be8:	3468      	adds	r4, #104	; 0x68
 8016bea:	e7d9      	b.n	8016ba0 <__sfp+0x1c>
 8016bec:	2104      	movs	r1, #4
 8016bee:	4638      	mov	r0, r7
 8016bf0:	f7ff ff62 	bl	8016ab8 <__sfmoreglue>
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	6030      	str	r0, [r6, #0]
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	d1d5      	bne.n	8016ba8 <__sfp+0x24>
 8016bfc:	f7ff ff78 	bl	8016af0 <__sfp_lock_release>
 8016c00:	230c      	movs	r3, #12
 8016c02:	603b      	str	r3, [r7, #0]
 8016c04:	e7ee      	b.n	8016be4 <__sfp+0x60>
 8016c06:	bf00      	nop
 8016c08:	0801afdc 	.word	0x0801afdc
 8016c0c:	ffff0001 	.word	0xffff0001

08016c10 <_fwalk_reent>:
 8016c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c14:	4606      	mov	r6, r0
 8016c16:	4688      	mov	r8, r1
 8016c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016c1c:	2700      	movs	r7, #0
 8016c1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016c22:	f1b9 0901 	subs.w	r9, r9, #1
 8016c26:	d505      	bpl.n	8016c34 <_fwalk_reent+0x24>
 8016c28:	6824      	ldr	r4, [r4, #0]
 8016c2a:	2c00      	cmp	r4, #0
 8016c2c:	d1f7      	bne.n	8016c1e <_fwalk_reent+0xe>
 8016c2e:	4638      	mov	r0, r7
 8016c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c34:	89ab      	ldrh	r3, [r5, #12]
 8016c36:	2b01      	cmp	r3, #1
 8016c38:	d907      	bls.n	8016c4a <_fwalk_reent+0x3a>
 8016c3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016c3e:	3301      	adds	r3, #1
 8016c40:	d003      	beq.n	8016c4a <_fwalk_reent+0x3a>
 8016c42:	4629      	mov	r1, r5
 8016c44:	4630      	mov	r0, r6
 8016c46:	47c0      	blx	r8
 8016c48:	4307      	orrs	r7, r0
 8016c4a:	3568      	adds	r5, #104	; 0x68
 8016c4c:	e7e9      	b.n	8016c22 <_fwalk_reent+0x12>
	...

08016c50 <__libc_init_array>:
 8016c50:	b570      	push	{r4, r5, r6, lr}
 8016c52:	4d0d      	ldr	r5, [pc, #52]	; (8016c88 <__libc_init_array+0x38>)
 8016c54:	4c0d      	ldr	r4, [pc, #52]	; (8016c8c <__libc_init_array+0x3c>)
 8016c56:	1b64      	subs	r4, r4, r5
 8016c58:	10a4      	asrs	r4, r4, #2
 8016c5a:	2600      	movs	r6, #0
 8016c5c:	42a6      	cmp	r6, r4
 8016c5e:	d109      	bne.n	8016c74 <__libc_init_array+0x24>
 8016c60:	4d0b      	ldr	r5, [pc, #44]	; (8016c90 <__libc_init_array+0x40>)
 8016c62:	4c0c      	ldr	r4, [pc, #48]	; (8016c94 <__libc_init_array+0x44>)
 8016c64:	f000 ff3c 	bl	8017ae0 <_init>
 8016c68:	1b64      	subs	r4, r4, r5
 8016c6a:	10a4      	asrs	r4, r4, #2
 8016c6c:	2600      	movs	r6, #0
 8016c6e:	42a6      	cmp	r6, r4
 8016c70:	d105      	bne.n	8016c7e <__libc_init_array+0x2e>
 8016c72:	bd70      	pop	{r4, r5, r6, pc}
 8016c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c78:	4798      	blx	r3
 8016c7a:	3601      	adds	r6, #1
 8016c7c:	e7ee      	b.n	8016c5c <__libc_init_array+0xc>
 8016c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c82:	4798      	blx	r3
 8016c84:	3601      	adds	r6, #1
 8016c86:	e7f2      	b.n	8016c6e <__libc_init_array+0x1e>
 8016c88:	0801b0cc 	.word	0x0801b0cc
 8016c8c:	0801b0cc 	.word	0x0801b0cc
 8016c90:	0801b0cc 	.word	0x0801b0cc
 8016c94:	0801b0d0 	.word	0x0801b0d0

08016c98 <__retarget_lock_init_recursive>:
 8016c98:	4770      	bx	lr

08016c9a <__retarget_lock_acquire_recursive>:
 8016c9a:	4770      	bx	lr

08016c9c <__retarget_lock_release_recursive>:
 8016c9c:	4770      	bx	lr

08016c9e <__swhatbuf_r>:
 8016c9e:	b570      	push	{r4, r5, r6, lr}
 8016ca0:	460e      	mov	r6, r1
 8016ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ca6:	2900      	cmp	r1, #0
 8016ca8:	b096      	sub	sp, #88	; 0x58
 8016caa:	4614      	mov	r4, r2
 8016cac:	461d      	mov	r5, r3
 8016cae:	da08      	bge.n	8016cc2 <__swhatbuf_r+0x24>
 8016cb0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	602a      	str	r2, [r5, #0]
 8016cb8:	061a      	lsls	r2, r3, #24
 8016cba:	d410      	bmi.n	8016cde <__swhatbuf_r+0x40>
 8016cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016cc0:	e00e      	b.n	8016ce0 <__swhatbuf_r+0x42>
 8016cc2:	466a      	mov	r2, sp
 8016cc4:	f000 fb82 	bl	80173cc <_fstat_r>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	dbf1      	blt.n	8016cb0 <__swhatbuf_r+0x12>
 8016ccc:	9a01      	ldr	r2, [sp, #4]
 8016cce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016cd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016cd6:	425a      	negs	r2, r3
 8016cd8:	415a      	adcs	r2, r3
 8016cda:	602a      	str	r2, [r5, #0]
 8016cdc:	e7ee      	b.n	8016cbc <__swhatbuf_r+0x1e>
 8016cde:	2340      	movs	r3, #64	; 0x40
 8016ce0:	2000      	movs	r0, #0
 8016ce2:	6023      	str	r3, [r4, #0]
 8016ce4:	b016      	add	sp, #88	; 0x58
 8016ce6:	bd70      	pop	{r4, r5, r6, pc}

08016ce8 <__smakebuf_r>:
 8016ce8:	898b      	ldrh	r3, [r1, #12]
 8016cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016cec:	079d      	lsls	r5, r3, #30
 8016cee:	4606      	mov	r6, r0
 8016cf0:	460c      	mov	r4, r1
 8016cf2:	d507      	bpl.n	8016d04 <__smakebuf_r+0x1c>
 8016cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016cf8:	6023      	str	r3, [r4, #0]
 8016cfa:	6123      	str	r3, [r4, #16]
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	6163      	str	r3, [r4, #20]
 8016d00:	b002      	add	sp, #8
 8016d02:	bd70      	pop	{r4, r5, r6, pc}
 8016d04:	ab01      	add	r3, sp, #4
 8016d06:	466a      	mov	r2, sp
 8016d08:	f7ff ffc9 	bl	8016c9e <__swhatbuf_r>
 8016d0c:	9900      	ldr	r1, [sp, #0]
 8016d0e:	4605      	mov	r5, r0
 8016d10:	4630      	mov	r0, r6
 8016d12:	f000 f8c1 	bl	8016e98 <_malloc_r>
 8016d16:	b948      	cbnz	r0, 8016d2c <__smakebuf_r+0x44>
 8016d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d1c:	059a      	lsls	r2, r3, #22
 8016d1e:	d4ef      	bmi.n	8016d00 <__smakebuf_r+0x18>
 8016d20:	f023 0303 	bic.w	r3, r3, #3
 8016d24:	f043 0302 	orr.w	r3, r3, #2
 8016d28:	81a3      	strh	r3, [r4, #12]
 8016d2a:	e7e3      	b.n	8016cf4 <__smakebuf_r+0xc>
 8016d2c:	4b0d      	ldr	r3, [pc, #52]	; (8016d64 <__smakebuf_r+0x7c>)
 8016d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016d30:	89a3      	ldrh	r3, [r4, #12]
 8016d32:	6020      	str	r0, [r4, #0]
 8016d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d38:	81a3      	strh	r3, [r4, #12]
 8016d3a:	9b00      	ldr	r3, [sp, #0]
 8016d3c:	6163      	str	r3, [r4, #20]
 8016d3e:	9b01      	ldr	r3, [sp, #4]
 8016d40:	6120      	str	r0, [r4, #16]
 8016d42:	b15b      	cbz	r3, 8016d5c <__smakebuf_r+0x74>
 8016d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d48:	4630      	mov	r0, r6
 8016d4a:	f000 fb51 	bl	80173f0 <_isatty_r>
 8016d4e:	b128      	cbz	r0, 8016d5c <__smakebuf_r+0x74>
 8016d50:	89a3      	ldrh	r3, [r4, #12]
 8016d52:	f023 0303 	bic.w	r3, r3, #3
 8016d56:	f043 0301 	orr.w	r3, r3, #1
 8016d5a:	81a3      	strh	r3, [r4, #12]
 8016d5c:	89a0      	ldrh	r0, [r4, #12]
 8016d5e:	4305      	orrs	r5, r0
 8016d60:	81a5      	strh	r5, [r4, #12]
 8016d62:	e7cd      	b.n	8016d00 <__smakebuf_r+0x18>
 8016d64:	08016aad 	.word	0x08016aad

08016d68 <malloc>:
 8016d68:	4b02      	ldr	r3, [pc, #8]	; (8016d74 <malloc+0xc>)
 8016d6a:	4601      	mov	r1, r0
 8016d6c:	6818      	ldr	r0, [r3, #0]
 8016d6e:	f000 b893 	b.w	8016e98 <_malloc_r>
 8016d72:	bf00      	nop
 8016d74:	2000001c 	.word	0x2000001c

08016d78 <memcmp>:
 8016d78:	b510      	push	{r4, lr}
 8016d7a:	3901      	subs	r1, #1
 8016d7c:	4402      	add	r2, r0
 8016d7e:	4290      	cmp	r0, r2
 8016d80:	d101      	bne.n	8016d86 <memcmp+0xe>
 8016d82:	2000      	movs	r0, #0
 8016d84:	e005      	b.n	8016d92 <memcmp+0x1a>
 8016d86:	7803      	ldrb	r3, [r0, #0]
 8016d88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016d8c:	42a3      	cmp	r3, r4
 8016d8e:	d001      	beq.n	8016d94 <memcmp+0x1c>
 8016d90:	1b18      	subs	r0, r3, r4
 8016d92:	bd10      	pop	{r4, pc}
 8016d94:	3001      	adds	r0, #1
 8016d96:	e7f2      	b.n	8016d7e <memcmp+0x6>

08016d98 <memcpy>:
 8016d98:	440a      	add	r2, r1
 8016d9a:	4291      	cmp	r1, r2
 8016d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016da0:	d100      	bne.n	8016da4 <memcpy+0xc>
 8016da2:	4770      	bx	lr
 8016da4:	b510      	push	{r4, lr}
 8016da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016dae:	4291      	cmp	r1, r2
 8016db0:	d1f9      	bne.n	8016da6 <memcpy+0xe>
 8016db2:	bd10      	pop	{r4, pc}

08016db4 <memset>:
 8016db4:	4402      	add	r2, r0
 8016db6:	4603      	mov	r3, r0
 8016db8:	4293      	cmp	r3, r2
 8016dba:	d100      	bne.n	8016dbe <memset+0xa>
 8016dbc:	4770      	bx	lr
 8016dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8016dc2:	e7f9      	b.n	8016db8 <memset+0x4>

08016dc4 <_free_r>:
 8016dc4:	b538      	push	{r3, r4, r5, lr}
 8016dc6:	4605      	mov	r5, r0
 8016dc8:	2900      	cmp	r1, #0
 8016dca:	d041      	beq.n	8016e50 <_free_r+0x8c>
 8016dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016dd0:	1f0c      	subs	r4, r1, #4
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	bfb8      	it	lt
 8016dd6:	18e4      	addlt	r4, r4, r3
 8016dd8:	f000 fb2c 	bl	8017434 <__malloc_lock>
 8016ddc:	4a1d      	ldr	r2, [pc, #116]	; (8016e54 <_free_r+0x90>)
 8016dde:	6813      	ldr	r3, [r2, #0]
 8016de0:	b933      	cbnz	r3, 8016df0 <_free_r+0x2c>
 8016de2:	6063      	str	r3, [r4, #4]
 8016de4:	6014      	str	r4, [r2, #0]
 8016de6:	4628      	mov	r0, r5
 8016de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016dec:	f000 bb28 	b.w	8017440 <__malloc_unlock>
 8016df0:	42a3      	cmp	r3, r4
 8016df2:	d908      	bls.n	8016e06 <_free_r+0x42>
 8016df4:	6820      	ldr	r0, [r4, #0]
 8016df6:	1821      	adds	r1, r4, r0
 8016df8:	428b      	cmp	r3, r1
 8016dfa:	bf01      	itttt	eq
 8016dfc:	6819      	ldreq	r1, [r3, #0]
 8016dfe:	685b      	ldreq	r3, [r3, #4]
 8016e00:	1809      	addeq	r1, r1, r0
 8016e02:	6021      	streq	r1, [r4, #0]
 8016e04:	e7ed      	b.n	8016de2 <_free_r+0x1e>
 8016e06:	461a      	mov	r2, r3
 8016e08:	685b      	ldr	r3, [r3, #4]
 8016e0a:	b10b      	cbz	r3, 8016e10 <_free_r+0x4c>
 8016e0c:	42a3      	cmp	r3, r4
 8016e0e:	d9fa      	bls.n	8016e06 <_free_r+0x42>
 8016e10:	6811      	ldr	r1, [r2, #0]
 8016e12:	1850      	adds	r0, r2, r1
 8016e14:	42a0      	cmp	r0, r4
 8016e16:	d10b      	bne.n	8016e30 <_free_r+0x6c>
 8016e18:	6820      	ldr	r0, [r4, #0]
 8016e1a:	4401      	add	r1, r0
 8016e1c:	1850      	adds	r0, r2, r1
 8016e1e:	4283      	cmp	r3, r0
 8016e20:	6011      	str	r1, [r2, #0]
 8016e22:	d1e0      	bne.n	8016de6 <_free_r+0x22>
 8016e24:	6818      	ldr	r0, [r3, #0]
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	6053      	str	r3, [r2, #4]
 8016e2a:	4401      	add	r1, r0
 8016e2c:	6011      	str	r1, [r2, #0]
 8016e2e:	e7da      	b.n	8016de6 <_free_r+0x22>
 8016e30:	d902      	bls.n	8016e38 <_free_r+0x74>
 8016e32:	230c      	movs	r3, #12
 8016e34:	602b      	str	r3, [r5, #0]
 8016e36:	e7d6      	b.n	8016de6 <_free_r+0x22>
 8016e38:	6820      	ldr	r0, [r4, #0]
 8016e3a:	1821      	adds	r1, r4, r0
 8016e3c:	428b      	cmp	r3, r1
 8016e3e:	bf04      	itt	eq
 8016e40:	6819      	ldreq	r1, [r3, #0]
 8016e42:	685b      	ldreq	r3, [r3, #4]
 8016e44:	6063      	str	r3, [r4, #4]
 8016e46:	bf04      	itt	eq
 8016e48:	1809      	addeq	r1, r1, r0
 8016e4a:	6021      	streq	r1, [r4, #0]
 8016e4c:	6054      	str	r4, [r2, #4]
 8016e4e:	e7ca      	b.n	8016de6 <_free_r+0x22>
 8016e50:	bd38      	pop	{r3, r4, r5, pc}
 8016e52:	bf00      	nop
 8016e54:	2000c4a8 	.word	0x2000c4a8

08016e58 <sbrk_aligned>:
 8016e58:	b570      	push	{r4, r5, r6, lr}
 8016e5a:	4e0e      	ldr	r6, [pc, #56]	; (8016e94 <sbrk_aligned+0x3c>)
 8016e5c:	460c      	mov	r4, r1
 8016e5e:	6831      	ldr	r1, [r6, #0]
 8016e60:	4605      	mov	r5, r0
 8016e62:	b911      	cbnz	r1, 8016e6a <sbrk_aligned+0x12>
 8016e64:	f000 f94c 	bl	8017100 <_sbrk_r>
 8016e68:	6030      	str	r0, [r6, #0]
 8016e6a:	4621      	mov	r1, r4
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	f000 f947 	bl	8017100 <_sbrk_r>
 8016e72:	1c43      	adds	r3, r0, #1
 8016e74:	d00a      	beq.n	8016e8c <sbrk_aligned+0x34>
 8016e76:	1cc4      	adds	r4, r0, #3
 8016e78:	f024 0403 	bic.w	r4, r4, #3
 8016e7c:	42a0      	cmp	r0, r4
 8016e7e:	d007      	beq.n	8016e90 <sbrk_aligned+0x38>
 8016e80:	1a21      	subs	r1, r4, r0
 8016e82:	4628      	mov	r0, r5
 8016e84:	f000 f93c 	bl	8017100 <_sbrk_r>
 8016e88:	3001      	adds	r0, #1
 8016e8a:	d101      	bne.n	8016e90 <sbrk_aligned+0x38>
 8016e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8016e90:	4620      	mov	r0, r4
 8016e92:	bd70      	pop	{r4, r5, r6, pc}
 8016e94:	2000c4ac 	.word	0x2000c4ac

08016e98 <_malloc_r>:
 8016e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9c:	1ccd      	adds	r5, r1, #3
 8016e9e:	f025 0503 	bic.w	r5, r5, #3
 8016ea2:	3508      	adds	r5, #8
 8016ea4:	2d0c      	cmp	r5, #12
 8016ea6:	bf38      	it	cc
 8016ea8:	250c      	movcc	r5, #12
 8016eaa:	2d00      	cmp	r5, #0
 8016eac:	4607      	mov	r7, r0
 8016eae:	db01      	blt.n	8016eb4 <_malloc_r+0x1c>
 8016eb0:	42a9      	cmp	r1, r5
 8016eb2:	d905      	bls.n	8016ec0 <_malloc_r+0x28>
 8016eb4:	230c      	movs	r3, #12
 8016eb6:	603b      	str	r3, [r7, #0]
 8016eb8:	2600      	movs	r6, #0
 8016eba:	4630      	mov	r0, r6
 8016ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ec0:	4e2e      	ldr	r6, [pc, #184]	; (8016f7c <_malloc_r+0xe4>)
 8016ec2:	f000 fab7 	bl	8017434 <__malloc_lock>
 8016ec6:	6833      	ldr	r3, [r6, #0]
 8016ec8:	461c      	mov	r4, r3
 8016eca:	bb34      	cbnz	r4, 8016f1a <_malloc_r+0x82>
 8016ecc:	4629      	mov	r1, r5
 8016ece:	4638      	mov	r0, r7
 8016ed0:	f7ff ffc2 	bl	8016e58 <sbrk_aligned>
 8016ed4:	1c43      	adds	r3, r0, #1
 8016ed6:	4604      	mov	r4, r0
 8016ed8:	d14d      	bne.n	8016f76 <_malloc_r+0xde>
 8016eda:	6834      	ldr	r4, [r6, #0]
 8016edc:	4626      	mov	r6, r4
 8016ede:	2e00      	cmp	r6, #0
 8016ee0:	d140      	bne.n	8016f64 <_malloc_r+0xcc>
 8016ee2:	6823      	ldr	r3, [r4, #0]
 8016ee4:	4631      	mov	r1, r6
 8016ee6:	4638      	mov	r0, r7
 8016ee8:	eb04 0803 	add.w	r8, r4, r3
 8016eec:	f000 f908 	bl	8017100 <_sbrk_r>
 8016ef0:	4580      	cmp	r8, r0
 8016ef2:	d13a      	bne.n	8016f6a <_malloc_r+0xd2>
 8016ef4:	6821      	ldr	r1, [r4, #0]
 8016ef6:	3503      	adds	r5, #3
 8016ef8:	1a6d      	subs	r5, r5, r1
 8016efa:	f025 0503 	bic.w	r5, r5, #3
 8016efe:	3508      	adds	r5, #8
 8016f00:	2d0c      	cmp	r5, #12
 8016f02:	bf38      	it	cc
 8016f04:	250c      	movcc	r5, #12
 8016f06:	4629      	mov	r1, r5
 8016f08:	4638      	mov	r0, r7
 8016f0a:	f7ff ffa5 	bl	8016e58 <sbrk_aligned>
 8016f0e:	3001      	adds	r0, #1
 8016f10:	d02b      	beq.n	8016f6a <_malloc_r+0xd2>
 8016f12:	6823      	ldr	r3, [r4, #0]
 8016f14:	442b      	add	r3, r5
 8016f16:	6023      	str	r3, [r4, #0]
 8016f18:	e00e      	b.n	8016f38 <_malloc_r+0xa0>
 8016f1a:	6822      	ldr	r2, [r4, #0]
 8016f1c:	1b52      	subs	r2, r2, r5
 8016f1e:	d41e      	bmi.n	8016f5e <_malloc_r+0xc6>
 8016f20:	2a0b      	cmp	r2, #11
 8016f22:	d916      	bls.n	8016f52 <_malloc_r+0xba>
 8016f24:	1961      	adds	r1, r4, r5
 8016f26:	42a3      	cmp	r3, r4
 8016f28:	6025      	str	r5, [r4, #0]
 8016f2a:	bf18      	it	ne
 8016f2c:	6059      	strne	r1, [r3, #4]
 8016f2e:	6863      	ldr	r3, [r4, #4]
 8016f30:	bf08      	it	eq
 8016f32:	6031      	streq	r1, [r6, #0]
 8016f34:	5162      	str	r2, [r4, r5]
 8016f36:	604b      	str	r3, [r1, #4]
 8016f38:	4638      	mov	r0, r7
 8016f3a:	f104 060b 	add.w	r6, r4, #11
 8016f3e:	f000 fa7f 	bl	8017440 <__malloc_unlock>
 8016f42:	f026 0607 	bic.w	r6, r6, #7
 8016f46:	1d23      	adds	r3, r4, #4
 8016f48:	1af2      	subs	r2, r6, r3
 8016f4a:	d0b6      	beq.n	8016eba <_malloc_r+0x22>
 8016f4c:	1b9b      	subs	r3, r3, r6
 8016f4e:	50a3      	str	r3, [r4, r2]
 8016f50:	e7b3      	b.n	8016eba <_malloc_r+0x22>
 8016f52:	6862      	ldr	r2, [r4, #4]
 8016f54:	42a3      	cmp	r3, r4
 8016f56:	bf0c      	ite	eq
 8016f58:	6032      	streq	r2, [r6, #0]
 8016f5a:	605a      	strne	r2, [r3, #4]
 8016f5c:	e7ec      	b.n	8016f38 <_malloc_r+0xa0>
 8016f5e:	4623      	mov	r3, r4
 8016f60:	6864      	ldr	r4, [r4, #4]
 8016f62:	e7b2      	b.n	8016eca <_malloc_r+0x32>
 8016f64:	4634      	mov	r4, r6
 8016f66:	6876      	ldr	r6, [r6, #4]
 8016f68:	e7b9      	b.n	8016ede <_malloc_r+0x46>
 8016f6a:	230c      	movs	r3, #12
 8016f6c:	603b      	str	r3, [r7, #0]
 8016f6e:	4638      	mov	r0, r7
 8016f70:	f000 fa66 	bl	8017440 <__malloc_unlock>
 8016f74:	e7a1      	b.n	8016eba <_malloc_r+0x22>
 8016f76:	6025      	str	r5, [r4, #0]
 8016f78:	e7de      	b.n	8016f38 <_malloc_r+0xa0>
 8016f7a:	bf00      	nop
 8016f7c:	2000c4a8 	.word	0x2000c4a8

08016f80 <iprintf>:
 8016f80:	b40f      	push	{r0, r1, r2, r3}
 8016f82:	4b0a      	ldr	r3, [pc, #40]	; (8016fac <iprintf+0x2c>)
 8016f84:	b513      	push	{r0, r1, r4, lr}
 8016f86:	681c      	ldr	r4, [r3, #0]
 8016f88:	b124      	cbz	r4, 8016f94 <iprintf+0x14>
 8016f8a:	69a3      	ldr	r3, [r4, #24]
 8016f8c:	b913      	cbnz	r3, 8016f94 <iprintf+0x14>
 8016f8e:	4620      	mov	r0, r4
 8016f90:	f7ff fdc0 	bl	8016b14 <__sinit>
 8016f94:	ab05      	add	r3, sp, #20
 8016f96:	9a04      	ldr	r2, [sp, #16]
 8016f98:	68a1      	ldr	r1, [r4, #8]
 8016f9a:	9301      	str	r3, [sp, #4]
 8016f9c:	4620      	mov	r0, r4
 8016f9e:	f000 fa7d 	bl	801749c <_vfiprintf_r>
 8016fa2:	b002      	add	sp, #8
 8016fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fa8:	b004      	add	sp, #16
 8016faa:	4770      	bx	lr
 8016fac:	2000001c 	.word	0x2000001c

08016fb0 <rand>:
 8016fb0:	4b16      	ldr	r3, [pc, #88]	; (801700c <rand+0x5c>)
 8016fb2:	b510      	push	{r4, lr}
 8016fb4:	681c      	ldr	r4, [r3, #0]
 8016fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016fb8:	b9b3      	cbnz	r3, 8016fe8 <rand+0x38>
 8016fba:	2018      	movs	r0, #24
 8016fbc:	f7ff fed4 	bl	8016d68 <malloc>
 8016fc0:	4602      	mov	r2, r0
 8016fc2:	63a0      	str	r0, [r4, #56]	; 0x38
 8016fc4:	b920      	cbnz	r0, 8016fd0 <rand+0x20>
 8016fc6:	4b12      	ldr	r3, [pc, #72]	; (8017010 <rand+0x60>)
 8016fc8:	4812      	ldr	r0, [pc, #72]	; (8017014 <rand+0x64>)
 8016fca:	214e      	movs	r1, #78	; 0x4e
 8016fcc:	f000 f9be 	bl	801734c <__assert_func>
 8016fd0:	4911      	ldr	r1, [pc, #68]	; (8017018 <rand+0x68>)
 8016fd2:	4b12      	ldr	r3, [pc, #72]	; (801701c <rand+0x6c>)
 8016fd4:	e9c0 1300 	strd	r1, r3, [r0]
 8016fd8:	4b11      	ldr	r3, [pc, #68]	; (8017020 <rand+0x70>)
 8016fda:	6083      	str	r3, [r0, #8]
 8016fdc:	230b      	movs	r3, #11
 8016fde:	8183      	strh	r3, [r0, #12]
 8016fe0:	2100      	movs	r1, #0
 8016fe2:	2001      	movs	r0, #1
 8016fe4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016fe8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016fea:	4a0e      	ldr	r2, [pc, #56]	; (8017024 <rand+0x74>)
 8016fec:	6920      	ldr	r0, [r4, #16]
 8016fee:	6963      	ldr	r3, [r4, #20]
 8016ff0:	490d      	ldr	r1, [pc, #52]	; (8017028 <rand+0x78>)
 8016ff2:	4342      	muls	r2, r0
 8016ff4:	fb01 2203 	mla	r2, r1, r3, r2
 8016ff8:	fba0 0101 	umull	r0, r1, r0, r1
 8016ffc:	1c43      	adds	r3, r0, #1
 8016ffe:	eb42 0001 	adc.w	r0, r2, r1
 8017002:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017006:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801700a:	bd10      	pop	{r4, pc}
 801700c:	2000001c 	.word	0x2000001c
 8017010:	0801afe0 	.word	0x0801afe0
 8017014:	0801aff7 	.word	0x0801aff7
 8017018:	abcd330e 	.word	0xabcd330e
 801701c:	e66d1234 	.word	0xe66d1234
 8017020:	0005deec 	.word	0x0005deec
 8017024:	5851f42d 	.word	0x5851f42d
 8017028:	4c957f2d 	.word	0x4c957f2d

0801702c <cleanup_glue>:
 801702c:	b538      	push	{r3, r4, r5, lr}
 801702e:	460c      	mov	r4, r1
 8017030:	6809      	ldr	r1, [r1, #0]
 8017032:	4605      	mov	r5, r0
 8017034:	b109      	cbz	r1, 801703a <cleanup_glue+0xe>
 8017036:	f7ff fff9 	bl	801702c <cleanup_glue>
 801703a:	4621      	mov	r1, r4
 801703c:	4628      	mov	r0, r5
 801703e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017042:	f7ff bebf 	b.w	8016dc4 <_free_r>
	...

08017048 <_reclaim_reent>:
 8017048:	4b2c      	ldr	r3, [pc, #176]	; (80170fc <_reclaim_reent+0xb4>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	4283      	cmp	r3, r0
 801704e:	b570      	push	{r4, r5, r6, lr}
 8017050:	4604      	mov	r4, r0
 8017052:	d051      	beq.n	80170f8 <_reclaim_reent+0xb0>
 8017054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017056:	b143      	cbz	r3, 801706a <_reclaim_reent+0x22>
 8017058:	68db      	ldr	r3, [r3, #12]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d14a      	bne.n	80170f4 <_reclaim_reent+0xac>
 801705e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017060:	6819      	ldr	r1, [r3, #0]
 8017062:	b111      	cbz	r1, 801706a <_reclaim_reent+0x22>
 8017064:	4620      	mov	r0, r4
 8017066:	f7ff fead 	bl	8016dc4 <_free_r>
 801706a:	6961      	ldr	r1, [r4, #20]
 801706c:	b111      	cbz	r1, 8017074 <_reclaim_reent+0x2c>
 801706e:	4620      	mov	r0, r4
 8017070:	f7ff fea8 	bl	8016dc4 <_free_r>
 8017074:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017076:	b111      	cbz	r1, 801707e <_reclaim_reent+0x36>
 8017078:	4620      	mov	r0, r4
 801707a:	f7ff fea3 	bl	8016dc4 <_free_r>
 801707e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017080:	b111      	cbz	r1, 8017088 <_reclaim_reent+0x40>
 8017082:	4620      	mov	r0, r4
 8017084:	f7ff fe9e 	bl	8016dc4 <_free_r>
 8017088:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801708a:	b111      	cbz	r1, 8017092 <_reclaim_reent+0x4a>
 801708c:	4620      	mov	r0, r4
 801708e:	f7ff fe99 	bl	8016dc4 <_free_r>
 8017092:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017094:	b111      	cbz	r1, 801709c <_reclaim_reent+0x54>
 8017096:	4620      	mov	r0, r4
 8017098:	f7ff fe94 	bl	8016dc4 <_free_r>
 801709c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801709e:	b111      	cbz	r1, 80170a6 <_reclaim_reent+0x5e>
 80170a0:	4620      	mov	r0, r4
 80170a2:	f7ff fe8f 	bl	8016dc4 <_free_r>
 80170a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80170a8:	b111      	cbz	r1, 80170b0 <_reclaim_reent+0x68>
 80170aa:	4620      	mov	r0, r4
 80170ac:	f7ff fe8a 	bl	8016dc4 <_free_r>
 80170b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80170b2:	b111      	cbz	r1, 80170ba <_reclaim_reent+0x72>
 80170b4:	4620      	mov	r0, r4
 80170b6:	f7ff fe85 	bl	8016dc4 <_free_r>
 80170ba:	69a3      	ldr	r3, [r4, #24]
 80170bc:	b1e3      	cbz	r3, 80170f8 <_reclaim_reent+0xb0>
 80170be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80170c0:	4620      	mov	r0, r4
 80170c2:	4798      	blx	r3
 80170c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80170c6:	b1b9      	cbz	r1, 80170f8 <_reclaim_reent+0xb0>
 80170c8:	4620      	mov	r0, r4
 80170ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170ce:	f7ff bfad 	b.w	801702c <cleanup_glue>
 80170d2:	5949      	ldr	r1, [r1, r5]
 80170d4:	b941      	cbnz	r1, 80170e8 <_reclaim_reent+0xa0>
 80170d6:	3504      	adds	r5, #4
 80170d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170da:	2d80      	cmp	r5, #128	; 0x80
 80170dc:	68d9      	ldr	r1, [r3, #12]
 80170de:	d1f8      	bne.n	80170d2 <_reclaim_reent+0x8a>
 80170e0:	4620      	mov	r0, r4
 80170e2:	f7ff fe6f 	bl	8016dc4 <_free_r>
 80170e6:	e7ba      	b.n	801705e <_reclaim_reent+0x16>
 80170e8:	680e      	ldr	r6, [r1, #0]
 80170ea:	4620      	mov	r0, r4
 80170ec:	f7ff fe6a 	bl	8016dc4 <_free_r>
 80170f0:	4631      	mov	r1, r6
 80170f2:	e7ef      	b.n	80170d4 <_reclaim_reent+0x8c>
 80170f4:	2500      	movs	r5, #0
 80170f6:	e7ef      	b.n	80170d8 <_reclaim_reent+0x90>
 80170f8:	bd70      	pop	{r4, r5, r6, pc}
 80170fa:	bf00      	nop
 80170fc:	2000001c 	.word	0x2000001c

08017100 <_sbrk_r>:
 8017100:	b538      	push	{r3, r4, r5, lr}
 8017102:	4d06      	ldr	r5, [pc, #24]	; (801711c <_sbrk_r+0x1c>)
 8017104:	2300      	movs	r3, #0
 8017106:	4604      	mov	r4, r0
 8017108:	4608      	mov	r0, r1
 801710a:	602b      	str	r3, [r5, #0]
 801710c:	f7e9 fd90 	bl	8000c30 <_sbrk>
 8017110:	1c43      	adds	r3, r0, #1
 8017112:	d102      	bne.n	801711a <_sbrk_r+0x1a>
 8017114:	682b      	ldr	r3, [r5, #0]
 8017116:	b103      	cbz	r3, 801711a <_sbrk_r+0x1a>
 8017118:	6023      	str	r3, [r4, #0]
 801711a:	bd38      	pop	{r3, r4, r5, pc}
 801711c:	2000c4b0 	.word	0x2000c4b0

08017120 <__sread>:
 8017120:	b510      	push	{r4, lr}
 8017122:	460c      	mov	r4, r1
 8017124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017128:	f000 fc7c 	bl	8017a24 <_read_r>
 801712c:	2800      	cmp	r0, #0
 801712e:	bfab      	itete	ge
 8017130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017132:	89a3      	ldrhlt	r3, [r4, #12]
 8017134:	181b      	addge	r3, r3, r0
 8017136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801713a:	bfac      	ite	ge
 801713c:	6563      	strge	r3, [r4, #84]	; 0x54
 801713e:	81a3      	strhlt	r3, [r4, #12]
 8017140:	bd10      	pop	{r4, pc}

08017142 <__swrite>:
 8017142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017146:	461f      	mov	r7, r3
 8017148:	898b      	ldrh	r3, [r1, #12]
 801714a:	05db      	lsls	r3, r3, #23
 801714c:	4605      	mov	r5, r0
 801714e:	460c      	mov	r4, r1
 8017150:	4616      	mov	r6, r2
 8017152:	d505      	bpl.n	8017160 <__swrite+0x1e>
 8017154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017158:	2302      	movs	r3, #2
 801715a:	2200      	movs	r2, #0
 801715c:	f000 f958 	bl	8017410 <_lseek_r>
 8017160:	89a3      	ldrh	r3, [r4, #12]
 8017162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801716a:	81a3      	strh	r3, [r4, #12]
 801716c:	4632      	mov	r2, r6
 801716e:	463b      	mov	r3, r7
 8017170:	4628      	mov	r0, r5
 8017172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017176:	f000 b869 	b.w	801724c <_write_r>

0801717a <__sseek>:
 801717a:	b510      	push	{r4, lr}
 801717c:	460c      	mov	r4, r1
 801717e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017182:	f000 f945 	bl	8017410 <_lseek_r>
 8017186:	1c43      	adds	r3, r0, #1
 8017188:	89a3      	ldrh	r3, [r4, #12]
 801718a:	bf15      	itete	ne
 801718c:	6560      	strne	r0, [r4, #84]	; 0x54
 801718e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017196:	81a3      	strheq	r3, [r4, #12]
 8017198:	bf18      	it	ne
 801719a:	81a3      	strhne	r3, [r4, #12]
 801719c:	bd10      	pop	{r4, pc}

0801719e <__sclose>:
 801719e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171a2:	f000 b8f1 	b.w	8017388 <_close_r>
	...

080171a8 <__swbuf_r>:
 80171a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171aa:	460e      	mov	r6, r1
 80171ac:	4614      	mov	r4, r2
 80171ae:	4605      	mov	r5, r0
 80171b0:	b118      	cbz	r0, 80171ba <__swbuf_r+0x12>
 80171b2:	6983      	ldr	r3, [r0, #24]
 80171b4:	b90b      	cbnz	r3, 80171ba <__swbuf_r+0x12>
 80171b6:	f7ff fcad 	bl	8016b14 <__sinit>
 80171ba:	4b21      	ldr	r3, [pc, #132]	; (8017240 <__swbuf_r+0x98>)
 80171bc:	429c      	cmp	r4, r3
 80171be:	d12b      	bne.n	8017218 <__swbuf_r+0x70>
 80171c0:	686c      	ldr	r4, [r5, #4]
 80171c2:	69a3      	ldr	r3, [r4, #24]
 80171c4:	60a3      	str	r3, [r4, #8]
 80171c6:	89a3      	ldrh	r3, [r4, #12]
 80171c8:	071a      	lsls	r2, r3, #28
 80171ca:	d52f      	bpl.n	801722c <__swbuf_r+0x84>
 80171cc:	6923      	ldr	r3, [r4, #16]
 80171ce:	b36b      	cbz	r3, 801722c <__swbuf_r+0x84>
 80171d0:	6923      	ldr	r3, [r4, #16]
 80171d2:	6820      	ldr	r0, [r4, #0]
 80171d4:	1ac0      	subs	r0, r0, r3
 80171d6:	6963      	ldr	r3, [r4, #20]
 80171d8:	b2f6      	uxtb	r6, r6
 80171da:	4283      	cmp	r3, r0
 80171dc:	4637      	mov	r7, r6
 80171de:	dc04      	bgt.n	80171ea <__swbuf_r+0x42>
 80171e0:	4621      	mov	r1, r4
 80171e2:	4628      	mov	r0, r5
 80171e4:	f7ff fc02 	bl	80169ec <_fflush_r>
 80171e8:	bb30      	cbnz	r0, 8017238 <__swbuf_r+0x90>
 80171ea:	68a3      	ldr	r3, [r4, #8]
 80171ec:	3b01      	subs	r3, #1
 80171ee:	60a3      	str	r3, [r4, #8]
 80171f0:	6823      	ldr	r3, [r4, #0]
 80171f2:	1c5a      	adds	r2, r3, #1
 80171f4:	6022      	str	r2, [r4, #0]
 80171f6:	701e      	strb	r6, [r3, #0]
 80171f8:	6963      	ldr	r3, [r4, #20]
 80171fa:	3001      	adds	r0, #1
 80171fc:	4283      	cmp	r3, r0
 80171fe:	d004      	beq.n	801720a <__swbuf_r+0x62>
 8017200:	89a3      	ldrh	r3, [r4, #12]
 8017202:	07db      	lsls	r3, r3, #31
 8017204:	d506      	bpl.n	8017214 <__swbuf_r+0x6c>
 8017206:	2e0a      	cmp	r6, #10
 8017208:	d104      	bne.n	8017214 <__swbuf_r+0x6c>
 801720a:	4621      	mov	r1, r4
 801720c:	4628      	mov	r0, r5
 801720e:	f7ff fbed 	bl	80169ec <_fflush_r>
 8017212:	b988      	cbnz	r0, 8017238 <__swbuf_r+0x90>
 8017214:	4638      	mov	r0, r7
 8017216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017218:	4b0a      	ldr	r3, [pc, #40]	; (8017244 <__swbuf_r+0x9c>)
 801721a:	429c      	cmp	r4, r3
 801721c:	d101      	bne.n	8017222 <__swbuf_r+0x7a>
 801721e:	68ac      	ldr	r4, [r5, #8]
 8017220:	e7cf      	b.n	80171c2 <__swbuf_r+0x1a>
 8017222:	4b09      	ldr	r3, [pc, #36]	; (8017248 <__swbuf_r+0xa0>)
 8017224:	429c      	cmp	r4, r3
 8017226:	bf08      	it	eq
 8017228:	68ec      	ldreq	r4, [r5, #12]
 801722a:	e7ca      	b.n	80171c2 <__swbuf_r+0x1a>
 801722c:	4621      	mov	r1, r4
 801722e:	4628      	mov	r0, r5
 8017230:	f000 f81e 	bl	8017270 <__swsetup_r>
 8017234:	2800      	cmp	r0, #0
 8017236:	d0cb      	beq.n	80171d0 <__swbuf_r+0x28>
 8017238:	f04f 37ff 	mov.w	r7, #4294967295
 801723c:	e7ea      	b.n	8017214 <__swbuf_r+0x6c>
 801723e:	bf00      	nop
 8017240:	0801af9c 	.word	0x0801af9c
 8017244:	0801afbc 	.word	0x0801afbc
 8017248:	0801af7c 	.word	0x0801af7c

0801724c <_write_r>:
 801724c:	b538      	push	{r3, r4, r5, lr}
 801724e:	4d07      	ldr	r5, [pc, #28]	; (801726c <_write_r+0x20>)
 8017250:	4604      	mov	r4, r0
 8017252:	4608      	mov	r0, r1
 8017254:	4611      	mov	r1, r2
 8017256:	2200      	movs	r2, #0
 8017258:	602a      	str	r2, [r5, #0]
 801725a:	461a      	mov	r2, r3
 801725c:	f7e9 fc9b 	bl	8000b96 <_write>
 8017260:	1c43      	adds	r3, r0, #1
 8017262:	d102      	bne.n	801726a <_write_r+0x1e>
 8017264:	682b      	ldr	r3, [r5, #0]
 8017266:	b103      	cbz	r3, 801726a <_write_r+0x1e>
 8017268:	6023      	str	r3, [r4, #0]
 801726a:	bd38      	pop	{r3, r4, r5, pc}
 801726c:	2000c4b0 	.word	0x2000c4b0

08017270 <__swsetup_r>:
 8017270:	4b32      	ldr	r3, [pc, #200]	; (801733c <__swsetup_r+0xcc>)
 8017272:	b570      	push	{r4, r5, r6, lr}
 8017274:	681d      	ldr	r5, [r3, #0]
 8017276:	4606      	mov	r6, r0
 8017278:	460c      	mov	r4, r1
 801727a:	b125      	cbz	r5, 8017286 <__swsetup_r+0x16>
 801727c:	69ab      	ldr	r3, [r5, #24]
 801727e:	b913      	cbnz	r3, 8017286 <__swsetup_r+0x16>
 8017280:	4628      	mov	r0, r5
 8017282:	f7ff fc47 	bl	8016b14 <__sinit>
 8017286:	4b2e      	ldr	r3, [pc, #184]	; (8017340 <__swsetup_r+0xd0>)
 8017288:	429c      	cmp	r4, r3
 801728a:	d10f      	bne.n	80172ac <__swsetup_r+0x3c>
 801728c:	686c      	ldr	r4, [r5, #4]
 801728e:	89a3      	ldrh	r3, [r4, #12]
 8017290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017294:	0719      	lsls	r1, r3, #28
 8017296:	d42c      	bmi.n	80172f2 <__swsetup_r+0x82>
 8017298:	06dd      	lsls	r5, r3, #27
 801729a:	d411      	bmi.n	80172c0 <__swsetup_r+0x50>
 801729c:	2309      	movs	r3, #9
 801729e:	6033      	str	r3, [r6, #0]
 80172a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80172a4:	81a3      	strh	r3, [r4, #12]
 80172a6:	f04f 30ff 	mov.w	r0, #4294967295
 80172aa:	e03e      	b.n	801732a <__swsetup_r+0xba>
 80172ac:	4b25      	ldr	r3, [pc, #148]	; (8017344 <__swsetup_r+0xd4>)
 80172ae:	429c      	cmp	r4, r3
 80172b0:	d101      	bne.n	80172b6 <__swsetup_r+0x46>
 80172b2:	68ac      	ldr	r4, [r5, #8]
 80172b4:	e7eb      	b.n	801728e <__swsetup_r+0x1e>
 80172b6:	4b24      	ldr	r3, [pc, #144]	; (8017348 <__swsetup_r+0xd8>)
 80172b8:	429c      	cmp	r4, r3
 80172ba:	bf08      	it	eq
 80172bc:	68ec      	ldreq	r4, [r5, #12]
 80172be:	e7e6      	b.n	801728e <__swsetup_r+0x1e>
 80172c0:	0758      	lsls	r0, r3, #29
 80172c2:	d512      	bpl.n	80172ea <__swsetup_r+0x7a>
 80172c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172c6:	b141      	cbz	r1, 80172da <__swsetup_r+0x6a>
 80172c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172cc:	4299      	cmp	r1, r3
 80172ce:	d002      	beq.n	80172d6 <__swsetup_r+0x66>
 80172d0:	4630      	mov	r0, r6
 80172d2:	f7ff fd77 	bl	8016dc4 <_free_r>
 80172d6:	2300      	movs	r3, #0
 80172d8:	6363      	str	r3, [r4, #52]	; 0x34
 80172da:	89a3      	ldrh	r3, [r4, #12]
 80172dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80172e0:	81a3      	strh	r3, [r4, #12]
 80172e2:	2300      	movs	r3, #0
 80172e4:	6063      	str	r3, [r4, #4]
 80172e6:	6923      	ldr	r3, [r4, #16]
 80172e8:	6023      	str	r3, [r4, #0]
 80172ea:	89a3      	ldrh	r3, [r4, #12]
 80172ec:	f043 0308 	orr.w	r3, r3, #8
 80172f0:	81a3      	strh	r3, [r4, #12]
 80172f2:	6923      	ldr	r3, [r4, #16]
 80172f4:	b94b      	cbnz	r3, 801730a <__swsetup_r+0x9a>
 80172f6:	89a3      	ldrh	r3, [r4, #12]
 80172f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80172fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017300:	d003      	beq.n	801730a <__swsetup_r+0x9a>
 8017302:	4621      	mov	r1, r4
 8017304:	4630      	mov	r0, r6
 8017306:	f7ff fcef 	bl	8016ce8 <__smakebuf_r>
 801730a:	89a0      	ldrh	r0, [r4, #12]
 801730c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017310:	f010 0301 	ands.w	r3, r0, #1
 8017314:	d00a      	beq.n	801732c <__swsetup_r+0xbc>
 8017316:	2300      	movs	r3, #0
 8017318:	60a3      	str	r3, [r4, #8]
 801731a:	6963      	ldr	r3, [r4, #20]
 801731c:	425b      	negs	r3, r3
 801731e:	61a3      	str	r3, [r4, #24]
 8017320:	6923      	ldr	r3, [r4, #16]
 8017322:	b943      	cbnz	r3, 8017336 <__swsetup_r+0xc6>
 8017324:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017328:	d1ba      	bne.n	80172a0 <__swsetup_r+0x30>
 801732a:	bd70      	pop	{r4, r5, r6, pc}
 801732c:	0781      	lsls	r1, r0, #30
 801732e:	bf58      	it	pl
 8017330:	6963      	ldrpl	r3, [r4, #20]
 8017332:	60a3      	str	r3, [r4, #8]
 8017334:	e7f4      	b.n	8017320 <__swsetup_r+0xb0>
 8017336:	2000      	movs	r0, #0
 8017338:	e7f7      	b.n	801732a <__swsetup_r+0xba>
 801733a:	bf00      	nop
 801733c:	2000001c 	.word	0x2000001c
 8017340:	0801af9c 	.word	0x0801af9c
 8017344:	0801afbc 	.word	0x0801afbc
 8017348:	0801af7c 	.word	0x0801af7c

0801734c <__assert_func>:
 801734c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801734e:	4614      	mov	r4, r2
 8017350:	461a      	mov	r2, r3
 8017352:	4b09      	ldr	r3, [pc, #36]	; (8017378 <__assert_func+0x2c>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	4605      	mov	r5, r0
 8017358:	68d8      	ldr	r0, [r3, #12]
 801735a:	b14c      	cbz	r4, 8017370 <__assert_func+0x24>
 801735c:	4b07      	ldr	r3, [pc, #28]	; (801737c <__assert_func+0x30>)
 801735e:	9100      	str	r1, [sp, #0]
 8017360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017364:	4906      	ldr	r1, [pc, #24]	; (8017380 <__assert_func+0x34>)
 8017366:	462b      	mov	r3, r5
 8017368:	f000 f81e 	bl	80173a8 <fiprintf>
 801736c:	f000 fb6c 	bl	8017a48 <abort>
 8017370:	4b04      	ldr	r3, [pc, #16]	; (8017384 <__assert_func+0x38>)
 8017372:	461c      	mov	r4, r3
 8017374:	e7f3      	b.n	801735e <__assert_func+0x12>
 8017376:	bf00      	nop
 8017378:	2000001c 	.word	0x2000001c
 801737c:	0801b052 	.word	0x0801b052
 8017380:	0801b05f 	.word	0x0801b05f
 8017384:	0801b08d 	.word	0x0801b08d

08017388 <_close_r>:
 8017388:	b538      	push	{r3, r4, r5, lr}
 801738a:	4d06      	ldr	r5, [pc, #24]	; (80173a4 <_close_r+0x1c>)
 801738c:	2300      	movs	r3, #0
 801738e:	4604      	mov	r4, r0
 8017390:	4608      	mov	r0, r1
 8017392:	602b      	str	r3, [r5, #0]
 8017394:	f7e9 fc1b 	bl	8000bce <_close>
 8017398:	1c43      	adds	r3, r0, #1
 801739a:	d102      	bne.n	80173a2 <_close_r+0x1a>
 801739c:	682b      	ldr	r3, [r5, #0]
 801739e:	b103      	cbz	r3, 80173a2 <_close_r+0x1a>
 80173a0:	6023      	str	r3, [r4, #0]
 80173a2:	bd38      	pop	{r3, r4, r5, pc}
 80173a4:	2000c4b0 	.word	0x2000c4b0

080173a8 <fiprintf>:
 80173a8:	b40e      	push	{r1, r2, r3}
 80173aa:	b503      	push	{r0, r1, lr}
 80173ac:	4601      	mov	r1, r0
 80173ae:	ab03      	add	r3, sp, #12
 80173b0:	4805      	ldr	r0, [pc, #20]	; (80173c8 <fiprintf+0x20>)
 80173b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80173b6:	6800      	ldr	r0, [r0, #0]
 80173b8:	9301      	str	r3, [sp, #4]
 80173ba:	f000 f86f 	bl	801749c <_vfiprintf_r>
 80173be:	b002      	add	sp, #8
 80173c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80173c4:	b003      	add	sp, #12
 80173c6:	4770      	bx	lr
 80173c8:	2000001c 	.word	0x2000001c

080173cc <_fstat_r>:
 80173cc:	b538      	push	{r3, r4, r5, lr}
 80173ce:	4d07      	ldr	r5, [pc, #28]	; (80173ec <_fstat_r+0x20>)
 80173d0:	2300      	movs	r3, #0
 80173d2:	4604      	mov	r4, r0
 80173d4:	4608      	mov	r0, r1
 80173d6:	4611      	mov	r1, r2
 80173d8:	602b      	str	r3, [r5, #0]
 80173da:	f7e9 fc03 	bl	8000be4 <_fstat>
 80173de:	1c43      	adds	r3, r0, #1
 80173e0:	d102      	bne.n	80173e8 <_fstat_r+0x1c>
 80173e2:	682b      	ldr	r3, [r5, #0]
 80173e4:	b103      	cbz	r3, 80173e8 <_fstat_r+0x1c>
 80173e6:	6023      	str	r3, [r4, #0]
 80173e8:	bd38      	pop	{r3, r4, r5, pc}
 80173ea:	bf00      	nop
 80173ec:	2000c4b0 	.word	0x2000c4b0

080173f0 <_isatty_r>:
 80173f0:	b538      	push	{r3, r4, r5, lr}
 80173f2:	4d06      	ldr	r5, [pc, #24]	; (801740c <_isatty_r+0x1c>)
 80173f4:	2300      	movs	r3, #0
 80173f6:	4604      	mov	r4, r0
 80173f8:	4608      	mov	r0, r1
 80173fa:	602b      	str	r3, [r5, #0]
 80173fc:	f7e9 fc01 	bl	8000c02 <_isatty>
 8017400:	1c43      	adds	r3, r0, #1
 8017402:	d102      	bne.n	801740a <_isatty_r+0x1a>
 8017404:	682b      	ldr	r3, [r5, #0]
 8017406:	b103      	cbz	r3, 801740a <_isatty_r+0x1a>
 8017408:	6023      	str	r3, [r4, #0]
 801740a:	bd38      	pop	{r3, r4, r5, pc}
 801740c:	2000c4b0 	.word	0x2000c4b0

08017410 <_lseek_r>:
 8017410:	b538      	push	{r3, r4, r5, lr}
 8017412:	4d07      	ldr	r5, [pc, #28]	; (8017430 <_lseek_r+0x20>)
 8017414:	4604      	mov	r4, r0
 8017416:	4608      	mov	r0, r1
 8017418:	4611      	mov	r1, r2
 801741a:	2200      	movs	r2, #0
 801741c:	602a      	str	r2, [r5, #0]
 801741e:	461a      	mov	r2, r3
 8017420:	f7e9 fbf9 	bl	8000c16 <_lseek>
 8017424:	1c43      	adds	r3, r0, #1
 8017426:	d102      	bne.n	801742e <_lseek_r+0x1e>
 8017428:	682b      	ldr	r3, [r5, #0]
 801742a:	b103      	cbz	r3, 801742e <_lseek_r+0x1e>
 801742c:	6023      	str	r3, [r4, #0]
 801742e:	bd38      	pop	{r3, r4, r5, pc}
 8017430:	2000c4b0 	.word	0x2000c4b0

08017434 <__malloc_lock>:
 8017434:	4801      	ldr	r0, [pc, #4]	; (801743c <__malloc_lock+0x8>)
 8017436:	f7ff bc30 	b.w	8016c9a <__retarget_lock_acquire_recursive>
 801743a:	bf00      	nop
 801743c:	2000c4a4 	.word	0x2000c4a4

08017440 <__malloc_unlock>:
 8017440:	4801      	ldr	r0, [pc, #4]	; (8017448 <__malloc_unlock+0x8>)
 8017442:	f7ff bc2b 	b.w	8016c9c <__retarget_lock_release_recursive>
 8017446:	bf00      	nop
 8017448:	2000c4a4 	.word	0x2000c4a4

0801744c <__sfputc_r>:
 801744c:	6893      	ldr	r3, [r2, #8]
 801744e:	3b01      	subs	r3, #1
 8017450:	2b00      	cmp	r3, #0
 8017452:	b410      	push	{r4}
 8017454:	6093      	str	r3, [r2, #8]
 8017456:	da07      	bge.n	8017468 <__sfputc_r+0x1c>
 8017458:	6994      	ldr	r4, [r2, #24]
 801745a:	42a3      	cmp	r3, r4
 801745c:	db01      	blt.n	8017462 <__sfputc_r+0x16>
 801745e:	290a      	cmp	r1, #10
 8017460:	d102      	bne.n	8017468 <__sfputc_r+0x1c>
 8017462:	bc10      	pop	{r4}
 8017464:	f7ff bea0 	b.w	80171a8 <__swbuf_r>
 8017468:	6813      	ldr	r3, [r2, #0]
 801746a:	1c58      	adds	r0, r3, #1
 801746c:	6010      	str	r0, [r2, #0]
 801746e:	7019      	strb	r1, [r3, #0]
 8017470:	4608      	mov	r0, r1
 8017472:	bc10      	pop	{r4}
 8017474:	4770      	bx	lr

08017476 <__sfputs_r>:
 8017476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017478:	4606      	mov	r6, r0
 801747a:	460f      	mov	r7, r1
 801747c:	4614      	mov	r4, r2
 801747e:	18d5      	adds	r5, r2, r3
 8017480:	42ac      	cmp	r4, r5
 8017482:	d101      	bne.n	8017488 <__sfputs_r+0x12>
 8017484:	2000      	movs	r0, #0
 8017486:	e007      	b.n	8017498 <__sfputs_r+0x22>
 8017488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801748c:	463a      	mov	r2, r7
 801748e:	4630      	mov	r0, r6
 8017490:	f7ff ffdc 	bl	801744c <__sfputc_r>
 8017494:	1c43      	adds	r3, r0, #1
 8017496:	d1f3      	bne.n	8017480 <__sfputs_r+0xa>
 8017498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801749c <_vfiprintf_r>:
 801749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a0:	460d      	mov	r5, r1
 80174a2:	b09d      	sub	sp, #116	; 0x74
 80174a4:	4614      	mov	r4, r2
 80174a6:	4698      	mov	r8, r3
 80174a8:	4606      	mov	r6, r0
 80174aa:	b118      	cbz	r0, 80174b4 <_vfiprintf_r+0x18>
 80174ac:	6983      	ldr	r3, [r0, #24]
 80174ae:	b90b      	cbnz	r3, 80174b4 <_vfiprintf_r+0x18>
 80174b0:	f7ff fb30 	bl	8016b14 <__sinit>
 80174b4:	4b89      	ldr	r3, [pc, #548]	; (80176dc <_vfiprintf_r+0x240>)
 80174b6:	429d      	cmp	r5, r3
 80174b8:	d11b      	bne.n	80174f2 <_vfiprintf_r+0x56>
 80174ba:	6875      	ldr	r5, [r6, #4]
 80174bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174be:	07d9      	lsls	r1, r3, #31
 80174c0:	d405      	bmi.n	80174ce <_vfiprintf_r+0x32>
 80174c2:	89ab      	ldrh	r3, [r5, #12]
 80174c4:	059a      	lsls	r2, r3, #22
 80174c6:	d402      	bmi.n	80174ce <_vfiprintf_r+0x32>
 80174c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174ca:	f7ff fbe6 	bl	8016c9a <__retarget_lock_acquire_recursive>
 80174ce:	89ab      	ldrh	r3, [r5, #12]
 80174d0:	071b      	lsls	r3, r3, #28
 80174d2:	d501      	bpl.n	80174d8 <_vfiprintf_r+0x3c>
 80174d4:	692b      	ldr	r3, [r5, #16]
 80174d6:	b9eb      	cbnz	r3, 8017514 <_vfiprintf_r+0x78>
 80174d8:	4629      	mov	r1, r5
 80174da:	4630      	mov	r0, r6
 80174dc:	f7ff fec8 	bl	8017270 <__swsetup_r>
 80174e0:	b1c0      	cbz	r0, 8017514 <_vfiprintf_r+0x78>
 80174e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174e4:	07dc      	lsls	r4, r3, #31
 80174e6:	d50e      	bpl.n	8017506 <_vfiprintf_r+0x6a>
 80174e8:	f04f 30ff 	mov.w	r0, #4294967295
 80174ec:	b01d      	add	sp, #116	; 0x74
 80174ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f2:	4b7b      	ldr	r3, [pc, #492]	; (80176e0 <_vfiprintf_r+0x244>)
 80174f4:	429d      	cmp	r5, r3
 80174f6:	d101      	bne.n	80174fc <_vfiprintf_r+0x60>
 80174f8:	68b5      	ldr	r5, [r6, #8]
 80174fa:	e7df      	b.n	80174bc <_vfiprintf_r+0x20>
 80174fc:	4b79      	ldr	r3, [pc, #484]	; (80176e4 <_vfiprintf_r+0x248>)
 80174fe:	429d      	cmp	r5, r3
 8017500:	bf08      	it	eq
 8017502:	68f5      	ldreq	r5, [r6, #12]
 8017504:	e7da      	b.n	80174bc <_vfiprintf_r+0x20>
 8017506:	89ab      	ldrh	r3, [r5, #12]
 8017508:	0598      	lsls	r0, r3, #22
 801750a:	d4ed      	bmi.n	80174e8 <_vfiprintf_r+0x4c>
 801750c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801750e:	f7ff fbc5 	bl	8016c9c <__retarget_lock_release_recursive>
 8017512:	e7e9      	b.n	80174e8 <_vfiprintf_r+0x4c>
 8017514:	2300      	movs	r3, #0
 8017516:	9309      	str	r3, [sp, #36]	; 0x24
 8017518:	2320      	movs	r3, #32
 801751a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801751e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017522:	2330      	movs	r3, #48	; 0x30
 8017524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80176e8 <_vfiprintf_r+0x24c>
 8017528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801752c:	f04f 0901 	mov.w	r9, #1
 8017530:	4623      	mov	r3, r4
 8017532:	469a      	mov	sl, r3
 8017534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017538:	b10a      	cbz	r2, 801753e <_vfiprintf_r+0xa2>
 801753a:	2a25      	cmp	r2, #37	; 0x25
 801753c:	d1f9      	bne.n	8017532 <_vfiprintf_r+0x96>
 801753e:	ebba 0b04 	subs.w	fp, sl, r4
 8017542:	d00b      	beq.n	801755c <_vfiprintf_r+0xc0>
 8017544:	465b      	mov	r3, fp
 8017546:	4622      	mov	r2, r4
 8017548:	4629      	mov	r1, r5
 801754a:	4630      	mov	r0, r6
 801754c:	f7ff ff93 	bl	8017476 <__sfputs_r>
 8017550:	3001      	adds	r0, #1
 8017552:	f000 80aa 	beq.w	80176aa <_vfiprintf_r+0x20e>
 8017556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017558:	445a      	add	r2, fp
 801755a:	9209      	str	r2, [sp, #36]	; 0x24
 801755c:	f89a 3000 	ldrb.w	r3, [sl]
 8017560:	2b00      	cmp	r3, #0
 8017562:	f000 80a2 	beq.w	80176aa <_vfiprintf_r+0x20e>
 8017566:	2300      	movs	r3, #0
 8017568:	f04f 32ff 	mov.w	r2, #4294967295
 801756c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017570:	f10a 0a01 	add.w	sl, sl, #1
 8017574:	9304      	str	r3, [sp, #16]
 8017576:	9307      	str	r3, [sp, #28]
 8017578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801757c:	931a      	str	r3, [sp, #104]	; 0x68
 801757e:	4654      	mov	r4, sl
 8017580:	2205      	movs	r2, #5
 8017582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017586:	4858      	ldr	r0, [pc, #352]	; (80176e8 <_vfiprintf_r+0x24c>)
 8017588:	f7e8 fe22 	bl	80001d0 <memchr>
 801758c:	9a04      	ldr	r2, [sp, #16]
 801758e:	b9d8      	cbnz	r0, 80175c8 <_vfiprintf_r+0x12c>
 8017590:	06d1      	lsls	r1, r2, #27
 8017592:	bf44      	itt	mi
 8017594:	2320      	movmi	r3, #32
 8017596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801759a:	0713      	lsls	r3, r2, #28
 801759c:	bf44      	itt	mi
 801759e:	232b      	movmi	r3, #43	; 0x2b
 80175a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175a4:	f89a 3000 	ldrb.w	r3, [sl]
 80175a8:	2b2a      	cmp	r3, #42	; 0x2a
 80175aa:	d015      	beq.n	80175d8 <_vfiprintf_r+0x13c>
 80175ac:	9a07      	ldr	r2, [sp, #28]
 80175ae:	4654      	mov	r4, sl
 80175b0:	2000      	movs	r0, #0
 80175b2:	f04f 0c0a 	mov.w	ip, #10
 80175b6:	4621      	mov	r1, r4
 80175b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175bc:	3b30      	subs	r3, #48	; 0x30
 80175be:	2b09      	cmp	r3, #9
 80175c0:	d94e      	bls.n	8017660 <_vfiprintf_r+0x1c4>
 80175c2:	b1b0      	cbz	r0, 80175f2 <_vfiprintf_r+0x156>
 80175c4:	9207      	str	r2, [sp, #28]
 80175c6:	e014      	b.n	80175f2 <_vfiprintf_r+0x156>
 80175c8:	eba0 0308 	sub.w	r3, r0, r8
 80175cc:	fa09 f303 	lsl.w	r3, r9, r3
 80175d0:	4313      	orrs	r3, r2
 80175d2:	9304      	str	r3, [sp, #16]
 80175d4:	46a2      	mov	sl, r4
 80175d6:	e7d2      	b.n	801757e <_vfiprintf_r+0xe2>
 80175d8:	9b03      	ldr	r3, [sp, #12]
 80175da:	1d19      	adds	r1, r3, #4
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	9103      	str	r1, [sp, #12]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	bfbb      	ittet	lt
 80175e4:	425b      	neglt	r3, r3
 80175e6:	f042 0202 	orrlt.w	r2, r2, #2
 80175ea:	9307      	strge	r3, [sp, #28]
 80175ec:	9307      	strlt	r3, [sp, #28]
 80175ee:	bfb8      	it	lt
 80175f0:	9204      	strlt	r2, [sp, #16]
 80175f2:	7823      	ldrb	r3, [r4, #0]
 80175f4:	2b2e      	cmp	r3, #46	; 0x2e
 80175f6:	d10c      	bne.n	8017612 <_vfiprintf_r+0x176>
 80175f8:	7863      	ldrb	r3, [r4, #1]
 80175fa:	2b2a      	cmp	r3, #42	; 0x2a
 80175fc:	d135      	bne.n	801766a <_vfiprintf_r+0x1ce>
 80175fe:	9b03      	ldr	r3, [sp, #12]
 8017600:	1d1a      	adds	r2, r3, #4
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	9203      	str	r2, [sp, #12]
 8017606:	2b00      	cmp	r3, #0
 8017608:	bfb8      	it	lt
 801760a:	f04f 33ff 	movlt.w	r3, #4294967295
 801760e:	3402      	adds	r4, #2
 8017610:	9305      	str	r3, [sp, #20]
 8017612:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80176ec <_vfiprintf_r+0x250>
 8017616:	7821      	ldrb	r1, [r4, #0]
 8017618:	2203      	movs	r2, #3
 801761a:	4650      	mov	r0, sl
 801761c:	f7e8 fdd8 	bl	80001d0 <memchr>
 8017620:	b140      	cbz	r0, 8017634 <_vfiprintf_r+0x198>
 8017622:	2340      	movs	r3, #64	; 0x40
 8017624:	eba0 000a 	sub.w	r0, r0, sl
 8017628:	fa03 f000 	lsl.w	r0, r3, r0
 801762c:	9b04      	ldr	r3, [sp, #16]
 801762e:	4303      	orrs	r3, r0
 8017630:	3401      	adds	r4, #1
 8017632:	9304      	str	r3, [sp, #16]
 8017634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017638:	482d      	ldr	r0, [pc, #180]	; (80176f0 <_vfiprintf_r+0x254>)
 801763a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801763e:	2206      	movs	r2, #6
 8017640:	f7e8 fdc6 	bl	80001d0 <memchr>
 8017644:	2800      	cmp	r0, #0
 8017646:	d03f      	beq.n	80176c8 <_vfiprintf_r+0x22c>
 8017648:	4b2a      	ldr	r3, [pc, #168]	; (80176f4 <_vfiprintf_r+0x258>)
 801764a:	bb1b      	cbnz	r3, 8017694 <_vfiprintf_r+0x1f8>
 801764c:	9b03      	ldr	r3, [sp, #12]
 801764e:	3307      	adds	r3, #7
 8017650:	f023 0307 	bic.w	r3, r3, #7
 8017654:	3308      	adds	r3, #8
 8017656:	9303      	str	r3, [sp, #12]
 8017658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801765a:	443b      	add	r3, r7
 801765c:	9309      	str	r3, [sp, #36]	; 0x24
 801765e:	e767      	b.n	8017530 <_vfiprintf_r+0x94>
 8017660:	fb0c 3202 	mla	r2, ip, r2, r3
 8017664:	460c      	mov	r4, r1
 8017666:	2001      	movs	r0, #1
 8017668:	e7a5      	b.n	80175b6 <_vfiprintf_r+0x11a>
 801766a:	2300      	movs	r3, #0
 801766c:	3401      	adds	r4, #1
 801766e:	9305      	str	r3, [sp, #20]
 8017670:	4619      	mov	r1, r3
 8017672:	f04f 0c0a 	mov.w	ip, #10
 8017676:	4620      	mov	r0, r4
 8017678:	f810 2b01 	ldrb.w	r2, [r0], #1
 801767c:	3a30      	subs	r2, #48	; 0x30
 801767e:	2a09      	cmp	r2, #9
 8017680:	d903      	bls.n	801768a <_vfiprintf_r+0x1ee>
 8017682:	2b00      	cmp	r3, #0
 8017684:	d0c5      	beq.n	8017612 <_vfiprintf_r+0x176>
 8017686:	9105      	str	r1, [sp, #20]
 8017688:	e7c3      	b.n	8017612 <_vfiprintf_r+0x176>
 801768a:	fb0c 2101 	mla	r1, ip, r1, r2
 801768e:	4604      	mov	r4, r0
 8017690:	2301      	movs	r3, #1
 8017692:	e7f0      	b.n	8017676 <_vfiprintf_r+0x1da>
 8017694:	ab03      	add	r3, sp, #12
 8017696:	9300      	str	r3, [sp, #0]
 8017698:	462a      	mov	r2, r5
 801769a:	4b17      	ldr	r3, [pc, #92]	; (80176f8 <_vfiprintf_r+0x25c>)
 801769c:	a904      	add	r1, sp, #16
 801769e:	4630      	mov	r0, r6
 80176a0:	f3af 8000 	nop.w
 80176a4:	4607      	mov	r7, r0
 80176a6:	1c78      	adds	r0, r7, #1
 80176a8:	d1d6      	bne.n	8017658 <_vfiprintf_r+0x1bc>
 80176aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176ac:	07d9      	lsls	r1, r3, #31
 80176ae:	d405      	bmi.n	80176bc <_vfiprintf_r+0x220>
 80176b0:	89ab      	ldrh	r3, [r5, #12]
 80176b2:	059a      	lsls	r2, r3, #22
 80176b4:	d402      	bmi.n	80176bc <_vfiprintf_r+0x220>
 80176b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176b8:	f7ff faf0 	bl	8016c9c <__retarget_lock_release_recursive>
 80176bc:	89ab      	ldrh	r3, [r5, #12]
 80176be:	065b      	lsls	r3, r3, #25
 80176c0:	f53f af12 	bmi.w	80174e8 <_vfiprintf_r+0x4c>
 80176c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176c6:	e711      	b.n	80174ec <_vfiprintf_r+0x50>
 80176c8:	ab03      	add	r3, sp, #12
 80176ca:	9300      	str	r3, [sp, #0]
 80176cc:	462a      	mov	r2, r5
 80176ce:	4b0a      	ldr	r3, [pc, #40]	; (80176f8 <_vfiprintf_r+0x25c>)
 80176d0:	a904      	add	r1, sp, #16
 80176d2:	4630      	mov	r0, r6
 80176d4:	f000 f880 	bl	80177d8 <_printf_i>
 80176d8:	e7e4      	b.n	80176a4 <_vfiprintf_r+0x208>
 80176da:	bf00      	nop
 80176dc:	0801af9c 	.word	0x0801af9c
 80176e0:	0801afbc 	.word	0x0801afbc
 80176e4:	0801af7c 	.word	0x0801af7c
 80176e8:	0801b08e 	.word	0x0801b08e
 80176ec:	0801b094 	.word	0x0801b094
 80176f0:	0801b098 	.word	0x0801b098
 80176f4:	00000000 	.word	0x00000000
 80176f8:	08017477 	.word	0x08017477

080176fc <_printf_common>:
 80176fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017700:	4616      	mov	r6, r2
 8017702:	4699      	mov	r9, r3
 8017704:	688a      	ldr	r2, [r1, #8]
 8017706:	690b      	ldr	r3, [r1, #16]
 8017708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801770c:	4293      	cmp	r3, r2
 801770e:	bfb8      	it	lt
 8017710:	4613      	movlt	r3, r2
 8017712:	6033      	str	r3, [r6, #0]
 8017714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017718:	4607      	mov	r7, r0
 801771a:	460c      	mov	r4, r1
 801771c:	b10a      	cbz	r2, 8017722 <_printf_common+0x26>
 801771e:	3301      	adds	r3, #1
 8017720:	6033      	str	r3, [r6, #0]
 8017722:	6823      	ldr	r3, [r4, #0]
 8017724:	0699      	lsls	r1, r3, #26
 8017726:	bf42      	ittt	mi
 8017728:	6833      	ldrmi	r3, [r6, #0]
 801772a:	3302      	addmi	r3, #2
 801772c:	6033      	strmi	r3, [r6, #0]
 801772e:	6825      	ldr	r5, [r4, #0]
 8017730:	f015 0506 	ands.w	r5, r5, #6
 8017734:	d106      	bne.n	8017744 <_printf_common+0x48>
 8017736:	f104 0a19 	add.w	sl, r4, #25
 801773a:	68e3      	ldr	r3, [r4, #12]
 801773c:	6832      	ldr	r2, [r6, #0]
 801773e:	1a9b      	subs	r3, r3, r2
 8017740:	42ab      	cmp	r3, r5
 8017742:	dc26      	bgt.n	8017792 <_printf_common+0x96>
 8017744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017748:	1e13      	subs	r3, r2, #0
 801774a:	6822      	ldr	r2, [r4, #0]
 801774c:	bf18      	it	ne
 801774e:	2301      	movne	r3, #1
 8017750:	0692      	lsls	r2, r2, #26
 8017752:	d42b      	bmi.n	80177ac <_printf_common+0xb0>
 8017754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017758:	4649      	mov	r1, r9
 801775a:	4638      	mov	r0, r7
 801775c:	47c0      	blx	r8
 801775e:	3001      	adds	r0, #1
 8017760:	d01e      	beq.n	80177a0 <_printf_common+0xa4>
 8017762:	6823      	ldr	r3, [r4, #0]
 8017764:	68e5      	ldr	r5, [r4, #12]
 8017766:	6832      	ldr	r2, [r6, #0]
 8017768:	f003 0306 	and.w	r3, r3, #6
 801776c:	2b04      	cmp	r3, #4
 801776e:	bf08      	it	eq
 8017770:	1aad      	subeq	r5, r5, r2
 8017772:	68a3      	ldr	r3, [r4, #8]
 8017774:	6922      	ldr	r2, [r4, #16]
 8017776:	bf0c      	ite	eq
 8017778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801777c:	2500      	movne	r5, #0
 801777e:	4293      	cmp	r3, r2
 8017780:	bfc4      	itt	gt
 8017782:	1a9b      	subgt	r3, r3, r2
 8017784:	18ed      	addgt	r5, r5, r3
 8017786:	2600      	movs	r6, #0
 8017788:	341a      	adds	r4, #26
 801778a:	42b5      	cmp	r5, r6
 801778c:	d11a      	bne.n	80177c4 <_printf_common+0xc8>
 801778e:	2000      	movs	r0, #0
 8017790:	e008      	b.n	80177a4 <_printf_common+0xa8>
 8017792:	2301      	movs	r3, #1
 8017794:	4652      	mov	r2, sl
 8017796:	4649      	mov	r1, r9
 8017798:	4638      	mov	r0, r7
 801779a:	47c0      	blx	r8
 801779c:	3001      	adds	r0, #1
 801779e:	d103      	bne.n	80177a8 <_printf_common+0xac>
 80177a0:	f04f 30ff 	mov.w	r0, #4294967295
 80177a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177a8:	3501      	adds	r5, #1
 80177aa:	e7c6      	b.n	801773a <_printf_common+0x3e>
 80177ac:	18e1      	adds	r1, r4, r3
 80177ae:	1c5a      	adds	r2, r3, #1
 80177b0:	2030      	movs	r0, #48	; 0x30
 80177b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80177b6:	4422      	add	r2, r4
 80177b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80177bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80177c0:	3302      	adds	r3, #2
 80177c2:	e7c7      	b.n	8017754 <_printf_common+0x58>
 80177c4:	2301      	movs	r3, #1
 80177c6:	4622      	mov	r2, r4
 80177c8:	4649      	mov	r1, r9
 80177ca:	4638      	mov	r0, r7
 80177cc:	47c0      	blx	r8
 80177ce:	3001      	adds	r0, #1
 80177d0:	d0e6      	beq.n	80177a0 <_printf_common+0xa4>
 80177d2:	3601      	adds	r6, #1
 80177d4:	e7d9      	b.n	801778a <_printf_common+0x8e>
	...

080177d8 <_printf_i>:
 80177d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177dc:	7e0f      	ldrb	r7, [r1, #24]
 80177de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80177e0:	2f78      	cmp	r7, #120	; 0x78
 80177e2:	4691      	mov	r9, r2
 80177e4:	4680      	mov	r8, r0
 80177e6:	460c      	mov	r4, r1
 80177e8:	469a      	mov	sl, r3
 80177ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80177ee:	d807      	bhi.n	8017800 <_printf_i+0x28>
 80177f0:	2f62      	cmp	r7, #98	; 0x62
 80177f2:	d80a      	bhi.n	801780a <_printf_i+0x32>
 80177f4:	2f00      	cmp	r7, #0
 80177f6:	f000 80d8 	beq.w	80179aa <_printf_i+0x1d2>
 80177fa:	2f58      	cmp	r7, #88	; 0x58
 80177fc:	f000 80a3 	beq.w	8017946 <_printf_i+0x16e>
 8017800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017808:	e03a      	b.n	8017880 <_printf_i+0xa8>
 801780a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801780e:	2b15      	cmp	r3, #21
 8017810:	d8f6      	bhi.n	8017800 <_printf_i+0x28>
 8017812:	a101      	add	r1, pc, #4	; (adr r1, 8017818 <_printf_i+0x40>)
 8017814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017818:	08017871 	.word	0x08017871
 801781c:	08017885 	.word	0x08017885
 8017820:	08017801 	.word	0x08017801
 8017824:	08017801 	.word	0x08017801
 8017828:	08017801 	.word	0x08017801
 801782c:	08017801 	.word	0x08017801
 8017830:	08017885 	.word	0x08017885
 8017834:	08017801 	.word	0x08017801
 8017838:	08017801 	.word	0x08017801
 801783c:	08017801 	.word	0x08017801
 8017840:	08017801 	.word	0x08017801
 8017844:	08017991 	.word	0x08017991
 8017848:	080178b5 	.word	0x080178b5
 801784c:	08017973 	.word	0x08017973
 8017850:	08017801 	.word	0x08017801
 8017854:	08017801 	.word	0x08017801
 8017858:	080179b3 	.word	0x080179b3
 801785c:	08017801 	.word	0x08017801
 8017860:	080178b5 	.word	0x080178b5
 8017864:	08017801 	.word	0x08017801
 8017868:	08017801 	.word	0x08017801
 801786c:	0801797b 	.word	0x0801797b
 8017870:	682b      	ldr	r3, [r5, #0]
 8017872:	1d1a      	adds	r2, r3, #4
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	602a      	str	r2, [r5, #0]
 8017878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801787c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017880:	2301      	movs	r3, #1
 8017882:	e0a3      	b.n	80179cc <_printf_i+0x1f4>
 8017884:	6820      	ldr	r0, [r4, #0]
 8017886:	6829      	ldr	r1, [r5, #0]
 8017888:	0606      	lsls	r6, r0, #24
 801788a:	f101 0304 	add.w	r3, r1, #4
 801788e:	d50a      	bpl.n	80178a6 <_printf_i+0xce>
 8017890:	680e      	ldr	r6, [r1, #0]
 8017892:	602b      	str	r3, [r5, #0]
 8017894:	2e00      	cmp	r6, #0
 8017896:	da03      	bge.n	80178a0 <_printf_i+0xc8>
 8017898:	232d      	movs	r3, #45	; 0x2d
 801789a:	4276      	negs	r6, r6
 801789c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80178a0:	485e      	ldr	r0, [pc, #376]	; (8017a1c <_printf_i+0x244>)
 80178a2:	230a      	movs	r3, #10
 80178a4:	e019      	b.n	80178da <_printf_i+0x102>
 80178a6:	680e      	ldr	r6, [r1, #0]
 80178a8:	602b      	str	r3, [r5, #0]
 80178aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80178ae:	bf18      	it	ne
 80178b0:	b236      	sxthne	r6, r6
 80178b2:	e7ef      	b.n	8017894 <_printf_i+0xbc>
 80178b4:	682b      	ldr	r3, [r5, #0]
 80178b6:	6820      	ldr	r0, [r4, #0]
 80178b8:	1d19      	adds	r1, r3, #4
 80178ba:	6029      	str	r1, [r5, #0]
 80178bc:	0601      	lsls	r1, r0, #24
 80178be:	d501      	bpl.n	80178c4 <_printf_i+0xec>
 80178c0:	681e      	ldr	r6, [r3, #0]
 80178c2:	e002      	b.n	80178ca <_printf_i+0xf2>
 80178c4:	0646      	lsls	r6, r0, #25
 80178c6:	d5fb      	bpl.n	80178c0 <_printf_i+0xe8>
 80178c8:	881e      	ldrh	r6, [r3, #0]
 80178ca:	4854      	ldr	r0, [pc, #336]	; (8017a1c <_printf_i+0x244>)
 80178cc:	2f6f      	cmp	r7, #111	; 0x6f
 80178ce:	bf0c      	ite	eq
 80178d0:	2308      	moveq	r3, #8
 80178d2:	230a      	movne	r3, #10
 80178d4:	2100      	movs	r1, #0
 80178d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80178da:	6865      	ldr	r5, [r4, #4]
 80178dc:	60a5      	str	r5, [r4, #8]
 80178de:	2d00      	cmp	r5, #0
 80178e0:	bfa2      	ittt	ge
 80178e2:	6821      	ldrge	r1, [r4, #0]
 80178e4:	f021 0104 	bicge.w	r1, r1, #4
 80178e8:	6021      	strge	r1, [r4, #0]
 80178ea:	b90e      	cbnz	r6, 80178f0 <_printf_i+0x118>
 80178ec:	2d00      	cmp	r5, #0
 80178ee:	d04d      	beq.n	801798c <_printf_i+0x1b4>
 80178f0:	4615      	mov	r5, r2
 80178f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80178f6:	fb03 6711 	mls	r7, r3, r1, r6
 80178fa:	5dc7      	ldrb	r7, [r0, r7]
 80178fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017900:	4637      	mov	r7, r6
 8017902:	42bb      	cmp	r3, r7
 8017904:	460e      	mov	r6, r1
 8017906:	d9f4      	bls.n	80178f2 <_printf_i+0x11a>
 8017908:	2b08      	cmp	r3, #8
 801790a:	d10b      	bne.n	8017924 <_printf_i+0x14c>
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	07de      	lsls	r6, r3, #31
 8017910:	d508      	bpl.n	8017924 <_printf_i+0x14c>
 8017912:	6923      	ldr	r3, [r4, #16]
 8017914:	6861      	ldr	r1, [r4, #4]
 8017916:	4299      	cmp	r1, r3
 8017918:	bfde      	ittt	le
 801791a:	2330      	movle	r3, #48	; 0x30
 801791c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017924:	1b52      	subs	r2, r2, r5
 8017926:	6122      	str	r2, [r4, #16]
 8017928:	f8cd a000 	str.w	sl, [sp]
 801792c:	464b      	mov	r3, r9
 801792e:	aa03      	add	r2, sp, #12
 8017930:	4621      	mov	r1, r4
 8017932:	4640      	mov	r0, r8
 8017934:	f7ff fee2 	bl	80176fc <_printf_common>
 8017938:	3001      	adds	r0, #1
 801793a:	d14c      	bne.n	80179d6 <_printf_i+0x1fe>
 801793c:	f04f 30ff 	mov.w	r0, #4294967295
 8017940:	b004      	add	sp, #16
 8017942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017946:	4835      	ldr	r0, [pc, #212]	; (8017a1c <_printf_i+0x244>)
 8017948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801794c:	6829      	ldr	r1, [r5, #0]
 801794e:	6823      	ldr	r3, [r4, #0]
 8017950:	f851 6b04 	ldr.w	r6, [r1], #4
 8017954:	6029      	str	r1, [r5, #0]
 8017956:	061d      	lsls	r5, r3, #24
 8017958:	d514      	bpl.n	8017984 <_printf_i+0x1ac>
 801795a:	07df      	lsls	r7, r3, #31
 801795c:	bf44      	itt	mi
 801795e:	f043 0320 	orrmi.w	r3, r3, #32
 8017962:	6023      	strmi	r3, [r4, #0]
 8017964:	b91e      	cbnz	r6, 801796e <_printf_i+0x196>
 8017966:	6823      	ldr	r3, [r4, #0]
 8017968:	f023 0320 	bic.w	r3, r3, #32
 801796c:	6023      	str	r3, [r4, #0]
 801796e:	2310      	movs	r3, #16
 8017970:	e7b0      	b.n	80178d4 <_printf_i+0xfc>
 8017972:	6823      	ldr	r3, [r4, #0]
 8017974:	f043 0320 	orr.w	r3, r3, #32
 8017978:	6023      	str	r3, [r4, #0]
 801797a:	2378      	movs	r3, #120	; 0x78
 801797c:	4828      	ldr	r0, [pc, #160]	; (8017a20 <_printf_i+0x248>)
 801797e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017982:	e7e3      	b.n	801794c <_printf_i+0x174>
 8017984:	0659      	lsls	r1, r3, #25
 8017986:	bf48      	it	mi
 8017988:	b2b6      	uxthmi	r6, r6
 801798a:	e7e6      	b.n	801795a <_printf_i+0x182>
 801798c:	4615      	mov	r5, r2
 801798e:	e7bb      	b.n	8017908 <_printf_i+0x130>
 8017990:	682b      	ldr	r3, [r5, #0]
 8017992:	6826      	ldr	r6, [r4, #0]
 8017994:	6961      	ldr	r1, [r4, #20]
 8017996:	1d18      	adds	r0, r3, #4
 8017998:	6028      	str	r0, [r5, #0]
 801799a:	0635      	lsls	r5, r6, #24
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	d501      	bpl.n	80179a4 <_printf_i+0x1cc>
 80179a0:	6019      	str	r1, [r3, #0]
 80179a2:	e002      	b.n	80179aa <_printf_i+0x1d2>
 80179a4:	0670      	lsls	r0, r6, #25
 80179a6:	d5fb      	bpl.n	80179a0 <_printf_i+0x1c8>
 80179a8:	8019      	strh	r1, [r3, #0]
 80179aa:	2300      	movs	r3, #0
 80179ac:	6123      	str	r3, [r4, #16]
 80179ae:	4615      	mov	r5, r2
 80179b0:	e7ba      	b.n	8017928 <_printf_i+0x150>
 80179b2:	682b      	ldr	r3, [r5, #0]
 80179b4:	1d1a      	adds	r2, r3, #4
 80179b6:	602a      	str	r2, [r5, #0]
 80179b8:	681d      	ldr	r5, [r3, #0]
 80179ba:	6862      	ldr	r2, [r4, #4]
 80179bc:	2100      	movs	r1, #0
 80179be:	4628      	mov	r0, r5
 80179c0:	f7e8 fc06 	bl	80001d0 <memchr>
 80179c4:	b108      	cbz	r0, 80179ca <_printf_i+0x1f2>
 80179c6:	1b40      	subs	r0, r0, r5
 80179c8:	6060      	str	r0, [r4, #4]
 80179ca:	6863      	ldr	r3, [r4, #4]
 80179cc:	6123      	str	r3, [r4, #16]
 80179ce:	2300      	movs	r3, #0
 80179d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179d4:	e7a8      	b.n	8017928 <_printf_i+0x150>
 80179d6:	6923      	ldr	r3, [r4, #16]
 80179d8:	462a      	mov	r2, r5
 80179da:	4649      	mov	r1, r9
 80179dc:	4640      	mov	r0, r8
 80179de:	47d0      	blx	sl
 80179e0:	3001      	adds	r0, #1
 80179e2:	d0ab      	beq.n	801793c <_printf_i+0x164>
 80179e4:	6823      	ldr	r3, [r4, #0]
 80179e6:	079b      	lsls	r3, r3, #30
 80179e8:	d413      	bmi.n	8017a12 <_printf_i+0x23a>
 80179ea:	68e0      	ldr	r0, [r4, #12]
 80179ec:	9b03      	ldr	r3, [sp, #12]
 80179ee:	4298      	cmp	r0, r3
 80179f0:	bfb8      	it	lt
 80179f2:	4618      	movlt	r0, r3
 80179f4:	e7a4      	b.n	8017940 <_printf_i+0x168>
 80179f6:	2301      	movs	r3, #1
 80179f8:	4632      	mov	r2, r6
 80179fa:	4649      	mov	r1, r9
 80179fc:	4640      	mov	r0, r8
 80179fe:	47d0      	blx	sl
 8017a00:	3001      	adds	r0, #1
 8017a02:	d09b      	beq.n	801793c <_printf_i+0x164>
 8017a04:	3501      	adds	r5, #1
 8017a06:	68e3      	ldr	r3, [r4, #12]
 8017a08:	9903      	ldr	r1, [sp, #12]
 8017a0a:	1a5b      	subs	r3, r3, r1
 8017a0c:	42ab      	cmp	r3, r5
 8017a0e:	dcf2      	bgt.n	80179f6 <_printf_i+0x21e>
 8017a10:	e7eb      	b.n	80179ea <_printf_i+0x212>
 8017a12:	2500      	movs	r5, #0
 8017a14:	f104 0619 	add.w	r6, r4, #25
 8017a18:	e7f5      	b.n	8017a06 <_printf_i+0x22e>
 8017a1a:	bf00      	nop
 8017a1c:	0801b09f 	.word	0x0801b09f
 8017a20:	0801b0b0 	.word	0x0801b0b0

08017a24 <_read_r>:
 8017a24:	b538      	push	{r3, r4, r5, lr}
 8017a26:	4d07      	ldr	r5, [pc, #28]	; (8017a44 <_read_r+0x20>)
 8017a28:	4604      	mov	r4, r0
 8017a2a:	4608      	mov	r0, r1
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	2200      	movs	r2, #0
 8017a30:	602a      	str	r2, [r5, #0]
 8017a32:	461a      	mov	r2, r3
 8017a34:	f7e9 f892 	bl	8000b5c <_read>
 8017a38:	1c43      	adds	r3, r0, #1
 8017a3a:	d102      	bne.n	8017a42 <_read_r+0x1e>
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	b103      	cbz	r3, 8017a42 <_read_r+0x1e>
 8017a40:	6023      	str	r3, [r4, #0]
 8017a42:	bd38      	pop	{r3, r4, r5, pc}
 8017a44:	2000c4b0 	.word	0x2000c4b0

08017a48 <abort>:
 8017a48:	b508      	push	{r3, lr}
 8017a4a:	2006      	movs	r0, #6
 8017a4c:	f000 f82c 	bl	8017aa8 <raise>
 8017a50:	2001      	movs	r0, #1
 8017a52:	f7e9 f879 	bl	8000b48 <_exit>

08017a56 <_raise_r>:
 8017a56:	291f      	cmp	r1, #31
 8017a58:	b538      	push	{r3, r4, r5, lr}
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	460d      	mov	r5, r1
 8017a5e:	d904      	bls.n	8017a6a <_raise_r+0x14>
 8017a60:	2316      	movs	r3, #22
 8017a62:	6003      	str	r3, [r0, #0]
 8017a64:	f04f 30ff 	mov.w	r0, #4294967295
 8017a68:	bd38      	pop	{r3, r4, r5, pc}
 8017a6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017a6c:	b112      	cbz	r2, 8017a74 <_raise_r+0x1e>
 8017a6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017a72:	b94b      	cbnz	r3, 8017a88 <_raise_r+0x32>
 8017a74:	4620      	mov	r0, r4
 8017a76:	f000 f831 	bl	8017adc <_getpid_r>
 8017a7a:	462a      	mov	r2, r5
 8017a7c:	4601      	mov	r1, r0
 8017a7e:	4620      	mov	r0, r4
 8017a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a84:	f000 b818 	b.w	8017ab8 <_kill_r>
 8017a88:	2b01      	cmp	r3, #1
 8017a8a:	d00a      	beq.n	8017aa2 <_raise_r+0x4c>
 8017a8c:	1c59      	adds	r1, r3, #1
 8017a8e:	d103      	bne.n	8017a98 <_raise_r+0x42>
 8017a90:	2316      	movs	r3, #22
 8017a92:	6003      	str	r3, [r0, #0]
 8017a94:	2001      	movs	r0, #1
 8017a96:	e7e7      	b.n	8017a68 <_raise_r+0x12>
 8017a98:	2400      	movs	r4, #0
 8017a9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	4798      	blx	r3
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	e7e0      	b.n	8017a68 <_raise_r+0x12>
	...

08017aa8 <raise>:
 8017aa8:	4b02      	ldr	r3, [pc, #8]	; (8017ab4 <raise+0xc>)
 8017aaa:	4601      	mov	r1, r0
 8017aac:	6818      	ldr	r0, [r3, #0]
 8017aae:	f7ff bfd2 	b.w	8017a56 <_raise_r>
 8017ab2:	bf00      	nop
 8017ab4:	2000001c 	.word	0x2000001c

08017ab8 <_kill_r>:
 8017ab8:	b538      	push	{r3, r4, r5, lr}
 8017aba:	4d07      	ldr	r5, [pc, #28]	; (8017ad8 <_kill_r+0x20>)
 8017abc:	2300      	movs	r3, #0
 8017abe:	4604      	mov	r4, r0
 8017ac0:	4608      	mov	r0, r1
 8017ac2:	4611      	mov	r1, r2
 8017ac4:	602b      	str	r3, [r5, #0]
 8017ac6:	f7e9 f82d 	bl	8000b24 <_kill>
 8017aca:	1c43      	adds	r3, r0, #1
 8017acc:	d102      	bne.n	8017ad4 <_kill_r+0x1c>
 8017ace:	682b      	ldr	r3, [r5, #0]
 8017ad0:	b103      	cbz	r3, 8017ad4 <_kill_r+0x1c>
 8017ad2:	6023      	str	r3, [r4, #0]
 8017ad4:	bd38      	pop	{r3, r4, r5, pc}
 8017ad6:	bf00      	nop
 8017ad8:	2000c4b0 	.word	0x2000c4b0

08017adc <_getpid_r>:
 8017adc:	f7e9 b81a 	b.w	8000b14 <_getpid>

08017ae0 <_init>:
 8017ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ae2:	bf00      	nop
 8017ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ae6:	bc08      	pop	{r3}
 8017ae8:	469e      	mov	lr, r3
 8017aea:	4770      	bx	lr

08017aec <_fini>:
 8017aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aee:	bf00      	nop
 8017af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017af2:	bc08      	pop	{r3}
 8017af4:	469e      	mov	lr, r3
 8017af6:	4770      	bx	lr
